

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Mar 30 14:26:38 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	text36,local,class=CODE,merge=1,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,delta=2
    58                           	psect	text43,local,class=CODE,merge=1,delta=2
    59                           	psect	text44,local,class=CODE,merge=1,delta=2
    60                           	psect	text45,local,class=CODE,merge=1,delta=2
    61                           	psect	text46,local,class=CODE,merge=1,delta=2
    62                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text54,local,class=CODE,merge=1,delta=2
    70                           	psect	text55,local,class=CODE,merge=1,delta=2
    71                           	psect	text56,local,class=CODE,merge=1,delta=2
    72                           	psect	text57,local,class=CODE,merge=1,delta=2
    73                           	psect	text58,local,class=CODE,merge=1,delta=2
    74                           	psect	text59,local,class=CODE,merge=1,delta=2
    75                           	psect	text60,local,class=CODE,merge=1,delta=2
    76                           	psect	text61,local,class=CODE,merge=1,delta=2
    77                           	psect	text62,local,class=CODE,merge=1,delta=2
    78                           	psect	text63,local,class=CODE,merge=1,delta=2
    79                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text65,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text66,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text67,local,class=CODE,merge=1,delta=2
    83                           	psect	text68,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text71,local,class=CODE,merge=1,delta=2
    87                           	psect	text72,local,class=CODE,merge=1,delta=2
    88                           	psect	text73,local,class=CODE,merge=1,delta=2
    89                           	psect	text74,local,class=CODE,merge=1,delta=2
    90                           	psect	text75,local,class=CODE,merge=1,delta=2
    91                           	psect	text76,local,class=CODE,merge=1,delta=2
    92                           	psect	text77,local,class=CODE,merge=1,delta=2
    93                           	dabs	1,0x7E,2
    94  0000                     
    95                           ; Version 1.45
    96                           ; Generated 16/11/2017 GMT
    97                           ; 
    98                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    99                           ; All rights reserved.
   100                           ; 
   101                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   102                           ; 
   103                           ; Redistribution and use in source and binary forms, with or without modification, are
   104                           ; permitted provided that the following conditions are met:
   105                           ; 
   106                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   107                           ;        conditions and the following disclaimer.
   108                           ; 
   109                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   110                           ;        of conditions and the following disclaimer in the documentation and/or other
   111                           ;        materials provided with the distribution.
   112                           ; 
   113                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   114                           ;        software without specific prior written permission.
   115                           ; 
   116                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   117                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   118                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   119                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   120                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   121                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   122                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   123                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   124                           ; 
   125                           ; 
   126                           ; Code-generator required, PIC16F1619 Definitions
   127                           ; 
   128                           ; SFR Addresses
   129  0000                     	;# 
   130  0001                     	;# 
   131  0002                     	;# 
   132  0003                     	;# 
   133  0004                     	;# 
   134  0005                     	;# 
   135  0006                     	;# 
   136  0007                     	;# 
   137  0008                     	;# 
   138  0009                     	;# 
   139  000A                     	;# 
   140  000B                     	;# 
   141  000C                     	;# 
   142  000D                     	;# 
   143  000E                     	;# 
   144  0010                     	;# 
   145  0011                     	;# 
   146  0012                     	;# 
   147  0013                     	;# 
   148  0014                     	;# 
   149  0015                     	;# 
   150  0016                     	;# 
   151  0016                     	;# 
   152  0017                     	;# 
   153  0018                     	;# 
   154  0019                     	;# 
   155  001A                     	;# 
   156  001A                     	;# 
   157  001B                     	;# 
   158  001B                     	;# 
   159  001C                     	;# 
   160  001D                     	;# 
   161  001E                     	;# 
   162  001F                     	;# 
   163  008C                     	;# 
   164  008D                     	;# 
   165  008E                     	;# 
   166  0090                     	;# 
   167  0091                     	;# 
   168  0092                     	;# 
   169  0093                     	;# 
   170  0094                     	;# 
   171  0095                     	;# 
   172  0096                     	;# 
   173  0098                     	;# 
   174  0099                     	;# 
   175  009A                     	;# 
   176  009B                     	;# 
   177  009B                     	;# 
   178  009C                     	;# 
   179  009D                     	;# 
   180  009E                     	;# 
   181  009F                     	;# 
   182  010C                     	;# 
   183  010D                     	;# 
   184  010E                     	;# 
   185  0111                     	;# 
   186  0112                     	;# 
   187  0113                     	;# 
   188  0114                     	;# 
   189  0115                     	;# 
   190  0116                     	;# 
   191  0117                     	;# 
   192  0118                     	;# 
   193  0119                     	;# 
   194  011C                     	;# 
   195  018C                     	;# 
   196  018D                     	;# 
   197  018E                     	;# 
   198  0191                     	;# 
   199  0191                     	;# 
   200  0192                     	;# 
   201  0193                     	;# 
   202  0193                     	;# 
   203  0194                     	;# 
   204  0195                     	;# 
   205  0196                     	;# 
   206  0197                     	;# 
   207  0199                     	;# 
   208  0199                     	;# 
   209  0199                     	;# 
   210  019A                     	;# 
   211  019A                     	;# 
   212  019A                     	;# 
   213  019B                     	;# 
   214  019B                     	;# 
   215  019B                     	;# 
   216  019B                     	;# 
   217  019B                     	;# 
   218  019C                     	;# 
   219  019C                     	;# 
   220  019C                     	;# 
   221  019D                     	;# 
   222  019D                     	;# 
   223  019D                     	;# 
   224  019E                     	;# 
   225  019E                     	;# 
   226  019E                     	;# 
   227  019F                     	;# 
   228  019F                     	;# 
   229  019F                     	;# 
   230  019F                     	;# 
   231  019F                     	;# 
   232  020C                     	;# 
   233  020D                     	;# 
   234  020E                     	;# 
   235  0211                     	;# 
   236  0211                     	;# 
   237  0212                     	;# 
   238  0212                     	;# 
   239  0213                     	;# 
   240  0213                     	;# 
   241  0214                     	;# 
   242  0214                     	;# 
   243  0215                     	;# 
   244  0215                     	;# 
   245  0215                     	;# 
   246  0215                     	;# 
   247  0216                     	;# 
   248  0216                     	;# 
   249  0217                     	;# 
   250  0217                     	;# 
   251  028C                     	;# 
   252  028D                     	;# 
   253  028E                     	;# 
   254  0291                     	;# 
   255  0291                     	;# 
   256  0292                     	;# 
   257  0293                     	;# 
   258  0294                     	;# 
   259  0298                     	;# 
   260  0298                     	;# 
   261  0299                     	;# 
   262  029A                     	;# 
   263  029B                     	;# 
   264  029E                     	;# 
   265  030C                     	;# 
   266  030D                     	;# 
   267  030E                     	;# 
   268  038C                     	;# 
   269  038D                     	;# 
   270  038E                     	;# 
   271  0391                     	;# 
   272  0392                     	;# 
   273  0393                     	;# 
   274  0394                     	;# 
   275  0395                     	;# 
   276  0396                     	;# 
   277  0397                     	;# 
   278  0398                     	;# 
   279  0399                     	;# 
   280  040E                     	;# 
   281  0413                     	;# 
   282  0413                     	;# 
   283  0414                     	;# 
   284  0414                     	;# 
   285  0415                     	;# 
   286  0416                     	;# 
   287  0417                     	;# 
   288  0418                     	;# 
   289  041A                     	;# 
   290  041A                     	;# 
   291  041B                     	;# 
   292  041B                     	;# 
   293  041C                     	;# 
   294  041D                     	;# 
   295  041E                     	;# 
   296  041F                     	;# 
   297  0493                     	;# 
   298  0494                     	;# 
   299  0495                     	;# 
   300  0496                     	;# 
   301  049A                     	;# 
   302  049B                     	;# 
   303  049C                     	;# 
   304  049D                     	;# 
   305  058C                     	;# 
   306  058C                     	;# 
   307  058D                     	;# 
   308  058E                     	;# 
   309  058E                     	;# 
   310  058F                     	;# 
   311  0590                     	;# 
   312  0590                     	;# 
   313  0591                     	;# 
   314  0592                     	;# 
   315  0592                     	;# 
   316  0593                     	;# 
   317  0594                     	;# 
   318  0594                     	;# 
   319  0595                     	;# 
   320  0596                     	;# 
   321  0596                     	;# 
   322  0597                     	;# 
   323  0598                     	;# 
   324  0599                     	;# 
   325  059A                     	;# 
   326  059B                     	;# 
   327  059B                     	;# 
   328  059C                     	;# 
   329  059D                     	;# 
   330  060C                     	;# 
   331  060C                     	;# 
   332  060D                     	;# 
   333  060E                     	;# 
   334  060F                     	;# 
   335  060F                     	;# 
   336  0610                     	;# 
   337  0611                     	;# 
   338  0612                     	;# 
   339  0613                     	;# 
   340  0614                     	;# 
   341  0617                     	;# 
   342  0618                     	;# 
   343  0619                     	;# 
   344  061A                     	;# 
   345  061B                     	;# 
   346  061C                     	;# 
   347  0691                     	;# 
   348  0692                     	;# 
   349  0693                     	;# 
   350  0694                     	;# 
   351  0695                     	;# 
   352  0696                     	;# 
   353  0697                     	;# 
   354  0699                     	;# 
   355  069A                     	;# 
   356  0711                     	;# 
   357  0712                     	;# 
   358  0713                     	;# 
   359  0714                     	;# 
   360  0715                     	;# 
   361  0718                     	;# 
   362  0718                     	;# 
   363  0719                     	;# 
   364  071A                     	;# 
   365  071A                     	;# 
   366  071B                     	;# 
   367  071C                     	;# 
   368  071D                     	;# 
   369  0791                     	;# 
   370  0791                     	;# 
   371  0792                     	;# 
   372  0793                     	;# 
   373  0793                     	;# 
   374  0794                     	;# 
   375  0795                     	;# 
   376  0795                     	;# 
   377  0796                     	;# 
   378  0797                     	;# 
   379  0797                     	;# 
   380  0798                     	;# 
   381  0799                     	;# 
   382  079A                     	;# 
   383  080C                     	;# 
   384  080C                     	;# 
   385  080D                     	;# 
   386  080E                     	;# 
   387  080E                     	;# 
   388  080F                     	;# 
   389  0810                     	;# 
   390  0810                     	;# 
   391  0811                     	;# 
   392  0812                     	;# 
   393  0812                     	;# 
   394  0813                     	;# 
   395  0814                     	;# 
   396  0815                     	;# 
   397  0816                     	;# 
   398  0817                     	;# 
   399  0818                     	;# 
   400  0819                     	;# 
   401  081A                     	;# 
   402  081A                     	;# 
   403  081B                     	;# 
   404  081C                     	;# 
   405  081C                     	;# 
   406  081D                     	;# 
   407  088C                     	;# 
   408  088D                     	;# 
   409  088E                     	;# 
   410  088F                     	;# 
   411  088F                     	;# 
   412  0890                     	;# 
   413  0891                     	;# 
   414  0892                     	;# 
   415  0893                     	;# 
   416  0893                     	;# 
   417  0894                     	;# 
   418  0895                     	;# 
   419  0896                     	;# 
   420  0897                     	;# 
   421  0897                     	;# 
   422  0898                     	;# 
   423  0899                     	;# 
   424  0D8C                     	;# 
   425  0D8C                     	;# 
   426  0D8D                     	;# 
   427  0D8E                     	;# 
   428  0D8F                     	;# 
   429  0D8F                     	;# 
   430  0D90                     	;# 
   431  0D91                     	;# 
   432  0D92                     	;# 
   433  0D92                     	;# 
   434  0D93                     	;# 
   435  0D94                     	;# 
   436  0D95                     	;# 
   437  0D95                     	;# 
   438  0D96                     	;# 
   439  0D97                     	;# 
   440  0D98                     	;# 
   441  0D99                     	;# 
   442  0D9A                     	;# 
   443  0D9B                     	;# 
   444  0D9C                     	;# 
   445  0D9D                     	;# 
   446  0D9E                     	;# 
   447  0D9E                     	;# 
   448  0D9F                     	;# 
   449  0DA0                     	;# 
   450  0DA1                     	;# 
   451  0DA1                     	;# 
   452  0DA2                     	;# 
   453  0DA3                     	;# 
   454  0DA4                     	;# 
   455  0DA4                     	;# 
   456  0DA5                     	;# 
   457  0DA6                     	;# 
   458  0DA7                     	;# 
   459  0DA7                     	;# 
   460  0DA8                     	;# 
   461  0DA9                     	;# 
   462  0DAA                     	;# 
   463  0DAB                     	;# 
   464  0DAC                     	;# 
   465  0DAD                     	;# 
   466  0DAE                     	;# 
   467  0DAF                     	;# 
   468  0E0F                     	;# 
   469  0E10                     	;# 
   470  0E11                     	;# 
   471  0E12                     	;# 
   472  0E13                     	;# 
   473  0E14                     	;# 
   474  0E15                     	;# 
   475  0E16                     	;# 
   476  0E17                     	;# 
   477  0E18                     	;# 
   478  0E19                     	;# 
   479  0E1A                     	;# 
   480  0E1B                     	;# 
   481  0E1C                     	;# 
   482  0E1D                     	;# 
   483  0E1E                     	;# 
   484  0E1F                     	;# 
   485  0E20                     	;# 
   486  0E21                     	;# 
   487  0E22                     	;# 
   488  0E23                     	;# 
   489  0E24                     	;# 
   490  0E25                     	;# 
   491  0E26                     	;# 
   492  0E27                     	;# 
   493  0E28                     	;# 
   494  0E29                     	;# 
   495  0E2A                     	;# 
   496  0E2B                     	;# 
   497  0E2C                     	;# 
   498  0E2D                     	;# 
   499  0E2E                     	;# 
   500  0E90                     	;# 
   501  0E91                     	;# 
   502  0E92                     	;# 
   503  0E94                     	;# 
   504  0E95                     	;# 
   505  0E9C                     	;# 
   506  0E9D                     	;# 
   507  0E9E                     	;# 
   508  0E9F                     	;# 
   509  0EA0                     	;# 
   510  0EA1                     	;# 
   511  0EA2                     	;# 
   512  0EA3                     	;# 
   513  0EA4                     	;# 
   514  0EA5                     	;# 
   515  0EA6                     	;# 
   516  0EA7                     	;# 
   517  0F0F                     	;# 
   518  0F10                     	;# 
   519  0F11                     	;# 
   520  0F12                     	;# 
   521  0F13                     	;# 
   522  0F14                     	;# 
   523  0F15                     	;# 
   524  0F16                     	;# 
   525  0F17                     	;# 
   526  0F18                     	;# 
   527  0F19                     	;# 
   528  0F1A                     	;# 
   529  0F1B                     	;# 
   530  0F1C                     	;# 
   531  0F1D                     	;# 
   532  0F1E                     	;# 
   533  0F1F                     	;# 
   534  0F20                     	;# 
   535  0F21                     	;# 
   536  0F22                     	;# 
   537  0F23                     	;# 
   538  0F24                     	;# 
   539  0F25                     	;# 
   540  0F26                     	;# 
   541  0F27                     	;# 
   542  0F28                     	;# 
   543  0F29                     	;# 
   544  0F2A                     	;# 
   545  0F2B                     	;# 
   546  0F2C                     	;# 
   547  0F2D                     	;# 
   548  0F2E                     	;# 
   549  0F2F                     	;# 
   550  0F30                     	;# 
   551  0F31                     	;# 
   552  0F32                     	;# 
   553  0F33                     	;# 
   554  0F34                     	;# 
   555  0F35                     	;# 
   556  0F36                     	;# 
   557  0F37                     	;# 
   558  0FE4                     	;# 
   559  0FE5                     	;# 
   560  0FE6                     	;# 
   561  0FE7                     	;# 
   562  0FE8                     	;# 
   563  0FE9                     	;# 
   564  0FEA                     	;# 
   565  0FEB                     	;# 
   566  0FED                     	;# 
   567  0FEE                     	;# 
   568  0FEF                     	;# 
   569  0000                     	;# 
   570  0001                     	;# 
   571  0002                     	;# 
   572  0003                     	;# 
   573  0004                     	;# 
   574  0005                     	;# 
   575  0006                     	;# 
   576  0007                     	;# 
   577  0008                     	;# 
   578  0009                     	;# 
   579  000A                     	;# 
   580  000B                     	;# 
   581  000C                     	;# 
   582  000D                     	;# 
   583  000E                     	;# 
   584  0010                     	;# 
   585  0011                     	;# 
   586  0012                     	;# 
   587  0013                     	;# 
   588  0014                     	;# 
   589  0015                     	;# 
   590  0016                     	;# 
   591  0016                     	;# 
   592  0017                     	;# 
   593  0018                     	;# 
   594  0019                     	;# 
   595  001A                     	;# 
   596  001A                     	;# 
   597  001B                     	;# 
   598  001B                     	;# 
   599  001C                     	;# 
   600  001D                     	;# 
   601  001E                     	;# 
   602  001F                     	;# 
   603  008C                     	;# 
   604  008D                     	;# 
   605  008E                     	;# 
   606  0090                     	;# 
   607  0091                     	;# 
   608  0092                     	;# 
   609  0093                     	;# 
   610  0094                     	;# 
   611  0095                     	;# 
   612  0096                     	;# 
   613  0098                     	;# 
   614  0099                     	;# 
   615  009A                     	;# 
   616  009B                     	;# 
   617  009B                     	;# 
   618  009C                     	;# 
   619  009D                     	;# 
   620  009E                     	;# 
   621  009F                     	;# 
   622  010C                     	;# 
   623  010D                     	;# 
   624  010E                     	;# 
   625  0111                     	;# 
   626  0112                     	;# 
   627  0113                     	;# 
   628  0114                     	;# 
   629  0115                     	;# 
   630  0116                     	;# 
   631  0117                     	;# 
   632  0118                     	;# 
   633  0119                     	;# 
   634  011C                     	;# 
   635  018C                     	;# 
   636  018D                     	;# 
   637  018E                     	;# 
   638  0191                     	;# 
   639  0191                     	;# 
   640  0192                     	;# 
   641  0193                     	;# 
   642  0193                     	;# 
   643  0194                     	;# 
   644  0195                     	;# 
   645  0196                     	;# 
   646  0197                     	;# 
   647  0199                     	;# 
   648  0199                     	;# 
   649  0199                     	;# 
   650  019A                     	;# 
   651  019A                     	;# 
   652  019A                     	;# 
   653  019B                     	;# 
   654  019B                     	;# 
   655  019B                     	;# 
   656  019B                     	;# 
   657  019B                     	;# 
   658  019C                     	;# 
   659  019C                     	;# 
   660  019C                     	;# 
   661  019D                     	;# 
   662  019D                     	;# 
   663  019D                     	;# 
   664  019E                     	;# 
   665  019E                     	;# 
   666  019E                     	;# 
   667  019F                     	;# 
   668  019F                     	;# 
   669  019F                     	;# 
   670  019F                     	;# 
   671  019F                     	;# 
   672  020C                     	;# 
   673  020D                     	;# 
   674  020E                     	;# 
   675  0211                     	;# 
   676  0211                     	;# 
   677  0212                     	;# 
   678  0212                     	;# 
   679  0213                     	;# 
   680  0213                     	;# 
   681  0214                     	;# 
   682  0214                     	;# 
   683  0215                     	;# 
   684  0215                     	;# 
   685  0215                     	;# 
   686  0215                     	;# 
   687  0216                     	;# 
   688  0216                     	;# 
   689  0217                     	;# 
   690  0217                     	;# 
   691  028C                     	;# 
   692  028D                     	;# 
   693  028E                     	;# 
   694  0291                     	;# 
   695  0291                     	;# 
   696  0292                     	;# 
   697  0293                     	;# 
   698  0294                     	;# 
   699  0298                     	;# 
   700  0298                     	;# 
   701  0299                     	;# 
   702  029A                     	;# 
   703  029B                     	;# 
   704  029E                     	;# 
   705  030C                     	;# 
   706  030D                     	;# 
   707  030E                     	;# 
   708  038C                     	;# 
   709  038D                     	;# 
   710  038E                     	;# 
   711  0391                     	;# 
   712  0392                     	;# 
   713  0393                     	;# 
   714  0394                     	;# 
   715  0395                     	;# 
   716  0396                     	;# 
   717  0397                     	;# 
   718  0398                     	;# 
   719  0399                     	;# 
   720  040E                     	;# 
   721  0413                     	;# 
   722  0413                     	;# 
   723  0414                     	;# 
   724  0414                     	;# 
   725  0415                     	;# 
   726  0416                     	;# 
   727  0417                     	;# 
   728  0418                     	;# 
   729  041A                     	;# 
   730  041A                     	;# 
   731  041B                     	;# 
   732  041B                     	;# 
   733  041C                     	;# 
   734  041D                     	;# 
   735  041E                     	;# 
   736  041F                     	;# 
   737  0493                     	;# 
   738  0494                     	;# 
   739  0495                     	;# 
   740  0496                     	;# 
   741  049A                     	;# 
   742  049B                     	;# 
   743  049C                     	;# 
   744  049D                     	;# 
   745  058C                     	;# 
   746  058C                     	;# 
   747  058D                     	;# 
   748  058E                     	;# 
   749  058E                     	;# 
   750  058F                     	;# 
   751  0590                     	;# 
   752  0590                     	;# 
   753  0591                     	;# 
   754  0592                     	;# 
   755  0592                     	;# 
   756  0593                     	;# 
   757  0594                     	;# 
   758  0594                     	;# 
   759  0595                     	;# 
   760  0596                     	;# 
   761  0596                     	;# 
   762  0597                     	;# 
   763  0598                     	;# 
   764  0599                     	;# 
   765  059A                     	;# 
   766  059B                     	;# 
   767  059B                     	;# 
   768  059C                     	;# 
   769  059D                     	;# 
   770  060C                     	;# 
   771  060C                     	;# 
   772  060D                     	;# 
   773  060E                     	;# 
   774  060F                     	;# 
   775  060F                     	;# 
   776  0610                     	;# 
   777  0611                     	;# 
   778  0612                     	;# 
   779  0613                     	;# 
   780  0614                     	;# 
   781  0617                     	;# 
   782  0618                     	;# 
   783  0619                     	;# 
   784  061A                     	;# 
   785  061B                     	;# 
   786  061C                     	;# 
   787  0691                     	;# 
   788  0692                     	;# 
   789  0693                     	;# 
   790  0694                     	;# 
   791  0695                     	;# 
   792  0696                     	;# 
   793  0697                     	;# 
   794  0699                     	;# 
   795  069A                     	;# 
   796  0711                     	;# 
   797  0712                     	;# 
   798  0713                     	;# 
   799  0714                     	;# 
   800  0715                     	;# 
   801  0718                     	;# 
   802  0718                     	;# 
   803  0719                     	;# 
   804  071A                     	;# 
   805  071A                     	;# 
   806  071B                     	;# 
   807  071C                     	;# 
   808  071D                     	;# 
   809  0791                     	;# 
   810  0791                     	;# 
   811  0792                     	;# 
   812  0793                     	;# 
   813  0793                     	;# 
   814  0794                     	;# 
   815  0795                     	;# 
   816  0795                     	;# 
   817  0796                     	;# 
   818  0797                     	;# 
   819  0797                     	;# 
   820  0798                     	;# 
   821  0799                     	;# 
   822  079A                     	;# 
   823  080C                     	;# 
   824  080C                     	;# 
   825  080D                     	;# 
   826  080E                     	;# 
   827  080E                     	;# 
   828  080F                     	;# 
   829  0810                     	;# 
   830  0810                     	;# 
   831  0811                     	;# 
   832  0812                     	;# 
   833  0812                     	;# 
   834  0813                     	;# 
   835  0814                     	;# 
   836  0815                     	;# 
   837  0816                     	;# 
   838  0817                     	;# 
   839  0818                     	;# 
   840  0819                     	;# 
   841  081A                     	;# 
   842  081A                     	;# 
   843  081B                     	;# 
   844  081C                     	;# 
   845  081C                     	;# 
   846  081D                     	;# 
   847  088C                     	;# 
   848  088D                     	;# 
   849  088E                     	;# 
   850  088F                     	;# 
   851  088F                     	;# 
   852  0890                     	;# 
   853  0891                     	;# 
   854  0892                     	;# 
   855  0893                     	;# 
   856  0893                     	;# 
   857  0894                     	;# 
   858  0895                     	;# 
   859  0896                     	;# 
   860  0897                     	;# 
   861  0897                     	;# 
   862  0898                     	;# 
   863  0899                     	;# 
   864  0D8C                     	;# 
   865  0D8C                     	;# 
   866  0D8D                     	;# 
   867  0D8E                     	;# 
   868  0D8F                     	;# 
   869  0D8F                     	;# 
   870  0D90                     	;# 
   871  0D91                     	;# 
   872  0D92                     	;# 
   873  0D92                     	;# 
   874  0D93                     	;# 
   875  0D94                     	;# 
   876  0D95                     	;# 
   877  0D95                     	;# 
   878  0D96                     	;# 
   879  0D97                     	;# 
   880  0D98                     	;# 
   881  0D99                     	;# 
   882  0D9A                     	;# 
   883  0D9B                     	;# 
   884  0D9C                     	;# 
   885  0D9D                     	;# 
   886  0D9E                     	;# 
   887  0D9E                     	;# 
   888  0D9F                     	;# 
   889  0DA0                     	;# 
   890  0DA1                     	;# 
   891  0DA1                     	;# 
   892  0DA2                     	;# 
   893  0DA3                     	;# 
   894  0DA4                     	;# 
   895  0DA4                     	;# 
   896  0DA5                     	;# 
   897  0DA6                     	;# 
   898  0DA7                     	;# 
   899  0DA7                     	;# 
   900  0DA8                     	;# 
   901  0DA9                     	;# 
   902  0DAA                     	;# 
   903  0DAB                     	;# 
   904  0DAC                     	;# 
   905  0DAD                     	;# 
   906  0DAE                     	;# 
   907  0DAF                     	;# 
   908  0E0F                     	;# 
   909  0E10                     	;# 
   910  0E11                     	;# 
   911  0E12                     	;# 
   912  0E13                     	;# 
   913  0E14                     	;# 
   914  0E15                     	;# 
   915  0E16                     	;# 
   916  0E17                     	;# 
   917  0E18                     	;# 
   918  0E19                     	;# 
   919  0E1A                     	;# 
   920  0E1B                     	;# 
   921  0E1C                     	;# 
   922  0E1D                     	;# 
   923  0E1E                     	;# 
   924  0E1F                     	;# 
   925  0E20                     	;# 
   926  0E21                     	;# 
   927  0E22                     	;# 
   928  0E23                     	;# 
   929  0E24                     	;# 
   930  0E25                     	;# 
   931  0E26                     	;# 
   932  0E27                     	;# 
   933  0E28                     	;# 
   934  0E29                     	;# 
   935  0E2A                     	;# 
   936  0E2B                     	;# 
   937  0E2C                     	;# 
   938  0E2D                     	;# 
   939  0E2E                     	;# 
   940  0E90                     	;# 
   941  0E91                     	;# 
   942  0E92                     	;# 
   943  0E94                     	;# 
   944  0E95                     	;# 
   945  0E9C                     	;# 
   946  0E9D                     	;# 
   947  0E9E                     	;# 
   948  0E9F                     	;# 
   949  0EA0                     	;# 
   950  0EA1                     	;# 
   951  0EA2                     	;# 
   952  0EA3                     	;# 
   953  0EA4                     	;# 
   954  0EA5                     	;# 
   955  0EA6                     	;# 
   956  0EA7                     	;# 
   957  0F0F                     	;# 
   958  0F10                     	;# 
   959  0F11                     	;# 
   960  0F12                     	;# 
   961  0F13                     	;# 
   962  0F14                     	;# 
   963  0F15                     	;# 
   964  0F16                     	;# 
   965  0F17                     	;# 
   966  0F18                     	;# 
   967  0F19                     	;# 
   968  0F1A                     	;# 
   969  0F1B                     	;# 
   970  0F1C                     	;# 
   971  0F1D                     	;# 
   972  0F1E                     	;# 
   973  0F1F                     	;# 
   974  0F20                     	;# 
   975  0F21                     	;# 
   976  0F22                     	;# 
   977  0F23                     	;# 
   978  0F24                     	;# 
   979  0F25                     	;# 
   980  0F26                     	;# 
   981  0F27                     	;# 
   982  0F28                     	;# 
   983  0F29                     	;# 
   984  0F2A                     	;# 
   985  0F2B                     	;# 
   986  0F2C                     	;# 
   987  0F2D                     	;# 
   988  0F2E                     	;# 
   989  0F2F                     	;# 
   990  0F30                     	;# 
   991  0F31                     	;# 
   992  0F32                     	;# 
   993  0F33                     	;# 
   994  0F34                     	;# 
   995  0F35                     	;# 
   996  0F36                     	;# 
   997  0F37                     	;# 
   998  0FE4                     	;# 
   999  0FE5                     	;# 
  1000  0FE6                     	;# 
  1001  0FE7                     	;# 
  1002  0FE8                     	;# 
  1003  0FE9                     	;# 
  1004  0FEA                     	;# 
  1005  0FEB                     	;# 
  1006  0FED                     	;# 
  1007  0FEE                     	;# 
  1008  0FEF                     	;# 
  1009  0000                     	;# 
  1010  0001                     	;# 
  1011  0002                     	;# 
  1012  0003                     	;# 
  1013  0004                     	;# 
  1014  0005                     	;# 
  1015  0006                     	;# 
  1016  0007                     	;# 
  1017  0008                     	;# 
  1018  0009                     	;# 
  1019  000A                     	;# 
  1020  000B                     	;# 
  1021  000C                     	;# 
  1022  000D                     	;# 
  1023  000E                     	;# 
  1024  0010                     	;# 
  1025  0011                     	;# 
  1026  0012                     	;# 
  1027  0013                     	;# 
  1028  0014                     	;# 
  1029  0015                     	;# 
  1030  0016                     	;# 
  1031  0016                     	;# 
  1032  0017                     	;# 
  1033  0018                     	;# 
  1034  0019                     	;# 
  1035  001A                     	;# 
  1036  001A                     	;# 
  1037  001B                     	;# 
  1038  001B                     	;# 
  1039  001C                     	;# 
  1040  001D                     	;# 
  1041  001E                     	;# 
  1042  001F                     	;# 
  1043  008C                     	;# 
  1044  008D                     	;# 
  1045  008E                     	;# 
  1046  0090                     	;# 
  1047  0091                     	;# 
  1048  0092                     	;# 
  1049  0093                     	;# 
  1050  0094                     	;# 
  1051  0095                     	;# 
  1052  0096                     	;# 
  1053  0098                     	;# 
  1054  0099                     	;# 
  1055  009A                     	;# 
  1056  009B                     	;# 
  1057  009B                     	;# 
  1058  009C                     	;# 
  1059  009D                     	;# 
  1060  009E                     	;# 
  1061  009F                     	;# 
  1062  010C                     	;# 
  1063  010D                     	;# 
  1064  010E                     	;# 
  1065  0111                     	;# 
  1066  0112                     	;# 
  1067  0113                     	;# 
  1068  0114                     	;# 
  1069  0115                     	;# 
  1070  0116                     	;# 
  1071  0117                     	;# 
  1072  0118                     	;# 
  1073  0119                     	;# 
  1074  011C                     	;# 
  1075  018C                     	;# 
  1076  018D                     	;# 
  1077  018E                     	;# 
  1078  0191                     	;# 
  1079  0191                     	;# 
  1080  0192                     	;# 
  1081  0193                     	;# 
  1082  0193                     	;# 
  1083  0194                     	;# 
  1084  0195                     	;# 
  1085  0196                     	;# 
  1086  0197                     	;# 
  1087  0199                     	;# 
  1088  0199                     	;# 
  1089  0199                     	;# 
  1090  019A                     	;# 
  1091  019A                     	;# 
  1092  019A                     	;# 
  1093  019B                     	;# 
  1094  019B                     	;# 
  1095  019B                     	;# 
  1096  019B                     	;# 
  1097  019B                     	;# 
  1098  019C                     	;# 
  1099  019C                     	;# 
  1100  019C                     	;# 
  1101  019D                     	;# 
  1102  019D                     	;# 
  1103  019D                     	;# 
  1104  019E                     	;# 
  1105  019E                     	;# 
  1106  019E                     	;# 
  1107  019F                     	;# 
  1108  019F                     	;# 
  1109  019F                     	;# 
  1110  019F                     	;# 
  1111  019F                     	;# 
  1112  020C                     	;# 
  1113  020D                     	;# 
  1114  020E                     	;# 
  1115  0211                     	;# 
  1116  0211                     	;# 
  1117  0212                     	;# 
  1118  0212                     	;# 
  1119  0213                     	;# 
  1120  0213                     	;# 
  1121  0214                     	;# 
  1122  0214                     	;# 
  1123  0215                     	;# 
  1124  0215                     	;# 
  1125  0215                     	;# 
  1126  0215                     	;# 
  1127  0216                     	;# 
  1128  0216                     	;# 
  1129  0217                     	;# 
  1130  0217                     	;# 
  1131  028C                     	;# 
  1132  028D                     	;# 
  1133  028E                     	;# 
  1134  0291                     	;# 
  1135  0291                     	;# 
  1136  0292                     	;# 
  1137  0293                     	;# 
  1138  0294                     	;# 
  1139  0298                     	;# 
  1140  0298                     	;# 
  1141  0299                     	;# 
  1142  029A                     	;# 
  1143  029B                     	;# 
  1144  029E                     	;# 
  1145  030C                     	;# 
  1146  030D                     	;# 
  1147  030E                     	;# 
  1148  038C                     	;# 
  1149  038D                     	;# 
  1150  038E                     	;# 
  1151  0391                     	;# 
  1152  0392                     	;# 
  1153  0393                     	;# 
  1154  0394                     	;# 
  1155  0395                     	;# 
  1156  0396                     	;# 
  1157  0397                     	;# 
  1158  0398                     	;# 
  1159  0399                     	;# 
  1160  040E                     	;# 
  1161  0413                     	;# 
  1162  0413                     	;# 
  1163  0414                     	;# 
  1164  0414                     	;# 
  1165  0415                     	;# 
  1166  0416                     	;# 
  1167  0417                     	;# 
  1168  0418                     	;# 
  1169  041A                     	;# 
  1170  041A                     	;# 
  1171  041B                     	;# 
  1172  041B                     	;# 
  1173  041C                     	;# 
  1174  041D                     	;# 
  1175  041E                     	;# 
  1176  041F                     	;# 
  1177  0493                     	;# 
  1178  0494                     	;# 
  1179  0495                     	;# 
  1180  0496                     	;# 
  1181  049A                     	;# 
  1182  049B                     	;# 
  1183  049C                     	;# 
  1184  049D                     	;# 
  1185  058C                     	;# 
  1186  058C                     	;# 
  1187  058D                     	;# 
  1188  058E                     	;# 
  1189  058E                     	;# 
  1190  058F                     	;# 
  1191  0590                     	;# 
  1192  0590                     	;# 
  1193  0591                     	;# 
  1194  0592                     	;# 
  1195  0592                     	;# 
  1196  0593                     	;# 
  1197  0594                     	;# 
  1198  0594                     	;# 
  1199  0595                     	;# 
  1200  0596                     	;# 
  1201  0596                     	;# 
  1202  0597                     	;# 
  1203  0598                     	;# 
  1204  0599                     	;# 
  1205  059A                     	;# 
  1206  059B                     	;# 
  1207  059B                     	;# 
  1208  059C                     	;# 
  1209  059D                     	;# 
  1210  060C                     	;# 
  1211  060C                     	;# 
  1212  060D                     	;# 
  1213  060E                     	;# 
  1214  060F                     	;# 
  1215  060F                     	;# 
  1216  0610                     	;# 
  1217  0611                     	;# 
  1218  0612                     	;# 
  1219  0613                     	;# 
  1220  0614                     	;# 
  1221  0617                     	;# 
  1222  0618                     	;# 
  1223  0619                     	;# 
  1224  061A                     	;# 
  1225  061B                     	;# 
  1226  061C                     	;# 
  1227  0691                     	;# 
  1228  0692                     	;# 
  1229  0693                     	;# 
  1230  0694                     	;# 
  1231  0695                     	;# 
  1232  0696                     	;# 
  1233  0697                     	;# 
  1234  0699                     	;# 
  1235  069A                     	;# 
  1236  0711                     	;# 
  1237  0712                     	;# 
  1238  0713                     	;# 
  1239  0714                     	;# 
  1240  0715                     	;# 
  1241  0718                     	;# 
  1242  0718                     	;# 
  1243  0719                     	;# 
  1244  071A                     	;# 
  1245  071A                     	;# 
  1246  071B                     	;# 
  1247  071C                     	;# 
  1248  071D                     	;# 
  1249  0791                     	;# 
  1250  0791                     	;# 
  1251  0792                     	;# 
  1252  0793                     	;# 
  1253  0793                     	;# 
  1254  0794                     	;# 
  1255  0795                     	;# 
  1256  0795                     	;# 
  1257  0796                     	;# 
  1258  0797                     	;# 
  1259  0797                     	;# 
  1260  0798                     	;# 
  1261  0799                     	;# 
  1262  079A                     	;# 
  1263  080C                     	;# 
  1264  080C                     	;# 
  1265  080D                     	;# 
  1266  080E                     	;# 
  1267  080E                     	;# 
  1268  080F                     	;# 
  1269  0810                     	;# 
  1270  0810                     	;# 
  1271  0811                     	;# 
  1272  0812                     	;# 
  1273  0812                     	;# 
  1274  0813                     	;# 
  1275  0814                     	;# 
  1276  0815                     	;# 
  1277  0816                     	;# 
  1278  0817                     	;# 
  1279  0818                     	;# 
  1280  0819                     	;# 
  1281  081A                     	;# 
  1282  081A                     	;# 
  1283  081B                     	;# 
  1284  081C                     	;# 
  1285  081C                     	;# 
  1286  081D                     	;# 
  1287  088C                     	;# 
  1288  088D                     	;# 
  1289  088E                     	;# 
  1290  088F                     	;# 
  1291  088F                     	;# 
  1292  0890                     	;# 
  1293  0891                     	;# 
  1294  0892                     	;# 
  1295  0893                     	;# 
  1296  0893                     	;# 
  1297  0894                     	;# 
  1298  0895                     	;# 
  1299  0896                     	;# 
  1300  0897                     	;# 
  1301  0897                     	;# 
  1302  0898                     	;# 
  1303  0899                     	;# 
  1304  0D8C                     	;# 
  1305  0D8C                     	;# 
  1306  0D8D                     	;# 
  1307  0D8E                     	;# 
  1308  0D8F                     	;# 
  1309  0D8F                     	;# 
  1310  0D90                     	;# 
  1311  0D91                     	;# 
  1312  0D92                     	;# 
  1313  0D92                     	;# 
  1314  0D93                     	;# 
  1315  0D94                     	;# 
  1316  0D95                     	;# 
  1317  0D95                     	;# 
  1318  0D96                     	;# 
  1319  0D97                     	;# 
  1320  0D98                     	;# 
  1321  0D99                     	;# 
  1322  0D9A                     	;# 
  1323  0D9B                     	;# 
  1324  0D9C                     	;# 
  1325  0D9D                     	;# 
  1326  0D9E                     	;# 
  1327  0D9E                     	;# 
  1328  0D9F                     	;# 
  1329  0DA0                     	;# 
  1330  0DA1                     	;# 
  1331  0DA1                     	;# 
  1332  0DA2                     	;# 
  1333  0DA3                     	;# 
  1334  0DA4                     	;# 
  1335  0DA4                     	;# 
  1336  0DA5                     	;# 
  1337  0DA6                     	;# 
  1338  0DA7                     	;# 
  1339  0DA7                     	;# 
  1340  0DA8                     	;# 
  1341  0DA9                     	;# 
  1342  0DAA                     	;# 
  1343  0DAB                     	;# 
  1344  0DAC                     	;# 
  1345  0DAD                     	;# 
  1346  0DAE                     	;# 
  1347  0DAF                     	;# 
  1348  0E0F                     	;# 
  1349  0E10                     	;# 
  1350  0E11                     	;# 
  1351  0E12                     	;# 
  1352  0E13                     	;# 
  1353  0E14                     	;# 
  1354  0E15                     	;# 
  1355  0E16                     	;# 
  1356  0E17                     	;# 
  1357  0E18                     	;# 
  1358  0E19                     	;# 
  1359  0E1A                     	;# 
  1360  0E1B                     	;# 
  1361  0E1C                     	;# 
  1362  0E1D                     	;# 
  1363  0E1E                     	;# 
  1364  0E1F                     	;# 
  1365  0E20                     	;# 
  1366  0E21                     	;# 
  1367  0E22                     	;# 
  1368  0E23                     	;# 
  1369  0E24                     	;# 
  1370  0E25                     	;# 
  1371  0E26                     	;# 
  1372  0E27                     	;# 
  1373  0E28                     	;# 
  1374  0E29                     	;# 
  1375  0E2A                     	;# 
  1376  0E2B                     	;# 
  1377  0E2C                     	;# 
  1378  0E2D                     	;# 
  1379  0E2E                     	;# 
  1380  0E90                     	;# 
  1381  0E91                     	;# 
  1382  0E92                     	;# 
  1383  0E94                     	;# 
  1384  0E95                     	;# 
  1385  0E9C                     	;# 
  1386  0E9D                     	;# 
  1387  0E9E                     	;# 
  1388  0E9F                     	;# 
  1389  0EA0                     	;# 
  1390  0EA1                     	;# 
  1391  0EA2                     	;# 
  1392  0EA3                     	;# 
  1393  0EA4                     	;# 
  1394  0EA5                     	;# 
  1395  0EA6                     	;# 
  1396  0EA7                     	;# 
  1397  0F0F                     	;# 
  1398  0F10                     	;# 
  1399  0F11                     	;# 
  1400  0F12                     	;# 
  1401  0F13                     	;# 
  1402  0F14                     	;# 
  1403  0F15                     	;# 
  1404  0F16                     	;# 
  1405  0F17                     	;# 
  1406  0F18                     	;# 
  1407  0F19                     	;# 
  1408  0F1A                     	;# 
  1409  0F1B                     	;# 
  1410  0F1C                     	;# 
  1411  0F1D                     	;# 
  1412  0F1E                     	;# 
  1413  0F1F                     	;# 
  1414  0F20                     	;# 
  1415  0F21                     	;# 
  1416  0F22                     	;# 
  1417  0F23                     	;# 
  1418  0F24                     	;# 
  1419  0F25                     	;# 
  1420  0F26                     	;# 
  1421  0F27                     	;# 
  1422  0F28                     	;# 
  1423  0F29                     	;# 
  1424  0F2A                     	;# 
  1425  0F2B                     	;# 
  1426  0F2C                     	;# 
  1427  0F2D                     	;# 
  1428  0F2E                     	;# 
  1429  0F2F                     	;# 
  1430  0F30                     	;# 
  1431  0F31                     	;# 
  1432  0F32                     	;# 
  1433  0F33                     	;# 
  1434  0F34                     	;# 
  1435  0F35                     	;# 
  1436  0F36                     	;# 
  1437  0F37                     	;# 
  1438  0FE4                     	;# 
  1439  0FE5                     	;# 
  1440  0FE6                     	;# 
  1441  0FE7                     	;# 
  1442  0FE8                     	;# 
  1443  0FE9                     	;# 
  1444  0FEA                     	;# 
  1445  0FEB                     	;# 
  1446  0FED                     	;# 
  1447  0FEE                     	;# 
  1448  0FEF                     	;# 
  1449  0000                     	;# 
  1450  0001                     	;# 
  1451  0002                     	;# 
  1452  0003                     	;# 
  1453  0004                     	;# 
  1454  0005                     	;# 
  1455  0006                     	;# 
  1456  0007                     	;# 
  1457  0008                     	;# 
  1458  0009                     	;# 
  1459  000A                     	;# 
  1460  000B                     	;# 
  1461  000C                     	;# 
  1462  000D                     	;# 
  1463  000E                     	;# 
  1464  0010                     	;# 
  1465  0011                     	;# 
  1466  0012                     	;# 
  1467  0013                     	;# 
  1468  0014                     	;# 
  1469  0015                     	;# 
  1470  0016                     	;# 
  1471  0016                     	;# 
  1472  0017                     	;# 
  1473  0018                     	;# 
  1474  0019                     	;# 
  1475  001A                     	;# 
  1476  001A                     	;# 
  1477  001B                     	;# 
  1478  001B                     	;# 
  1479  001C                     	;# 
  1480  001D                     	;# 
  1481  001E                     	;# 
  1482  001F                     	;# 
  1483  008C                     	;# 
  1484  008D                     	;# 
  1485  008E                     	;# 
  1486  0090                     	;# 
  1487  0091                     	;# 
  1488  0092                     	;# 
  1489  0093                     	;# 
  1490  0094                     	;# 
  1491  0095                     	;# 
  1492  0096                     	;# 
  1493  0098                     	;# 
  1494  0099                     	;# 
  1495  009A                     	;# 
  1496  009B                     	;# 
  1497  009B                     	;# 
  1498  009C                     	;# 
  1499  009D                     	;# 
  1500  009E                     	;# 
  1501  009F                     	;# 
  1502  010C                     	;# 
  1503  010D                     	;# 
  1504  010E                     	;# 
  1505  0111                     	;# 
  1506  0112                     	;# 
  1507  0113                     	;# 
  1508  0114                     	;# 
  1509  0115                     	;# 
  1510  0116                     	;# 
  1511  0117                     	;# 
  1512  0118                     	;# 
  1513  0119                     	;# 
  1514  011C                     	;# 
  1515  018C                     	;# 
  1516  018D                     	;# 
  1517  018E                     	;# 
  1518  0191                     	;# 
  1519  0191                     	;# 
  1520  0192                     	;# 
  1521  0193                     	;# 
  1522  0193                     	;# 
  1523  0194                     	;# 
  1524  0195                     	;# 
  1525  0196                     	;# 
  1526  0197                     	;# 
  1527  0199                     	;# 
  1528  0199                     	;# 
  1529  0199                     	;# 
  1530  019A                     	;# 
  1531  019A                     	;# 
  1532  019A                     	;# 
  1533  019B                     	;# 
  1534  019B                     	;# 
  1535  019B                     	;# 
  1536  019B                     	;# 
  1537  019B                     	;# 
  1538  019C                     	;# 
  1539  019C                     	;# 
  1540  019C                     	;# 
  1541  019D                     	;# 
  1542  019D                     	;# 
  1543  019D                     	;# 
  1544  019E                     	;# 
  1545  019E                     	;# 
  1546  019E                     	;# 
  1547  019F                     	;# 
  1548  019F                     	;# 
  1549  019F                     	;# 
  1550  019F                     	;# 
  1551  019F                     	;# 
  1552  020C                     	;# 
  1553  020D                     	;# 
  1554  020E                     	;# 
  1555  0211                     	;# 
  1556  0211                     	;# 
  1557  0212                     	;# 
  1558  0212                     	;# 
  1559  0213                     	;# 
  1560  0213                     	;# 
  1561  0214                     	;# 
  1562  0214                     	;# 
  1563  0215                     	;# 
  1564  0215                     	;# 
  1565  0215                     	;# 
  1566  0215                     	;# 
  1567  0216                     	;# 
  1568  0216                     	;# 
  1569  0217                     	;# 
  1570  0217                     	;# 
  1571  028C                     	;# 
  1572  028D                     	;# 
  1573  028E                     	;# 
  1574  0291                     	;# 
  1575  0291                     	;# 
  1576  0292                     	;# 
  1577  0293                     	;# 
  1578  0294                     	;# 
  1579  0298                     	;# 
  1580  0298                     	;# 
  1581  0299                     	;# 
  1582  029A                     	;# 
  1583  029B                     	;# 
  1584  029E                     	;# 
  1585  030C                     	;# 
  1586  030D                     	;# 
  1587  030E                     	;# 
  1588  038C                     	;# 
  1589  038D                     	;# 
  1590  038E                     	;# 
  1591  0391                     	;# 
  1592  0392                     	;# 
  1593  0393                     	;# 
  1594  0394                     	;# 
  1595  0395                     	;# 
  1596  0396                     	;# 
  1597  0397                     	;# 
  1598  0398                     	;# 
  1599  0399                     	;# 
  1600  040E                     	;# 
  1601  0413                     	;# 
  1602  0413                     	;# 
  1603  0414                     	;# 
  1604  0414                     	;# 
  1605  0415                     	;# 
  1606  0416                     	;# 
  1607  0417                     	;# 
  1608  0418                     	;# 
  1609  041A                     	;# 
  1610  041A                     	;# 
  1611  041B                     	;# 
  1612  041B                     	;# 
  1613  041C                     	;# 
  1614  041D                     	;# 
  1615  041E                     	;# 
  1616  041F                     	;# 
  1617  0493                     	;# 
  1618  0494                     	;# 
  1619  0495                     	;# 
  1620  0496                     	;# 
  1621  049A                     	;# 
  1622  049B                     	;# 
  1623  049C                     	;# 
  1624  049D                     	;# 
  1625  058C                     	;# 
  1626  058C                     	;# 
  1627  058D                     	;# 
  1628  058E                     	;# 
  1629  058E                     	;# 
  1630  058F                     	;# 
  1631  0590                     	;# 
  1632  0590                     	;# 
  1633  0591                     	;# 
  1634  0592                     	;# 
  1635  0592                     	;# 
  1636  0593                     	;# 
  1637  0594                     	;# 
  1638  0594                     	;# 
  1639  0595                     	;# 
  1640  0596                     	;# 
  1641  0596                     	;# 
  1642  0597                     	;# 
  1643  0598                     	;# 
  1644  0599                     	;# 
  1645  059A                     	;# 
  1646  059B                     	;# 
  1647  059B                     	;# 
  1648  059C                     	;# 
  1649  059D                     	;# 
  1650  060C                     	;# 
  1651  060C                     	;# 
  1652  060D                     	;# 
  1653  060E                     	;# 
  1654  060F                     	;# 
  1655  060F                     	;# 
  1656  0610                     	;# 
  1657  0611                     	;# 
  1658  0612                     	;# 
  1659  0613                     	;# 
  1660  0614                     	;# 
  1661  0617                     	;# 
  1662  0618                     	;# 
  1663  0619                     	;# 
  1664  061A                     	;# 
  1665  061B                     	;# 
  1666  061C                     	;# 
  1667  0691                     	;# 
  1668  0692                     	;# 
  1669  0693                     	;# 
  1670  0694                     	;# 
  1671  0695                     	;# 
  1672  0696                     	;# 
  1673  0697                     	;# 
  1674  0699                     	;# 
  1675  069A                     	;# 
  1676  0711                     	;# 
  1677  0712                     	;# 
  1678  0713                     	;# 
  1679  0714                     	;# 
  1680  0715                     	;# 
  1681  0718                     	;# 
  1682  0718                     	;# 
  1683  0719                     	;# 
  1684  071A                     	;# 
  1685  071A                     	;# 
  1686  071B                     	;# 
  1687  071C                     	;# 
  1688  071D                     	;# 
  1689  0791                     	;# 
  1690  0791                     	;# 
  1691  0792                     	;# 
  1692  0793                     	;# 
  1693  0793                     	;# 
  1694  0794                     	;# 
  1695  0795                     	;# 
  1696  0795                     	;# 
  1697  0796                     	;# 
  1698  0797                     	;# 
  1699  0797                     	;# 
  1700  0798                     	;# 
  1701  0799                     	;# 
  1702  079A                     	;# 
  1703  080C                     	;# 
  1704  080C                     	;# 
  1705  080D                     	;# 
  1706  080E                     	;# 
  1707  080E                     	;# 
  1708  080F                     	;# 
  1709  0810                     	;# 
  1710  0810                     	;# 
  1711  0811                     	;# 
  1712  0812                     	;# 
  1713  0812                     	;# 
  1714  0813                     	;# 
  1715  0814                     	;# 
  1716  0815                     	;# 
  1717  0816                     	;# 
  1718  0817                     	;# 
  1719  0818                     	;# 
  1720  0819                     	;# 
  1721  081A                     	;# 
  1722  081A                     	;# 
  1723  081B                     	;# 
  1724  081C                     	;# 
  1725  081C                     	;# 
  1726  081D                     	;# 
  1727  088C                     	;# 
  1728  088D                     	;# 
  1729  088E                     	;# 
  1730  088F                     	;# 
  1731  088F                     	;# 
  1732  0890                     	;# 
  1733  0891                     	;# 
  1734  0892                     	;# 
  1735  0893                     	;# 
  1736  0893                     	;# 
  1737  0894                     	;# 
  1738  0895                     	;# 
  1739  0896                     	;# 
  1740  0897                     	;# 
  1741  0897                     	;# 
  1742  0898                     	;# 
  1743  0899                     	;# 
  1744  0D8C                     	;# 
  1745  0D8C                     	;# 
  1746  0D8D                     	;# 
  1747  0D8E                     	;# 
  1748  0D8F                     	;# 
  1749  0D8F                     	;# 
  1750  0D90                     	;# 
  1751  0D91                     	;# 
  1752  0D92                     	;# 
  1753  0D92                     	;# 
  1754  0D93                     	;# 
  1755  0D94                     	;# 
  1756  0D95                     	;# 
  1757  0D95                     	;# 
  1758  0D96                     	;# 
  1759  0D97                     	;# 
  1760  0D98                     	;# 
  1761  0D99                     	;# 
  1762  0D9A                     	;# 
  1763  0D9B                     	;# 
  1764  0D9C                     	;# 
  1765  0D9D                     	;# 
  1766  0D9E                     	;# 
  1767  0D9E                     	;# 
  1768  0D9F                     	;# 
  1769  0DA0                     	;# 
  1770  0DA1                     	;# 
  1771  0DA1                     	;# 
  1772  0DA2                     	;# 
  1773  0DA3                     	;# 
  1774  0DA4                     	;# 
  1775  0DA4                     	;# 
  1776  0DA5                     	;# 
  1777  0DA6                     	;# 
  1778  0DA7                     	;# 
  1779  0DA7                     	;# 
  1780  0DA8                     	;# 
  1781  0DA9                     	;# 
  1782  0DAA                     	;# 
  1783  0DAB                     	;# 
  1784  0DAC                     	;# 
  1785  0DAD                     	;# 
  1786  0DAE                     	;# 
  1787  0DAF                     	;# 
  1788  0E0F                     	;# 
  1789  0E10                     	;# 
  1790  0E11                     	;# 
  1791  0E12                     	;# 
  1792  0E13                     	;# 
  1793  0E14                     	;# 
  1794  0E15                     	;# 
  1795  0E16                     	;# 
  1796  0E17                     	;# 
  1797  0E18                     	;# 
  1798  0E19                     	;# 
  1799  0E1A                     	;# 
  1800  0E1B                     	;# 
  1801  0E1C                     	;# 
  1802  0E1D                     	;# 
  1803  0E1E                     	;# 
  1804  0E1F                     	;# 
  1805  0E20                     	;# 
  1806  0E21                     	;# 
  1807  0E22                     	;# 
  1808  0E23                     	;# 
  1809  0E24                     	;# 
  1810  0E25                     	;# 
  1811  0E26                     	;# 
  1812  0E27                     	;# 
  1813  0E28                     	;# 
  1814  0E29                     	;# 
  1815  0E2A                     	;# 
  1816  0E2B                     	;# 
  1817  0E2C                     	;# 
  1818  0E2D                     	;# 
  1819  0E2E                     	;# 
  1820  0E90                     	;# 
  1821  0E91                     	;# 
  1822  0E92                     	;# 
  1823  0E94                     	;# 
  1824  0E95                     	;# 
  1825  0E9C                     	;# 
  1826  0E9D                     	;# 
  1827  0E9E                     	;# 
  1828  0E9F                     	;# 
  1829  0EA0                     	;# 
  1830  0EA1                     	;# 
  1831  0EA2                     	;# 
  1832  0EA3                     	;# 
  1833  0EA4                     	;# 
  1834  0EA5                     	;# 
  1835  0EA6                     	;# 
  1836  0EA7                     	;# 
  1837  0F0F                     	;# 
  1838  0F10                     	;# 
  1839  0F11                     	;# 
  1840  0F12                     	;# 
  1841  0F13                     	;# 
  1842  0F14                     	;# 
  1843  0F15                     	;# 
  1844  0F16                     	;# 
  1845  0F17                     	;# 
  1846  0F18                     	;# 
  1847  0F19                     	;# 
  1848  0F1A                     	;# 
  1849  0F1B                     	;# 
  1850  0F1C                     	;# 
  1851  0F1D                     	;# 
  1852  0F1E                     	;# 
  1853  0F1F                     	;# 
  1854  0F20                     	;# 
  1855  0F21                     	;# 
  1856  0F22                     	;# 
  1857  0F23                     	;# 
  1858  0F24                     	;# 
  1859  0F25                     	;# 
  1860  0F26                     	;# 
  1861  0F27                     	;# 
  1862  0F28                     	;# 
  1863  0F29                     	;# 
  1864  0F2A                     	;# 
  1865  0F2B                     	;# 
  1866  0F2C                     	;# 
  1867  0F2D                     	;# 
  1868  0F2E                     	;# 
  1869  0F2F                     	;# 
  1870  0F30                     	;# 
  1871  0F31                     	;# 
  1872  0F32                     	;# 
  1873  0F33                     	;# 
  1874  0F34                     	;# 
  1875  0F35                     	;# 
  1876  0F36                     	;# 
  1877  0F37                     	;# 
  1878  0FE4                     	;# 
  1879  0FE5                     	;# 
  1880  0FE6                     	;# 
  1881  0FE7                     	;# 
  1882  0FE8                     	;# 
  1883  0FE9                     	;# 
  1884  0FEA                     	;# 
  1885  0FEB                     	;# 
  1886  0FED                     	;# 
  1887  0FEE                     	;# 
  1888  0FEF                     	;# 
  1889  0000                     	;# 
  1890  0001                     	;# 
  1891  0002                     	;# 
  1892  0003                     	;# 
  1893  0004                     	;# 
  1894  0005                     	;# 
  1895  0006                     	;# 
  1896  0007                     	;# 
  1897  0008                     	;# 
  1898  0009                     	;# 
  1899  000A                     	;# 
  1900  000B                     	;# 
  1901  000C                     	;# 
  1902  000D                     	;# 
  1903  000E                     	;# 
  1904  0010                     	;# 
  1905  0011                     	;# 
  1906  0012                     	;# 
  1907  0013                     	;# 
  1908  0014                     	;# 
  1909  0015                     	;# 
  1910  0016                     	;# 
  1911  0016                     	;# 
  1912  0017                     	;# 
  1913  0018                     	;# 
  1914  0019                     	;# 
  1915  001A                     	;# 
  1916  001A                     	;# 
  1917  001B                     	;# 
  1918  001B                     	;# 
  1919  001C                     	;# 
  1920  001D                     	;# 
  1921  001E                     	;# 
  1922  001F                     	;# 
  1923  008C                     	;# 
  1924  008D                     	;# 
  1925  008E                     	;# 
  1926  0090                     	;# 
  1927  0091                     	;# 
  1928  0092                     	;# 
  1929  0093                     	;# 
  1930  0094                     	;# 
  1931  0095                     	;# 
  1932  0096                     	;# 
  1933  0098                     	;# 
  1934  0099                     	;# 
  1935  009A                     	;# 
  1936  009B                     	;# 
  1937  009B                     	;# 
  1938  009C                     	;# 
  1939  009D                     	;# 
  1940  009E                     	;# 
  1941  009F                     	;# 
  1942  010C                     	;# 
  1943  010D                     	;# 
  1944  010E                     	;# 
  1945  0111                     	;# 
  1946  0112                     	;# 
  1947  0113                     	;# 
  1948  0114                     	;# 
  1949  0115                     	;# 
  1950  0116                     	;# 
  1951  0117                     	;# 
  1952  0118                     	;# 
  1953  0119                     	;# 
  1954  011C                     	;# 
  1955  018C                     	;# 
  1956  018D                     	;# 
  1957  018E                     	;# 
  1958  0191                     	;# 
  1959  0191                     	;# 
  1960  0192                     	;# 
  1961  0193                     	;# 
  1962  0193                     	;# 
  1963  0194                     	;# 
  1964  0195                     	;# 
  1965  0196                     	;# 
  1966  0197                     	;# 
  1967  0199                     	;# 
  1968  0199                     	;# 
  1969  0199                     	;# 
  1970  019A                     	;# 
  1971  019A                     	;# 
  1972  019A                     	;# 
  1973  019B                     	;# 
  1974  019B                     	;# 
  1975  019B                     	;# 
  1976  019B                     	;# 
  1977  019B                     	;# 
  1978  019C                     	;# 
  1979  019C                     	;# 
  1980  019C                     	;# 
  1981  019D                     	;# 
  1982  019D                     	;# 
  1983  019D                     	;# 
  1984  019E                     	;# 
  1985  019E                     	;# 
  1986  019E                     	;# 
  1987  019F                     	;# 
  1988  019F                     	;# 
  1989  019F                     	;# 
  1990  019F                     	;# 
  1991  019F                     	;# 
  1992  020C                     	;# 
  1993  020D                     	;# 
  1994  020E                     	;# 
  1995  0211                     	;# 
  1996  0211                     	;# 
  1997  0212                     	;# 
  1998  0212                     	;# 
  1999  0213                     	;# 
  2000  0213                     	;# 
  2001  0214                     	;# 
  2002  0214                     	;# 
  2003  0215                     	;# 
  2004  0215                     	;# 
  2005  0215                     	;# 
  2006  0215                     	;# 
  2007  0216                     	;# 
  2008  0216                     	;# 
  2009  0217                     	;# 
  2010  0217                     	;# 
  2011  028C                     	;# 
  2012  028D                     	;# 
  2013  028E                     	;# 
  2014  0291                     	;# 
  2015  0291                     	;# 
  2016  0292                     	;# 
  2017  0293                     	;# 
  2018  0294                     	;# 
  2019  0298                     	;# 
  2020  0298                     	;# 
  2021  0299                     	;# 
  2022  029A                     	;# 
  2023  029B                     	;# 
  2024  029E                     	;# 
  2025  030C                     	;# 
  2026  030D                     	;# 
  2027  030E                     	;# 
  2028  038C                     	;# 
  2029  038D                     	;# 
  2030  038E                     	;# 
  2031  0391                     	;# 
  2032  0392                     	;# 
  2033  0393                     	;# 
  2034  0394                     	;# 
  2035  0395                     	;# 
  2036  0396                     	;# 
  2037  0397                     	;# 
  2038  0398                     	;# 
  2039  0399                     	;# 
  2040  040E                     	;# 
  2041  0413                     	;# 
  2042  0413                     	;# 
  2043  0414                     	;# 
  2044  0414                     	;# 
  2045  0415                     	;# 
  2046  0416                     	;# 
  2047  0417                     	;# 
  2048  0418                     	;# 
  2049  041A                     	;# 
  2050  041A                     	;# 
  2051  041B                     	;# 
  2052  041B                     	;# 
  2053  041C                     	;# 
  2054  041D                     	;# 
  2055  041E                     	;# 
  2056  041F                     	;# 
  2057  0493                     	;# 
  2058  0494                     	;# 
  2059  0495                     	;# 
  2060  0496                     	;# 
  2061  049A                     	;# 
  2062  049B                     	;# 
  2063  049C                     	;# 
  2064  049D                     	;# 
  2065  058C                     	;# 
  2066  058C                     	;# 
  2067  058D                     	;# 
  2068  058E                     	;# 
  2069  058E                     	;# 
  2070  058F                     	;# 
  2071  0590                     	;# 
  2072  0590                     	;# 
  2073  0591                     	;# 
  2074  0592                     	;# 
  2075  0592                     	;# 
  2076  0593                     	;# 
  2077  0594                     	;# 
  2078  0594                     	;# 
  2079  0595                     	;# 
  2080  0596                     	;# 
  2081  0596                     	;# 
  2082  0597                     	;# 
  2083  0598                     	;# 
  2084  0599                     	;# 
  2085  059A                     	;# 
  2086  059B                     	;# 
  2087  059B                     	;# 
  2088  059C                     	;# 
  2089  059D                     	;# 
  2090  060C                     	;# 
  2091  060C                     	;# 
  2092  060D                     	;# 
  2093  060E                     	;# 
  2094  060F                     	;# 
  2095  060F                     	;# 
  2096  0610                     	;# 
  2097  0611                     	;# 
  2098  0612                     	;# 
  2099  0613                     	;# 
  2100  0614                     	;# 
  2101  0617                     	;# 
  2102  0618                     	;# 
  2103  0619                     	;# 
  2104  061A                     	;# 
  2105  061B                     	;# 
  2106  061C                     	;# 
  2107  0691                     	;# 
  2108  0692                     	;# 
  2109  0693                     	;# 
  2110  0694                     	;# 
  2111  0695                     	;# 
  2112  0696                     	;# 
  2113  0697                     	;# 
  2114  0699                     	;# 
  2115  069A                     	;# 
  2116  0711                     	;# 
  2117  0712                     	;# 
  2118  0713                     	;# 
  2119  0714                     	;# 
  2120  0715                     	;# 
  2121  0718                     	;# 
  2122  0718                     	;# 
  2123  0719                     	;# 
  2124  071A                     	;# 
  2125  071A                     	;# 
  2126  071B                     	;# 
  2127  071C                     	;# 
  2128  071D                     	;# 
  2129  0791                     	;# 
  2130  0791                     	;# 
  2131  0792                     	;# 
  2132  0793                     	;# 
  2133  0793                     	;# 
  2134  0794                     	;# 
  2135  0795                     	;# 
  2136  0795                     	;# 
  2137  0796                     	;# 
  2138  0797                     	;# 
  2139  0797                     	;# 
  2140  0798                     	;# 
  2141  0799                     	;# 
  2142  079A                     	;# 
  2143  080C                     	;# 
  2144  080C                     	;# 
  2145  080D                     	;# 
  2146  080E                     	;# 
  2147  080E                     	;# 
  2148  080F                     	;# 
  2149  0810                     	;# 
  2150  0810                     	;# 
  2151  0811                     	;# 
  2152  0812                     	;# 
  2153  0812                     	;# 
  2154  0813                     	;# 
  2155  0814                     	;# 
  2156  0815                     	;# 
  2157  0816                     	;# 
  2158  0817                     	;# 
  2159  0818                     	;# 
  2160  0819                     	;# 
  2161  081A                     	;# 
  2162  081A                     	;# 
  2163  081B                     	;# 
  2164  081C                     	;# 
  2165  081C                     	;# 
  2166  081D                     	;# 
  2167  088C                     	;# 
  2168  088D                     	;# 
  2169  088E                     	;# 
  2170  088F                     	;# 
  2171  088F                     	;# 
  2172  0890                     	;# 
  2173  0891                     	;# 
  2174  0892                     	;# 
  2175  0893                     	;# 
  2176  0893                     	;# 
  2177  0894                     	;# 
  2178  0895                     	;# 
  2179  0896                     	;# 
  2180  0897                     	;# 
  2181  0897                     	;# 
  2182  0898                     	;# 
  2183  0899                     	;# 
  2184  0D8C                     	;# 
  2185  0D8C                     	;# 
  2186  0D8D                     	;# 
  2187  0D8E                     	;# 
  2188  0D8F                     	;# 
  2189  0D8F                     	;# 
  2190  0D90                     	;# 
  2191  0D91                     	;# 
  2192  0D92                     	;# 
  2193  0D92                     	;# 
  2194  0D93                     	;# 
  2195  0D94                     	;# 
  2196  0D95                     	;# 
  2197  0D95                     	;# 
  2198  0D96                     	;# 
  2199  0D97                     	;# 
  2200  0D98                     	;# 
  2201  0D99                     	;# 
  2202  0D9A                     	;# 
  2203  0D9B                     	;# 
  2204  0D9C                     	;# 
  2205  0D9D                     	;# 
  2206  0D9E                     	;# 
  2207  0D9E                     	;# 
  2208  0D9F                     	;# 
  2209  0DA0                     	;# 
  2210  0DA1                     	;# 
  2211  0DA1                     	;# 
  2212  0DA2                     	;# 
  2213  0DA3                     	;# 
  2214  0DA4                     	;# 
  2215  0DA4                     	;# 
  2216  0DA5                     	;# 
  2217  0DA6                     	;# 
  2218  0DA7                     	;# 
  2219  0DA7                     	;# 
  2220  0DA8                     	;# 
  2221  0DA9                     	;# 
  2222  0DAA                     	;# 
  2223  0DAB                     	;# 
  2224  0DAC                     	;# 
  2225  0DAD                     	;# 
  2226  0DAE                     	;# 
  2227  0DAF                     	;# 
  2228  0E0F                     	;# 
  2229  0E10                     	;# 
  2230  0E11                     	;# 
  2231  0E12                     	;# 
  2232  0E13                     	;# 
  2233  0E14                     	;# 
  2234  0E15                     	;# 
  2235  0E16                     	;# 
  2236  0E17                     	;# 
  2237  0E18                     	;# 
  2238  0E19                     	;# 
  2239  0E1A                     	;# 
  2240  0E1B                     	;# 
  2241  0E1C                     	;# 
  2242  0E1D                     	;# 
  2243  0E1E                     	;# 
  2244  0E1F                     	;# 
  2245  0E20                     	;# 
  2246  0E21                     	;# 
  2247  0E22                     	;# 
  2248  0E23                     	;# 
  2249  0E24                     	;# 
  2250  0E25                     	;# 
  2251  0E26                     	;# 
  2252  0E27                     	;# 
  2253  0E28                     	;# 
  2254  0E29                     	;# 
  2255  0E2A                     	;# 
  2256  0E2B                     	;# 
  2257  0E2C                     	;# 
  2258  0E2D                     	;# 
  2259  0E2E                     	;# 
  2260  0E90                     	;# 
  2261  0E91                     	;# 
  2262  0E92                     	;# 
  2263  0E94                     	;# 
  2264  0E95                     	;# 
  2265  0E9C                     	;# 
  2266  0E9D                     	;# 
  2267  0E9E                     	;# 
  2268  0E9F                     	;# 
  2269  0EA0                     	;# 
  2270  0EA1                     	;# 
  2271  0EA2                     	;# 
  2272  0EA3                     	;# 
  2273  0EA4                     	;# 
  2274  0EA5                     	;# 
  2275  0EA6                     	;# 
  2276  0EA7                     	;# 
  2277  0F0F                     	;# 
  2278  0F10                     	;# 
  2279  0F11                     	;# 
  2280  0F12                     	;# 
  2281  0F13                     	;# 
  2282  0F14                     	;# 
  2283  0F15                     	;# 
  2284  0F16                     	;# 
  2285  0F17                     	;# 
  2286  0F18                     	;# 
  2287  0F19                     	;# 
  2288  0F1A                     	;# 
  2289  0F1B                     	;# 
  2290  0F1C                     	;# 
  2291  0F1D                     	;# 
  2292  0F1E                     	;# 
  2293  0F1F                     	;# 
  2294  0F20                     	;# 
  2295  0F21                     	;# 
  2296  0F22                     	;# 
  2297  0F23                     	;# 
  2298  0F24                     	;# 
  2299  0F25                     	;# 
  2300  0F26                     	;# 
  2301  0F27                     	;# 
  2302  0F28                     	;# 
  2303  0F29                     	;# 
  2304  0F2A                     	;# 
  2305  0F2B                     	;# 
  2306  0F2C                     	;# 
  2307  0F2D                     	;# 
  2308  0F2E                     	;# 
  2309  0F2F                     	;# 
  2310  0F30                     	;# 
  2311  0F31                     	;# 
  2312  0F32                     	;# 
  2313  0F33                     	;# 
  2314  0F34                     	;# 
  2315  0F35                     	;# 
  2316  0F36                     	;# 
  2317  0F37                     	;# 
  2318  0FE4                     	;# 
  2319  0FE5                     	;# 
  2320  0FE6                     	;# 
  2321  0FE7                     	;# 
  2322  0FE8                     	;# 
  2323  0FE9                     	;# 
  2324  0FEA                     	;# 
  2325  0FEB                     	;# 
  2326  0FED                     	;# 
  2327  0FEE                     	;# 
  2328  0FEF                     	;# 
  2329  0000                     	;# 
  2330  0001                     	;# 
  2331  0002                     	;# 
  2332  0003                     	;# 
  2333  0004                     	;# 
  2334  0005                     	;# 
  2335  0006                     	;# 
  2336  0007                     	;# 
  2337  0008                     	;# 
  2338  0009                     	;# 
  2339  000A                     	;# 
  2340  000B                     	;# 
  2341  000C                     	;# 
  2342  000D                     	;# 
  2343  000E                     	;# 
  2344  0010                     	;# 
  2345  0011                     	;# 
  2346  0012                     	;# 
  2347  0013                     	;# 
  2348  0014                     	;# 
  2349  0015                     	;# 
  2350  0016                     	;# 
  2351  0016                     	;# 
  2352  0017                     	;# 
  2353  0018                     	;# 
  2354  0019                     	;# 
  2355  001A                     	;# 
  2356  001A                     	;# 
  2357  001B                     	;# 
  2358  001B                     	;# 
  2359  001C                     	;# 
  2360  001D                     	;# 
  2361  001E                     	;# 
  2362  001F                     	;# 
  2363  008C                     	;# 
  2364  008D                     	;# 
  2365  008E                     	;# 
  2366  0090                     	;# 
  2367  0091                     	;# 
  2368  0092                     	;# 
  2369  0093                     	;# 
  2370  0094                     	;# 
  2371  0095                     	;# 
  2372  0096                     	;# 
  2373  0098                     	;# 
  2374  0099                     	;# 
  2375  009A                     	;# 
  2376  009B                     	;# 
  2377  009B                     	;# 
  2378  009C                     	;# 
  2379  009D                     	;# 
  2380  009E                     	;# 
  2381  009F                     	;# 
  2382  010C                     	;# 
  2383  010D                     	;# 
  2384  010E                     	;# 
  2385  0111                     	;# 
  2386  0112                     	;# 
  2387  0113                     	;# 
  2388  0114                     	;# 
  2389  0115                     	;# 
  2390  0116                     	;# 
  2391  0117                     	;# 
  2392  0118                     	;# 
  2393  0119                     	;# 
  2394  011C                     	;# 
  2395  018C                     	;# 
  2396  018D                     	;# 
  2397  018E                     	;# 
  2398  0191                     	;# 
  2399  0191                     	;# 
  2400  0192                     	;# 
  2401  0193                     	;# 
  2402  0193                     	;# 
  2403  0194                     	;# 
  2404  0195                     	;# 
  2405  0196                     	;# 
  2406  0197                     	;# 
  2407  0199                     	;# 
  2408  0199                     	;# 
  2409  0199                     	;# 
  2410  019A                     	;# 
  2411  019A                     	;# 
  2412  019A                     	;# 
  2413  019B                     	;# 
  2414  019B                     	;# 
  2415  019B                     	;# 
  2416  019B                     	;# 
  2417  019B                     	;# 
  2418  019C                     	;# 
  2419  019C                     	;# 
  2420  019C                     	;# 
  2421  019D                     	;# 
  2422  019D                     	;# 
  2423  019D                     	;# 
  2424  019E                     	;# 
  2425  019E                     	;# 
  2426  019E                     	;# 
  2427  019F                     	;# 
  2428  019F                     	;# 
  2429  019F                     	;# 
  2430  019F                     	;# 
  2431  019F                     	;# 
  2432  020C                     	;# 
  2433  020D                     	;# 
  2434  020E                     	;# 
  2435  0211                     	;# 
  2436  0211                     	;# 
  2437  0212                     	;# 
  2438  0212                     	;# 
  2439  0213                     	;# 
  2440  0213                     	;# 
  2441  0214                     	;# 
  2442  0214                     	;# 
  2443  0215                     	;# 
  2444  0215                     	;# 
  2445  0215                     	;# 
  2446  0215                     	;# 
  2447  0216                     	;# 
  2448  0216                     	;# 
  2449  0217                     	;# 
  2450  0217                     	;# 
  2451  028C                     	;# 
  2452  028D                     	;# 
  2453  028E                     	;# 
  2454  0291                     	;# 
  2455  0291                     	;# 
  2456  0292                     	;# 
  2457  0293                     	;# 
  2458  0294                     	;# 
  2459  0298                     	;# 
  2460  0298                     	;# 
  2461  0299                     	;# 
  2462  029A                     	;# 
  2463  029B                     	;# 
  2464  029E                     	;# 
  2465  030C                     	;# 
  2466  030D                     	;# 
  2467  030E                     	;# 
  2468  038C                     	;# 
  2469  038D                     	;# 
  2470  038E                     	;# 
  2471  0391                     	;# 
  2472  0392                     	;# 
  2473  0393                     	;# 
  2474  0394                     	;# 
  2475  0395                     	;# 
  2476  0396                     	;# 
  2477  0397                     	;# 
  2478  0398                     	;# 
  2479  0399                     	;# 
  2480  040E                     	;# 
  2481  0413                     	;# 
  2482  0413                     	;# 
  2483  0414                     	;# 
  2484  0414                     	;# 
  2485  0415                     	;# 
  2486  0416                     	;# 
  2487  0417                     	;# 
  2488  0418                     	;# 
  2489  041A                     	;# 
  2490  041A                     	;# 
  2491  041B                     	;# 
  2492  041B                     	;# 
  2493  041C                     	;# 
  2494  041D                     	;# 
  2495  041E                     	;# 
  2496  041F                     	;# 
  2497  0493                     	;# 
  2498  0494                     	;# 
  2499  0495                     	;# 
  2500  0496                     	;# 
  2501  049A                     	;# 
  2502  049B                     	;# 
  2503  049C                     	;# 
  2504  049D                     	;# 
  2505  058C                     	;# 
  2506  058C                     	;# 
  2507  058D                     	;# 
  2508  058E                     	;# 
  2509  058E                     	;# 
  2510  058F                     	;# 
  2511  0590                     	;# 
  2512  0590                     	;# 
  2513  0591                     	;# 
  2514  0592                     	;# 
  2515  0592                     	;# 
  2516  0593                     	;# 
  2517  0594                     	;# 
  2518  0594                     	;# 
  2519  0595                     	;# 
  2520  0596                     	;# 
  2521  0596                     	;# 
  2522  0597                     	;# 
  2523  0598                     	;# 
  2524  0599                     	;# 
  2525  059A                     	;# 
  2526  059B                     	;# 
  2527  059B                     	;# 
  2528  059C                     	;# 
  2529  059D                     	;# 
  2530  060C                     	;# 
  2531  060C                     	;# 
  2532  060D                     	;# 
  2533  060E                     	;# 
  2534  060F                     	;# 
  2535  060F                     	;# 
  2536  0610                     	;# 
  2537  0611                     	;# 
  2538  0612                     	;# 
  2539  0613                     	;# 
  2540  0614                     	;# 
  2541  0617                     	;# 
  2542  0618                     	;# 
  2543  0619                     	;# 
  2544  061A                     	;# 
  2545  061B                     	;# 
  2546  061C                     	;# 
  2547  0691                     	;# 
  2548  0692                     	;# 
  2549  0693                     	;# 
  2550  0694                     	;# 
  2551  0695                     	;# 
  2552  0696                     	;# 
  2553  0697                     	;# 
  2554  0699                     	;# 
  2555  069A                     	;# 
  2556  0711                     	;# 
  2557  0712                     	;# 
  2558  0713                     	;# 
  2559  0714                     	;# 
  2560  0715                     	;# 
  2561  0718                     	;# 
  2562  0718                     	;# 
  2563  0719                     	;# 
  2564  071A                     	;# 
  2565  071A                     	;# 
  2566  071B                     	;# 
  2567  071C                     	;# 
  2568  071D                     	;# 
  2569  0791                     	;# 
  2570  0791                     	;# 
  2571  0792                     	;# 
  2572  0793                     	;# 
  2573  0793                     	;# 
  2574  0794                     	;# 
  2575  0795                     	;# 
  2576  0795                     	;# 
  2577  0796                     	;# 
  2578  0797                     	;# 
  2579  0797                     	;# 
  2580  0798                     	;# 
  2581  0799                     	;# 
  2582  079A                     	;# 
  2583  080C                     	;# 
  2584  080C                     	;# 
  2585  080D                     	;# 
  2586  080E                     	;# 
  2587  080E                     	;# 
  2588  080F                     	;# 
  2589  0810                     	;# 
  2590  0810                     	;# 
  2591  0811                     	;# 
  2592  0812                     	;# 
  2593  0812                     	;# 
  2594  0813                     	;# 
  2595  0814                     	;# 
  2596  0815                     	;# 
  2597  0816                     	;# 
  2598  0817                     	;# 
  2599  0818                     	;# 
  2600  0819                     	;# 
  2601  081A                     	;# 
  2602  081A                     	;# 
  2603  081B                     	;# 
  2604  081C                     	;# 
  2605  081C                     	;# 
  2606  081D                     	;# 
  2607  088C                     	;# 
  2608  088D                     	;# 
  2609  088E                     	;# 
  2610  088F                     	;# 
  2611  088F                     	;# 
  2612  0890                     	;# 
  2613  0891                     	;# 
  2614  0892                     	;# 
  2615  0893                     	;# 
  2616  0893                     	;# 
  2617  0894                     	;# 
  2618  0895                     	;# 
  2619  0896                     	;# 
  2620  0897                     	;# 
  2621  0897                     	;# 
  2622  0898                     	;# 
  2623  0899                     	;# 
  2624  0D8C                     	;# 
  2625  0D8C                     	;# 
  2626  0D8D                     	;# 
  2627  0D8E                     	;# 
  2628  0D8F                     	;# 
  2629  0D8F                     	;# 
  2630  0D90                     	;# 
  2631  0D91                     	;# 
  2632  0D92                     	;# 
  2633  0D92                     	;# 
  2634  0D93                     	;# 
  2635  0D94                     	;# 
  2636  0D95                     	;# 
  2637  0D95                     	;# 
  2638  0D96                     	;# 
  2639  0D97                     	;# 
  2640  0D98                     	;# 
  2641  0D99                     	;# 
  2642  0D9A                     	;# 
  2643  0D9B                     	;# 
  2644  0D9C                     	;# 
  2645  0D9D                     	;# 
  2646  0D9E                     	;# 
  2647  0D9E                     	;# 
  2648  0D9F                     	;# 
  2649  0DA0                     	;# 
  2650  0DA1                     	;# 
  2651  0DA1                     	;# 
  2652  0DA2                     	;# 
  2653  0DA3                     	;# 
  2654  0DA4                     	;# 
  2655  0DA4                     	;# 
  2656  0DA5                     	;# 
  2657  0DA6                     	;# 
  2658  0DA7                     	;# 
  2659  0DA7                     	;# 
  2660  0DA8                     	;# 
  2661  0DA9                     	;# 
  2662  0DAA                     	;# 
  2663  0DAB                     	;# 
  2664  0DAC                     	;# 
  2665  0DAD                     	;# 
  2666  0DAE                     	;# 
  2667  0DAF                     	;# 
  2668  0E0F                     	;# 
  2669  0E10                     	;# 
  2670  0E11                     	;# 
  2671  0E12                     	;# 
  2672  0E13                     	;# 
  2673  0E14                     	;# 
  2674  0E15                     	;# 
  2675  0E16                     	;# 
  2676  0E17                     	;# 
  2677  0E18                     	;# 
  2678  0E19                     	;# 
  2679  0E1A                     	;# 
  2680  0E1B                     	;# 
  2681  0E1C                     	;# 
  2682  0E1D                     	;# 
  2683  0E1E                     	;# 
  2684  0E1F                     	;# 
  2685  0E20                     	;# 
  2686  0E21                     	;# 
  2687  0E22                     	;# 
  2688  0E23                     	;# 
  2689  0E24                     	;# 
  2690  0E25                     	;# 
  2691  0E26                     	;# 
  2692  0E27                     	;# 
  2693  0E28                     	;# 
  2694  0E29                     	;# 
  2695  0E2A                     	;# 
  2696  0E2B                     	;# 
  2697  0E2C                     	;# 
  2698  0E2D                     	;# 
  2699  0E2E                     	;# 
  2700  0E90                     	;# 
  2701  0E91                     	;# 
  2702  0E92                     	;# 
  2703  0E94                     	;# 
  2704  0E95                     	;# 
  2705  0E9C                     	;# 
  2706  0E9D                     	;# 
  2707  0E9E                     	;# 
  2708  0E9F                     	;# 
  2709  0EA0                     	;# 
  2710  0EA1                     	;# 
  2711  0EA2                     	;# 
  2712  0EA3                     	;# 
  2713  0EA4                     	;# 
  2714  0EA5                     	;# 
  2715  0EA6                     	;# 
  2716  0EA7                     	;# 
  2717  0F0F                     	;# 
  2718  0F10                     	;# 
  2719  0F11                     	;# 
  2720  0F12                     	;# 
  2721  0F13                     	;# 
  2722  0F14                     	;# 
  2723  0F15                     	;# 
  2724  0F16                     	;# 
  2725  0F17                     	;# 
  2726  0F18                     	;# 
  2727  0F19                     	;# 
  2728  0F1A                     	;# 
  2729  0F1B                     	;# 
  2730  0F1C                     	;# 
  2731  0F1D                     	;# 
  2732  0F1E                     	;# 
  2733  0F1F                     	;# 
  2734  0F20                     	;# 
  2735  0F21                     	;# 
  2736  0F22                     	;# 
  2737  0F23                     	;# 
  2738  0F24                     	;# 
  2739  0F25                     	;# 
  2740  0F26                     	;# 
  2741  0F27                     	;# 
  2742  0F28                     	;# 
  2743  0F29                     	;# 
  2744  0F2A                     	;# 
  2745  0F2B                     	;# 
  2746  0F2C                     	;# 
  2747  0F2D                     	;# 
  2748  0F2E                     	;# 
  2749  0F2F                     	;# 
  2750  0F30                     	;# 
  2751  0F31                     	;# 
  2752  0F32                     	;# 
  2753  0F33                     	;# 
  2754  0F34                     	;# 
  2755  0F35                     	;# 
  2756  0F36                     	;# 
  2757  0F37                     	;# 
  2758  0FE4                     	;# 
  2759  0FE5                     	;# 
  2760  0FE6                     	;# 
  2761  0FE7                     	;# 
  2762  0FE8                     	;# 
  2763  0FE9                     	;# 
  2764  0FEA                     	;# 
  2765  0FEB                     	;# 
  2766  0FED                     	;# 
  2767  0FEE                     	;# 
  2768  0FEF                     	;# 
  2769  0000                     	;# 
  2770  0001                     	;# 
  2771  0002                     	;# 
  2772  0003                     	;# 
  2773  0004                     	;# 
  2774  0005                     	;# 
  2775  0006                     	;# 
  2776  0007                     	;# 
  2777  0008                     	;# 
  2778  0009                     	;# 
  2779  000A                     	;# 
  2780  000B                     	;# 
  2781  000C                     	;# 
  2782  000D                     	;# 
  2783  000E                     	;# 
  2784  0010                     	;# 
  2785  0011                     	;# 
  2786  0012                     	;# 
  2787  0013                     	;# 
  2788  0014                     	;# 
  2789  0015                     	;# 
  2790  0016                     	;# 
  2791  0016                     	;# 
  2792  0017                     	;# 
  2793  0018                     	;# 
  2794  0019                     	;# 
  2795  001A                     	;# 
  2796  001A                     	;# 
  2797  001B                     	;# 
  2798  001B                     	;# 
  2799  001C                     	;# 
  2800  001D                     	;# 
  2801  001E                     	;# 
  2802  001F                     	;# 
  2803  008C                     	;# 
  2804  008D                     	;# 
  2805  008E                     	;# 
  2806  0090                     	;# 
  2807  0091                     	;# 
  2808  0092                     	;# 
  2809  0093                     	;# 
  2810  0094                     	;# 
  2811  0095                     	;# 
  2812  0096                     	;# 
  2813  0098                     	;# 
  2814  0099                     	;# 
  2815  009A                     	;# 
  2816  009B                     	;# 
  2817  009B                     	;# 
  2818  009C                     	;# 
  2819  009D                     	;# 
  2820  009E                     	;# 
  2821  009F                     	;# 
  2822  010C                     	;# 
  2823  010D                     	;# 
  2824  010E                     	;# 
  2825  0111                     	;# 
  2826  0112                     	;# 
  2827  0113                     	;# 
  2828  0114                     	;# 
  2829  0115                     	;# 
  2830  0116                     	;# 
  2831  0117                     	;# 
  2832  0118                     	;# 
  2833  0119                     	;# 
  2834  011C                     	;# 
  2835  018C                     	;# 
  2836  018D                     	;# 
  2837  018E                     	;# 
  2838  0191                     	;# 
  2839  0191                     	;# 
  2840  0192                     	;# 
  2841  0193                     	;# 
  2842  0193                     	;# 
  2843  0194                     	;# 
  2844  0195                     	;# 
  2845  0196                     	;# 
  2846  0197                     	;# 
  2847  0199                     	;# 
  2848  0199                     	;# 
  2849  0199                     	;# 
  2850  019A                     	;# 
  2851  019A                     	;# 
  2852  019A                     	;# 
  2853  019B                     	;# 
  2854  019B                     	;# 
  2855  019B                     	;# 
  2856  019B                     	;# 
  2857  019B                     	;# 
  2858  019C                     	;# 
  2859  019C                     	;# 
  2860  019C                     	;# 
  2861  019D                     	;# 
  2862  019D                     	;# 
  2863  019D                     	;# 
  2864  019E                     	;# 
  2865  019E                     	;# 
  2866  019E                     	;# 
  2867  019F                     	;# 
  2868  019F                     	;# 
  2869  019F                     	;# 
  2870  019F                     	;# 
  2871  019F                     	;# 
  2872  020C                     	;# 
  2873  020D                     	;# 
  2874  020E                     	;# 
  2875  0211                     	;# 
  2876  0211                     	;# 
  2877  0212                     	;# 
  2878  0212                     	;# 
  2879  0213                     	;# 
  2880  0213                     	;# 
  2881  0214                     	;# 
  2882  0214                     	;# 
  2883  0215                     	;# 
  2884  0215                     	;# 
  2885  0215                     	;# 
  2886  0215                     	;# 
  2887  0216                     	;# 
  2888  0216                     	;# 
  2889  0217                     	;# 
  2890  0217                     	;# 
  2891  028C                     	;# 
  2892  028D                     	;# 
  2893  028E                     	;# 
  2894  0291                     	;# 
  2895  0291                     	;# 
  2896  0292                     	;# 
  2897  0293                     	;# 
  2898  0294                     	;# 
  2899  0298                     	;# 
  2900  0298                     	;# 
  2901  0299                     	;# 
  2902  029A                     	;# 
  2903  029B                     	;# 
  2904  029E                     	;# 
  2905  030C                     	;# 
  2906  030D                     	;# 
  2907  030E                     	;# 
  2908  038C                     	;# 
  2909  038D                     	;# 
  2910  038E                     	;# 
  2911  0391                     	;# 
  2912  0392                     	;# 
  2913  0393                     	;# 
  2914  0394                     	;# 
  2915  0395                     	;# 
  2916  0396                     	;# 
  2917  0397                     	;# 
  2918  0398                     	;# 
  2919  0399                     	;# 
  2920  040E                     	;# 
  2921  0413                     	;# 
  2922  0413                     	;# 
  2923  0414                     	;# 
  2924  0414                     	;# 
  2925  0415                     	;# 
  2926  0416                     	;# 
  2927  0417                     	;# 
  2928  0418                     	;# 
  2929  041A                     	;# 
  2930  041A                     	;# 
  2931  041B                     	;# 
  2932  041B                     	;# 
  2933  041C                     	;# 
  2934  041D                     	;# 
  2935  041E                     	;# 
  2936  041F                     	;# 
  2937  0493                     	;# 
  2938  0494                     	;# 
  2939  0495                     	;# 
  2940  0496                     	;# 
  2941  049A                     	;# 
  2942  049B                     	;# 
  2943  049C                     	;# 
  2944  049D                     	;# 
  2945  058C                     	;# 
  2946  058C                     	;# 
  2947  058D                     	;# 
  2948  058E                     	;# 
  2949  058E                     	;# 
  2950  058F                     	;# 
  2951  0590                     	;# 
  2952  0590                     	;# 
  2953  0591                     	;# 
  2954  0592                     	;# 
  2955  0592                     	;# 
  2956  0593                     	;# 
  2957  0594                     	;# 
  2958  0594                     	;# 
  2959  0595                     	;# 
  2960  0596                     	;# 
  2961  0596                     	;# 
  2962  0597                     	;# 
  2963  0598                     	;# 
  2964  0599                     	;# 
  2965  059A                     	;# 
  2966  059B                     	;# 
  2967  059B                     	;# 
  2968  059C                     	;# 
  2969  059D                     	;# 
  2970  060C                     	;# 
  2971  060C                     	;# 
  2972  060D                     	;# 
  2973  060E                     	;# 
  2974  060F                     	;# 
  2975  060F                     	;# 
  2976  0610                     	;# 
  2977  0611                     	;# 
  2978  0612                     	;# 
  2979  0613                     	;# 
  2980  0614                     	;# 
  2981  0617                     	;# 
  2982  0618                     	;# 
  2983  0619                     	;# 
  2984  061A                     	;# 
  2985  061B                     	;# 
  2986  061C                     	;# 
  2987  0691                     	;# 
  2988  0692                     	;# 
  2989  0693                     	;# 
  2990  0694                     	;# 
  2991  0695                     	;# 
  2992  0696                     	;# 
  2993  0697                     	;# 
  2994  0699                     	;# 
  2995  069A                     	;# 
  2996  0711                     	;# 
  2997  0712                     	;# 
  2998  0713                     	;# 
  2999  0714                     	;# 
  3000  0715                     	;# 
  3001  0718                     	;# 
  3002  0718                     	;# 
  3003  0719                     	;# 
  3004  071A                     	;# 
  3005  071A                     	;# 
  3006  071B                     	;# 
  3007  071C                     	;# 
  3008  071D                     	;# 
  3009  0791                     	;# 
  3010  0791                     	;# 
  3011  0792                     	;# 
  3012  0793                     	;# 
  3013  0793                     	;# 
  3014  0794                     	;# 
  3015  0795                     	;# 
  3016  0795                     	;# 
  3017  0796                     	;# 
  3018  0797                     	;# 
  3019  0797                     	;# 
  3020  0798                     	;# 
  3021  0799                     	;# 
  3022  079A                     	;# 
  3023  080C                     	;# 
  3024  080C                     	;# 
  3025  080D                     	;# 
  3026  080E                     	;# 
  3027  080E                     	;# 
  3028  080F                     	;# 
  3029  0810                     	;# 
  3030  0810                     	;# 
  3031  0811                     	;# 
  3032  0812                     	;# 
  3033  0812                     	;# 
  3034  0813                     	;# 
  3035  0814                     	;# 
  3036  0815                     	;# 
  3037  0816                     	;# 
  3038  0817                     	;# 
  3039  0818                     	;# 
  3040  0819                     	;# 
  3041  081A                     	;# 
  3042  081A                     	;# 
  3043  081B                     	;# 
  3044  081C                     	;# 
  3045  081C                     	;# 
  3046  081D                     	;# 
  3047  088C                     	;# 
  3048  088D                     	;# 
  3049  088E                     	;# 
  3050  088F                     	;# 
  3051  088F                     	;# 
  3052  0890                     	;# 
  3053  0891                     	;# 
  3054  0892                     	;# 
  3055  0893                     	;# 
  3056  0893                     	;# 
  3057  0894                     	;# 
  3058  0895                     	;# 
  3059  0896                     	;# 
  3060  0897                     	;# 
  3061  0897                     	;# 
  3062  0898                     	;# 
  3063  0899                     	;# 
  3064  0D8C                     	;# 
  3065  0D8C                     	;# 
  3066  0D8D                     	;# 
  3067  0D8E                     	;# 
  3068  0D8F                     	;# 
  3069  0D8F                     	;# 
  3070  0D90                     	;# 
  3071  0D91                     	;# 
  3072  0D92                     	;# 
  3073  0D92                     	;# 
  3074  0D93                     	;# 
  3075  0D94                     	;# 
  3076  0D95                     	;# 
  3077  0D95                     	;# 
  3078  0D96                     	;# 
  3079  0D97                     	;# 
  3080  0D98                     	;# 
  3081  0D99                     	;# 
  3082  0D9A                     	;# 
  3083  0D9B                     	;# 
  3084  0D9C                     	;# 
  3085  0D9D                     	;# 
  3086  0D9E                     	;# 
  3087  0D9E                     	;# 
  3088  0D9F                     	;# 
  3089  0DA0                     	;# 
  3090  0DA1                     	;# 
  3091  0DA1                     	;# 
  3092  0DA2                     	;# 
  3093  0DA3                     	;# 
  3094  0DA4                     	;# 
  3095  0DA4                     	;# 
  3096  0DA5                     	;# 
  3097  0DA6                     	;# 
  3098  0DA7                     	;# 
  3099  0DA7                     	;# 
  3100  0DA8                     	;# 
  3101  0DA9                     	;# 
  3102  0DAA                     	;# 
  3103  0DAB                     	;# 
  3104  0DAC                     	;# 
  3105  0DAD                     	;# 
  3106  0DAE                     	;# 
  3107  0DAF                     	;# 
  3108  0E0F                     	;# 
  3109  0E10                     	;# 
  3110  0E11                     	;# 
  3111  0E12                     	;# 
  3112  0E13                     	;# 
  3113  0E14                     	;# 
  3114  0E15                     	;# 
  3115  0E16                     	;# 
  3116  0E17                     	;# 
  3117  0E18                     	;# 
  3118  0E19                     	;# 
  3119  0E1A                     	;# 
  3120  0E1B                     	;# 
  3121  0E1C                     	;# 
  3122  0E1D                     	;# 
  3123  0E1E                     	;# 
  3124  0E1F                     	;# 
  3125  0E20                     	;# 
  3126  0E21                     	;# 
  3127  0E22                     	;# 
  3128  0E23                     	;# 
  3129  0E24                     	;# 
  3130  0E25                     	;# 
  3131  0E26                     	;# 
  3132  0E27                     	;# 
  3133  0E28                     	;# 
  3134  0E29                     	;# 
  3135  0E2A                     	;# 
  3136  0E2B                     	;# 
  3137  0E2C                     	;# 
  3138  0E2D                     	;# 
  3139  0E2E                     	;# 
  3140  0E90                     	;# 
  3141  0E91                     	;# 
  3142  0E92                     	;# 
  3143  0E94                     	;# 
  3144  0E95                     	;# 
  3145  0E9C                     	;# 
  3146  0E9D                     	;# 
  3147  0E9E                     	;# 
  3148  0E9F                     	;# 
  3149  0EA0                     	;# 
  3150  0EA1                     	;# 
  3151  0EA2                     	;# 
  3152  0EA3                     	;# 
  3153  0EA4                     	;# 
  3154  0EA5                     	;# 
  3155  0EA6                     	;# 
  3156  0EA7                     	;# 
  3157  0F0F                     	;# 
  3158  0F10                     	;# 
  3159  0F11                     	;# 
  3160  0F12                     	;# 
  3161  0F13                     	;# 
  3162  0F14                     	;# 
  3163  0F15                     	;# 
  3164  0F16                     	;# 
  3165  0F17                     	;# 
  3166  0F18                     	;# 
  3167  0F19                     	;# 
  3168  0F1A                     	;# 
  3169  0F1B                     	;# 
  3170  0F1C                     	;# 
  3171  0F1D                     	;# 
  3172  0F1E                     	;# 
  3173  0F1F                     	;# 
  3174  0F20                     	;# 
  3175  0F21                     	;# 
  3176  0F22                     	;# 
  3177  0F23                     	;# 
  3178  0F24                     	;# 
  3179  0F25                     	;# 
  3180  0F26                     	;# 
  3181  0F27                     	;# 
  3182  0F28                     	;# 
  3183  0F29                     	;# 
  3184  0F2A                     	;# 
  3185  0F2B                     	;# 
  3186  0F2C                     	;# 
  3187  0F2D                     	;# 
  3188  0F2E                     	;# 
  3189  0F2F                     	;# 
  3190  0F30                     	;# 
  3191  0F31                     	;# 
  3192  0F32                     	;# 
  3193  0F33                     	;# 
  3194  0F34                     	;# 
  3195  0F35                     	;# 
  3196  0F36                     	;# 
  3197  0F37                     	;# 
  3198  0FE4                     	;# 
  3199  0FE5                     	;# 
  3200  0FE6                     	;# 
  3201  0FE7                     	;# 
  3202  0FE8                     	;# 
  3203  0FE9                     	;# 
  3204  0FEA                     	;# 
  3205  0FEB                     	;# 
  3206  0FED                     	;# 
  3207  0FEE                     	;# 
  3208  0FEF                     	;# 
  3209  0000                     	;# 
  3210  0001                     	;# 
  3211  0002                     	;# 
  3212  0003                     	;# 
  3213  0004                     	;# 
  3214  0005                     	;# 
  3215  0006                     	;# 
  3216  0007                     	;# 
  3217  0008                     	;# 
  3218  0009                     	;# 
  3219  000A                     	;# 
  3220  000B                     	;# 
  3221  000C                     	;# 
  3222  000D                     	;# 
  3223  000E                     	;# 
  3224  0010                     	;# 
  3225  0011                     	;# 
  3226  0012                     	;# 
  3227  0013                     	;# 
  3228  0014                     	;# 
  3229  0015                     	;# 
  3230  0016                     	;# 
  3231  0016                     	;# 
  3232  0017                     	;# 
  3233  0018                     	;# 
  3234  0019                     	;# 
  3235  001A                     	;# 
  3236  001A                     	;# 
  3237  001B                     	;# 
  3238  001B                     	;# 
  3239  001C                     	;# 
  3240  001D                     	;# 
  3241  001E                     	;# 
  3242  001F                     	;# 
  3243  008C                     	;# 
  3244  008D                     	;# 
  3245  008E                     	;# 
  3246  0090                     	;# 
  3247  0091                     	;# 
  3248  0092                     	;# 
  3249  0093                     	;# 
  3250  0094                     	;# 
  3251  0095                     	;# 
  3252  0096                     	;# 
  3253  0098                     	;# 
  3254  0099                     	;# 
  3255  009A                     	;# 
  3256  009B                     	;# 
  3257  009B                     	;# 
  3258  009C                     	;# 
  3259  009D                     	;# 
  3260  009E                     	;# 
  3261  009F                     	;# 
  3262  010C                     	;# 
  3263  010D                     	;# 
  3264  010E                     	;# 
  3265  0111                     	;# 
  3266  0112                     	;# 
  3267  0113                     	;# 
  3268  0114                     	;# 
  3269  0115                     	;# 
  3270  0116                     	;# 
  3271  0117                     	;# 
  3272  0118                     	;# 
  3273  0119                     	;# 
  3274  011C                     	;# 
  3275  018C                     	;# 
  3276  018D                     	;# 
  3277  018E                     	;# 
  3278  0191                     	;# 
  3279  0191                     	;# 
  3280  0192                     	;# 
  3281  0193                     	;# 
  3282  0193                     	;# 
  3283  0194                     	;# 
  3284  0195                     	;# 
  3285  0196                     	;# 
  3286  0197                     	;# 
  3287  0199                     	;# 
  3288  0199                     	;# 
  3289  0199                     	;# 
  3290  019A                     	;# 
  3291  019A                     	;# 
  3292  019A                     	;# 
  3293  019B                     	;# 
  3294  019B                     	;# 
  3295  019B                     	;# 
  3296  019B                     	;# 
  3297  019B                     	;# 
  3298  019C                     	;# 
  3299  019C                     	;# 
  3300  019C                     	;# 
  3301  019D                     	;# 
  3302  019D                     	;# 
  3303  019D                     	;# 
  3304  019E                     	;# 
  3305  019E                     	;# 
  3306  019E                     	;# 
  3307  019F                     	;# 
  3308  019F                     	;# 
  3309  019F                     	;# 
  3310  019F                     	;# 
  3311  019F                     	;# 
  3312  020C                     	;# 
  3313  020D                     	;# 
  3314  020E                     	;# 
  3315  0211                     	;# 
  3316  0211                     	;# 
  3317  0212                     	;# 
  3318  0212                     	;# 
  3319  0213                     	;# 
  3320  0213                     	;# 
  3321  0214                     	;# 
  3322  0214                     	;# 
  3323  0215                     	;# 
  3324  0215                     	;# 
  3325  0215                     	;# 
  3326  0215                     	;# 
  3327  0216                     	;# 
  3328  0216                     	;# 
  3329  0217                     	;# 
  3330  0217                     	;# 
  3331  028C                     	;# 
  3332  028D                     	;# 
  3333  028E                     	;# 
  3334  0291                     	;# 
  3335  0291                     	;# 
  3336  0292                     	;# 
  3337  0293                     	;# 
  3338  0294                     	;# 
  3339  0298                     	;# 
  3340  0298                     	;# 
  3341  0299                     	;# 
  3342  029A                     	;# 
  3343  029B                     	;# 
  3344  029E                     	;# 
  3345  030C                     	;# 
  3346  030D                     	;# 
  3347  030E                     	;# 
  3348  038C                     	;# 
  3349  038D                     	;# 
  3350  038E                     	;# 
  3351  0391                     	;# 
  3352  0392                     	;# 
  3353  0393                     	;# 
  3354  0394                     	;# 
  3355  0395                     	;# 
  3356  0396                     	;# 
  3357  0397                     	;# 
  3358  0398                     	;# 
  3359  0399                     	;# 
  3360  040E                     	;# 
  3361  0413                     	;# 
  3362  0413                     	;# 
  3363  0414                     	;# 
  3364  0414                     	;# 
  3365  0415                     	;# 
  3366  0416                     	;# 
  3367  0417                     	;# 
  3368  0418                     	;# 
  3369  041A                     	;# 
  3370  041A                     	;# 
  3371  041B                     	;# 
  3372  041B                     	;# 
  3373  041C                     	;# 
  3374  041D                     	;# 
  3375  041E                     	;# 
  3376  041F                     	;# 
  3377  0493                     	;# 
  3378  0494                     	;# 
  3379  0495                     	;# 
  3380  0496                     	;# 
  3381  049A                     	;# 
  3382  049B                     	;# 
  3383  049C                     	;# 
  3384  049D                     	;# 
  3385  058C                     	;# 
  3386  058C                     	;# 
  3387  058D                     	;# 
  3388  058E                     	;# 
  3389  058E                     	;# 
  3390  058F                     	;# 
  3391  0590                     	;# 
  3392  0590                     	;# 
  3393  0591                     	;# 
  3394  0592                     	;# 
  3395  0592                     	;# 
  3396  0593                     	;# 
  3397  0594                     	;# 
  3398  0594                     	;# 
  3399  0595                     	;# 
  3400  0596                     	;# 
  3401  0596                     	;# 
  3402  0597                     	;# 
  3403  0598                     	;# 
  3404  0599                     	;# 
  3405  059A                     	;# 
  3406  059B                     	;# 
  3407  059B                     	;# 
  3408  059C                     	;# 
  3409  059D                     	;# 
  3410  060C                     	;# 
  3411  060C                     	;# 
  3412  060D                     	;# 
  3413  060E                     	;# 
  3414  060F                     	;# 
  3415  060F                     	;# 
  3416  0610                     	;# 
  3417  0611                     	;# 
  3418  0612                     	;# 
  3419  0613                     	;# 
  3420  0614                     	;# 
  3421  0617                     	;# 
  3422  0618                     	;# 
  3423  0619                     	;# 
  3424  061A                     	;# 
  3425  061B                     	;# 
  3426  061C                     	;# 
  3427  0691                     	;# 
  3428  0692                     	;# 
  3429  0693                     	;# 
  3430  0694                     	;# 
  3431  0695                     	;# 
  3432  0696                     	;# 
  3433  0697                     	;# 
  3434  0699                     	;# 
  3435  069A                     	;# 
  3436  0711                     	;# 
  3437  0712                     	;# 
  3438  0713                     	;# 
  3439  0714                     	;# 
  3440  0715                     	;# 
  3441  0718                     	;# 
  3442  0718                     	;# 
  3443  0719                     	;# 
  3444  071A                     	;# 
  3445  071A                     	;# 
  3446  071B                     	;# 
  3447  071C                     	;# 
  3448  071D                     	;# 
  3449  0791                     	;# 
  3450  0791                     	;# 
  3451  0792                     	;# 
  3452  0793                     	;# 
  3453  0793                     	;# 
  3454  0794                     	;# 
  3455  0795                     	;# 
  3456  0795                     	;# 
  3457  0796                     	;# 
  3458  0797                     	;# 
  3459  0797                     	;# 
  3460  0798                     	;# 
  3461  0799                     	;# 
  3462  079A                     	;# 
  3463  080C                     	;# 
  3464  080C                     	;# 
  3465  080D                     	;# 
  3466  080E                     	;# 
  3467  080E                     	;# 
  3468  080F                     	;# 
  3469  0810                     	;# 
  3470  0810                     	;# 
  3471  0811                     	;# 
  3472  0812                     	;# 
  3473  0812                     	;# 
  3474  0813                     	;# 
  3475  0814                     	;# 
  3476  0815                     	;# 
  3477  0816                     	;# 
  3478  0817                     	;# 
  3479  0818                     	;# 
  3480  0819                     	;# 
  3481  081A                     	;# 
  3482  081A                     	;# 
  3483  081B                     	;# 
  3484  081C                     	;# 
  3485  081C                     	;# 
  3486  081D                     	;# 
  3487  088C                     	;# 
  3488  088D                     	;# 
  3489  088E                     	;# 
  3490  088F                     	;# 
  3491  088F                     	;# 
  3492  0890                     	;# 
  3493  0891                     	;# 
  3494  0892                     	;# 
  3495  0893                     	;# 
  3496  0893                     	;# 
  3497  0894                     	;# 
  3498  0895                     	;# 
  3499  0896                     	;# 
  3500  0897                     	;# 
  3501  0897                     	;# 
  3502  0898                     	;# 
  3503  0899                     	;# 
  3504  0D8C                     	;# 
  3505  0D8C                     	;# 
  3506  0D8D                     	;# 
  3507  0D8E                     	;# 
  3508  0D8F                     	;# 
  3509  0D8F                     	;# 
  3510  0D90                     	;# 
  3511  0D91                     	;# 
  3512  0D92                     	;# 
  3513  0D92                     	;# 
  3514  0D93                     	;# 
  3515  0D94                     	;# 
  3516  0D95                     	;# 
  3517  0D95                     	;# 
  3518  0D96                     	;# 
  3519  0D97                     	;# 
  3520  0D98                     	;# 
  3521  0D99                     	;# 
  3522  0D9A                     	;# 
  3523  0D9B                     	;# 
  3524  0D9C                     	;# 
  3525  0D9D                     	;# 
  3526  0D9E                     	;# 
  3527  0D9E                     	;# 
  3528  0D9F                     	;# 
  3529  0DA0                     	;# 
  3530  0DA1                     	;# 
  3531  0DA1                     	;# 
  3532  0DA2                     	;# 
  3533  0DA3                     	;# 
  3534  0DA4                     	;# 
  3535  0DA4                     	;# 
  3536  0DA5                     	;# 
  3537  0DA6                     	;# 
  3538  0DA7                     	;# 
  3539  0DA7                     	;# 
  3540  0DA8                     	;# 
  3541  0DA9                     	;# 
  3542  0DAA                     	;# 
  3543  0DAB                     	;# 
  3544  0DAC                     	;# 
  3545  0DAD                     	;# 
  3546  0DAE                     	;# 
  3547  0DAF                     	;# 
  3548  0E0F                     	;# 
  3549  0E10                     	;# 
  3550  0E11                     	;# 
  3551  0E12                     	;# 
  3552  0E13                     	;# 
  3553  0E14                     	;# 
  3554  0E15                     	;# 
  3555  0E16                     	;# 
  3556  0E17                     	;# 
  3557  0E18                     	;# 
  3558  0E19                     	;# 
  3559  0E1A                     	;# 
  3560  0E1B                     	;# 
  3561  0E1C                     	;# 
  3562  0E1D                     	;# 
  3563  0E1E                     	;# 
  3564  0E1F                     	;# 
  3565  0E20                     	;# 
  3566  0E21                     	;# 
  3567  0E22                     	;# 
  3568  0E23                     	;# 
  3569  0E24                     	;# 
  3570  0E25                     	;# 
  3571  0E26                     	;# 
  3572  0E27                     	;# 
  3573  0E28                     	;# 
  3574  0E29                     	;# 
  3575  0E2A                     	;# 
  3576  0E2B                     	;# 
  3577  0E2C                     	;# 
  3578  0E2D                     	;# 
  3579  0E2E                     	;# 
  3580  0E90                     	;# 
  3581  0E91                     	;# 
  3582  0E92                     	;# 
  3583  0E94                     	;# 
  3584  0E95                     	;# 
  3585  0E9C                     	;# 
  3586  0E9D                     	;# 
  3587  0E9E                     	;# 
  3588  0E9F                     	;# 
  3589  0EA0                     	;# 
  3590  0EA1                     	;# 
  3591  0EA2                     	;# 
  3592  0EA3                     	;# 
  3593  0EA4                     	;# 
  3594  0EA5                     	;# 
  3595  0EA6                     	;# 
  3596  0EA7                     	;# 
  3597  0F0F                     	;# 
  3598  0F10                     	;# 
  3599  0F11                     	;# 
  3600  0F12                     	;# 
  3601  0F13                     	;# 
  3602  0F14                     	;# 
  3603  0F15                     	;# 
  3604  0F16                     	;# 
  3605  0F17                     	;# 
  3606  0F18                     	;# 
  3607  0F19                     	;# 
  3608  0F1A                     	;# 
  3609  0F1B                     	;# 
  3610  0F1C                     	;# 
  3611  0F1D                     	;# 
  3612  0F1E                     	;# 
  3613  0F1F                     	;# 
  3614  0F20                     	;# 
  3615  0F21                     	;# 
  3616  0F22                     	;# 
  3617  0F23                     	;# 
  3618  0F24                     	;# 
  3619  0F25                     	;# 
  3620  0F26                     	;# 
  3621  0F27                     	;# 
  3622  0F28                     	;# 
  3623  0F29                     	;# 
  3624  0F2A                     	;# 
  3625  0F2B                     	;# 
  3626  0F2C                     	;# 
  3627  0F2D                     	;# 
  3628  0F2E                     	;# 
  3629  0F2F                     	;# 
  3630  0F30                     	;# 
  3631  0F31                     	;# 
  3632  0F32                     	;# 
  3633  0F33                     	;# 
  3634  0F34                     	;# 
  3635  0F35                     	;# 
  3636  0F36                     	;# 
  3637  0F37                     	;# 
  3638  0FE4                     	;# 
  3639  0FE5                     	;# 
  3640  0FE6                     	;# 
  3641  0FE7                     	;# 
  3642  0FE8                     	;# 
  3643  0FE9                     	;# 
  3644  0FEA                     	;# 
  3645  0FEB                     	;# 
  3646  0FED                     	;# 
  3647  0FEE                     	;# 
  3648  0FEF                     	;# 
  3649                           
  3650                           	psect	idataBANK0
  3651  059D                     __pidataBANK0:	
  3652                           
  3653                           ;initializer for _Angle
  3654  059D  340A               	retlw	10
  3655  059E  3400               	retlw	0
  3656                           
  3657                           ;initializer for _StateBat
  3658  059F  3401               	retlw	1
  3659                           
  3660                           ;initializer for _Validation
  3661  05A0  3404               	retlw	4
  3662                           
  3663                           	psect	stringtext1
  3664  03D4                     __pstringtext1:	
  3665  03D4                     _fsmStateTable:	
  3666  03D4  3493               	retlw	low _I2C_DO_IDLE
  3667  03D5  3405               	retlw	high _I2C_DO_IDLE
  3668  03D6  3440               	retlw	low _I2C_DO_SEND_ADR_READ
  3669  03D7  3405               	retlw	high _I2C_DO_SEND_ADR_READ
  3670  03D8  3457               	retlw	low _I2C_DO_SEND_ADR_WRITE
  3671  03D9  3405               	retlw	high _I2C_DO_SEND_ADR_WRITE
  3672  03DA  34B3               	retlw	low _I2C_DO_TX
  3673  03DB  3401               	retlw	high _I2C_DO_TX
  3674  03DC  3439               	retlw	low _I2C_DO_RX
  3675  03DD  3402               	retlw	high _I2C_DO_RX
  3676  03DE  3482               	retlw	low _I2C_DO_RCEN
  3677  03DF  3405               	retlw	high _I2C_DO_RCEN
  3678  03E0  3468               	retlw	low _I2C_DO_TX_EMPTY
  3679  03E1  3403               	retlw	high _I2C_DO_TX_EMPTY
  3680  03E2  34C1               	retlw	low _I2C_DO_SEND_RESTART_READ
  3681  03E3  3405               	retlw	high _I2C_DO_SEND_RESTART_READ
  3682  03E4  34BD               	retlw	low _I2C_DO_SEND_RESTART_WRITE
  3683  03E5  3405               	retlw	high _I2C_DO_SEND_RESTART_WRITE
  3684  03E6  34B9               	retlw	low _I2C_DO_SEND_RESTART
  3685  03E7  3405               	retlw	high _I2C_DO_SEND_RESTART
  3686  03E8  34B5               	retlw	low _I2C_DO_SEND_STOP
  3687  03E9  3405               	retlw	high _I2C_DO_SEND_STOP
  3688  03EA  34B1               	retlw	low _I2C_DO_RX_ACK
  3689  03EB  3405               	retlw	high _I2C_DO_RX_ACK
  3690  03EC  34AD               	retlw	low _I2C_DO_RX_NACK_STOP
  3691  03ED  3405               	retlw	high _I2C_DO_RX_NACK_STOP
  3692  03EE  34A9               	retlw	low _I2C_DO_RX_NACK_RESTART
  3693  03EF  3405               	retlw	high _I2C_DO_RX_NACK_RESTART
  3694  03F0  348E               	retlw	low _I2C_DO_RESET
  3695  03F1  3405               	retlw	high _I2C_DO_RESET
  3696  03F2  34B1               	retlw	low _I2C_DO_ADDRESS_NACK
  3697  03F3  3403               	retlw	high _I2C_DO_ADDRESS_NACK
  3698  03F4                     __end_of_fsmStateTable:	
  3699                           
  3700                           	psect	nvBANK0
  3701  0063                     __pnvBANK0:	
  3702  0063                     _TMR2_InterruptHandler:	
  3703  0063                     	ds	2
  3704  0065                     _EUSART_RxDefaultInterruptHandler:	
  3705  0065                     	ds	2
  3706                           
  3707                           	psect	nvBANK1
  3708  00A0                     __pnvBANK1:	
  3709  00A0                     _EUSART_ErrorHandler:	
  3710  00A0                     	ds	2
  3711  00A2                     _EUSART_OverrunErrorHandler:	
  3712  00A2                     	ds	2
  3713  00A4                     _EUSART_FramingErrorHandler:	
  3714  00A4                     	ds	2
  3715  000C                     _PORTAbits	set	12
  3716  001B                     _PR2	set	27
  3717  001A                     _TMR2	set	26
  3718  001C                     _T2CONbits	set	28
  3719  001F                     _T2RSTbits	set	31
  3720  001D                     _T2HLTbits	set	29
  3721  001C                     _T2CON	set	28
  3722  001A                     _T2TMR	set	26
  3723  001B                     _T2PR	set	27
  3724  001F                     _T2RST	set	31
  3725  001D                     _T2HLT	set	29
  3726  001E                     _T2CLKCON	set	30
  3727  0011                     _PIR2bits	set	17
  3728  0010                     _PIR1bits	set	16
  3729  000B                     _INTCONbits	set	11
  3730  0095                     _OPTION_REGbits	set	149
  3731  008E                     _TRISC	set	142
  3732  008D                     _TRISB	set	141
  3733  008C                     _TRISA	set	140
  3734  0098                     _OSCTUNE	set	152
  3735  0099                     _OSCCON	set	153
  3736  0090                     _PIE1bits	set	144
  3737  010C                     _LATAbits	set	268
  3738  010E                     _LATCbits	set	270
  3739  010E                     _LATC	set	270
  3740  010D                     _LATB	set	269
  3741  010C                     _LATA	set	268
  3742  0116                     _BORCON	set	278
  3743  0199                     _RC1REG	set	409
  3744  019D                     _RC1STAbits	set	413
  3745  019A                     _TX1REG	set	410
  3746  019E                     _TX1STAbits	set	414
  3747  019C                     _SPBRGH	set	412
  3748  019B                     _SPBRGL	set	411
  3749  019E                     _TX1STA	set	414
  3750  019D                     _RC1STA	set	413
  3751  019F                     _BAUD1CON	set	415
  3752  018C                     _ANSELA	set	396
  3753  018D                     _ANSELB	set	397
  3754  018E                     _ANSELC	set	398
  3755  0214                     _SSP1STATbits	set	532
  3756  0216                     _SSP1CON2bits	set	534
  3757  0211                     _SSP1BUF	set	529
  3758  0215                     _SSP1CON1bits	set	533
  3759  0212                     _SSP1ADD	set	530
  3760  0216                     _SSP1CON2	set	534
  3761  0215                     _SSP1CON1	set	533
  3762  0214                     _SSP1STAT	set	532
  3763  020E                     _WPUC	set	526
  3764  020C                     _WPUA	set	524
  3765  020D                     _WPUB	set	525
  3766  029E                     _CCPTMRSbits	set	670
  3767  028E                     _ODCONC	set	654
  3768  028D                     _ODCONB	set	653
  3769  028C                     _ODCONA	set	652
  3770  030E                     _SLRCONC	set	782
  3771  030D                     _SLRCONB	set	781
  3772  030C                     _SLRCONA	set	780
  3773  038E                     _INLVLC	set	910
  3774  038D                     _INLVLB	set	909
  3775  038C                     _INLVLA	set	908
  3776  0617                     _PWM3DCL	set	1559
  3777  0618                     _PWM3DCH	set	1560
  3778  0619                     _PWM3CON	set	1561
  3779  0E20                     _SSPCLKPPS	set	3616
  3780  0E21                     _SSPDATPPS	set	3617
  3781  0E24                     _RXPPS	set	3620
  3782  0E92                     _RA2PPS	set	3730
  3783  0E9C                     _RB4PPS	set	3740
  3784  0E9F                     _RB7PPS	set	3743
  3785  0E9E                     _RB6PPS	set	3742
  3786                           
  3787                           ; #config settings
  3788  0000                     
  3789                           	psect	cinit
  3790  0026                     start_initialization:	
  3791  0026                     __initialization:	
  3792                           
  3793                           ; Initialize objects allocated to BANK0
  3794  0026  3185  259D  3180   	fcall	__pidataBANK0	;fetch initializer
  3795  0029  00E7               	movwf	__pdataBANK0& (0+127)
  3796  002A  3185  259E  3180   	fcall	__pidataBANK0+1	;fetch initializer
  3797  002D  00E8               	movwf	(__pdataBANK0+1)& (0+127)
  3798  002E  3185  259F  3180   	fcall	__pidataBANK0+2	;fetch initializer
  3799  0031  00E9               	movwf	(__pdataBANK0+2)& (0+127)
  3800  0032  3185  25A0  3180   	fcall	__pidataBANK0+3	;fetch initializer
  3801  0035  00EA               	movwf	(__pdataBANK0+3)& (0+127)
  3802                           
  3803                           ; Clear objects allocated to BANK0
  3804  0036  3020               	movlw	low __pbssBANK0
  3805  0037  0084               	movwf	4
  3806  0038  3000               	movlw	high __pbssBANK0
  3807  0039  0085               	movwf	5
  3808  003A  3037               	movlw	55
  3809  003B  3185  255E         	fcall	clear_ram0
  3810  003D                     end_of_initialization:	
  3811                           ;End of C runtime variable initialization code
  3812                           
  3813  003D                     __end_of__initialization:	
  3814  003D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3815  003E  0020               	movlb	0
  3816  003F  3181  295D         	ljmp	_main	;jump to C main() function
  3817                           
  3818                           	psect	bssBANK0
  3819  0020                     __pbssBANK0:	
  3820  0020                     _I2C_Status:	
  3821  0020                     	ds	29
  3822  003D                     _eusartRxStatusBuffer:	
  3823  003D                     	ds	8
  3824  0045                     _eusartRxBuffer:	
  3825  0045                     	ds	8
  3826  004D                     _Vitesse:	
  3827  004D                     	ds	2
  3828  004F                     _StateLeds:	
  3829  004F                     	ds	1
  3830  0050                     _PosUart:	
  3831  0050                     	ds	1
  3832  0051                     _Type:	
  3833  0051                     	ds	1
  3834  0052                     _Data:	
  3835  0052                     	ds	1
  3836  0053                     _eusartRxLastError:	
  3837  0053                     	ds	1
  3838  0054                     _eusartRxCount:	
  3839  0054                     	ds	1
  3840  0055                     _eusartRxTail:	
  3841  0055                     	ds	1
  3842  0056                     _eusartRxHead:	
  3843  0056                     	ds	1
  3844                           
  3845                           	psect	dataBANK0
  3846  0067                     __pdataBANK0:	
  3847  0067                     _Angle:	
  3848  0067                     	ds	2
  3849  0069                     _StateBat:	
  3850  0069                     	ds	1
  3851  006A                     _Validation:	
  3852  006A                     	ds	1
  3853                           
  3854                           	psect	clrtext
  3855  055E                     clear_ram0:	
  3856                           ;	Called with FSR0 containing the base address, and
  3857                           ;	WREG with the size to clear
  3858                           
  3859  055E  0064               	clrwdt	;clear the watchdog before getting into this loop
  3860  055F                     clrloop0:	
  3861  055F  0180               	clrf	0	;clear RAM location pointed to by FSR
  3862  0560  3101               	addfsr 0,1
  3863  0561  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3864  0562  2D5F               	goto	clrloop0	;have we reached the end yet?
  3865  0563  3400               	retlw	0	;all done for this memory range, return
  3866                           
  3867                           	psect	cstackBANK1
  3868  00A6                     __pcstackBANK1:	
  3869  00A6                     ??_I2C_Initialize:	
  3870  00A6                     ??_PIN_MANAGER_Initialize:	
  3871                           ; 1 bytes @ 0x0
  3872                           
  3873  00A6                     ??_OSCILLATOR_Initialize:	
  3874                           ; 1 bytes @ 0x0
  3875                           
  3876  00A6                     ??_PWM3_Initialize:	
  3877                           ; 1 bytes @ 0x0
  3878                           
  3879  00A6                     ?_EUSART_SetRxInterruptHandler:	
  3880                           ; 1 bytes @ 0x0
  3881                           
  3882  00A6                     ?_EUSART_SetFramingErrorHandler:	
  3883                           ; 1 bytes @ 0x0
  3884                           
  3885  00A6                     ?_EUSART_SetOverrunErrorHandler:	
  3886                           ; 1 bytes @ 0x0
  3887                           
  3888  00A6                     ?_EUSART_SetErrorHandler:	
  3889                           ; 1 bytes @ 0x0
  3890                           
  3891  00A6                     ?_TMR2_SetInterruptHandler:	
  3892                           ; 1 bytes @ 0x0
  3893                           
  3894  00A6                     ??_TMR2_Start:	
  3895                           ; 1 bytes @ 0x0
  3896                           
  3897  00A6                     ??_TMR2_StartTimer:	
  3898                           ; 1 bytes @ 0x0
  3899                           
  3900  00A6                     ??_TMR2_Counter8BitSet:	
  3901                           ; 1 bytes @ 0x0
  3902                           
  3903  00A6                     TMR2_Counter8BitSet@timerVal:	
  3904                           ; 1 bytes @ 0x0
  3905                           
  3906  00A6                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3907                           ; 1 bytes @ 0x0
  3908                           
  3909  00A6                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3910                           ; 2 bytes @ 0x0
  3911                           
  3912  00A6                     EUSART_SetErrorHandler@interruptHandler:	
  3913                           ; 2 bytes @ 0x0
  3914                           
  3915  00A6                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3916                           ; 2 bytes @ 0x0
  3917                           
  3918  00A6                     TMR2_SetInterruptHandler@InterruptHandler:	
  3919                           ; 2 bytes @ 0x0
  3920                           
  3921                           
  3922                           ; 2 bytes @ 0x0
  3923  00A6                     	ds	1
  3924  00A7                     ??_TMR2_WriteTimer:	
  3925  00A7                     TMR2_WriteTimer@timerVal:	
  3926                           ; 1 bytes @ 0x1
  3927                           
  3928                           
  3929                           ; 1 bytes @ 0x1
  3930  00A7                     	ds	1
  3931  00A8                     ??_TMR2_Initialize:	
  3932  00A8                     ??_EUSART_Initialize:	
  3933                           ; 1 bytes @ 0x2
  3934                           
  3935  00A8                     ??_EUSART_SetRxInterruptHandler:	
  3936                           ; 1 bytes @ 0x2
  3937                           
  3938  00A8                     ??_EUSART_SetFramingErrorHandler:	
  3939                           ; 1 bytes @ 0x2
  3940                           
  3941  00A8                     ??_EUSART_SetOverrunErrorHandler:	
  3942                           ; 1 bytes @ 0x2
  3943                           
  3944  00A8                     ??_EUSART_SetErrorHandler:	
  3945                           ; 1 bytes @ 0x2
  3946                           
  3947  00A8                     ??_TMR2_SetInterruptHandler:	
  3948                           ; 1 bytes @ 0x2
  3949                           
  3950  00A8                     ??_SYSTEM_Initialize:	
  3951                           ; 1 bytes @ 0x2
  3952                           
  3953  00A8                     ??_main:	
  3954                           ; 1 bytes @ 0x2
  3955                           
  3956                           
  3957                           ; 1 bytes @ 0x2
  3958  00A8                     	ds	2
  3959                           
  3960                           	psect	cstackCOMMON
  3961  0070                     __pcstackCOMMON:	
  3962  0070                     ?_I2C_Open:	
  3963  0070                     ??_I2C_Open:	
  3964                           ; 1 bytes @ 0x0
  3965                           
  3966  0070                     ?_I2C_SetBuffer:	
  3967                           ; 1 bytes @ 0x0
  3968                           
  3969  0070                     ?_I2C_MasterWrite:	
  3970                           ; 1 bytes @ 0x0
  3971                           
  3972  0070                     ?_I2C_Close:	
  3973                           ; 1 bytes @ 0x0
  3974                           
  3975  0070                     ??_I2C_Close:	
  3976                           ; 1 bytes @ 0x0
  3977                           
  3978  0070                     ?_TMR2_ISR:	
  3979                           ; 1 bytes @ 0x0
  3980                           
  3981  0070                     ?_I2C_Initialize:	
  3982                           ; 1 bytes @ 0x0
  3983                           
  3984  0070                     ?_PIN_MANAGER_Initialize:	
  3985                           ; 1 bytes @ 0x0
  3986                           
  3987  0070                     ?_OSCILLATOR_Initialize:	
  3988                           ; 1 bytes @ 0x0
  3989                           
  3990  0070                     ?_PWM3_Initialize:	
  3991                           ; 1 bytes @ 0x0
  3992                           
  3993  0070                     ?_TMR2_Initialize:	
  3994                           ; 1 bytes @ 0x0
  3995                           
  3996  0070                     ?_EUSART_Initialize:	
  3997                           ; 1 bytes @ 0x0
  3998                           
  3999  0070                     ?_I2C_DO_IDLE:	
  4000                           ; 1 bytes @ 0x0
  4001                           
  4002  0070                     ??_I2C_DO_IDLE:	
  4003                           ; 1 bytes @ 0x0
  4004                           
  4005  0070                     ?_I2C_DO_SEND_ADR_READ:	
  4006                           ; 1 bytes @ 0x0
  4007                           
  4008  0070                     ??_I2C_DO_SEND_ADR_READ:	
  4009                           ; 1 bytes @ 0x0
  4010                           
  4011  0070                     ?_I2C_DO_SEND_ADR_WRITE:	
  4012                           ; 1 bytes @ 0x0
  4013                           
  4014  0070                     ?_I2C_DO_TX:	
  4015                           ; 1 bytes @ 0x0
  4016                           
  4017  0070                     ?_I2C_DO_RX:	
  4018                           ; 1 bytes @ 0x0
  4019                           
  4020  0070                     ?_I2C_DO_RCEN:	
  4021                           ; 1 bytes @ 0x0
  4022                           
  4023  0070                     ??_I2C_DO_RCEN:	
  4024                           ; 1 bytes @ 0x0
  4025                           
  4026  0070                     ?_I2C_DO_TX_EMPTY:	
  4027                           ; 1 bytes @ 0x0
  4028                           
  4029  0070                     ?_I2C_DO_SEND_RESTART_READ:	
  4030                           ; 1 bytes @ 0x0
  4031                           
  4032  0070                     ??_I2C_DO_SEND_RESTART_READ:	
  4033                           ; 1 bytes @ 0x0
  4034                           
  4035  0070                     ?_I2C_DO_SEND_RESTART_WRITE:	
  4036                           ; 1 bytes @ 0x0
  4037                           
  4038  0070                     ??_I2C_DO_SEND_RESTART_WRITE:	
  4039                           ; 1 bytes @ 0x0
  4040                           
  4041  0070                     ?_I2C_DO_SEND_RESTART:	
  4042                           ; 1 bytes @ 0x0
  4043                           
  4044  0070                     ??_I2C_DO_SEND_RESTART:	
  4045                           ; 1 bytes @ 0x0
  4046                           
  4047  0070                     ?_I2C_DO_SEND_STOP:	
  4048                           ; 1 bytes @ 0x0
  4049                           
  4050  0070                     ??_I2C_DO_SEND_STOP:	
  4051                           ; 1 bytes @ 0x0
  4052                           
  4053  0070                     ?_I2C_DO_RX_ACK:	
  4054                           ; 1 bytes @ 0x0
  4055                           
  4056  0070                     ??_I2C_DO_RX_ACK:	
  4057                           ; 1 bytes @ 0x0
  4058                           
  4059  0070                     ?_I2C_DO_RX_NACK_STOP:	
  4060                           ; 1 bytes @ 0x0
  4061                           
  4062  0070                     ??_I2C_DO_RX_NACK_STOP:	
  4063                           ; 1 bytes @ 0x0
  4064                           
  4065  0070                     ?_I2C_DO_RX_NACK_RESTART:	
  4066                           ; 1 bytes @ 0x0
  4067                           
  4068  0070                     ??_I2C_DO_RX_NACK_RESTART:	
  4069                           ; 1 bytes @ 0x0
  4070                           
  4071  0070                     ?_I2C_DO_RESET:	
  4072                           ; 1 bytes @ 0x0
  4073                           
  4074  0070                     ??_I2C_DO_RESET:	
  4075                           ; 1 bytes @ 0x0
  4076                           
  4077  0070                     ?_I2C_DO_ADDRESS_NACK:	
  4078                           ; 1 bytes @ 0x0
  4079                           
  4080  0070                     ?_I2C_MasterClearIrq:	
  4081                           ; 1 bytes @ 0x0
  4082                           
  4083  0070                     ??_I2C_MasterClearIrq:	
  4084                           ; 1 bytes @ 0x0
  4085                           
  4086  0070                     ?_I2C_MasterOpen:	
  4087                           ; 1 bytes @ 0x0
  4088                           
  4089  0070                     ??_I2C_MasterOpen:	
  4090                           ; 1 bytes @ 0x0
  4091                           
  4092  0070                     ?_I2C_MasterDisableIrq:	
  4093                           ; 1 bytes @ 0x0
  4094                           
  4095  0070                     ??_I2C_MasterDisableIrq:	
  4096                           ; 1 bytes @ 0x0
  4097                           
  4098  0070                     ?_I2C_MasterClose:	
  4099                           ; 1 bytes @ 0x0
  4100                           
  4101  0070                     ??_I2C_MasterClose:	
  4102                           ; 1 bytes @ 0x0
  4103                           
  4104  0070                     ?_I2C_MasterStart:	
  4105                           ; 1 bytes @ 0x0
  4106                           
  4107  0070                     ??_I2C_MasterStart:	
  4108                           ; 1 bytes @ 0x0
  4109                           
  4110  0070                     ?_I2C_Poller:	
  4111                           ; 1 bytes @ 0x0
  4112                           
  4113  0070                     ?_I2C_SetCallback:	
  4114                           ; 1 bytes @ 0x0
  4115                           
  4116  0070                     ?_I2C_MasterWaitForEvent:	
  4117                           ; 1 bytes @ 0x0
  4118                           
  4119  0070                     ??_I2C_MasterWaitForEvent:	
  4120                           ; 1 bytes @ 0x0
  4121                           
  4122  0070                     ?_I2C_MasterFsm:	
  4123                           ; 1 bytes @ 0x0
  4124                           
  4125  0070                     ?_I2C_MasterIsNack:	
  4126                           ; 1 bytes @ 0x0
  4127                           
  4128  0070                     ??_I2C_MasterIsNack:	
  4129                           ; 1 bytes @ 0x0
  4130                           
  4131  0070                     ?_I2C_MasterSendTxData:	
  4132                           ; 1 bytes @ 0x0
  4133                           
  4134  0070                     ??_I2C_MasterSendTxData:	
  4135                           ; 1 bytes @ 0x0
  4136                           
  4137  0070                     ?_I2C_MasterGetRxData:	
  4138                           ; 1 bytes @ 0x0
  4139                           
  4140  0070                     ??_I2C_MasterGetRxData:	
  4141                           ; 1 bytes @ 0x0
  4142                           
  4143  0070                     ?_I2C_MasterSendAck:	
  4144                           ; 1 bytes @ 0x0
  4145                           
  4146  0070                     ??_I2C_MasterSendAck:	
  4147                           ; 1 bytes @ 0x0
  4148                           
  4149  0070                     ?_I2C_MasterStartRx:	
  4150                           ; 1 bytes @ 0x0
  4151                           
  4152  0070                     ??_I2C_MasterStartRx:	
  4153                           ; 1 bytes @ 0x0
  4154                           
  4155  0070                     ?_I2C_MasterSetIrq:	
  4156                           ; 1 bytes @ 0x0
  4157                           
  4158  0070                     ??_I2C_MasterSetIrq:	
  4159                           ; 1 bytes @ 0x0
  4160                           
  4161  0070                     ?_I2C_MasterEnableRestart:	
  4162                           ; 1 bytes @ 0x0
  4163                           
  4164  0070                     ??_I2C_MasterEnableRestart:	
  4165                           ; 1 bytes @ 0x0
  4166                           
  4167  0070                     ?_I2C_MasterStop:	
  4168                           ; 1 bytes @ 0x0
  4169                           
  4170  0070                     ??_I2C_MasterStop:	
  4171                           ; 1 bytes @ 0x0
  4172                           
  4173  0070                     ?_I2C_MasterSendNack:	
  4174                           ; 1 bytes @ 0x0
  4175                           
  4176  0070                     ??_I2C_MasterSendNack:	
  4177                           ; 1 bytes @ 0x0
  4178                           
  4179  0070                     ?_EUSART_Receive_ISR:	
  4180                           ; 1 bytes @ 0x0
  4181                           
  4182  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  4183                           ; 1 bytes @ 0x0
  4184                           
  4185  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  4186                           ; 1 bytes @ 0x0
  4187                           
  4188  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  4189                           ; 1 bytes @ 0x0
  4190                           
  4191  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  4192                           ; 1 bytes @ 0x0
  4193                           
  4194  0070                     ?_EUSART_DefaultErrorHandler:	
  4195                           ; 1 bytes @ 0x0
  4196                           
  4197  0070                     ?_EUSART_RxDataHandler:	
  4198                           ; 1 bytes @ 0x0
  4199                           
  4200  0070                     ??_EUSART_RxDataHandler:	
  4201                           ; 1 bytes @ 0x0
  4202                           
  4203  0070                     ?_TMR2_DefaultInterruptHandler:	
  4204                           ; 1 bytes @ 0x0
  4205                           
  4206  0070                     ??_TMR2_DefaultInterruptHandler:	
  4207                           ; 1 bytes @ 0x0
  4208                           
  4209  0070                     ?_INTERRUPT_InterruptManager:	
  4210                           ; 1 bytes @ 0x0
  4211                           
  4212  0070                     ?_SYSTEM_Initialize:	
  4213                           ; 1 bytes @ 0x0
  4214                           
  4215  0070                     ?_I2C_MasterOperation:	
  4216                           ; 1 bytes @ 0x0
  4217                           
  4218  0070                     ?_EUSART_Write:	
  4219                           ; 1 bytes @ 0x0
  4220                           
  4221  0070                     ??_EUSART_Write:	
  4222                           ; 1 bytes @ 0x0
  4223                           
  4224  0070                     ?_PWM3_LoadDutyValue:	
  4225                           ; 1 bytes @ 0x0
  4226                           
  4227  0070                     ?_TMR2_Start:	
  4228                           ; 1 bytes @ 0x0
  4229                           
  4230  0070                     ?_TMR2_StartTimer:	
  4231                           ; 1 bytes @ 0x0
  4232                           
  4233  0070                     ?_TMR2_Counter8BitSet:	
  4234                           ; 1 bytes @ 0x0
  4235                           
  4236  0070                     ?_TMR2_WriteTimer:	
  4237                           ; 1 bytes @ 0x0
  4238                           
  4239  0070                     ?_MyTimer2ISR:	
  4240                           ; 1 bytes @ 0x0
  4241                           
  4242  0070                     ?_MyUART_ISR:	
  4243                           ; 1 bytes @ 0x0
  4244                           
  4245  0070                     ?_main:	
  4246                           ; 1 bytes @ 0x0
  4247                           
  4248  0070                     I2C_MasterSendTxData@data:	
  4249                           ; 1 bytes @ 0x0
  4250                           
  4251  0070                     EUSART_Write@txData:	
  4252                           ; 1 bytes @ 0x0
  4253                           
  4254  0070                     I2C_SetBuffer@bufferSize:	
  4255                           ; 1 bytes @ 0x0
  4256                           
  4257  0070                     I2C_SetCallback@cb:	
  4258                           ; 2 bytes @ 0x0
  4259                           
  4260  0070                     PWM3_LoadDutyValue@dutyValue:	
  4261                           ; 2 bytes @ 0x0
  4262                           
  4263                           
  4264                           ; 2 bytes @ 0x0
  4265  0070                     	ds	1
  4266  0071                     ??_I2C_DO_SEND_ADR_WRITE:	
  4267  0071                     ??_EUSART_Receive_ISR:	
  4268                           ; 1 bytes @ 0x1
  4269                           
  4270  0071                     ??_EUSART_DefaultErrorHandler:	
  4271                           ; 1 bytes @ 0x1
  4272                           
  4273  0071                     ??_MyUART_ISR:	
  4274                           ; 1 bytes @ 0x1
  4275                           
  4276  0071                     I2C_Open@address:	
  4277                           ; 1 bytes @ 0x1
  4278                           
  4279  0071                     I2C_Close@returnValue:	
  4280                           ; 1 bytes @ 0x1
  4281                           
  4282                           
  4283                           ; 1 bytes @ 0x1
  4284  0071                     	ds	1
  4285  0072                     ??_I2C_SetBuffer:	
  4286  0072                     ??_PWM3_LoadDutyValue:	
  4287                           ; 1 bytes @ 0x2
  4288                           
  4289  0072                     I2C_Open@returnValue:	
  4290                           ; 1 bytes @ 0x2
  4291                           
  4292  0072                     I2C_SetCallback@ptr:	
  4293                           ; 1 bytes @ 0x2
  4294                           
  4295                           
  4296                           ; 1 bytes @ 0x2
  4297  0072                     	ds	1
  4298  0073                     ??_I2C_SetCallback:	
  4299  0073                     I2C_SetBuffer@buffer:	
  4300                           ; 1 bytes @ 0x3
  4301                           
  4302                           
  4303                           ; 1 bytes @ 0x3
  4304  0073                     	ds	1
  4305  0074                     I2C_SetCallback@idx:	
  4306                           
  4307                           ; 1 bytes @ 0x4
  4308  0074                     	ds	1
  4309  0075                     ?_I2C_SetDataCompleteCallback:	
  4310  0075                     ?_I2C_SetAddressNackCallback:	
  4311                           ; 1 bytes @ 0x5
  4312                           
  4313  0075                     MyUART_ISR@c:	
  4314                           ; 1 bytes @ 0x5
  4315                           
  4316  0075                     I2C_SetDataCompleteCallback@cb:	
  4317                           ; 1 bytes @ 0x5
  4318                           
  4319  0075                     I2C_SetAddressNackCallback@cb:	
  4320                           ; 2 bytes @ 0x5
  4321                           
  4322                           
  4323                           ; 2 bytes @ 0x5
  4324  0075                     	ds	2
  4325  0077                     I2C_SetDataCompleteCallback@ptr:	
  4326  0077                     I2C_SetAddressNackCallback@ptr:	
  4327                           ; 1 bytes @ 0x7
  4328                           
  4329                           
  4330                           ; 1 bytes @ 0x7
  4331  0077                     	ds	1
  4332  0078                     ??_I2C_SetDataCompleteCallback:	
  4333  0078                     ??_I2C_SetAddressNackCallback:	
  4334                           ; 1 bytes @ 0x8
  4335                           
  4336                           
  4337                           ; 1 bytes @ 0x8
  4338  0078                     	ds	1
  4339  0079                     ?_rd1RegCompleteHandler:	
  4340  0079                     ?_rd2RegCompleteHandler:	
  4341                           ; 1 bytes @ 0x9
  4342                           
  4343  0079                     ?_wr1RegCompleteHandler:	
  4344                           ; 1 bytes @ 0x9
  4345                           
  4346  0079                     ?_wr2RegCompleteHandler:	
  4347                           ; 1 bytes @ 0x9
  4348                           
  4349  0079                     ?_rdBlkRegCompleteHandler:	
  4350                           ; 1 bytes @ 0x9
  4351                           
  4352  0079                     ?_I2C_CallbackReturnStop:	
  4353                           ; 1 bytes @ 0x9
  4354                           
  4355  0079                     ?_I2C_CallbackReturnReset:	
  4356                           ; 1 bytes @ 0x9
  4357                           
  4358  0079                     rd1RegCompleteHandler@ptr:	
  4359                           ; 1 bytes @ 0x9
  4360                           
  4361  0079                     rd2RegCompleteHandler@ptr:	
  4362                           ; 1 bytes @ 0x9
  4363                           
  4364  0079                     wr1RegCompleteHandler@ptr:	
  4365                           ; 1 bytes @ 0x9
  4366                           
  4367  0079                     wr2RegCompleteHandler@ptr:	
  4368                           ; 1 bytes @ 0x9
  4369                           
  4370  0079                     rdBlkRegCompleteHandler@ptr:	
  4371                           ; 1 bytes @ 0x9
  4372                           
  4373  0079                     I2C_CallbackReturnStop@funPtr:	
  4374                           ; 1 bytes @ 0x9
  4375                           
  4376  0079                     I2C_CallbackReturnReset@funPtr:	
  4377                           ; 1 bytes @ 0x9
  4378                           
  4379                           
  4380                           ; 1 bytes @ 0x9
  4381  0079                     	ds	1
  4382  007A                     ??_rd1RegCompleteHandler:	
  4383  007A                     ??_rd2RegCompleteHandler:	
  4384                           ; 1 bytes @ 0xA
  4385                           
  4386  007A                     ??_wr1RegCompleteHandler:	
  4387                           ; 1 bytes @ 0xA
  4388                           
  4389  007A                     ??_wr2RegCompleteHandler:	
  4390                           ; 1 bytes @ 0xA
  4391                           
  4392  007A                     ??_rdBlkRegCompleteHandler:	
  4393                           ; 1 bytes @ 0xA
  4394                           
  4395  007A                     ??_I2C_DO_TX:	
  4396                           ; 1 bytes @ 0xA
  4397                           
  4398  007A                     ??_I2C_DO_RX:	
  4399                           ; 1 bytes @ 0xA
  4400                           
  4401  007A                     ??_I2C_DO_TX_EMPTY:	
  4402                           ; 1 bytes @ 0xA
  4403                           
  4404  007A                     ??_I2C_DO_ADDRESS_NACK:	
  4405                           ; 1 bytes @ 0xA
  4406                           
  4407  007A                     ??_I2C_CallbackReturnStop:	
  4408                           ; 1 bytes @ 0xA
  4409                           
  4410  007A                     ??_I2C_CallbackReturnReset:	
  4411                           ; 1 bytes @ 0xA
  4412                           
  4413                           
  4414                           ; 1 bytes @ 0xA
  4415  007A                     	ds	1
  4416  007B                     _I2C_DO_TX$794:	
  4417                           
  4418                           ; 2 bytes @ 0xB
  4419  007B                     	ds	2
  4420  007D                     ??_I2C_Poller:	
  4421  007D                     ??_I2C_MasterOperation:	
  4422                           ; 1 bytes @ 0xD
  4423                           
  4424                           
  4425                           ; 1 bytes @ 0xD
  4426  007D                     	ds	1
  4427  007E                     ??_I2C_MasterWrite:	
  4428  007E                     ??_TMR2_ISR:	
  4429                           ; 1 bytes @ 0xE
  4430                           
  4431                           
  4432                           	psect	cstackBANK0
  4433  0057                     __pcstackBANK0:	
  4434                           ; 1 bytes @ 0xE
  4435                           
  4436  0057                     ??_I2C_MasterFsm:	
  4437                           
  4438                           ; 1 bytes @ 0x0
  4439  0057                     	ds	3
  4440  005A                     I2C_MasterOperation@read:	
  4441                           
  4442                           ; 1 bytes @ 0x3
  4443  005A                     	ds	1
  4444  005B                     I2C_MasterOperation@returnValue:	
  4445                           
  4446                           ; 1 bytes @ 0x4
  4447  005B                     	ds	1
  4448  005C                     ?_I2C_Write1ByteRegister:	
  4449  005C                     I2C_Write1ByteRegister@reg:	
  4450                           ; 1 bytes @ 0x5
  4451                           
  4452                           
  4453                           ; 1 bytes @ 0x5
  4454  005C                     	ds	1
  4455  005D                     I2C_Write1ByteRegister@data:	
  4456                           
  4457                           ; 1 bytes @ 0x6
  4458  005D                     	ds	1
  4459  005E                     ??_I2C_Write1ByteRegister:	
  4460                           
  4461                           ; 1 bytes @ 0x7
  4462  005E                     	ds	1
  4463  005F                     I2C_Write1ByteRegister@address:	
  4464                           
  4465                           ; 1 bytes @ 0x8
  4466  005F                     	ds	1
  4467  0060                     ??_MyTimer2ISR:	
  4468                           
  4469                           ; 1 bytes @ 0x9
  4470  0060                     	ds	2
  4471  0062                     ??_INTERRUPT_InterruptManager:	
  4472                           
  4473                           ; 1 bytes @ 0xB
  4474  0062                     	ds	1
  4475                           
  4476                           	psect	maintext
  4477  015D                     __pmaintext:	
  4478 ;;
  4479 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4480 ;;
  4481 ;; *************** function _main *****************
  4482 ;; Defined at:
  4483 ;;		line 166 in file "main.c"
  4484 ;; Parameters:    Size  Location     Type
  4485 ;;		None
  4486 ;; Auto vars:     Size  Location     Type
  4487 ;;		None
  4488 ;; Return value:  Size  Location     Type
  4489 ;;                  1    wreg      void 
  4490 ;; Registers used:
  4491 ;;		wreg, status,2, status,0, pclath, cstack
  4492 ;; Tracked objects:
  4493 ;;		On entry : B1F/0
  4494 ;;		On exit  : 0/0
  4495 ;;		Unchanged: 0/0
  4496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4499 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4500 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4501 ;;Total ram usage:        2 bytes
  4502 ;; Hardware stack levels required when called:   15
  4503 ;; This function calls:
  4504 ;;		_EUSART_SetRxInterruptHandler
  4505 ;;		_SYSTEM_Initialize
  4506 ;;		_TMR2_SetInterruptHandler
  4507 ;;		_TMR2_StartTimer
  4508 ;;		_TMR2_WriteTimer
  4509 ;; This function is called by:
  4510 ;;		Startup code after reset
  4511 ;; This function uses a non-reentrant model
  4512 ;;
  4513                           
  4514                           
  4515                           ;psect for function _main
  4516  015D                     _main:	
  4517                           
  4518                           ;main.c: 167: SYSTEM_Initialize();
  4519                           
  4520                           ;incstack = 0
  4521                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
  4522  015D  3184  247F  3181   	fcall	_SYSTEM_Initialize
  4523                           
  4524                           ;main.c: 169: do { LATCbits.LATC5 = 1; } while(0);
  4525  0160  0022               	movlb	2	; select bank2
  4526  0161  168E               	bsf	14,5	;volatile
  4527                           
  4528                           ;main.c: 170: do { LATAbits.LATA5 = 1; } while(0);
  4529  0162  168C               	bsf	12,5	;volatile
  4530                           
  4531                           ;main.c: 177: TMR2_SetInterruptHandler(MyTimer2ISR);
  4532  0163  30F9               	movlw	low _MyTimer2ISR
  4533  0164  0021               	movlb	1	; select bank1
  4534  0165  00A6               	movwf	TMR2_SetInterruptHandler@InterruptHandler^(0+128)
  4535  0166  3000               	movlw	high _MyTimer2ISR
  4536  0167  00A7               	movwf	(TMR2_SetInterruptHandler@InterruptHandler^(0+128)+1)
  4537  0168  3185  252E  3181   	fcall	_TMR2_SetInterruptHandler
  4538                           
  4539                           ;main.c: 178: TMR2_WriteTimer(255);
  4540  016B  30FF               	movlw	255
  4541  016C  3185  2564  3181   	fcall	_TMR2_WriteTimer
  4542                           
  4543                           ;main.c: 179: TMR2_StartTimer();
  4544  016F  3185  25D1  3181   	fcall	_TMR2_StartTimer
  4545                           
  4546                           ;main.c: 181: EUSART_SetRxInterruptHandler(MyUART_ISR);
  4547  0172  3041               	movlw	low _MyUART_ISR
  4548  0173  0021               	movlb	1	; select bank1
  4549  0174  00A6               	movwf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128)
  4550  0175  3000               	movlw	high _MyUART_ISR
  4551  0176  00A7               	movwf	(EUSART_SetRxInterruptHandler@interruptHandler^(0+128)+1)
  4552  0177  3185  2537  3181   	fcall	_EUSART_SetRxInterruptHandler
  4553                           
  4554                           ;main.c: 183: (INTCONbits.PEIE = 1);
  4555  017A  170B               	bsf	11,6	;volatile
  4556                           
  4557                           ;main.c: 184: (INTCONbits.GIE = 1);
  4558  017B  178B               	bsf	11,7	;volatile
  4559  017C  29AD               	goto	l3113
  4560  017D                     l3115:	
  4561                           
  4562                           ;main.c: 188: if(Validation) {
  4563  017D  086A               	movf	_Validation,w
  4564  017E  1903               	btfsc	3,2
  4565  017F  2999               	goto	l3121
  4566                           
  4567                           ;main.c: 189: do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  4568  0180  1003               	clrc
  4569  0181  0022               	movlb	2	; select bank2
  4570  0182  1E8C               	btfss	12,5	;volatile
  4571  0183  1403               	setc
  4572  0184  1C03               	btfss	3,0
  4573  0185  2989               	goto	u1330
  4574  0186  0022               	movlb	2	; select bank2
  4575  0187  168C               	bsf	12,5	;volatile
  4576  0188  298B               	goto	l3119
  4577  0189                     u1330:	
  4578  0189  0022               	movlb	2	; select bank2
  4579  018A  128C               	bcf	12,5	;volatile
  4580  018B                     l3119:	
  4581                           
  4582                           ;main.c: 190: _delay((unsigned long)((500)*(4000000/4000.0)));
  4583  018B  3003               	movlw	3
  4584  018C  0021               	movlb	1	; select bank1
  4585  018D  00A9               	movwf	(??_main^(0+128)+1)
  4586  018E  308A               	movlw	138
  4587  018F  00A8               	movwf	??_main^(0+128)
  4588  0190  3055               	movlw	85
  4589  0191                     u1377:	
  4590  0191  0B89               	decfsz	9,f
  4591  0192  2991               	goto	u1377
  4592  0193  0BA8               	decfsz	??_main^(0+128),f
  4593  0194  2991               	goto	u1377
  4594  0195  0BA9               	decfsz	(??_main^(0+128)+1),f
  4595  0196  2991               	goto	u1377
  4596  0197  3200               	nop2
  4597                           
  4598                           ;main.c: 191: } else {
  4599  0198  29AD               	goto	l3113
  4600  0199                     l3121:	
  4601                           ;main.c: 192: do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  4602                           
  4603  0199  1003               	clrc
  4604  019A  0022               	movlb	2	; select bank2
  4605  019B  1E8C               	btfss	12,5	;volatile
  4606  019C  1403               	setc
  4607  019D  1C03               	btfss	3,0
  4608  019E  29A2               	goto	u1350
  4609  019F  0022               	movlb	2	; select bank2
  4610  01A0  168C               	bsf	12,5	;volatile
  4611  01A1  29A4               	goto	l3123
  4612  01A2                     u1350:	
  4613  01A2  0022               	movlb	2	; select bank2
  4614  01A3  128C               	bcf	12,5	;volatile
  4615  01A4                     l3123:	
  4616                           
  4617                           ;main.c: 193: _delay((unsigned long)((100)*(4000000/4000.0)));
  4618  01A4  3082               	movlw	130
  4619  01A5  0021               	movlb	1	; select bank1
  4620  01A6  00A8               	movwf	??_main^(0+128)
  4621  01A7  30DD               	movlw	221
  4622  01A8                     u1387:	
  4623  01A8  0B89               	decfsz	9,f
  4624  01A9  29A8               	goto	u1387
  4625  01AA  0BA8               	decfsz	??_main^(0+128),f
  4626  01AB  29A8               	goto	u1387
  4627  01AC  3200               	nop2
  4628  01AD                     l3113:	
  4629                           ;main.c: 186: while (1) {
  4630                           
  4631                           ;main.c: 194: }
  4632                           ;main.c: 195: } else {
  4633                           
  4634                           
  4635                           ;main.c: 187: if(PORTAbits.RA4) {
  4636  01AD  0020               	movlb	0	; select bank0
  4637  01AE  1A0C               	btfsc	12,4	;volatile
  4638  01AF  297D               	goto	l3115
  4639                           
  4640                           ;main.c: 196: do { LATAbits.LATA5 = 1; } while(0);
  4641  01B0  0022               	movlb	2	; select bank2
  4642  01B1  168C               	bsf	12,5	;volatile
  4643  01B2  29AD               	goto	l3113
  4644  01B3                     __end_of_main:	
  4645                           
  4646                           	psect	text1
  4647  0564                     __ptext1:	
  4648 ;; *************** function _TMR2_WriteTimer *****************
  4649 ;; Defined at:
  4650 ;;		line 150 in file "mcc_generated_files/tmr2.c"
  4651 ;; Parameters:    Size  Location     Type
  4652 ;;  timerVal        1    wreg     unsigned char 
  4653 ;; Auto vars:     Size  Location     Type
  4654 ;;  timerVal        1    1[BANK1 ] unsigned char 
  4655 ;; Return value:  Size  Location     Type
  4656 ;;                  1    wreg      void 
  4657 ;; Registers used:
  4658 ;;		wreg, status,2, status,0, pclath, cstack
  4659 ;; Tracked objects:
  4660 ;;		On entry : 0/0
  4661 ;;		On exit  : 0/0
  4662 ;;		Unchanged: 0/0
  4663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4665 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4667 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4668 ;;Total ram usage:        1 bytes
  4669 ;; Hardware stack levels used:    1
  4670 ;; Hardware stack levels required when called:   13
  4671 ;; This function calls:
  4672 ;;		_TMR2_Counter8BitSet
  4673 ;; This function is called by:
  4674 ;;		_main
  4675 ;; This function uses a non-reentrant model
  4676 ;;
  4677                           
  4678                           
  4679                           ;psect for function _TMR2_WriteTimer
  4680  0564                     _TMR2_WriteTimer:	
  4681                           
  4682                           ;incstack = 0
  4683                           ; Regs used in _TMR2_WriteTimer: [wreg+status,2+status,0+pclath+cstack]
  4684                           ;TMR2_WriteTimer@timerVal stored from wreg
  4685  0564  0021               	movlb	1	; select bank1
  4686  0565  00A7               	movwf	TMR2_WriteTimer@timerVal^(0+128)
  4687                           
  4688                           ;tmr2.c: 152: TMR2_Counter8BitSet(timerVal);
  4689  0566  0827               	movf	TMR2_WriteTimer@timerVal^(0+128),w
  4690  0567  3185  256A         	fcall	_TMR2_Counter8BitSet
  4691  0569  0008               	return
  4692  056A                     __end_of_TMR2_WriteTimer:	
  4693                           
  4694                           	psect	text2
  4695  056A                     __ptext2:	
  4696 ;; *************** function _TMR2_Counter8BitSet *****************
  4697 ;; Defined at:
  4698 ;;		line 144 in file "mcc_generated_files/tmr2.c"
  4699 ;; Parameters:    Size  Location     Type
  4700 ;;  timerVal        1    wreg     unsigned char 
  4701 ;; Auto vars:     Size  Location     Type
  4702 ;;  timerVal        1    0[BANK1 ] unsigned char 
  4703 ;; Return value:  Size  Location     Type
  4704 ;;                  1    wreg      void 
  4705 ;; Registers used:
  4706 ;;		wreg
  4707 ;; Tracked objects:
  4708 ;;		On entry : 0/0
  4709 ;;		On exit  : 0/0
  4710 ;;		Unchanged: 0/0
  4711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4713 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4715 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4716 ;;Total ram usage:        1 bytes
  4717 ;; Hardware stack levels used:    1
  4718 ;; Hardware stack levels required when called:   12
  4719 ;; This function calls:
  4720 ;;		Nothing
  4721 ;; This function is called by:
  4722 ;;		_TMR2_WriteTimer
  4723 ;; This function uses a non-reentrant model
  4724 ;;
  4725                           
  4726                           
  4727                           ;psect for function _TMR2_Counter8BitSet
  4728  056A                     _TMR2_Counter8BitSet:	
  4729                           
  4730                           ;incstack = 0
  4731                           ; Regs used in _TMR2_Counter8BitSet: [wreg]
  4732                           ;TMR2_Counter8BitSet@timerVal stored from wreg
  4733  056A  0021               	movlb	1	; select bank1
  4734  056B  00A6               	movwf	TMR2_Counter8BitSet@timerVal^(0+128)
  4735                           
  4736                           ;tmr2.c: 147: TMR2 = timerVal;
  4737  056C  0826               	movf	TMR2_Counter8BitSet@timerVal^(0+128),w
  4738  056D  0020               	movlb	0	; select bank0
  4739  056E  009A               	movwf	26	;volatile
  4740  056F  0008               	return
  4741  0570                     __end_of_TMR2_Counter8BitSet:	
  4742                           
  4743                           	psect	text3
  4744  05D1                     __ptext3:	
  4745 ;; *************** function _TMR2_StartTimer *****************
  4746 ;; Defined at:
  4747 ;;		line 114 in file "mcc_generated_files/tmr2.c"
  4748 ;; Parameters:    Size  Location     Type
  4749 ;;		None
  4750 ;; Auto vars:     Size  Location     Type
  4751 ;;		None
  4752 ;; Return value:  Size  Location     Type
  4753 ;;                  1    wreg      void 
  4754 ;; Registers used:
  4755 ;;		status,2, status,0, pclath, cstack
  4756 ;; Tracked objects:
  4757 ;;		On entry : 0/0
  4758 ;;		On exit  : 0/0
  4759 ;;		Unchanged: 0/0
  4760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4764 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4765 ;;Total ram usage:        0 bytes
  4766 ;; Hardware stack levels used:    1
  4767 ;; Hardware stack levels required when called:   13
  4768 ;; This function calls:
  4769 ;;		_TMR2_Start
  4770 ;; This function is called by:
  4771 ;;		_main
  4772 ;; This function uses a non-reentrant model
  4773 ;;
  4774                           
  4775                           
  4776                           ;psect for function _TMR2_StartTimer
  4777  05D1                     _TMR2_StartTimer:	
  4778                           
  4779                           ;tmr2.c: 116: TMR2_Start();
  4780                           
  4781                           ;incstack = 0
  4782                           ; Regs used in _TMR2_StartTimer: [status,2+status,0+pclath+cstack]
  4783  05D1  3185  25D4         	fcall	_TMR2_Start
  4784  05D3  0008               	return
  4785  05D4                     __end_of_TMR2_StartTimer:	
  4786                           
  4787                           	psect	text4
  4788  05D4                     __ptext4:	
  4789 ;; *************** function _TMR2_Start *****************
  4790 ;; Defined at:
  4791 ;;		line 108 in file "mcc_generated_files/tmr2.c"
  4792 ;; Parameters:    Size  Location     Type
  4793 ;;		None
  4794 ;; Auto vars:     Size  Location     Type
  4795 ;;		None
  4796 ;; Return value:  Size  Location     Type
  4797 ;;                  1    wreg      void 
  4798 ;; Registers used:
  4799 ;;		None
  4800 ;; Tracked objects:
  4801 ;;		On entry : 0/0
  4802 ;;		On exit  : 0/0
  4803 ;;		Unchanged: 0/0
  4804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4809 ;;Total ram usage:        0 bytes
  4810 ;; Hardware stack levels used:    1
  4811 ;; Hardware stack levels required when called:   12
  4812 ;; This function calls:
  4813 ;;		Nothing
  4814 ;; This function is called by:
  4815 ;;		_TMR2_StartTimer
  4816 ;; This function uses a non-reentrant model
  4817 ;;
  4818                           
  4819                           
  4820                           ;psect for function _TMR2_Start
  4821  05D4                     _TMR2_Start:	
  4822                           
  4823                           ;tmr2.c: 111: T2CONbits.TMR2ON = 1;
  4824                           
  4825                           ;incstack = 0
  4826                           ; Regs used in _TMR2_Start: []
  4827  05D4  0020               	movlb	0	; select bank0
  4828  05D5  179C               	bsf	28,7	;volatile
  4829  05D6  0008               	return
  4830  05D7                     __end_of_TMR2_Start:	
  4831                           
  4832                           	psect	text5
  4833  047F                     __ptext5:	
  4834 ;; *************** function _SYSTEM_Initialize *****************
  4835 ;; Defined at:
  4836 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4837 ;; Parameters:    Size  Location     Type
  4838 ;;		None
  4839 ;; Auto vars:     Size  Location     Type
  4840 ;;		None
  4841 ;; Return value:  Size  Location     Type
  4842 ;;                  1    wreg      void 
  4843 ;; Registers used:
  4844 ;;		wreg, status,2, status,0, pclath, cstack
  4845 ;; Tracked objects:
  4846 ;;		On entry : 0/0
  4847 ;;		On exit  : 0/0
  4848 ;;		Unchanged: 0/0
  4849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4854 ;;Total ram usage:        0 bytes
  4855 ;; Hardware stack levels used:    1
  4856 ;; Hardware stack levels required when called:   14
  4857 ;; This function calls:
  4858 ;;		_EUSART_Initialize
  4859 ;;		_I2C_Initialize
  4860 ;;		_OSCILLATOR_Initialize
  4861 ;;		_PIN_MANAGER_Initialize
  4862 ;;		_PWM3_Initialize
  4863 ;;		_TMR2_Initialize
  4864 ;; This function is called by:
  4865 ;;		_main
  4866 ;; This function uses a non-reentrant model
  4867 ;;
  4868                           
  4869                           
  4870                           ;psect for function _SYSTEM_Initialize
  4871  047F                     _SYSTEM_Initialize:	
  4872                           
  4873                           ;mcc.c: 52: I2C_Initialize();
  4874                           
  4875                           ;incstack = 0
  4876                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4877  047F  3185  251A  3184   	fcall	_I2C_Initialize
  4878                           
  4879                           ;mcc.c: 53: PIN_MANAGER_Initialize();
  4880  0482  3181  21FE  3184   	fcall	_PIN_MANAGER_Initialize
  4881                           
  4882                           ;mcc.c: 54: OSCILLATOR_Initialize();
  4883  0485  3185  2550  3184   	fcall	_OSCILLATOR_Initialize
  4884                           
  4885                           ;mcc.c: 55: PWM3_Initialize();
  4886  0488  3185  250F  3184   	fcall	_PWM3_Initialize
  4887                           
  4888                           ;mcc.c: 56: TMR2_Initialize();
  4889  048B  3184  246B  3184   	fcall	_TMR2_Initialize
  4890                           
  4891                           ;mcc.c: 57: EUSART_Initialize();
  4892  048E  3182  22E0         	fcall	_EUSART_Initialize
  4893  0490  0008               	return
  4894  0491                     __end_of_SYSTEM_Initialize:	
  4895                           
  4896                           	psect	text6
  4897  046B                     __ptext6:	
  4898 ;; *************** function _TMR2_Initialize *****************
  4899 ;; Defined at:
  4900 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  4901 ;; Parameters:    Size  Location     Type
  4902 ;;		None
  4903 ;; Auto vars:     Size  Location     Type
  4904 ;;		None
  4905 ;; Return value:  Size  Location     Type
  4906 ;;                  1    wreg      void 
  4907 ;; Registers used:
  4908 ;;		wreg, status,2, status,0, pclath, cstack
  4909 ;; Tracked objects:
  4910 ;;		On entry : 0/0
  4911 ;;		On exit  : 0/0
  4912 ;;		Unchanged: 0/0
  4913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4918 ;;Total ram usage:        0 bytes
  4919 ;; Hardware stack levels used:    1
  4920 ;; Hardware stack levels required when called:   13
  4921 ;; This function calls:
  4922 ;;		_TMR2_SetInterruptHandler
  4923 ;; This function is called by:
  4924 ;;		_SYSTEM_Initialize
  4925 ;; This function uses a non-reentrant model
  4926 ;;
  4927                           
  4928                           
  4929                           ;psect for function _TMR2_Initialize
  4930  046B                     _TMR2_Initialize:	
  4931                           
  4932                           ;tmr2.c: 69: T2CLKCON = 0x00;
  4933                           
  4934                           ;incstack = 0
  4935                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4936  046B  0020               	movlb	0	; select bank0
  4937  046C  019E               	clrf	30	;volatile
  4938                           
  4939                           ;tmr2.c: 72: T2HLT = 0x00;
  4940  046D  019D               	clrf	29	;volatile
  4941                           
  4942                           ;tmr2.c: 75: T2RST = 0x00;
  4943  046E  019F               	clrf	31	;volatile
  4944                           
  4945                           ;tmr2.c: 78: T2PR = 0x9B;
  4946  046F  309B               	movlw	155
  4947  0470  009B               	movwf	27	;volatile
  4948                           
  4949                           ;tmr2.c: 81: T2TMR = 0x00;
  4950  0471  019A               	clrf	26	;volatile
  4951                           
  4952                           ;tmr2.c: 84: PIR1bits.TMR2IF = 0;
  4953  0472  1090               	bcf	16,1	;volatile
  4954                           
  4955                           ;tmr2.c: 87: PIE1bits.TMR2IE = 1;
  4956  0473  0021               	movlb	1	; select bank1
  4957  0474  1490               	bsf	16,1	;volatile
  4958                           
  4959                           ;tmr2.c: 90: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
  4960  0475  30F9               	movlw	low _TMR2_DefaultInterruptHandler
  4961  0476  00A6               	movwf	TMR2_SetInterruptHandler@InterruptHandler^(0+128)
  4962  0477  3005               	movlw	high _TMR2_DefaultInterruptHandler
  4963  0478  00A7               	movwf	(TMR2_SetInterruptHandler@InterruptHandler^(0+128)+1)
  4964  0479  3185  252E         	fcall	_TMR2_SetInterruptHandler
  4965                           
  4966                           ;tmr2.c: 93: T2CON = 0xF0;
  4967  047B  30F0               	movlw	240
  4968  047C  0020               	movlb	0	; select bank0
  4969  047D  009C               	movwf	28	;volatile
  4970  047E  0008               	return
  4971  047F                     __end_of_TMR2_Initialize:	
  4972                           
  4973                           	psect	text7
  4974  052E                     __ptext7:	
  4975 ;; *************** function _TMR2_SetInterruptHandler *****************
  4976 ;; Defined at:
  4977 ;;		line 178 in file "mcc_generated_files/tmr2.c"
  4978 ;; Parameters:    Size  Location     Type
  4979 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  4980 ;;		 -> MyTimer2ISR(1), TMR2_DefaultInterruptHandler(1), 
  4981 ;; Auto vars:     Size  Location     Type
  4982 ;;		None
  4983 ;; Return value:  Size  Location     Type
  4984 ;;                  1    wreg      void 
  4985 ;; Registers used:
  4986 ;;		wreg
  4987 ;; Tracked objects:
  4988 ;;		On entry : 0/0
  4989 ;;		On exit  : 0/0
  4990 ;;		Unchanged: 0/0
  4991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4992 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4995 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4996 ;;Total ram usage:        2 bytes
  4997 ;; Hardware stack levels used:    1
  4998 ;; Hardware stack levels required when called:   12
  4999 ;; This function calls:
  5000 ;;		Nothing
  5001 ;; This function is called by:
  5002 ;;		_TMR2_Initialize
  5003 ;;		_main
  5004 ;; This function uses a non-reentrant model
  5005 ;;
  5006                           
  5007                           
  5008                           ;psect for function _TMR2_SetInterruptHandler
  5009  052E                     _TMR2_SetInterruptHandler:	
  5010                           
  5011                           ;tmr2.c: 179: TMR2_InterruptHandler = InterruptHandler;
  5012                           
  5013                           ;incstack = 0
  5014                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  5015  052E  0021               	movlb	1	; select bank1
  5016  052F  0827               	movf	(TMR2_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5017  0530  0020               	movlb	0	; select bank0
  5018  0531  00E4               	movwf	_TMR2_InterruptHandler+1
  5019  0532  0021               	movlb	1	; select bank1
  5020  0533  0826               	movf	TMR2_SetInterruptHandler@InterruptHandler^(0+128),w
  5021  0534  0020               	movlb	0	; select bank0
  5022  0535  00E3               	movwf	_TMR2_InterruptHandler
  5023  0536  0008               	return
  5024  0537                     __end_of_TMR2_SetInterruptHandler:	
  5025                           
  5026                           	psect	text8
  5027  050F                     __ptext8:	
  5028 ;; *************** function _PWM3_Initialize *****************
  5029 ;; Defined at:
  5030 ;;		line 58 in file "mcc_generated_files/pwm3.c"
  5031 ;; Parameters:    Size  Location     Type
  5032 ;;		None
  5033 ;; Auto vars:     Size  Location     Type
  5034 ;;		None
  5035 ;; Return value:  Size  Location     Type
  5036 ;;                  1    wreg      void 
  5037 ;; Registers used:
  5038 ;;		wreg, status,2, status,0
  5039 ;; Tracked objects:
  5040 ;;		On entry : 0/0
  5041 ;;		On exit  : 0/0
  5042 ;;		Unchanged: 0/0
  5043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5047 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5048 ;;Total ram usage:        0 bytes
  5049 ;; Hardware stack levels used:    1
  5050 ;; Hardware stack levels required when called:   12
  5051 ;; This function calls:
  5052 ;;		Nothing
  5053 ;; This function is called by:
  5054 ;;		_SYSTEM_Initialize
  5055 ;; This function uses a non-reentrant model
  5056 ;;
  5057                           
  5058                           
  5059                           ;psect for function _PWM3_Initialize
  5060  050F                     _PWM3_Initialize:	
  5061                           
  5062                           ;pwm3.c: 62: PWM3CON = 0x80;
  5063                           
  5064                           ;incstack = 0
  5065                           ; Regs used in _PWM3_Initialize: [wreg+status,2+status,0]
  5066  050F  3080               	movlw	128
  5067  0510  002C               	movlb	12	; select bank12
  5068  0511  0099               	movwf	25	;volatile
  5069                           
  5070                           ;pwm3.c: 65: PWM3DCH = 0x0F;
  5071  0512  300F               	movlw	15
  5072  0513  0098               	movwf	24	;volatile
  5073                           
  5074                           ;pwm3.c: 68: PWM3DCL = 0x40;
  5075  0514  3040               	movlw	64
  5076  0515  0097               	movwf	23	;volatile
  5077                           
  5078                           ;pwm3.c: 71: CCPTMRSbits.P3TSEL = 0;
  5079  0516  30CF               	movlw	-49
  5080  0517  0025               	movlb	5	; select bank5
  5081  0518  059E               	andwf	30,f	;volatile
  5082  0519  0008               	return
  5083  051A                     __end_of_PWM3_Initialize:	
  5084                           
  5085                           	psect	text9
  5086  01FE                     __ptext9:	
  5087 ;; *************** function _PIN_MANAGER_Initialize *****************
  5088 ;; Defined at:
  5089 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  5090 ;; Parameters:    Size  Location     Type
  5091 ;;		None
  5092 ;; Auto vars:     Size  Location     Type
  5093 ;;		None
  5094 ;; Return value:  Size  Location     Type
  5095 ;;                  1    wreg      void 
  5096 ;; Registers used:
  5097 ;;		wreg, status,2
  5098 ;; Tracked objects:
  5099 ;;		On entry : 0/0
  5100 ;;		On exit  : 0/0
  5101 ;;		Unchanged: 0/0
  5102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5106 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5107 ;;Total ram usage:        0 bytes
  5108 ;; Hardware stack levels used:    1
  5109 ;; Hardware stack levels required when called:   12
  5110 ;; This function calls:
  5111 ;;		Nothing
  5112 ;; This function is called by:
  5113 ;;		_SYSTEM_Initialize
  5114 ;; This function uses a non-reentrant model
  5115 ;;
  5116                           
  5117                           
  5118                           ;psect for function _PIN_MANAGER_Initialize
  5119  01FE                     _PIN_MANAGER_Initialize:	
  5120                           
  5121                           ;pin_manager.c: 60: LATA = 0x00;
  5122                           
  5123                           ;incstack = 0
  5124                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  5125  01FE  0022               	movlb	2	; select bank2
  5126  01FF  018C               	clrf	12	;volatile
  5127                           
  5128                           ;pin_manager.c: 61: LATB = 0x00;
  5129  0200  018D               	clrf	13	;volatile
  5130                           
  5131                           ;pin_manager.c: 62: LATC = 0x00;
  5132  0201  018E               	clrf	14	;volatile
  5133                           
  5134                           ;pin_manager.c: 67: TRISA = 0x13;
  5135  0202  3013               	movlw	19
  5136  0203  0021               	movlb	1	; select bank1
  5137  0204  008C               	movwf	12	;volatile
  5138                           
  5139                           ;pin_manager.c: 68: TRISB = 0x70;
  5140  0205  3070               	movlw	112
  5141  0206  008D               	movwf	13	;volatile
  5142                           
  5143                           ;pin_manager.c: 69: TRISC = 0x1F;
  5144  0207  301F               	movlw	31
  5145  0208  008E               	movwf	14	;volatile
  5146                           
  5147                           ;pin_manager.c: 74: ANSELC = 0x0E;
  5148  0209  300E               	movlw	14
  5149  020A  0023               	movlb	3	; select bank3
  5150  020B  008E               	movwf	14	;volatile
  5151                           
  5152                           ;pin_manager.c: 75: ANSELB = 0x00;
  5153  020C  018D               	clrf	13	;volatile
  5154                           
  5155                           ;pin_manager.c: 76: ANSELA = 0x01;
  5156  020D  3001               	movlw	1
  5157  020E  008C               	movwf	12	;volatile
  5158                           
  5159                           ;pin_manager.c: 81: WPUB = 0x00;
  5160  020F  0024               	movlb	4	; select bank4
  5161  0210  018D               	clrf	13	;volatile
  5162                           
  5163                           ;pin_manager.c: 82: WPUA = 0x00;
  5164  0211  018C               	clrf	12	;volatile
  5165                           
  5166                           ;pin_manager.c: 83: WPUC = 0x00;
  5167  0212  018E               	clrf	14	;volatile
  5168                           
  5169                           ;pin_manager.c: 84: OPTION_REGbits.nWPUEN = 1;
  5170  0213  0021               	movlb	1	; select bank1
  5171  0214  1795               	bsf	21,7	;volatile
  5172                           
  5173                           ;pin_manager.c: 89: ODCONA = 0x00;
  5174  0215  0025               	movlb	5	; select bank5
  5175  0216  018C               	clrf	12	;volatile
  5176                           
  5177                           ;pin_manager.c: 90: ODCONB = 0x00;
  5178  0217  018D               	clrf	13	;volatile
  5179                           
  5180                           ;pin_manager.c: 91: ODCONC = 0x00;
  5181  0218  018E               	clrf	14	;volatile
  5182                           
  5183                           ;pin_manager.c: 96: SLRCONA = 0x37;
  5184  0219  3037               	movlw	55
  5185  021A  0026               	movlb	6	; select bank6
  5186  021B  008C               	movwf	12	;volatile
  5187                           
  5188                           ;pin_manager.c: 97: SLRCONB = 0xF0;
  5189  021C  30F0               	movlw	240
  5190  021D  008D               	movwf	13	;volatile
  5191                           
  5192                           ;pin_manager.c: 98: SLRCONC = 0xFF;
  5193  021E  30FF               	movlw	255
  5194  021F  008E               	movwf	14	;volatile
  5195                           
  5196                           ;pin_manager.c: 103: INLVLA = 0x3F;
  5197  0220  303F               	movlw	63
  5198  0221  0027               	movlb	7	; select bank7
  5199  0222  008C               	movwf	12	;volatile
  5200                           
  5201                           ;pin_manager.c: 104: INLVLB = 0xF0;
  5202  0223  30F0               	movlw	240
  5203  0224  008D               	movwf	13	;volatile
  5204                           
  5205                           ;pin_manager.c: 105: INLVLC = 0xFF;
  5206  0225  30FF               	movlw	255
  5207  0226  008E               	movwf	14	;volatile
  5208                           
  5209                           ;pin_manager.c: 114: RXPPS = 0x0D;
  5210  0227  300D               	movlw	13
  5211  0228  003C               	movlb	28	; select bank28
  5212  0229  00A4               	movwf	36	;volatile
  5213                           
  5214                           ;pin_manager.c: 115: SSPDATPPS = 0x0C;
  5215  022A  300C               	movlw	12
  5216  022B  00A1               	movwf	33	;volatile
  5217                           
  5218                           ;pin_manager.c: 116: RB6PPS = 0x10;
  5219  022C  3010               	movlw	16
  5220  022D  003D               	movlb	29	; select bank29
  5221  022E  009E               	movwf	30	;volatile
  5222                           
  5223                           ;pin_manager.c: 117: RB7PPS = 0x12;
  5224  022F  3012               	movlw	18
  5225  0230  009F               	movwf	31	;volatile
  5226                           
  5227                           ;pin_manager.c: 118: RB4PPS = 0x11;
  5228  0231  3011               	movlw	17
  5229  0232  009C               	movwf	28	;volatile
  5230                           
  5231                           ;pin_manager.c: 119: RA2PPS = 0x0E;
  5232  0233  300E               	movlw	14
  5233  0234  0092               	movwf	18	;volatile
  5234                           
  5235                           ;pin_manager.c: 120: SSPCLKPPS = 0x0E;
  5236  0235  300E               	movlw	14
  5237  0236  003C               	movlb	28	; select bank28
  5238  0237  00A0               	movwf	32	;volatile
  5239  0238  0008               	return
  5240  0239                     __end_of_PIN_MANAGER_Initialize:	
  5241                           
  5242                           	psect	text10
  5243  0550                     __ptext10:	
  5244 ;; *************** function _OSCILLATOR_Initialize *****************
  5245 ;; Defined at:
  5246 ;;		line 60 in file "mcc_generated_files/mcc.c"
  5247 ;; Parameters:    Size  Location     Type
  5248 ;;		None
  5249 ;; Auto vars:     Size  Location     Type
  5250 ;;		None
  5251 ;; Return value:  Size  Location     Type
  5252 ;;                  1    wreg      void 
  5253 ;; Registers used:
  5254 ;;		wreg, status,2
  5255 ;; Tracked objects:
  5256 ;;		On entry : 0/0
  5257 ;;		On exit  : 0/0
  5258 ;;		Unchanged: 0/0
  5259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5264 ;;Total ram usage:        0 bytes
  5265 ;; Hardware stack levels used:    1
  5266 ;; Hardware stack levels required when called:   12
  5267 ;; This function calls:
  5268 ;;		Nothing
  5269 ;; This function is called by:
  5270 ;;		_SYSTEM_Initialize
  5271 ;; This function uses a non-reentrant model
  5272 ;;
  5273                           
  5274                           
  5275                           ;psect for function _OSCILLATOR_Initialize
  5276  0550                     _OSCILLATOR_Initialize:	
  5277                           
  5278                           ;mcc.c: 63: OSCCON = 0x6A;
  5279                           
  5280                           ;incstack = 0
  5281                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5282  0550  306A               	movlw	106
  5283  0551  0021               	movlb	1	; select bank1
  5284  0552  0099               	movwf	25	;volatile
  5285                           
  5286                           ;mcc.c: 65: OSCTUNE = 0x00;
  5287  0553  0198               	clrf	24	;volatile
  5288                           
  5289                           ;mcc.c: 67: BORCON = 0x00;
  5290  0554  0022               	movlb	2	; select bank2
  5291  0555  0196               	clrf	22	;volatile
  5292  0556  0008               	return
  5293  0557                     __end_of_OSCILLATOR_Initialize:	
  5294                           
  5295                           	psect	text11
  5296  051A                     __ptext11:	
  5297 ;; *************** function _I2C_Initialize *****************
  5298 ;; Defined at:
  5299 ;;		line 167 in file "mcc_generated_files/i2c_master.c"
  5300 ;; Parameters:    Size  Location     Type
  5301 ;;		None
  5302 ;; Auto vars:     Size  Location     Type
  5303 ;;		None
  5304 ;; Return value:  Size  Location     Type
  5305 ;;                  1    wreg      void 
  5306 ;; Registers used:
  5307 ;;		wreg, status,2
  5308 ;; Tracked objects:
  5309 ;;		On entry : 0/0
  5310 ;;		On exit  : 0/0
  5311 ;;		Unchanged: 0/0
  5312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5316 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5317 ;;Total ram usage:        0 bytes
  5318 ;; Hardware stack levels used:    1
  5319 ;; Hardware stack levels required when called:   12
  5320 ;; This function calls:
  5321 ;;		Nothing
  5322 ;; This function is called by:
  5323 ;;		_SYSTEM_Initialize
  5324 ;; This function uses a non-reentrant model
  5325 ;;
  5326                           
  5327                           
  5328                           ;psect for function _I2C_Initialize
  5329  051A                     _I2C_Initialize:	
  5330                           
  5331                           ;i2c_master.c: 169: SSP1STAT = 0x80;
  5332                           
  5333                           ;incstack = 0
  5334                           ; Regs used in _I2C_Initialize: [wreg+status,2]
  5335  051A  3080               	movlw	128
  5336  051B  0024               	movlb	4	; select bank4
  5337  051C  0094               	movwf	20	;volatile
  5338                           
  5339                           ;i2c_master.c: 170: SSP1CON1 = 0x08;
  5340  051D  3008               	movlw	8
  5341  051E  0095               	movwf	21	;volatile
  5342                           
  5343                           ;i2c_master.c: 171: SSP1CON2 = 0x00;
  5344  051F  0196               	clrf	22	;volatile
  5345                           
  5346                           ;i2c_master.c: 172: SSP1ADD = 0x09;
  5347  0520  3009               	movlw	9
  5348  0521  0092               	movwf	18	;volatile
  5349                           
  5350                           ;i2c_master.c: 173: SSP1CON1bits.SSPEN = 0;
  5351  0522  1295               	bcf	21,5	;volatile
  5352  0523  0008               	return
  5353  0524                     __end_of_I2C_Initialize:	
  5354                           
  5355                           	psect	text12
  5356  02E0                     __ptext12:	
  5357 ;; *************** function _EUSART_Initialize *****************
  5358 ;; Defined at:
  5359 ;;		line 83 in file "mcc_generated_files/eusart.c"
  5360 ;; Parameters:    Size  Location     Type
  5361 ;;		None
  5362 ;; Auto vars:     Size  Location     Type
  5363 ;;		None
  5364 ;; Return value:  Size  Location     Type
  5365 ;;                  1    wreg      void 
  5366 ;; Registers used:
  5367 ;;		wreg, status,2, status,0, pclath, cstack
  5368 ;; Tracked objects:
  5369 ;;		On entry : 0/0
  5370 ;;		On exit  : 0/0
  5371 ;;		Unchanged: 0/0
  5372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5376 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5377 ;;Total ram usage:        0 bytes
  5378 ;; Hardware stack levels used:    1
  5379 ;; Hardware stack levels required when called:   13
  5380 ;; This function calls:
  5381 ;;		_EUSART_SetErrorHandler
  5382 ;;		_EUSART_SetFramingErrorHandler
  5383 ;;		_EUSART_SetOverrunErrorHandler
  5384 ;;		_EUSART_SetRxInterruptHandler
  5385 ;; This function is called by:
  5386 ;;		_SYSTEM_Initialize
  5387 ;; This function uses a non-reentrant model
  5388 ;;
  5389                           
  5390                           
  5391                           ;psect for function _EUSART_Initialize
  5392  02E0                     _EUSART_Initialize:	
  5393                           
  5394                           ;eusart.c: 86: PIE1bits.RCIE = 0;
  5395                           
  5396                           ;incstack = 0
  5397                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5398  02E0  0021               	movlb	1	; select bank1
  5399  02E1  1290               	bcf	16,5	;volatile
  5400                           
  5401                           ;eusart.c: 87: EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  5402  02E2  30AA               	movlw	low _EUSART_Receive_ISR
  5403  02E3  00A6               	movwf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128)
  5404  02E4  3002               	movlw	high _EUSART_Receive_ISR
  5405  02E5  00A7               	movwf	(EUSART_SetRxInterruptHandler@interruptHandler^(0+128)+1)
  5406  02E6  3185  2537  3182   	fcall	_EUSART_SetRxInterruptHandler
  5407                           
  5408                           ;eusart.c: 91: BAUD1CON = 0x09;
  5409  02E9  3009               	movlw	9
  5410  02EA  0023               	movlb	3	; select bank3
  5411  02EB  009F               	movwf	31	;volatile
  5412                           
  5413                           ;eusart.c: 94: RC1STA = 0x90;
  5414  02EC  3090               	movlw	144
  5415  02ED  009D               	movwf	29	;volatile
  5416                           
  5417                           ;eusart.c: 97: TX1STA = 0x24;
  5418  02EE  3024               	movlw	36
  5419  02EF  009E               	movwf	30	;volatile
  5420                           
  5421                           ;eusart.c: 100: SPBRGL = 0x67;
  5422  02F0  3067               	movlw	103
  5423  02F1  009B               	movwf	27	;volatile
  5424                           
  5425                           ;eusart.c: 103: SPBRGH = 0x00;
  5426  02F2  019C               	clrf	28	;volatile
  5427                           
  5428                           ;eusart.c: 106: EUSART_SetFramingErrorHandler(EUSART_DefaultFramingErrorHandler);
  5429  02F3  30FA               	movlw	low _EUSART_DefaultFramingErrorHandler
  5430  02F4  0021               	movlb	1	; select bank1
  5431  02F5  00A6               	movwf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128)
  5432  02F6  3005               	movlw	high _EUSART_DefaultFramingErrorHandler
  5433  02F7  00A7               	movwf	(EUSART_SetFramingErrorHandler@interruptHandler^(0+128)+1)
  5434  02F8  3185  2576  3182   	fcall	_EUSART_SetFramingErrorHandler
  5435                           
  5436                           ;eusart.c: 107: EUSART_SetOverrunErrorHandler(EUSART_DefaultOverrunErrorHandler);
  5437  02FB  30CD               	movlw	low _EUSART_DefaultOverrunErrorHandler
  5438  02FC  0021               	movlb	1	; select bank1
  5439  02FD  00A6               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)
  5440  02FE  3005               	movlw	high _EUSART_DefaultOverrunErrorHandler
  5441  02FF  00A7               	movwf	(EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)+1)
  5442  0300  3185  2570  3182   	fcall	_EUSART_SetOverrunErrorHandler
  5443                           
  5444                           ;eusart.c: 108: EUSART_SetErrorHandler(EUSART_DefaultErrorHandler);
  5445  0303  30F2               	movlw	low _EUSART_DefaultErrorHandler
  5446  0304  0021               	movlb	1	; select bank1
  5447  0305  00A6               	movwf	EUSART_SetErrorHandler@interruptHandler^(0+128)
  5448  0306  3005               	movlw	high _EUSART_DefaultErrorHandler
  5449  0307  00A7               	movwf	(EUSART_SetErrorHandler@interruptHandler^(0+128)+1)
  5450  0308  3185  257C         	fcall	_EUSART_SetErrorHandler
  5451                           
  5452                           ;eusart.c: 110: eusartRxLastError.status = 0;
  5453  030A  0020               	movlb	0	; select bank0
  5454  030B  01D3               	clrf	_eusartRxLastError	;volatile
  5455                           
  5456                           ;eusart.c: 113: eusartRxHead = 0;
  5457  030C  01D6               	clrf	_eusartRxHead	;volatile
  5458                           
  5459                           ;eusart.c: 114: eusartRxTail = 0;
  5460  030D  01D5               	clrf	_eusartRxTail	;volatile
  5461                           
  5462                           ;eusart.c: 115: eusartRxCount = 0;
  5463  030E  01D4               	clrf	_eusartRxCount	;volatile
  5464                           
  5465                           ;eusart.c: 118: PIE1bits.RCIE = 1;
  5466  030F  0021               	movlb	1	; select bank1
  5467  0310  1690               	bsf	16,5	;volatile
  5468  0311  0008               	return
  5469  0312                     __end_of_EUSART_Initialize:	
  5470                           
  5471                           	psect	text13
  5472  0537                     __ptext13:	
  5473 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  5474 ;; Defined at:
  5475 ;;		line 234 in file "mcc_generated_files/eusart.c"
  5476 ;; Parameters:    Size  Location     Type
  5477 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5478 ;;		 -> MyUART_ISR(1), EUSART_Receive_ISR(1), 
  5479 ;; Auto vars:     Size  Location     Type
  5480 ;;		None
  5481 ;; Return value:  Size  Location     Type
  5482 ;;                  1    wreg      void 
  5483 ;; Registers used:
  5484 ;;		wreg
  5485 ;; Tracked objects:
  5486 ;;		On entry : 0/0
  5487 ;;		On exit  : 0/0
  5488 ;;		Unchanged: 0/0
  5489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5490 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5493 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5494 ;;Total ram usage:        2 bytes
  5495 ;; Hardware stack levels used:    1
  5496 ;; Hardware stack levels required when called:   12
  5497 ;; This function calls:
  5498 ;;		Nothing
  5499 ;; This function is called by:
  5500 ;;		_EUSART_Initialize
  5501 ;;		_main
  5502 ;; This function uses a non-reentrant model
  5503 ;;
  5504                           
  5505                           
  5506                           ;psect for function _EUSART_SetRxInterruptHandler
  5507  0537                     _EUSART_SetRxInterruptHandler:	
  5508                           
  5509                           ;eusart.c: 235: EUSART_RxDefaultInterruptHandler = interruptHandler;
  5510                           
  5511                           ;incstack = 0
  5512                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  5513  0537  0021               	movlb	1	; select bank1
  5514  0538  0827               	movf	(EUSART_SetRxInterruptHandler@interruptHandler+1)^(0+128),w
  5515  0539  0020               	movlb	0	; select bank0
  5516  053A  00E6               	movwf	_EUSART_RxDefaultInterruptHandler+1
  5517  053B  0021               	movlb	1	; select bank1
  5518  053C  0826               	movf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128),w
  5519  053D  0020               	movlb	0	; select bank0
  5520  053E  00E5               	movwf	_EUSART_RxDefaultInterruptHandler
  5521  053F  0008               	return
  5522  0540                     __end_of_EUSART_SetRxInterruptHandler:	
  5523                           
  5524                           	psect	text14
  5525  0570                     __ptext14:	
  5526 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  5527 ;; Defined at:
  5528 ;;		line 225 in file "mcc_generated_files/eusart.c"
  5529 ;; Parameters:    Size  Location     Type
  5530 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5531 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  5532 ;; Auto vars:     Size  Location     Type
  5533 ;;		None
  5534 ;; Return value:  Size  Location     Type
  5535 ;;                  1    wreg      void 
  5536 ;; Registers used:
  5537 ;;		wreg
  5538 ;; Tracked objects:
  5539 ;;		On entry : 0/0
  5540 ;;		On exit  : 0/0
  5541 ;;		Unchanged: 0/0
  5542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5543 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5546 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5547 ;;Total ram usage:        2 bytes
  5548 ;; Hardware stack levels used:    1
  5549 ;; Hardware stack levels required when called:   12
  5550 ;; This function calls:
  5551 ;;		Nothing
  5552 ;; This function is called by:
  5553 ;;		_EUSART_Initialize
  5554 ;; This function uses a non-reentrant model
  5555 ;;
  5556                           
  5557                           
  5558                           ;psect for function _EUSART_SetOverrunErrorHandler
  5559  0570                     _EUSART_SetOverrunErrorHandler:	
  5560                           
  5561                           ;eusart.c: 226: EUSART_OverrunErrorHandler = interruptHandler;
  5562                           
  5563                           ;incstack = 0
  5564                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  5565  0570  0021               	movlb	1	; select bank1
  5566  0571  0827               	movf	(EUSART_SetOverrunErrorHandler@interruptHandler+1)^(0+128),w
  5567  0572  00A3               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  5568  0573  0826               	movf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128),w
  5569  0574  00A2               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  5570  0575  0008               	return
  5571  0576                     __end_of_EUSART_SetOverrunErrorHandler:	
  5572                           
  5573                           	psect	text15
  5574  0576                     __ptext15:	
  5575 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  5576 ;; Defined at:
  5577 ;;		line 221 in file "mcc_generated_files/eusart.c"
  5578 ;; Parameters:    Size  Location     Type
  5579 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5580 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  5581 ;; Auto vars:     Size  Location     Type
  5582 ;;		None
  5583 ;; Return value:  Size  Location     Type
  5584 ;;                  1    wreg      void 
  5585 ;; Registers used:
  5586 ;;		wreg
  5587 ;; Tracked objects:
  5588 ;;		On entry : 0/0
  5589 ;;		On exit  : 0/0
  5590 ;;		Unchanged: 0/0
  5591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5592 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5595 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5596 ;;Total ram usage:        2 bytes
  5597 ;; Hardware stack levels used:    1
  5598 ;; Hardware stack levels required when called:   12
  5599 ;; This function calls:
  5600 ;;		Nothing
  5601 ;; This function is called by:
  5602 ;;		_EUSART_Initialize
  5603 ;; This function uses a non-reentrant model
  5604 ;;
  5605                           
  5606                           
  5607                           ;psect for function _EUSART_SetFramingErrorHandler
  5608  0576                     _EUSART_SetFramingErrorHandler:	
  5609                           
  5610                           ;eusart.c: 222: EUSART_FramingErrorHandler = interruptHandler;
  5611                           
  5612                           ;incstack = 0
  5613                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  5614  0576  0021               	movlb	1	; select bank1
  5615  0577  0827               	movf	(EUSART_SetFramingErrorHandler@interruptHandler+1)^(0+128),w
  5616  0578  00A5               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  5617  0579  0826               	movf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128),w
  5618  057A  00A4               	movwf	_EUSART_FramingErrorHandler^(0+128)
  5619  057B  0008               	return
  5620  057C                     __end_of_EUSART_SetFramingErrorHandler:	
  5621                           
  5622                           	psect	text16
  5623  057C                     __ptext16:	
  5624 ;; *************** function _EUSART_SetErrorHandler *****************
  5625 ;; Defined at:
  5626 ;;		line 229 in file "mcc_generated_files/eusart.c"
  5627 ;; Parameters:    Size  Location     Type
  5628 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5629 ;;		 -> EUSART_DefaultErrorHandler(1), 
  5630 ;; Auto vars:     Size  Location     Type
  5631 ;;		None
  5632 ;; Return value:  Size  Location     Type
  5633 ;;                  1    wreg      void 
  5634 ;; Registers used:
  5635 ;;		wreg
  5636 ;; Tracked objects:
  5637 ;;		On entry : 0/0
  5638 ;;		On exit  : 0/0
  5639 ;;		Unchanged: 0/0
  5640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5641 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5644 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5645 ;;Total ram usage:        2 bytes
  5646 ;; Hardware stack levels used:    1
  5647 ;; Hardware stack levels required when called:   12
  5648 ;; This function calls:
  5649 ;;		Nothing
  5650 ;; This function is called by:
  5651 ;;		_EUSART_Initialize
  5652 ;; This function uses a non-reentrant model
  5653 ;;
  5654                           
  5655                           
  5656                           ;psect for function _EUSART_SetErrorHandler
  5657  057C                     _EUSART_SetErrorHandler:	
  5658                           
  5659                           ;eusart.c: 230: EUSART_ErrorHandler = interruptHandler;
  5660                           
  5661                           ;incstack = 0
  5662                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  5663  057C  0021               	movlb	1	; select bank1
  5664  057D  0827               	movf	(EUSART_SetErrorHandler@interruptHandler+1)^(0+128),w
  5665  057E  00A1               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  5666  057F  0826               	movf	EUSART_SetErrorHandler@interruptHandler^(0+128),w
  5667  0580  00A0               	movwf	_EUSART_ErrorHandler^(0+128)
  5668  0581  0008               	return
  5669  0582                     __end_of_EUSART_SetErrorHandler:	
  5670                           
  5671                           	psect	intentry
  5672  0004                     __pintentry:	
  5673 ;; *************** function _INTERRUPT_InterruptManager *****************
  5674 ;; Defined at:
  5675 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5676 ;; Parameters:    Size  Location     Type
  5677 ;;		None
  5678 ;; Auto vars:     Size  Location     Type
  5679 ;;		None
  5680 ;; Return value:  Size  Location     Type
  5681 ;;                  1    wreg      void 
  5682 ;; Registers used:
  5683 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5684 ;; Tracked objects:
  5685 ;;		On entry : 0/0
  5686 ;;		On exit  : 0/0
  5687 ;;		Unchanged: 0/0
  5688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5691 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5692 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5693 ;;Total ram usage:        1 bytes
  5694 ;; Hardware stack levels used:    1
  5695 ;; Hardware stack levels required when called:   11
  5696 ;; This function calls:
  5697 ;;		Absolute function
  5698 ;;		_EUSART_Receive_ISR
  5699 ;;		_MyUART_ISR
  5700 ;;		_TMR2_ISR
  5701 ;; This function is called by:
  5702 ;;		Interrupt level 1
  5703 ;; This function uses a non-reentrant model
  5704 ;;
  5705                           
  5706  0004                     _INTERRUPT_InterruptManager:	
  5707                           
  5708                           ;incstack = 0
  5709  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  5710                           
  5711                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5712  0005  3180               	pagesel	$
  5713  0006  0020               	movlb	0	; select bank0
  5714  0007  087F               	movf	127,w
  5715  0008  00E2               	movwf	??_INTERRUPT_InterruptManager
  5716                           
  5717                           ;interrupt_manager.c: 55: if(INTCONbits.PEIE == 1)
  5718  0009  1F0B               	btfss	11,6	;volatile
  5719  000A  281F               	goto	i1l123
  5720                           
  5721                           ;interrupt_manager.c: 56: {
  5722                           ;interrupt_manager.c: 57: if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
  5723  000B  0021               	movlb	1	; select bank1
  5724  000C  1E90               	btfss	16,5	;volatile
  5725  000D  2817               	goto	i1l118
  5726  000E  0020               	movlb	0	; select bank0
  5727  000F  1E90               	btfss	16,5	;volatile
  5728  0010  2817               	goto	i1l118
  5729                           
  5730                           ;interrupt_manager.c: 58: {
  5731                           ;interrupt_manager.c: 59: EUSART_RxDefaultInterruptHandler();
  5732  0011  0866               	movf	_EUSART_RxDefaultInterruptHandler+1,w
  5733  0012  008A               	movwf	10
  5734  0013  0865               	movf	_EUSART_RxDefaultInterruptHandler,w
  5735  0014  000A               	callw
  5736  0015  3180               	pagesel	$
  5737                           
  5738                           ;interrupt_manager.c: 60: }
  5739  0016  281F               	goto	i1l123
  5740  0017                     i1l118:	
  5741                           
  5742                           ;interrupt_manager.c: 61: else if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
  5743  0017  0021               	movlb	1	; select bank1
  5744  0018  1C90               	btfss	16,1	;volatile
  5745  0019  281F               	goto	i1l123
  5746  001A  0020               	movlb	0	; select bank0
  5747  001B  1C90               	btfss	16,1	;volatile
  5748  001C  281F               	goto	i1l123
  5749                           
  5750                           ;interrupt_manager.c: 62: {
  5751                           ;interrupt_manager.c: 63: TMR2_ISR();
  5752  001D  3184  24DF         	fcall	_TMR2_ISR
  5753  001F                     i1l123:	
  5754                           ;interrupt_manager.c: 70: else
  5755                           ;interrupt_manager.c: 71: {
  5756                           
  5757                           ;interrupt_manager.c: 68: }
  5758                           ;interrupt_manager.c: 69: }
  5759                           
  5760                           ;interrupt_manager.c: 65: else
  5761                           ;interrupt_manager.c: 66: {
  5762                           
  5763                           ;interrupt_manager.c: 64: }
  5764                           
  5765  001F  0020               	movlb	0	; select bank0
  5766  0020  0862               	movf	??_INTERRUPT_InterruptManager,w
  5767  0021  00FF               	movwf	127
  5768  0022  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  5769  0023  0009               	retfie
  5770  0024                     __end_of_INTERRUPT_InterruptManager:	
  5771                           
  5772                           	psect	text18
  5773  04DF                     __ptext18:	
  5774 ;; *************** function _TMR2_ISR *****************
  5775 ;; Defined at:
  5776 ;;		line 165 in file "mcc_generated_files/tmr2.c"
  5777 ;; Parameters:    Size  Location     Type
  5778 ;;		None
  5779 ;; Auto vars:     Size  Location     Type
  5780 ;;		None
  5781 ;; Return value:  Size  Location     Type
  5782 ;;                  1    wreg      void 
  5783 ;; Registers used:
  5784 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5785 ;; Tracked objects:
  5786 ;;		On entry : 0/0
  5787 ;;		On exit  : 0/0
  5788 ;;		Unchanged: 0/0
  5789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5794 ;;Total ram usage:        0 bytes
  5795 ;; Hardware stack levels used:    1
  5796 ;; Hardware stack levels required when called:   10
  5797 ;; This function calls:
  5798 ;;		Absolute function
  5799 ;;		_MyTimer2ISR
  5800 ;;		_TMR2_DefaultInterruptHandler
  5801 ;; This function is called by:
  5802 ;;		_INTERRUPT_InterruptManager
  5803 ;; This function uses a non-reentrant model
  5804 ;;
  5805                           
  5806                           
  5807                           ;psect for function _TMR2_ISR
  5808  04DF                     _TMR2_ISR:	
  5809                           
  5810                           ;tmr2.c: 169: PIR1bits.TMR2IF = 0;
  5811                           
  5812                           ;incstack = 0
  5813                           ; Regs used in _TMR2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5814  04DF  0020               	movlb	0	; select bank0
  5815  04E0  1090               	bcf	16,1	;volatile
  5816                           
  5817                           ;tmr2.c: 171: if(TMR2_InterruptHandler)
  5818  04E1  0863               	movf	_TMR2_InterruptHandler,w
  5819  04E2  0464               	iorwf	_TMR2_InterruptHandler+1,w
  5820  04E3  1903               	btfsc	3,2
  5821  04E4  0008               	return
  5822                           
  5823                           ;tmr2.c: 172: {
  5824                           ;tmr2.c: 173: TMR2_InterruptHandler();
  5825  04E5  0864               	movf	_TMR2_InterruptHandler+1,w
  5826  04E6  008A               	movwf	10
  5827  04E7  0863               	movf	_TMR2_InterruptHandler,w
  5828  04E8  000A               	callw
  5829  04E9  3184               	pagesel	$
  5830  04EA  0008               	return
  5831  04EB                     __end_of_TMR2_ISR:	
  5832                           
  5833                           	psect	text19
  5834  00F9                     __ptext19:	
  5835 ;; *************** function _MyTimer2ISR *****************
  5836 ;; Defined at:
  5837 ;;		line 59 in file "main.c"
  5838 ;; Parameters:    Size  Location     Type
  5839 ;;		None
  5840 ;; Auto vars:     Size  Location     Type
  5841 ;;		None
  5842 ;; Return value:  Size  Location     Type
  5843 ;;                  1    wreg      void 
  5844 ;; Registers used:
  5845 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5846 ;; Tracked objects:
  5847 ;;		On entry : 0/0
  5848 ;;		On exit  : 0/0
  5849 ;;		Unchanged: 0/0
  5850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5853 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5854 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5855 ;;Total ram usage:        2 bytes
  5856 ;; Hardware stack levels used:    1
  5857 ;; Hardware stack levels required when called:    9
  5858 ;; This function calls:
  5859 ;;		_EUSART_Write
  5860 ;;		_I2C_Write1ByteRegister
  5861 ;;		_PWM3_LoadDutyValue
  5862 ;; This function is called by:
  5863 ;;		_main
  5864 ;;		_TMR2_ISR
  5865 ;; This function uses a non-reentrant model
  5866 ;;
  5867                           
  5868                           
  5869                           ;psect for function _MyTimer2ISR
  5870  00F9                     _MyTimer2ISR:	
  5871                           
  5872                           ;main.c: 65: PWM3_LoadDutyValue((uint8_t)(Angle/2)+20);
  5873                           
  5874                           ;incstack = 0
  5875                           ; Regs used in _MyTimer2ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5876  00F9  0020               	movlb	0	; select bank0
  5877  00FA  0868               	movf	_Angle+1,w
  5878  00FB  00E1               	movwf	??_MyTimer2ISR+1
  5879  00FC  0867               	movf	_Angle,w
  5880  00FD  00E0               	movwf	??_MyTimer2ISR
  5881  00FE  36E1               	lsrf	??_MyTimer2ISR+1,f
  5882  00FF  0CE0               	rrf	??_MyTimer2ISR,f
  5883  0100  0860               	movf	??_MyTimer2ISR,w
  5884  0101  3E14               	addlw	20
  5885  0102  00F0               	movwf	PWM3_LoadDutyValue@dutyValue
  5886  0103  3000               	movlw	0
  5887  0104  1803               	skipnc
  5888  0105  3001               	movlw	1
  5889  0106  00F1               	movwf	PWM3_LoadDutyValue@dutyValue+1
  5890  0107  3184  2455  3180   	fcall	_PWM3_LoadDutyValue
  5891                           
  5892                           ;main.c: 66: if(PORTAbits.RA4) {
  5893  010A  0020               	movlb	0	; select bank0
  5894  010B  1E0C               	btfss	12,4	;volatile
  5895  010C  2942               	goto	i1l2703
  5896                           
  5897                           ;main.c: 67: if(StateBat == S_bat_low) {
  5898  010D  0869               	movf	_StateBat,w
  5899  010E  1D03               	btfss	3,2
  5900  010F  291F               	goto	i1l2691
  5901                           
  5902                           ;main.c: 68: EUSART_Write('B');
  5903  0110  3042               	movlw	66
  5904  0111  3185  2548  3180   	fcall	_EUSART_Write
  5905                           
  5906                           ;main.c: 69: EUSART_Write('1');
  5907  0114  3031               	movlw	49
  5908  0115  3185  2548  3180   	fcall	_EUSART_Write
  5909                           
  5910                           ;main.c: 70: EUSART_Write('s');
  5911  0118  3073               	movlw	115
  5912  0119  3185  2548  3180   	fcall	_EUSART_Write
  5913                           
  5914                           ;main.c: 71: StateBat = S_bat_high;
  5915  011C  0020               	movlb	0	; select bank0
  5916  011D  01E9               	clrf	_StateBat
  5917  011E  0AE9               	incf	_StateBat,f
  5918  011F                     i1l2691:	
  5919                           
  5920                           ;main.c: 72: }
  5921                           ;main.c: 73: if(Validation) {
  5922  011F  086A               	movf	_Validation,w
  5923  0120  1903               	btfsc	3,2
  5924  0121  2939               	goto	i1l2701
  5925                           
  5926                           ;main.c: 75: if(Vitesse > 100) {Vitesse = 100;}
  5927  0122  3000               	movlw	0
  5928  0123  024E               	subwf	_Vitesse+1,w
  5929  0124  3065               	movlw	101
  5930  0125  1903               	skipnz
  5931  0126  024D               	subwf	_Vitesse,w
  5932  0127  1C03               	skipc
  5933  0128  292D               	goto	i1l2697
  5934  0129  3064               	movlw	100
  5935  012A  00CD               	movwf	_Vitesse
  5936  012B  3000               	movlw	0
  5937  012C  00CE               	movwf	_Vitesse+1
  5938  012D                     i1l2697:	
  5939                           
  5940                           ;main.c: 76: I2C_Write1ByteRegister(0x40, Vitesse, 0);
  5941  012D  084D               	movf	_Vitesse,w
  5942  012E  00E0               	movwf	??_MyTimer2ISR
  5943  012F  0860               	movf	??_MyTimer2ISR,w
  5944  0130  00DC               	movwf	I2C_Write1ByteRegister@reg
  5945  0131  01DD               	clrf	I2C_Write1ByteRegister@data
  5946  0132  3040               	movlw	64
  5947  0133  3183  2312         	fcall	_I2C_Write1ByteRegister
  5948                           
  5949                           ;main.c: 78: Validation--;
  5950  0135  3001               	movlw	1
  5951  0136  0020               	movlb	0	; select bank0
  5952  0137  02EA               	subwf	_Validation,f
  5953                           
  5954                           ;main.c: 79: } else {
  5955  0138  0008               	return
  5956  0139                     i1l2701:	
  5957                           
  5958                           ;main.c: 81: I2C_Write1ByteRegister(0x40, 101, 0);
  5959  0139  3065               	movlw	101
  5960  013A  00E0               	movwf	??_MyTimer2ISR
  5961  013B  0860               	movf	??_MyTimer2ISR,w
  5962  013C  00DC               	movwf	I2C_Write1ByteRegister@reg
  5963  013D  01DD               	clrf	I2C_Write1ByteRegister@data
  5964  013E  3040               	movlw	64
  5965  013F  3183  2312         	fcall	_I2C_Write1ByteRegister
  5966                           
  5967                           ;main.c: 83: }
  5968                           ;main.c: 84: } else {
  5969  0141  0008               	return
  5970  0142                     i1l2703:	
  5971                           
  5972                           ;main.c: 85: if(StateBat == S_bat_high) {
  5973  0142  0020               	movlb	0	; select bank0
  5974  0143  0369               	decf	_StateBat,w
  5975  0144  1D03               	btfss	3,2
  5976  0145  2954               	goto	i1l2709
  5977                           
  5978                           ;main.c: 86: EUSART_Write('B');
  5979  0146  3042               	movlw	66
  5980  0147  3185  2548  3180   	fcall	_EUSART_Write
  5981                           
  5982                           ;main.c: 87: EUSART_Write('0');
  5983  014A  3030               	movlw	48
  5984  014B  3185  2548  3180   	fcall	_EUSART_Write
  5985                           
  5986                           ;main.c: 88: EUSART_Write('r');
  5987  014E  3072               	movlw	114
  5988  014F  3185  2548  3180   	fcall	_EUSART_Write
  5989                           
  5990                           ;main.c: 89: StateBat = S_bat_low;
  5991  0152  0020               	movlb	0	; select bank0
  5992  0153  01E9               	clrf	_StateBat
  5993  0154                     i1l2709:	
  5994                           
  5995                           ;main.c: 90: }
  5996                           ;main.c: 92: I2C_Write1ByteRegister(0x40, 101, 0);
  5997  0154  3065               	movlw	101
  5998  0155  00E0               	movwf	??_MyTimer2ISR
  5999  0156  0860               	movf	??_MyTimer2ISR,w
  6000  0157  00DC               	movwf	I2C_Write1ByteRegister@reg
  6001  0158  01DD               	clrf	I2C_Write1ByteRegister@data
  6002  0159  3040               	movlw	64
  6003  015A  3183  2312         	fcall	_I2C_Write1ByteRegister
  6004  015C  0008               	return
  6005  015D                     __end_of_MyTimer2ISR:	
  6006                           
  6007                           	psect	text20
  6008  05F9                     __ptext20:	
  6009 ;; *************** function _TMR2_DefaultInterruptHandler *****************
  6010 ;; Defined at:
  6011 ;;		line 182 in file "mcc_generated_files/tmr2.c"
  6012 ;; Parameters:    Size  Location     Type
  6013 ;;		None
  6014 ;; Auto vars:     Size  Location     Type
  6015 ;;		None
  6016 ;; Return value:  Size  Location     Type
  6017 ;;                  1    wreg      void 
  6018 ;; Registers used:
  6019 ;;		None
  6020 ;; Tracked objects:
  6021 ;;		On entry : 0/0
  6022 ;;		On exit  : 0/0
  6023 ;;		Unchanged: 0/0
  6024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6028 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6029 ;;Total ram usage:        0 bytes
  6030 ;; Hardware stack levels used:    1
  6031 ;; This function calls:
  6032 ;;		Nothing
  6033 ;; This function is called by:
  6034 ;;		_TMR2_Initialize
  6035 ;;		_TMR2_ISR
  6036 ;; This function uses a non-reentrant model
  6037 ;;
  6038                           
  6039                           
  6040                           ;psect for function _TMR2_DefaultInterruptHandler
  6041  05F9                     _TMR2_DefaultInterruptHandler:	
  6042                           
  6043                           ;incstack = 0
  6044                           ; Regs used in _TMR2_DefaultInterruptHandler: []
  6045  05F9  0008               	return
  6046  05FA                     __end_of_TMR2_DefaultInterruptHandler:	
  6047                           
  6048                           	psect	text21
  6049  0455                     __ptext21:	
  6050 ;; *************** function _PWM3_LoadDutyValue *****************
  6051 ;; Defined at:
  6052 ;;		line 74 in file "mcc_generated_files/pwm3.c"
  6053 ;; Parameters:    Size  Location     Type
  6054 ;;  dutyValue       2    0[COMMON] unsigned int 
  6055 ;; Auto vars:     Size  Location     Type
  6056 ;;		None
  6057 ;; Return value:  Size  Location     Type
  6058 ;;                  1    wreg      void 
  6059 ;; Registers used:
  6060 ;;		wreg, status,2, status,0
  6061 ;; Tracked objects:
  6062 ;;		On entry : 0/0
  6063 ;;		On exit  : 0/0
  6064 ;;		Unchanged: 0/0
  6065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6066 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6068 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6069 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6070 ;;Total ram usage:        4 bytes
  6071 ;; Hardware stack levels used:    1
  6072 ;; This function calls:
  6073 ;;		Nothing
  6074 ;; This function is called by:
  6075 ;;		_MyTimer2ISR
  6076 ;; This function uses a non-reentrant model
  6077 ;;
  6078                           
  6079                           
  6080                           ;psect for function _PWM3_LoadDutyValue
  6081  0455                     _PWM3_LoadDutyValue:	
  6082                           
  6083                           ;pwm3.c: 77: PWM3DCH = (dutyValue & 0x03FC)>>2;
  6084                           
  6085                           ;incstack = 0
  6086                           ; Regs used in _PWM3_LoadDutyValue: [wreg+status,2+status,0]
  6087  0455  0871               	movf	PWM3_LoadDutyValue@dutyValue+1,w
  6088  0456  00F3               	movwf	??_PWM3_LoadDutyValue+1
  6089  0457  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
  6090  0458  00F2               	movwf	??_PWM3_LoadDutyValue
  6091  0459  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
  6092  045A  0CF2               	rrf	??_PWM3_LoadDutyValue,f
  6093  045B  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
  6094  045C  0CF2               	rrf	??_PWM3_LoadDutyValue,f
  6095  045D  0872               	movf	??_PWM3_LoadDutyValue,w
  6096  045E  002C               	movlb	12	; select bank12
  6097  045F  0098               	movwf	24	;volatile
  6098                           
  6099                           ;pwm3.c: 80: PWM3DCL = (dutyValue & 0x0003)<<6;
  6100  0460  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
  6101  0461  3903               	andlw	3
  6102  0462  00F2               	movwf	??_PWM3_LoadDutyValue
  6103  0463  3005               	movlw	5
  6104  0464                     u85_25:	
  6105  0464  35F2               	lslf	??_PWM3_LoadDutyValue,f
  6106  0465  3EFF               	addlw	-1
  6107  0466  1D03               	skipz
  6108  0467  2C64               	goto	u85_25
  6109  0468  3572               	lslf	??_PWM3_LoadDutyValue,w
  6110  0469  0097               	movwf	23	;volatile
  6111  046A  0008               	return
  6112  046B                     __end_of_PWM3_LoadDutyValue:	
  6113                           
  6114                           	psect	text22
  6115  0312                     __ptext22:	
  6116 ;; *************** function _I2C_Write1ByteRegister *****************
  6117 ;; Defined at:
  6118 ;;		line 91 in file "mcc_generated_files/examples/i2c_master_example.c"
  6119 ;; Parameters:    Size  Location     Type
  6120 ;;  address         1    wreg     unsigned char 
  6121 ;;  reg             1    5[BANK0 ] unsigned char 
  6122 ;;  data            1    6[BANK0 ] unsigned char 
  6123 ;; Auto vars:     Size  Location     Type
  6124 ;;  address         1    8[BANK0 ] unsigned char 
  6125 ;; Return value:  Size  Location     Type
  6126 ;;                  1    wreg      void 
  6127 ;; Registers used:
  6128 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6129 ;; Tracked objects:
  6130 ;;		On entry : 0/0
  6131 ;;		On exit  : 0/0
  6132 ;;		Unchanged: 0/0
  6133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6134 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6135 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6136 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6137 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6138 ;;Total ram usage:        4 bytes
  6139 ;; Hardware stack levels used:    1
  6140 ;; Hardware stack levels required when called:    8
  6141 ;; This function calls:
  6142 ;;		_I2C_Close
  6143 ;;		_I2C_MasterWrite
  6144 ;;		_I2C_Open
  6145 ;;		_I2C_SetAddressNackCallback
  6146 ;;		_I2C_SetBuffer
  6147 ;;		_I2C_SetDataCompleteCallback
  6148 ;; This function is called by:
  6149 ;;		_MyTimer2ISR
  6150 ;; This function uses a non-reentrant model
  6151 ;;
  6152                           
  6153                           
  6154                           ;psect for function _I2C_Write1ByteRegister
  6155  0312                     _I2C_Write1ByteRegister:	
  6156                           
  6157                           ;incstack = 0
  6158                           ; Regs used in _I2C_Write1ByteRegister: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6159                           ;I2C_Write1ByteRegister@address stored from wreg
  6160  0312  0020               	movlb	0	; select bank0
  6161  0313  00DF               	movwf	I2C_Write1ByteRegister@address
  6162  0314                     i1l2529:	
  6163                           ;i2c_master_example.c: 93: while(!I2C_Open(address));
  6164                           
  6165  0314  0020               	movlb	0	; select bank0
  6166  0315  085F               	movf	I2C_Write1ByteRegister@address,w
  6167  0316  3182  2273  3183   	fcall	_I2C_Open
  6168  0319  3A00               	xorlw	0
  6169  031A  1903               	skipnz
  6170  031B  2B14               	goto	i1l2529
  6171                           
  6172                           ;i2c_master_example.c: 94: I2C_SetDataCompleteCallback(wr1RegCompleteHandler,&data);
  6173  031C  3091               	movlw	low _wr1RegCompleteHandler
  6174  031D  00F5               	movwf	I2C_SetDataCompleteCallback@cb
  6175  031E  3004               	movlw	high _wr1RegCompleteHandler
  6176  031F  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
  6177  0320  305D               	movlw	(low (I2C_Write1ByteRegister@data| 0))& (0+255)
  6178  0321  0020               	movlb	0	; select bank0
  6179  0322  00DE               	movwf	??_I2C_Write1ByteRegister
  6180  0323  085E               	movf	??_I2C_Write1ByteRegister,w
  6181  0324  00F7               	movwf	I2C_SetDataCompleteCallback@ptr
  6182  0325  3185  2503  3183   	fcall	_I2C_SetDataCompleteCallback
  6183                           
  6184                           ;i2c_master_example.c: 95: I2C_SetBuffer(&reg,1);
  6185  0328  3001               	movlw	1
  6186  0329  00F0               	movwf	I2C_SetBuffer@bufferSize
  6187  032A  3000               	movlw	0
  6188  032B  00F1               	movwf	I2C_SetBuffer@bufferSize+1
  6189  032C  305C               	movlw	(low (I2C_Write1ByteRegister@reg| 0))& (0+255)
  6190  032D  3184  24D1  3183   	fcall	_I2C_SetBuffer
  6191                           
  6192                           ;i2c_master_example.c: 96: I2C_SetAddressNackCallback((0),(0));
  6193  0330  3000               	movlw	0
  6194  0331  00F5               	movwf	I2C_SetAddressNackCallback@cb
  6195  0332  00F6               	movwf	I2C_SetAddressNackCallback@cb+1
  6196  0333  01F7               	clrf	I2C_SetAddressNackCallback@ptr
  6197  0334  3184  24EB  3183   	fcall	_I2C_SetAddressNackCallback
  6198                           
  6199                           ;i2c_master_example.c: 97: I2C_MasterWrite();
  6200  0337  3185  25A1  3183   	fcall	_I2C_MasterWrite
  6201  033A                     i1l2539:	
  6202                           ;i2c_master_example.c: 98: while(I2C_BUSY == I2C_Close());
  6203                           
  6204  033A  3184  240E  3183   	fcall	_I2C_Close
  6205  033D  3A01               	xorlw	1
  6206  033E  1D03               	btfss	3,2
  6207  033F  0008               	return
  6208  0340  2B3A               	goto	i1l2539
  6209  0341                     __end_of_I2C_Write1ByteRegister:	
  6210                           
  6211                           	psect	text23
  6212  04EB                     __ptext23:	
  6213 ;; *************** function _I2C_SetAddressNackCallback *****************
  6214 ;; Defined at:
  6215 ;;		line 283 in file "mcc_generated_files/i2c_master.c"
  6216 ;; Parameters:    Size  Location     Type
  6217 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
  6218 ;;		 -> Absolute function(1), 
  6219 ;;  ptr             1    7[COMMON] PTR void 
  6220 ;;		 -> NULL(0), 
  6221 ;; Auto vars:     Size  Location     Type
  6222 ;;		None
  6223 ;; Return value:  Size  Location     Type
  6224 ;;                  1    wreg      void 
  6225 ;; Registers used:
  6226 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6227 ;; Tracked objects:
  6228 ;;		On entry : 0/0
  6229 ;;		On exit  : 0/0
  6230 ;;		Unchanged: 0/0
  6231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6232 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6234 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6235 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6236 ;;Total ram usage:        4 bytes
  6237 ;; Hardware stack levels used:    1
  6238 ;; Hardware stack levels required when called:    1
  6239 ;; This function calls:
  6240 ;;		_I2C_SetCallback
  6241 ;; This function is called by:
  6242 ;;		_I2C_Write1ByteRegister
  6243 ;;		_I2C_Read1ByteRegister
  6244 ;;		_I2C_Read2ByteRegister
  6245 ;;		_I2C_Write2ByteRegister
  6246 ;;		_I2C_WriteNBytes
  6247 ;;		_I2C_ReadDataBlock
  6248 ;; This function uses a non-reentrant model
  6249 ;;
  6250                           
  6251                           
  6252                           ;psect for function _I2C_SetAddressNackCallback
  6253  04EB                     _I2C_SetAddressNackCallback:	
  6254                           
  6255                           ;i2c_master.c: 285: I2C_SetCallback(I2C_ADDR_NACK, cb, ptr);
  6256                           
  6257                           ;incstack = 0
  6258                           ; Regs used in _I2C_SetAddressNackCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6259  04EB  0876               	movf	I2C_SetAddressNackCallback@cb+1,w
  6260  04EC  00F1               	movwf	I2C_SetCallback@cb+1
  6261  04ED  0875               	movf	I2C_SetAddressNackCallback@cb,w
  6262  04EE  00F0               	movwf	I2C_SetCallback@cb
  6263  04EF  0877               	movf	I2C_SetAddressNackCallback@ptr,w
  6264  04F0  00F8               	movwf	??_I2C_SetAddressNackCallback
  6265  04F1  0878               	movf	??_I2C_SetAddressNackCallback,w
  6266  04F2  00F2               	movwf	I2C_SetCallback@ptr
  6267  04F3  3002               	movlw	2
  6268  04F4  3183  238D         	fcall	_I2C_SetCallback
  6269  04F6  0008               	return
  6270  04F7                     __end_of_I2C_SetAddressNackCallback:	
  6271                           
  6272                           	psect	text24
  6273  0273                     __ptext24:	
  6274 ;; *************** function _I2C_Open *****************
  6275 ;; Defined at:
  6276 ;;		line 176 in file "mcc_generated_files/i2c_master.c"
  6277 ;; Parameters:    Size  Location     Type
  6278 ;;  address         1    wreg     unsigned char 
  6279 ;; Auto vars:     Size  Location     Type
  6280 ;;  address         1    1[COMMON] unsigned char 
  6281 ;;  returnValue     1    2[COMMON] enum E92
  6282 ;; Return value:  Size  Location     Type
  6283 ;;                  1    wreg      enum E92
  6284 ;; Registers used:
  6285 ;;		wreg, status,2, status,0, pclath, cstack
  6286 ;; Tracked objects:
  6287 ;;		On entry : 0/0
  6288 ;;		On exit  : 0/0
  6289 ;;		Unchanged: 0/0
  6290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6292 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6293 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6294 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6295 ;;Total ram usage:        3 bytes
  6296 ;; Hardware stack levels used:    1
  6297 ;; Hardware stack levels required when called:    1
  6298 ;; This function calls:
  6299 ;;		_I2C_MasterClearIrq
  6300 ;;		_I2C_MasterOpen
  6301 ;; This function is called by:
  6302 ;;		_I2C_Write1ByteRegister
  6303 ;;		_I2C_Read1ByteRegister
  6304 ;;		_I2C_Read2ByteRegister
  6305 ;;		_I2C_Write2ByteRegister
  6306 ;;		_I2C_WriteNBytes
  6307 ;;		_I2C_ReadNBytes
  6308 ;;		_I2C_ReadDataBlock
  6309 ;; This function uses a non-reentrant model
  6310 ;;
  6311                           
  6312                           
  6313                           ;psect for function _I2C_Open
  6314  0273                     _I2C_Open:	
  6315                           
  6316                           ;incstack = 0
  6317                           ; Regs used in _I2C_Open: [wreg+status,2+status,0+pclath+cstack]
  6318                           ;I2C_Open@address stored from wreg
  6319  0273  00F1               	movwf	I2C_Open@address
  6320                           
  6321                           ;i2c_master.c: 178: i2c_error_t returnValue = I2C_BUSY;
  6322  0274  01F2               	clrf	I2C_Open@returnValue
  6323  0275  0AF2               	incf	I2C_Open@returnValue,f
  6324                           
  6325                           ;i2c_master.c: 180: if(!I2C_Status.inUse)
  6326  0276  0020               	movlb	0	; select bank0
  6327  0277  193C               	btfsc	_I2C_Status+28,2
  6328  0278  2AA8               	goto	i1l321
  6329                           
  6330                           ;i2c_master.c: 181: {
  6331                           ;i2c_master.c: 182: I2C_Status.address = address;
  6332  0279  0871               	movf	I2C_Open@address,w
  6333  027A  00F0               	movwf	??_I2C_Open
  6334  027B  0870               	movf	??_I2C_Open,w
  6335  027C  00B6               	movwf	_I2C_Status+22
  6336                           
  6337                           ;i2c_master.c: 183: I2C_Status.busy = 0;
  6338  027D  10BC               	bcf	_I2C_Status+28,1
  6339                           
  6340                           ;i2c_master.c: 184: I2C_Status.inUse = 1;
  6341  027E  153C               	bsf	_I2C_Status+28,2
  6342                           
  6343                           ;i2c_master.c: 185: I2C_Status.addressNackCheck = 0;
  6344  027F  103C               	bcf	_I2C_Status+28,0
  6345                           
  6346                           ;i2c_master.c: 186: I2C_Status.state = I2C_RESET;
  6347  0280  300E               	movlw	14
  6348  0281  00F0               	movwf	??_I2C_Open
  6349  0282  0870               	movf	??_I2C_Open,w
  6350  0283  00BA               	movwf	_I2C_Status+26
  6351                           
  6352                           ;i2c_master.c: 187: I2C_Status.time_out_value = 500;
  6353  0284  30F4               	movlw	244
  6354  0285  00B4               	movwf	_I2C_Status+20
  6355  0286  3001               	movlw	1
  6356  0287  00B5               	movwf	_I2C_Status+21
  6357                           
  6358                           ;i2c_master.c: 188: I2C_Status.bufferFree = 1;
  6359  0288  15BC               	bsf	_I2C_Status+28,3
  6360                           
  6361                           ;i2c_master.c: 191: I2C_Status.callbackTable[I2C_DATA_COMPLETE]=I2C_CallbackReturnStop;
  6362  0289  30F7               	movlw	low _I2C_CallbackReturnStop
  6363  028A  00A0               	movwf	_I2C_Status
  6364  028B  3005               	movlw	high _I2C_CallbackReturnStop
  6365  028C  00A1               	movwf	_I2C_Status+1
  6366                           
  6367                           ;i2c_master.c: 192: I2C_Status.callbackPayload[I2C_DATA_COMPLETE] = (0);
  6368  028D  01AC               	clrf	low ((_I2C_Status| 0+12))
  6369                           
  6370                           ;i2c_master.c: 193: I2C_Status.callbackTable[I2C_WRITE_COLLISION]=I2C_CallbackReturnStop
      +                          ;
  6371  028E  30F7               	movlw	low _I2C_CallbackReturnStop
  6372  028F  00A2               	movwf	low ((_I2C_Status| 0+2))
  6373  0290  3005               	movlw	high _I2C_CallbackReturnStop
  6374  0291  00A3               	movwf	(low ((_I2C_Status| 0+2))+1)
  6375                           
  6376                           ;i2c_master.c: 194: I2C_Status.callbackPayload[I2C_WRITE_COLLISION] = (0);
  6377  0292  01AD               	clrf	low ((_I2C_Status| 0+13))
  6378                           
  6379                           ;i2c_master.c: 195: I2C_Status.callbackTable[I2C_ADDR_NACK]=I2C_CallbackReturnStop;
  6380  0293  30F7               	movlw	low _I2C_CallbackReturnStop
  6381  0294  00A4               	movwf	low ((_I2C_Status| 0+4))
  6382  0295  3005               	movlw	high _I2C_CallbackReturnStop
  6383  0296  00A5               	movwf	(low ((_I2C_Status| 0+4))+1)
  6384                           
  6385                           ;i2c_master.c: 196: I2C_Status.callbackPayload[I2C_ADDR_NACK] = (0);
  6386  0297  01AE               	clrf	low ((_I2C_Status| 0+14))
  6387                           
  6388                           ;i2c_master.c: 197: I2C_Status.callbackTable[I2C_DATA_NACK]=I2C_CallbackReturnStop;
  6389  0298  30F7               	movlw	low _I2C_CallbackReturnStop
  6390  0299  00A6               	movwf	low ((_I2C_Status| 0+6))
  6391  029A  3005               	movlw	high _I2C_CallbackReturnStop
  6392  029B  00A7               	movwf	(low ((_I2C_Status| 0+6))+1)
  6393                           
  6394                           ;i2c_master.c: 198: I2C_Status.callbackPayload[I2C_DATA_NACK] = (0);
  6395  029C  01AF               	clrf	low ((_I2C_Status| 0+15))
  6396                           
  6397                           ;i2c_master.c: 199: I2C_Status.callbackTable[I2C_TIMEOUT]=I2C_CallbackReturnReset;
  6398  029D  30F5               	movlw	low _I2C_CallbackReturnReset
  6399  029E  00A8               	movwf	low ((_I2C_Status| 0+8))
  6400  029F  3005               	movlw	high _I2C_CallbackReturnReset
  6401  02A0  00A9               	movwf	(low ((_I2C_Status| 0+8))+1)
  6402                           
  6403                           ;i2c_master.c: 200: I2C_Status.callbackPayload[I2C_TIMEOUT] = (0);
  6404  02A1  01B0               	clrf	low ((_I2C_Status| 0+16))
  6405                           
  6406                           ;i2c_master.c: 202: I2C_MasterClearIrq();
  6407  02A2  3185  25EF  3182   	fcall	_I2C_MasterClearIrq
  6408                           
  6409                           ;i2c_master.c: 203: I2C_MasterOpen();
  6410  02A5  3184  24F7         	fcall	_I2C_MasterOpen
  6411                           
  6412                           ;i2c_master.c: 204: returnValue = I2C_NOERR;
  6413  02A7  01F2               	clrf	I2C_Open@returnValue
  6414  02A8                     i1l321:	
  6415                           
  6416                           ;i2c_master.c: 205: }
  6417                           ;i2c_master.c: 206: return returnValue;
  6418  02A8  0872               	movf	I2C_Open@returnValue,w
  6419  02A9  0008               	return
  6420  02AA                     __end_of_I2C_Open:	
  6421                           
  6422                           	psect	text25
  6423  04F7                     __ptext25:	
  6424 ;; *************** function _I2C_MasterOpen *****************
  6425 ;; Defined at:
  6426 ;;		line 543 in file "mcc_generated_files/i2c_master.c"
  6427 ;; Parameters:    Size  Location     Type
  6428 ;;		None
  6429 ;; Auto vars:     Size  Location     Type
  6430 ;;		None
  6431 ;; Return value:  Size  Location     Type
  6432 ;;                  1    wreg      unsigned char 
  6433 ;; Registers used:
  6434 ;;		wreg, status,2
  6435 ;; Tracked objects:
  6436 ;;		On entry : 0/0
  6437 ;;		On exit  : 0/0
  6438 ;;		Unchanged: 0/0
  6439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6443 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6444 ;;Total ram usage:        0 bytes
  6445 ;; Hardware stack levels used:    1
  6446 ;; This function calls:
  6447 ;;		Nothing
  6448 ;; This function is called by:
  6449 ;;		_I2C_Open
  6450 ;; This function uses a non-reentrant model
  6451 ;;
  6452                           
  6453                           
  6454                           ;psect for function _I2C_MasterOpen
  6455  04F7                     _I2C_MasterOpen:	
  6456                           
  6457                           ;i2c_master.c: 545: if(!SSP1CON1bits.SSPEN)
  6458                           
  6459                           ;incstack = 0
  6460                           ; Regs used in _I2C_MasterOpen: [wreg+status,2]
  6461  04F7  0024               	movlb	4	; select bank4
  6462  04F8  1A95               	btfsc	21,5	;volatile
  6463  04F9  0008               	return
  6464                           
  6465                           ;i2c_master.c: 546: {
  6466                           ;i2c_master.c: 547: SSP1STAT = 0x80;
  6467  04FA  3080               	movlw	128
  6468  04FB  0094               	movwf	20	;volatile
  6469                           
  6470                           ;i2c_master.c: 548: SSP1CON1 = 0x08;
  6471  04FC  3008               	movlw	8
  6472  04FD  0095               	movwf	21	;volatile
  6473                           
  6474                           ;i2c_master.c: 549: SSP1CON2 = 0x00;
  6475  04FE  0196               	clrf	22	;volatile
  6476                           
  6477                           ;i2c_master.c: 550: SSP1ADD = 0x09;
  6478  04FF  3009               	movlw	9
  6479  0500  0092               	movwf	18	;volatile
  6480                           
  6481                           ;i2c_master.c: 551: SSP1CON1bits.SSPEN = 1;
  6482  0501  1695               	bsf	21,5	;volatile
  6483                           
  6484                           ;i2c_master.c: 552: return 1;
  6485                           ;	Return value of _I2C_MasterOpen is never used
  6486  0502  0008               	return
  6487  0503                     __end_of_I2C_MasterOpen:	
  6488                           ;i2c_master.c: 553: }
  6489                           ;i2c_master.c: 554: return 0;
  6490                           ;	Return value of _I2C_MasterOpen is never used
  6491                           
  6492                           
  6493                           	psect	text26
  6494  05A1                     __ptext26:	
  6495 ;; *************** function _I2C_MasterWrite *****************
  6496 ;; Defined at:
  6497 ;;		line 251 in file "mcc_generated_files/i2c_master.c"
  6498 ;; Parameters:    Size  Location     Type
  6499 ;;		None
  6500 ;; Auto vars:     Size  Location     Type
  6501 ;;		None
  6502 ;; Return value:  Size  Location     Type
  6503 ;;                  1    wreg      enum E92
  6504 ;; Registers used:
  6505 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6506 ;; Tracked objects:
  6507 ;;		On entry : 0/0
  6508 ;;		On exit  : 0/0
  6509 ;;		Unchanged: 0/0
  6510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6515 ;;Total ram usage:        0 bytes
  6516 ;; Hardware stack levels used:    1
  6517 ;; Hardware stack levels required when called:    7
  6518 ;; This function calls:
  6519 ;;		_I2C_MasterOperation
  6520 ;; This function is called by:
  6521 ;;		_I2C_Write1ByteRegister
  6522 ;;		_I2C_Read1ByteRegister
  6523 ;;		_I2C_Read2ByteRegister
  6524 ;;		_I2C_Write2ByteRegister
  6525 ;;		_I2C_WriteNBytes
  6526 ;;		_I2C_ReadDataBlock
  6527 ;; This function uses a non-reentrant model
  6528 ;;
  6529                           
  6530                           
  6531                           ;psect for function _I2C_MasterWrite
  6532  05A1                     _I2C_MasterWrite:	
  6533                           
  6534                           ;i2c_master.c: 253: return I2C_MasterOperation(0);
  6535                           ;	Return value of _I2C_MasterWrite is never used
  6536                           
  6537                           ;incstack = 0
  6538                           ; Regs used in _I2C_MasterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6539  05A1  3000               	movlw	0
  6540  05A2  3183  23F4         	fcall	_I2C_MasterOperation
  6541  05A4  0008               	return
  6542  05A5                     __end_of_I2C_MasterWrite:	
  6543                           
  6544                           	psect	text27
  6545  03F4                     __ptext27:	
  6546 ;; *************** function _I2C_MasterOperation *****************
  6547 ;; Defined at:
  6548 ;;		line 224 in file "mcc_generated_files/i2c_master.c"
  6549 ;; Parameters:    Size  Location     Type
  6550 ;;  read            1    wreg     unsigned char 
  6551 ;; Auto vars:     Size  Location     Type
  6552 ;;  read            1    3[BANK0 ] unsigned char 
  6553 ;;  returnValue     1    4[BANK0 ] enum E92
  6554 ;; Return value:  Size  Location     Type
  6555 ;;                  1    wreg      enum E92
  6556 ;; Registers used:
  6557 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6558 ;; Tracked objects:
  6559 ;;		On entry : 0/0
  6560 ;;		On exit  : 0/0
  6561 ;;		Unchanged: 0/0
  6562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6564 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6565 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6566 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6567 ;;Total ram usage:        3 bytes
  6568 ;; Hardware stack levels used:    1
  6569 ;; Hardware stack levels required when called:    6
  6570 ;; This function calls:
  6571 ;;		_I2C_MasterStart
  6572 ;;		_I2C_Poller
  6573 ;; This function is called by:
  6574 ;;		_I2C_MasterWrite
  6575 ;;		_I2C_MasterRead
  6576 ;; This function uses a non-reentrant model
  6577 ;;
  6578                           
  6579                           
  6580                           ;psect for function _I2C_MasterOperation
  6581  03F4                     _I2C_MasterOperation:	
  6582                           
  6583                           ;incstack = 0
  6584                           ; Regs used in _I2C_MasterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6585                           ;I2C_MasterOperation@read stored from wreg
  6586  03F4  0020               	movlb	0	; select bank0
  6587  03F5  00DA               	movwf	I2C_MasterOperation@read
  6588                           
  6589                           ;i2c_master.c: 226: i2c_error_t returnValue = I2C_BUSY;
  6590  03F6  01DB               	clrf	I2C_MasterOperation@returnValue
  6591  03F7  0ADB               	incf	I2C_MasterOperation@returnValue,f
  6592                           
  6593                           ;i2c_master.c: 227: if(!I2C_Status.busy)
  6594  03F8  18BC               	btfsc	_I2C_Status+28,1
  6595  03F9  2C0B               	goto	i1l2467
  6596                           
  6597                           ;i2c_master.c: 228: {
  6598                           ;i2c_master.c: 229: I2C_Status.busy = 1;
  6599  03FA  14BC               	bsf	_I2C_Status+28,1
  6600                           
  6601                           ;i2c_master.c: 230: returnValue = I2C_NOERR;
  6602  03FB  01DB               	clrf	I2C_MasterOperation@returnValue
  6603                           
  6604                           ;i2c_master.c: 232: if(read)
  6605  03FC  085A               	movf	I2C_MasterOperation@read,w
  6606  03FD  1903               	btfsc	3,2
  6607  03FE  2C02               	goto	i1l2461
  6608                           
  6609                           ;i2c_master.c: 233: {
  6610                           ;i2c_master.c: 234: I2C_Status.state = I2C_SEND_ADR_READ;
  6611  03FF  01BA               	clrf	_I2C_Status+26
  6612  0400  0ABA               	incf	_I2C_Status+26,f
  6613                           
  6614                           ;i2c_master.c: 235: }
  6615  0401  2C06               	goto	i1l2463
  6616  0402                     i1l2461:	
  6617                           
  6618                           ;i2c_master.c: 236: else
  6619                           ;i2c_master.c: 237: {
  6620                           ;i2c_master.c: 238: I2C_Status.state = I2C_SEND_ADR_WRITE;
  6621  0402  3002               	movlw	2
  6622  0403  00FD               	movwf	??_I2C_MasterOperation
  6623  0404  087D               	movf	??_I2C_MasterOperation,w
  6624  0405  00BA               	movwf	_I2C_Status+26
  6625  0406                     i1l2463:	
  6626                           
  6627                           ;i2c_master.c: 239: }
  6628                           ;i2c_master.c: 240: I2C_MasterStart();
  6629  0406  3185  25E6  3183   	fcall	_I2C_MasterStart
  6630                           
  6631                           ;i2c_master.c: 241: I2C_Poller();
  6632  0409  3185  2524         	fcall	_I2C_Poller
  6633  040B                     i1l2467:	
  6634                           
  6635                           ;i2c_master.c: 242: }
  6636                           ;i2c_master.c: 243: return returnValue;
  6637  040B  0020               	movlb	0	; select bank0
  6638  040C  085B               	movf	I2C_MasterOperation@returnValue,w
  6639  040D  0008               	return
  6640  040E                     __end_of_I2C_MasterOperation:	
  6641                           
  6642                           	psect	text28
  6643  0524                     __ptext28:	
  6644 ;; *************** function _I2C_Poller *****************
  6645 ;; Defined at:
  6646 ;;		line 312 in file "mcc_generated_files/i2c_master.c"
  6647 ;; Parameters:    Size  Location     Type
  6648 ;;		None
  6649 ;; Auto vars:     Size  Location     Type
  6650 ;;		None
  6651 ;; Return value:  Size  Location     Type
  6652 ;;                  1    wreg      void 
  6653 ;; Registers used:
  6654 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6655 ;; Tracked objects:
  6656 ;;		On entry : 0/0
  6657 ;;		On exit  : 0/0
  6658 ;;		Unchanged: 0/0
  6659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6663 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6664 ;;Total ram usage:        0 bytes
  6665 ;; Hardware stack levels used:    1
  6666 ;; Hardware stack levels required when called:    5
  6667 ;; This function calls:
  6668 ;;		_I2C_MasterFsm
  6669 ;;		_I2C_MasterWaitForEvent
  6670 ;; This function is called by:
  6671 ;;		_I2C_MasterOperation
  6672 ;; This function uses a non-reentrant model
  6673 ;;
  6674                           
  6675                           
  6676                           ;psect for function _I2C_Poller
  6677  0524                     _I2C_Poller:	
  6678  0524                     i1l2433:	
  6679                           ;i2c_master.c: 314: while(I2C_Status.busy)
  6680                           
  6681                           ;incstack = 0
  6682                           ; Regs used in _I2C_Poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6683                           
  6684  0524  0020               	movlb	0	; select bank0
  6685  0525  1CBC               	btfss	_I2C_Status+28,1
  6686  0526  0008               	return
  6687                           
  6688                           ;i2c_master.c: 315: {
  6689                           ;i2c_master.c: 316: I2C_MasterWaitForEvent();
  6690  0527  3185  25A5  3185   	fcall	_I2C_MasterWaitForEvent
  6691                           
  6692                           ;i2c_master.c: 317: I2C_MasterFsm();
  6693  052A  3183  2341  3185   	fcall	_I2C_MasterFsm
  6694  052D  2D24               	goto	i1l2433
  6695  052E                     __end_of_I2C_Poller:	
  6696                           
  6697                           	psect	text29
  6698  05A5                     __ptext29:	
  6699 ;; *************** function _I2C_MasterWaitForEvent *****************
  6700 ;; Defined at:
  6701 ;;		line 650 in file "mcc_generated_files/i2c_master.c"
  6702 ;; Parameters:    Size  Location     Type
  6703 ;;		None
  6704 ;; Auto vars:     Size  Location     Type
  6705 ;;		None
  6706 ;; Return value:  Size  Location     Type
  6707 ;;                  1    wreg      void 
  6708 ;; Registers used:
  6709 ;;		None
  6710 ;; Tracked objects:
  6711 ;;		On entry : 0/0
  6712 ;;		On exit  : 0/0
  6713 ;;		Unchanged: 0/0
  6714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6719 ;;Total ram usage:        0 bytes
  6720 ;; Hardware stack levels used:    1
  6721 ;; This function calls:
  6722 ;;		Nothing
  6723 ;; This function is called by:
  6724 ;;		_I2C_Poller
  6725 ;; This function uses a non-reentrant model
  6726 ;;
  6727                           
  6728                           
  6729                           ;psect for function _I2C_MasterWaitForEvent
  6730  05A5                     _I2C_MasterWaitForEvent:	
  6731  05A5                     i1l544:	
  6732                           ;incstack = 0
  6733                           ; Regs used in _I2C_MasterWaitForEvent: []
  6734                           ;i2c_master.c: 652: while(1)
  6735                           
  6736                           
  6737                           ;i2c_master.c: 653: {
  6738                           ;i2c_master.c: 654: if(PIR1bits.SSP1IF)
  6739  05A5  0020               	movlb	0	; select bank0
  6740  05A6  1990               	btfsc	16,3	;volatile
  6741  05A7  0008               	return
  6742  05A8  2DA5               	goto	i1l544
  6743  05A9                     __end_of_I2C_MasterWaitForEvent:	
  6744                           ;i2c_master.c: 655: {
  6745                           ;i2c_master.c: 656: break;
  6746                           
  6747                           
  6748                           	psect	text30
  6749  0341                     __ptext30:	
  6750 ;; *************** function _I2C_MasterFsm *****************
  6751 ;; Defined at:
  6752 ;;		line 321 in file "mcc_generated_files/i2c_master.c"
  6753 ;; Parameters:    Size  Location     Type
  6754 ;;		None
  6755 ;; Auto vars:     Size  Location     Type
  6756 ;;		None
  6757 ;; Return value:  Size  Location     Type
  6758 ;;                  1    wreg      void 
  6759 ;; Registers used:
  6760 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6761 ;; Tracked objects:
  6762 ;;		On entry : 0/0
  6763 ;;		On exit  : 0/0
  6764 ;;		Unchanged: 0/0
  6765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6768 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6769 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6770 ;;Total ram usage:        3 bytes
  6771 ;; Hardware stack levels used:    1
  6772 ;; Hardware stack levels required when called:    4
  6773 ;; This function calls:
  6774 ;;		_I2C_DO_ADDRESS_NACK
  6775 ;;		_I2C_DO_IDLE
  6776 ;;		_I2C_DO_RCEN
  6777 ;;		_I2C_DO_RESET
  6778 ;;		_I2C_DO_RX
  6779 ;;		_I2C_DO_RX_ACK
  6780 ;;		_I2C_DO_RX_NACK_RESTART
  6781 ;;		_I2C_DO_RX_NACK_STOP
  6782 ;;		_I2C_DO_SEND_ADR_READ
  6783 ;;		_I2C_DO_SEND_ADR_WRITE
  6784 ;;		_I2C_DO_SEND_RESTART
  6785 ;;		_I2C_DO_SEND_RESTART_READ
  6786 ;;		_I2C_DO_SEND_RESTART_WRITE
  6787 ;;		_I2C_DO_SEND_STOP
  6788 ;;		_I2C_DO_TX
  6789 ;;		_I2C_DO_TX_EMPTY
  6790 ;;		_I2C_MasterClearIrq
  6791 ;;		_I2C_MasterIsNack
  6792 ;; This function is called by:
  6793 ;;		_I2C_Poller
  6794 ;; This function uses a non-reentrant model
  6795 ;;
  6796                           
  6797                           
  6798                           ;psect for function _I2C_MasterFsm
  6799  0341                     _I2C_MasterFsm:	
  6800                           
  6801                           ;i2c_master.c: 323: I2C_MasterClearIrq();
  6802                           
  6803                           ;incstack = 0
  6804                           ; Regs used in _I2C_MasterFsm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6805  0341  3185  25EF  3183   	fcall	_I2C_MasterClearIrq
  6806                           
  6807                           ;i2c_master.c: 325: if(I2C_Status.addressNackCheck && I2C_MasterIsNack())
  6808  0344  0020               	movlb	0	; select bank0
  6809  0345  1C3C               	btfss	_I2C_Status+28,0
  6810  0346  2B52               	goto	i1l2423
  6811  0347  3185  2588  3183   	fcall	_I2C_MasterIsNack
  6812  034A  3A00               	xorlw	0
  6813  034B  1903               	skipnz
  6814  034C  2B52               	goto	i1l2423
  6815                           
  6816                           ;i2c_master.c: 326: {
  6817                           ;i2c_master.c: 327: I2C_Status.state = I2C_ADDRESS_NACK;
  6818  034D  300F               	movlw	15
  6819  034E  0020               	movlb	0	; select bank0
  6820  034F  00D7               	movwf	??_I2C_MasterFsm
  6821  0350  0857               	movf	??_I2C_MasterFsm,w
  6822  0351  00BA               	movwf	_I2C_Status+26
  6823  0352                     i1l2423:	
  6824                           
  6825                           ;i2c_master.c: 328: }
  6826                           ;i2c_master.c: 329: I2C_Status.state = fsmStateTable[I2C_Status.state]();
  6827  0352  0020               	movlb	0	; select bank0
  6828  0353  083A               	movf	_I2C_Status+26,w
  6829  0354  00D7               	movwf	??_I2C_MasterFsm
  6830  0355  01D8               	clrf	??_I2C_MasterFsm+1
  6831  0356  35D7               	lslf	??_I2C_MasterFsm,f
  6832  0357  0DD8               	rlf	??_I2C_MasterFsm+1,f
  6833  0358  30D4               	movlw	low (_fsmStateTable| (0+32768))
  6834  0359  0757               	addwf	??_I2C_MasterFsm,w
  6835  035A  0084               	movwf	4
  6836  035B  3083               	movlw	high (_fsmStateTable| (0+32768))
  6837  035C  3D58               	addwfc	??_I2C_MasterFsm+1,w
  6838  035D  0085               	movwf	5
  6839  035E  3F01               	moviw [1]fsr0
  6840  035F  008A               	movwf	10
  6841  0360  3F00               	moviw [0]fsr0
  6842  0361  000A               	callw
  6843  0362  3183               	pagesel	$
  6844  0363  0020               	movlb	0	; select bank0
  6845  0364  00D9               	movwf	??_I2C_MasterFsm+2
  6846  0365  0859               	movf	??_I2C_MasterFsm+2,w
  6847  0366  00BA               	movwf	_I2C_Status+26
  6848  0367  0008               	return
  6849  0368                     __end_of_I2C_MasterFsm:	
  6850                           
  6851                           	psect	text31
  6852  03B1                     __ptext31:	
  6853 ;; *************** function _I2C_DO_ADDRESS_NACK *****************
  6854 ;; Defined at:
  6855 ;;		line 500 in file "mcc_generated_files/i2c_master.c"
  6856 ;; Parameters:    Size  Location     Type
  6857 ;;		None
  6858 ;; Auto vars:     Size  Location     Type
  6859 ;;		None
  6860 ;; Return value:  Size  Location     Type
  6861 ;;                  1    wreg      enum E12103
  6862 ;; Registers used:
  6863 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6864 ;; Tracked objects:
  6865 ;;		On entry : 0/0
  6866 ;;		On exit  : 0/0
  6867 ;;		Unchanged: 0/0
  6868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6871 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6872 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6873 ;;Total ram usage:        1 bytes
  6874 ;; Hardware stack levels used:    1
  6875 ;; Hardware stack levels required when called:    3
  6876 ;; This function calls:
  6877 ;;		Absolute function
  6878 ;;		_I2C_CallbackReturnReset
  6879 ;;		_I2C_CallbackReturnStop
  6880 ;;		_I2C_DO_SEND_RESTART
  6881 ;;		_I2C_DO_SEND_STOP
  6882 ;;		_rd1RegCompleteHandler
  6883 ;;		_rd2RegCompleteHandler
  6884 ;;		_rdBlkRegCompleteHandler
  6885 ;;		_wr1RegCompleteHandler
  6886 ;;		_wr2RegCompleteHandler
  6887 ;; This function is called by:
  6888 ;;		_I2C_MasterFsm
  6889 ;; This function uses a non-reentrant model
  6890 ;;
  6891                           
  6892                           
  6893                           ;psect for function _I2C_DO_ADDRESS_NACK
  6894  03B1                     _I2C_DO_ADDRESS_NACK:	
  6895                           
  6896                           ;i2c_master.c: 502: I2C_Status.addressNackCheck = 0;
  6897                           
  6898                           ;incstack = 0
  6899                           ; Regs used in _I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6900  03B1  0020               	movlb	0	; select bank0
  6901  03B2  103C               	bcf	_I2C_Status+28,0
  6902                           
  6903                           ;i2c_master.c: 503: I2C_Status.error = I2C_FAIL;
  6904  03B3  3002               	movlw	2
  6905  03B4  00FA               	movwf	??_I2C_DO_ADDRESS_NACK
  6906  03B5  087A               	movf	??_I2C_DO_ADDRESS_NACK,w
  6907  03B6  00BB               	movwf	_I2C_Status+27
  6908                           
  6909                           ;i2c_master.c: 504: switch(I2C_Status.callbackTable[I2C_ADDR_NACK](I2C_Status.callbackPa
      +                          yload[I2C_ADDR_NACK]))
  6910  03B7  2BBE               	goto	i1l2411
  6911  03B8                     i1l2401:	
  6912                           ;i2c_master.c: 505: {
  6913                           ;i2c_master.c: 506: case I2C_RESTART_READ:
  6914                           
  6915                           
  6916                           ;i2c_master.c: 507: case I2C_RESTART_WRITE:
  6917                           ;i2c_master.c: 508: return I2C_DO_SEND_RESTART();
  6918  03B8  3185  25B9         	fcall	_I2C_DO_SEND_RESTART
  6919  03BA  0008               	return
  6920  03BB                     i1l2405:	
  6921                           ;i2c_master.c: 509: default:
  6922                           
  6923                           
  6924                           ;i2c_master.c: 510: return I2C_DO_SEND_STOP();
  6925  03BB  3185  25B5         	fcall	_I2C_DO_SEND_STOP
  6926                           
  6927                           ;i2c_master.c: 511: }
  6928  03BD  0008               	return
  6929  03BE                     i1l2411:	
  6930  03BE  0020               	movlb	0	; select bank0
  6931  03BF  082E               	movf	low ((_I2C_Status| 0+14)),w
  6932  03C0  00FA               	movwf	??_I2C_DO_ADDRESS_NACK
  6933  03C1  087A               	movf	??_I2C_DO_ADDRESS_NACK,w
  6934  03C2  00F9               	movwf	I2C_CallbackReturnReset@funPtr
  6935  03C3  3004               	movlw	4
  6936  03C4  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
  6937  03C5  0086               	movwf	6
  6938  03C6  0187               	clrf	7
  6939  03C7  3F41               	moviw [1]fsr1
  6940  03C8  008A               	movwf	10
  6941  03C9  3F40               	moviw [0]fsr1
  6942  03CA  000A               	callw
  6943  03CB  3183               	pagesel	$
  6944                           
  6945                           ; Switch size 1, requested type "space"
  6946                           ; Number of cases is 2, Range of values is 2 to 3
  6947                           ; switch strategies available:
  6948                           ; Name         Instructions Cycles
  6949                           ; simple_byte            7     4 (average)
  6950                           ; direct_byte           13     9 (fixed)
  6951                           ; jumptable            263     9 (fixed)
  6952                           ;	Chosen strategy is simple_byte
  6953  03CC  3A02               	xorlw	2	; case 2
  6954  03CD  1903               	skipnz
  6955  03CE  2BB8               	goto	i1l2401
  6956  03CF  3A01               	xorlw	1	; case 3
  6957  03D0  1903               	skipnz
  6958  03D1  2BB8               	goto	i1l2401
  6959  03D2  2BBB               	goto	i1l2405
  6960  03D3  0008               	return
  6961  03D4                     __end_of_I2C_DO_ADDRESS_NACK:	
  6962                           
  6963                           	psect	text32
  6964  058E                     __ptext32:	
  6965 ;; *************** function _I2C_DO_RESET *****************
  6966 ;; Defined at:
  6967 ;;		line 494 in file "mcc_generated_files/i2c_master.c"
  6968 ;; Parameters:    Size  Location     Type
  6969 ;;		None
  6970 ;; Auto vars:     Size  Location     Type
  6971 ;;		None
  6972 ;; Return value:  Size  Location     Type
  6973 ;;                  1    wreg      enum E12103
  6974 ;; Registers used:
  6975 ;;		wreg, status,2
  6976 ;; Tracked objects:
  6977 ;;		On entry : 0/0
  6978 ;;		On exit  : 0/0
  6979 ;;		Unchanged: 0/0
  6980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6984 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6985 ;;Total ram usage:        0 bytes
  6986 ;; Hardware stack levels used:    1
  6987 ;; This function calls:
  6988 ;;		Nothing
  6989 ;; This function is called by:
  6990 ;;		_I2C_MasterFsm
  6991 ;; This function uses a non-reentrant model
  6992 ;;
  6993                           
  6994                           
  6995                           ;psect for function _I2C_DO_RESET
  6996  058E                     _I2C_DO_RESET:	
  6997                           
  6998                           ;i2c_master.c: 496: I2C_Status.busy = 0;
  6999                           
  7000                           ;incstack = 0
  7001                           ; Regs used in _I2C_DO_RESET: [wreg+status,2]
  7002  058E  0020               	movlb	0	; select bank0
  7003  058F  10BC               	bcf	_I2C_Status+28,1
  7004                           
  7005                           ;i2c_master.c: 497: I2C_Status.error = I2C_NOERR;
  7006  0590  01BB               	clrf	_I2C_Status+27
  7007                           
  7008                           ;i2c_master.c: 498: return I2C_RESET;
  7009  0591  300E               	movlw	14
  7010  0592  0008               	return
  7011  0593                     __end_of_I2C_DO_RESET:	
  7012                           
  7013                           	psect	text33
  7014  05A9                     __ptext33:	
  7015 ;; *************** function _I2C_DO_RX_NACK_RESTART *****************
  7016 ;; Defined at:
  7017 ;;		line 488 in file "mcc_generated_files/i2c_master.c"
  7018 ;; Parameters:    Size  Location     Type
  7019 ;;		None
  7020 ;; Auto vars:     Size  Location     Type
  7021 ;;		None
  7022 ;; Return value:  Size  Location     Type
  7023 ;;                  1    wreg      enum E12103
  7024 ;; Registers used:
  7025 ;;		wreg, status,2, status,0, pclath, cstack
  7026 ;; Tracked objects:
  7027 ;;		On entry : 0/0
  7028 ;;		On exit  : 0/0
  7029 ;;		Unchanged: 0/0
  7030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7035 ;;Total ram usage:        0 bytes
  7036 ;; Hardware stack levels used:    1
  7037 ;; Hardware stack levels required when called:    1
  7038 ;; This function calls:
  7039 ;;		_I2C_MasterSendNack
  7040 ;; This function is called by:
  7041 ;;		_I2C_DO_RX
  7042 ;;		_I2C_MasterFsm
  7043 ;; This function uses a non-reentrant model
  7044 ;;
  7045                           
  7046                           
  7047                           ;psect for function _I2C_DO_RX_NACK_RESTART
  7048  05A9                     _I2C_DO_RX_NACK_RESTART:	
  7049                           
  7050                           ;i2c_master.c: 490: I2C_MasterSendNack();
  7051                           
  7052                           ;incstack = 0
  7053                           ; Regs used in _I2C_DO_RX_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  7054  05A9  3185  25C9         	fcall	_I2C_MasterSendNack
  7055                           
  7056                           ;i2c_master.c: 491: return I2C_SEND_RESTART;
  7057  05AB  3009               	movlw	9
  7058  05AC  0008               	return
  7059  05AD                     __end_of_I2C_DO_RX_NACK_RESTART:	
  7060                           
  7061                           	psect	text34
  7062  05AD                     __ptext34:	
  7063 ;; *************** function _I2C_DO_RX_NACK_STOP *****************
  7064 ;; Defined at:
  7065 ;;		line 482 in file "mcc_generated_files/i2c_master.c"
  7066 ;; Parameters:    Size  Location     Type
  7067 ;;		None
  7068 ;; Auto vars:     Size  Location     Type
  7069 ;;		None
  7070 ;; Return value:  Size  Location     Type
  7071 ;;                  1    wreg      enum E12103
  7072 ;; Registers used:
  7073 ;;		wreg, status,2, status,0, pclath, cstack
  7074 ;; Tracked objects:
  7075 ;;		On entry : 0/0
  7076 ;;		On exit  : 0/0
  7077 ;;		Unchanged: 0/0
  7078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7083 ;;Total ram usage:        0 bytes
  7084 ;; Hardware stack levels used:    1
  7085 ;; Hardware stack levels required when called:    1
  7086 ;; This function calls:
  7087 ;;		_I2C_MasterSendNack
  7088 ;; This function is called by:
  7089 ;;		_I2C_DO_RX
  7090 ;;		_I2C_MasterFsm
  7091 ;; This function uses a non-reentrant model
  7092 ;;
  7093                           
  7094                           
  7095                           ;psect for function _I2C_DO_RX_NACK_STOP
  7096  05AD                     _I2C_DO_RX_NACK_STOP:	
  7097                           
  7098                           ;i2c_master.c: 484: I2C_MasterSendNack();
  7099                           
  7100                           ;incstack = 0
  7101                           ; Regs used in _I2C_DO_RX_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  7102  05AD  3185  25C9         	fcall	_I2C_MasterSendNack
  7103                           
  7104                           ;i2c_master.c: 485: return I2C_SEND_STOP;
  7105  05AF  300A               	movlw	10
  7106  05B0  0008               	return
  7107  05B1                     __end_of_I2C_DO_RX_NACK_STOP:	
  7108                           
  7109                           	psect	text35
  7110  05B1                     __ptext35:	
  7111 ;; *************** function _I2C_DO_RX_ACK *****************
  7112 ;; Defined at:
  7113 ;;		line 475 in file "mcc_generated_files/i2c_master.c"
  7114 ;; Parameters:    Size  Location     Type
  7115 ;;		None
  7116 ;; Auto vars:     Size  Location     Type
  7117 ;;		None
  7118 ;; Return value:  Size  Location     Type
  7119 ;;                  1    wreg      enum E12103
  7120 ;; Registers used:
  7121 ;;		wreg, status,2, status,0, pclath, cstack
  7122 ;; Tracked objects:
  7123 ;;		On entry : 0/0
  7124 ;;		On exit  : 0/0
  7125 ;;		Unchanged: 0/0
  7126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7131 ;;Total ram usage:        0 bytes
  7132 ;; Hardware stack levels used:    1
  7133 ;; Hardware stack levels required when called:    1
  7134 ;; This function calls:
  7135 ;;		_I2C_MasterSendAck
  7136 ;; This function is called by:
  7137 ;;		_I2C_MasterFsm
  7138 ;; This function uses a non-reentrant model
  7139 ;;
  7140                           
  7141                           
  7142                           ;psect for function _I2C_DO_RX_ACK
  7143  05B1                     _I2C_DO_RX_ACK:	
  7144                           
  7145                           ;i2c_master.c: 477: I2C_MasterSendAck();
  7146                           
  7147                           ;incstack = 0
  7148                           ; Regs used in _I2C_DO_RX_ACK: [wreg+status,2+status,0+pclath+cstack]
  7149  05B1  3185  25C5         	fcall	_I2C_MasterSendAck
  7150                           
  7151                           ;i2c_master.c: 478: return I2C_RCEN;
  7152  05B3  3005               	movlw	5
  7153  05B4  0008               	return
  7154  05B5                     __end_of_I2C_DO_RX_ACK:	
  7155                           
  7156                           	psect	text36
  7157  05B5                     __ptext36:	
  7158 ;; *************** function _I2C_DO_SEND_STOP *****************
  7159 ;; Defined at:
  7160 ;;		line 469 in file "mcc_generated_files/i2c_master.c"
  7161 ;; Parameters:    Size  Location     Type
  7162 ;;		None
  7163 ;; Auto vars:     Size  Location     Type
  7164 ;;		None
  7165 ;; Return value:  Size  Location     Type
  7166 ;;                  1    wreg      enum E12103
  7167 ;; Registers used:
  7168 ;;		wreg, status,2, status,0, pclath, cstack
  7169 ;; Tracked objects:
  7170 ;;		On entry : 0/0
  7171 ;;		On exit  : 0/0
  7172 ;;		Unchanged: 0/0
  7173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7178 ;;Total ram usage:        0 bytes
  7179 ;; Hardware stack levels used:    1
  7180 ;; Hardware stack levels required when called:    1
  7181 ;; This function calls:
  7182 ;;		_I2C_MasterStop
  7183 ;; This function is called by:
  7184 ;;		_I2C_DO_TX
  7185 ;;		_I2C_DO_TX_EMPTY
  7186 ;;		_I2C_DO_ADDRESS_NACK
  7187 ;;		_I2C_MasterFsm
  7188 ;; This function uses a non-reentrant model
  7189 ;;
  7190                           
  7191                           
  7192                           ;psect for function _I2C_DO_SEND_STOP
  7193  05B5                     _I2C_DO_SEND_STOP:	
  7194                           
  7195                           ;i2c_master.c: 471: I2C_MasterStop();
  7196                           
  7197                           ;incstack = 0
  7198                           ; Regs used in _I2C_DO_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
  7199  05B5  3185  25E0         	fcall	_I2C_MasterStop
  7200                           
  7201                           ;i2c_master.c: 472: return I2C_IDLE;
  7202  05B7  3000               	movlw	0
  7203  05B8  0008               	return
  7204  05B9                     __end_of_I2C_DO_SEND_STOP:	
  7205                           
  7206                           	psect	text37
  7207  05B9                     __ptext37:	
  7208 ;; *************** function _I2C_DO_SEND_RESTART *****************
  7209 ;; Defined at:
  7210 ;;		line 463 in file "mcc_generated_files/i2c_master.c"
  7211 ;; Parameters:    Size  Location     Type
  7212 ;;		None
  7213 ;; Auto vars:     Size  Location     Type
  7214 ;;		None
  7215 ;; Return value:  Size  Location     Type
  7216 ;;                  1    wreg      enum E12103
  7217 ;; Registers used:
  7218 ;;		wreg, status,2, status,0, pclath, cstack
  7219 ;; Tracked objects:
  7220 ;;		On entry : 0/0
  7221 ;;		On exit  : 0/0
  7222 ;;		Unchanged: 0/0
  7223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7228 ;;Total ram usage:        0 bytes
  7229 ;; Hardware stack levels used:    1
  7230 ;; Hardware stack levels required when called:    1
  7231 ;; This function calls:
  7232 ;;		_I2C_MasterEnableRestart
  7233 ;; This function is called by:
  7234 ;;		_I2C_DO_TX_EMPTY
  7235 ;;		_I2C_DO_ADDRESS_NACK
  7236 ;;		_I2C_MasterFsm
  7237 ;; This function uses a non-reentrant model
  7238 ;;
  7239                           
  7240                           
  7241                           ;psect for function _I2C_DO_SEND_RESTART
  7242  05B9                     _I2C_DO_SEND_RESTART:	
  7243                           
  7244                           ;i2c_master.c: 465: I2C_MasterEnableRestart();
  7245                           
  7246                           ;incstack = 0
  7247                           ; Regs used in _I2C_DO_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
  7248  05B9  3185  25E3         	fcall	_I2C_MasterEnableRestart
  7249                           
  7250                           ;i2c_master.c: 466: return I2C_SEND_ADR_READ;
  7251  05BB  3001               	movlw	1
  7252  05BC  0008               	return
  7253  05BD                     __end_of_I2C_DO_SEND_RESTART:	
  7254                           
  7255                           	psect	text38
  7256  05BD                     __ptext38:	
  7257 ;; *************** function _I2C_DO_SEND_RESTART_WRITE *****************
  7258 ;; Defined at:
  7259 ;;		line 456 in file "mcc_generated_files/i2c_master.c"
  7260 ;; Parameters:    Size  Location     Type
  7261 ;;		None
  7262 ;; Auto vars:     Size  Location     Type
  7263 ;;		None
  7264 ;; Return value:  Size  Location     Type
  7265 ;;                  1    wreg      enum E12103
  7266 ;; Registers used:
  7267 ;;		wreg, status,2, status,0, pclath, cstack
  7268 ;; Tracked objects:
  7269 ;;		On entry : 0/0
  7270 ;;		On exit  : 0/0
  7271 ;;		Unchanged: 0/0
  7272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7276 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7277 ;;Total ram usage:        0 bytes
  7278 ;; Hardware stack levels used:    1
  7279 ;; Hardware stack levels required when called:    1
  7280 ;; This function calls:
  7281 ;;		_I2C_MasterEnableRestart
  7282 ;; This function is called by:
  7283 ;;		_I2C_DO_TX
  7284 ;;		_I2C_MasterFsm
  7285 ;; This function uses a non-reentrant model
  7286 ;;
  7287                           
  7288                           
  7289                           ;psect for function _I2C_DO_SEND_RESTART_WRITE
  7290  05BD                     _I2C_DO_SEND_RESTART_WRITE:	
  7291                           
  7292                           ;i2c_master.c: 458: I2C_MasterEnableRestart();
  7293                           
  7294                           ;incstack = 0
  7295                           ; Regs used in _I2C_DO_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
  7296  05BD  3185  25E3         	fcall	_I2C_MasterEnableRestart
  7297                           
  7298                           ;i2c_master.c: 459: return I2C_SEND_ADR_WRITE;
  7299  05BF  3002               	movlw	2
  7300  05C0  0008               	return
  7301  05C1                     __end_of_I2C_DO_SEND_RESTART_WRITE:	
  7302                           
  7303                           	psect	text39
  7304  05C1                     __ptext39:	
  7305 ;; *************** function _I2C_DO_SEND_RESTART_READ *****************
  7306 ;; Defined at:
  7307 ;;		line 450 in file "mcc_generated_files/i2c_master.c"
  7308 ;; Parameters:    Size  Location     Type
  7309 ;;		None
  7310 ;; Auto vars:     Size  Location     Type
  7311 ;;		None
  7312 ;; Return value:  Size  Location     Type
  7313 ;;                  1    wreg      enum E12103
  7314 ;; Registers used:
  7315 ;;		wreg, status,2, status,0, pclath, cstack
  7316 ;; Tracked objects:
  7317 ;;		On entry : 0/0
  7318 ;;		On exit  : 0/0
  7319 ;;		Unchanged: 0/0
  7320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7324 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7325 ;;Total ram usage:        0 bytes
  7326 ;; Hardware stack levels used:    1
  7327 ;; Hardware stack levels required when called:    1
  7328 ;; This function calls:
  7329 ;;		_I2C_MasterEnableRestart
  7330 ;; This function is called by:
  7331 ;;		_I2C_DO_TX
  7332 ;;		_I2C_MasterFsm
  7333 ;; This function uses a non-reentrant model
  7334 ;;
  7335                           
  7336                           
  7337                           ;psect for function _I2C_DO_SEND_RESTART_READ
  7338  05C1                     _I2C_DO_SEND_RESTART_READ:	
  7339                           
  7340                           ;i2c_master.c: 452: I2C_MasterEnableRestart();
  7341                           
  7342                           ;incstack = 0
  7343                           ; Regs used in _I2C_DO_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
  7344  05C1  3185  25E3         	fcall	_I2C_MasterEnableRestart
  7345                           
  7346                           ;i2c_master.c: 453: return I2C_SEND_ADR_READ;
  7347  05C3  3001               	movlw	1
  7348  05C4  0008               	return
  7349  05C5                     __end_of_I2C_DO_SEND_RESTART_READ:	
  7350                           
  7351                           	psect	text40
  7352  0582                     __ptext40:	
  7353 ;; *************** function _I2C_DO_RCEN *****************
  7354 ;; Defined at:
  7355 ;;		line 402 in file "mcc_generated_files/i2c_master.c"
  7356 ;; Parameters:    Size  Location     Type
  7357 ;;		None
  7358 ;; Auto vars:     Size  Location     Type
  7359 ;;		None
  7360 ;; Return value:  Size  Location     Type
  7361 ;;                  1    wreg      enum E12103
  7362 ;; Registers used:
  7363 ;;		wreg, status,2, status,0, pclath, cstack
  7364 ;; Tracked objects:
  7365 ;;		On entry : 0/0
  7366 ;;		On exit  : 0/0
  7367 ;;		Unchanged: 0/0
  7368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7373 ;;Total ram usage:        0 bytes
  7374 ;; Hardware stack levels used:    1
  7375 ;; Hardware stack levels required when called:    1
  7376 ;; This function calls:
  7377 ;;		_I2C_MasterStartRx
  7378 ;; This function is called by:
  7379 ;;		_I2C_MasterFsm
  7380 ;; This function uses a non-reentrant model
  7381 ;;
  7382                           
  7383                           
  7384                           ;psect for function _I2C_DO_RCEN
  7385  0582                     _I2C_DO_RCEN:	
  7386                           
  7387                           ;i2c_master.c: 404: I2C_Status.addressNackCheck = 0;
  7388                           
  7389                           ;incstack = 0
  7390                           ; Regs used in _I2C_DO_RCEN: [wreg+status,2+status,0+pclath+cstack]
  7391  0582  0020               	movlb	0	; select bank0
  7392  0583  103C               	bcf	_I2C_Status+28,0
  7393                           
  7394                           ;i2c_master.c: 405: I2C_MasterStartRx();
  7395  0584  3185  25DD         	fcall	_I2C_MasterStartRx
  7396                           
  7397                           ;i2c_master.c: 406: return I2C_RX;
  7398  0586  3004               	movlw	4
  7399  0587  0008               	return
  7400  0588                     __end_of_I2C_DO_RCEN:	
  7401                           
  7402                           	psect	text41
  7403  0239                     __ptext41:	
  7404 ;; *************** function _I2C_DO_RX *****************
  7405 ;; Defined at:
  7406 ;;		line 378 in file "mcc_generated_files/i2c_master.c"
  7407 ;; Parameters:    Size  Location     Type
  7408 ;;		None
  7409 ;; Auto vars:     Size  Location     Type
  7410 ;;		None
  7411 ;; Return value:  Size  Location     Type
  7412 ;;                  1    wreg      enum E12103
  7413 ;; Registers used:
  7414 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7415 ;; Tracked objects:
  7416 ;;		On entry : 0/0
  7417 ;;		On exit  : 0/0
  7418 ;;		Unchanged: 0/0
  7419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7422 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7423 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7424 ;;Total ram usage:        1 bytes
  7425 ;; Hardware stack levels used:    1
  7426 ;; Hardware stack levels required when called:    3
  7427 ;; This function calls:
  7428 ;;		Absolute function
  7429 ;;		_I2C_CallbackReturnReset
  7430 ;;		_I2C_CallbackReturnStop
  7431 ;;		_I2C_DO_RX_NACK_RESTART
  7432 ;;		_I2C_DO_RX_NACK_STOP
  7433 ;;		_I2C_MasterGetRxData
  7434 ;;		_I2C_MasterSendAck
  7435 ;;		_rd1RegCompleteHandler
  7436 ;;		_rd2RegCompleteHandler
  7437 ;;		_rdBlkRegCompleteHandler
  7438 ;;		_wr1RegCompleteHandler
  7439 ;;		_wr2RegCompleteHandler
  7440 ;; This function is called by:
  7441 ;;		_I2C_MasterFsm
  7442 ;; This function uses a non-reentrant model
  7443 ;;
  7444                           
  7445                           
  7446                           ;psect for function _I2C_DO_RX
  7447  0239                     _I2C_DO_RX:	
  7448                           
  7449                           ;i2c_master.c: 380: *I2C_Status.data_ptr++ = I2C_MasterGetRxData();
  7450                           
  7451                           ;incstack = 0
  7452                           ; Regs used in _I2C_DO_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7453  0239  3185  25DA  3182   	fcall	_I2C_MasterGetRxData
  7454  023C  00FA               	movwf	??_I2C_DO_RX
  7455  023D  0020               	movlb	0	; select bank0
  7456  023E  0837               	movf	low ((_I2C_Status| 0+23)),w
  7457  023F  0086               	movwf	6
  7458  0240  0187               	clrf	7
  7459  0241  087A               	movf	??_I2C_DO_RX,w
  7460  0242  0081               	movwf	1
  7461  0243  3001               	movlw	1
  7462  0244  00FA               	movwf	??_I2C_DO_RX
  7463  0245  087A               	movf	??_I2C_DO_RX,w
  7464  0246  07B7               	addwf	low ((_I2C_Status| 0+23)),f
  7465                           
  7466                           ;i2c_master.c: 381: if(--I2C_Status.data_length)
  7467  0247  3001               	movlw	1
  7468  0248  02B8               	subwf	_I2C_Status+24,f
  7469  0249  3000               	movlw	0
  7470  024A  3BB9               	subwfb	_I2C_Status+25,f
  7471  024B  0838               	movf	_I2C_Status+24,w
  7472  024C  0439               	iorwf	_I2C_Status+25,w
  7473  024D  1903               	btfsc	3,2
  7474  024E  2A53               	goto	i1l403
  7475                           
  7476                           ;i2c_master.c: 382: {
  7477                           ;i2c_master.c: 383: I2C_MasterSendAck();
  7478  024F  3185  25C5         	fcall	_I2C_MasterSendAck
  7479                           
  7480                           ;i2c_master.c: 384: return I2C_RCEN;
  7481  0251  3005               	movlw	5
  7482                           
  7483                           ;i2c_master.c: 385: }
  7484  0252  0008               	return
  7485  0253                     i1l403:	
  7486                           
  7487                           ;i2c_master.c: 386: else
  7488                           ;i2c_master.c: 387: {
  7489                           ;i2c_master.c: 388: I2C_Status.bufferFree = 1;
  7490  0253  15BC               	bsf	_I2C_Status+28,3
  7491                           
  7492                           ;i2c_master.c: 389: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
  7493  0254  2A5B               	goto	i1l2353
  7494  0255                     i1l2343:	
  7495                           ;i2c_master.c: 390: {
  7496                           ;i2c_master.c: 391: case I2C_RESTART_WRITE:
  7497                           
  7498                           
  7499                           ;i2c_master.c: 392: case I2C_RESTART_READ:
  7500                           ;i2c_master.c: 393: return I2C_DO_RX_NACK_RESTART();
  7501  0255  3185  25A9         	fcall	_I2C_DO_RX_NACK_RESTART
  7502  0257  0008               	return
  7503  0258                     i1l2347:	
  7504                           ;i2c_master.c: 395: case I2C_CONTINUE:
  7505                           
  7506                           ;i2c_master.c: 394: default:
  7507                           
  7508                           
  7509                           ;i2c_master.c: 396: case I2C_STOP:
  7510                           ;i2c_master.c: 397: return I2C_DO_RX_NACK_STOP();
  7511  0258  3185  25AD         	fcall	_I2C_DO_RX_NACK_STOP
  7512                           
  7513                           ;i2c_master.c: 398: }
  7514  025A  0008               	return
  7515  025B                     i1l2353:	
  7516  025B  0020               	movlb	0	; select bank0
  7517  025C  082C               	movf	low ((_I2C_Status| 0+12)),w
  7518  025D  00FA               	movwf	??_I2C_DO_RX
  7519  025E  087A               	movf	??_I2C_DO_RX,w
  7520  025F  00F9               	movwf	I2C_CallbackReturnReset@funPtr
  7521  0260  0821               	movf	_I2C_Status+1,w
  7522  0261  008A               	movwf	10
  7523  0262  0820               	movf	_I2C_Status,w
  7524  0263  000A               	callw
  7525  0264  3182               	pagesel	$
  7526                           
  7527                           ; Switch size 1, requested type "space"
  7528                           ; Number of cases is 4, Range of values is 1 to 4
  7529                           ; switch strategies available:
  7530                           ; Name         Instructions Cycles
  7531                           ; simple_byte           13     7 (average)
  7532                           ; direct_byte           17     9 (fixed)
  7533                           ; jumptable            263     9 (fixed)
  7534                           ;	Chosen strategy is simple_byte
  7535  0265  3A01               	xorlw	1	; case 1
  7536  0266  1903               	skipnz
  7537  0267  2A58               	goto	i1l2347
  7538  0268  3A03               	xorlw	3	; case 2
  7539  0269  1903               	skipnz
  7540  026A  2A55               	goto	i1l2343
  7541  026B  3A01               	xorlw	1	; case 3
  7542  026C  1903               	skipnz
  7543  026D  2A55               	goto	i1l2343
  7544  026E  3A07               	xorlw	7	; case 4
  7545  026F  1903               	skipnz
  7546  0270  2A58               	goto	i1l2347
  7547  0271  2A58               	goto	i1l2347
  7548  0272  0008               	return
  7549  0273                     __end_of_I2C_DO_RX:	
  7550                           
  7551                           	psect	text42
  7552  01B3                     __ptext42:	
  7553 ;; *************** function _I2C_DO_TX *****************
  7554 ;; Defined at:
  7555 ;;		line 354 in file "mcc_generated_files/i2c_master.c"
  7556 ;; Parameters:    Size  Location     Type
  7557 ;;		None
  7558 ;; Auto vars:     Size  Location     Type
  7559 ;;		None
  7560 ;; Return value:  Size  Location     Type
  7561 ;;                  1    wreg      enum E12103
  7562 ;; Registers used:
  7563 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7564 ;; Tracked objects:
  7565 ;;		On entry : 0/0
  7566 ;;		On exit  : 0/0
  7567 ;;		Unchanged: 0/0
  7568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7570 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7571 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7572 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7573 ;;Total ram usage:        3 bytes
  7574 ;; Hardware stack levels used:    1
  7575 ;; Hardware stack levels required when called:    3
  7576 ;; This function calls:
  7577 ;;		Absolute function
  7578 ;;		_I2C_CallbackReturnReset
  7579 ;;		_I2C_CallbackReturnStop
  7580 ;;		_I2C_DO_SEND_RESTART_READ
  7581 ;;		_I2C_DO_SEND_RESTART_WRITE
  7582 ;;		_I2C_DO_SEND_STOP
  7583 ;;		_I2C_MasterIsNack
  7584 ;;		_I2C_MasterSendTxData
  7585 ;;		_rd1RegCompleteHandler
  7586 ;;		_rd2RegCompleteHandler
  7587 ;;		_rdBlkRegCompleteHandler
  7588 ;;		_wr1RegCompleteHandler
  7589 ;;		_wr2RegCompleteHandler
  7590 ;; This function is called by:
  7591 ;;		_I2C_MasterFsm
  7592 ;; This function uses a non-reentrant model
  7593 ;;
  7594                           
  7595                           
  7596                           ;psect for function _I2C_DO_TX
  7597  01B3                     _I2C_DO_TX:	
  7598                           
  7599                           ;i2c_master.c: 356: if(I2C_MasterIsNack())
  7600                           
  7601                           ;incstack = 0
  7602                           ; Regs used in _I2C_DO_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7603  01B3  3185  2588  3181   	fcall	_I2C_MasterIsNack
  7604  01B6  3A00               	xorlw	0
  7605  01B7  1D03               	btfss	3,2
  7606  01B8  29C3               	goto	i1l2317
  7607  01B9  29DF               	goto	i1l387
  7608  01BA                     i1l2303:	
  7609                           ;i2c_master.c: 359: {
  7610                           ;i2c_master.c: 360: case I2C_RESTART_READ:
  7611                           
  7612                           ;i2c_master.c: 357: {
  7613                           ;i2c_master.c: 358: switch(I2C_Status.callbackTable[I2C_DATA_NACK](I2C_Status.callbackPa
      +                          yload[I2C_DATA_NACK]))
  7614                           
  7615                           
  7616                           ;i2c_master.c: 361: return I2C_DO_SEND_RESTART_READ();
  7617  01BA  3185  25C1         	fcall	_I2C_DO_SEND_RESTART_READ
  7618  01BC  0008               	return
  7619  01BD                     i1l2307:	
  7620                           ;i2c_master.c: 362: case I2C_RESTART_WRITE:
  7621                           
  7622                           
  7623                           ;i2c_master.c: 363: return I2C_DO_SEND_RESTART_WRITE();
  7624  01BD  3185  25BD         	fcall	_I2C_DO_SEND_RESTART_WRITE
  7625  01BF  0008               	return
  7626  01C0                     i1l2311:	
  7627                           ;i2c_master.c: 365: case I2C_CONTINUE:
  7628                           
  7629                           ;i2c_master.c: 364: default:
  7630                           
  7631                           
  7632                           ;i2c_master.c: 366: case I2C_STOP:
  7633                           ;i2c_master.c: 367: return I2C_DO_SEND_STOP();
  7634  01C0  3185  25B5         	fcall	_I2C_DO_SEND_STOP
  7635                           
  7636                           ;i2c_master.c: 368: }
  7637  01C2  0008               	return
  7638  01C3                     i1l2317:	
  7639  01C3  0020               	movlb	0	; select bank0
  7640  01C4  082F               	movf	low ((_I2C_Status| 0+15)),w
  7641  01C5  00FA               	movwf	??_I2C_DO_TX
  7642  01C6  087A               	movf	??_I2C_DO_TX,w
  7643  01C7  00F9               	movwf	I2C_CallbackReturnReset@funPtr
  7644  01C8  3006               	movlw	6
  7645  01C9  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
  7646  01CA  0086               	movwf	6
  7647  01CB  0187               	clrf	7
  7648  01CC  3F41               	moviw [1]fsr1
  7649  01CD  008A               	movwf	10
  7650  01CE  3F40               	moviw [0]fsr1
  7651  01CF  000A               	callw
  7652  01D0  3181               	pagesel	$
  7653                           
  7654                           ; Switch size 1, requested type "space"
  7655                           ; Number of cases is 4, Range of values is 1 to 4
  7656                           ; switch strategies available:
  7657                           ; Name         Instructions Cycles
  7658                           ; simple_byte           13     7 (average)
  7659                           ; direct_byte           17     9 (fixed)
  7660                           ; jumptable            263     9 (fixed)
  7661                           ;	Chosen strategy is simple_byte
  7662  01D1  3A01               	xorlw	1	; case 1
  7663  01D2  1903               	skipnz
  7664  01D3  29C0               	goto	i1l2311
  7665  01D4  3A03               	xorlw	3	; case 2
  7666  01D5  1903               	skipnz
  7667  01D6  29BA               	goto	i1l2303
  7668  01D7  3A01               	xorlw	1	; case 3
  7669  01D8  1903               	skipnz
  7670  01D9  29BD               	goto	i1l2307
  7671  01DA  3A07               	xorlw	7	; case 4
  7672  01DB  1903               	skipnz
  7673  01DC  29C0               	goto	i1l2311
  7674  01DD  29C0               	goto	i1l2311
  7675                           
  7676                           ;i2c_master.c: 369: }
  7677  01DE  0008               	return
  7678  01DF                     i1l387:	
  7679                           
  7680                           ;i2c_master.c: 370: else
  7681                           ;i2c_master.c: 371: {
  7682                           ;i2c_master.c: 372: I2C_Status.addressNackCheck = 0;
  7683  01DF  0020               	movlb	0	; select bank0
  7684  01E0  103C               	bcf	_I2C_Status+28,0
  7685                           
  7686                           ;i2c_master.c: 373: I2C_MasterSendTxData(*I2C_Status.data_ptr++);
  7687  01E1  3017               	movlw	23
  7688  01E2  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
  7689  01E3  0086               	movwf	6
  7690  01E4  0187               	clrf	7
  7691  01E5  3F40               	moviw [0]fsr1
  7692  01E6  0084               	movwf	4
  7693  01E7  0185               	clrf	5
  7694  01E8  0A81               	incf	1,f
  7695  01E9  0800               	movf	0,w
  7696  01EA  3185  2598  3181   	fcall	_I2C_MasterSendTxData
  7697                           
  7698                           ;i2c_master.c: 374: return (--I2C_Status.data_length)?I2C_TX:I2C_TX_EMPTY;
  7699  01ED  3001               	movlw	1
  7700  01EE  0020               	movlb	0	; select bank0
  7701  01EF  02B8               	subwf	_I2C_Status+24,f
  7702  01F0  3000               	movlw	0
  7703  01F1  3BB9               	subwfb	_I2C_Status+25,f
  7704  01F2  0838               	movf	_I2C_Status+24,w
  7705  01F3  0439               	iorwf	_I2C_Status+25,w
  7706  01F4  1D03               	btfss	3,2
  7707  01F5  29F8               	goto	i1l2325
  7708  01F6  3006               	movlw	6
  7709  01F7  29F9               	goto	L1
  7710  01F8                     i1l2325:	
  7711  01F8  3003               	movlw	3
  7712  01F9                     L1:	
  7713  01F9  00FB               	movwf	_I2C_DO_TX$794
  7714  01FA  3000               	movlw	0
  7715  01FB  00FC               	movwf	_I2C_DO_TX$794+1
  7716  01FC  087B               	movf	_I2C_DO_TX$794,w
  7717  01FD  0008               	return
  7718  01FE                     __end_of_I2C_DO_TX:	
  7719                           
  7720                           	psect	text43
  7721  0557                     __ptext43:	
  7722 ;; *************** function _I2C_DO_SEND_ADR_WRITE *****************
  7723 ;; Defined at:
  7724 ;;		line 347 in file "mcc_generated_files/i2c_master.c"
  7725 ;; Parameters:    Size  Location     Type
  7726 ;;		None
  7727 ;; Auto vars:     Size  Location     Type
  7728 ;;		None
  7729 ;; Return value:  Size  Location     Type
  7730 ;;                  1    wreg      enum E12103
  7731 ;; Registers used:
  7732 ;;		wreg, status,2, status,0, pclath, cstack
  7733 ;; Tracked objects:
  7734 ;;		On entry : 0/0
  7735 ;;		On exit  : 0/0
  7736 ;;		Unchanged: 0/0
  7737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7741 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7742 ;;Total ram usage:        0 bytes
  7743 ;; Hardware stack levels used:    1
  7744 ;; Hardware stack levels required when called:    1
  7745 ;; This function calls:
  7746 ;;		_I2C_MasterSendTxData
  7747 ;; This function is called by:
  7748 ;;		_I2C_MasterFsm
  7749 ;; This function uses a non-reentrant model
  7750 ;;
  7751                           
  7752                           
  7753                           ;psect for function _I2C_DO_SEND_ADR_WRITE
  7754  0557                     _I2C_DO_SEND_ADR_WRITE:	
  7755                           
  7756                           ;i2c_master.c: 349: I2C_Status.addressNackCheck = 1;
  7757                           
  7758                           ;incstack = 0
  7759                           ; Regs used in _I2C_DO_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
  7760  0557  0020               	movlb	0	; select bank0
  7761  0558  143C               	bsf	_I2C_Status+28,0
  7762                           
  7763                           ;i2c_master.c: 350: I2C_MasterSendTxData(I2C_Status.address << 1);
  7764  0559  3536               	lslf	_I2C_Status+22,w
  7765  055A  3185  2598         	fcall	_I2C_MasterSendTxData
  7766                           
  7767                           ;i2c_master.c: 351: return I2C_TX;
  7768  055C  3003               	movlw	3
  7769  055D  0008               	return
  7770  055E                     __end_of_I2C_DO_SEND_ADR_WRITE:	
  7771                           
  7772                           	psect	text44
  7773  0540                     __ptext44:	
  7774 ;; *************** function _I2C_DO_SEND_ADR_READ *****************
  7775 ;; Defined at:
  7776 ;;		line 340 in file "mcc_generated_files/i2c_master.c"
  7777 ;; Parameters:    Size  Location     Type
  7778 ;;		None
  7779 ;; Auto vars:     Size  Location     Type
  7780 ;;		None
  7781 ;; Return value:  Size  Location     Type
  7782 ;;                  1    wreg      enum E12103
  7783 ;; Registers used:
  7784 ;;		wreg, status,2, status,0, pclath, cstack
  7785 ;; Tracked objects:
  7786 ;;		On entry : 0/0
  7787 ;;		On exit  : 0/0
  7788 ;;		Unchanged: 0/0
  7789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7794 ;;Total ram usage:        0 bytes
  7795 ;; Hardware stack levels used:    1
  7796 ;; Hardware stack levels required when called:    1
  7797 ;; This function calls:
  7798 ;;		_I2C_MasterSendTxData
  7799 ;; This function is called by:
  7800 ;;		_I2C_MasterFsm
  7801 ;; This function uses a non-reentrant model
  7802 ;;
  7803                           
  7804                           
  7805                           ;psect for function _I2C_DO_SEND_ADR_READ
  7806  0540                     _I2C_DO_SEND_ADR_READ:	
  7807                           
  7808                           ;i2c_master.c: 342: I2C_Status.addressNackCheck = 1;
  7809                           
  7810                           ;incstack = 0
  7811                           ; Regs used in _I2C_DO_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
  7812  0540  0020               	movlb	0	; select bank0
  7813  0541  143C               	bsf	_I2C_Status+28,0
  7814                           
  7815                           ;i2c_master.c: 343: I2C_MasterSendTxData(I2C_Status.address << 1 | 1);
  7816  0542  1403               	setc
  7817  0543  0D36               	rlf	_I2C_Status+22,w
  7818  0544  3185  2598         	fcall	_I2C_MasterSendTxData
  7819                           
  7820                           ;i2c_master.c: 344: return I2C_RCEN;
  7821  0546  3005               	movlw	5
  7822  0547  0008               	return
  7823  0548                     __end_of_I2C_DO_SEND_ADR_READ:	
  7824                           
  7825                           	psect	text45
  7826  0593                     __ptext45:	
  7827 ;; *************** function _I2C_DO_IDLE *****************
  7828 ;; Defined at:
  7829 ;;		line 333 in file "mcc_generated_files/i2c_master.c"
  7830 ;; Parameters:    Size  Location     Type
  7831 ;;		None
  7832 ;; Auto vars:     Size  Location     Type
  7833 ;;		None
  7834 ;; Return value:  Size  Location     Type
  7835 ;;                  1    wreg      enum E12103
  7836 ;; Registers used:
  7837 ;;		wreg, status,2
  7838 ;; Tracked objects:
  7839 ;;		On entry : 0/0
  7840 ;;		On exit  : 0/0
  7841 ;;		Unchanged: 0/0
  7842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7847 ;;Total ram usage:        0 bytes
  7848 ;; Hardware stack levels used:    1
  7849 ;; This function calls:
  7850 ;;		Nothing
  7851 ;; This function is called by:
  7852 ;;		_I2C_MasterFsm
  7853 ;; This function uses a non-reentrant model
  7854 ;;
  7855                           
  7856                           
  7857                           ;psect for function _I2C_DO_IDLE
  7858  0593                     _I2C_DO_IDLE:	
  7859                           
  7860                           ;i2c_master.c: 335: I2C_Status.busy = 0;
  7861                           
  7862                           ;incstack = 0
  7863                           ; Regs used in _I2C_DO_IDLE: [wreg+status,2]
  7864  0593  0020               	movlb	0	; select bank0
  7865  0594  10BC               	bcf	_I2C_Status+28,1
  7866                           
  7867                           ;i2c_master.c: 336: I2C_Status.error = I2C_NOERR;
  7868  0595  01BB               	clrf	_I2C_Status+27
  7869                           
  7870                           ;i2c_master.c: 337: return I2C_RESET;
  7871  0596  300E               	movlw	14
  7872  0597  0008               	return
  7873  0598                     __end_of_I2C_DO_IDLE:	
  7874                           
  7875                           	psect	text46
  7876  0368                     __ptext46:	
  7877 ;; *************** function _I2C_DO_TX_EMPTY *****************
  7878 ;; Defined at:
  7879 ;;		line 409 in file "mcc_generated_files/i2c_master.c"
  7880 ;; Parameters:    Size  Location     Type
  7881 ;;		None
  7882 ;; Auto vars:     Size  Location     Type
  7883 ;;		None
  7884 ;; Return value:  Size  Location     Type
  7885 ;;                  1    wreg      enum E12103
  7886 ;; Registers used:
  7887 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7888 ;; Tracked objects:
  7889 ;;		On entry : 0/0
  7890 ;;		On exit  : 0/0
  7891 ;;		Unchanged: 0/0
  7892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7895 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7896 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7897 ;;Total ram usage:        1 bytes
  7898 ;; Hardware stack levels used:    1
  7899 ;; Hardware stack levels required when called:    3
  7900 ;; This function calls:
  7901 ;;		Absolute function
  7902 ;;		_I2C_CallbackReturnReset
  7903 ;;		_I2C_CallbackReturnStop
  7904 ;;		_I2C_DO_SEND_RESTART
  7905 ;;		_I2C_DO_SEND_STOP
  7906 ;;		_I2C_MasterSetIrq
  7907 ;;		_rd1RegCompleteHandler
  7908 ;;		_rd2RegCompleteHandler
  7909 ;;		_rdBlkRegCompleteHandler
  7910 ;;		_wr1RegCompleteHandler
  7911 ;;		_wr2RegCompleteHandler
  7912 ;; This function is called by:
  7913 ;;		_I2C_MasterFsm
  7914 ;; This function uses a non-reentrant model
  7915 ;;
  7916                           
  7917                           
  7918                           ;psect for function _I2C_DO_TX_EMPTY
  7919  0368                     _I2C_DO_TX_EMPTY:	
  7920                           
  7921                           ;i2c_master.c: 411: I2C_Status.bufferFree = 1;
  7922                           
  7923                           ;incstack = 0
  7924                           ; Regs used in _I2C_DO_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7925  0368  0020               	movlb	0	; select bank0
  7926  0369  15BC               	bsf	_I2C_Status+28,3
  7927                           
  7928                           ;i2c_master.c: 412: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
  7929  036A  2B75               	goto	i1l2381
  7930  036B                     i1l2365:	
  7931                           ;i2c_master.c: 413: {
  7932                           ;i2c_master.c: 414: case I2C_RESTART_READ:
  7933                           
  7934                           
  7935                           ;i2c_master.c: 415: case I2C_RESTART_WRITE:
  7936                           ;i2c_master.c: 416: return I2C_DO_SEND_RESTART();
  7937  036B  3185  25B9         	fcall	_I2C_DO_SEND_RESTART
  7938  036D  0008               	return
  7939  036E                     i1l2369:	
  7940                           ;i2c_master.c: 417: case I2C_CONTINUE:
  7941                           
  7942                           
  7943                           ;i2c_master.c: 418: I2C_MasterSetIrq();
  7944  036E  3185  25D7         	fcall	_I2C_MasterSetIrq
  7945                           
  7946                           ;i2c_master.c: 419: return I2C_TX;
  7947  0370  3003               	movlw	3
  7948  0371  0008               	return
  7949  0372                     i1l2375:	
  7950                           ;i2c_master.c: 421: case I2C_STOP:
  7951                           
  7952                           ;i2c_master.c: 420: default:
  7953                           
  7954                           
  7955                           ;i2c_master.c: 422: return I2C_DO_SEND_STOP();
  7956  0372  3185  25B5         	fcall	_I2C_DO_SEND_STOP
  7957                           
  7958                           ;i2c_master.c: 423: }
  7959  0374  0008               	return
  7960  0375                     i1l2381:	
  7961  0375  0020               	movlb	0	; select bank0
  7962  0376  082C               	movf	low ((_I2C_Status| 0+12)),w
  7963  0377  00FA               	movwf	??_I2C_DO_TX_EMPTY
  7964  0378  087A               	movf	??_I2C_DO_TX_EMPTY,w
  7965  0379  00F9               	movwf	I2C_CallbackReturnReset@funPtr
  7966  037A  0821               	movf	_I2C_Status+1,w
  7967  037B  008A               	movwf	10
  7968  037C  0820               	movf	_I2C_Status,w
  7969  037D  000A               	callw
  7970  037E  3183               	pagesel	$
  7971                           
  7972                           ; Switch size 1, requested type "space"
  7973                           ; Number of cases is 4, Range of values is 1 to 4
  7974                           ; switch strategies available:
  7975                           ; Name         Instructions Cycles
  7976                           ; simple_byte           13     7 (average)
  7977                           ; direct_byte           17     9 (fixed)
  7978                           ; jumptable            263     9 (fixed)
  7979                           ;	Chosen strategy is simple_byte
  7980  037F  3A01               	xorlw	1	; case 1
  7981  0380  1903               	skipnz
  7982  0381  2B72               	goto	i1l2375
  7983  0382  3A03               	xorlw	3	; case 2
  7984  0383  1903               	skipnz
  7985  0384  2B6B               	goto	i1l2365
  7986  0385  3A01               	xorlw	1	; case 3
  7987  0386  1903               	skipnz
  7988  0387  2B6B               	goto	i1l2365
  7989  0388  3A07               	xorlw	7	; case 4
  7990  0389  1903               	skipnz
  7991  038A  2B6E               	goto	i1l2369
  7992  038B  2B72               	goto	i1l2375
  7993  038C  0008               	return
  7994  038D                     __end_of_I2C_DO_TX_EMPTY:	
  7995                           
  7996                           	psect	text47
  7997  05D7                     __ptext47:	
  7998 ;; *************** function _I2C_MasterSetIrq *****************
  7999 ;; Defined at:
  8000 ;;		line 645 in file "mcc_generated_files/i2c_master.c"
  8001 ;; Parameters:    Size  Location     Type
  8002 ;;		None
  8003 ;; Auto vars:     Size  Location     Type
  8004 ;;		None
  8005 ;; Return value:  Size  Location     Type
  8006 ;;                  1    wreg      void 
  8007 ;; Registers used:
  8008 ;;		None
  8009 ;; Tracked objects:
  8010 ;;		On entry : 0/0
  8011 ;;		On exit  : 0/0
  8012 ;;		Unchanged: 0/0
  8013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8018 ;;Total ram usage:        0 bytes
  8019 ;; Hardware stack levels used:    1
  8020 ;; This function calls:
  8021 ;;		Nothing
  8022 ;; This function is called by:
  8023 ;;		_I2C_DO_TX_EMPTY
  8024 ;; This function uses a non-reentrant model
  8025 ;;
  8026                           
  8027                           
  8028                           ;psect for function _I2C_MasterSetIrq
  8029  05D7                     _I2C_MasterSetIrq:	
  8030                           
  8031                           ;i2c_master.c: 647: PIR1bits.SSP1IF = 1;
  8032                           
  8033                           ;incstack = 0
  8034                           ; Regs used in _I2C_MasterSetIrq: []
  8035  05D7  0020               	movlb	0	; select bank0
  8036  05D8  1590               	bsf	16,3	;volatile
  8037  05D9  0008               	return
  8038  05DA                     __end_of_I2C_MasterSetIrq:	
  8039                           
  8040                           	psect	text48
  8041  0588                     __ptext48:	
  8042 ;; *************** function _I2C_MasterIsNack *****************
  8043 ;; Defined at:
  8044 ;;		line 598 in file "mcc_generated_files/i2c_master.c"
  8045 ;; Parameters:    Size  Location     Type
  8046 ;;		None
  8047 ;; Auto vars:     Size  Location     Type
  8048 ;;		None
  8049 ;; Return value:  Size  Location     Type
  8050 ;;                  1    wreg      unsigned char 
  8051 ;; Registers used:
  8052 ;;		wreg, status,2, status,0
  8053 ;; Tracked objects:
  8054 ;;		On entry : 0/0
  8055 ;;		On exit  : 0/0
  8056 ;;		Unchanged: 0/0
  8057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8061 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8062 ;;Total ram usage:        0 bytes
  8063 ;; Hardware stack levels used:    1
  8064 ;; This function calls:
  8065 ;;		Nothing
  8066 ;; This function is called by:
  8067 ;;		_I2C_MasterFsm
  8068 ;;		_I2C_DO_TX
  8069 ;; This function uses a non-reentrant model
  8070 ;;
  8071                           
  8072                           
  8073                           ;psect for function _I2C_MasterIsNack
  8074  0588                     _I2C_MasterIsNack:	
  8075                           
  8076                           ;i2c_master.c: 600: return SSP1CON2bits.ACKSTAT;
  8077                           
  8078                           ;incstack = 0
  8079                           ; Regs used in _I2C_MasterIsNack: [wreg+status,2+status,0]
  8080  0588  0024               	movlb	4	; select bank4
  8081  0589  0E16               	swapf	22,w	;volatile
  8082  058A  0C89               	rrf	9,f
  8083  058B  0C89               	rrf	9,f
  8084  058C  3901               	andlw	1
  8085  058D  0008               	return
  8086  058E                     __end_of_I2C_MasterIsNack:	
  8087                           
  8088                           	psect	text49
  8089  0598                     __ptext49:	
  8090 ;; *************** function _I2C_MasterSendTxData *****************
  8091 ;; Defined at:
  8092 ;;		line 568 in file "mcc_generated_files/i2c_master.c"
  8093 ;; Parameters:    Size  Location     Type
  8094 ;;  data            1    wreg     unsigned char 
  8095 ;; Auto vars:     Size  Location     Type
  8096 ;;  data            1    0[COMMON] unsigned char 
  8097 ;; Return value:  Size  Location     Type
  8098 ;;                  1    wreg      void 
  8099 ;; Registers used:
  8100 ;;		wreg
  8101 ;; Tracked objects:
  8102 ;;		On entry : 0/0
  8103 ;;		On exit  : 0/0
  8104 ;;		Unchanged: 0/0
  8105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8107 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8109 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8110 ;;Total ram usage:        1 bytes
  8111 ;; Hardware stack levels used:    1
  8112 ;; This function calls:
  8113 ;;		Nothing
  8114 ;; This function is called by:
  8115 ;;		_I2C_DO_SEND_ADR_READ
  8116 ;;		_I2C_DO_SEND_ADR_WRITE
  8117 ;;		_I2C_DO_TX
  8118 ;; This function uses a non-reentrant model
  8119 ;;
  8120                           
  8121                           
  8122                           ;psect for function _I2C_MasterSendTxData
  8123  0598                     _I2C_MasterSendTxData:	
  8124                           
  8125                           ;incstack = 0
  8126                           ; Regs used in _I2C_MasterSendTxData: [wreg]
  8127                           ;I2C_MasterSendTxData@data stored from wreg
  8128  0598  00F0               	movwf	I2C_MasterSendTxData@data
  8129                           
  8130                           ;i2c_master.c: 570: SSP1BUF = data;
  8131  0599  0870               	movf	I2C_MasterSendTxData@data,w
  8132  059A  0024               	movlb	4	; select bank4
  8133  059B  0091               	movwf	17	;volatile
  8134  059C  0008               	return
  8135  059D                     __end_of_I2C_MasterSendTxData:	
  8136                           
  8137                           	psect	text50
  8138  05C5                     __ptext50:	
  8139 ;; *************** function _I2C_MasterSendAck *****************
  8140 ;; Defined at:
  8141 ;;		line 603 in file "mcc_generated_files/i2c_master.c"
  8142 ;; Parameters:    Size  Location     Type
  8143 ;;		None
  8144 ;; Auto vars:     Size  Location     Type
  8145 ;;		None
  8146 ;; Return value:  Size  Location     Type
  8147 ;;                  1    wreg      void 
  8148 ;; Registers used:
  8149 ;;		None
  8150 ;; Tracked objects:
  8151 ;;		On entry : 0/0
  8152 ;;		On exit  : 0/0
  8153 ;;		Unchanged: 0/0
  8154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8159 ;;Total ram usage:        0 bytes
  8160 ;; Hardware stack levels used:    1
  8161 ;; This function calls:
  8162 ;;		Nothing
  8163 ;; This function is called by:
  8164 ;;		_I2C_DO_RX
  8165 ;;		_I2C_DO_RX_ACK
  8166 ;; This function uses a non-reentrant model
  8167 ;;
  8168                           
  8169                           
  8170                           ;psect for function _I2C_MasterSendAck
  8171  05C5                     _I2C_MasterSendAck:	
  8172                           
  8173                           ;i2c_master.c: 605: SSP1CON2bits.ACKDT = 0;
  8174                           
  8175                           ;incstack = 0
  8176                           ; Regs used in _I2C_MasterSendAck: []
  8177  05C5  0024               	movlb	4	; select bank4
  8178  05C6  1296               	bcf	22,5	;volatile
  8179                           
  8180                           ;i2c_master.c: 606: SSP1CON2bits.ACKEN = 1;
  8181  05C7  1616               	bsf	22,4	;volatile
  8182  05C8  0008               	return
  8183  05C9                     __end_of_I2C_MasterSendAck:	
  8184                           
  8185                           	psect	text51
  8186  05DA                     __ptext51:	
  8187 ;; *************** function _I2C_MasterGetRxData *****************
  8188 ;; Defined at:
  8189 ;;		line 563 in file "mcc_generated_files/i2c_master.c"
  8190 ;; Parameters:    Size  Location     Type
  8191 ;;		None
  8192 ;; Auto vars:     Size  Location     Type
  8193 ;;		None
  8194 ;; Return value:  Size  Location     Type
  8195 ;;                  1    wreg      unsigned char 
  8196 ;; Registers used:
  8197 ;;		wreg
  8198 ;; Tracked objects:
  8199 ;;		On entry : 0/0
  8200 ;;		On exit  : 0/0
  8201 ;;		Unchanged: 0/0
  8202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8207 ;;Total ram usage:        0 bytes
  8208 ;; Hardware stack levels used:    1
  8209 ;; This function calls:
  8210 ;;		Nothing
  8211 ;; This function is called by:
  8212 ;;		_I2C_DO_RX
  8213 ;; This function uses a non-reentrant model
  8214 ;;
  8215                           
  8216                           
  8217                           ;psect for function _I2C_MasterGetRxData
  8218  05DA                     _I2C_MasterGetRxData:	
  8219                           
  8220                           ;i2c_master.c: 565: return SSP1BUF;
  8221                           
  8222                           ;incstack = 0
  8223                           ; Regs used in _I2C_MasterGetRxData: [wreg]
  8224  05DA  0024               	movlb	4	; select bank4
  8225  05DB  0811               	movf	17,w	;volatile
  8226  05DC  0008               	return
  8227  05DD                     __end_of_I2C_MasterGetRxData:	
  8228                           
  8229                           	psect	text52
  8230  05C9                     __ptext52:	
  8231 ;; *************** function _I2C_MasterSendNack *****************
  8232 ;; Defined at:
  8233 ;;		line 609 in file "mcc_generated_files/i2c_master.c"
  8234 ;; Parameters:    Size  Location     Type
  8235 ;;		None
  8236 ;; Auto vars:     Size  Location     Type
  8237 ;;		None
  8238 ;; Return value:  Size  Location     Type
  8239 ;;                  1    wreg      void 
  8240 ;; Registers used:
  8241 ;;		None
  8242 ;; Tracked objects:
  8243 ;;		On entry : 0/0
  8244 ;;		On exit  : 0/0
  8245 ;;		Unchanged: 0/0
  8246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8250 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8251 ;;Total ram usage:        0 bytes
  8252 ;; Hardware stack levels used:    1
  8253 ;; This function calls:
  8254 ;;		Nothing
  8255 ;; This function is called by:
  8256 ;;		_I2C_DO_RX_NACK_STOP
  8257 ;;		_I2C_DO_RX_NACK_RESTART
  8258 ;; This function uses a non-reentrant model
  8259 ;;
  8260                           
  8261                           
  8262                           ;psect for function _I2C_MasterSendNack
  8263  05C9                     _I2C_MasterSendNack:	
  8264                           
  8265                           ;i2c_master.c: 611: SSP1CON2bits.ACKDT = 1;
  8266                           
  8267                           ;incstack = 0
  8268                           ; Regs used in _I2C_MasterSendNack: []
  8269  05C9  0024               	movlb	4	; select bank4
  8270  05CA  1696               	bsf	22,5	;volatile
  8271                           
  8272                           ;i2c_master.c: 612: SSP1CON2bits.ACKEN = 1;
  8273  05CB  1616               	bsf	22,4	;volatile
  8274  05CC  0008               	return
  8275  05CD                     __end_of_I2C_MasterSendNack:	
  8276                           
  8277                           	psect	text53
  8278  05DD                     __ptext53:	
  8279 ;; *************** function _I2C_MasterStartRx *****************
  8280 ;; Defined at:
  8281 ;;		line 583 in file "mcc_generated_files/i2c_master.c"
  8282 ;; Parameters:    Size  Location     Type
  8283 ;;		None
  8284 ;; Auto vars:     Size  Location     Type
  8285 ;;		None
  8286 ;; Return value:  Size  Location     Type
  8287 ;;                  1    wreg      void 
  8288 ;; Registers used:
  8289 ;;		None
  8290 ;; Tracked objects:
  8291 ;;		On entry : 0/0
  8292 ;;		On exit  : 0/0
  8293 ;;		Unchanged: 0/0
  8294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8298 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8299 ;;Total ram usage:        0 bytes
  8300 ;; Hardware stack levels used:    1
  8301 ;; This function calls:
  8302 ;;		Nothing
  8303 ;; This function is called by:
  8304 ;;		_I2C_DO_RCEN
  8305 ;; This function uses a non-reentrant model
  8306 ;;
  8307                           
  8308                           
  8309                           ;psect for function _I2C_MasterStartRx
  8310  05DD                     _I2C_MasterStartRx:	
  8311                           
  8312                           ;i2c_master.c: 585: SSP1CON2bits.RCEN = 1;
  8313                           
  8314                           ;incstack = 0
  8315                           ; Regs used in _I2C_MasterStartRx: []
  8316  05DD  0024               	movlb	4	; select bank4
  8317  05DE  1596               	bsf	22,3	;volatile
  8318  05DF  0008               	return
  8319  05E0                     __end_of_I2C_MasterStartRx:	
  8320                           
  8321                           	psect	text54
  8322  05F5                     __ptext54:	
  8323 ;; *************** function _I2C_CallbackReturnReset *****************
  8324 ;; Defined at:
  8325 ;;		line 525 in file "mcc_generated_files/i2c_master.c"
  8326 ;; Parameters:    Size  Location     Type
  8327 ;;  funPtr          1    9[COMMON] PTR void 
  8328 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8329 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8330 ;; Auto vars:     Size  Location     Type
  8331 ;;		None
  8332 ;; Return value:  Size  Location     Type
  8333 ;;                  1    wreg      enum E97
  8334 ;; Registers used:
  8335 ;;		wreg
  8336 ;; Tracked objects:
  8337 ;;		On entry : 0/0
  8338 ;;		On exit  : 0/0
  8339 ;;		Unchanged: 0/0
  8340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8341 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8344 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8345 ;;Total ram usage:        1 bytes
  8346 ;; Hardware stack levels used:    1
  8347 ;; This function calls:
  8348 ;;		Nothing
  8349 ;; This function is called by:
  8350 ;;		_I2C_Open
  8351 ;;		_I2C_DO_TX
  8352 ;;		_I2C_DO_RX
  8353 ;;		_I2C_DO_TX_EMPTY
  8354 ;;		_I2C_DO_ADDRESS_NACK
  8355 ;;		_I2C_DO_RX_EMPTY
  8356 ;; This function uses a non-reentrant model
  8357 ;;
  8358                           
  8359                           
  8360                           ;psect for function _I2C_CallbackReturnReset
  8361  05F5                     _I2C_CallbackReturnReset:	
  8362                           
  8363                           ;i2c_master.c: 527: return I2C_RESET_LINK;
  8364                           
  8365                           ;incstack = 0
  8366                           ; Regs used in _I2C_CallbackReturnReset: [wreg]
  8367  05F5  3005               	movlw	5
  8368  05F6  0008               	return
  8369  05F7                     __end_of_I2C_CallbackReturnReset:	
  8370                           
  8371                           	psect	text55
  8372  05F7                     __ptext55:	
  8373 ;; *************** function _I2C_CallbackReturnStop *****************
  8374 ;; Defined at:
  8375 ;;		line 520 in file "mcc_generated_files/i2c_master.c"
  8376 ;; Parameters:    Size  Location     Type
  8377 ;;  funPtr          1    9[COMMON] PTR void 
  8378 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8379 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8380 ;; Auto vars:     Size  Location     Type
  8381 ;;		None
  8382 ;; Return value:  Size  Location     Type
  8383 ;;                  1    wreg      enum E97
  8384 ;; Registers used:
  8385 ;;		wreg
  8386 ;; Tracked objects:
  8387 ;;		On entry : 0/0
  8388 ;;		On exit  : 0/0
  8389 ;;		Unchanged: 0/0
  8390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8391 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8394 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8395 ;;Total ram usage:        1 bytes
  8396 ;; Hardware stack levels used:    1
  8397 ;; This function calls:
  8398 ;;		Nothing
  8399 ;; This function is called by:
  8400 ;;		_I2C_Open
  8401 ;;		_I2C_SetCallback
  8402 ;;		_I2C_DO_TX
  8403 ;;		_I2C_DO_RX
  8404 ;;		_I2C_DO_TX_EMPTY
  8405 ;;		_I2C_DO_ADDRESS_NACK
  8406 ;;		_I2C_DO_RX_EMPTY
  8407 ;; This function uses a non-reentrant model
  8408 ;;
  8409                           
  8410                           
  8411                           ;psect for function _I2C_CallbackReturnStop
  8412  05F7                     _I2C_CallbackReturnStop:	
  8413                           
  8414                           ;i2c_master.c: 522: return I2C_STOP;
  8415                           
  8416                           ;incstack = 0
  8417                           ; Regs used in _I2C_CallbackReturnStop: [wreg]
  8418  05F7  3001               	movlw	1
  8419  05F8  0008               	return
  8420  05F9                     __end_of_I2C_CallbackReturnStop:	
  8421                           
  8422                           	psect	text56
  8423  0427                     __ptext56:	
  8424 ;; *************** function _rdBlkRegCompleteHandler *****************
  8425 ;; Defined at:
  8426 ;;		line 170 in file "mcc_generated_files/examples/i2c_master_example.c"
  8427 ;; Parameters:    Size  Location     Type
  8428 ;;  ptr             1    9[COMMON] PTR void 
  8429 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8430 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8431 ;; Auto vars:     Size  Location     Type
  8432 ;;		None
  8433 ;; Return value:  Size  Location     Type
  8434 ;;                  1    wreg      enum E97
  8435 ;; Registers used:
  8436 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8437 ;; Tracked objects:
  8438 ;;		On entry : 0/0
  8439 ;;		On exit  : 0/0
  8440 ;;		Unchanged: 0/0
  8441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8442 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8445 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8446 ;;Total ram usage:        1 bytes
  8447 ;; Hardware stack levels used:    1
  8448 ;; Hardware stack levels required when called:    2
  8449 ;; This function calls:
  8450 ;;		_I2C_SetBuffer
  8451 ;;		_I2C_SetDataCompleteCallback
  8452 ;; This function is called by:
  8453 ;;		_I2C_ReadDataBlock
  8454 ;;		_I2C_DO_TX
  8455 ;;		_I2C_DO_RX
  8456 ;;		_I2C_DO_TX_EMPTY
  8457 ;;		_I2C_DO_ADDRESS_NACK
  8458 ;;		_I2C_DO_RX_EMPTY
  8459 ;; This function uses a non-reentrant model
  8460 ;;
  8461                           
  8462                           
  8463                           ;psect for function _rdBlkRegCompleteHandler
  8464  0427                     _rdBlkRegCompleteHandler:	
  8465                           
  8466                           ;i2c_master_example.c: 172: I2C_SetBuffer(((i2c_buffer_t *)ptr)->data,((i2c_buffer_t*)pt
      +                          r)->len);
  8467                           
  8468                           ;incstack = 0
  8469                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  8470  0427  0879               	movf	rdBlkRegCompleteHandler@ptr,w
  8471  0428  0086               	movwf	6
  8472  0429  0187               	clrf	7
  8473  042A  3F40               	moviw [0]fsr1
  8474  042B  00F0               	movwf	I2C_SetBuffer@bufferSize
  8475  042C  3F41               	moviw [1]fsr1
  8476  042D  00F1               	movwf	I2C_SetBuffer@bufferSize+1
  8477  042E  0879               	movf	rdBlkRegCompleteHandler@ptr,w
  8478  042F  3E02               	addlw	2
  8479  0430  0086               	movwf	6
  8480  0431  0187               	clrf	7
  8481  0432  0801               	movf	1,w
  8482  0433  3184  24D1  3184   	fcall	_I2C_SetBuffer
  8483                           
  8484                           ;i2c_master_example.c: 173: I2C_SetDataCompleteCallback((0),(0));
  8485  0436  3000               	movlw	0
  8486  0437  00F5               	movwf	I2C_SetDataCompleteCallback@cb
  8487  0438  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
  8488  0439  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
  8489  043A  3185  2503         	fcall	_I2C_SetDataCompleteCallback
  8490                           
  8491                           ;i2c_master_example.c: 174: return I2C_RESTART_READ;
  8492  043C  3002               	movlw	2
  8493  043D  0008               	return
  8494  043E                     __end_of_rdBlkRegCompleteHandler:	
  8495                           
  8496                           	psect	text57
  8497  0491                     __ptext57:	
  8498 ;; *************** function _wr1RegCompleteHandler *****************
  8499 ;; Defined at:
  8500 ;;		line 156 in file "mcc_generated_files/examples/i2c_master_example.c"
  8501 ;; Parameters:    Size  Location     Type
  8502 ;;  ptr             1    9[COMMON] PTR void 
  8503 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8504 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8505 ;; Auto vars:     Size  Location     Type
  8506 ;;		None
  8507 ;; Return value:  Size  Location     Type
  8508 ;;                  1    wreg      enum E97
  8509 ;; Registers used:
  8510 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8511 ;; Tracked objects:
  8512 ;;		On entry : 0/0
  8513 ;;		On exit  : 0/0
  8514 ;;		Unchanged: 0/0
  8515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8516 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8519 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8520 ;;Total ram usage:        1 bytes
  8521 ;; Hardware stack levels used:    1
  8522 ;; Hardware stack levels required when called:    2
  8523 ;; This function calls:
  8524 ;;		_I2C_SetBuffer
  8525 ;;		_I2C_SetDataCompleteCallback
  8526 ;; This function is called by:
  8527 ;;		_I2C_Write1ByteRegister
  8528 ;;		_I2C_DO_TX
  8529 ;;		_I2C_DO_RX
  8530 ;;		_I2C_DO_TX_EMPTY
  8531 ;;		_I2C_DO_ADDRESS_NACK
  8532 ;;		_I2C_DO_RX_EMPTY
  8533 ;; This function uses a non-reentrant model
  8534 ;;
  8535                           
  8536                           
  8537                           ;psect for function _wr1RegCompleteHandler
  8538  0491                     _wr1RegCompleteHandler:	
  8539                           
  8540                           ;i2c_master_example.c: 158: I2C_SetBuffer(ptr,1);
  8541                           
  8542                           ;incstack = 0
  8543                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8544  0491  3001               	movlw	1
  8545  0492  00F0               	movwf	I2C_SetBuffer@bufferSize
  8546  0493  3000               	movlw	0
  8547  0494  00F1               	movwf	I2C_SetBuffer@bufferSize+1
  8548  0495  0879               	movf	wr1RegCompleteHandler@ptr,w
  8549  0496  3184  24D1  3184   	fcall	_I2C_SetBuffer
  8550                           
  8551                           ;i2c_master_example.c: 159: I2C_SetDataCompleteCallback((0),(0));
  8552  0499  3000               	movlw	0
  8553  049A  00F5               	movwf	I2C_SetDataCompleteCallback@cb
  8554  049B  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
  8555  049C  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
  8556  049D  3185  2503         	fcall	_I2C_SetDataCompleteCallback
  8557                           
  8558                           ;i2c_master_example.c: 160: return I2C_CONTINUE;
  8559  049F  3004               	movlw	4
  8560  04A0  0008               	return
  8561  04A1                     __end_of_wr1RegCompleteHandler:	
  8562                           
  8563                           	psect	text58
  8564  04A1                     __ptext58:	
  8565 ;; *************** function _rd2RegCompleteHandler *****************
  8566 ;; Defined at:
  8567 ;;		line 149 in file "mcc_generated_files/examples/i2c_master_example.c"
  8568 ;; Parameters:    Size  Location     Type
  8569 ;;  ptr             1    9[COMMON] PTR void 
  8570 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8571 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8572 ;; Auto vars:     Size  Location     Type
  8573 ;;		None
  8574 ;; Return value:  Size  Location     Type
  8575 ;;                  1    wreg      enum E97
  8576 ;; Registers used:
  8577 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8578 ;; Tracked objects:
  8579 ;;		On entry : 0/0
  8580 ;;		On exit  : 0/0
  8581 ;;		Unchanged: 0/0
  8582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8583 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8586 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8587 ;;Total ram usage:        1 bytes
  8588 ;; Hardware stack levels used:    1
  8589 ;; Hardware stack levels required when called:    2
  8590 ;; This function calls:
  8591 ;;		_I2C_SetBuffer
  8592 ;;		_I2C_SetDataCompleteCallback
  8593 ;; This function is called by:
  8594 ;;		_I2C_Read2ByteRegister
  8595 ;;		_I2C_DO_TX
  8596 ;;		_I2C_DO_RX
  8597 ;;		_I2C_DO_TX_EMPTY
  8598 ;;		_I2C_DO_ADDRESS_NACK
  8599 ;;		_I2C_DO_RX_EMPTY
  8600 ;; This function uses a non-reentrant model
  8601 ;;
  8602                           
  8603                           
  8604                           ;psect for function _rd2RegCompleteHandler
  8605  04A1                     _rd2RegCompleteHandler:	
  8606                           
  8607                           ;i2c_master_example.c: 151: I2C_SetBuffer(ptr,2);
  8608                           
  8609                           ;incstack = 0
  8610                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8611  04A1  3002               	movlw	2
  8612  04A2  00F0               	movwf	I2C_SetBuffer@bufferSize
  8613  04A3  3000               	movlw	0
  8614  04A4  00F1               	movwf	I2C_SetBuffer@bufferSize+1
  8615  04A5  0879               	movf	rd2RegCompleteHandler@ptr,w
  8616  04A6  3184  24D1  3184   	fcall	_I2C_SetBuffer
  8617                           
  8618                           ;i2c_master_example.c: 152: I2C_SetDataCompleteCallback((0),(0));
  8619  04A9  3000               	movlw	0
  8620  04AA  00F5               	movwf	I2C_SetDataCompleteCallback@cb
  8621  04AB  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
  8622  04AC  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
  8623  04AD  3185  2503         	fcall	_I2C_SetDataCompleteCallback
  8624                           
  8625                           ;i2c_master_example.c: 153: return I2C_RESTART_READ;
  8626  04AF  3002               	movlw	2
  8627  04B0  0008               	return
  8628  04B1                     __end_of_rd2RegCompleteHandler:	
  8629                           
  8630                           	psect	text59
  8631  04B1                     __ptext59:	
  8632 ;; *************** function _rd1RegCompleteHandler *****************
  8633 ;; Defined at:
  8634 ;;		line 142 in file "mcc_generated_files/examples/i2c_master_example.c"
  8635 ;; Parameters:    Size  Location     Type
  8636 ;;  ptr             1    9[COMMON] PTR void 
  8637 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8638 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8639 ;; Auto vars:     Size  Location     Type
  8640 ;;		None
  8641 ;; Return value:  Size  Location     Type
  8642 ;;                  1    wreg      enum E97
  8643 ;; Registers used:
  8644 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8645 ;; Tracked objects:
  8646 ;;		On entry : 0/0
  8647 ;;		On exit  : 0/0
  8648 ;;		Unchanged: 0/0
  8649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8650 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8653 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8654 ;;Total ram usage:        1 bytes
  8655 ;; Hardware stack levels used:    1
  8656 ;; Hardware stack levels required when called:    2
  8657 ;; This function calls:
  8658 ;;		_I2C_SetBuffer
  8659 ;;		_I2C_SetDataCompleteCallback
  8660 ;; This function is called by:
  8661 ;;		_I2C_Read1ByteRegister
  8662 ;;		_I2C_DO_TX
  8663 ;;		_I2C_DO_RX
  8664 ;;		_I2C_DO_TX_EMPTY
  8665 ;;		_I2C_DO_ADDRESS_NACK
  8666 ;;		_I2C_DO_RX_EMPTY
  8667 ;; This function uses a non-reentrant model
  8668 ;;
  8669                           
  8670                           
  8671                           ;psect for function _rd1RegCompleteHandler
  8672  04B1                     _rd1RegCompleteHandler:	
  8673                           
  8674                           ;i2c_master_example.c: 144: I2C_SetBuffer(ptr,1);
  8675                           
  8676                           ;incstack = 0
  8677                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8678  04B1  3001               	movlw	1
  8679  04B2  00F0               	movwf	I2C_SetBuffer@bufferSize
  8680  04B3  3000               	movlw	0
  8681  04B4  00F1               	movwf	I2C_SetBuffer@bufferSize+1
  8682  04B5  0879               	movf	rd1RegCompleteHandler@ptr,w
  8683  04B6  3184  24D1  3184   	fcall	_I2C_SetBuffer
  8684                           
  8685                           ;i2c_master_example.c: 145: I2C_SetDataCompleteCallback((0),(0));
  8686  04B9  3000               	movlw	0
  8687  04BA  00F5               	movwf	I2C_SetDataCompleteCallback@cb
  8688  04BB  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
  8689  04BC  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
  8690  04BD  3185  2503         	fcall	_I2C_SetDataCompleteCallback
  8691                           
  8692                           ;i2c_master_example.c: 146: return I2C_RESTART_READ;
  8693  04BF  3002               	movlw	2
  8694  04C0  0008               	return
  8695  04C1                     __end_of_rd1RegCompleteHandler:	
  8696                           
  8697                           	psect	text60
  8698  04C1                     __ptext60:	
  8699 ;; *************** function _wr2RegCompleteHandler *****************
  8700 ;; Defined at:
  8701 ;;		line 163 in file "mcc_generated_files/examples/i2c_master_example.c"
  8702 ;; Parameters:    Size  Location     Type
  8703 ;;  ptr             1    9[COMMON] PTR void 
  8704 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8705 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8706 ;; Auto vars:     Size  Location     Type
  8707 ;;		None
  8708 ;; Return value:  Size  Location     Type
  8709 ;;                  1    wreg      enum E97
  8710 ;; Registers used:
  8711 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8712 ;; Tracked objects:
  8713 ;;		On entry : 0/0
  8714 ;;		On exit  : 0/0
  8715 ;;		Unchanged: 0/0
  8716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8717 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8720 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8721 ;;Total ram usage:        1 bytes
  8722 ;; Hardware stack levels used:    1
  8723 ;; Hardware stack levels required when called:    2
  8724 ;; This function calls:
  8725 ;;		_I2C_SetBuffer
  8726 ;;		_I2C_SetDataCompleteCallback
  8727 ;; This function is called by:
  8728 ;;		_I2C_Write2ByteRegister
  8729 ;;		_I2C_DO_TX
  8730 ;;		_I2C_DO_RX
  8731 ;;		_I2C_DO_TX_EMPTY
  8732 ;;		_I2C_DO_ADDRESS_NACK
  8733 ;;		_I2C_DO_RX_EMPTY
  8734 ;; This function uses a non-reentrant model
  8735 ;;
  8736                           
  8737                           
  8738                           ;psect for function _wr2RegCompleteHandler
  8739  04C1                     _wr2RegCompleteHandler:	
  8740                           
  8741                           ;i2c_master_example.c: 165: I2C_SetBuffer(ptr,2);
  8742                           
  8743                           ;incstack = 0
  8744                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8745  04C1  3002               	movlw	2
  8746  04C2  00F0               	movwf	I2C_SetBuffer@bufferSize
  8747  04C3  3000               	movlw	0
  8748  04C4  00F1               	movwf	I2C_SetBuffer@bufferSize+1
  8749  04C5  0879               	movf	wr2RegCompleteHandler@ptr,w
  8750  04C6  3184  24D1  3184   	fcall	_I2C_SetBuffer
  8751                           
  8752                           ;i2c_master_example.c: 166: I2C_SetDataCompleteCallback((0),(0));
  8753  04C9  3000               	movlw	0
  8754  04CA  00F5               	movwf	I2C_SetDataCompleteCallback@cb
  8755  04CB  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
  8756  04CC  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
  8757  04CD  3185  2503         	fcall	_I2C_SetDataCompleteCallback
  8758                           
  8759                           ;i2c_master_example.c: 167: return I2C_CONTINUE;
  8760  04CF  3004               	movlw	4
  8761  04D0  0008               	return
  8762  04D1                     __end_of_wr2RegCompleteHandler:	
  8763                           
  8764                           	psect	text61
  8765  0503                     __ptext61:	
  8766 ;; *************** function _I2C_SetDataCompleteCallback *****************
  8767 ;; Defined at:
  8768 ;;		line 273 in file "mcc_generated_files/i2c_master.c"
  8769 ;; Parameters:    Size  Location     Type
  8770 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
  8771 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), 
  8772 ;;		 -> Absolute function(1), rd1RegCompleteHandler(1), 
  8773 ;;  ptr             1    7[COMMON] PTR void 
  8774 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8775 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8776 ;; Auto vars:     Size  Location     Type
  8777 ;;		None
  8778 ;; Return value:  Size  Location     Type
  8779 ;;                  1    wreg      void 
  8780 ;; Registers used:
  8781 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8782 ;; Tracked objects:
  8783 ;;		On entry : 0/0
  8784 ;;		On exit  : 0/0
  8785 ;;		Unchanged: 0/0
  8786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8787 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8789 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8790 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8791 ;;Total ram usage:        4 bytes
  8792 ;; Hardware stack levels used:    1
  8793 ;; Hardware stack levels required when called:    1
  8794 ;; This function calls:
  8795 ;;		_I2C_SetCallback
  8796 ;; This function is called by:
  8797 ;;		_I2C_Write1ByteRegister
  8798 ;;		_rd1RegCompleteHandler
  8799 ;;		_rd2RegCompleteHandler
  8800 ;;		_wr1RegCompleteHandler
  8801 ;;		_wr2RegCompleteHandler
  8802 ;;		_rdBlkRegCompleteHandler
  8803 ;;		_I2C_Read1ByteRegister
  8804 ;;		_I2C_Read2ByteRegister
  8805 ;;		_I2C_Write2ByteRegister
  8806 ;;		_I2C_ReadDataBlock
  8807 ;; This function uses a non-reentrant model
  8808 ;;
  8809                           
  8810                           
  8811                           ;psect for function _I2C_SetDataCompleteCallback
  8812  0503                     _I2C_SetDataCompleteCallback:	
  8813                           
  8814                           ;i2c_master.c: 275: I2C_SetCallback(I2C_DATA_COMPLETE, cb, ptr);
  8815                           
  8816                           ;incstack = 0
  8817                           ; Regs used in _I2C_SetDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  8818  0503  0876               	movf	I2C_SetDataCompleteCallback@cb+1,w
  8819  0504  00F1               	movwf	I2C_SetCallback@cb+1
  8820  0505  0875               	movf	I2C_SetDataCompleteCallback@cb,w
  8821  0506  00F0               	movwf	I2C_SetCallback@cb
  8822  0507  0877               	movf	I2C_SetDataCompleteCallback@ptr,w
  8823  0508  00F8               	movwf	??_I2C_SetDataCompleteCallback
  8824  0509  0878               	movf	??_I2C_SetDataCompleteCallback,w
  8825  050A  00F2               	movwf	I2C_SetCallback@ptr
  8826  050B  3000               	movlw	0
  8827  050C  3183  238D         	fcall	_I2C_SetCallback
  8828  050E  0008               	return
  8829  050F                     __end_of_I2C_SetDataCompleteCallback:	
  8830                           
  8831                           	psect	text62
  8832  038D                     __ptext62:	
  8833 ;; *************** function _I2C_SetCallback *****************
  8834 ;; Defined at:
  8835 ;;		line 298 in file "mcc_generated_files/i2c_master.c"
  8836 ;; Parameters:    Size  Location     Type
  8837 ;;  idx             1    wreg     enum E12121
  8838 ;;  cb              2    0[COMMON] PTR FTN(PTR void ,)enum 
  8839 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), 
  8840 ;;		 -> Absolute function(1), rd1RegCompleteHandler(1), 
  8841 ;;  ptr             1    2[COMMON] PTR void 
  8842 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8843 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8844 ;; Auto vars:     Size  Location     Type
  8845 ;;  idx             1    4[COMMON] enum E12121
  8846 ;; Return value:  Size  Location     Type
  8847 ;;                  1    wreg      void 
  8848 ;; Registers used:
  8849 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8850 ;; Tracked objects:
  8851 ;;		On entry : 0/0
  8852 ;;		On exit  : 0/0
  8853 ;;		Unchanged: 0/0
  8854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8855 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8856 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8857 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8858 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8859 ;;Total ram usage:        5 bytes
  8860 ;; Hardware stack levels used:    1
  8861 ;; This function calls:
  8862 ;;		Nothing
  8863 ;; This function is called by:
  8864 ;;		_I2C_SetDataCompleteCallback
  8865 ;;		_I2C_SetAddressNackCallback
  8866 ;;		_I2C_SetWriteCollisionCallback
  8867 ;;		_I2C_SetDataNackCallback
  8868 ;;		_I2C_SetTimeoutCallback
  8869 ;; This function uses a non-reentrant model
  8870 ;;
  8871                           
  8872                           
  8873                           ;psect for function _I2C_SetCallback
  8874  038D                     _I2C_SetCallback:	
  8875                           
  8876                           ;incstack = 0
  8877                           ; Regs used in _I2C_SetCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
  8878                           ;I2C_SetCallback@idx stored from wreg
  8879  038D  00F4               	movwf	I2C_SetCallback@idx
  8880                           
  8881                           ;i2c_master.c: 300: if(cb)
  8882  038E  0870               	movf	I2C_SetCallback@cb,w
  8883  038F  0471               	iorwf	I2C_SetCallback@cb+1,w
  8884  0390  1903               	btfsc	3,2
  8885  0391  2BA3               	goto	i1l2159
  8886                           
  8887                           ;i2c_master.c: 301: {
  8888                           ;i2c_master.c: 302: I2C_Status.callbackTable[idx] = cb;
  8889  0392  3574               	lslf	I2C_SetCallback@idx,w
  8890  0393  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
  8891  0394  0086               	movwf	6
  8892  0395  0187               	clrf	7
  8893  0396  0870               	movf	I2C_SetCallback@cb,w
  8894  0397  3FC0               	movwi [0]fsr1
  8895  0398  0871               	movf	I2C_SetCallback@cb+1,w
  8896  0399  3FC1               	movwi [1]fsr1
  8897                           
  8898                           ;i2c_master.c: 303: I2C_Status.callbackPayload[idx] = ptr;
  8899  039A  0872               	movf	I2C_SetCallback@ptr,w
  8900  039B  00F3               	movwf	??_I2C_SetCallback
  8901  039C  0874               	movf	I2C_SetCallback@idx,w
  8902  039D  3E2C               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
  8903  039E  0086               	movwf	6
  8904  039F  0187               	clrf	7
  8905  03A0  0873               	movf	??_I2C_SetCallback,w
  8906  03A1  0081               	movwf	1
  8907                           
  8908                           ;i2c_master.c: 304: }
  8909  03A2  0008               	return
  8910  03A3                     i1l2159:	
  8911                           
  8912                           ;i2c_master.c: 305: else
  8913                           ;i2c_master.c: 306: {
  8914                           ;i2c_master.c: 307: I2C_Status.callbackTable[idx] = I2C_CallbackReturnStop;
  8915  03A3  3574               	lslf	I2C_SetCallback@idx,w
  8916  03A4  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
  8917  03A5  0086               	movwf	6
  8918  03A6  0187               	clrf	7
  8919  03A7  30F7               	movlw	low _I2C_CallbackReturnStop
  8920  03A8  3FC0               	movwi [0]fsr1
  8921  03A9  3005               	movlw	high _I2C_CallbackReturnStop
  8922  03AA  3FC1               	movwi [1]fsr1
  8923                           
  8924                           ;i2c_master.c: 308: I2C_Status.callbackPayload[idx] = (0);
  8925  03AB  0874               	movf	I2C_SetCallback@idx,w
  8926  03AC  3E2C               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
  8927  03AD  0086               	movwf	6
  8928  03AE  0187               	clrf	7
  8929  03AF  0181               	clrf	1
  8930  03B0  0008               	return
  8931  03B1                     __end_of_I2C_SetCallback:	
  8932                           
  8933                           	psect	text63
  8934  04D1                     __ptext63:	
  8935 ;; *************** function _I2C_SetBuffer *****************
  8936 ;; Defined at:
  8937 ;;		line 263 in file "mcc_generated_files/i2c_master.c"
  8938 ;; Parameters:    Size  Location     Type
  8939 ;;  buffer          1    wreg     PTR void 
  8940 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
  8941 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
  8942 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
  8943 ;;  bufferSize      2    0[COMMON] unsigned int 
  8944 ;; Auto vars:     Size  Location     Type
  8945 ;;  buffer          1    3[COMMON] PTR void 
  8946 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
  8947 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
  8948 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
  8949 ;; Return value:  Size  Location     Type
  8950 ;;                  1    wreg      void 
  8951 ;; Registers used:
  8952 ;;		wreg
  8953 ;; Tracked objects:
  8954 ;;		On entry : 0/0
  8955 ;;		On exit  : 0/0
  8956 ;;		Unchanged: 0/0
  8957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8958 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8959 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8960 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8961 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8962 ;;Total ram usage:        4 bytes
  8963 ;; Hardware stack levels used:    1
  8964 ;; This function calls:
  8965 ;;		Nothing
  8966 ;; This function is called by:
  8967 ;;		_I2C_Write1ByteRegister
  8968 ;;		_rd1RegCompleteHandler
  8969 ;;		_rd2RegCompleteHandler
  8970 ;;		_wr1RegCompleteHandler
  8971 ;;		_wr2RegCompleteHandler
  8972 ;;		_rdBlkRegCompleteHandler
  8973 ;;		_I2C_Read1ByteRegister
  8974 ;;		_I2C_Read2ByteRegister
  8975 ;;		_I2C_Write2ByteRegister
  8976 ;;		_I2C_WriteNBytes
  8977 ;;		_I2C_ReadNBytes
  8978 ;;		_I2C_ReadDataBlock
  8979 ;; This function uses a non-reentrant model
  8980 ;;
  8981                           
  8982                           
  8983                           ;psect for function _I2C_SetBuffer
  8984  04D1                     _I2C_SetBuffer:	
  8985                           
  8986                           ;incstack = 0
  8987                           ; Regs used in _I2C_SetBuffer: [wreg]
  8988                           ;I2C_SetBuffer@buffer stored from wreg
  8989  04D1  00F3               	movwf	I2C_SetBuffer@buffer
  8990                           
  8991                           ;i2c_master.c: 265: if(I2C_Status.bufferFree)
  8992  04D2  0020               	movlb	0	; select bank0
  8993  04D3  1DBC               	btfss	_I2C_Status+28,3
  8994  04D4  0008               	return
  8995                           
  8996                           ;i2c_master.c: 266: {
  8997                           ;i2c_master.c: 267: I2C_Status.data_ptr = buffer;
  8998  04D5  0873               	movf	I2C_SetBuffer@buffer,w
  8999  04D6  00F2               	movwf	??_I2C_SetBuffer
  9000  04D7  0872               	movf	??_I2C_SetBuffer,w
  9001  04D8  00B7               	movwf	low ((_I2C_Status| 0+23))
  9002                           
  9003                           ;i2c_master.c: 268: I2C_Status.data_length = bufferSize;
  9004  04D9  0871               	movf	I2C_SetBuffer@bufferSize+1,w
  9005  04DA  00B9               	movwf	_I2C_Status+25
  9006  04DB  0870               	movf	I2C_SetBuffer@bufferSize,w
  9007  04DC  00B8               	movwf	_I2C_Status+24
  9008                           
  9009                           ;i2c_master.c: 269: I2C_Status.bufferFree = 0;
  9010  04DD  11BC               	bcf	_I2C_Status+28,3
  9011  04DE  0008               	return
  9012  04DF                     __end_of_I2C_SetBuffer:	
  9013                           
  9014                           	psect	text64
  9015  05E0                     __ptext64:	
  9016 ;; *************** function _I2C_MasterStop *****************
  9017 ;; Defined at:
  9018 ;;		line 593 in file "mcc_generated_files/i2c_master.c"
  9019 ;; Parameters:    Size  Location     Type
  9020 ;;		None
  9021 ;; Auto vars:     Size  Location     Type
  9022 ;;		None
  9023 ;; Return value:  Size  Location     Type
  9024 ;;                  1    wreg      void 
  9025 ;; Registers used:
  9026 ;;		None
  9027 ;; Tracked objects:
  9028 ;;		On entry : 0/0
  9029 ;;		On exit  : 0/0
  9030 ;;		Unchanged: 0/0
  9031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9036 ;;Total ram usage:        0 bytes
  9037 ;; Hardware stack levels used:    1
  9038 ;; This function calls:
  9039 ;;		Nothing
  9040 ;; This function is called by:
  9041 ;;		_I2C_DO_SEND_STOP
  9042 ;; This function uses a non-reentrant model
  9043 ;;
  9044                           
  9045                           
  9046                           ;psect for function _I2C_MasterStop
  9047  05E0                     _I2C_MasterStop:	
  9048                           
  9049                           ;i2c_master.c: 595: SSP1CON2bits.PEN = 1;
  9050                           
  9051                           ;incstack = 0
  9052                           ; Regs used in _I2C_MasterStop: []
  9053  05E0  0024               	movlb	4	; select bank4
  9054  05E1  1516               	bsf	22,2	;volatile
  9055  05E2  0008               	return
  9056  05E3                     __end_of_I2C_MasterStop:	
  9057                           
  9058                           	psect	text65
  9059  05E3                     __ptext65:	
  9060 ;; *************** function _I2C_MasterEnableRestart *****************
  9061 ;; Defined at:
  9062 ;;		line 573 in file "mcc_generated_files/i2c_master.c"
  9063 ;; Parameters:    Size  Location     Type
  9064 ;;		None
  9065 ;; Auto vars:     Size  Location     Type
  9066 ;;		None
  9067 ;; Return value:  Size  Location     Type
  9068 ;;                  1    wreg      void 
  9069 ;; Registers used:
  9070 ;;		None
  9071 ;; Tracked objects:
  9072 ;;		On entry : 0/0
  9073 ;;		On exit  : 0/0
  9074 ;;		Unchanged: 0/0
  9075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9080 ;;Total ram usage:        0 bytes
  9081 ;; Hardware stack levels used:    1
  9082 ;; This function calls:
  9083 ;;		Nothing
  9084 ;; This function is called by:
  9085 ;;		_I2C_DO_SEND_RESTART_READ
  9086 ;;		_I2C_DO_SEND_RESTART_WRITE
  9087 ;;		_I2C_DO_SEND_RESTART
  9088 ;;		_I2C_DO_RX_EMPTY
  9089 ;; This function uses a non-reentrant model
  9090 ;;
  9091                           
  9092                           
  9093                           ;psect for function _I2C_MasterEnableRestart
  9094  05E3                     _I2C_MasterEnableRestart:	
  9095                           
  9096                           ;i2c_master.c: 575: SSP1CON2bits.RSEN = 1;
  9097                           
  9098                           ;incstack = 0
  9099                           ; Regs used in _I2C_MasterEnableRestart: []
  9100  05E3  0024               	movlb	4	; select bank4
  9101  05E4  1496               	bsf	22,1	;volatile
  9102  05E5  0008               	return
  9103  05E6                     __end_of_I2C_MasterEnableRestart:	
  9104                           
  9105                           	psect	text66
  9106  05E6                     __ptext66:	
  9107 ;; *************** function _I2C_MasterStart *****************
  9108 ;; Defined at:
  9109 ;;		line 588 in file "mcc_generated_files/i2c_master.c"
  9110 ;; Parameters:    Size  Location     Type
  9111 ;;		None
  9112 ;; Auto vars:     Size  Location     Type
  9113 ;;		None
  9114 ;; Return value:  Size  Location     Type
  9115 ;;                  1    wreg      void 
  9116 ;; Registers used:
  9117 ;;		None
  9118 ;; Tracked objects:
  9119 ;;		On entry : 0/0
  9120 ;;		On exit  : 0/0
  9121 ;;		Unchanged: 0/0
  9122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9126 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9127 ;;Total ram usage:        0 bytes
  9128 ;; Hardware stack levels used:    1
  9129 ;; This function calls:
  9130 ;;		Nothing
  9131 ;; This function is called by:
  9132 ;;		_I2C_MasterOperation
  9133 ;; This function uses a non-reentrant model
  9134 ;;
  9135                           
  9136                           
  9137                           ;psect for function _I2C_MasterStart
  9138  05E6                     _I2C_MasterStart:	
  9139                           
  9140                           ;i2c_master.c: 590: SSP1CON2bits.SEN = 1;
  9141                           
  9142                           ;incstack = 0
  9143                           ; Regs used in _I2C_MasterStart: []
  9144  05E6  0024               	movlb	4	; select bank4
  9145  05E7  1416               	bsf	22,0	;volatile
  9146  05E8  0008               	return
  9147  05E9                     __end_of_I2C_MasterStart:	
  9148                           
  9149                           	psect	text67
  9150  040E                     __ptext67:	
  9151 ;; *************** function _I2C_Close *****************
  9152 ;; Defined at:
  9153 ;;		line 209 in file "mcc_generated_files/i2c_master.c"
  9154 ;; Parameters:    Size  Location     Type
  9155 ;;		None
  9156 ;; Auto vars:     Size  Location     Type
  9157 ;;  returnValue     1    1[COMMON] enum E92
  9158 ;; Return value:  Size  Location     Type
  9159 ;;                  1    wreg      enum E92
  9160 ;; Registers used:
  9161 ;;		wreg, status,2, status,0, pclath, cstack
  9162 ;; Tracked objects:
  9163 ;;		On entry : 0/0
  9164 ;;		On exit  : 0/0
  9165 ;;		Unchanged: 0/0
  9166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9168 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9169 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9170 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9171 ;;Total ram usage:        2 bytes
  9172 ;; Hardware stack levels used:    1
  9173 ;; Hardware stack levels required when called:    1
  9174 ;; This function calls:
  9175 ;;		_I2C_MasterClearIrq
  9176 ;;		_I2C_MasterClose
  9177 ;;		_I2C_MasterDisableIrq
  9178 ;; This function is called by:
  9179 ;;		_I2C_Write1ByteRegister
  9180 ;;		_I2C_Read1ByteRegister
  9181 ;;		_I2C_Read2ByteRegister
  9182 ;;		_I2C_Write2ByteRegister
  9183 ;;		_I2C_WriteNBytes
  9184 ;;		_I2C_ReadNBytes
  9185 ;;		_I2C_ReadDataBlock
  9186 ;; This function uses a non-reentrant model
  9187 ;;
  9188                           
  9189                           
  9190                           ;psect for function _I2C_Close
  9191  040E                     _I2C_Close:	
  9192                           
  9193                           ;i2c_master.c: 211: i2c_error_t returnValue = I2C_BUSY;
  9194                           
  9195                           ;incstack = 0
  9196                           ; Regs used in _I2C_Close: [wreg+status,2+status,0+pclath+cstack]
  9197  040E  01F1               	clrf	I2C_Close@returnValue
  9198  040F  0AF1               	incf	I2C_Close@returnValue,f
  9199                           
  9200                           ;i2c_master.c: 212: if(!I2C_Status.busy)
  9201  0410  0020               	movlb	0	; select bank0
  9202  0411  18BC               	btfsc	_I2C_Status+28,1
  9203  0412  2C25               	goto	i1l2523
  9204                           
  9205                           ;i2c_master.c: 213: {
  9206                           ;i2c_master.c: 214: I2C_Status.inUse = 0;
  9207  0413  113C               	bcf	_I2C_Status+28,2
  9208                           
  9209                           ;i2c_master.c: 215: I2C_Status.address = 0xff;
  9210  0414  30FF               	movlw	255
  9211  0415  00F0               	movwf	??_I2C_Close
  9212  0416  0870               	movf	??_I2C_Close,w
  9213  0417  00B6               	movwf	_I2C_Status+22
  9214                           
  9215                           ;i2c_master.c: 216: I2C_MasterClearIrq();
  9216  0418  3185  25EF  3184   	fcall	_I2C_MasterClearIrq
  9217                           
  9218                           ;i2c_master.c: 217: I2C_MasterDisableIrq();
  9219  041B  3185  25E9  3184   	fcall	_I2C_MasterDisableIrq
  9220                           
  9221                           ;i2c_master.c: 218: I2C_MasterClose();
  9222  041E  3185  25EC         	fcall	_I2C_MasterClose
  9223                           
  9224                           ;i2c_master.c: 219: returnValue = I2C_Status.error;
  9225  0420  0020               	movlb	0	; select bank0
  9226  0421  083B               	movf	_I2C_Status+27,w
  9227  0422  00F0               	movwf	??_I2C_Close
  9228  0423  0870               	movf	??_I2C_Close,w
  9229  0424  00F1               	movwf	I2C_Close@returnValue
  9230  0425                     i1l2523:	
  9231                           
  9232                           ;i2c_master.c: 220: }
  9233                           ;i2c_master.c: 221: return returnValue;
  9234  0425  0871               	movf	I2C_Close@returnValue,w
  9235  0426  0008               	return
  9236  0427                     __end_of_I2C_Close:	
  9237                           
  9238                           	psect	text68
  9239  05E9                     __ptext68:	
  9240 ;; *************** function _I2C_MasterDisableIrq *****************
  9241 ;; Defined at:
  9242 ;;		line 635 in file "mcc_generated_files/i2c_master.c"
  9243 ;; Parameters:    Size  Location     Type
  9244 ;;		None
  9245 ;; Auto vars:     Size  Location     Type
  9246 ;;		None
  9247 ;; Return value:  Size  Location     Type
  9248 ;;                  1    wreg      void 
  9249 ;; Registers used:
  9250 ;;		None
  9251 ;; Tracked objects:
  9252 ;;		On entry : 0/0
  9253 ;;		On exit  : 0/0
  9254 ;;		Unchanged: 0/0
  9255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9259 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9260 ;;Total ram usage:        0 bytes
  9261 ;; Hardware stack levels used:    1
  9262 ;; This function calls:
  9263 ;;		Nothing
  9264 ;; This function is called by:
  9265 ;;		_I2C_Close
  9266 ;;		_I2C_SetTimeOut
  9267 ;; This function uses a non-reentrant model
  9268 ;;
  9269                           
  9270                           
  9271                           ;psect for function _I2C_MasterDisableIrq
  9272  05E9                     _I2C_MasterDisableIrq:	
  9273                           
  9274                           ;i2c_master.c: 637: PIE1bits.SSP1IE = 0;
  9275                           
  9276                           ;incstack = 0
  9277                           ; Regs used in _I2C_MasterDisableIrq: []
  9278  05E9  0021               	movlb	1	; select bank1
  9279  05EA  1190               	bcf	16,3	;volatile
  9280  05EB  0008               	return
  9281  05EC                     __end_of_I2C_MasterDisableIrq:	
  9282                           
  9283                           	psect	text69
  9284  05EC                     __ptext69:	
  9285 ;; *************** function _I2C_MasterClose *****************
  9286 ;; Defined at:
  9287 ;;		line 557 in file "mcc_generated_files/i2c_master.c"
  9288 ;; Parameters:    Size  Location     Type
  9289 ;;		None
  9290 ;; Auto vars:     Size  Location     Type
  9291 ;;		None
  9292 ;; Return value:  Size  Location     Type
  9293 ;;                  1    wreg      void 
  9294 ;; Registers used:
  9295 ;;		None
  9296 ;; Tracked objects:
  9297 ;;		On entry : 0/0
  9298 ;;		On exit  : 0/0
  9299 ;;		Unchanged: 0/0
  9300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9305 ;;Total ram usage:        0 bytes
  9306 ;; Hardware stack levels used:    1
  9307 ;; This function calls:
  9308 ;;		Nothing
  9309 ;; This function is called by:
  9310 ;;		_I2C_Close
  9311 ;; This function uses a non-reentrant model
  9312 ;;
  9313                           
  9314                           
  9315                           ;psect for function _I2C_MasterClose
  9316  05EC                     _I2C_MasterClose:	
  9317                           
  9318                           ;i2c_master.c: 560: SSP1CON1bits.SSPEN = 0;
  9319                           
  9320                           ;incstack = 0
  9321                           ; Regs used in _I2C_MasterClose: []
  9322  05EC  0024               	movlb	4	; select bank4
  9323  05ED  1295               	bcf	21,5	;volatile
  9324  05EE  0008               	return
  9325  05EF                     __end_of_I2C_MasterClose:	
  9326                           
  9327                           	psect	text70
  9328  05EF                     __ptext70:	
  9329 ;; *************** function _I2C_MasterClearIrq *****************
  9330 ;; Defined at:
  9331 ;;		line 640 in file "mcc_generated_files/i2c_master.c"
  9332 ;; Parameters:    Size  Location     Type
  9333 ;;		None
  9334 ;; Auto vars:     Size  Location     Type
  9335 ;;		None
  9336 ;; Return value:  Size  Location     Type
  9337 ;;                  1    wreg      void 
  9338 ;; Registers used:
  9339 ;;		None
  9340 ;; Tracked objects:
  9341 ;;		On entry : 0/0
  9342 ;;		On exit  : 0/0
  9343 ;;		Unchanged: 0/0
  9344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9349 ;;Total ram usage:        0 bytes
  9350 ;; Hardware stack levels used:    1
  9351 ;; This function calls:
  9352 ;;		Nothing
  9353 ;; This function is called by:
  9354 ;;		_I2C_Open
  9355 ;;		_I2C_Close
  9356 ;;		_I2C_MasterFsm
  9357 ;; This function uses a non-reentrant model
  9358 ;;
  9359                           
  9360                           
  9361                           ;psect for function _I2C_MasterClearIrq
  9362  05EF                     _I2C_MasterClearIrq:	
  9363                           
  9364                           ;i2c_master.c: 642: PIR1bits.SSP1IF = 0;
  9365                           
  9366                           ;incstack = 0
  9367                           ; Regs used in _I2C_MasterClearIrq: []
  9368  05EF  0020               	movlb	0	; select bank0
  9369  05F0  1190               	bcf	16,3	;volatile
  9370  05F1  0008               	return
  9371  05F2                     __end_of_I2C_MasterClearIrq:	
  9372                           
  9373                           	psect	text71
  9374  02AA                     __ptext71:	
  9375 ;; *************** function _EUSART_Receive_ISR *****************
  9376 ;; Defined at:
  9377 ;;		line 173 in file "mcc_generated_files/eusart.c"
  9378 ;; Parameters:    Size  Location     Type
  9379 ;;		None
  9380 ;; Auto vars:     Size  Location     Type
  9381 ;;		None
  9382 ;; Return value:  Size  Location     Type
  9383 ;;                  1    wreg      void 
  9384 ;; Registers used:
  9385 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9386 ;; Tracked objects:
  9387 ;;		On entry : 0/0
  9388 ;;		On exit  : 0/0
  9389 ;;		Unchanged: 0/0
  9390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9395 ;;Total ram usage:        0 bytes
  9396 ;; Hardware stack levels used:    1
  9397 ;; Hardware stack levels required when called:    2
  9398 ;; This function calls:
  9399 ;;		Absolute function
  9400 ;;		_EUSART_DefaultErrorHandler
  9401 ;;		_EUSART_DefaultFramingErrorHandler
  9402 ;;		_EUSART_DefaultOverrunErrorHandler
  9403 ;;		_EUSART_RxDataHandler
  9404 ;; This function is called by:
  9405 ;;		_EUSART_Initialize
  9406 ;;		_INTERRUPT_InterruptManager
  9407 ;; This function uses a non-reentrant model
  9408 ;;
  9409                           
  9410                           
  9411                           ;psect for function _EUSART_Receive_ISR
  9412  02AA                     _EUSART_Receive_ISR:	
  9413                           
  9414                           ;eusart.c: 176: eusartRxStatusBuffer[eusartRxHead].status = 0;
  9415                           
  9416                           ;incstack = 0
  9417                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9418  02AA  0020               	movlb	0	; select bank0
  9419  02AB  0856               	movf	_eusartRxHead,w	;volatile
  9420  02AC  3E3D               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  9421  02AD  0086               	movwf	6
  9422  02AE  0187               	clrf	7
  9423  02AF  0181               	clrf	1
  9424                           
  9425                           ;eusart.c: 178: if(RC1STAbits.FERR){
  9426  02B0  0023               	movlb	3	; select bank3
  9427  02B1  1D1D               	btfss	29,2	;volatile
  9428  02B2  2ABF               	goto	i1l2727
  9429                           
  9430                           ;eusart.c: 179: eusartRxStatusBuffer[eusartRxHead].ferr = 1;
  9431  02B3  0020               	movlb	0	; select bank0
  9432  02B4  0856               	movf	_eusartRxHead,w	;volatile
  9433  02B5  3E3D               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  9434  02B6  0086               	movwf	6
  9435  02B7  0187               	clrf	7
  9436  02B8  1481               	bsf	1,1
  9437                           
  9438                           ;eusart.c: 180: EUSART_FramingErrorHandler();
  9439  02B9  0021               	movlb	1	; select bank1
  9440  02BA  0825               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
  9441  02BB  008A               	movwf	10
  9442  02BC  0824               	movf	_EUSART_FramingErrorHandler^(0+128),w
  9443  02BD  000A               	callw
  9444  02BE  3182               	pagesel	$
  9445  02BF                     i1l2727:	
  9446                           
  9447                           ;eusart.c: 181: }
  9448                           ;eusart.c: 183: if(RC1STAbits.OERR){
  9449  02BF  0023               	movlb	3	; select bank3
  9450  02C0  1C9D               	btfss	29,1	;volatile
  9451  02C1  2ACE               	goto	i1l2733
  9452                           
  9453                           ;eusart.c: 184: eusartRxStatusBuffer[eusartRxHead].oerr = 1;
  9454  02C2  0020               	movlb	0	; select bank0
  9455  02C3  0856               	movf	_eusartRxHead,w	;volatile
  9456  02C4  3E3D               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  9457  02C5  0086               	movwf	6
  9458  02C6  0187               	clrf	7
  9459  02C7  1501               	bsf	1,2
  9460                           
  9461                           ;eusart.c: 185: EUSART_OverrunErrorHandler();
  9462  02C8  0021               	movlb	1	; select bank1
  9463  02C9  0823               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
  9464  02CA  008A               	movwf	10
  9465  02CB  0822               	movf	_EUSART_OverrunErrorHandler^(0+128),w
  9466  02CC  000A               	callw
  9467  02CD  3182               	pagesel	$
  9468  02CE                     i1l2733:	
  9469                           
  9470                           ;eusart.c: 186: }
  9471                           ;eusart.c: 188: if(eusartRxStatusBuffer[eusartRxHead].status){
  9472  02CE  0020               	movlb	0	; select bank0
  9473  02CF  0856               	movf	_eusartRxHead,w	;volatile
  9474  02D0  3E3D               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  9475  02D1  0086               	movwf	6
  9476  02D2  0187               	clrf	7
  9477  02D3  0801               	movf	1,w
  9478  02D4  1903               	btfsc	3,2
  9479  02D5  2ADD               	goto	i1l2737
  9480                           
  9481                           ;eusart.c: 189: EUSART_ErrorHandler();
  9482  02D6  0021               	movlb	1	; select bank1
  9483  02D7  0821               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
  9484  02D8  008A               	movwf	10
  9485  02D9  0820               	movf	_EUSART_ErrorHandler^(0+128),w
  9486  02DA  000A               	callw
  9487  02DB  3182               	pagesel	$
  9488                           
  9489                           ;eusart.c: 190: } else {
  9490  02DC  0008               	return
  9491  02DD                     i1l2737:	
  9492                           
  9493                           ;eusart.c: 191: EUSART_RxDataHandler();
  9494  02DD  3184  243E         	fcall	_EUSART_RxDataHandler
  9495  02DF  0008               	return
  9496  02E0                     __end_of_EUSART_Receive_ISR:	
  9497                           
  9498                           	psect	text72
  9499  0041                     __ptext72:	
  9500 ;; *************** function _MyUART_ISR *****************
  9501 ;; Defined at:
  9502 ;;		line 97 in file "main.c"
  9503 ;; Parameters:    Size  Location     Type
  9504 ;;		None
  9505 ;; Auto vars:     Size  Location     Type
  9506 ;;  c               1    5[COMMON] unsigned char 
  9507 ;; Return value:  Size  Location     Type
  9508 ;;                  1    wreg      void 
  9509 ;; Registers used:
  9510 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9511 ;; Tracked objects:
  9512 ;;		On entry : 0/0
  9513 ;;		On exit  : 0/0
  9514 ;;		Unchanged: 0/0
  9515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9517 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9518 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9519 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9520 ;;Total ram usage:        5 bytes
  9521 ;; Hardware stack levels used:    1
  9522 ;; Hardware stack levels required when called:    1
  9523 ;; This function calls:
  9524 ;;		_EUSART_Write
  9525 ;; This function is called by:
  9526 ;;		_main
  9527 ;;		_INTERRUPT_InterruptManager
  9528 ;; This function uses a non-reentrant model
  9529 ;;
  9530                           
  9531                           
  9532                           ;psect for function _MyUART_ISR
  9533  0041                     _MyUART_ISR:	
  9534                           
  9535                           ;main.c: 98: unsigned char c = RC1REG;
  9536                           
  9537                           ;incstack = 0
  9538                           ; Regs used in _MyUART_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9539  0041  0023               	movlb	3	; select bank3
  9540  0042  0819               	movf	25,w	;volatile
  9541  0043  00F1               	movwf	??_MyUART_ISR
  9542  0044  0871               	movf	??_MyUART_ISR,w
  9543  0045  00F5               	movwf	MyUART_ISR@c
  9544                           
  9545                           ;main.c: 99: if(c) {
  9546  0046  0875               	movf	MyUART_ISR@c,w
  9547  0047  1903               	btfsc	3,2
  9548  0048  0008               	return
  9549  0049  28EC               	goto	i1l2799
  9550  004A                     i1l2749:	
  9551                           ;main.c: 101: case S_Idle:
  9552                           
  9553                           ;main.c: 100: switch(PosUart) {
  9554                           
  9555                           
  9556                           ;main.c: 102: if(c == 'V' || c == 'A' || c == 'P' || c == 'L') {
  9557  004A  3056               	movlw	86
  9558  004B  0675               	xorwf	MyUART_ISR@c,w
  9559  004C  1903               	btfsc	3,2
  9560  004D  285A               	goto	i1l2757
  9561  004E  3041               	movlw	65
  9562  004F  0675               	xorwf	MyUART_ISR@c,w
  9563  0050  1903               	btfsc	3,2
  9564  0051  285A               	goto	i1l2757
  9565  0052  3050               	movlw	80
  9566  0053  0675               	xorwf	MyUART_ISR@c,w
  9567  0054  1903               	btfsc	3,2
  9568  0055  285A               	goto	i1l2757
  9569  0056  304C               	movlw	76
  9570  0057  0675               	xorwf	MyUART_ISR@c,w
  9571  0058  1D03               	btfss	3,2
  9572  0059  0008               	return
  9573  005A                     i1l2757:	
  9574                           
  9575                           ;main.c: 103: Type = c;
  9576  005A  0875               	movf	MyUART_ISR@c,w
  9577  005B  00F1               	movwf	??_MyUART_ISR
  9578  005C  0871               	movf	??_MyUART_ISR,w
  9579  005D  0020               	movlb	0	; select bank0
  9580  005E  00D1               	movwf	_Type
  9581                           
  9582                           ;main.c: 104: PosUart = S_Data;
  9583  005F  01D0               	clrf	_PosUart
  9584  0060  0AD0               	incf	_PosUart,f
  9585                           
  9586                           ;main.c: 105: }
  9587                           ;main.c: 106: break;
  9588  0061  0008               	return
  9589  0062                     i1l2761:	
  9590                           ;main.c: 107: case S_Data:
  9591                           
  9592                           
  9593                           ;main.c: 108: Data = c;
  9594  0062  0875               	movf	MyUART_ISR@c,w
  9595  0063  00F1               	movwf	??_MyUART_ISR
  9596  0064  0871               	movf	??_MyUART_ISR,w
  9597  0065  00D2               	movwf	_Data
  9598                           
  9599                           ;main.c: 109: PosUart = S_Check;
  9600  0066  3002               	movlw	2
  9601  0067  00F1               	movwf	??_MyUART_ISR
  9602  0068  0871               	movf	??_MyUART_ISR,w
  9603  0069  00D0               	movwf	_PosUart
  9604                           
  9605                           ;main.c: 110: break;
  9606  006A  0008               	return
  9607  006B                     i1l2763:	
  9608                           ;main.c: 111: case S_Check:
  9609                           
  9610                           
  9611                           ;main.c: 112: if((Type+Data)%256 == c) {
  9612  006B  0851               	movf	_Type,w
  9613  006C  0752               	addwf	_Data,w
  9614  006D  00F1               	movwf	??_MyUART_ISR
  9615  006E  01F2               	clrf	??_MyUART_ISR+1
  9616  006F  0DF2               	rlf	??_MyUART_ISR+1,f
  9617  0070  30FF               	movlw	255
  9618  0071  0571               	andwf	??_MyUART_ISR,w
  9619  0072  00F3               	movwf	??_MyUART_ISR+2
  9620  0073  3000               	movlw	0
  9621  0074  0572               	andwf	??_MyUART_ISR+1,w
  9622  0075  00F4               	movwf	??_MyUART_ISR+3
  9623  0076  0875               	movf	MyUART_ISR@c,w
  9624  0077  0673               	xorwf	??_MyUART_ISR+2,w
  9625  0078  0474               	iorwf	??_MyUART_ISR+3,w
  9626  0079  1D03               	skipz
  9627  007A  28DC               	goto	i1l2791
  9628                           
  9629                           ;main.c: 113: Validation = 4;
  9630  007B  3004               	movlw	4
  9631  007C  00F1               	movwf	??_MyUART_ISR
  9632  007D  0871               	movf	??_MyUART_ISR,w
  9633  007E  00EA               	movwf	_Validation
  9634                           
  9635                           ;main.c: 114: if(Type == 'V') {
  9636  007F  3056               	movlw	86
  9637  0080  0651               	xorwf	_Type,w
  9638  0081  1D03               	btfss	3,2
  9639  0082  288B               	goto	i1l2771
  9640                           
  9641                           ;main.c: 115: Vitesse = Data;
  9642  0083  0852               	movf	_Data,w
  9643  0084  00F1               	movwf	??_MyUART_ISR
  9644  0085  01F2               	clrf	??_MyUART_ISR+1
  9645  0086  0871               	movf	??_MyUART_ISR,w
  9646  0087  00CD               	movwf	_Vitesse
  9647  0088  0872               	movf	??_MyUART_ISR+1,w
  9648  0089  00CE               	movwf	_Vitesse+1
  9649                           
  9650                           ;main.c: 116: } else if(Type == 'A') {
  9651  008A  28E7               	goto	i1l2793
  9652  008B                     i1l2771:	
  9653  008B  3041               	movlw	65
  9654  008C  0651               	xorwf	_Type,w
  9655  008D  1D03               	btfss	3,2
  9656  008E  2897               	goto	i1l2775
  9657                           
  9658                           ;main.c: 117: Angle = Data;
  9659  008F  0852               	movf	_Data,w
  9660  0090  00F1               	movwf	??_MyUART_ISR
  9661  0091  01F2               	clrf	??_MyUART_ISR+1
  9662  0092  0871               	movf	??_MyUART_ISR,w
  9663  0093  00E7               	movwf	_Angle
  9664  0094  0872               	movf	??_MyUART_ISR+1,w
  9665  0095  00E8               	movwf	_Angle+1
  9666                           
  9667                           ;main.c: 118: } else if(Type == 'P') {
  9668  0096  28E7               	goto	i1l2793
  9669  0097                     i1l2775:	
  9670  0097  3050               	movlw	80
  9671  0098  0651               	xorwf	_Type,w
  9672  0099  1D03               	btfss	3,2
  9673  009A  28A5               	goto	i1l2779
  9674                           
  9675                           ;main.c: 119: EUSART_Write('P');
  9676  009B  3050               	movlw	80
  9677  009C  3185  2548  3180   	fcall	_EUSART_Write
  9678                           
  9679                           ;main.c: 120: EUSART_Write('+');
  9680  009F  302B               	movlw	43
  9681  00A0  3185  2548  3180   	fcall	_EUSART_Write
  9682                           
  9683                           ;main.c: 121: EUSART_Write('{');
  9684  00A3  307B               	movlw	123
  9685  00A4  28E5               	goto	L2
  9686  00A5                     i1l2779:	
  9687                           ;main.c: 122: } else if(Type == 'L') {
  9688                           
  9689  00A5  304C               	movlw	76
  9690  00A6  0020               	movlb	0	; select bank0
  9691  00A7  0651               	xorwf	_Type,w
  9692  00A8  1D03               	btfss	3,2
  9693  00A9  28D2               	goto	i1l2789
  9694                           
  9695                           ;main.c: 123: StateLeds++;
  9696  00AA  3001               	movlw	1
  9697  00AB  00F1               	movwf	??_MyUART_ISR
  9698  00AC  0871               	movf	??_MyUART_ISR,w
  9699  00AD  07CF               	addwf	_StateLeds,f
  9700                           
  9701                           ;main.c: 124: switch(StateLeds) {
  9702  00AE  28C3               	goto	i1l2787
  9703  00AF                     i1l841:	
  9704                           ;main.c: 126: do { LATCbits.LATC6 = 0; } while(0);
  9705                           
  9706                           ;main.c: 125: case S_leds_off:
  9707                           
  9708  00AF  0022               	movlb	2	; select bank2
  9709  00B0  130E               	bcf	14,6	;volatile
  9710  00B1  28B4               	goto	i1l849
  9711  00B2                     i1l847:	
  9712                           ;main.c: 130: do { LATCbits.LATC6 = 1; } while(0);
  9713                           
  9714                           ;main.c: 129: case S_led_r:
  9715                           
  9716                           ;main.c: 128: break;
  9717                           
  9718                           ;main.c: 127: do { LATCbits.LATC7 = 0; } while(0);
  9719                           
  9720  00B2  0022               	movlb	2	; select bank2
  9721  00B3  170E               	bsf	14,6	;volatile
  9722  00B4                     i1l849:	
  9723                           ;main.c: 131: do { LATCbits.LATC7 = 0; } while(0);
  9724                           
  9725  00B4  138E               	bcf	14,7	;volatile
  9726                           
  9727                           ;main.c: 132: break;
  9728  00B5  28E7               	goto	i1l2793
  9729  00B6                     i1l852:	
  9730                           ;main.c: 134: do { LATCbits.LATC6 = 0; } while(0);
  9731                           
  9732                           ;main.c: 133: case S_led_l:
  9733                           
  9734  00B6  0022               	movlb	2	; select bank2
  9735  00B7  130E               	bcf	14,6	;volatile
  9736  00B8  28BB               	goto	i1l859
  9737  00B9                     i1l857:	
  9738                           ;main.c: 138: do { LATCbits.LATC6 = 1; } while(0);
  9739                           
  9740                           ;main.c: 137: case S_leds_on:
  9741                           
  9742                           ;main.c: 136: break;
  9743                           
  9744                           ;main.c: 135: do { LATCbits.LATC7 = 1; } while(0);
  9745                           
  9746  00B9  0022               	movlb	2	; select bank2
  9747  00BA  170E               	bsf	14,6	;volatile
  9748  00BB                     i1l859:	
  9749                           ;main.c: 139: do { LATCbits.LATC7 = 1; } while(0);
  9750                           
  9751  00BB  178E               	bsf	14,7	;volatile
  9752                           
  9753                           ;main.c: 140: break;
  9754  00BC  28E7               	goto	i1l2793
  9755  00BD                     i1l862:	
  9756                           ;main.c: 142: do { LATCbits.LATC6 = 0; } while(0);
  9757                           
  9758                           ;main.c: 141: default:
  9759                           
  9760  00BD  0022               	movlb	2	; select bank2
  9761  00BE  130E               	bcf	14,6	;volatile
  9762                           
  9763                           ;main.c: 143: do { LATCbits.LATC7 = 0; } while(0);
  9764  00BF  138E               	bcf	14,7	;volatile
  9765                           
  9766                           ;main.c: 144: StateLeds = S_leds_off;
  9767  00C0  0020               	movlb	0	; select bank0
  9768  00C1  01CF               	clrf	_StateLeds
  9769                           
  9770                           ;main.c: 146: }
  9771                           
  9772                           ;main.c: 145: break;
  9773  00C2  28E7               	goto	i1l2793
  9774  00C3                     i1l2787:	
  9775  00C3  084F               	movf	_StateLeds,w
  9776                           
  9777                           ; Switch size 1, requested type "space"
  9778                           ; Number of cases is 4, Range of values is 0 to 3
  9779                           ; switch strategies available:
  9780                           ; Name         Instructions Cycles
  9781                           ; simple_byte           13     7 (average)
  9782                           ; direct_byte           14     6 (fixed)
  9783                           ; jumptable            260     6 (fixed)
  9784                           ;	Chosen strategy is simple_byte
  9785  00C4  3A00               	xorlw	0	; case 0
  9786  00C5  1903               	skipnz
  9787  00C6  28AF               	goto	i1l841
  9788  00C7  3A01               	xorlw	1	; case 1
  9789  00C8  1903               	skipnz
  9790  00C9  28B2               	goto	i1l847
  9791  00CA  3A03               	xorlw	3	; case 2
  9792  00CB  1903               	skipnz
  9793  00CC  28B6               	goto	i1l852
  9794  00CD  3A01               	xorlw	1	; case 3
  9795  00CE  1903               	skipnz
  9796  00CF  28B9               	goto	i1l857
  9797  00D0  28BD               	goto	i1l862
  9798                           
  9799                           ;main.c: 147: } else {
  9800  00D1  28E7               	goto	i1l2793
  9801  00D2                     i1l2789:	
  9802                           
  9803                           ;main.c: 148: EUSART_Write('$');
  9804  00D2  3024               	movlw	36
  9805  00D3  3185  2548  3180   	fcall	_EUSART_Write
  9806                           
  9807                           ;main.c: 149: EUSART_Write('M');
  9808  00D6  304D               	movlw	77
  9809  00D7  3185  2548  3180   	fcall	_EUSART_Write
  9810                           
  9811                           ;main.c: 150: EUSART_Write('q');
  9812  00DA  3071               	movlw	113
  9813  00DB  28E5               	goto	L2
  9814  00DC                     i1l2791:	
  9815                           ;main.c: 151: }
  9816                           ;main.c: 152: } else {
  9817                           
  9818                           
  9819                           ;main.c: 153: EUSART_Write('$');
  9820  00DC  3024               	movlw	36
  9821  00DD  3185  2548  3180   	fcall	_EUSART_Write
  9822                           
  9823                           ;main.c: 154: EUSART_Write('C');
  9824  00E0  3043               	movlw	67
  9825  00E1  3185  2548  3180   	fcall	_EUSART_Write
  9826                           
  9827                           ;main.c: 155: EUSART_Write('g');
  9828  00E4  3067               	movlw	103
  9829  00E5                     L2:	
  9830  00E5  3185  2548         	fcall	_EUSART_Write
  9831  00E7                     i1l2793:	
  9832                           
  9833                           ;main.c: 156: }
  9834                           ;main.c: 157: PosUart = S_Idle;
  9835  00E7  0020               	movlb	0	; select bank0
  9836  00E8  01D0               	clrf	_PosUart
  9837                           
  9838                           ;main.c: 158: break;
  9839  00E9  0008               	return
  9840  00EA                     i1l2795:	
  9841                           ;main.c: 159: default:
  9842                           
  9843                           
  9844                           ;main.c: 160: PosUart = S_Idle;
  9845  00EA  01D0               	clrf	_PosUart
  9846                           
  9847                           ;main.c: 162: }
  9848                           
  9849                           ;main.c: 161: break;
  9850  00EB  0008               	return
  9851  00EC                     i1l2799:	
  9852  00EC  0020               	movlb	0	; select bank0
  9853  00ED  0850               	movf	_PosUart,w
  9854                           
  9855                           ; Switch size 1, requested type "space"
  9856                           ; Number of cases is 3, Range of values is 0 to 2
  9857                           ; switch strategies available:
  9858                           ; Name         Instructions Cycles
  9859                           ; simple_byte           10     6 (average)
  9860                           ; direct_byte           12     6 (fixed)
  9861                           ; jumptable            260     6 (fixed)
  9862                           ;	Chosen strategy is simple_byte
  9863  00EE  3A00               	xorlw	0	; case 0
  9864  00EF  1903               	skipnz
  9865  00F0  284A               	goto	i1l2749
  9866  00F1  3A01               	xorlw	1	; case 1
  9867  00F2  1903               	skipnz
  9868  00F3  2862               	goto	i1l2761
  9869  00F4  3A03               	xorlw	3	; case 2
  9870  00F5  1903               	skipnz
  9871  00F6  286B               	goto	i1l2763
  9872  00F7  28EA               	goto	i1l2795
  9873  00F8  0008               	return
  9874  00F9                     __end_of_MyUART_ISR:	
  9875                           
  9876                           	psect	text73
  9877  0548                     __ptext73:	
  9878 ;; *************** function _EUSART_Write *****************
  9879 ;; Defined at:
  9880 ;;		line 162 in file "mcc_generated_files/eusart.c"
  9881 ;; Parameters:    Size  Location     Type
  9882 ;;  txData          1    wreg     unsigned char 
  9883 ;; Auto vars:     Size  Location     Type
  9884 ;;  txData          1    0[COMMON] unsigned char 
  9885 ;; Return value:  Size  Location     Type
  9886 ;;                  1    wreg      void 
  9887 ;; Registers used:
  9888 ;;		wreg
  9889 ;; Tracked objects:
  9890 ;;		On entry : 0/0
  9891 ;;		On exit  : 0/0
  9892 ;;		Unchanged: 0/0
  9893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9895 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9897 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9898 ;;Total ram usage:        1 bytes
  9899 ;; Hardware stack levels used:    1
  9900 ;; This function calls:
  9901 ;;		Nothing
  9902 ;; This function is called by:
  9903 ;;		_MyTimer2ISR
  9904 ;;		_MyUART_ISR
  9905 ;; This function uses a non-reentrant model
  9906 ;;
  9907                           
  9908                           
  9909                           ;psect for function _EUSART_Write
  9910  0548                     _EUSART_Write:	
  9911                           
  9912                           ;incstack = 0
  9913                           ; Regs used in _EUSART_Write: [wreg]
  9914                           ;EUSART_Write@txData stored from wreg
  9915  0548  00F0               	movwf	EUSART_Write@txData
  9916  0549                     i1l635:	
  9917                           ;eusart.c: 165: {
  9918                           
  9919                           ;eusart.c: 164: while(0 == PIR1bits.TXIF)
  9920                           
  9921  0549  0020               	movlb	0	; select bank0
  9922  054A  1E10               	btfss	16,4	;volatile
  9923  054B  2D49               	goto	i1l635
  9924                           
  9925                           ;eusart.c: 166: }
  9926                           ;eusart.c: 168: TX1REG = txData;
  9927  054C  0870               	movf	EUSART_Write@txData,w
  9928  054D  0023               	movlb	3	; select bank3
  9929  054E  009A               	movwf	26	;volatile
  9930  054F  0008               	return
  9931  0550                     __end_of_EUSART_Write:	
  9932                           
  9933                           	psect	text74
  9934  05CD                     __ptext74:	
  9935 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
  9936 ;; Defined at:
  9937 ;;		line 209 in file "mcc_generated_files/eusart.c"
  9938 ;; Parameters:    Size  Location     Type
  9939 ;;		None
  9940 ;; Auto vars:     Size  Location     Type
  9941 ;;		None
  9942 ;; Return value:  Size  Location     Type
  9943 ;;                  1    wreg      void 
  9944 ;; Registers used:
  9945 ;;		None
  9946 ;; Tracked objects:
  9947 ;;		On entry : 0/0
  9948 ;;		On exit  : 0/0
  9949 ;;		Unchanged: 0/0
  9950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9955 ;;Total ram usage:        0 bytes
  9956 ;; Hardware stack levels used:    1
  9957 ;; This function calls:
  9958 ;;		Nothing
  9959 ;; This function is called by:
  9960 ;;		_EUSART_Initialize
  9961 ;;		_EUSART_Receive_ISR
  9962 ;; This function uses a non-reentrant model
  9963 ;;
  9964                           
  9965                           
  9966                           ;psect for function _EUSART_DefaultOverrunErrorHandler
  9967  05CD                     _EUSART_DefaultOverrunErrorHandler:	
  9968                           
  9969                           ;eusart.c: 212: RC1STAbits.CREN = 0;
  9970                           
  9971                           ;incstack = 0
  9972                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
  9973  05CD  0023               	movlb	3	; select bank3
  9974  05CE  121D               	bcf	29,4	;volatile
  9975                           
  9976                           ;eusart.c: 213: RC1STAbits.CREN = 1;
  9977  05CF  161D               	bsf	29,4	;volatile
  9978  05D0  0008               	return
  9979  05D1                     __end_of_EUSART_DefaultOverrunErrorHandler:	
  9980                           
  9981                           	psect	text75
  9982  05FA                     __ptext75:	
  9983 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
  9984 ;; Defined at:
  9985 ;;		line 207 in file "mcc_generated_files/eusart.c"
  9986 ;; Parameters:    Size  Location     Type
  9987 ;;		None
  9988 ;; Auto vars:     Size  Location     Type
  9989 ;;		None
  9990 ;; Return value:  Size  Location     Type
  9991 ;;                  1    wreg      void 
  9992 ;; Registers used:
  9993 ;;		None
  9994 ;; Tracked objects:
  9995 ;;		On entry : 0/0
  9996 ;;		On exit  : 0/0
  9997 ;;		Unchanged: 0/0
  9998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10002 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10003 ;;Total ram usage:        0 bytes
 10004 ;; Hardware stack levels used:    1
 10005 ;; This function calls:
 10006 ;;		Nothing
 10007 ;; This function is called by:
 10008 ;;		_EUSART_Initialize
 10009 ;;		_EUSART_Receive_ISR
 10010 ;; This function uses a non-reentrant model
 10011 ;;
 10012                           
 10013                           
 10014                           ;psect for function _EUSART_DefaultFramingErrorHandler
 10015  05FA                     _EUSART_DefaultFramingErrorHandler:	
 10016                           
 10017                           ;incstack = 0
 10018                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 10019  05FA  0008               	return
 10020  05FB                     __end_of_EUSART_DefaultFramingErrorHandler:	
 10021                           
 10022                           	psect	text76
 10023  05F2                     __ptext76:	
 10024 ;; *************** function _EUSART_DefaultErrorHandler *****************
 10025 ;; Defined at:
 10026 ;;		line 217 in file "mcc_generated_files/eusart.c"
 10027 ;; Parameters:    Size  Location     Type
 10028 ;;		None
 10029 ;; Auto vars:     Size  Location     Type
 10030 ;;		None
 10031 ;; Return value:  Size  Location     Type
 10032 ;;                  1    wreg      void 
 10033 ;; Registers used:
 10034 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10035 ;; Tracked objects:
 10036 ;;		On entry : 0/0
 10037 ;;		On exit  : 0/0
 10038 ;;		Unchanged: 0/0
 10039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10043 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10044 ;;Total ram usage:        0 bytes
 10045 ;; Hardware stack levels used:    1
 10046 ;; Hardware stack levels required when called:    1
 10047 ;; This function calls:
 10048 ;;		_EUSART_RxDataHandler
 10049 ;; This function is called by:
 10050 ;;		_EUSART_Initialize
 10051 ;;		_EUSART_Receive_ISR
 10052 ;; This function uses a non-reentrant model
 10053 ;;
 10054                           
 10055                           
 10056                           ;psect for function _EUSART_DefaultErrorHandler
 10057  05F2                     _EUSART_DefaultErrorHandler:	
 10058                           
 10059                           ;eusart.c: 218: EUSART_RxDataHandler();
 10060                           
 10061                           ;incstack = 0
 10062                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10063  05F2  3184  243E         	fcall	_EUSART_RxDataHandler
 10064  05F4  0008               	return
 10065  05F5                     __end_of_EUSART_DefaultErrorHandler:	
 10066                           
 10067                           	psect	text77
 10068  043E                     __ptext77:	
 10069 ;; *************** function _EUSART_RxDataHandler *****************
 10070 ;; Defined at:
 10071 ;;		line 197 in file "mcc_generated_files/eusart.c"
 10072 ;; Parameters:    Size  Location     Type
 10073 ;;		None
 10074 ;; Auto vars:     Size  Location     Type
 10075 ;;		None
 10076 ;; Return value:  Size  Location     Type
 10077 ;;                  1    wreg      void 
 10078 ;; Registers used:
 10079 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10080 ;; Tracked objects:
 10081 ;;		On entry : 0/0
 10082 ;;		On exit  : 0/0
 10083 ;;		Unchanged: 0/0
 10084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10087 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10088 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10089 ;;Total ram usage:        1 bytes
 10090 ;; Hardware stack levels used:    1
 10091 ;; This function calls:
 10092 ;;		Nothing
 10093 ;; This function is called by:
 10094 ;;		_EUSART_Receive_ISR
 10095 ;;		_EUSART_DefaultErrorHandler
 10096 ;; This function uses a non-reentrant model
 10097 ;;
 10098                           
 10099                           
 10100                           ;psect for function _EUSART_RxDataHandler
 10101  043E                     _EUSART_RxDataHandler:	
 10102                           
 10103                           ;eusart.c: 199: eusartRxBuffer[eusartRxHead++] = RC1REG;
 10104                           
 10105                           ;incstack = 0
 10106                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 10107  043E  0023               	movlb	3	; select bank3
 10108  043F  0819               	movf	25,w	;volatile
 10109  0440  00F0               	movwf	??_EUSART_RxDataHandler
 10110  0441  0020               	movlb	0	; select bank0
 10111  0442  0856               	movf	_eusartRxHead,w
 10112  0443  3E45               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 10113  0444  0086               	movwf	6
 10114  0445  0187               	clrf	7
 10115  0446  0870               	movf	??_EUSART_RxDataHandler,w
 10116  0447  0081               	movwf	1
 10117  0448  3001               	movlw	1
 10118  0449  00F0               	movwf	??_EUSART_RxDataHandler
 10119  044A  0870               	movf	??_EUSART_RxDataHandler,w
 10120  044B  07D6               	addwf	_eusartRxHead,f	;volatile
 10121                           
 10122                           ;eusart.c: 200: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 10123  044C  3008               	movlw	8
 10124  044D  0256               	subwf	_eusartRxHead,w	;volatile
 10125  044E  1803               	btfsc	3,0
 10126                           
 10127                           ;eusart.c: 201: {
 10128                           ;eusart.c: 202: eusartRxHead = 0;
 10129  044F  01D6               	clrf	_eusartRxHead	;volatile
 10130                           
 10131                           ;eusart.c: 203: }
 10132                           ;eusart.c: 204: eusartRxCount++;
 10133  0450  3001               	movlw	1
 10134  0451  00F0               	movwf	??_EUSART_RxDataHandler
 10135  0452  0870               	movf	??_EUSART_RxDataHandler,w
 10136  0453  07D4               	addwf	_eusartRxCount,f	;volatile
 10137  0454  0008               	return
 10138  0455                     __end_of_EUSART_RxDataHandler:	
 10139  007E                     btemp	set	126	;btemp
 10140  007E                     int$flags	set	126
 10141  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    32
    Data        4
    BSS         55
    Persistent  10
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     12      75
    BANK1            80      4      10
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    I2C_Read1ByteRegister@returnValue.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Read2ByteRegister@returnValue.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Write1ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Write2ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    I2C_DO_TX$1909$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_RX$1915$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX_EMPTY$1921$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_RX_EMPTY$1927$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX_EMPTY$1926	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX_EMPTY$1921	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_DO_RX$1920	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_RX$1915	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_DO_TX$1914	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX$1909	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_MasterFsm$1908	const PTR FTN()enum E12103 size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    I2C_CallbackReturnStop@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_CallbackReturnReset@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    Absolute function$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S443$0$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyTimer2ISR(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyTimer2ISR(), TMR2_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyUART_ISR(), EUSART_Receive_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), Absolute function(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), Absolute function(), 

    I2C_SetCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_SetCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> Absolute function(), rd1RegCompleteHandler(), 

    I2C_SetAddressNackCallback@ptr	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    I2C_SetAddressNackCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> Absolute function(), 

    I2C_SetDataCompleteCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_SetDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> Absolute function(), rd1RegCompleteHandler(), 

    I2C_SetBuffer@buffer	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(BANK0[1]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S443$data_ptr	PTR unsigned char  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(BANK0[1]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_Status.data_ptr	PTR unsigned char  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(BANK0[1]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S443$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_Status.callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S443$callbackTable	PTR FTN(PTR void ,)enum E97[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_Status.callbackTable	PTR FTN(PTR void ,)enum E97[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    fsmStateTable	const PTR FTN()enum E12103[16] size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyUART_ISR(), EUSART_Receive_ISR(), Absolute function(), 

    rdBlkRegCompleteHandler@ptr.data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    wr2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    wr1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    rd2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    rd1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S85$data	PTR unsigned char  size(1) Largest target is 0

    bufferBlock.data	PTR unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _I2C_SetAddressNackCallback->_I2C_SetCallback
    _I2C_MasterWrite->_I2C_MasterOperation
    _I2C_MasterFsm->_I2C_DO_TX
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnReset
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnStop
    _I2C_DO_TX_EMPTY->_rd1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rd2RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rdBlkRegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr2RegCompleteHandler
    _I2C_DO_TX->_I2C_CallbackReturnReset
    _I2C_DO_TX->_I2C_CallbackReturnStop
    _I2C_DO_TX->_rd1RegCompleteHandler
    _I2C_DO_TX->_rd2RegCompleteHandler
    _I2C_DO_TX->_rdBlkRegCompleteHandler
    _I2C_DO_TX->_wr1RegCompleteHandler
    _I2C_DO_TX->_wr2RegCompleteHandler
    _I2C_DO_SEND_ADR_WRITE->_I2C_MasterSendTxData
    _I2C_DO_RX->_I2C_CallbackReturnReset
    _I2C_DO_RX->_I2C_CallbackReturnStop
    _I2C_DO_RX->_rd1RegCompleteHandler
    _I2C_DO_RX->_rd2RegCompleteHandler
    _I2C_DO_RX->_rdBlkRegCompleteHandler
    _I2C_DO_RX->_wr1RegCompleteHandler
    _I2C_DO_RX->_wr2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnReset
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnStop
    _I2C_DO_ADDRESS_NACK->_rd1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rd2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rdBlkRegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr2RegCompleteHandler
    _wr2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _wr1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rdBlkRegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _I2C_SetDataCompleteCallback->_I2C_SetCallback
    _MyUART_ISR->_EUSART_Write
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _TMR2_ISR->_MyTimer2ISR
    _MyTimer2ISR->_I2C_Write1ByteRegister
    _I2C_MasterWrite->_I2C_MasterOperation
    _I2C_Poller->_I2C_MasterFsm

Critical Paths under _main in BANK1

    _main->_EUSART_SetRxInterruptHandler
    _main->_TMR2_SetInterruptHandler
    _main->_TMR2_WriteTimer
    _TMR2_WriteTimer->_TMR2_Counter8BitSet
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1269
                                              2 BANK1      2     2      0
       _EUSART_SetRxInterruptHandler
                  _SYSTEM_Initialize
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
                    _TMR2_WriteTimer
 ---------------------------------------------------------------------------------
 (1) _TMR2_WriteTimer                                      1     1      0      62
                                              1 BANK1      1     1      0
                _TMR2_Counter8BitSet
 ---------------------------------------------------------------------------------
 (2) _TMR2_Counter8BitSet                                  1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
                         _TMR2_Start
 ---------------------------------------------------------------------------------
 (2) _TMR2_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     785
                  _EUSART_Initialize
                     _I2C_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM3_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     211
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR2_SetInterruptHandler                             2     0      2     211
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     574
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     211
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     121
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     121
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     121
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           1     1      0   84965
                                             11 BANK0      1     1      0
                   Absolute function *
                 _EUSART_Receive_ISR *
                         _MyUART_ISR *
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR2_ISR                                             0     0      0   84766
                   Absolute function *
                        _MyTimer2ISR *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (6) _TMR2_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _MyTimer2ISR                                          2     2      0   84766
                                              9 BANK0      2     2      0
                       _EUSART_Write
             _I2C_Write1ByteRegister
                 _PWM3_LoadDutyValue
 ---------------------------------------------------------------------------------
 (7) _PWM3_LoadDutyValue                                   4     2      2     120
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (7) _I2C_Write1ByteRegister                               4     2      2   84624
                                              5 BANK0      4     2      2
                          _I2C_Close
                    _I2C_MasterWrite
                           _I2C_Open
         _I2C_SetAddressNackCallback
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _I2C_SetAddressNackCallback                           4     1      3    1870
                                              5 COMMON     4     1      3
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (8) _I2C_Open                                             3     3      0      46
                                              0 COMMON     3     3      0
                 _I2C_MasterClearIrq
                     _I2C_MasterOpen
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterOpen                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C_MasterWrite                                      0     0      0   78324
                _I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterOperation                                  3     3      0   78324
                                             13 COMMON     1     1      0
                                              3 BANK0      2     2      0
                    _I2C_MasterStart
                         _I2C_Poller
 ---------------------------------------------------------------------------------
 (10) _I2C_Poller                                          0     0      0   78278
                      _I2C_MasterFsm
             _I2C_MasterWaitForEvent
 ---------------------------------------------------------------------------------
 (11) _I2C_MasterWaitForEvent                              0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _I2C_MasterFsm                                       3     3      0   78278
                                              0 BANK0      3     3      0
                _I2C_DO_ADDRESS_NACK *
                        _I2C_DO_IDLE *
                        _I2C_DO_RCEN *
                       _I2C_DO_RESET *
                          _I2C_DO_RX *
                      _I2C_DO_RX_ACK *
             _I2C_DO_RX_NACK_RESTART *
                _I2C_DO_RX_NACK_STOP *
               _I2C_DO_SEND_ADR_READ *
              _I2C_DO_SEND_ADR_WRITE *
                _I2C_DO_SEND_RESTART *
           _I2C_DO_SEND_RESTART_READ *
          _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_DO_SEND_STOP *
                          _I2C_DO_TX *
                    _I2C_DO_TX_EMPTY *
                 _I2C_MasterClearIrq
                   _I2C_MasterIsNack
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_TX_EMPTY                                     1     1      0   19547
                                             10 COMMON     1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
                   _I2C_MasterSetIrq
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (13) _I2C_MasterSetIrq                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_TX                                           3     3      0   19593
                                             10 COMMON     3     3      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
           _I2C_DO_SEND_RESTART_READ
          _I2C_DO_SEND_RESTART_WRITE
                   _I2C_DO_SEND_STOP
                   _I2C_MasterIsNack
               _I2C_MasterSendTxData
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (12) _I2C_MasterIsNack                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _I2C_DO_SEND_RESTART_WRITE                           0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (13) _I2C_DO_SEND_RESTART_READ                            0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_SEND_ADR_WRITE                               0     0      0      22
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_SEND_ADR_READ                                0     0      0      22
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (13) _I2C_MasterSendTxData                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_RX_ACK                                       0     0      0       0
                  _I2C_MasterSendAck
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_RX                                           1     1      0   19547
                                             10 COMMON     1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
             _I2C_DO_RX_NACK_RESTART
                _I2C_DO_RX_NACK_STOP
                _I2C_MasterGetRxData
                  _I2C_MasterSendAck
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (13) _I2C_MasterSendAck                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _I2C_MasterGetRxData                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_RX_NACK_STOP                                 0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_RX_NACK_RESTART                              0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (13) _I2C_MasterSendNack                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_RESET                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_RCEN                                         0     0      0       0
                  _I2C_MasterStartRx
 ---------------------------------------------------------------------------------
 (13) _I2C_MasterStartRx                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_IDLE                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_ADDRESS_NACK                                 1     1      0   19547
                                             10 COMMON     1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (13) _wr2RegCompleteHandler                               1     0      1    3852
                                              9 COMMON     1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (13) _wr1RegCompleteHandler                               1     0      1    3852
                                              9 COMMON     1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (13) _rdBlkRegCompleteHandler                             1     0      1    3874
                                              9 COMMON     1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (13) _rd2RegCompleteHandler                               1     0      1    3852
                                              9 COMMON     1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (13) _rd1RegCompleteHandler                               1     0      1    3852
                                              9 COMMON     1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _I2C_SetDataCompleteCallback                          4     1      3    2478
                                              5 COMMON     4     1      3
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (9) _I2C_SetCallback                                      5     2      3     914
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (8) _I2C_SetBuffer                                        4     2      2    1352
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (13) _I2C_DO_SEND_STOP                                    0     0      0       0
                     _I2C_MasterStop
 ---------------------------------------------------------------------------------
 (14) _I2C_MasterStop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _I2C_DO_SEND_RESTART                                 0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (14) _I2C_MasterEnableRestart                             0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _I2C_CallbackReturnStop                              1     0      1       0
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (13) _I2C_CallbackReturnReset                             1     0      1     265
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (10) _I2C_MasterStart                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C_Close                                            2     2      0      24
                                              0 COMMON     2     2      0
                 _I2C_MasterClearIrq
                    _I2C_MasterClose
               _I2C_MasterDisableIrq
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterDisableIrq                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterClose                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterClearIrq                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _MyUART_ISR                                           5     5      0     199
                                              1 COMMON     5     5      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (7) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Receive_ISR                                   0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (6) _EUSART_DefaultOverrunErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_DefaultFramingErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_DefaultErrorHandler                           0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (6) _EUSART_RxDataHandler                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_SetRxInterruptHandler
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
     _I2C_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM3_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
   _TMR2_SetInterruptHandler
   _TMR2_StartTimer
     _TMR2_Start
   _TMR2_WriteTimer
     _TMR2_Counter8BitSet

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _MyUART_ISR *
     _EUSART_Write
   _TMR2_ISR *
     Absolute function(Fake) *
     _MyTimer2ISR *
       _EUSART_Write
       _I2C_Write1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
       _PWM3_LoadDutyValue
     _TMR2_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      C      4B       5       93.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      4       A       7       12.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      63      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      63      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Mar 30 14:26:38 2020

                ?_EUSART_SetRxInterruptHandler 00A6                         ??_I2C_DO_SEND_ADR_READ 0070  
                                  MyUART_ISR@c 0075                    __size_of_I2C_MasterSendNack 0004  
                           __size_of_I2C_Close 0019               __end_of_TMR2_SetInterruptHandler 0537  
                      ??_I2C_DO_SEND_ADR_WRITE 0071                                    __CFG_CP$OFF 0000  
                          __size_of_I2C_Poller 000A                          ??_I2C_DO_SEND_RESTART 0070  
                                  __CFG_LVP$ON 0000                   __size_of_I2C_MasterOperation 001A  
                __size_of_I2C_MasterSendTxData 0005                                            _PR2 001B  
                       ??_EUSART_RxDataHandler 0070                         _I2C_MasterWaitForEvent 05A5  
               ?_EUSART_SetFramingErrorHandler 00A6                                _TMR2_Initialize 046B  
                                 __CFG_BORV$LO 0000                                            wreg 0009  
                                 __CFG_IESO$ON 0000                   ??_I2C_SetAddressNackCallback 0078  
                       _I2C_Write1ByteRegister 0312                       ??_I2C_CallbackReturnStop 007A  
                                 _I2C_DO_RESET 058E                                   __CFG_ZCD$OFF 0000  
                      ??_rd2RegCompleteHandler 007A                                           l3121 0199  
                                         l3113 01AD                                           l3123 01A4  
                                         l3115 017D                                           l3119 018B  
                                         u1330 0189                                           _LATA 010C  
                                         u1350 01A2                                           _LATB 010D  
                                         _LATC 010E                                           u1377 0191  
                                         _T2PR 001B                                           u1387 01A8  
                                         _TMR2 001A                                           _WPUA 020C  
                                         _WPUB 020D                                           _WPUC 020E  
                                         _Data 0052                        ??_wr2RegCompleteHandler 007A  
                                 __CFG_WRT$OFF 0000                                  __CFG_FCMEN$ON 0000  
                                         _Type 0051                                           _main 015D  
                     ?_I2C_CallbackReturnReset 0079                                           fsr0h 0005  
                                         fsr1h 0007                                           indf0 0000  
                                         fsr0l 0004                                           indf1 0001  
                                         fsr1l 0006                               __end_of_I2C_Open 02AA  
                                         btemp 007E                                  __CFG_BOREN$ON 0000  
                                         start 0024                                  __CFG_MCLRE$ON 0000  
                          _TMR2_Counter8BitSet 056A               __size_of_rdBlkRegCompleteHandler 0017  
                                _I2C_DO_TX$794 007B                               ?_I2C_MasterClose 0070  
                                __CFG_PLLEN$ON 0000                                  ?_EUSART_Write 0070  
          __size_of_I2C_SetAddressNackCallback 000C                 __size_of_OSCILLATOR_Initialize 0007  
                             ?_I2C_MasterStart 0070                                  _I2C_DO_RX_ACK 05B1  
                             ?_I2C_MasterWrite 0070                  __end_of_OSCILLATOR_Initialize 0557  
                                        ?_main 0070                                  __CFG_WDTE$OFF 0000  
                                        _T2CON 001C                                          _T2HLT 001D  
                                        i1l123 001F                                          _T2TMR 001A  
                                        i1l118 0017                                          i1l321 02A8  
                                        _T2RST 001F                                          i1l403 0253  
                                        i1l544 05A5                                          i1l635 0549  
                                        i1l387 01DF                                          i1l841 00AF  
                                        i1l852 00B6                                          i1l862 00BD  
                                        i1l847 00B2                                          i1l857 00B9  
                                        i1l849 00B4                                          i1l859 00BB  
                 __size_of_I2C_DO_RX_NACK_STOP 0004                              ??_I2C_DO_TX_EMPTY 007A  
                                        _TRISA 008C                                          _TRISB 008D  
                                        _TRISC 008E                                          u85_25 0464  
                                        _RXPPS 0E24                                          _Angle 0067  
                         ?_TMR2_Counter8BitSet 0070                              __end_of_I2C_DO_RX 0273  
                            __end_of_I2C_DO_TX 01FE                               __end_of_TMR2_ISR 04EB  
                                  ?_TMR2_Start 0070                              __end_of_I2C_Close 0427  
                       __size_of_I2C_MasterFsm 0027                 I2C_MasterOperation@returnValue 005B  
                                   _MyUART_ISR 0041                        _I2C_MasterEnableRestart 05E3  
                      __end_of_PWM3_Initialize 051A                                          pclath 000A  
                             ?_I2C_SetCallback 0070                   I2C_SetAddressNackCallback@cb 0075  
                                        status 0003                                          wtemp0 007E  
                            ?_I2C_DO_SEND_STOP 0070                         __size_of_I2C_SetBuffer 000E  
                              _TMR2_StartTimer 05D1                             ??_I2C_DO_SEND_STOP 0070  
                                _fsmStateTable 03D4                                __initialization 0026  
                                ??_MyTimer2ISR 0060                                   __end_of_main 01B3  
            __size_of_I2C_DO_SEND_RESTART_READ 0004                      ?_I2C_DO_SEND_RESTART_READ 0070  
                               ??_EUSART_Write 0070                                 ?_I2C_DO_RX_ACK 0070  
                      __end_of_TMR2_Initialize 047F                                 __CFG_LPBOR$OFF 0000  
                  ?_INTERRUPT_InterruptManager 0070                 ??_EUSART_SetRxInterruptHandler 00A8  
                     _TMR2_SetInterruptHandler 052E                                         ??_main 00A8  
                            ?_I2C_MasterIsNack 0070                                _TMR2_WriteTimer 0564  
                            ?_I2C_MasterSetIrq 0070                             ??_I2C_MasterIsNack 0070  
                        ??_TMR2_Counter8BitSet 00A6                             ??_I2C_MasterSetIrq 0070  
    __end_of_EUSART_DefaultFramingErrorHandler 05FB     __size_of_EUSART_DefaultFramingErrorHandler 0001  
          ??_EUSART_DefaultFramingErrorHandler 0070             ?_EUSART_DefaultFramingErrorHandler 0070  
            _EUSART_DefaultFramingErrorHandler 05FA                     _EUSART_OverrunErrorHandler 00A2  
              __end_of_I2C_CallbackReturnReset 05F7                __size_of_I2C_CallbackReturnStop 0002  
                I2C_SetDataCompleteCallback@cb 0075                                         _ANSELA 018C  
                                       _ANSELB 018D                                         _ANSELC 018E  
                                       _BORCON 0116                                   ??_I2C_Poller 007D  
                                       _RC1REG 0199                                         _RA2PPS 0E92  
                                       _RC1STA 019D                                         _RB4PPS 0E9C  
                                       _RB6PPS 0E9E                                         _RB7PPS 0E9F  
                                       i1l2311 01C0                                         i1l2303 01BA  
                                       i1l2401 03B8                                         _ODCONA 028C  
                                       _ODCONB 028D                                         i1l2307 01BD  
                                       i1l2411 03BE                                         _ODCONC 028E  
                                       i1l2325 01F8                                         i1l2317 01C3  
                                       i1l2405 03BB                                         i1l2159 03A3  
                                       i1l2343 0255                                         i1l2423 0352  
                                       i1l2353 025B                                         i1l2433 0524  
                                       i1l2523 0425                                         i1l2347 0258  
                                       i1l2365 036B                                         i1l2381 0375  
                                       i1l2461 0402                                         i1l2701 0139  
                                       i1l2375 0372                                         i1l2463 0406  
                                       i1l2703 0142                                         i1l2369 036E  
                                       i1l2529 0314                                         i1l2467 040B  
                                       i1l2539 033A                                         i1l2733 02CE  
                                       i1l2709 0154                                         i1l2727 02BF  
                                       i1l2761 0062                                         i1l2737 02DD  
                                       i1l2771 008B                                         i1l2763 006B  
                                       i1l2691 011F                                         i1l2757 005A  
                                       i1l2749 004A                                         i1l2775 0097  
                                       i1l2791 00DC                                         i1l2793 00E7  
                                       i1l2697 012D                                         i1l2795 00EA  
                                       i1l2787 00C3                                         i1l2779 00A5  
                                       i1l2789 00D2                                         i1l2799 00EC  
                                       _INLVLA 038C                                         _INLVLB 038D  
                                       _INLVLC 038E                                         _OSCCON 0099  
                                       _SPBRGH 019C                                         _SPBRGL 019B  
                                       _TX1REG 019A                                         _TX1STA 019E  
                                   _Validation 006A                                 __CFG_PWRTE$OFF 0000  
                          _I2C_MasterGetRxData 05DA                    __size_of_PWM3_LoadDutyValue 0016  
                                _I2C_MasterFsm 0341                                 __CFG_STVREN$ON 0000  
                          __size_of_TMR2_Start 0003                              I2C_SetCallback@cb 0070  
                      __size_of_I2C_MasterOpen 000C                        __size_of_I2C_MasterStop 0003  
                      __size_of_I2C_Initialize 000A                                  _I2C_SetBuffer 04D1  
                          __end_of_MyTimer2ISR 015D                             __end_of_I2C_Poller 052E  
                 __end_of_I2C_MasterDisableIrq 05EC                            _I2C_DO_ADDRESS_NACK 03B1  
                         ?_I2C_MasterGetRxData 0070                                      ?_I2C_Open 0070  
           __end_of_I2C_SetAddressNackCallback 04F7                     _I2C_SetAddressNackCallback 04EB  
                    ??_I2C_MasterEnableRestart 0070                        __end_of_TMR2_StartTimer 05D4  
     TMR2_SetInterruptHandler@InterruptHandler 00A6                                    ?_MyUART_ISR 0070  
                             ?_PWM3_Initialize 0070                              _SYSTEM_Initialize 047F  
                      __end_of__initialization 003D                            _I2C_MasterOperation 03F4  
                           ?_SYSTEM_Initialize 0070                           ?_I2C_DO_ADDRESS_NACK 0070  
                      _rdBlkRegCompleteHandler 0427                                 __pcstackCOMMON 0070  
                               ?_I2C_MasterFsm 0070                                ??_I2C_DO_RX_ACK 0070  
                                 __pidataBANK0 059D                         _I2C_CallbackReturnStop 05F7  
                          ??_SYSTEM_Initialize 00A8                                      ?_TMR2_ISR 0070  
                      __end_of_TMR2_WriteTimer 056A                               ?_TMR2_Initialize 0070  
                               ?_I2C_SetBuffer 0070                        ?_I2C_MasterWaitForEvent 0070  
               __size_of_I2C_DO_SEND_ADR_WRITE 0007             __size_of_I2C_DO_SEND_RESTART_WRITE 0004  
                __end_of_I2C_DO_SEND_ADR_WRITE 055E                     ?_I2C_DO_SEND_RESTART_WRITE 0070  
                         ?_I2C_MasterOperation 0070                          ??_I2C_MasterGetRxData 0070  
                      ?_I2C_Write1ByteRegister 005C                                 _OPTION_REGbits 0095  
                                   ??_I2C_Open 0070                           _eusartRxStatusBuffer 003D  
                   __end_of_I2C_MasterClearIrq 05F2                ??_EUSART_SetOverrunErrorHandler 00A8  
                    __end_of_SYSTEM_Initialize 0491                              _I2C_MasterSendAck 05C5  
                                   __pbssBANK0 0020                           __end_of_EUSART_Write 0550  
                                ??_I2C_DO_IDLE 0070                 __size_of_rd2RegCompleteHandler 0010  
                                ??_I2C_DO_RCEN 0070                  __end_of_rd2RegCompleteHandler 04B1  
                 __end_of_I2C_MasterSendTxData 059D                             ?_I2C_MasterSendAck 0070  
                            _I2C_MasterStartRx 05DD                 __size_of_wr2RegCompleteHandler 0010  
                        ??_I2C_DO_ADDRESS_NACK 007A                  __end_of_wr2RegCompleteHandler 04D1  
                  __size_of_EUSART_Receive_ISR 0036                            _I2C_DO_RX_NACK_STOP 05AD  
                        _rd1RegCompleteHandler 04B1                             ?_I2C_MasterStartRx 0070  
                   __end_of_I2C_MasterSendNack 05CD                          _wr1RegCompleteHandler 0491  
                                   __pmaintext 015D                            ??_I2C_MasterSendAck 0070  
                     rd1RegCompleteHandler@ptr 0079                    __end_of_I2C_DO_SEND_RESTART 05BD  
                                  _MyTimer2ISR 00F9                                _I2C_DO_TX_EMPTY 0368  
                          I2C_SetBuffer@buffer 0073                                __CFG_PPS1WAY$ON 0000  
                                   ??_TMR2_ISR 007E                                     __pintentry 0004  
               __end_of_I2C_MasterWaitForEvent 05A9                            ??_I2C_MasterStartRx 0070  
                __size_of_I2C_DO_SEND_ADR_READ 0008                            __size_of_MyUART_ISR 00B8  
             __size_of_I2C_CallbackReturnReset 0002                   ??_EUSART_DefaultErrorHandler 0071  
                        ??_I2C_MasterOperation 007D                 I2C_SetDataCompleteCallback@ptr 0077  
               __end_of_I2C_Write1ByteRegister 0341                       ??_I2C_DO_RX_NACK_RESTART 0070  
            __end_of_I2C_DO_SEND_RESTART_WRITE 05C1                           ?_I2C_DO_RX_NACK_STOP 0070  
                                _eusartRxCount 0054                                __CFG_WDTCCS$SWC 0000  
                __size_of_EUSART_RxDataHandler 0017                      __end_of_I2C_MasterSendAck 05C9  
                                      _OSCTUNE 0098                                        _PWM3DCH 0618  
                                      _PWM3DCL 0617                                        _PWM3CON 0619  
                                      _SSP1ADD 0212                                        _SLRCONA 030C  
                                      _SLRCONB 030D                                        _SLRCONC 030E  
                                      _SSP1BUF 0211                                   ??_TMR2_Start 00A6  
                     ??_EUSART_SetErrorHandler 00A8                               ?_TMR2_StartTimer 0070  
                    __end_of_I2C_MasterStartRx 05E0                           I2C_Close@returnValue 0071  
                 ?_I2C_SetDataCompleteCallback 0075                                      _I2C_DO_RX 0239  
                                    _I2C_DO_TX 01B3               __end_of_I2C_DO_SEND_RESTART_READ 05C5  
                                    _I2C_Close 040E                      ??_rdBlkRegCompleteHandler 007A  
                         _I2C_MasterDisableIrq 05E9                                ??_I2C_MasterFsm 0057  
          __size_of_EUSART_DefaultErrorHandler 0003                     ??_TMR2_SetInterruptHandler 00A8  
                                      _PosUart 0050                            __end_of_I2C_DO_IDLE 0598  
                          __end_of_I2C_DO_RCEN 0588                                        _Vitesse 004D  
                              ??_I2C_SetBuffer 0072                               ?_TMR2_WriteTimer 0070  
                      I2C_SetBuffer@bufferSize 0070                             __end_of_TMR2_Start 05D7  
                               _I2C_MasterOpen 04F7                                 _I2C_MasterStop 05E0  
                               _I2C_Initialize 051A                      __size_of_I2C_DO_SEND_STOP 0004  
                                      __ptext1 0564                                        __ptext2 056A  
                                      __ptext3 05D1                                        __ptext4 05D4  
                                      __ptext5 047F                                        __ptext6 046B  
                                      __ptext7 052E                                        __ptext8 050F  
                                      __ptext9 01FE                          ??_I2C_DO_RX_NACK_STOP 0070  
                        _OSCILLATOR_Initialize 0550                                      _T2CONbits 001C  
                           I2C_SetCallback@idx 0074                       __size_of_I2C_MasterClose 0003  
                     ??_PIN_MANAGER_Initialize 00A6                  I2C_CallbackReturnReset@funPtr 0079  
                                    _T2HLTbits 001D                             I2C_SetCallback@ptr 0072  
                     wr1RegCompleteHandler@ptr 0079                      I2C_Write1ByteRegister@reg 005C  
                     __size_of_I2C_MasterStart 0003                       __size_of_I2C_MasterWrite 0004  
                   __size_of_SYSTEM_Initialize 0012                                        clrloop0 055F  
                         end_of_initialization 003D                                      _T2RSTbits 001F  
                                   ?_I2C_DO_RX 0070                                     ?_I2C_DO_TX 0070  
        __end_of_EUSART_SetOverrunErrorHandler 0576         __size_of_EUSART_SetOverrunErrorHandler 0006  
                _EUSART_SetOverrunErrorHandler 0570                      __size_of_I2C_MasterIsNack 0006  
                                   ?_I2C_Close 0070                         ?_rd1RegCompleteHandler 0079  
                      __end_of_I2C_DO_TX_EMPTY 038D                      __size_of_I2C_MasterSetIrq 0003  
                        ?_I2C_MasterDisableIrq 0070                              _EUSART_Initialize 02E0  
                       ?_wr1RegCompleteHandler 0079                             ?_EUSART_Initialize 0070  
                     __size_of_I2C_SetCallback 0024                         __end_of_I2C_MasterOpen 0503  
                       __end_of_I2C_MasterStop 05E3                         __end_of_I2C_Initialize 0524  
                  __end_of_TMR2_Counter8BitSet 0570                            ??_EUSART_Initialize 00A8  
                                    _PORTAbits 000C                __end_of_rdBlkRegCompleteHandler 043E  
                         _I2C_MasterSendTxData 0598                                      _SSPDATPPS 0E21  
              __size_of_I2C_DO_RX_NACK_RESTART 0004                                      _SSPCLKPPS 0E20  
                             __CFG_FOSC$INTOSC 0000                    ?_I2C_SetAddressNackCallback 0075  
                        __size_of_EUSART_Write 0008                     __size_of_I2C_MasterSendAck 0004  
                            __size_of_I2C_Open 0037                                   ??_MyUART_ISR 0071  
              __size_of_EUSART_SetErrorHandler 0006                     __size_of_I2C_MasterStartRx 0003  
                      TMR2_WriteTimer@timerVal 00A7                      __end_of_EUSART_Initialize 0312  
                                  _I2C_DO_IDLE 0593                                    _I2C_DO_RCEN 0582  
                   rdBlkRegCompleteHandler@ptr 0079                  I2C_Write1ByteRegister@address 005F  
                      ?_I2C_CallbackReturnStop 0079                     __end_of_PWM3_LoadDutyValue 046B  
                     _I2C_DO_SEND_RESTART_READ 05C1                   I2C_CallbackReturnStop@funPtr 0079  
                              ?_I2C_MasterOpen 0070                                ?_I2C_MasterStop 0070  
                              ?_I2C_Initialize 0070           __end_of_TMR2_DefaultInterruptHandler 05FA  
        __size_of_TMR2_DefaultInterruptHandler 0001                   _TMR2_DefaultInterruptHandler 05F9  
                      _I2C_CallbackReturnReset 05F5             __end_of_EUSART_DefaultErrorHandler 05F5  
                   _EUSART_DefaultErrorHandler 05F2           __size_of_I2C_SetDataCompleteCallback 000C  
                                 _EUSART_Write 0548                              __size_of_TMR2_ISR 000C  
                           __end_of_MyUART_ISR 00F9                          ?_I2C_MasterSendTxData 0070  
                       ?_OSCILLATOR_Initialize 0070                    ??_I2C_DO_SEND_RESTART_WRITE 0070  
                          start_initialization 0026                __size_of_PIN_MANAGER_Initialize 003B  
                                ?_I2C_DO_RESET 0070   EUSART_SetRxInterruptHandler@interruptHandler 00A6  
                                  ??_I2C_DO_RX 007A                                    ??_I2C_DO_TX 007A  
                            ??_I2C_MasterClose 0070                         ??_I2C_MasterDisableIrq 0070  
                                  ??_I2C_Close 0070                              ??_I2C_MasterStart 0070  
                            ??_I2C_MasterWrite 007E                 __end_of_I2C_CallbackReturnStop 05F9  
                       _I2C_DO_RX_NACK_RESTART 05A9                               ?_I2C_DO_TX_EMPTY 0070  
                           _I2C_MasterClearIrq 05EF                 ?_EUSART_SetOverrunErrorHandler 00A6  
                     __size_of_PWM3_Initialize 000B                     _EUSART_FramingErrorHandler 00A4  
                                 ?_MyTimer2ISR 0070                         _EUSART_SetErrorHandler 057C  
                                  _CCPTMRSbits 029E                            ?_I2C_MasterClearIrq 0070  
                  __end_of_I2C_MasterGetRxData 05DD                                    __pdataBANK0 0067  
                        __end_of_I2C_DO_RX_ACK 05B5                                      _StateLeds 004F  
                ?_TMR2_DefaultInterruptHandler 0070                               _I2C_DO_SEND_STOP 05B5  
                            ??_I2C_SetCallback 0073                            I2C_Open@returnValue 0072  
                           _I2C_MasterSendNack 05C9                       ?_I2C_MasterEnableRestart 0070  
                        _I2C_DO_SEND_ADR_WRITE 0557                                      ___latbits 0002  
                                __pcstackBANK0 0057                                  __pcstackBANK1 00A6  
                               ??_I2C_DO_RESET 0070                       __size_of_TMR2_Initialize 0014  
                          ?_I2C_MasterSendNack 0070                   __end_of_I2C_DO_SEND_ADR_READ 0548  
                         ??_I2C_MasterClearIrq 0070                    __end_of_I2C_DO_ADDRESS_NACK 03D4  
                   __end_of_EUSART_Receive_ISR 02E0                               _I2C_MasterIsNack 0588  
                   __size_of_EUSART_Initialize 0032                      _I2C_DO_SEND_RESTART_WRITE 05BD  
             _EUSART_RxDefaultInterruptHandler 0065                               _I2C_MasterSetIrq 05D7  
                                    __pnvBANK0 0063                                      __pnvBANK1 00A0  
                        _rd2RegCompleteHandler 04A1                          __end_of_fsmStateTable 03F4  
                 __end_of_EUSART_RxDataHandler 0455                         _PIN_MANAGER_Initialize 01FE  
                        _wr2RegCompleteHandler 04C1                      ??_I2C_CallbackReturnReset 007A  
                  __end_of_I2C_MasterOperation 040E                           ??_I2C_MasterSendNack 0070  
                     rd2RegCompleteHandler@ptr 0079                                   _eusartRxHead 0056  
                                 _eusartRxTail 0055                         ??_I2C_MasterSendTxData 0070  
                 ??_INTERRUPT_InterruptManager 0062                   __size_of_I2C_DO_SEND_RESTART 0004  
                                     _BAUD1CON 019F                        I2C_MasterOperation@read 005A  
                                     _I2C_Open 0273                                       _T2CLKCON 001E  
                      ??_rd1RegCompleteHandler 007A                                 _eusartRxBuffer 0045  
                      ??_wr1RegCompleteHandler 007A                                       _LATAbits 010C  
       EUSART_SetErrorHandler@interruptHandler 00A6                                       _LATCbits 010E  
                                    clear_ram0 055E                                       _PIE1bits 0090  
                            _eusartRxLastError 0053                       __size_of_TMR2_StartTimer 0003  
          __size_of_INTERRUPT_InterruptManager 0020                                       _PIR1bits 0010  
              ??_EUSART_SetFramingErrorHandler 00A8                                       _PIR2bits 0011  
                        __end_of_I2C_MasterFsm 0368                    __end_of_I2C_DO_RX_NACK_STOP 05B1  
                         __CFG_WDTCPS$WDTCPS1F 0000                                       _SSP1CON1 0215  
                                     _SSP1CON2 0216      __end_of_EUSART_DefaultOverrunErrorHandler 05D1  
   __size_of_EUSART_DefaultOverrunErrorHandler 0004            ??_EUSART_DefaultOverrunErrorHandler 0070  
           ?_EUSART_DefaultOverrunErrorHandler 0070              _EUSART_DefaultOverrunErrorHandler 05CD  
                                     _TMR2_ISR 04DF                __end_of_I2C_MasterEnableRestart 05E6  
                                     _SSP1STAT 0214                          __end_of_I2C_SetBuffer 04DF  
                            ??_PWM3_Initialize 00A6                         ?_I2C_DO_SEND_ADR_WRITE 0070  
                     I2C_MasterSendTxData@data 0070                 ??_TMR2_DefaultInterruptHandler 0070  
            __size_of_TMR2_SetInterruptHandler 0009                       __size_of_TMR2_WriteTimer 0006  
                    ?_TMR2_SetInterruptHandler 00A6                       wr2RegCompleteHandler@ptr 0079  
                   ??_I2C_DO_SEND_RESTART_READ 0070                       ?_rdBlkRegCompleteHandler 0079  
                                   _I2C_Poller 0524                                     _I2C_Status 0020  
                                 ?_I2C_DO_IDLE 0070                                   ?_I2C_DO_RCEN 0070  
                            ??_TMR2_Initialize 00A8                         ?_rd2RegCompleteHandler 0079  
                             ??_I2C_MasterOpen 0070                         ?_wr2RegCompleteHandler 0079  
                             ??_I2C_MasterStop 0070                       ??_I2C_MasterWaitForEvent 0070  
                             ??_I2C_Initialize 00A6                           __end_of_I2C_DO_RESET 0593  
                     ??_I2C_Write1ByteRegister 005E                                       _StateBat 0069  
                      ??_OSCILLATOR_Initialize 00A6                            _EUSART_ErrorHandler 00A0  
                         _I2C_DO_SEND_ADR_READ 0540                           __size_of_MyTimer2ISR 0064  
                  ?_EUSART_DefaultErrorHandler 0070                             _PWM3_LoadDutyValue 0455  
                              _I2C_MasterClose 05EC                  I2C_SetAddressNackCallback@ptr 0077  
                              I2C_Open@address 0071                                _I2C_MasterStart 05E6  
                              _I2C_MasterWrite 05A1                           _EUSART_RxDataHandler 043E  
                 __size_of_TMR2_Counter8BitSet 0006                                       __ptext10 0550  
                                     __ptext11 051A                                       __ptext20 05F9  
                                     __ptext12 02E0                                       __ptext21 0455  
                                     __ptext13 0537                                       __ptext30 0341  
                                     __ptext22 0312                                       __ptext14 0570  
                                     __ptext31 03B1                                       __ptext23 04EB  
                                     __ptext15 0576                                       __ptext40 0582  
                                     __ptext32 058E                                       __ptext24 0273  
                                     __ptext16 057C                                       __ptext41 0239  
                                     __ptext33 05A9                                       __ptext25 04F7  
                                     __ptext50 05C5                                       __ptext42 01B3  
                                     __ptext34 05AD                                       __ptext26 05A1  
                                     __ptext18 04DF                                       __ptext51 05DA  
                                     __ptext43 0557                                       __ptext35 05B1  
                                     __ptext27 03F4                                       __ptext19 00F9  
                                     __ptext60 04C1                                       __ptext52 05C9  
                                     __ptext44 0540                                       __ptext36 05B5  
                                     __ptext28 0524                                       __ptext61 0503  
                                     __ptext53 05DD                                       __ptext45 0593  
                                     __ptext37 05B9                                       __ptext29 05A5  
                                     __ptext70 05EF                                       __ptext62 038D  
                                     __ptext54 05F5                                       __ptext46 0368  
                                     __ptext38 05BD                                       __ptext71 02AA  
                                     __ptext63 04D1                                       __ptext55 05F7  
                                     __ptext47 05D7                                       __ptext39 05C1  
                                     __ptext72 0041                                       __ptext64 05E0  
                                     __ptext56 0427                                       __ptext48 0588  
                                     __ptext73 0548                                       __ptext65 05E3  
                                     __ptext57 0491                                       __ptext49 0598  
                                     __ptext74 05CD                                       __ptext66 05E6  
                                     __ptext58 04A1                            ?_PWM3_LoadDutyValue 0070  
                                     __ptext75 05FA                                       __ptext67 040E  
                                     __ptext59 04B1                                       __ptext76 05F2  
                                     __ptext68 05E9                                       __ptext77 043E  
                                     __ptext69 05EC                                   _SSP1CON1bits 0215  
                                 _SSP1CON2bits 0216            __end_of_I2C_SetDataCompleteCallback 050F  
                  _I2C_SetDataCompleteCallback 0503                        ?_I2C_DO_RX_NACK_RESTART 0070  
                     __end_of_I2C_DO_SEND_STOP 05B9                                  __size_of_main 0056  
                         __CFG_WDTCWS$WDTCWSSW 0000                        ?_EUSART_SetErrorHandler 00A6  
                              _I2C_SetCallback 038D                  ??_I2C_SetDataCompleteCallback 0078  
                                   _RC1STAbits 019D                     I2C_Write1ByteRegister@data 005D  
EUSART_SetOverrunErrorHandler@interruptHandler 00A6                           ??_PWM3_LoadDutyValue 0072  
                                     int$flags 007E                          ?_I2C_DO_SEND_ADR_READ 0070  
                            ??_TMR2_StartTimer 00A6             __end_of_INTERRUPT_InterruptManager 0024  
                   _INTERRUPT_InterruptManager 0004          __end_of_EUSART_SetFramingErrorHandler 057C  
       __size_of_EUSART_SetFramingErrorHandler 0006                  _EUSART_SetFramingErrorHandler 0576  
                                 _SSP1STATbits 0214                       __end_of_I2C_MasterIsNack 058E  
                     __end_of_I2C_MasterSetIrq 05DA                                     _INTCONbits 000B  
                        ?_EUSART_RxDataHandler 0070                 __end_of_I2C_DO_RX_NACK_RESTART 05AD  
                  TMR2_Counter8BitSet@timerVal 00A6                                       intlevel1 0000  
                                  ?_I2C_Poller 0070                              ??_TMR2_WriteTimer 00A7  
             __size_of_I2C_MasterEnableRestart 0003                        ?_PIN_MANAGER_Initialize 0070  
               __end_of_EUSART_SetErrorHandler 0582                              __CFG_CLKOUTEN$OFF 0000  
                          _I2C_DO_SEND_RESTART 05B9                  __size_of_I2C_MasterDisableIrq 0003  
         __end_of_EUSART_SetRxInterruptHandler 0540          __size_of_EUSART_SetRxInterruptHandler 0009  
                 _EUSART_SetRxInterruptHandler 0537                __size_of_I2C_MasterWaitForEvent 0004  
              __size_of_I2C_Write1ByteRegister 002F                             _EUSART_Receive_ISR 02AA  
EUSART_SetFramingErrorHandler@interruptHandler 00A6                        __end_of_I2C_MasterClose 05EF  
                     __size_of_I2C_DO_TX_EMPTY 0025                    PWM3_LoadDutyValue@dutyValue 0070  
                      __end_of_I2C_MasterStart 05E9                        __end_of_I2C_MasterWrite 05A5  
                                __pstringtext1 03D4                           ?_I2C_DO_SEND_RESTART 0070  
                          ?_EUSART_Receive_ISR 0070                   __size_of_I2C_MasterGetRxData 0003  
                                   _TX1STAbits 019E                                     _TMR2_Start 05D4  
                  __size_of_I2C_MasterClearIrq 0003                             EUSART_Write@txData 0070  
                      __end_of_I2C_SetCallback 03B1                 __end_of_PIN_MANAGER_Initialize 0239  
               __size_of_rd1RegCompleteHandler 0010                  __end_of_rd1RegCompleteHandler 04C1  
                       __size_of_I2C_DO_RX_ACK 0004                 __size_of_wr1RegCompleteHandler 0010  
                         ??_EUSART_Receive_ISR 0071                          __size_of_I2C_DO_RESET 0005  
                __end_of_wr1RegCompleteHandler 04A1                          _TMR2_InterruptHandler 0063  
                 __size_of_I2C_DO_ADDRESS_NACK 0023                           __size_of_I2C_DO_IDLE 0005  
                         __size_of_I2C_DO_RCEN 0006                                _PWM3_Initialize 050F  
                           __size_of_I2C_DO_RX 003A                             __size_of_I2C_DO_TX 004B  
