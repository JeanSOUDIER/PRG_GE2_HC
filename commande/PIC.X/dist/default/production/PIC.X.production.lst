

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Mar 26 18:50:12 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	text36,local,class=CODE,merge=1,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,delta=2
    58                           	psect	text43,local,class=CODE,merge=1,delta=2
    59                           	psect	text44,local,class=CODE,merge=1,delta=2
    60                           	psect	text45,local,class=CODE,merge=1,delta=2
    61                           	psect	text46,local,class=CODE,merge=1,delta=2
    62                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text54,local,class=CODE,merge=1,delta=2
    70                           	psect	text55,local,class=CODE,merge=1,delta=2
    71                           	psect	text56,local,class=CODE,merge=1,delta=2
    72                           	psect	text57,local,class=CODE,merge=1,delta=2
    73                           	psect	text58,local,class=CODE,merge=1,delta=2
    74                           	psect	text59,local,class=CODE,merge=1,delta=2
    75                           	psect	text60,local,class=CODE,merge=1,delta=2
    76                           	psect	text61,local,class=CODE,merge=1,delta=2
    77                           	psect	text62,local,class=CODE,merge=1,delta=2
    78                           	psect	text63,local,class=CODE,merge=1,delta=2
    79                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text65,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text66,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text67,local,class=CODE,merge=1,delta=2
    83                           	psect	text68,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text71,local,class=CODE,merge=1,delta=2
    87                           	psect	text72,local,class=CODE,merge=1,delta=2
    88                           	psect	text73,local,class=CODE,merge=1,delta=2
    89                           	psect	text74,local,class=CODE,merge=1,delta=2
    90                           	psect	text75,local,class=CODE,merge=1,delta=2
    91                           	psect	text76,local,class=CODE,merge=1,delta=2
    92                           	psect	text77,local,class=CODE,merge=1,delta=2
    93                           	dabs	1,0x7E,2
    94  0000                     
    95                           ; Version 1.45
    96                           ; Generated 16/11/2017 GMT
    97                           ; 
    98                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    99                           ; All rights reserved.
   100                           ; 
   101                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   102                           ; 
   103                           ; Redistribution and use in source and binary forms, with or without modification, are
   104                           ; permitted provided that the following conditions are met:
   105                           ; 
   106                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   107                           ;        conditions and the following disclaimer.
   108                           ; 
   109                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   110                           ;        of conditions and the following disclaimer in the documentation and/or other
   111                           ;        materials provided with the distribution.
   112                           ; 
   113                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   114                           ;        software without specific prior written permission.
   115                           ; 
   116                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   117                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   118                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   119                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   120                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   121                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   122                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   123                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   124                           ; 
   125                           ; 
   126                           ; Code-generator required, PIC16F1619 Definitions
   127                           ; 
   128                           ; SFR Addresses
   129  0000                     	;# 
   130  0001                     	;# 
   131  0002                     	;# 
   132  0003                     	;# 
   133  0004                     	;# 
   134  0005                     	;# 
   135  0006                     	;# 
   136  0007                     	;# 
   137  0008                     	;# 
   138  0009                     	;# 
   139  000A                     	;# 
   140  000B                     	;# 
   141  000C                     	;# 
   142  000D                     	;# 
   143  000E                     	;# 
   144  0010                     	;# 
   145  0011                     	;# 
   146  0012                     	;# 
   147  0013                     	;# 
   148  0014                     	;# 
   149  0015                     	;# 
   150  0016                     	;# 
   151  0016                     	;# 
   152  0017                     	;# 
   153  0018                     	;# 
   154  0019                     	;# 
   155  001A                     	;# 
   156  001A                     	;# 
   157  001B                     	;# 
   158  001B                     	;# 
   159  001C                     	;# 
   160  001D                     	;# 
   161  001E                     	;# 
   162  001F                     	;# 
   163  008C                     	;# 
   164  008D                     	;# 
   165  008E                     	;# 
   166  0090                     	;# 
   167  0091                     	;# 
   168  0092                     	;# 
   169  0093                     	;# 
   170  0094                     	;# 
   171  0095                     	;# 
   172  0096                     	;# 
   173  0098                     	;# 
   174  0099                     	;# 
   175  009A                     	;# 
   176  009B                     	;# 
   177  009B                     	;# 
   178  009C                     	;# 
   179  009D                     	;# 
   180  009E                     	;# 
   181  009F                     	;# 
   182  010C                     	;# 
   183  010D                     	;# 
   184  010E                     	;# 
   185  0111                     	;# 
   186  0112                     	;# 
   187  0113                     	;# 
   188  0114                     	;# 
   189  0115                     	;# 
   190  0116                     	;# 
   191  0117                     	;# 
   192  0118                     	;# 
   193  0119                     	;# 
   194  011C                     	;# 
   195  018C                     	;# 
   196  018D                     	;# 
   197  018E                     	;# 
   198  0191                     	;# 
   199  0191                     	;# 
   200  0192                     	;# 
   201  0193                     	;# 
   202  0193                     	;# 
   203  0194                     	;# 
   204  0195                     	;# 
   205  0196                     	;# 
   206  0197                     	;# 
   207  0199                     	;# 
   208  0199                     	;# 
   209  0199                     	;# 
   210  019A                     	;# 
   211  019A                     	;# 
   212  019A                     	;# 
   213  019B                     	;# 
   214  019B                     	;# 
   215  019B                     	;# 
   216  019B                     	;# 
   217  019B                     	;# 
   218  019C                     	;# 
   219  019C                     	;# 
   220  019C                     	;# 
   221  019D                     	;# 
   222  019D                     	;# 
   223  019D                     	;# 
   224  019E                     	;# 
   225  019E                     	;# 
   226  019E                     	;# 
   227  019F                     	;# 
   228  019F                     	;# 
   229  019F                     	;# 
   230  019F                     	;# 
   231  019F                     	;# 
   232  020C                     	;# 
   233  020D                     	;# 
   234  020E                     	;# 
   235  0211                     	;# 
   236  0211                     	;# 
   237  0212                     	;# 
   238  0212                     	;# 
   239  0213                     	;# 
   240  0213                     	;# 
   241  0214                     	;# 
   242  0214                     	;# 
   243  0215                     	;# 
   244  0215                     	;# 
   245  0215                     	;# 
   246  0215                     	;# 
   247  0216                     	;# 
   248  0216                     	;# 
   249  0217                     	;# 
   250  0217                     	;# 
   251  028C                     	;# 
   252  028D                     	;# 
   253  028E                     	;# 
   254  0291                     	;# 
   255  0291                     	;# 
   256  0292                     	;# 
   257  0293                     	;# 
   258  0294                     	;# 
   259  0298                     	;# 
   260  0298                     	;# 
   261  0299                     	;# 
   262  029A                     	;# 
   263  029B                     	;# 
   264  029E                     	;# 
   265  030C                     	;# 
   266  030D                     	;# 
   267  030E                     	;# 
   268  038C                     	;# 
   269  038D                     	;# 
   270  038E                     	;# 
   271  0391                     	;# 
   272  0392                     	;# 
   273  0393                     	;# 
   274  0394                     	;# 
   275  0395                     	;# 
   276  0396                     	;# 
   277  0397                     	;# 
   278  0398                     	;# 
   279  0399                     	;# 
   280  040E                     	;# 
   281  0413                     	;# 
   282  0413                     	;# 
   283  0414                     	;# 
   284  0414                     	;# 
   285  0415                     	;# 
   286  0416                     	;# 
   287  0417                     	;# 
   288  0418                     	;# 
   289  041A                     	;# 
   290  041A                     	;# 
   291  041B                     	;# 
   292  041B                     	;# 
   293  041C                     	;# 
   294  041D                     	;# 
   295  041E                     	;# 
   296  041F                     	;# 
   297  0493                     	;# 
   298  0494                     	;# 
   299  0495                     	;# 
   300  0496                     	;# 
   301  049A                     	;# 
   302  049B                     	;# 
   303  049C                     	;# 
   304  049D                     	;# 
   305  058C                     	;# 
   306  058C                     	;# 
   307  058D                     	;# 
   308  058E                     	;# 
   309  058E                     	;# 
   310  058F                     	;# 
   311  0590                     	;# 
   312  0590                     	;# 
   313  0591                     	;# 
   314  0592                     	;# 
   315  0592                     	;# 
   316  0593                     	;# 
   317  0594                     	;# 
   318  0594                     	;# 
   319  0595                     	;# 
   320  0596                     	;# 
   321  0596                     	;# 
   322  0597                     	;# 
   323  0598                     	;# 
   324  0599                     	;# 
   325  059A                     	;# 
   326  059B                     	;# 
   327  059B                     	;# 
   328  059C                     	;# 
   329  059D                     	;# 
   330  060C                     	;# 
   331  060C                     	;# 
   332  060D                     	;# 
   333  060E                     	;# 
   334  060F                     	;# 
   335  060F                     	;# 
   336  0610                     	;# 
   337  0611                     	;# 
   338  0612                     	;# 
   339  0613                     	;# 
   340  0614                     	;# 
   341  0617                     	;# 
   342  0618                     	;# 
   343  0619                     	;# 
   344  061A                     	;# 
   345  061B                     	;# 
   346  061C                     	;# 
   347  0691                     	;# 
   348  0692                     	;# 
   349  0693                     	;# 
   350  0694                     	;# 
   351  0695                     	;# 
   352  0696                     	;# 
   353  0697                     	;# 
   354  0699                     	;# 
   355  069A                     	;# 
   356  0711                     	;# 
   357  0712                     	;# 
   358  0713                     	;# 
   359  0714                     	;# 
   360  0715                     	;# 
   361  0718                     	;# 
   362  0718                     	;# 
   363  0719                     	;# 
   364  071A                     	;# 
   365  071A                     	;# 
   366  071B                     	;# 
   367  071C                     	;# 
   368  071D                     	;# 
   369  0791                     	;# 
   370  0791                     	;# 
   371  0792                     	;# 
   372  0793                     	;# 
   373  0793                     	;# 
   374  0794                     	;# 
   375  0795                     	;# 
   376  0795                     	;# 
   377  0796                     	;# 
   378  0797                     	;# 
   379  0797                     	;# 
   380  0798                     	;# 
   381  0799                     	;# 
   382  079A                     	;# 
   383  080C                     	;# 
   384  080C                     	;# 
   385  080D                     	;# 
   386  080E                     	;# 
   387  080E                     	;# 
   388  080F                     	;# 
   389  0810                     	;# 
   390  0810                     	;# 
   391  0811                     	;# 
   392  0812                     	;# 
   393  0812                     	;# 
   394  0813                     	;# 
   395  0814                     	;# 
   396  0815                     	;# 
   397  0816                     	;# 
   398  0817                     	;# 
   399  0818                     	;# 
   400  0819                     	;# 
   401  081A                     	;# 
   402  081A                     	;# 
   403  081B                     	;# 
   404  081C                     	;# 
   405  081C                     	;# 
   406  081D                     	;# 
   407  088C                     	;# 
   408  088D                     	;# 
   409  088E                     	;# 
   410  088F                     	;# 
   411  088F                     	;# 
   412  0890                     	;# 
   413  0891                     	;# 
   414  0892                     	;# 
   415  0893                     	;# 
   416  0893                     	;# 
   417  0894                     	;# 
   418  0895                     	;# 
   419  0896                     	;# 
   420  0897                     	;# 
   421  0897                     	;# 
   422  0898                     	;# 
   423  0899                     	;# 
   424  0D8C                     	;# 
   425  0D8C                     	;# 
   426  0D8D                     	;# 
   427  0D8E                     	;# 
   428  0D8F                     	;# 
   429  0D8F                     	;# 
   430  0D90                     	;# 
   431  0D91                     	;# 
   432  0D92                     	;# 
   433  0D92                     	;# 
   434  0D93                     	;# 
   435  0D94                     	;# 
   436  0D95                     	;# 
   437  0D95                     	;# 
   438  0D96                     	;# 
   439  0D97                     	;# 
   440  0D98                     	;# 
   441  0D99                     	;# 
   442  0D9A                     	;# 
   443  0D9B                     	;# 
   444  0D9C                     	;# 
   445  0D9D                     	;# 
   446  0D9E                     	;# 
   447  0D9E                     	;# 
   448  0D9F                     	;# 
   449  0DA0                     	;# 
   450  0DA1                     	;# 
   451  0DA1                     	;# 
   452  0DA2                     	;# 
   453  0DA3                     	;# 
   454  0DA4                     	;# 
   455  0DA4                     	;# 
   456  0DA5                     	;# 
   457  0DA6                     	;# 
   458  0DA7                     	;# 
   459  0DA7                     	;# 
   460  0DA8                     	;# 
   461  0DA9                     	;# 
   462  0DAA                     	;# 
   463  0DAB                     	;# 
   464  0DAC                     	;# 
   465  0DAD                     	;# 
   466  0DAE                     	;# 
   467  0DAF                     	;# 
   468  0E0F                     	;# 
   469  0E10                     	;# 
   470  0E11                     	;# 
   471  0E12                     	;# 
   472  0E13                     	;# 
   473  0E14                     	;# 
   474  0E15                     	;# 
   475  0E16                     	;# 
   476  0E17                     	;# 
   477  0E18                     	;# 
   478  0E19                     	;# 
   479  0E1A                     	;# 
   480  0E1B                     	;# 
   481  0E1C                     	;# 
   482  0E1D                     	;# 
   483  0E1E                     	;# 
   484  0E1F                     	;# 
   485  0E20                     	;# 
   486  0E21                     	;# 
   487  0E22                     	;# 
   488  0E23                     	;# 
   489  0E24                     	;# 
   490  0E25                     	;# 
   491  0E26                     	;# 
   492  0E27                     	;# 
   493  0E28                     	;# 
   494  0E29                     	;# 
   495  0E2A                     	;# 
   496  0E2B                     	;# 
   497  0E2C                     	;# 
   498  0E2D                     	;# 
   499  0E2E                     	;# 
   500  0E90                     	;# 
   501  0E91                     	;# 
   502  0E92                     	;# 
   503  0E94                     	;# 
   504  0E95                     	;# 
   505  0E9C                     	;# 
   506  0E9D                     	;# 
   507  0E9E                     	;# 
   508  0E9F                     	;# 
   509  0EA0                     	;# 
   510  0EA1                     	;# 
   511  0EA2                     	;# 
   512  0EA3                     	;# 
   513  0EA4                     	;# 
   514  0EA5                     	;# 
   515  0EA6                     	;# 
   516  0EA7                     	;# 
   517  0F0F                     	;# 
   518  0F10                     	;# 
   519  0F11                     	;# 
   520  0F12                     	;# 
   521  0F13                     	;# 
   522  0F14                     	;# 
   523  0F15                     	;# 
   524  0F16                     	;# 
   525  0F17                     	;# 
   526  0F18                     	;# 
   527  0F19                     	;# 
   528  0F1A                     	;# 
   529  0F1B                     	;# 
   530  0F1C                     	;# 
   531  0F1D                     	;# 
   532  0F1E                     	;# 
   533  0F1F                     	;# 
   534  0F20                     	;# 
   535  0F21                     	;# 
   536  0F22                     	;# 
   537  0F23                     	;# 
   538  0F24                     	;# 
   539  0F25                     	;# 
   540  0F26                     	;# 
   541  0F27                     	;# 
   542  0F28                     	;# 
   543  0F29                     	;# 
   544  0F2A                     	;# 
   545  0F2B                     	;# 
   546  0F2C                     	;# 
   547  0F2D                     	;# 
   548  0F2E                     	;# 
   549  0F2F                     	;# 
   550  0F30                     	;# 
   551  0F31                     	;# 
   552  0F32                     	;# 
   553  0F33                     	;# 
   554  0F34                     	;# 
   555  0F35                     	;# 
   556  0F36                     	;# 
   557  0F37                     	;# 
   558  0FE4                     	;# 
   559  0FE5                     	;# 
   560  0FE6                     	;# 
   561  0FE7                     	;# 
   562  0FE8                     	;# 
   563  0FE9                     	;# 
   564  0FEA                     	;# 
   565  0FEB                     	;# 
   566  0FED                     	;# 
   567  0FEE                     	;# 
   568  0FEF                     	;# 
   569  0000                     	;# 
   570  0001                     	;# 
   571  0002                     	;# 
   572  0003                     	;# 
   573  0004                     	;# 
   574  0005                     	;# 
   575  0006                     	;# 
   576  0007                     	;# 
   577  0008                     	;# 
   578  0009                     	;# 
   579  000A                     	;# 
   580  000B                     	;# 
   581  000C                     	;# 
   582  000D                     	;# 
   583  000E                     	;# 
   584  0010                     	;# 
   585  0011                     	;# 
   586  0012                     	;# 
   587  0013                     	;# 
   588  0014                     	;# 
   589  0015                     	;# 
   590  0016                     	;# 
   591  0016                     	;# 
   592  0017                     	;# 
   593  0018                     	;# 
   594  0019                     	;# 
   595  001A                     	;# 
   596  001A                     	;# 
   597  001B                     	;# 
   598  001B                     	;# 
   599  001C                     	;# 
   600  001D                     	;# 
   601  001E                     	;# 
   602  001F                     	;# 
   603  008C                     	;# 
   604  008D                     	;# 
   605  008E                     	;# 
   606  0090                     	;# 
   607  0091                     	;# 
   608  0092                     	;# 
   609  0093                     	;# 
   610  0094                     	;# 
   611  0095                     	;# 
   612  0096                     	;# 
   613  0098                     	;# 
   614  0099                     	;# 
   615  009A                     	;# 
   616  009B                     	;# 
   617  009B                     	;# 
   618  009C                     	;# 
   619  009D                     	;# 
   620  009E                     	;# 
   621  009F                     	;# 
   622  010C                     	;# 
   623  010D                     	;# 
   624  010E                     	;# 
   625  0111                     	;# 
   626  0112                     	;# 
   627  0113                     	;# 
   628  0114                     	;# 
   629  0115                     	;# 
   630  0116                     	;# 
   631  0117                     	;# 
   632  0118                     	;# 
   633  0119                     	;# 
   634  011C                     	;# 
   635  018C                     	;# 
   636  018D                     	;# 
   637  018E                     	;# 
   638  0191                     	;# 
   639  0191                     	;# 
   640  0192                     	;# 
   641  0193                     	;# 
   642  0193                     	;# 
   643  0194                     	;# 
   644  0195                     	;# 
   645  0196                     	;# 
   646  0197                     	;# 
   647  0199                     	;# 
   648  0199                     	;# 
   649  0199                     	;# 
   650  019A                     	;# 
   651  019A                     	;# 
   652  019A                     	;# 
   653  019B                     	;# 
   654  019B                     	;# 
   655  019B                     	;# 
   656  019B                     	;# 
   657  019B                     	;# 
   658  019C                     	;# 
   659  019C                     	;# 
   660  019C                     	;# 
   661  019D                     	;# 
   662  019D                     	;# 
   663  019D                     	;# 
   664  019E                     	;# 
   665  019E                     	;# 
   666  019E                     	;# 
   667  019F                     	;# 
   668  019F                     	;# 
   669  019F                     	;# 
   670  019F                     	;# 
   671  019F                     	;# 
   672  020C                     	;# 
   673  020D                     	;# 
   674  020E                     	;# 
   675  0211                     	;# 
   676  0211                     	;# 
   677  0212                     	;# 
   678  0212                     	;# 
   679  0213                     	;# 
   680  0213                     	;# 
   681  0214                     	;# 
   682  0214                     	;# 
   683  0215                     	;# 
   684  0215                     	;# 
   685  0215                     	;# 
   686  0215                     	;# 
   687  0216                     	;# 
   688  0216                     	;# 
   689  0217                     	;# 
   690  0217                     	;# 
   691  028C                     	;# 
   692  028D                     	;# 
   693  028E                     	;# 
   694  0291                     	;# 
   695  0291                     	;# 
   696  0292                     	;# 
   697  0293                     	;# 
   698  0294                     	;# 
   699  0298                     	;# 
   700  0298                     	;# 
   701  0299                     	;# 
   702  029A                     	;# 
   703  029B                     	;# 
   704  029E                     	;# 
   705  030C                     	;# 
   706  030D                     	;# 
   707  030E                     	;# 
   708  038C                     	;# 
   709  038D                     	;# 
   710  038E                     	;# 
   711  0391                     	;# 
   712  0392                     	;# 
   713  0393                     	;# 
   714  0394                     	;# 
   715  0395                     	;# 
   716  0396                     	;# 
   717  0397                     	;# 
   718  0398                     	;# 
   719  0399                     	;# 
   720  040E                     	;# 
   721  0413                     	;# 
   722  0413                     	;# 
   723  0414                     	;# 
   724  0414                     	;# 
   725  0415                     	;# 
   726  0416                     	;# 
   727  0417                     	;# 
   728  0418                     	;# 
   729  041A                     	;# 
   730  041A                     	;# 
   731  041B                     	;# 
   732  041B                     	;# 
   733  041C                     	;# 
   734  041D                     	;# 
   735  041E                     	;# 
   736  041F                     	;# 
   737  0493                     	;# 
   738  0494                     	;# 
   739  0495                     	;# 
   740  0496                     	;# 
   741  049A                     	;# 
   742  049B                     	;# 
   743  049C                     	;# 
   744  049D                     	;# 
   745  058C                     	;# 
   746  058C                     	;# 
   747  058D                     	;# 
   748  058E                     	;# 
   749  058E                     	;# 
   750  058F                     	;# 
   751  0590                     	;# 
   752  0590                     	;# 
   753  0591                     	;# 
   754  0592                     	;# 
   755  0592                     	;# 
   756  0593                     	;# 
   757  0594                     	;# 
   758  0594                     	;# 
   759  0595                     	;# 
   760  0596                     	;# 
   761  0596                     	;# 
   762  0597                     	;# 
   763  0598                     	;# 
   764  0599                     	;# 
   765  059A                     	;# 
   766  059B                     	;# 
   767  059B                     	;# 
   768  059C                     	;# 
   769  059D                     	;# 
   770  060C                     	;# 
   771  060C                     	;# 
   772  060D                     	;# 
   773  060E                     	;# 
   774  060F                     	;# 
   775  060F                     	;# 
   776  0610                     	;# 
   777  0611                     	;# 
   778  0612                     	;# 
   779  0613                     	;# 
   780  0614                     	;# 
   781  0617                     	;# 
   782  0618                     	;# 
   783  0619                     	;# 
   784  061A                     	;# 
   785  061B                     	;# 
   786  061C                     	;# 
   787  0691                     	;# 
   788  0692                     	;# 
   789  0693                     	;# 
   790  0694                     	;# 
   791  0695                     	;# 
   792  0696                     	;# 
   793  0697                     	;# 
   794  0699                     	;# 
   795  069A                     	;# 
   796  0711                     	;# 
   797  0712                     	;# 
   798  0713                     	;# 
   799  0714                     	;# 
   800  0715                     	;# 
   801  0718                     	;# 
   802  0718                     	;# 
   803  0719                     	;# 
   804  071A                     	;# 
   805  071A                     	;# 
   806  071B                     	;# 
   807  071C                     	;# 
   808  071D                     	;# 
   809  0791                     	;# 
   810  0791                     	;# 
   811  0792                     	;# 
   812  0793                     	;# 
   813  0793                     	;# 
   814  0794                     	;# 
   815  0795                     	;# 
   816  0795                     	;# 
   817  0796                     	;# 
   818  0797                     	;# 
   819  0797                     	;# 
   820  0798                     	;# 
   821  0799                     	;# 
   822  079A                     	;# 
   823  080C                     	;# 
   824  080C                     	;# 
   825  080D                     	;# 
   826  080E                     	;# 
   827  080E                     	;# 
   828  080F                     	;# 
   829  0810                     	;# 
   830  0810                     	;# 
   831  0811                     	;# 
   832  0812                     	;# 
   833  0812                     	;# 
   834  0813                     	;# 
   835  0814                     	;# 
   836  0815                     	;# 
   837  0816                     	;# 
   838  0817                     	;# 
   839  0818                     	;# 
   840  0819                     	;# 
   841  081A                     	;# 
   842  081A                     	;# 
   843  081B                     	;# 
   844  081C                     	;# 
   845  081C                     	;# 
   846  081D                     	;# 
   847  088C                     	;# 
   848  088D                     	;# 
   849  088E                     	;# 
   850  088F                     	;# 
   851  088F                     	;# 
   852  0890                     	;# 
   853  0891                     	;# 
   854  0892                     	;# 
   855  0893                     	;# 
   856  0893                     	;# 
   857  0894                     	;# 
   858  0895                     	;# 
   859  0896                     	;# 
   860  0897                     	;# 
   861  0897                     	;# 
   862  0898                     	;# 
   863  0899                     	;# 
   864  0D8C                     	;# 
   865  0D8C                     	;# 
   866  0D8D                     	;# 
   867  0D8E                     	;# 
   868  0D8F                     	;# 
   869  0D8F                     	;# 
   870  0D90                     	;# 
   871  0D91                     	;# 
   872  0D92                     	;# 
   873  0D92                     	;# 
   874  0D93                     	;# 
   875  0D94                     	;# 
   876  0D95                     	;# 
   877  0D95                     	;# 
   878  0D96                     	;# 
   879  0D97                     	;# 
   880  0D98                     	;# 
   881  0D99                     	;# 
   882  0D9A                     	;# 
   883  0D9B                     	;# 
   884  0D9C                     	;# 
   885  0D9D                     	;# 
   886  0D9E                     	;# 
   887  0D9E                     	;# 
   888  0D9F                     	;# 
   889  0DA0                     	;# 
   890  0DA1                     	;# 
   891  0DA1                     	;# 
   892  0DA2                     	;# 
   893  0DA3                     	;# 
   894  0DA4                     	;# 
   895  0DA4                     	;# 
   896  0DA5                     	;# 
   897  0DA6                     	;# 
   898  0DA7                     	;# 
   899  0DA7                     	;# 
   900  0DA8                     	;# 
   901  0DA9                     	;# 
   902  0DAA                     	;# 
   903  0DAB                     	;# 
   904  0DAC                     	;# 
   905  0DAD                     	;# 
   906  0DAE                     	;# 
   907  0DAF                     	;# 
   908  0E0F                     	;# 
   909  0E10                     	;# 
   910  0E11                     	;# 
   911  0E12                     	;# 
   912  0E13                     	;# 
   913  0E14                     	;# 
   914  0E15                     	;# 
   915  0E16                     	;# 
   916  0E17                     	;# 
   917  0E18                     	;# 
   918  0E19                     	;# 
   919  0E1A                     	;# 
   920  0E1B                     	;# 
   921  0E1C                     	;# 
   922  0E1D                     	;# 
   923  0E1E                     	;# 
   924  0E1F                     	;# 
   925  0E20                     	;# 
   926  0E21                     	;# 
   927  0E22                     	;# 
   928  0E23                     	;# 
   929  0E24                     	;# 
   930  0E25                     	;# 
   931  0E26                     	;# 
   932  0E27                     	;# 
   933  0E28                     	;# 
   934  0E29                     	;# 
   935  0E2A                     	;# 
   936  0E2B                     	;# 
   937  0E2C                     	;# 
   938  0E2D                     	;# 
   939  0E2E                     	;# 
   940  0E90                     	;# 
   941  0E91                     	;# 
   942  0E92                     	;# 
   943  0E94                     	;# 
   944  0E95                     	;# 
   945  0E9C                     	;# 
   946  0E9D                     	;# 
   947  0E9E                     	;# 
   948  0E9F                     	;# 
   949  0EA0                     	;# 
   950  0EA1                     	;# 
   951  0EA2                     	;# 
   952  0EA3                     	;# 
   953  0EA4                     	;# 
   954  0EA5                     	;# 
   955  0EA6                     	;# 
   956  0EA7                     	;# 
   957  0F0F                     	;# 
   958  0F10                     	;# 
   959  0F11                     	;# 
   960  0F12                     	;# 
   961  0F13                     	;# 
   962  0F14                     	;# 
   963  0F15                     	;# 
   964  0F16                     	;# 
   965  0F17                     	;# 
   966  0F18                     	;# 
   967  0F19                     	;# 
   968  0F1A                     	;# 
   969  0F1B                     	;# 
   970  0F1C                     	;# 
   971  0F1D                     	;# 
   972  0F1E                     	;# 
   973  0F1F                     	;# 
   974  0F20                     	;# 
   975  0F21                     	;# 
   976  0F22                     	;# 
   977  0F23                     	;# 
   978  0F24                     	;# 
   979  0F25                     	;# 
   980  0F26                     	;# 
   981  0F27                     	;# 
   982  0F28                     	;# 
   983  0F29                     	;# 
   984  0F2A                     	;# 
   985  0F2B                     	;# 
   986  0F2C                     	;# 
   987  0F2D                     	;# 
   988  0F2E                     	;# 
   989  0F2F                     	;# 
   990  0F30                     	;# 
   991  0F31                     	;# 
   992  0F32                     	;# 
   993  0F33                     	;# 
   994  0F34                     	;# 
   995  0F35                     	;# 
   996  0F36                     	;# 
   997  0F37                     	;# 
   998  0FE4                     	;# 
   999  0FE5                     	;# 
  1000  0FE6                     	;# 
  1001  0FE7                     	;# 
  1002  0FE8                     	;# 
  1003  0FE9                     	;# 
  1004  0FEA                     	;# 
  1005  0FEB                     	;# 
  1006  0FED                     	;# 
  1007  0FEE                     	;# 
  1008  0FEF                     	;# 
  1009  0000                     	;# 
  1010  0001                     	;# 
  1011  0002                     	;# 
  1012  0003                     	;# 
  1013  0004                     	;# 
  1014  0005                     	;# 
  1015  0006                     	;# 
  1016  0007                     	;# 
  1017  0008                     	;# 
  1018  0009                     	;# 
  1019  000A                     	;# 
  1020  000B                     	;# 
  1021  000C                     	;# 
  1022  000D                     	;# 
  1023  000E                     	;# 
  1024  0010                     	;# 
  1025  0011                     	;# 
  1026  0012                     	;# 
  1027  0013                     	;# 
  1028  0014                     	;# 
  1029  0015                     	;# 
  1030  0016                     	;# 
  1031  0016                     	;# 
  1032  0017                     	;# 
  1033  0018                     	;# 
  1034  0019                     	;# 
  1035  001A                     	;# 
  1036  001A                     	;# 
  1037  001B                     	;# 
  1038  001B                     	;# 
  1039  001C                     	;# 
  1040  001D                     	;# 
  1041  001E                     	;# 
  1042  001F                     	;# 
  1043  008C                     	;# 
  1044  008D                     	;# 
  1045  008E                     	;# 
  1046  0090                     	;# 
  1047  0091                     	;# 
  1048  0092                     	;# 
  1049  0093                     	;# 
  1050  0094                     	;# 
  1051  0095                     	;# 
  1052  0096                     	;# 
  1053  0098                     	;# 
  1054  0099                     	;# 
  1055  009A                     	;# 
  1056  009B                     	;# 
  1057  009B                     	;# 
  1058  009C                     	;# 
  1059  009D                     	;# 
  1060  009E                     	;# 
  1061  009F                     	;# 
  1062  010C                     	;# 
  1063  010D                     	;# 
  1064  010E                     	;# 
  1065  0111                     	;# 
  1066  0112                     	;# 
  1067  0113                     	;# 
  1068  0114                     	;# 
  1069  0115                     	;# 
  1070  0116                     	;# 
  1071  0117                     	;# 
  1072  0118                     	;# 
  1073  0119                     	;# 
  1074  011C                     	;# 
  1075  018C                     	;# 
  1076  018D                     	;# 
  1077  018E                     	;# 
  1078  0191                     	;# 
  1079  0191                     	;# 
  1080  0192                     	;# 
  1081  0193                     	;# 
  1082  0193                     	;# 
  1083  0194                     	;# 
  1084  0195                     	;# 
  1085  0196                     	;# 
  1086  0197                     	;# 
  1087  0199                     	;# 
  1088  0199                     	;# 
  1089  0199                     	;# 
  1090  019A                     	;# 
  1091  019A                     	;# 
  1092  019A                     	;# 
  1093  019B                     	;# 
  1094  019B                     	;# 
  1095  019B                     	;# 
  1096  019B                     	;# 
  1097  019B                     	;# 
  1098  019C                     	;# 
  1099  019C                     	;# 
  1100  019C                     	;# 
  1101  019D                     	;# 
  1102  019D                     	;# 
  1103  019D                     	;# 
  1104  019E                     	;# 
  1105  019E                     	;# 
  1106  019E                     	;# 
  1107  019F                     	;# 
  1108  019F                     	;# 
  1109  019F                     	;# 
  1110  019F                     	;# 
  1111  019F                     	;# 
  1112  020C                     	;# 
  1113  020D                     	;# 
  1114  020E                     	;# 
  1115  0211                     	;# 
  1116  0211                     	;# 
  1117  0212                     	;# 
  1118  0212                     	;# 
  1119  0213                     	;# 
  1120  0213                     	;# 
  1121  0214                     	;# 
  1122  0214                     	;# 
  1123  0215                     	;# 
  1124  0215                     	;# 
  1125  0215                     	;# 
  1126  0215                     	;# 
  1127  0216                     	;# 
  1128  0216                     	;# 
  1129  0217                     	;# 
  1130  0217                     	;# 
  1131  028C                     	;# 
  1132  028D                     	;# 
  1133  028E                     	;# 
  1134  0291                     	;# 
  1135  0291                     	;# 
  1136  0292                     	;# 
  1137  0293                     	;# 
  1138  0294                     	;# 
  1139  0298                     	;# 
  1140  0298                     	;# 
  1141  0299                     	;# 
  1142  029A                     	;# 
  1143  029B                     	;# 
  1144  029E                     	;# 
  1145  030C                     	;# 
  1146  030D                     	;# 
  1147  030E                     	;# 
  1148  038C                     	;# 
  1149  038D                     	;# 
  1150  038E                     	;# 
  1151  0391                     	;# 
  1152  0392                     	;# 
  1153  0393                     	;# 
  1154  0394                     	;# 
  1155  0395                     	;# 
  1156  0396                     	;# 
  1157  0397                     	;# 
  1158  0398                     	;# 
  1159  0399                     	;# 
  1160  040E                     	;# 
  1161  0413                     	;# 
  1162  0413                     	;# 
  1163  0414                     	;# 
  1164  0414                     	;# 
  1165  0415                     	;# 
  1166  0416                     	;# 
  1167  0417                     	;# 
  1168  0418                     	;# 
  1169  041A                     	;# 
  1170  041A                     	;# 
  1171  041B                     	;# 
  1172  041B                     	;# 
  1173  041C                     	;# 
  1174  041D                     	;# 
  1175  041E                     	;# 
  1176  041F                     	;# 
  1177  0493                     	;# 
  1178  0494                     	;# 
  1179  0495                     	;# 
  1180  0496                     	;# 
  1181  049A                     	;# 
  1182  049B                     	;# 
  1183  049C                     	;# 
  1184  049D                     	;# 
  1185  058C                     	;# 
  1186  058C                     	;# 
  1187  058D                     	;# 
  1188  058E                     	;# 
  1189  058E                     	;# 
  1190  058F                     	;# 
  1191  0590                     	;# 
  1192  0590                     	;# 
  1193  0591                     	;# 
  1194  0592                     	;# 
  1195  0592                     	;# 
  1196  0593                     	;# 
  1197  0594                     	;# 
  1198  0594                     	;# 
  1199  0595                     	;# 
  1200  0596                     	;# 
  1201  0596                     	;# 
  1202  0597                     	;# 
  1203  0598                     	;# 
  1204  0599                     	;# 
  1205  059A                     	;# 
  1206  059B                     	;# 
  1207  059B                     	;# 
  1208  059C                     	;# 
  1209  059D                     	;# 
  1210  060C                     	;# 
  1211  060C                     	;# 
  1212  060D                     	;# 
  1213  060E                     	;# 
  1214  060F                     	;# 
  1215  060F                     	;# 
  1216  0610                     	;# 
  1217  0611                     	;# 
  1218  0612                     	;# 
  1219  0613                     	;# 
  1220  0614                     	;# 
  1221  0617                     	;# 
  1222  0618                     	;# 
  1223  0619                     	;# 
  1224  061A                     	;# 
  1225  061B                     	;# 
  1226  061C                     	;# 
  1227  0691                     	;# 
  1228  0692                     	;# 
  1229  0693                     	;# 
  1230  0694                     	;# 
  1231  0695                     	;# 
  1232  0696                     	;# 
  1233  0697                     	;# 
  1234  0699                     	;# 
  1235  069A                     	;# 
  1236  0711                     	;# 
  1237  0712                     	;# 
  1238  0713                     	;# 
  1239  0714                     	;# 
  1240  0715                     	;# 
  1241  0718                     	;# 
  1242  0718                     	;# 
  1243  0719                     	;# 
  1244  071A                     	;# 
  1245  071A                     	;# 
  1246  071B                     	;# 
  1247  071C                     	;# 
  1248  071D                     	;# 
  1249  0791                     	;# 
  1250  0791                     	;# 
  1251  0792                     	;# 
  1252  0793                     	;# 
  1253  0793                     	;# 
  1254  0794                     	;# 
  1255  0795                     	;# 
  1256  0795                     	;# 
  1257  0796                     	;# 
  1258  0797                     	;# 
  1259  0797                     	;# 
  1260  0798                     	;# 
  1261  0799                     	;# 
  1262  079A                     	;# 
  1263  080C                     	;# 
  1264  080C                     	;# 
  1265  080D                     	;# 
  1266  080E                     	;# 
  1267  080E                     	;# 
  1268  080F                     	;# 
  1269  0810                     	;# 
  1270  0810                     	;# 
  1271  0811                     	;# 
  1272  0812                     	;# 
  1273  0812                     	;# 
  1274  0813                     	;# 
  1275  0814                     	;# 
  1276  0815                     	;# 
  1277  0816                     	;# 
  1278  0817                     	;# 
  1279  0818                     	;# 
  1280  0819                     	;# 
  1281  081A                     	;# 
  1282  081A                     	;# 
  1283  081B                     	;# 
  1284  081C                     	;# 
  1285  081C                     	;# 
  1286  081D                     	;# 
  1287  088C                     	;# 
  1288  088D                     	;# 
  1289  088E                     	;# 
  1290  088F                     	;# 
  1291  088F                     	;# 
  1292  0890                     	;# 
  1293  0891                     	;# 
  1294  0892                     	;# 
  1295  0893                     	;# 
  1296  0893                     	;# 
  1297  0894                     	;# 
  1298  0895                     	;# 
  1299  0896                     	;# 
  1300  0897                     	;# 
  1301  0897                     	;# 
  1302  0898                     	;# 
  1303  0899                     	;# 
  1304  0D8C                     	;# 
  1305  0D8C                     	;# 
  1306  0D8D                     	;# 
  1307  0D8E                     	;# 
  1308  0D8F                     	;# 
  1309  0D8F                     	;# 
  1310  0D90                     	;# 
  1311  0D91                     	;# 
  1312  0D92                     	;# 
  1313  0D92                     	;# 
  1314  0D93                     	;# 
  1315  0D94                     	;# 
  1316  0D95                     	;# 
  1317  0D95                     	;# 
  1318  0D96                     	;# 
  1319  0D97                     	;# 
  1320  0D98                     	;# 
  1321  0D99                     	;# 
  1322  0D9A                     	;# 
  1323  0D9B                     	;# 
  1324  0D9C                     	;# 
  1325  0D9D                     	;# 
  1326  0D9E                     	;# 
  1327  0D9E                     	;# 
  1328  0D9F                     	;# 
  1329  0DA0                     	;# 
  1330  0DA1                     	;# 
  1331  0DA1                     	;# 
  1332  0DA2                     	;# 
  1333  0DA3                     	;# 
  1334  0DA4                     	;# 
  1335  0DA4                     	;# 
  1336  0DA5                     	;# 
  1337  0DA6                     	;# 
  1338  0DA7                     	;# 
  1339  0DA7                     	;# 
  1340  0DA8                     	;# 
  1341  0DA9                     	;# 
  1342  0DAA                     	;# 
  1343  0DAB                     	;# 
  1344  0DAC                     	;# 
  1345  0DAD                     	;# 
  1346  0DAE                     	;# 
  1347  0DAF                     	;# 
  1348  0E0F                     	;# 
  1349  0E10                     	;# 
  1350  0E11                     	;# 
  1351  0E12                     	;# 
  1352  0E13                     	;# 
  1353  0E14                     	;# 
  1354  0E15                     	;# 
  1355  0E16                     	;# 
  1356  0E17                     	;# 
  1357  0E18                     	;# 
  1358  0E19                     	;# 
  1359  0E1A                     	;# 
  1360  0E1B                     	;# 
  1361  0E1C                     	;# 
  1362  0E1D                     	;# 
  1363  0E1E                     	;# 
  1364  0E1F                     	;# 
  1365  0E20                     	;# 
  1366  0E21                     	;# 
  1367  0E22                     	;# 
  1368  0E23                     	;# 
  1369  0E24                     	;# 
  1370  0E25                     	;# 
  1371  0E26                     	;# 
  1372  0E27                     	;# 
  1373  0E28                     	;# 
  1374  0E29                     	;# 
  1375  0E2A                     	;# 
  1376  0E2B                     	;# 
  1377  0E2C                     	;# 
  1378  0E2D                     	;# 
  1379  0E2E                     	;# 
  1380  0E90                     	;# 
  1381  0E91                     	;# 
  1382  0E92                     	;# 
  1383  0E94                     	;# 
  1384  0E95                     	;# 
  1385  0E9C                     	;# 
  1386  0E9D                     	;# 
  1387  0E9E                     	;# 
  1388  0E9F                     	;# 
  1389  0EA0                     	;# 
  1390  0EA1                     	;# 
  1391  0EA2                     	;# 
  1392  0EA3                     	;# 
  1393  0EA4                     	;# 
  1394  0EA5                     	;# 
  1395  0EA6                     	;# 
  1396  0EA7                     	;# 
  1397  0F0F                     	;# 
  1398  0F10                     	;# 
  1399  0F11                     	;# 
  1400  0F12                     	;# 
  1401  0F13                     	;# 
  1402  0F14                     	;# 
  1403  0F15                     	;# 
  1404  0F16                     	;# 
  1405  0F17                     	;# 
  1406  0F18                     	;# 
  1407  0F19                     	;# 
  1408  0F1A                     	;# 
  1409  0F1B                     	;# 
  1410  0F1C                     	;# 
  1411  0F1D                     	;# 
  1412  0F1E                     	;# 
  1413  0F1F                     	;# 
  1414  0F20                     	;# 
  1415  0F21                     	;# 
  1416  0F22                     	;# 
  1417  0F23                     	;# 
  1418  0F24                     	;# 
  1419  0F25                     	;# 
  1420  0F26                     	;# 
  1421  0F27                     	;# 
  1422  0F28                     	;# 
  1423  0F29                     	;# 
  1424  0F2A                     	;# 
  1425  0F2B                     	;# 
  1426  0F2C                     	;# 
  1427  0F2D                     	;# 
  1428  0F2E                     	;# 
  1429  0F2F                     	;# 
  1430  0F30                     	;# 
  1431  0F31                     	;# 
  1432  0F32                     	;# 
  1433  0F33                     	;# 
  1434  0F34                     	;# 
  1435  0F35                     	;# 
  1436  0F36                     	;# 
  1437  0F37                     	;# 
  1438  0FE4                     	;# 
  1439  0FE5                     	;# 
  1440  0FE6                     	;# 
  1441  0FE7                     	;# 
  1442  0FE8                     	;# 
  1443  0FE9                     	;# 
  1444  0FEA                     	;# 
  1445  0FEB                     	;# 
  1446  0FED                     	;# 
  1447  0FEE                     	;# 
  1448  0FEF                     	;# 
  1449  0000                     	;# 
  1450  0001                     	;# 
  1451  0002                     	;# 
  1452  0003                     	;# 
  1453  0004                     	;# 
  1454  0005                     	;# 
  1455  0006                     	;# 
  1456  0007                     	;# 
  1457  0008                     	;# 
  1458  0009                     	;# 
  1459  000A                     	;# 
  1460  000B                     	;# 
  1461  000C                     	;# 
  1462  000D                     	;# 
  1463  000E                     	;# 
  1464  0010                     	;# 
  1465  0011                     	;# 
  1466  0012                     	;# 
  1467  0013                     	;# 
  1468  0014                     	;# 
  1469  0015                     	;# 
  1470  0016                     	;# 
  1471  0016                     	;# 
  1472  0017                     	;# 
  1473  0018                     	;# 
  1474  0019                     	;# 
  1475  001A                     	;# 
  1476  001A                     	;# 
  1477  001B                     	;# 
  1478  001B                     	;# 
  1479  001C                     	;# 
  1480  001D                     	;# 
  1481  001E                     	;# 
  1482  001F                     	;# 
  1483  008C                     	;# 
  1484  008D                     	;# 
  1485  008E                     	;# 
  1486  0090                     	;# 
  1487  0091                     	;# 
  1488  0092                     	;# 
  1489  0093                     	;# 
  1490  0094                     	;# 
  1491  0095                     	;# 
  1492  0096                     	;# 
  1493  0098                     	;# 
  1494  0099                     	;# 
  1495  009A                     	;# 
  1496  009B                     	;# 
  1497  009B                     	;# 
  1498  009C                     	;# 
  1499  009D                     	;# 
  1500  009E                     	;# 
  1501  009F                     	;# 
  1502  010C                     	;# 
  1503  010D                     	;# 
  1504  010E                     	;# 
  1505  0111                     	;# 
  1506  0112                     	;# 
  1507  0113                     	;# 
  1508  0114                     	;# 
  1509  0115                     	;# 
  1510  0116                     	;# 
  1511  0117                     	;# 
  1512  0118                     	;# 
  1513  0119                     	;# 
  1514  011C                     	;# 
  1515  018C                     	;# 
  1516  018D                     	;# 
  1517  018E                     	;# 
  1518  0191                     	;# 
  1519  0191                     	;# 
  1520  0192                     	;# 
  1521  0193                     	;# 
  1522  0193                     	;# 
  1523  0194                     	;# 
  1524  0195                     	;# 
  1525  0196                     	;# 
  1526  0197                     	;# 
  1527  0199                     	;# 
  1528  0199                     	;# 
  1529  0199                     	;# 
  1530  019A                     	;# 
  1531  019A                     	;# 
  1532  019A                     	;# 
  1533  019B                     	;# 
  1534  019B                     	;# 
  1535  019B                     	;# 
  1536  019B                     	;# 
  1537  019B                     	;# 
  1538  019C                     	;# 
  1539  019C                     	;# 
  1540  019C                     	;# 
  1541  019D                     	;# 
  1542  019D                     	;# 
  1543  019D                     	;# 
  1544  019E                     	;# 
  1545  019E                     	;# 
  1546  019E                     	;# 
  1547  019F                     	;# 
  1548  019F                     	;# 
  1549  019F                     	;# 
  1550  019F                     	;# 
  1551  019F                     	;# 
  1552  020C                     	;# 
  1553  020D                     	;# 
  1554  020E                     	;# 
  1555  0211                     	;# 
  1556  0211                     	;# 
  1557  0212                     	;# 
  1558  0212                     	;# 
  1559  0213                     	;# 
  1560  0213                     	;# 
  1561  0214                     	;# 
  1562  0214                     	;# 
  1563  0215                     	;# 
  1564  0215                     	;# 
  1565  0215                     	;# 
  1566  0215                     	;# 
  1567  0216                     	;# 
  1568  0216                     	;# 
  1569  0217                     	;# 
  1570  0217                     	;# 
  1571  028C                     	;# 
  1572  028D                     	;# 
  1573  028E                     	;# 
  1574  0291                     	;# 
  1575  0291                     	;# 
  1576  0292                     	;# 
  1577  0293                     	;# 
  1578  0294                     	;# 
  1579  0298                     	;# 
  1580  0298                     	;# 
  1581  0299                     	;# 
  1582  029A                     	;# 
  1583  029B                     	;# 
  1584  029E                     	;# 
  1585  030C                     	;# 
  1586  030D                     	;# 
  1587  030E                     	;# 
  1588  038C                     	;# 
  1589  038D                     	;# 
  1590  038E                     	;# 
  1591  0391                     	;# 
  1592  0392                     	;# 
  1593  0393                     	;# 
  1594  0394                     	;# 
  1595  0395                     	;# 
  1596  0396                     	;# 
  1597  0397                     	;# 
  1598  0398                     	;# 
  1599  0399                     	;# 
  1600  040E                     	;# 
  1601  0413                     	;# 
  1602  0413                     	;# 
  1603  0414                     	;# 
  1604  0414                     	;# 
  1605  0415                     	;# 
  1606  0416                     	;# 
  1607  0417                     	;# 
  1608  0418                     	;# 
  1609  041A                     	;# 
  1610  041A                     	;# 
  1611  041B                     	;# 
  1612  041B                     	;# 
  1613  041C                     	;# 
  1614  041D                     	;# 
  1615  041E                     	;# 
  1616  041F                     	;# 
  1617  0493                     	;# 
  1618  0494                     	;# 
  1619  0495                     	;# 
  1620  0496                     	;# 
  1621  049A                     	;# 
  1622  049B                     	;# 
  1623  049C                     	;# 
  1624  049D                     	;# 
  1625  058C                     	;# 
  1626  058C                     	;# 
  1627  058D                     	;# 
  1628  058E                     	;# 
  1629  058E                     	;# 
  1630  058F                     	;# 
  1631  0590                     	;# 
  1632  0590                     	;# 
  1633  0591                     	;# 
  1634  0592                     	;# 
  1635  0592                     	;# 
  1636  0593                     	;# 
  1637  0594                     	;# 
  1638  0594                     	;# 
  1639  0595                     	;# 
  1640  0596                     	;# 
  1641  0596                     	;# 
  1642  0597                     	;# 
  1643  0598                     	;# 
  1644  0599                     	;# 
  1645  059A                     	;# 
  1646  059B                     	;# 
  1647  059B                     	;# 
  1648  059C                     	;# 
  1649  059D                     	;# 
  1650  060C                     	;# 
  1651  060C                     	;# 
  1652  060D                     	;# 
  1653  060E                     	;# 
  1654  060F                     	;# 
  1655  060F                     	;# 
  1656  0610                     	;# 
  1657  0611                     	;# 
  1658  0612                     	;# 
  1659  0613                     	;# 
  1660  0614                     	;# 
  1661  0617                     	;# 
  1662  0618                     	;# 
  1663  0619                     	;# 
  1664  061A                     	;# 
  1665  061B                     	;# 
  1666  061C                     	;# 
  1667  0691                     	;# 
  1668  0692                     	;# 
  1669  0693                     	;# 
  1670  0694                     	;# 
  1671  0695                     	;# 
  1672  0696                     	;# 
  1673  0697                     	;# 
  1674  0699                     	;# 
  1675  069A                     	;# 
  1676  0711                     	;# 
  1677  0712                     	;# 
  1678  0713                     	;# 
  1679  0714                     	;# 
  1680  0715                     	;# 
  1681  0718                     	;# 
  1682  0718                     	;# 
  1683  0719                     	;# 
  1684  071A                     	;# 
  1685  071A                     	;# 
  1686  071B                     	;# 
  1687  071C                     	;# 
  1688  071D                     	;# 
  1689  0791                     	;# 
  1690  0791                     	;# 
  1691  0792                     	;# 
  1692  0793                     	;# 
  1693  0793                     	;# 
  1694  0794                     	;# 
  1695  0795                     	;# 
  1696  0795                     	;# 
  1697  0796                     	;# 
  1698  0797                     	;# 
  1699  0797                     	;# 
  1700  0798                     	;# 
  1701  0799                     	;# 
  1702  079A                     	;# 
  1703  080C                     	;# 
  1704  080C                     	;# 
  1705  080D                     	;# 
  1706  080E                     	;# 
  1707  080E                     	;# 
  1708  080F                     	;# 
  1709  0810                     	;# 
  1710  0810                     	;# 
  1711  0811                     	;# 
  1712  0812                     	;# 
  1713  0812                     	;# 
  1714  0813                     	;# 
  1715  0814                     	;# 
  1716  0815                     	;# 
  1717  0816                     	;# 
  1718  0817                     	;# 
  1719  0818                     	;# 
  1720  0819                     	;# 
  1721  081A                     	;# 
  1722  081A                     	;# 
  1723  081B                     	;# 
  1724  081C                     	;# 
  1725  081C                     	;# 
  1726  081D                     	;# 
  1727  088C                     	;# 
  1728  088D                     	;# 
  1729  088E                     	;# 
  1730  088F                     	;# 
  1731  088F                     	;# 
  1732  0890                     	;# 
  1733  0891                     	;# 
  1734  0892                     	;# 
  1735  0893                     	;# 
  1736  0893                     	;# 
  1737  0894                     	;# 
  1738  0895                     	;# 
  1739  0896                     	;# 
  1740  0897                     	;# 
  1741  0897                     	;# 
  1742  0898                     	;# 
  1743  0899                     	;# 
  1744  0D8C                     	;# 
  1745  0D8C                     	;# 
  1746  0D8D                     	;# 
  1747  0D8E                     	;# 
  1748  0D8F                     	;# 
  1749  0D8F                     	;# 
  1750  0D90                     	;# 
  1751  0D91                     	;# 
  1752  0D92                     	;# 
  1753  0D92                     	;# 
  1754  0D93                     	;# 
  1755  0D94                     	;# 
  1756  0D95                     	;# 
  1757  0D95                     	;# 
  1758  0D96                     	;# 
  1759  0D97                     	;# 
  1760  0D98                     	;# 
  1761  0D99                     	;# 
  1762  0D9A                     	;# 
  1763  0D9B                     	;# 
  1764  0D9C                     	;# 
  1765  0D9D                     	;# 
  1766  0D9E                     	;# 
  1767  0D9E                     	;# 
  1768  0D9F                     	;# 
  1769  0DA0                     	;# 
  1770  0DA1                     	;# 
  1771  0DA1                     	;# 
  1772  0DA2                     	;# 
  1773  0DA3                     	;# 
  1774  0DA4                     	;# 
  1775  0DA4                     	;# 
  1776  0DA5                     	;# 
  1777  0DA6                     	;# 
  1778  0DA7                     	;# 
  1779  0DA7                     	;# 
  1780  0DA8                     	;# 
  1781  0DA9                     	;# 
  1782  0DAA                     	;# 
  1783  0DAB                     	;# 
  1784  0DAC                     	;# 
  1785  0DAD                     	;# 
  1786  0DAE                     	;# 
  1787  0DAF                     	;# 
  1788  0E0F                     	;# 
  1789  0E10                     	;# 
  1790  0E11                     	;# 
  1791  0E12                     	;# 
  1792  0E13                     	;# 
  1793  0E14                     	;# 
  1794  0E15                     	;# 
  1795  0E16                     	;# 
  1796  0E17                     	;# 
  1797  0E18                     	;# 
  1798  0E19                     	;# 
  1799  0E1A                     	;# 
  1800  0E1B                     	;# 
  1801  0E1C                     	;# 
  1802  0E1D                     	;# 
  1803  0E1E                     	;# 
  1804  0E1F                     	;# 
  1805  0E20                     	;# 
  1806  0E21                     	;# 
  1807  0E22                     	;# 
  1808  0E23                     	;# 
  1809  0E24                     	;# 
  1810  0E25                     	;# 
  1811  0E26                     	;# 
  1812  0E27                     	;# 
  1813  0E28                     	;# 
  1814  0E29                     	;# 
  1815  0E2A                     	;# 
  1816  0E2B                     	;# 
  1817  0E2C                     	;# 
  1818  0E2D                     	;# 
  1819  0E2E                     	;# 
  1820  0E90                     	;# 
  1821  0E91                     	;# 
  1822  0E92                     	;# 
  1823  0E94                     	;# 
  1824  0E95                     	;# 
  1825  0E9C                     	;# 
  1826  0E9D                     	;# 
  1827  0E9E                     	;# 
  1828  0E9F                     	;# 
  1829  0EA0                     	;# 
  1830  0EA1                     	;# 
  1831  0EA2                     	;# 
  1832  0EA3                     	;# 
  1833  0EA4                     	;# 
  1834  0EA5                     	;# 
  1835  0EA6                     	;# 
  1836  0EA7                     	;# 
  1837  0F0F                     	;# 
  1838  0F10                     	;# 
  1839  0F11                     	;# 
  1840  0F12                     	;# 
  1841  0F13                     	;# 
  1842  0F14                     	;# 
  1843  0F15                     	;# 
  1844  0F16                     	;# 
  1845  0F17                     	;# 
  1846  0F18                     	;# 
  1847  0F19                     	;# 
  1848  0F1A                     	;# 
  1849  0F1B                     	;# 
  1850  0F1C                     	;# 
  1851  0F1D                     	;# 
  1852  0F1E                     	;# 
  1853  0F1F                     	;# 
  1854  0F20                     	;# 
  1855  0F21                     	;# 
  1856  0F22                     	;# 
  1857  0F23                     	;# 
  1858  0F24                     	;# 
  1859  0F25                     	;# 
  1860  0F26                     	;# 
  1861  0F27                     	;# 
  1862  0F28                     	;# 
  1863  0F29                     	;# 
  1864  0F2A                     	;# 
  1865  0F2B                     	;# 
  1866  0F2C                     	;# 
  1867  0F2D                     	;# 
  1868  0F2E                     	;# 
  1869  0F2F                     	;# 
  1870  0F30                     	;# 
  1871  0F31                     	;# 
  1872  0F32                     	;# 
  1873  0F33                     	;# 
  1874  0F34                     	;# 
  1875  0F35                     	;# 
  1876  0F36                     	;# 
  1877  0F37                     	;# 
  1878  0FE4                     	;# 
  1879  0FE5                     	;# 
  1880  0FE6                     	;# 
  1881  0FE7                     	;# 
  1882  0FE8                     	;# 
  1883  0FE9                     	;# 
  1884  0FEA                     	;# 
  1885  0FEB                     	;# 
  1886  0FED                     	;# 
  1887  0FEE                     	;# 
  1888  0FEF                     	;# 
  1889  0000                     	;# 
  1890  0001                     	;# 
  1891  0002                     	;# 
  1892  0003                     	;# 
  1893  0004                     	;# 
  1894  0005                     	;# 
  1895  0006                     	;# 
  1896  0007                     	;# 
  1897  0008                     	;# 
  1898  0009                     	;# 
  1899  000A                     	;# 
  1900  000B                     	;# 
  1901  000C                     	;# 
  1902  000D                     	;# 
  1903  000E                     	;# 
  1904  0010                     	;# 
  1905  0011                     	;# 
  1906  0012                     	;# 
  1907  0013                     	;# 
  1908  0014                     	;# 
  1909  0015                     	;# 
  1910  0016                     	;# 
  1911  0016                     	;# 
  1912  0017                     	;# 
  1913  0018                     	;# 
  1914  0019                     	;# 
  1915  001A                     	;# 
  1916  001A                     	;# 
  1917  001B                     	;# 
  1918  001B                     	;# 
  1919  001C                     	;# 
  1920  001D                     	;# 
  1921  001E                     	;# 
  1922  001F                     	;# 
  1923  008C                     	;# 
  1924  008D                     	;# 
  1925  008E                     	;# 
  1926  0090                     	;# 
  1927  0091                     	;# 
  1928  0092                     	;# 
  1929  0093                     	;# 
  1930  0094                     	;# 
  1931  0095                     	;# 
  1932  0096                     	;# 
  1933  0098                     	;# 
  1934  0099                     	;# 
  1935  009A                     	;# 
  1936  009B                     	;# 
  1937  009B                     	;# 
  1938  009C                     	;# 
  1939  009D                     	;# 
  1940  009E                     	;# 
  1941  009F                     	;# 
  1942  010C                     	;# 
  1943  010D                     	;# 
  1944  010E                     	;# 
  1945  0111                     	;# 
  1946  0112                     	;# 
  1947  0113                     	;# 
  1948  0114                     	;# 
  1949  0115                     	;# 
  1950  0116                     	;# 
  1951  0117                     	;# 
  1952  0118                     	;# 
  1953  0119                     	;# 
  1954  011C                     	;# 
  1955  018C                     	;# 
  1956  018D                     	;# 
  1957  018E                     	;# 
  1958  0191                     	;# 
  1959  0191                     	;# 
  1960  0192                     	;# 
  1961  0193                     	;# 
  1962  0193                     	;# 
  1963  0194                     	;# 
  1964  0195                     	;# 
  1965  0196                     	;# 
  1966  0197                     	;# 
  1967  0199                     	;# 
  1968  0199                     	;# 
  1969  0199                     	;# 
  1970  019A                     	;# 
  1971  019A                     	;# 
  1972  019A                     	;# 
  1973  019B                     	;# 
  1974  019B                     	;# 
  1975  019B                     	;# 
  1976  019B                     	;# 
  1977  019B                     	;# 
  1978  019C                     	;# 
  1979  019C                     	;# 
  1980  019C                     	;# 
  1981  019D                     	;# 
  1982  019D                     	;# 
  1983  019D                     	;# 
  1984  019E                     	;# 
  1985  019E                     	;# 
  1986  019E                     	;# 
  1987  019F                     	;# 
  1988  019F                     	;# 
  1989  019F                     	;# 
  1990  019F                     	;# 
  1991  019F                     	;# 
  1992  020C                     	;# 
  1993  020D                     	;# 
  1994  020E                     	;# 
  1995  0211                     	;# 
  1996  0211                     	;# 
  1997  0212                     	;# 
  1998  0212                     	;# 
  1999  0213                     	;# 
  2000  0213                     	;# 
  2001  0214                     	;# 
  2002  0214                     	;# 
  2003  0215                     	;# 
  2004  0215                     	;# 
  2005  0215                     	;# 
  2006  0215                     	;# 
  2007  0216                     	;# 
  2008  0216                     	;# 
  2009  0217                     	;# 
  2010  0217                     	;# 
  2011  028C                     	;# 
  2012  028D                     	;# 
  2013  028E                     	;# 
  2014  0291                     	;# 
  2015  0291                     	;# 
  2016  0292                     	;# 
  2017  0293                     	;# 
  2018  0294                     	;# 
  2019  0298                     	;# 
  2020  0298                     	;# 
  2021  0299                     	;# 
  2022  029A                     	;# 
  2023  029B                     	;# 
  2024  029E                     	;# 
  2025  030C                     	;# 
  2026  030D                     	;# 
  2027  030E                     	;# 
  2028  038C                     	;# 
  2029  038D                     	;# 
  2030  038E                     	;# 
  2031  0391                     	;# 
  2032  0392                     	;# 
  2033  0393                     	;# 
  2034  0394                     	;# 
  2035  0395                     	;# 
  2036  0396                     	;# 
  2037  0397                     	;# 
  2038  0398                     	;# 
  2039  0399                     	;# 
  2040  040E                     	;# 
  2041  0413                     	;# 
  2042  0413                     	;# 
  2043  0414                     	;# 
  2044  0414                     	;# 
  2045  0415                     	;# 
  2046  0416                     	;# 
  2047  0417                     	;# 
  2048  0418                     	;# 
  2049  041A                     	;# 
  2050  041A                     	;# 
  2051  041B                     	;# 
  2052  041B                     	;# 
  2053  041C                     	;# 
  2054  041D                     	;# 
  2055  041E                     	;# 
  2056  041F                     	;# 
  2057  0493                     	;# 
  2058  0494                     	;# 
  2059  0495                     	;# 
  2060  0496                     	;# 
  2061  049A                     	;# 
  2062  049B                     	;# 
  2063  049C                     	;# 
  2064  049D                     	;# 
  2065  058C                     	;# 
  2066  058C                     	;# 
  2067  058D                     	;# 
  2068  058E                     	;# 
  2069  058E                     	;# 
  2070  058F                     	;# 
  2071  0590                     	;# 
  2072  0590                     	;# 
  2073  0591                     	;# 
  2074  0592                     	;# 
  2075  0592                     	;# 
  2076  0593                     	;# 
  2077  0594                     	;# 
  2078  0594                     	;# 
  2079  0595                     	;# 
  2080  0596                     	;# 
  2081  0596                     	;# 
  2082  0597                     	;# 
  2083  0598                     	;# 
  2084  0599                     	;# 
  2085  059A                     	;# 
  2086  059B                     	;# 
  2087  059B                     	;# 
  2088  059C                     	;# 
  2089  059D                     	;# 
  2090  060C                     	;# 
  2091  060C                     	;# 
  2092  060D                     	;# 
  2093  060E                     	;# 
  2094  060F                     	;# 
  2095  060F                     	;# 
  2096  0610                     	;# 
  2097  0611                     	;# 
  2098  0612                     	;# 
  2099  0613                     	;# 
  2100  0614                     	;# 
  2101  0617                     	;# 
  2102  0618                     	;# 
  2103  0619                     	;# 
  2104  061A                     	;# 
  2105  061B                     	;# 
  2106  061C                     	;# 
  2107  0691                     	;# 
  2108  0692                     	;# 
  2109  0693                     	;# 
  2110  0694                     	;# 
  2111  0695                     	;# 
  2112  0696                     	;# 
  2113  0697                     	;# 
  2114  0699                     	;# 
  2115  069A                     	;# 
  2116  0711                     	;# 
  2117  0712                     	;# 
  2118  0713                     	;# 
  2119  0714                     	;# 
  2120  0715                     	;# 
  2121  0718                     	;# 
  2122  0718                     	;# 
  2123  0719                     	;# 
  2124  071A                     	;# 
  2125  071A                     	;# 
  2126  071B                     	;# 
  2127  071C                     	;# 
  2128  071D                     	;# 
  2129  0791                     	;# 
  2130  0791                     	;# 
  2131  0792                     	;# 
  2132  0793                     	;# 
  2133  0793                     	;# 
  2134  0794                     	;# 
  2135  0795                     	;# 
  2136  0795                     	;# 
  2137  0796                     	;# 
  2138  0797                     	;# 
  2139  0797                     	;# 
  2140  0798                     	;# 
  2141  0799                     	;# 
  2142  079A                     	;# 
  2143  080C                     	;# 
  2144  080C                     	;# 
  2145  080D                     	;# 
  2146  080E                     	;# 
  2147  080E                     	;# 
  2148  080F                     	;# 
  2149  0810                     	;# 
  2150  0810                     	;# 
  2151  0811                     	;# 
  2152  0812                     	;# 
  2153  0812                     	;# 
  2154  0813                     	;# 
  2155  0814                     	;# 
  2156  0815                     	;# 
  2157  0816                     	;# 
  2158  0817                     	;# 
  2159  0818                     	;# 
  2160  0819                     	;# 
  2161  081A                     	;# 
  2162  081A                     	;# 
  2163  081B                     	;# 
  2164  081C                     	;# 
  2165  081C                     	;# 
  2166  081D                     	;# 
  2167  088C                     	;# 
  2168  088D                     	;# 
  2169  088E                     	;# 
  2170  088F                     	;# 
  2171  088F                     	;# 
  2172  0890                     	;# 
  2173  0891                     	;# 
  2174  0892                     	;# 
  2175  0893                     	;# 
  2176  0893                     	;# 
  2177  0894                     	;# 
  2178  0895                     	;# 
  2179  0896                     	;# 
  2180  0897                     	;# 
  2181  0897                     	;# 
  2182  0898                     	;# 
  2183  0899                     	;# 
  2184  0D8C                     	;# 
  2185  0D8C                     	;# 
  2186  0D8D                     	;# 
  2187  0D8E                     	;# 
  2188  0D8F                     	;# 
  2189  0D8F                     	;# 
  2190  0D90                     	;# 
  2191  0D91                     	;# 
  2192  0D92                     	;# 
  2193  0D92                     	;# 
  2194  0D93                     	;# 
  2195  0D94                     	;# 
  2196  0D95                     	;# 
  2197  0D95                     	;# 
  2198  0D96                     	;# 
  2199  0D97                     	;# 
  2200  0D98                     	;# 
  2201  0D99                     	;# 
  2202  0D9A                     	;# 
  2203  0D9B                     	;# 
  2204  0D9C                     	;# 
  2205  0D9D                     	;# 
  2206  0D9E                     	;# 
  2207  0D9E                     	;# 
  2208  0D9F                     	;# 
  2209  0DA0                     	;# 
  2210  0DA1                     	;# 
  2211  0DA1                     	;# 
  2212  0DA2                     	;# 
  2213  0DA3                     	;# 
  2214  0DA4                     	;# 
  2215  0DA4                     	;# 
  2216  0DA5                     	;# 
  2217  0DA6                     	;# 
  2218  0DA7                     	;# 
  2219  0DA7                     	;# 
  2220  0DA8                     	;# 
  2221  0DA9                     	;# 
  2222  0DAA                     	;# 
  2223  0DAB                     	;# 
  2224  0DAC                     	;# 
  2225  0DAD                     	;# 
  2226  0DAE                     	;# 
  2227  0DAF                     	;# 
  2228  0E0F                     	;# 
  2229  0E10                     	;# 
  2230  0E11                     	;# 
  2231  0E12                     	;# 
  2232  0E13                     	;# 
  2233  0E14                     	;# 
  2234  0E15                     	;# 
  2235  0E16                     	;# 
  2236  0E17                     	;# 
  2237  0E18                     	;# 
  2238  0E19                     	;# 
  2239  0E1A                     	;# 
  2240  0E1B                     	;# 
  2241  0E1C                     	;# 
  2242  0E1D                     	;# 
  2243  0E1E                     	;# 
  2244  0E1F                     	;# 
  2245  0E20                     	;# 
  2246  0E21                     	;# 
  2247  0E22                     	;# 
  2248  0E23                     	;# 
  2249  0E24                     	;# 
  2250  0E25                     	;# 
  2251  0E26                     	;# 
  2252  0E27                     	;# 
  2253  0E28                     	;# 
  2254  0E29                     	;# 
  2255  0E2A                     	;# 
  2256  0E2B                     	;# 
  2257  0E2C                     	;# 
  2258  0E2D                     	;# 
  2259  0E2E                     	;# 
  2260  0E90                     	;# 
  2261  0E91                     	;# 
  2262  0E92                     	;# 
  2263  0E94                     	;# 
  2264  0E95                     	;# 
  2265  0E9C                     	;# 
  2266  0E9D                     	;# 
  2267  0E9E                     	;# 
  2268  0E9F                     	;# 
  2269  0EA0                     	;# 
  2270  0EA1                     	;# 
  2271  0EA2                     	;# 
  2272  0EA3                     	;# 
  2273  0EA4                     	;# 
  2274  0EA5                     	;# 
  2275  0EA6                     	;# 
  2276  0EA7                     	;# 
  2277  0F0F                     	;# 
  2278  0F10                     	;# 
  2279  0F11                     	;# 
  2280  0F12                     	;# 
  2281  0F13                     	;# 
  2282  0F14                     	;# 
  2283  0F15                     	;# 
  2284  0F16                     	;# 
  2285  0F17                     	;# 
  2286  0F18                     	;# 
  2287  0F19                     	;# 
  2288  0F1A                     	;# 
  2289  0F1B                     	;# 
  2290  0F1C                     	;# 
  2291  0F1D                     	;# 
  2292  0F1E                     	;# 
  2293  0F1F                     	;# 
  2294  0F20                     	;# 
  2295  0F21                     	;# 
  2296  0F22                     	;# 
  2297  0F23                     	;# 
  2298  0F24                     	;# 
  2299  0F25                     	;# 
  2300  0F26                     	;# 
  2301  0F27                     	;# 
  2302  0F28                     	;# 
  2303  0F29                     	;# 
  2304  0F2A                     	;# 
  2305  0F2B                     	;# 
  2306  0F2C                     	;# 
  2307  0F2D                     	;# 
  2308  0F2E                     	;# 
  2309  0F2F                     	;# 
  2310  0F30                     	;# 
  2311  0F31                     	;# 
  2312  0F32                     	;# 
  2313  0F33                     	;# 
  2314  0F34                     	;# 
  2315  0F35                     	;# 
  2316  0F36                     	;# 
  2317  0F37                     	;# 
  2318  0FE4                     	;# 
  2319  0FE5                     	;# 
  2320  0FE6                     	;# 
  2321  0FE7                     	;# 
  2322  0FE8                     	;# 
  2323  0FE9                     	;# 
  2324  0FEA                     	;# 
  2325  0FEB                     	;# 
  2326  0FED                     	;# 
  2327  0FEE                     	;# 
  2328  0FEF                     	;# 
  2329  0000                     	;# 
  2330  0001                     	;# 
  2331  0002                     	;# 
  2332  0003                     	;# 
  2333  0004                     	;# 
  2334  0005                     	;# 
  2335  0006                     	;# 
  2336  0007                     	;# 
  2337  0008                     	;# 
  2338  0009                     	;# 
  2339  000A                     	;# 
  2340  000B                     	;# 
  2341  000C                     	;# 
  2342  000D                     	;# 
  2343  000E                     	;# 
  2344  0010                     	;# 
  2345  0011                     	;# 
  2346  0012                     	;# 
  2347  0013                     	;# 
  2348  0014                     	;# 
  2349  0015                     	;# 
  2350  0016                     	;# 
  2351  0016                     	;# 
  2352  0017                     	;# 
  2353  0018                     	;# 
  2354  0019                     	;# 
  2355  001A                     	;# 
  2356  001A                     	;# 
  2357  001B                     	;# 
  2358  001B                     	;# 
  2359  001C                     	;# 
  2360  001D                     	;# 
  2361  001E                     	;# 
  2362  001F                     	;# 
  2363  008C                     	;# 
  2364  008D                     	;# 
  2365  008E                     	;# 
  2366  0090                     	;# 
  2367  0091                     	;# 
  2368  0092                     	;# 
  2369  0093                     	;# 
  2370  0094                     	;# 
  2371  0095                     	;# 
  2372  0096                     	;# 
  2373  0098                     	;# 
  2374  0099                     	;# 
  2375  009A                     	;# 
  2376  009B                     	;# 
  2377  009B                     	;# 
  2378  009C                     	;# 
  2379  009D                     	;# 
  2380  009E                     	;# 
  2381  009F                     	;# 
  2382  010C                     	;# 
  2383  010D                     	;# 
  2384  010E                     	;# 
  2385  0111                     	;# 
  2386  0112                     	;# 
  2387  0113                     	;# 
  2388  0114                     	;# 
  2389  0115                     	;# 
  2390  0116                     	;# 
  2391  0117                     	;# 
  2392  0118                     	;# 
  2393  0119                     	;# 
  2394  011C                     	;# 
  2395  018C                     	;# 
  2396  018D                     	;# 
  2397  018E                     	;# 
  2398  0191                     	;# 
  2399  0191                     	;# 
  2400  0192                     	;# 
  2401  0193                     	;# 
  2402  0193                     	;# 
  2403  0194                     	;# 
  2404  0195                     	;# 
  2405  0196                     	;# 
  2406  0197                     	;# 
  2407  0199                     	;# 
  2408  0199                     	;# 
  2409  0199                     	;# 
  2410  019A                     	;# 
  2411  019A                     	;# 
  2412  019A                     	;# 
  2413  019B                     	;# 
  2414  019B                     	;# 
  2415  019B                     	;# 
  2416  019B                     	;# 
  2417  019B                     	;# 
  2418  019C                     	;# 
  2419  019C                     	;# 
  2420  019C                     	;# 
  2421  019D                     	;# 
  2422  019D                     	;# 
  2423  019D                     	;# 
  2424  019E                     	;# 
  2425  019E                     	;# 
  2426  019E                     	;# 
  2427  019F                     	;# 
  2428  019F                     	;# 
  2429  019F                     	;# 
  2430  019F                     	;# 
  2431  019F                     	;# 
  2432  020C                     	;# 
  2433  020D                     	;# 
  2434  020E                     	;# 
  2435  0211                     	;# 
  2436  0211                     	;# 
  2437  0212                     	;# 
  2438  0212                     	;# 
  2439  0213                     	;# 
  2440  0213                     	;# 
  2441  0214                     	;# 
  2442  0214                     	;# 
  2443  0215                     	;# 
  2444  0215                     	;# 
  2445  0215                     	;# 
  2446  0215                     	;# 
  2447  0216                     	;# 
  2448  0216                     	;# 
  2449  0217                     	;# 
  2450  0217                     	;# 
  2451  028C                     	;# 
  2452  028D                     	;# 
  2453  028E                     	;# 
  2454  0291                     	;# 
  2455  0291                     	;# 
  2456  0292                     	;# 
  2457  0293                     	;# 
  2458  0294                     	;# 
  2459  0298                     	;# 
  2460  0298                     	;# 
  2461  0299                     	;# 
  2462  029A                     	;# 
  2463  029B                     	;# 
  2464  029E                     	;# 
  2465  030C                     	;# 
  2466  030D                     	;# 
  2467  030E                     	;# 
  2468  038C                     	;# 
  2469  038D                     	;# 
  2470  038E                     	;# 
  2471  0391                     	;# 
  2472  0392                     	;# 
  2473  0393                     	;# 
  2474  0394                     	;# 
  2475  0395                     	;# 
  2476  0396                     	;# 
  2477  0397                     	;# 
  2478  0398                     	;# 
  2479  0399                     	;# 
  2480  040E                     	;# 
  2481  0413                     	;# 
  2482  0413                     	;# 
  2483  0414                     	;# 
  2484  0414                     	;# 
  2485  0415                     	;# 
  2486  0416                     	;# 
  2487  0417                     	;# 
  2488  0418                     	;# 
  2489  041A                     	;# 
  2490  041A                     	;# 
  2491  041B                     	;# 
  2492  041B                     	;# 
  2493  041C                     	;# 
  2494  041D                     	;# 
  2495  041E                     	;# 
  2496  041F                     	;# 
  2497  0493                     	;# 
  2498  0494                     	;# 
  2499  0495                     	;# 
  2500  0496                     	;# 
  2501  049A                     	;# 
  2502  049B                     	;# 
  2503  049C                     	;# 
  2504  049D                     	;# 
  2505  058C                     	;# 
  2506  058C                     	;# 
  2507  058D                     	;# 
  2508  058E                     	;# 
  2509  058E                     	;# 
  2510  058F                     	;# 
  2511  0590                     	;# 
  2512  0590                     	;# 
  2513  0591                     	;# 
  2514  0592                     	;# 
  2515  0592                     	;# 
  2516  0593                     	;# 
  2517  0594                     	;# 
  2518  0594                     	;# 
  2519  0595                     	;# 
  2520  0596                     	;# 
  2521  0596                     	;# 
  2522  0597                     	;# 
  2523  0598                     	;# 
  2524  0599                     	;# 
  2525  059A                     	;# 
  2526  059B                     	;# 
  2527  059B                     	;# 
  2528  059C                     	;# 
  2529  059D                     	;# 
  2530  060C                     	;# 
  2531  060C                     	;# 
  2532  060D                     	;# 
  2533  060E                     	;# 
  2534  060F                     	;# 
  2535  060F                     	;# 
  2536  0610                     	;# 
  2537  0611                     	;# 
  2538  0612                     	;# 
  2539  0613                     	;# 
  2540  0614                     	;# 
  2541  0617                     	;# 
  2542  0618                     	;# 
  2543  0619                     	;# 
  2544  061A                     	;# 
  2545  061B                     	;# 
  2546  061C                     	;# 
  2547  0691                     	;# 
  2548  0692                     	;# 
  2549  0693                     	;# 
  2550  0694                     	;# 
  2551  0695                     	;# 
  2552  0696                     	;# 
  2553  0697                     	;# 
  2554  0699                     	;# 
  2555  069A                     	;# 
  2556  0711                     	;# 
  2557  0712                     	;# 
  2558  0713                     	;# 
  2559  0714                     	;# 
  2560  0715                     	;# 
  2561  0718                     	;# 
  2562  0718                     	;# 
  2563  0719                     	;# 
  2564  071A                     	;# 
  2565  071A                     	;# 
  2566  071B                     	;# 
  2567  071C                     	;# 
  2568  071D                     	;# 
  2569  0791                     	;# 
  2570  0791                     	;# 
  2571  0792                     	;# 
  2572  0793                     	;# 
  2573  0793                     	;# 
  2574  0794                     	;# 
  2575  0795                     	;# 
  2576  0795                     	;# 
  2577  0796                     	;# 
  2578  0797                     	;# 
  2579  0797                     	;# 
  2580  0798                     	;# 
  2581  0799                     	;# 
  2582  079A                     	;# 
  2583  080C                     	;# 
  2584  080C                     	;# 
  2585  080D                     	;# 
  2586  080E                     	;# 
  2587  080E                     	;# 
  2588  080F                     	;# 
  2589  0810                     	;# 
  2590  0810                     	;# 
  2591  0811                     	;# 
  2592  0812                     	;# 
  2593  0812                     	;# 
  2594  0813                     	;# 
  2595  0814                     	;# 
  2596  0815                     	;# 
  2597  0816                     	;# 
  2598  0817                     	;# 
  2599  0818                     	;# 
  2600  0819                     	;# 
  2601  081A                     	;# 
  2602  081A                     	;# 
  2603  081B                     	;# 
  2604  081C                     	;# 
  2605  081C                     	;# 
  2606  081D                     	;# 
  2607  088C                     	;# 
  2608  088D                     	;# 
  2609  088E                     	;# 
  2610  088F                     	;# 
  2611  088F                     	;# 
  2612  0890                     	;# 
  2613  0891                     	;# 
  2614  0892                     	;# 
  2615  0893                     	;# 
  2616  0893                     	;# 
  2617  0894                     	;# 
  2618  0895                     	;# 
  2619  0896                     	;# 
  2620  0897                     	;# 
  2621  0897                     	;# 
  2622  0898                     	;# 
  2623  0899                     	;# 
  2624  0D8C                     	;# 
  2625  0D8C                     	;# 
  2626  0D8D                     	;# 
  2627  0D8E                     	;# 
  2628  0D8F                     	;# 
  2629  0D8F                     	;# 
  2630  0D90                     	;# 
  2631  0D91                     	;# 
  2632  0D92                     	;# 
  2633  0D92                     	;# 
  2634  0D93                     	;# 
  2635  0D94                     	;# 
  2636  0D95                     	;# 
  2637  0D95                     	;# 
  2638  0D96                     	;# 
  2639  0D97                     	;# 
  2640  0D98                     	;# 
  2641  0D99                     	;# 
  2642  0D9A                     	;# 
  2643  0D9B                     	;# 
  2644  0D9C                     	;# 
  2645  0D9D                     	;# 
  2646  0D9E                     	;# 
  2647  0D9E                     	;# 
  2648  0D9F                     	;# 
  2649  0DA0                     	;# 
  2650  0DA1                     	;# 
  2651  0DA1                     	;# 
  2652  0DA2                     	;# 
  2653  0DA3                     	;# 
  2654  0DA4                     	;# 
  2655  0DA4                     	;# 
  2656  0DA5                     	;# 
  2657  0DA6                     	;# 
  2658  0DA7                     	;# 
  2659  0DA7                     	;# 
  2660  0DA8                     	;# 
  2661  0DA9                     	;# 
  2662  0DAA                     	;# 
  2663  0DAB                     	;# 
  2664  0DAC                     	;# 
  2665  0DAD                     	;# 
  2666  0DAE                     	;# 
  2667  0DAF                     	;# 
  2668  0E0F                     	;# 
  2669  0E10                     	;# 
  2670  0E11                     	;# 
  2671  0E12                     	;# 
  2672  0E13                     	;# 
  2673  0E14                     	;# 
  2674  0E15                     	;# 
  2675  0E16                     	;# 
  2676  0E17                     	;# 
  2677  0E18                     	;# 
  2678  0E19                     	;# 
  2679  0E1A                     	;# 
  2680  0E1B                     	;# 
  2681  0E1C                     	;# 
  2682  0E1D                     	;# 
  2683  0E1E                     	;# 
  2684  0E1F                     	;# 
  2685  0E20                     	;# 
  2686  0E21                     	;# 
  2687  0E22                     	;# 
  2688  0E23                     	;# 
  2689  0E24                     	;# 
  2690  0E25                     	;# 
  2691  0E26                     	;# 
  2692  0E27                     	;# 
  2693  0E28                     	;# 
  2694  0E29                     	;# 
  2695  0E2A                     	;# 
  2696  0E2B                     	;# 
  2697  0E2C                     	;# 
  2698  0E2D                     	;# 
  2699  0E2E                     	;# 
  2700  0E90                     	;# 
  2701  0E91                     	;# 
  2702  0E92                     	;# 
  2703  0E94                     	;# 
  2704  0E95                     	;# 
  2705  0E9C                     	;# 
  2706  0E9D                     	;# 
  2707  0E9E                     	;# 
  2708  0E9F                     	;# 
  2709  0EA0                     	;# 
  2710  0EA1                     	;# 
  2711  0EA2                     	;# 
  2712  0EA3                     	;# 
  2713  0EA4                     	;# 
  2714  0EA5                     	;# 
  2715  0EA6                     	;# 
  2716  0EA7                     	;# 
  2717  0F0F                     	;# 
  2718  0F10                     	;# 
  2719  0F11                     	;# 
  2720  0F12                     	;# 
  2721  0F13                     	;# 
  2722  0F14                     	;# 
  2723  0F15                     	;# 
  2724  0F16                     	;# 
  2725  0F17                     	;# 
  2726  0F18                     	;# 
  2727  0F19                     	;# 
  2728  0F1A                     	;# 
  2729  0F1B                     	;# 
  2730  0F1C                     	;# 
  2731  0F1D                     	;# 
  2732  0F1E                     	;# 
  2733  0F1F                     	;# 
  2734  0F20                     	;# 
  2735  0F21                     	;# 
  2736  0F22                     	;# 
  2737  0F23                     	;# 
  2738  0F24                     	;# 
  2739  0F25                     	;# 
  2740  0F26                     	;# 
  2741  0F27                     	;# 
  2742  0F28                     	;# 
  2743  0F29                     	;# 
  2744  0F2A                     	;# 
  2745  0F2B                     	;# 
  2746  0F2C                     	;# 
  2747  0F2D                     	;# 
  2748  0F2E                     	;# 
  2749  0F2F                     	;# 
  2750  0F30                     	;# 
  2751  0F31                     	;# 
  2752  0F32                     	;# 
  2753  0F33                     	;# 
  2754  0F34                     	;# 
  2755  0F35                     	;# 
  2756  0F36                     	;# 
  2757  0F37                     	;# 
  2758  0FE4                     	;# 
  2759  0FE5                     	;# 
  2760  0FE6                     	;# 
  2761  0FE7                     	;# 
  2762  0FE8                     	;# 
  2763  0FE9                     	;# 
  2764  0FEA                     	;# 
  2765  0FEB                     	;# 
  2766  0FED                     	;# 
  2767  0FEE                     	;# 
  2768  0FEF                     	;# 
  2769  0000                     	;# 
  2770  0001                     	;# 
  2771  0002                     	;# 
  2772  0003                     	;# 
  2773  0004                     	;# 
  2774  0005                     	;# 
  2775  0006                     	;# 
  2776  0007                     	;# 
  2777  0008                     	;# 
  2778  0009                     	;# 
  2779  000A                     	;# 
  2780  000B                     	;# 
  2781  000C                     	;# 
  2782  000D                     	;# 
  2783  000E                     	;# 
  2784  0010                     	;# 
  2785  0011                     	;# 
  2786  0012                     	;# 
  2787  0013                     	;# 
  2788  0014                     	;# 
  2789  0015                     	;# 
  2790  0016                     	;# 
  2791  0016                     	;# 
  2792  0017                     	;# 
  2793  0018                     	;# 
  2794  0019                     	;# 
  2795  001A                     	;# 
  2796  001A                     	;# 
  2797  001B                     	;# 
  2798  001B                     	;# 
  2799  001C                     	;# 
  2800  001D                     	;# 
  2801  001E                     	;# 
  2802  001F                     	;# 
  2803  008C                     	;# 
  2804  008D                     	;# 
  2805  008E                     	;# 
  2806  0090                     	;# 
  2807  0091                     	;# 
  2808  0092                     	;# 
  2809  0093                     	;# 
  2810  0094                     	;# 
  2811  0095                     	;# 
  2812  0096                     	;# 
  2813  0098                     	;# 
  2814  0099                     	;# 
  2815  009A                     	;# 
  2816  009B                     	;# 
  2817  009B                     	;# 
  2818  009C                     	;# 
  2819  009D                     	;# 
  2820  009E                     	;# 
  2821  009F                     	;# 
  2822  010C                     	;# 
  2823  010D                     	;# 
  2824  010E                     	;# 
  2825  0111                     	;# 
  2826  0112                     	;# 
  2827  0113                     	;# 
  2828  0114                     	;# 
  2829  0115                     	;# 
  2830  0116                     	;# 
  2831  0117                     	;# 
  2832  0118                     	;# 
  2833  0119                     	;# 
  2834  011C                     	;# 
  2835  018C                     	;# 
  2836  018D                     	;# 
  2837  018E                     	;# 
  2838  0191                     	;# 
  2839  0191                     	;# 
  2840  0192                     	;# 
  2841  0193                     	;# 
  2842  0193                     	;# 
  2843  0194                     	;# 
  2844  0195                     	;# 
  2845  0196                     	;# 
  2846  0197                     	;# 
  2847  0199                     	;# 
  2848  0199                     	;# 
  2849  0199                     	;# 
  2850  019A                     	;# 
  2851  019A                     	;# 
  2852  019A                     	;# 
  2853  019B                     	;# 
  2854  019B                     	;# 
  2855  019B                     	;# 
  2856  019B                     	;# 
  2857  019B                     	;# 
  2858  019C                     	;# 
  2859  019C                     	;# 
  2860  019C                     	;# 
  2861  019D                     	;# 
  2862  019D                     	;# 
  2863  019D                     	;# 
  2864  019E                     	;# 
  2865  019E                     	;# 
  2866  019E                     	;# 
  2867  019F                     	;# 
  2868  019F                     	;# 
  2869  019F                     	;# 
  2870  019F                     	;# 
  2871  019F                     	;# 
  2872  020C                     	;# 
  2873  020D                     	;# 
  2874  020E                     	;# 
  2875  0211                     	;# 
  2876  0211                     	;# 
  2877  0212                     	;# 
  2878  0212                     	;# 
  2879  0213                     	;# 
  2880  0213                     	;# 
  2881  0214                     	;# 
  2882  0214                     	;# 
  2883  0215                     	;# 
  2884  0215                     	;# 
  2885  0215                     	;# 
  2886  0215                     	;# 
  2887  0216                     	;# 
  2888  0216                     	;# 
  2889  0217                     	;# 
  2890  0217                     	;# 
  2891  028C                     	;# 
  2892  028D                     	;# 
  2893  028E                     	;# 
  2894  0291                     	;# 
  2895  0291                     	;# 
  2896  0292                     	;# 
  2897  0293                     	;# 
  2898  0294                     	;# 
  2899  0298                     	;# 
  2900  0298                     	;# 
  2901  0299                     	;# 
  2902  029A                     	;# 
  2903  029B                     	;# 
  2904  029E                     	;# 
  2905  030C                     	;# 
  2906  030D                     	;# 
  2907  030E                     	;# 
  2908  038C                     	;# 
  2909  038D                     	;# 
  2910  038E                     	;# 
  2911  0391                     	;# 
  2912  0392                     	;# 
  2913  0393                     	;# 
  2914  0394                     	;# 
  2915  0395                     	;# 
  2916  0396                     	;# 
  2917  0397                     	;# 
  2918  0398                     	;# 
  2919  0399                     	;# 
  2920  040E                     	;# 
  2921  0413                     	;# 
  2922  0413                     	;# 
  2923  0414                     	;# 
  2924  0414                     	;# 
  2925  0415                     	;# 
  2926  0416                     	;# 
  2927  0417                     	;# 
  2928  0418                     	;# 
  2929  041A                     	;# 
  2930  041A                     	;# 
  2931  041B                     	;# 
  2932  041B                     	;# 
  2933  041C                     	;# 
  2934  041D                     	;# 
  2935  041E                     	;# 
  2936  041F                     	;# 
  2937  0493                     	;# 
  2938  0494                     	;# 
  2939  0495                     	;# 
  2940  0496                     	;# 
  2941  049A                     	;# 
  2942  049B                     	;# 
  2943  049C                     	;# 
  2944  049D                     	;# 
  2945  058C                     	;# 
  2946  058C                     	;# 
  2947  058D                     	;# 
  2948  058E                     	;# 
  2949  058E                     	;# 
  2950  058F                     	;# 
  2951  0590                     	;# 
  2952  0590                     	;# 
  2953  0591                     	;# 
  2954  0592                     	;# 
  2955  0592                     	;# 
  2956  0593                     	;# 
  2957  0594                     	;# 
  2958  0594                     	;# 
  2959  0595                     	;# 
  2960  0596                     	;# 
  2961  0596                     	;# 
  2962  0597                     	;# 
  2963  0598                     	;# 
  2964  0599                     	;# 
  2965  059A                     	;# 
  2966  059B                     	;# 
  2967  059B                     	;# 
  2968  059C                     	;# 
  2969  059D                     	;# 
  2970  060C                     	;# 
  2971  060C                     	;# 
  2972  060D                     	;# 
  2973  060E                     	;# 
  2974  060F                     	;# 
  2975  060F                     	;# 
  2976  0610                     	;# 
  2977  0611                     	;# 
  2978  0612                     	;# 
  2979  0613                     	;# 
  2980  0614                     	;# 
  2981  0617                     	;# 
  2982  0618                     	;# 
  2983  0619                     	;# 
  2984  061A                     	;# 
  2985  061B                     	;# 
  2986  061C                     	;# 
  2987  0691                     	;# 
  2988  0692                     	;# 
  2989  0693                     	;# 
  2990  0694                     	;# 
  2991  0695                     	;# 
  2992  0696                     	;# 
  2993  0697                     	;# 
  2994  0699                     	;# 
  2995  069A                     	;# 
  2996  0711                     	;# 
  2997  0712                     	;# 
  2998  0713                     	;# 
  2999  0714                     	;# 
  3000  0715                     	;# 
  3001  0718                     	;# 
  3002  0718                     	;# 
  3003  0719                     	;# 
  3004  071A                     	;# 
  3005  071A                     	;# 
  3006  071B                     	;# 
  3007  071C                     	;# 
  3008  071D                     	;# 
  3009  0791                     	;# 
  3010  0791                     	;# 
  3011  0792                     	;# 
  3012  0793                     	;# 
  3013  0793                     	;# 
  3014  0794                     	;# 
  3015  0795                     	;# 
  3016  0795                     	;# 
  3017  0796                     	;# 
  3018  0797                     	;# 
  3019  0797                     	;# 
  3020  0798                     	;# 
  3021  0799                     	;# 
  3022  079A                     	;# 
  3023  080C                     	;# 
  3024  080C                     	;# 
  3025  080D                     	;# 
  3026  080E                     	;# 
  3027  080E                     	;# 
  3028  080F                     	;# 
  3029  0810                     	;# 
  3030  0810                     	;# 
  3031  0811                     	;# 
  3032  0812                     	;# 
  3033  0812                     	;# 
  3034  0813                     	;# 
  3035  0814                     	;# 
  3036  0815                     	;# 
  3037  0816                     	;# 
  3038  0817                     	;# 
  3039  0818                     	;# 
  3040  0819                     	;# 
  3041  081A                     	;# 
  3042  081A                     	;# 
  3043  081B                     	;# 
  3044  081C                     	;# 
  3045  081C                     	;# 
  3046  081D                     	;# 
  3047  088C                     	;# 
  3048  088D                     	;# 
  3049  088E                     	;# 
  3050  088F                     	;# 
  3051  088F                     	;# 
  3052  0890                     	;# 
  3053  0891                     	;# 
  3054  0892                     	;# 
  3055  0893                     	;# 
  3056  0893                     	;# 
  3057  0894                     	;# 
  3058  0895                     	;# 
  3059  0896                     	;# 
  3060  0897                     	;# 
  3061  0897                     	;# 
  3062  0898                     	;# 
  3063  0899                     	;# 
  3064  0D8C                     	;# 
  3065  0D8C                     	;# 
  3066  0D8D                     	;# 
  3067  0D8E                     	;# 
  3068  0D8F                     	;# 
  3069  0D8F                     	;# 
  3070  0D90                     	;# 
  3071  0D91                     	;# 
  3072  0D92                     	;# 
  3073  0D92                     	;# 
  3074  0D93                     	;# 
  3075  0D94                     	;# 
  3076  0D95                     	;# 
  3077  0D95                     	;# 
  3078  0D96                     	;# 
  3079  0D97                     	;# 
  3080  0D98                     	;# 
  3081  0D99                     	;# 
  3082  0D9A                     	;# 
  3083  0D9B                     	;# 
  3084  0D9C                     	;# 
  3085  0D9D                     	;# 
  3086  0D9E                     	;# 
  3087  0D9E                     	;# 
  3088  0D9F                     	;# 
  3089  0DA0                     	;# 
  3090  0DA1                     	;# 
  3091  0DA1                     	;# 
  3092  0DA2                     	;# 
  3093  0DA3                     	;# 
  3094  0DA4                     	;# 
  3095  0DA4                     	;# 
  3096  0DA5                     	;# 
  3097  0DA6                     	;# 
  3098  0DA7                     	;# 
  3099  0DA7                     	;# 
  3100  0DA8                     	;# 
  3101  0DA9                     	;# 
  3102  0DAA                     	;# 
  3103  0DAB                     	;# 
  3104  0DAC                     	;# 
  3105  0DAD                     	;# 
  3106  0DAE                     	;# 
  3107  0DAF                     	;# 
  3108  0E0F                     	;# 
  3109  0E10                     	;# 
  3110  0E11                     	;# 
  3111  0E12                     	;# 
  3112  0E13                     	;# 
  3113  0E14                     	;# 
  3114  0E15                     	;# 
  3115  0E16                     	;# 
  3116  0E17                     	;# 
  3117  0E18                     	;# 
  3118  0E19                     	;# 
  3119  0E1A                     	;# 
  3120  0E1B                     	;# 
  3121  0E1C                     	;# 
  3122  0E1D                     	;# 
  3123  0E1E                     	;# 
  3124  0E1F                     	;# 
  3125  0E20                     	;# 
  3126  0E21                     	;# 
  3127  0E22                     	;# 
  3128  0E23                     	;# 
  3129  0E24                     	;# 
  3130  0E25                     	;# 
  3131  0E26                     	;# 
  3132  0E27                     	;# 
  3133  0E28                     	;# 
  3134  0E29                     	;# 
  3135  0E2A                     	;# 
  3136  0E2B                     	;# 
  3137  0E2C                     	;# 
  3138  0E2D                     	;# 
  3139  0E2E                     	;# 
  3140  0E90                     	;# 
  3141  0E91                     	;# 
  3142  0E92                     	;# 
  3143  0E94                     	;# 
  3144  0E95                     	;# 
  3145  0E9C                     	;# 
  3146  0E9D                     	;# 
  3147  0E9E                     	;# 
  3148  0E9F                     	;# 
  3149  0EA0                     	;# 
  3150  0EA1                     	;# 
  3151  0EA2                     	;# 
  3152  0EA3                     	;# 
  3153  0EA4                     	;# 
  3154  0EA5                     	;# 
  3155  0EA6                     	;# 
  3156  0EA7                     	;# 
  3157  0F0F                     	;# 
  3158  0F10                     	;# 
  3159  0F11                     	;# 
  3160  0F12                     	;# 
  3161  0F13                     	;# 
  3162  0F14                     	;# 
  3163  0F15                     	;# 
  3164  0F16                     	;# 
  3165  0F17                     	;# 
  3166  0F18                     	;# 
  3167  0F19                     	;# 
  3168  0F1A                     	;# 
  3169  0F1B                     	;# 
  3170  0F1C                     	;# 
  3171  0F1D                     	;# 
  3172  0F1E                     	;# 
  3173  0F1F                     	;# 
  3174  0F20                     	;# 
  3175  0F21                     	;# 
  3176  0F22                     	;# 
  3177  0F23                     	;# 
  3178  0F24                     	;# 
  3179  0F25                     	;# 
  3180  0F26                     	;# 
  3181  0F27                     	;# 
  3182  0F28                     	;# 
  3183  0F29                     	;# 
  3184  0F2A                     	;# 
  3185  0F2B                     	;# 
  3186  0F2C                     	;# 
  3187  0F2D                     	;# 
  3188  0F2E                     	;# 
  3189  0F2F                     	;# 
  3190  0F30                     	;# 
  3191  0F31                     	;# 
  3192  0F32                     	;# 
  3193  0F33                     	;# 
  3194  0F34                     	;# 
  3195  0F35                     	;# 
  3196  0F36                     	;# 
  3197  0F37                     	;# 
  3198  0FE4                     	;# 
  3199  0FE5                     	;# 
  3200  0FE6                     	;# 
  3201  0FE7                     	;# 
  3202  0FE8                     	;# 
  3203  0FE9                     	;# 
  3204  0FEA                     	;# 
  3205  0FEB                     	;# 
  3206  0FED                     	;# 
  3207  0FEE                     	;# 
  3208  0FEF                     	;# 
  3209  0000                     	;# 
  3210  0001                     	;# 
  3211  0002                     	;# 
  3212  0003                     	;# 
  3213  0004                     	;# 
  3214  0005                     	;# 
  3215  0006                     	;# 
  3216  0007                     	;# 
  3217  0008                     	;# 
  3218  0009                     	;# 
  3219  000A                     	;# 
  3220  000B                     	;# 
  3221  000C                     	;# 
  3222  000D                     	;# 
  3223  000E                     	;# 
  3224  0010                     	;# 
  3225  0011                     	;# 
  3226  0012                     	;# 
  3227  0013                     	;# 
  3228  0014                     	;# 
  3229  0015                     	;# 
  3230  0016                     	;# 
  3231  0016                     	;# 
  3232  0017                     	;# 
  3233  0018                     	;# 
  3234  0019                     	;# 
  3235  001A                     	;# 
  3236  001A                     	;# 
  3237  001B                     	;# 
  3238  001B                     	;# 
  3239  001C                     	;# 
  3240  001D                     	;# 
  3241  001E                     	;# 
  3242  001F                     	;# 
  3243  008C                     	;# 
  3244  008D                     	;# 
  3245  008E                     	;# 
  3246  0090                     	;# 
  3247  0091                     	;# 
  3248  0092                     	;# 
  3249  0093                     	;# 
  3250  0094                     	;# 
  3251  0095                     	;# 
  3252  0096                     	;# 
  3253  0098                     	;# 
  3254  0099                     	;# 
  3255  009A                     	;# 
  3256  009B                     	;# 
  3257  009B                     	;# 
  3258  009C                     	;# 
  3259  009D                     	;# 
  3260  009E                     	;# 
  3261  009F                     	;# 
  3262  010C                     	;# 
  3263  010D                     	;# 
  3264  010E                     	;# 
  3265  0111                     	;# 
  3266  0112                     	;# 
  3267  0113                     	;# 
  3268  0114                     	;# 
  3269  0115                     	;# 
  3270  0116                     	;# 
  3271  0117                     	;# 
  3272  0118                     	;# 
  3273  0119                     	;# 
  3274  011C                     	;# 
  3275  018C                     	;# 
  3276  018D                     	;# 
  3277  018E                     	;# 
  3278  0191                     	;# 
  3279  0191                     	;# 
  3280  0192                     	;# 
  3281  0193                     	;# 
  3282  0193                     	;# 
  3283  0194                     	;# 
  3284  0195                     	;# 
  3285  0196                     	;# 
  3286  0197                     	;# 
  3287  0199                     	;# 
  3288  0199                     	;# 
  3289  0199                     	;# 
  3290  019A                     	;# 
  3291  019A                     	;# 
  3292  019A                     	;# 
  3293  019B                     	;# 
  3294  019B                     	;# 
  3295  019B                     	;# 
  3296  019B                     	;# 
  3297  019B                     	;# 
  3298  019C                     	;# 
  3299  019C                     	;# 
  3300  019C                     	;# 
  3301  019D                     	;# 
  3302  019D                     	;# 
  3303  019D                     	;# 
  3304  019E                     	;# 
  3305  019E                     	;# 
  3306  019E                     	;# 
  3307  019F                     	;# 
  3308  019F                     	;# 
  3309  019F                     	;# 
  3310  019F                     	;# 
  3311  019F                     	;# 
  3312  020C                     	;# 
  3313  020D                     	;# 
  3314  020E                     	;# 
  3315  0211                     	;# 
  3316  0211                     	;# 
  3317  0212                     	;# 
  3318  0212                     	;# 
  3319  0213                     	;# 
  3320  0213                     	;# 
  3321  0214                     	;# 
  3322  0214                     	;# 
  3323  0215                     	;# 
  3324  0215                     	;# 
  3325  0215                     	;# 
  3326  0215                     	;# 
  3327  0216                     	;# 
  3328  0216                     	;# 
  3329  0217                     	;# 
  3330  0217                     	;# 
  3331  028C                     	;# 
  3332  028D                     	;# 
  3333  028E                     	;# 
  3334  0291                     	;# 
  3335  0291                     	;# 
  3336  0292                     	;# 
  3337  0293                     	;# 
  3338  0294                     	;# 
  3339  0298                     	;# 
  3340  0298                     	;# 
  3341  0299                     	;# 
  3342  029A                     	;# 
  3343  029B                     	;# 
  3344  029E                     	;# 
  3345  030C                     	;# 
  3346  030D                     	;# 
  3347  030E                     	;# 
  3348  038C                     	;# 
  3349  038D                     	;# 
  3350  038E                     	;# 
  3351  0391                     	;# 
  3352  0392                     	;# 
  3353  0393                     	;# 
  3354  0394                     	;# 
  3355  0395                     	;# 
  3356  0396                     	;# 
  3357  0397                     	;# 
  3358  0398                     	;# 
  3359  0399                     	;# 
  3360  040E                     	;# 
  3361  0413                     	;# 
  3362  0413                     	;# 
  3363  0414                     	;# 
  3364  0414                     	;# 
  3365  0415                     	;# 
  3366  0416                     	;# 
  3367  0417                     	;# 
  3368  0418                     	;# 
  3369  041A                     	;# 
  3370  041A                     	;# 
  3371  041B                     	;# 
  3372  041B                     	;# 
  3373  041C                     	;# 
  3374  041D                     	;# 
  3375  041E                     	;# 
  3376  041F                     	;# 
  3377  0493                     	;# 
  3378  0494                     	;# 
  3379  0495                     	;# 
  3380  0496                     	;# 
  3381  049A                     	;# 
  3382  049B                     	;# 
  3383  049C                     	;# 
  3384  049D                     	;# 
  3385  058C                     	;# 
  3386  058C                     	;# 
  3387  058D                     	;# 
  3388  058E                     	;# 
  3389  058E                     	;# 
  3390  058F                     	;# 
  3391  0590                     	;# 
  3392  0590                     	;# 
  3393  0591                     	;# 
  3394  0592                     	;# 
  3395  0592                     	;# 
  3396  0593                     	;# 
  3397  0594                     	;# 
  3398  0594                     	;# 
  3399  0595                     	;# 
  3400  0596                     	;# 
  3401  0596                     	;# 
  3402  0597                     	;# 
  3403  0598                     	;# 
  3404  0599                     	;# 
  3405  059A                     	;# 
  3406  059B                     	;# 
  3407  059B                     	;# 
  3408  059C                     	;# 
  3409  059D                     	;# 
  3410  060C                     	;# 
  3411  060C                     	;# 
  3412  060D                     	;# 
  3413  060E                     	;# 
  3414  060F                     	;# 
  3415  060F                     	;# 
  3416  0610                     	;# 
  3417  0611                     	;# 
  3418  0612                     	;# 
  3419  0613                     	;# 
  3420  0614                     	;# 
  3421  0617                     	;# 
  3422  0618                     	;# 
  3423  0619                     	;# 
  3424  061A                     	;# 
  3425  061B                     	;# 
  3426  061C                     	;# 
  3427  0691                     	;# 
  3428  0692                     	;# 
  3429  0693                     	;# 
  3430  0694                     	;# 
  3431  0695                     	;# 
  3432  0696                     	;# 
  3433  0697                     	;# 
  3434  0699                     	;# 
  3435  069A                     	;# 
  3436  0711                     	;# 
  3437  0712                     	;# 
  3438  0713                     	;# 
  3439  0714                     	;# 
  3440  0715                     	;# 
  3441  0718                     	;# 
  3442  0718                     	;# 
  3443  0719                     	;# 
  3444  071A                     	;# 
  3445  071A                     	;# 
  3446  071B                     	;# 
  3447  071C                     	;# 
  3448  071D                     	;# 
  3449  0791                     	;# 
  3450  0791                     	;# 
  3451  0792                     	;# 
  3452  0793                     	;# 
  3453  0793                     	;# 
  3454  0794                     	;# 
  3455  0795                     	;# 
  3456  0795                     	;# 
  3457  0796                     	;# 
  3458  0797                     	;# 
  3459  0797                     	;# 
  3460  0798                     	;# 
  3461  0799                     	;# 
  3462  079A                     	;# 
  3463  080C                     	;# 
  3464  080C                     	;# 
  3465  080D                     	;# 
  3466  080E                     	;# 
  3467  080E                     	;# 
  3468  080F                     	;# 
  3469  0810                     	;# 
  3470  0810                     	;# 
  3471  0811                     	;# 
  3472  0812                     	;# 
  3473  0812                     	;# 
  3474  0813                     	;# 
  3475  0814                     	;# 
  3476  0815                     	;# 
  3477  0816                     	;# 
  3478  0817                     	;# 
  3479  0818                     	;# 
  3480  0819                     	;# 
  3481  081A                     	;# 
  3482  081A                     	;# 
  3483  081B                     	;# 
  3484  081C                     	;# 
  3485  081C                     	;# 
  3486  081D                     	;# 
  3487  088C                     	;# 
  3488  088D                     	;# 
  3489  088E                     	;# 
  3490  088F                     	;# 
  3491  088F                     	;# 
  3492  0890                     	;# 
  3493  0891                     	;# 
  3494  0892                     	;# 
  3495  0893                     	;# 
  3496  0893                     	;# 
  3497  0894                     	;# 
  3498  0895                     	;# 
  3499  0896                     	;# 
  3500  0897                     	;# 
  3501  0897                     	;# 
  3502  0898                     	;# 
  3503  0899                     	;# 
  3504  0D8C                     	;# 
  3505  0D8C                     	;# 
  3506  0D8D                     	;# 
  3507  0D8E                     	;# 
  3508  0D8F                     	;# 
  3509  0D8F                     	;# 
  3510  0D90                     	;# 
  3511  0D91                     	;# 
  3512  0D92                     	;# 
  3513  0D92                     	;# 
  3514  0D93                     	;# 
  3515  0D94                     	;# 
  3516  0D95                     	;# 
  3517  0D95                     	;# 
  3518  0D96                     	;# 
  3519  0D97                     	;# 
  3520  0D98                     	;# 
  3521  0D99                     	;# 
  3522  0D9A                     	;# 
  3523  0D9B                     	;# 
  3524  0D9C                     	;# 
  3525  0D9D                     	;# 
  3526  0D9E                     	;# 
  3527  0D9E                     	;# 
  3528  0D9F                     	;# 
  3529  0DA0                     	;# 
  3530  0DA1                     	;# 
  3531  0DA1                     	;# 
  3532  0DA2                     	;# 
  3533  0DA3                     	;# 
  3534  0DA4                     	;# 
  3535  0DA4                     	;# 
  3536  0DA5                     	;# 
  3537  0DA6                     	;# 
  3538  0DA7                     	;# 
  3539  0DA7                     	;# 
  3540  0DA8                     	;# 
  3541  0DA9                     	;# 
  3542  0DAA                     	;# 
  3543  0DAB                     	;# 
  3544  0DAC                     	;# 
  3545  0DAD                     	;# 
  3546  0DAE                     	;# 
  3547  0DAF                     	;# 
  3548  0E0F                     	;# 
  3549  0E10                     	;# 
  3550  0E11                     	;# 
  3551  0E12                     	;# 
  3552  0E13                     	;# 
  3553  0E14                     	;# 
  3554  0E15                     	;# 
  3555  0E16                     	;# 
  3556  0E17                     	;# 
  3557  0E18                     	;# 
  3558  0E19                     	;# 
  3559  0E1A                     	;# 
  3560  0E1B                     	;# 
  3561  0E1C                     	;# 
  3562  0E1D                     	;# 
  3563  0E1E                     	;# 
  3564  0E1F                     	;# 
  3565  0E20                     	;# 
  3566  0E21                     	;# 
  3567  0E22                     	;# 
  3568  0E23                     	;# 
  3569  0E24                     	;# 
  3570  0E25                     	;# 
  3571  0E26                     	;# 
  3572  0E27                     	;# 
  3573  0E28                     	;# 
  3574  0E29                     	;# 
  3575  0E2A                     	;# 
  3576  0E2B                     	;# 
  3577  0E2C                     	;# 
  3578  0E2D                     	;# 
  3579  0E2E                     	;# 
  3580  0E90                     	;# 
  3581  0E91                     	;# 
  3582  0E92                     	;# 
  3583  0E94                     	;# 
  3584  0E95                     	;# 
  3585  0E9C                     	;# 
  3586  0E9D                     	;# 
  3587  0E9E                     	;# 
  3588  0E9F                     	;# 
  3589  0EA0                     	;# 
  3590  0EA1                     	;# 
  3591  0EA2                     	;# 
  3592  0EA3                     	;# 
  3593  0EA4                     	;# 
  3594  0EA5                     	;# 
  3595  0EA6                     	;# 
  3596  0EA7                     	;# 
  3597  0F0F                     	;# 
  3598  0F10                     	;# 
  3599  0F11                     	;# 
  3600  0F12                     	;# 
  3601  0F13                     	;# 
  3602  0F14                     	;# 
  3603  0F15                     	;# 
  3604  0F16                     	;# 
  3605  0F17                     	;# 
  3606  0F18                     	;# 
  3607  0F19                     	;# 
  3608  0F1A                     	;# 
  3609  0F1B                     	;# 
  3610  0F1C                     	;# 
  3611  0F1D                     	;# 
  3612  0F1E                     	;# 
  3613  0F1F                     	;# 
  3614  0F20                     	;# 
  3615  0F21                     	;# 
  3616  0F22                     	;# 
  3617  0F23                     	;# 
  3618  0F24                     	;# 
  3619  0F25                     	;# 
  3620  0F26                     	;# 
  3621  0F27                     	;# 
  3622  0F28                     	;# 
  3623  0F29                     	;# 
  3624  0F2A                     	;# 
  3625  0F2B                     	;# 
  3626  0F2C                     	;# 
  3627  0F2D                     	;# 
  3628  0F2E                     	;# 
  3629  0F2F                     	;# 
  3630  0F30                     	;# 
  3631  0F31                     	;# 
  3632  0F32                     	;# 
  3633  0F33                     	;# 
  3634  0F34                     	;# 
  3635  0F35                     	;# 
  3636  0F36                     	;# 
  3637  0F37                     	;# 
  3638  0FE4                     	;# 
  3639  0FE5                     	;# 
  3640  0FE6                     	;# 
  3641  0FE7                     	;# 
  3642  0FE8                     	;# 
  3643  0FE9                     	;# 
  3644  0FEA                     	;# 
  3645  0FEB                     	;# 
  3646  0FED                     	;# 
  3647  0FEE                     	;# 
  3648  0FEF                     	;# 
  3649                           
  3650                           	psect	idataBANK0
  3651  05C0                     __pidataBANK0:	
  3652                           
  3653                           ;initializer for _Angle
  3654  05C0  340A               	retlw	10
  3655  05C1  3400               	retlw	0
  3656                           
  3657                           ;initializer for _Validation
  3658  05C2  3404               	retlw	4
  3659                           
  3660                           	psect	stringtext1
  3661  03C4                     __pstringtext1:	
  3662  03C4                     _fsmStateTable:	
  3663  03C4  3486               	retlw	low _I2C_DO_IDLE
  3664  03C5  3405               	retlw	high _I2C_DO_IDLE
  3665  03C6  3439               	retlw	low _I2C_DO_SEND_ADR_READ
  3666  03C7  3405               	retlw	high _I2C_DO_SEND_ADR_READ
  3667  03C8  3450               	retlw	low _I2C_DO_SEND_ADR_WRITE
  3668  03C9  3405               	retlw	high _I2C_DO_SEND_ADR_WRITE
  3669  03CA  34A4               	retlw	low _I2C_DO_TX
  3670  03CB  3401               	retlw	high _I2C_DO_TX
  3671  03CC  342A               	retlw	low _I2C_DO_RX
  3672  03CD  3402               	retlw	high _I2C_DO_RX
  3673  03CE  3475               	retlw	low _I2C_DO_RCEN
  3674  03CF  3405               	retlw	high _I2C_DO_RCEN
  3675  03D0  3458               	retlw	low _I2C_DO_TX_EMPTY
  3676  03D1  3403               	retlw	high _I2C_DO_TX_EMPTY
  3677  03D2  34B0               	retlw	low _I2C_DO_SEND_RESTART_READ
  3678  03D3  3405               	retlw	high _I2C_DO_SEND_RESTART_READ
  3679  03D4  34AC               	retlw	low _I2C_DO_SEND_RESTART_WRITE
  3680  03D5  3405               	retlw	high _I2C_DO_SEND_RESTART_WRITE
  3681  03D6  34A8               	retlw	low _I2C_DO_SEND_RESTART
  3682  03D7  3405               	retlw	high _I2C_DO_SEND_RESTART
  3683  03D8  34A4               	retlw	low _I2C_DO_SEND_STOP
  3684  03D9  3405               	retlw	high _I2C_DO_SEND_STOP
  3685  03DA  34A0               	retlw	low _I2C_DO_RX_ACK
  3686  03DB  3405               	retlw	high _I2C_DO_RX_ACK
  3687  03DC  349C               	retlw	low _I2C_DO_RX_NACK_STOP
  3688  03DD  3405               	retlw	high _I2C_DO_RX_NACK_STOP
  3689  03DE  3498               	retlw	low _I2C_DO_RX_NACK_RESTART
  3690  03DF  3405               	retlw	high _I2C_DO_RX_NACK_RESTART
  3691  03E0  3481               	retlw	low _I2C_DO_RESET
  3692  03E1  3405               	retlw	high _I2C_DO_RESET
  3693  03E2  34A1               	retlw	low _I2C_DO_ADDRESS_NACK
  3694  03E3  3403               	retlw	high _I2C_DO_ADDRESS_NACK
  3695  03E4                     __end_of_fsmStateTable:	
  3696                           
  3697                           	psect	nvBANK0
  3698  0063                     __pnvBANK0:	
  3699  0063                     _TMR2_InterruptHandler:	
  3700  0063                     	ds	2
  3701  0065                     _EUSART_FramingErrorHandler:	
  3702  0065                     	ds	2
  3703  0067                     _EUSART_RxDefaultInterruptHandler:	
  3704  0067                     	ds	2
  3705                           
  3706                           	psect	nvBANK1
  3707  00A0                     __pnvBANK1:	
  3708  00A0                     _EUSART_ErrorHandler:	
  3709  00A0                     	ds	2
  3710  00A2                     _EUSART_OverrunErrorHandler:	
  3711  00A2                     	ds	2
  3712  000C                     _PORTAbits	set	12
  3713  001B                     _PR2	set	27
  3714  001A                     _TMR2	set	26
  3715  001C                     _T2CONbits	set	28
  3716  001F                     _T2RSTbits	set	31
  3717  001D                     _T2HLTbits	set	29
  3718  001C                     _T2CON	set	28
  3719  001A                     _T2TMR	set	26
  3720  001B                     _T2PR	set	27
  3721  001F                     _T2RST	set	31
  3722  001D                     _T2HLT	set	29
  3723  001E                     _T2CLKCON	set	30
  3724  0011                     _PIR2bits	set	17
  3725  0010                     _PIR1bits	set	16
  3726  000B                     _INTCONbits	set	11
  3727  0095                     _OPTION_REGbits	set	149
  3728  008E                     _TRISC	set	142
  3729  008D                     _TRISB	set	141
  3730  008C                     _TRISA	set	140
  3731  0098                     _OSCTUNE	set	152
  3732  0099                     _OSCCON	set	153
  3733  0090                     _PIE1bits	set	144
  3734  010C                     _LATAbits	set	268
  3735  010E                     _LATCbits	set	270
  3736  010E                     _LATC	set	270
  3737  010D                     _LATB	set	269
  3738  010C                     _LATA	set	268
  3739  0116                     _BORCON	set	278
  3740  0199                     _RC1REG	set	409
  3741  019D                     _RC1STAbits	set	413
  3742  019A                     _TX1REG	set	410
  3743  019E                     _TX1STAbits	set	414
  3744  019C                     _SPBRGH	set	412
  3745  019B                     _SPBRGL	set	411
  3746  019E                     _TX1STA	set	414
  3747  019D                     _RC1STA	set	413
  3748  019F                     _BAUD1CON	set	415
  3749  018C                     _ANSELA	set	396
  3750  018D                     _ANSELB	set	397
  3751  018E                     _ANSELC	set	398
  3752  0214                     _SSP1STATbits	set	532
  3753  0216                     _SSP1CON2bits	set	534
  3754  0211                     _SSP1BUF	set	529
  3755  0215                     _SSP1CON1bits	set	533
  3756  0212                     _SSP1ADD	set	530
  3757  0216                     _SSP1CON2	set	534
  3758  0215                     _SSP1CON1	set	533
  3759  0214                     _SSP1STAT	set	532
  3760  020E                     _WPUC	set	526
  3761  020C                     _WPUA	set	524
  3762  020D                     _WPUB	set	525
  3763  029E                     _CCPTMRSbits	set	670
  3764  028E                     _ODCONC	set	654
  3765  028D                     _ODCONB	set	653
  3766  028C                     _ODCONA	set	652
  3767  030E                     _SLRCONC	set	782
  3768  030D                     _SLRCONB	set	781
  3769  030C                     _SLRCONA	set	780
  3770  038E                     _INLVLC	set	910
  3771  038D                     _INLVLB	set	909
  3772  038C                     _INLVLA	set	908
  3773  0617                     _PWM3DCL	set	1559
  3774  0618                     _PWM3DCH	set	1560
  3775  0619                     _PWM3CON	set	1561
  3776  0E20                     _SSPCLKPPS	set	3616
  3777  0E21                     _SSPDATPPS	set	3617
  3778  0E24                     _RXPPS	set	3620
  3779  0E92                     _RA2PPS	set	3730
  3780  0E9C                     _RB4PPS	set	3740
  3781  0E9F                     _RB7PPS	set	3743
  3782  0E9E                     _RB6PPS	set	3742
  3783                           
  3784                           ; #config settings
  3785  0000                     
  3786                           	psect	cinit
  3787  0026                     start_initialization:	
  3788  0026                     __initialization:	
  3789                           
  3790                           ; Initialize objects allocated to BANK0
  3791  0026  3185  25C0  3180   	fcall	__pidataBANK0	;fetch initializer
  3792  0029  00E9               	movwf	__pdataBANK0& (0+127)
  3793  002A  3185  25C1  3180   	fcall	__pidataBANK0+1	;fetch initializer
  3794  002D  00EA               	movwf	(__pdataBANK0+1)& (0+127)
  3795  002E  3185  25C2  3180   	fcall	__pidataBANK0+2	;fetch initializer
  3796  0031  00EB               	movwf	(__pdataBANK0+2)& (0+127)
  3797                           
  3798                           ; Clear objects allocated to BANK0
  3799  0032  3020               	movlw	low __pbssBANK0
  3800  0033  0084               	movwf	4
  3801  0034  3000               	movlw	high __pbssBANK0
  3802  0035  0085               	movwf	5
  3803  0036  3037               	movlw	55
  3804  0037  3185  2557         	fcall	clear_ram0
  3805  0039                     end_of_initialization:	
  3806                           ;End of C runtime variable initialization code
  3807                           
  3808  0039                     __end_of__initialization:	
  3809  0039  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3810  003A  0020               	movlb	0
  3811  003B  3181  294F         	ljmp	_main	;jump to C main() function
  3812                           
  3813                           	psect	bssBANK0
  3814  0020                     __pbssBANK0:	
  3815  0020                     _I2C_Status:	
  3816  0020                     	ds	29
  3817  003D                     _eusartRxStatusBuffer:	
  3818  003D                     	ds	8
  3819  0045                     _eusartRxBuffer:	
  3820  0045                     	ds	8
  3821  004D                     _Vitesse:	
  3822  004D                     	ds	2
  3823  004F                     _SateLeds:	
  3824  004F                     	ds	1
  3825  0050                     _PosUart:	
  3826  0050                     	ds	1
  3827  0051                     _Type:	
  3828  0051                     	ds	1
  3829  0052                     _Data:	
  3830  0052                     	ds	1
  3831  0053                     _eusartRxLastError:	
  3832  0053                     	ds	1
  3833  0054                     _eusartRxCount:	
  3834  0054                     	ds	1
  3835  0055                     _eusartRxTail:	
  3836  0055                     	ds	1
  3837  0056                     _eusartRxHead:	
  3838  0056                     	ds	1
  3839                           
  3840                           	psect	dataBANK0
  3841  0069                     __pdataBANK0:	
  3842  0069                     _Angle:	
  3843  0069                     	ds	2
  3844  006B                     _Validation:	
  3845  006B                     	ds	1
  3846                           
  3847                           	psect	clrtext
  3848  0557                     clear_ram0:	
  3849                           ;	Called with FSR0 containing the base address, and
  3850                           ;	WREG with the size to clear
  3851                           
  3852  0557  0064               	clrwdt	;clear the watchdog before getting into this loop
  3853  0558                     clrloop0:	
  3854  0558  0180               	clrf	0	;clear RAM location pointed to by FSR
  3855  0559  3101               	addfsr 0,1
  3856  055A  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3857  055B  2D58               	goto	clrloop0	;have we reached the end yet?
  3858  055C  3400               	retlw	0	;all done for this memory range, return
  3859                           
  3860                           	psect	cstackBANK1
  3861  00A4                     __pcstackBANK1:	
  3862  00A4                     ??_I2C_Initialize:	
  3863  00A4                     ??_PIN_MANAGER_Initialize:	
  3864                           ; 1 bytes @ 0x0
  3865                           
  3866  00A4                     ??_OSCILLATOR_Initialize:	
  3867                           ; 1 bytes @ 0x0
  3868                           
  3869  00A4                     ??_PWM3_Initialize:	
  3870                           ; 1 bytes @ 0x0
  3871                           
  3872  00A4                     ?_EUSART_SetRxInterruptHandler:	
  3873                           ; 1 bytes @ 0x0
  3874                           
  3875  00A4                     ?_EUSART_SetFramingErrorHandler:	
  3876                           ; 1 bytes @ 0x0
  3877                           
  3878  00A4                     ?_EUSART_SetOverrunErrorHandler:	
  3879                           ; 1 bytes @ 0x0
  3880                           
  3881  00A4                     ?_EUSART_SetErrorHandler:	
  3882                           ; 1 bytes @ 0x0
  3883                           
  3884  00A4                     ?_TMR2_SetInterruptHandler:	
  3885                           ; 1 bytes @ 0x0
  3886                           
  3887  00A4                     ??_TMR2_Start:	
  3888                           ; 1 bytes @ 0x0
  3889                           
  3890  00A4                     ??_TMR2_StartTimer:	
  3891                           ; 1 bytes @ 0x0
  3892                           
  3893  00A4                     ??_TMR2_Counter8BitSet:	
  3894                           ; 1 bytes @ 0x0
  3895                           
  3896  00A4                     TMR2_Counter8BitSet@timerVal:	
  3897                           ; 1 bytes @ 0x0
  3898                           
  3899  00A4                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3900                           ; 1 bytes @ 0x0
  3901                           
  3902  00A4                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3903                           ; 2 bytes @ 0x0
  3904                           
  3905  00A4                     EUSART_SetErrorHandler@interruptHandler:	
  3906                           ; 2 bytes @ 0x0
  3907                           
  3908  00A4                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3909                           ; 2 bytes @ 0x0
  3910                           
  3911  00A4                     TMR2_SetInterruptHandler@InterruptHandler:	
  3912                           ; 2 bytes @ 0x0
  3913                           
  3914                           
  3915                           ; 2 bytes @ 0x0
  3916  00A4                     	ds	1
  3917  00A5                     ??_TMR2_WriteTimer:	
  3918  00A5                     TMR2_WriteTimer@timerVal:	
  3919                           ; 1 bytes @ 0x1
  3920                           
  3921                           
  3922                           ; 1 bytes @ 0x1
  3923  00A5                     	ds	1
  3924  00A6                     ??_TMR2_Initialize:	
  3925  00A6                     ??_EUSART_Initialize:	
  3926                           ; 1 bytes @ 0x2
  3927                           
  3928  00A6                     ??_EUSART_SetRxInterruptHandler:	
  3929                           ; 1 bytes @ 0x2
  3930                           
  3931  00A6                     ??_EUSART_SetFramingErrorHandler:	
  3932                           ; 1 bytes @ 0x2
  3933                           
  3934  00A6                     ??_EUSART_SetOverrunErrorHandler:	
  3935                           ; 1 bytes @ 0x2
  3936                           
  3937  00A6                     ??_EUSART_SetErrorHandler:	
  3938                           ; 1 bytes @ 0x2
  3939                           
  3940  00A6                     ??_TMR2_SetInterruptHandler:	
  3941                           ; 1 bytes @ 0x2
  3942                           
  3943  00A6                     ??_SYSTEM_Initialize:	
  3944                           ; 1 bytes @ 0x2
  3945                           
  3946  00A6                     ??_main:	
  3947                           ; 1 bytes @ 0x2
  3948                           
  3949                           
  3950                           ; 1 bytes @ 0x2
  3951  00A6                     	ds	2
  3952                           
  3953                           	psect	cstackCOMMON
  3954  0070                     __pcstackCOMMON:	
  3955  0070                     ?_I2C_Open:	
  3956  0070                     ??_I2C_Open:	
  3957                           ; 1 bytes @ 0x0
  3958                           
  3959  0070                     ?_I2C_SetBuffer:	
  3960                           ; 1 bytes @ 0x0
  3961                           
  3962  0070                     ?_I2C_MasterWrite:	
  3963                           ; 1 bytes @ 0x0
  3964                           
  3965  0070                     ?_I2C_Close:	
  3966                           ; 1 bytes @ 0x0
  3967                           
  3968  0070                     ??_I2C_Close:	
  3969                           ; 1 bytes @ 0x0
  3970                           
  3971  0070                     ?_TMR2_ISR:	
  3972                           ; 1 bytes @ 0x0
  3973                           
  3974  0070                     ?_I2C_Initialize:	
  3975                           ; 1 bytes @ 0x0
  3976                           
  3977  0070                     ?_PIN_MANAGER_Initialize:	
  3978                           ; 1 bytes @ 0x0
  3979                           
  3980  0070                     ?_OSCILLATOR_Initialize:	
  3981                           ; 1 bytes @ 0x0
  3982                           
  3983  0070                     ?_PWM3_Initialize:	
  3984                           ; 1 bytes @ 0x0
  3985                           
  3986  0070                     ?_TMR2_Initialize:	
  3987                           ; 1 bytes @ 0x0
  3988                           
  3989  0070                     ?_EUSART_Initialize:	
  3990                           ; 1 bytes @ 0x0
  3991                           
  3992  0070                     ?_I2C_DO_IDLE:	
  3993                           ; 1 bytes @ 0x0
  3994                           
  3995  0070                     ??_I2C_DO_IDLE:	
  3996                           ; 1 bytes @ 0x0
  3997                           
  3998  0070                     ?_I2C_DO_SEND_ADR_READ:	
  3999                           ; 1 bytes @ 0x0
  4000                           
  4001  0070                     ??_I2C_DO_SEND_ADR_READ:	
  4002                           ; 1 bytes @ 0x0
  4003                           
  4004  0070                     ?_I2C_DO_SEND_ADR_WRITE:	
  4005                           ; 1 bytes @ 0x0
  4006                           
  4007  0070                     ?_I2C_DO_TX:	
  4008                           ; 1 bytes @ 0x0
  4009                           
  4010  0070                     ?_I2C_DO_RX:	
  4011                           ; 1 bytes @ 0x0
  4012                           
  4013  0070                     ?_I2C_DO_RCEN:	
  4014                           ; 1 bytes @ 0x0
  4015                           
  4016  0070                     ??_I2C_DO_RCEN:	
  4017                           ; 1 bytes @ 0x0
  4018                           
  4019  0070                     ?_I2C_DO_TX_EMPTY:	
  4020                           ; 1 bytes @ 0x0
  4021                           
  4022  0070                     ?_I2C_DO_SEND_RESTART_READ:	
  4023                           ; 1 bytes @ 0x0
  4024                           
  4025  0070                     ??_I2C_DO_SEND_RESTART_READ:	
  4026                           ; 1 bytes @ 0x0
  4027                           
  4028  0070                     ?_I2C_DO_SEND_RESTART_WRITE:	
  4029                           ; 1 bytes @ 0x0
  4030                           
  4031  0070                     ??_I2C_DO_SEND_RESTART_WRITE:	
  4032                           ; 1 bytes @ 0x0
  4033                           
  4034  0070                     ?_I2C_DO_SEND_RESTART:	
  4035                           ; 1 bytes @ 0x0
  4036                           
  4037  0070                     ??_I2C_DO_SEND_RESTART:	
  4038                           ; 1 bytes @ 0x0
  4039                           
  4040  0070                     ?_I2C_DO_SEND_STOP:	
  4041                           ; 1 bytes @ 0x0
  4042                           
  4043  0070                     ??_I2C_DO_SEND_STOP:	
  4044                           ; 1 bytes @ 0x0
  4045                           
  4046  0070                     ?_I2C_DO_RX_ACK:	
  4047                           ; 1 bytes @ 0x0
  4048                           
  4049  0070                     ??_I2C_DO_RX_ACK:	
  4050                           ; 1 bytes @ 0x0
  4051                           
  4052  0070                     ?_I2C_DO_RX_NACK_STOP:	
  4053                           ; 1 bytes @ 0x0
  4054                           
  4055  0070                     ??_I2C_DO_RX_NACK_STOP:	
  4056                           ; 1 bytes @ 0x0
  4057                           
  4058  0070                     ?_I2C_DO_RX_NACK_RESTART:	
  4059                           ; 1 bytes @ 0x0
  4060                           
  4061  0070                     ??_I2C_DO_RX_NACK_RESTART:	
  4062                           ; 1 bytes @ 0x0
  4063                           
  4064  0070                     ?_I2C_DO_RESET:	
  4065                           ; 1 bytes @ 0x0
  4066                           
  4067  0070                     ??_I2C_DO_RESET:	
  4068                           ; 1 bytes @ 0x0
  4069                           
  4070  0070                     ?_I2C_DO_ADDRESS_NACK:	
  4071                           ; 1 bytes @ 0x0
  4072                           
  4073  0070                     ?_I2C_MasterClearIrq:	
  4074                           ; 1 bytes @ 0x0
  4075                           
  4076  0070                     ??_I2C_MasterClearIrq:	
  4077                           ; 1 bytes @ 0x0
  4078                           
  4079  0070                     ?_I2C_MasterOpen:	
  4080                           ; 1 bytes @ 0x0
  4081                           
  4082  0070                     ??_I2C_MasterOpen:	
  4083                           ; 1 bytes @ 0x0
  4084                           
  4085  0070                     ?_I2C_MasterDisableIrq:	
  4086                           ; 1 bytes @ 0x0
  4087                           
  4088  0070                     ??_I2C_MasterDisableIrq:	
  4089                           ; 1 bytes @ 0x0
  4090                           
  4091  0070                     ?_I2C_MasterClose:	
  4092                           ; 1 bytes @ 0x0
  4093                           
  4094  0070                     ??_I2C_MasterClose:	
  4095                           ; 1 bytes @ 0x0
  4096                           
  4097  0070                     ?_I2C_MasterStart:	
  4098                           ; 1 bytes @ 0x0
  4099                           
  4100  0070                     ??_I2C_MasterStart:	
  4101                           ; 1 bytes @ 0x0
  4102                           
  4103  0070                     ?_I2C_Poller:	
  4104                           ; 1 bytes @ 0x0
  4105                           
  4106  0070                     ?_I2C_SetCallback:	
  4107                           ; 1 bytes @ 0x0
  4108                           
  4109  0070                     ?_I2C_MasterWaitForEvent:	
  4110                           ; 1 bytes @ 0x0
  4111                           
  4112  0070                     ??_I2C_MasterWaitForEvent:	
  4113                           ; 1 bytes @ 0x0
  4114                           
  4115  0070                     ?_I2C_MasterFsm:	
  4116                           ; 1 bytes @ 0x0
  4117                           
  4118  0070                     ?_I2C_MasterIsNack:	
  4119                           ; 1 bytes @ 0x0
  4120                           
  4121  0070                     ??_I2C_MasterIsNack:	
  4122                           ; 1 bytes @ 0x0
  4123                           
  4124  0070                     ?_I2C_MasterSendTxData:	
  4125                           ; 1 bytes @ 0x0
  4126                           
  4127  0070                     ??_I2C_MasterSendTxData:	
  4128                           ; 1 bytes @ 0x0
  4129                           
  4130  0070                     ?_I2C_MasterGetRxData:	
  4131                           ; 1 bytes @ 0x0
  4132                           
  4133  0070                     ??_I2C_MasterGetRxData:	
  4134                           ; 1 bytes @ 0x0
  4135                           
  4136  0070                     ?_I2C_MasterSendAck:	
  4137                           ; 1 bytes @ 0x0
  4138                           
  4139  0070                     ??_I2C_MasterSendAck:	
  4140                           ; 1 bytes @ 0x0
  4141                           
  4142  0070                     ?_I2C_MasterStartRx:	
  4143                           ; 1 bytes @ 0x0
  4144                           
  4145  0070                     ??_I2C_MasterStartRx:	
  4146                           ; 1 bytes @ 0x0
  4147                           
  4148  0070                     ?_I2C_MasterSetIrq:	
  4149                           ; 1 bytes @ 0x0
  4150                           
  4151  0070                     ??_I2C_MasterSetIrq:	
  4152                           ; 1 bytes @ 0x0
  4153                           
  4154  0070                     ?_I2C_MasterEnableRestart:	
  4155                           ; 1 bytes @ 0x0
  4156                           
  4157  0070                     ??_I2C_MasterEnableRestart:	
  4158                           ; 1 bytes @ 0x0
  4159                           
  4160  0070                     ?_I2C_MasterStop:	
  4161                           ; 1 bytes @ 0x0
  4162                           
  4163  0070                     ??_I2C_MasterStop:	
  4164                           ; 1 bytes @ 0x0
  4165                           
  4166  0070                     ?_I2C_MasterSendNack:	
  4167                           ; 1 bytes @ 0x0
  4168                           
  4169  0070                     ??_I2C_MasterSendNack:	
  4170                           ; 1 bytes @ 0x0
  4171                           
  4172  0070                     ?_EUSART_Receive_ISR:	
  4173                           ; 1 bytes @ 0x0
  4174                           
  4175  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  4176                           ; 1 bytes @ 0x0
  4177                           
  4178  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  4179                           ; 1 bytes @ 0x0
  4180                           
  4181  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  4182                           ; 1 bytes @ 0x0
  4183                           
  4184  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  4185                           ; 1 bytes @ 0x0
  4186                           
  4187  0070                     ?_EUSART_DefaultErrorHandler:	
  4188                           ; 1 bytes @ 0x0
  4189                           
  4190  0070                     ?_EUSART_RxDataHandler:	
  4191                           ; 1 bytes @ 0x0
  4192                           
  4193  0070                     ??_EUSART_RxDataHandler:	
  4194                           ; 1 bytes @ 0x0
  4195                           
  4196  0070                     ?_TMR2_DefaultInterruptHandler:	
  4197                           ; 1 bytes @ 0x0
  4198                           
  4199  0070                     ??_TMR2_DefaultInterruptHandler:	
  4200                           ; 1 bytes @ 0x0
  4201                           
  4202  0070                     ?_INTERRUPT_InterruptManager:	
  4203                           ; 1 bytes @ 0x0
  4204                           
  4205  0070                     ?_SYSTEM_Initialize:	
  4206                           ; 1 bytes @ 0x0
  4207                           
  4208  0070                     ?_I2C_MasterOperation:	
  4209                           ; 1 bytes @ 0x0
  4210                           
  4211  0070                     ?_EUSART_Write:	
  4212                           ; 1 bytes @ 0x0
  4213                           
  4214  0070                     ??_EUSART_Write:	
  4215                           ; 1 bytes @ 0x0
  4216                           
  4217  0070                     ?_PWM3_LoadDutyValue:	
  4218                           ; 1 bytes @ 0x0
  4219                           
  4220  0070                     ?_TMR2_Start:	
  4221                           ; 1 bytes @ 0x0
  4222                           
  4223  0070                     ?_TMR2_StartTimer:	
  4224                           ; 1 bytes @ 0x0
  4225                           
  4226  0070                     ?_TMR2_Counter8BitSet:	
  4227                           ; 1 bytes @ 0x0
  4228                           
  4229  0070                     ?_TMR2_WriteTimer:	
  4230                           ; 1 bytes @ 0x0
  4231                           
  4232  0070                     ?_MyTimer2ISR:	
  4233                           ; 1 bytes @ 0x0
  4234                           
  4235  0070                     ?_MyUART_ISR:	
  4236                           ; 1 bytes @ 0x0
  4237                           
  4238  0070                     ?_main:	
  4239                           ; 1 bytes @ 0x0
  4240                           
  4241  0070                     I2C_MasterSendTxData@data:	
  4242                           ; 1 bytes @ 0x0
  4243                           
  4244  0070                     EUSART_Write@txData:	
  4245                           ; 1 bytes @ 0x0
  4246                           
  4247  0070                     I2C_SetBuffer@bufferSize:	
  4248                           ; 1 bytes @ 0x0
  4249                           
  4250  0070                     I2C_SetCallback@cb:	
  4251                           ; 2 bytes @ 0x0
  4252                           
  4253  0070                     PWM3_LoadDutyValue@dutyValue:	
  4254                           ; 2 bytes @ 0x0
  4255                           
  4256                           
  4257                           ; 2 bytes @ 0x0
  4258  0070                     	ds	1
  4259  0071                     ??_I2C_DO_SEND_ADR_WRITE:	
  4260  0071                     ??_EUSART_Receive_ISR:	
  4261                           ; 1 bytes @ 0x1
  4262                           
  4263  0071                     ??_EUSART_DefaultErrorHandler:	
  4264                           ; 1 bytes @ 0x1
  4265                           
  4266  0071                     ??_MyUART_ISR:	
  4267                           ; 1 bytes @ 0x1
  4268                           
  4269  0071                     I2C_Open@address:	
  4270                           ; 1 bytes @ 0x1
  4271                           
  4272  0071                     I2C_Close@returnValue:	
  4273                           ; 1 bytes @ 0x1
  4274                           
  4275                           
  4276                           ; 1 bytes @ 0x1
  4277  0071                     	ds	1
  4278  0072                     ??_I2C_SetBuffer:	
  4279  0072                     ??_PWM3_LoadDutyValue:	
  4280                           ; 1 bytes @ 0x2
  4281                           
  4282  0072                     I2C_Open@returnValue:	
  4283                           ; 1 bytes @ 0x2
  4284                           
  4285  0072                     I2C_SetCallback@ptr:	
  4286                           ; 1 bytes @ 0x2
  4287                           
  4288                           
  4289                           ; 1 bytes @ 0x2
  4290  0072                     	ds	1
  4291  0073                     ??_I2C_SetCallback:	
  4292  0073                     I2C_SetBuffer@buffer:	
  4293                           ; 1 bytes @ 0x3
  4294                           
  4295                           
  4296                           ; 1 bytes @ 0x3
  4297  0073                     	ds	1
  4298  0074                     I2C_SetCallback@idx:	
  4299                           
  4300                           ; 1 bytes @ 0x4
  4301  0074                     	ds	1
  4302  0075                     ?_I2C_SetDataCompleteCallback:	
  4303  0075                     ?_I2C_SetAddressNackCallback:	
  4304                           ; 1 bytes @ 0x5
  4305                           
  4306  0075                     MyUART_ISR@c:	
  4307                           ; 1 bytes @ 0x5
  4308                           
  4309  0075                     I2C_SetDataCompleteCallback@cb:	
  4310                           ; 1 bytes @ 0x5
  4311                           
  4312  0075                     I2C_SetAddressNackCallback@cb:	
  4313                           ; 2 bytes @ 0x5
  4314                           
  4315                           
  4316                           ; 2 bytes @ 0x5
  4317  0075                     	ds	2
  4318  0077                     I2C_SetDataCompleteCallback@ptr:	
  4319  0077                     I2C_SetAddressNackCallback@ptr:	
  4320                           ; 1 bytes @ 0x7
  4321                           
  4322                           
  4323                           ; 1 bytes @ 0x7
  4324  0077                     	ds	1
  4325  0078                     ??_I2C_SetDataCompleteCallback:	
  4326  0078                     ??_I2C_SetAddressNackCallback:	
  4327                           ; 1 bytes @ 0x8
  4328                           
  4329                           
  4330                           ; 1 bytes @ 0x8
  4331  0078                     	ds	1
  4332  0079                     ?_rd1RegCompleteHandler:	
  4333  0079                     ?_rd2RegCompleteHandler:	
  4334                           ; 1 bytes @ 0x9
  4335                           
  4336  0079                     ?_wr1RegCompleteHandler:	
  4337                           ; 1 bytes @ 0x9
  4338                           
  4339  0079                     ?_wr2RegCompleteHandler:	
  4340                           ; 1 bytes @ 0x9
  4341                           
  4342  0079                     ?_rdBlkRegCompleteHandler:	
  4343                           ; 1 bytes @ 0x9
  4344                           
  4345  0079                     ?_I2C_CallbackReturnStop:	
  4346                           ; 1 bytes @ 0x9
  4347                           
  4348  0079                     ?_I2C_CallbackReturnReset:	
  4349                           ; 1 bytes @ 0x9
  4350                           
  4351  0079                     rd1RegCompleteHandler@ptr:	
  4352                           ; 1 bytes @ 0x9
  4353                           
  4354  0079                     rd2RegCompleteHandler@ptr:	
  4355                           ; 1 bytes @ 0x9
  4356                           
  4357  0079                     wr1RegCompleteHandler@ptr:	
  4358                           ; 1 bytes @ 0x9
  4359                           
  4360  0079                     wr2RegCompleteHandler@ptr:	
  4361                           ; 1 bytes @ 0x9
  4362                           
  4363  0079                     rdBlkRegCompleteHandler@ptr:	
  4364                           ; 1 bytes @ 0x9
  4365                           
  4366  0079                     I2C_CallbackReturnStop@funPtr:	
  4367                           ; 1 bytes @ 0x9
  4368                           
  4369  0079                     I2C_CallbackReturnReset@funPtr:	
  4370                           ; 1 bytes @ 0x9
  4371                           
  4372                           
  4373                           ; 1 bytes @ 0x9
  4374  0079                     	ds	1
  4375  007A                     ??_rd1RegCompleteHandler:	
  4376  007A                     ??_rd2RegCompleteHandler:	
  4377                           ; 1 bytes @ 0xA
  4378                           
  4379  007A                     ??_wr1RegCompleteHandler:	
  4380                           ; 1 bytes @ 0xA
  4381                           
  4382  007A                     ??_wr2RegCompleteHandler:	
  4383                           ; 1 bytes @ 0xA
  4384                           
  4385  007A                     ??_rdBlkRegCompleteHandler:	
  4386                           ; 1 bytes @ 0xA
  4387                           
  4388  007A                     ??_I2C_DO_TX:	
  4389                           ; 1 bytes @ 0xA
  4390                           
  4391  007A                     ??_I2C_DO_RX:	
  4392                           ; 1 bytes @ 0xA
  4393                           
  4394  007A                     ??_I2C_DO_TX_EMPTY:	
  4395                           ; 1 bytes @ 0xA
  4396                           
  4397  007A                     ??_I2C_DO_ADDRESS_NACK:	
  4398                           ; 1 bytes @ 0xA
  4399                           
  4400  007A                     ??_I2C_CallbackReturnStop:	
  4401                           ; 1 bytes @ 0xA
  4402                           
  4403  007A                     ??_I2C_CallbackReturnReset:	
  4404                           ; 1 bytes @ 0xA
  4405                           
  4406                           
  4407                           ; 1 bytes @ 0xA
  4408  007A                     	ds	1
  4409  007B                     _I2C_DO_TX$794:	
  4410                           
  4411                           ; 2 bytes @ 0xB
  4412  007B                     	ds	2
  4413  007D                     ??_I2C_Poller:	
  4414  007D                     ??_I2C_MasterOperation:	
  4415                           ; 1 bytes @ 0xD
  4416                           
  4417                           
  4418                           ; 1 bytes @ 0xD
  4419  007D                     	ds	1
  4420  007E                     ??_I2C_MasterWrite:	
  4421  007E                     ??_TMR2_ISR:	
  4422                           ; 1 bytes @ 0xE
  4423                           
  4424                           
  4425                           	psect	cstackBANK0
  4426  0057                     __pcstackBANK0:	
  4427                           ; 1 bytes @ 0xE
  4428                           
  4429  0057                     ??_I2C_MasterFsm:	
  4430                           
  4431                           ; 1 bytes @ 0x0
  4432  0057                     	ds	3
  4433  005A                     I2C_MasterOperation@read:	
  4434                           
  4435                           ; 1 bytes @ 0x3
  4436  005A                     	ds	1
  4437  005B                     I2C_MasterOperation@returnValue:	
  4438                           
  4439                           ; 1 bytes @ 0x4
  4440  005B                     	ds	1
  4441  005C                     ?_I2C_Write1ByteRegister:	
  4442  005C                     I2C_Write1ByteRegister@reg:	
  4443                           ; 1 bytes @ 0x5
  4444                           
  4445                           
  4446                           ; 1 bytes @ 0x5
  4447  005C                     	ds	1
  4448  005D                     I2C_Write1ByteRegister@data:	
  4449                           
  4450                           ; 1 bytes @ 0x6
  4451  005D                     	ds	1
  4452  005E                     ??_I2C_Write1ByteRegister:	
  4453                           
  4454                           ; 1 bytes @ 0x7
  4455  005E                     	ds	1
  4456  005F                     I2C_Write1ByteRegister@address:	
  4457                           
  4458                           ; 1 bytes @ 0x8
  4459  005F                     	ds	1
  4460  0060                     ??_MyTimer2ISR:	
  4461                           
  4462                           ; 1 bytes @ 0x9
  4463  0060                     	ds	2
  4464  0062                     ??_INTERRUPT_InterruptManager:	
  4465                           
  4466                           ; 1 bytes @ 0xB
  4467  0062                     	ds	1
  4468                           
  4469                           	psect	maintext
  4470  014F                     __pmaintext:	
  4471 ;;
  4472 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4473 ;;
  4474 ;; *************** function _main *****************
  4475 ;; Defined at:
  4476 ;;		line 159 in file "main.c"
  4477 ;; Parameters:    Size  Location     Type
  4478 ;;		None
  4479 ;; Auto vars:     Size  Location     Type
  4480 ;;		None
  4481 ;; Return value:  Size  Location     Type
  4482 ;;                  1    wreg      void 
  4483 ;; Registers used:
  4484 ;;		wreg, status,2, status,0, pclath, cstack
  4485 ;; Tracked objects:
  4486 ;;		On entry : B1F/0
  4487 ;;		On exit  : 0/0
  4488 ;;		Unchanged: 0/0
  4489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4492 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4493 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4494 ;;Total ram usage:        2 bytes
  4495 ;; Hardware stack levels required when called:   15
  4496 ;; This function calls:
  4497 ;;		_EUSART_SetRxInterruptHandler
  4498 ;;		_SYSTEM_Initialize
  4499 ;;		_TMR2_SetInterruptHandler
  4500 ;;		_TMR2_StartTimer
  4501 ;;		_TMR2_WriteTimer
  4502 ;; This function is called by:
  4503 ;;		Startup code after reset
  4504 ;; This function uses a non-reentrant model
  4505 ;;
  4506                           
  4507                           
  4508                           ;psect for function _main
  4509  014F                     _main:	
  4510                           
  4511                           ;main.c: 160: SYSTEM_Initialize();
  4512                           
  4513                           ;incstack = 0
  4514                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
  4515  014F  3184  246F  3181   	fcall	_SYSTEM_Initialize
  4516                           
  4517                           ;main.c: 162: do { LATAbits.LATA5 = 1; } while(0);
  4518  0152  0022               	movlb	2	; select bank2
  4519  0153  168C               	bsf	12,5	;volatile
  4520                           
  4521                           ;main.c: 169: TMR2_SetInterruptHandler(MyTimer2ISR);
  4522  0154  30F5               	movlw	low _MyTimer2ISR
  4523  0155  0021               	movlb	1	; select bank1
  4524  0156  00A4               	movwf	TMR2_SetInterruptHandler@InterruptHandler^(0+128)
  4525  0157  3000               	movlw	high _MyTimer2ISR
  4526  0158  00A5               	movwf	(TMR2_SetInterruptHandler@InterruptHandler^(0+128)+1)
  4527  0159  3185  251E  3181   	fcall	_TMR2_SetInterruptHandler
  4528                           
  4529                           ;main.c: 170: TMR2_WriteTimer(255);
  4530  015C  30FF               	movlw	255
  4531  015D  3185  255D  3181   	fcall	_TMR2_WriteTimer
  4532                           
  4533                           ;main.c: 171: TMR2_StartTimer();
  4534  0160  3185  25C3  3181   	fcall	_TMR2_StartTimer
  4535                           
  4536                           ;main.c: 173: EUSART_SetRxInterruptHandler(MyUART_ISR);
  4537  0163  303D               	movlw	low _MyUART_ISR
  4538  0164  0021               	movlb	1	; select bank1
  4539  0165  00A4               	movwf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128)
  4540  0166  3000               	movlw	high _MyUART_ISR
  4541  0167  00A5               	movwf	(EUSART_SetRxInterruptHandler@interruptHandler^(0+128)+1)
  4542  0168  3185  2527  3181   	fcall	_EUSART_SetRxInterruptHandler
  4543                           
  4544                           ;main.c: 175: (INTCONbits.PEIE = 1);
  4545  016B  170B               	bsf	11,6	;volatile
  4546                           
  4547                           ;main.c: 176: (INTCONbits.GIE = 1);
  4548  016C  178B               	bsf	11,7	;volatile
  4549  016D  299E               	goto	l3085
  4550  016E                     l3087:	
  4551                           
  4552                           ;main.c: 180: if(Validation) {
  4553  016E  086B               	movf	_Validation,w
  4554  016F  1903               	btfsc	3,2
  4555  0170  298A               	goto	l3093
  4556                           
  4557                           ;main.c: 181: do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  4558  0171  1003               	clrc
  4559  0172  0022               	movlb	2	; select bank2
  4560  0173  1E8C               	btfss	12,5	;volatile
  4561  0174  1403               	setc
  4562  0175  1C03               	btfss	3,0
  4563  0176  297A               	goto	u1290
  4564  0177  0022               	movlb	2	; select bank2
  4565  0178  168C               	bsf	12,5	;volatile
  4566  0179  297C               	goto	l3091
  4567  017A                     u1290:	
  4568  017A  0022               	movlb	2	; select bank2
  4569  017B  128C               	bcf	12,5	;volatile
  4570  017C                     l3091:	
  4571                           
  4572                           ;main.c: 182: _delay((unsigned long)((500)*(4000000/4000.0)));
  4573  017C  3003               	movlw	3
  4574  017D  0021               	movlb	1	; select bank1
  4575  017E  00A7               	movwf	(??_main^(0+128)+1)
  4576  017F  308A               	movlw	138
  4577  0180  00A6               	movwf	??_main^(0+128)
  4578  0181  3055               	movlw	85
  4579  0182                     u1337:	
  4580  0182  0B89               	decfsz	9,f
  4581  0183  2982               	goto	u1337
  4582  0184  0BA6               	decfsz	??_main^(0+128),f
  4583  0185  2982               	goto	u1337
  4584  0186  0BA7               	decfsz	(??_main^(0+128)+1),f
  4585  0187  2982               	goto	u1337
  4586  0188  3200               	nop2
  4587                           
  4588                           ;main.c: 183: } else {
  4589  0189  299E               	goto	l3085
  4590  018A                     l3093:	
  4591                           ;main.c: 184: do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  4592                           
  4593  018A  1003               	clrc
  4594  018B  0022               	movlb	2	; select bank2
  4595  018C  1E8C               	btfss	12,5	;volatile
  4596  018D  1403               	setc
  4597  018E  1C03               	btfss	3,0
  4598  018F  2993               	goto	u1310
  4599  0190  0022               	movlb	2	; select bank2
  4600  0191  168C               	bsf	12,5	;volatile
  4601  0192  2995               	goto	l3095
  4602  0193                     u1310:	
  4603  0193  0022               	movlb	2	; select bank2
  4604  0194  128C               	bcf	12,5	;volatile
  4605  0195                     l3095:	
  4606                           
  4607                           ;main.c: 185: _delay((unsigned long)((100)*(4000000/4000.0)));
  4608  0195  3082               	movlw	130
  4609  0196  0021               	movlb	1	; select bank1
  4610  0197  00A6               	movwf	??_main^(0+128)
  4611  0198  30DD               	movlw	221
  4612  0199                     u1347:	
  4613  0199  0B89               	decfsz	9,f
  4614  019A  2999               	goto	u1347
  4615  019B  0BA6               	decfsz	??_main^(0+128),f
  4616  019C  2999               	goto	u1347
  4617  019D  3200               	nop2
  4618  019E                     l3085:	
  4619                           ;main.c: 178: while (1) {
  4620                           
  4621                           ;main.c: 186: }
  4622                           ;main.c: 187: } else {
  4623                           
  4624                           
  4625                           ;main.c: 179: if(PORTAbits.RA4) {
  4626  019E  0020               	movlb	0	; select bank0
  4627  019F  1A0C               	btfsc	12,4	;volatile
  4628  01A0  296E               	goto	l3087
  4629                           
  4630                           ;main.c: 188: do { LATAbits.LATA5 = 1; } while(0);
  4631  01A1  0022               	movlb	2	; select bank2
  4632  01A2  168C               	bsf	12,5	;volatile
  4633  01A3  299E               	goto	l3085
  4634  01A4                     __end_of_main:	
  4635                           
  4636                           	psect	text1
  4637  055D                     __ptext1:	
  4638 ;; *************** function _TMR2_WriteTimer *****************
  4639 ;; Defined at:
  4640 ;;		line 150 in file "mcc_generated_files/tmr2.c"
  4641 ;; Parameters:    Size  Location     Type
  4642 ;;  timerVal        1    wreg     unsigned char 
  4643 ;; Auto vars:     Size  Location     Type
  4644 ;;  timerVal        1    1[BANK1 ] unsigned char 
  4645 ;; Return value:  Size  Location     Type
  4646 ;;                  1    wreg      void 
  4647 ;; Registers used:
  4648 ;;		wreg, status,2, status,0, pclath, cstack
  4649 ;; Tracked objects:
  4650 ;;		On entry : 0/0
  4651 ;;		On exit  : 0/0
  4652 ;;		Unchanged: 0/0
  4653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4655 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4657 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4658 ;;Total ram usage:        1 bytes
  4659 ;; Hardware stack levels used:    1
  4660 ;; Hardware stack levels required when called:   13
  4661 ;; This function calls:
  4662 ;;		_TMR2_Counter8BitSet
  4663 ;; This function is called by:
  4664 ;;		_main
  4665 ;; This function uses a non-reentrant model
  4666 ;;
  4667                           
  4668                           
  4669                           ;psect for function _TMR2_WriteTimer
  4670  055D                     _TMR2_WriteTimer:	
  4671                           
  4672                           ;incstack = 0
  4673                           ; Regs used in _TMR2_WriteTimer: [wreg+status,2+status,0+pclath+cstack]
  4674                           ;TMR2_WriteTimer@timerVal stored from wreg
  4675  055D  0021               	movlb	1	; select bank1
  4676  055E  00A5               	movwf	TMR2_WriteTimer@timerVal^(0+128)
  4677                           
  4678                           ;tmr2.c: 152: TMR2_Counter8BitSet(timerVal);
  4679  055F  0825               	movf	TMR2_WriteTimer@timerVal^(0+128),w
  4680  0560  3185  2563         	fcall	_TMR2_Counter8BitSet
  4681  0562  0008               	return
  4682  0563                     __end_of_TMR2_WriteTimer:	
  4683                           
  4684                           	psect	text2
  4685  0563                     __ptext2:	
  4686 ;; *************** function _TMR2_Counter8BitSet *****************
  4687 ;; Defined at:
  4688 ;;		line 144 in file "mcc_generated_files/tmr2.c"
  4689 ;; Parameters:    Size  Location     Type
  4690 ;;  timerVal        1    wreg     unsigned char 
  4691 ;; Auto vars:     Size  Location     Type
  4692 ;;  timerVal        1    0[BANK1 ] unsigned char 
  4693 ;; Return value:  Size  Location     Type
  4694 ;;                  1    wreg      void 
  4695 ;; Registers used:
  4696 ;;		wreg
  4697 ;; Tracked objects:
  4698 ;;		On entry : 0/0
  4699 ;;		On exit  : 0/0
  4700 ;;		Unchanged: 0/0
  4701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4703 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4705 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4706 ;;Total ram usage:        1 bytes
  4707 ;; Hardware stack levels used:    1
  4708 ;; Hardware stack levels required when called:   12
  4709 ;; This function calls:
  4710 ;;		Nothing
  4711 ;; This function is called by:
  4712 ;;		_TMR2_WriteTimer
  4713 ;; This function uses a non-reentrant model
  4714 ;;
  4715                           
  4716                           
  4717                           ;psect for function _TMR2_Counter8BitSet
  4718  0563                     _TMR2_Counter8BitSet:	
  4719                           
  4720                           ;incstack = 0
  4721                           ; Regs used in _TMR2_Counter8BitSet: [wreg]
  4722                           ;TMR2_Counter8BitSet@timerVal stored from wreg
  4723  0563  0021               	movlb	1	; select bank1
  4724  0564  00A4               	movwf	TMR2_Counter8BitSet@timerVal^(0+128)
  4725                           
  4726                           ;tmr2.c: 147: TMR2 = timerVal;
  4727  0565  0824               	movf	TMR2_Counter8BitSet@timerVal^(0+128),w
  4728  0566  0020               	movlb	0	; select bank0
  4729  0567  009A               	movwf	26	;volatile
  4730  0568  0008               	return
  4731  0569                     __end_of_TMR2_Counter8BitSet:	
  4732                           
  4733                           	psect	text3
  4734  05C3                     __ptext3:	
  4735 ;; *************** function _TMR2_StartTimer *****************
  4736 ;; Defined at:
  4737 ;;		line 114 in file "mcc_generated_files/tmr2.c"
  4738 ;; Parameters:    Size  Location     Type
  4739 ;;		None
  4740 ;; Auto vars:     Size  Location     Type
  4741 ;;		None
  4742 ;; Return value:  Size  Location     Type
  4743 ;;                  1    wreg      void 
  4744 ;; Registers used:
  4745 ;;		status,2, status,0, pclath, cstack
  4746 ;; Tracked objects:
  4747 ;;		On entry : 0/0
  4748 ;;		On exit  : 0/0
  4749 ;;		Unchanged: 0/0
  4750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4755 ;;Total ram usage:        0 bytes
  4756 ;; Hardware stack levels used:    1
  4757 ;; Hardware stack levels required when called:   13
  4758 ;; This function calls:
  4759 ;;		_TMR2_Start
  4760 ;; This function is called by:
  4761 ;;		_main
  4762 ;; This function uses a non-reentrant model
  4763 ;;
  4764                           
  4765                           
  4766                           ;psect for function _TMR2_StartTimer
  4767  05C3                     _TMR2_StartTimer:	
  4768                           
  4769                           ;tmr2.c: 116: TMR2_Start();
  4770                           
  4771                           ;incstack = 0
  4772                           ; Regs used in _TMR2_StartTimer: [status,2+status,0+pclath+cstack]
  4773  05C3  3185  25C6         	fcall	_TMR2_Start
  4774  05C5  0008               	return
  4775  05C6                     __end_of_TMR2_StartTimer:	
  4776                           
  4777                           	psect	text4
  4778  05C6                     __ptext4:	
  4779 ;; *************** function _TMR2_Start *****************
  4780 ;; Defined at:
  4781 ;;		line 108 in file "mcc_generated_files/tmr2.c"
  4782 ;; Parameters:    Size  Location     Type
  4783 ;;		None
  4784 ;; Auto vars:     Size  Location     Type
  4785 ;;		None
  4786 ;; Return value:  Size  Location     Type
  4787 ;;                  1    wreg      void 
  4788 ;; Registers used:
  4789 ;;		None
  4790 ;; Tracked objects:
  4791 ;;		On entry : 0/0
  4792 ;;		On exit  : 0/0
  4793 ;;		Unchanged: 0/0
  4794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4799 ;;Total ram usage:        0 bytes
  4800 ;; Hardware stack levels used:    1
  4801 ;; Hardware stack levels required when called:   12
  4802 ;; This function calls:
  4803 ;;		Nothing
  4804 ;; This function is called by:
  4805 ;;		_TMR2_StartTimer
  4806 ;; This function uses a non-reentrant model
  4807 ;;
  4808                           
  4809                           
  4810                           ;psect for function _TMR2_Start
  4811  05C6                     _TMR2_Start:	
  4812                           
  4813                           ;tmr2.c: 111: T2CONbits.TMR2ON = 1;
  4814                           
  4815                           ;incstack = 0
  4816                           ; Regs used in _TMR2_Start: []
  4817  05C6  0020               	movlb	0	; select bank0
  4818  05C7  179C               	bsf	28,7	;volatile
  4819  05C8  0008               	return
  4820  05C9                     __end_of_TMR2_Start:	
  4821                           
  4822                           	psect	text5
  4823  046F                     __ptext5:	
  4824 ;; *************** function _SYSTEM_Initialize *****************
  4825 ;; Defined at:
  4826 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4827 ;; Parameters:    Size  Location     Type
  4828 ;;		None
  4829 ;; Auto vars:     Size  Location     Type
  4830 ;;		None
  4831 ;; Return value:  Size  Location     Type
  4832 ;;                  1    wreg      void 
  4833 ;; Registers used:
  4834 ;;		wreg, status,2, status,0, pclath, cstack
  4835 ;; Tracked objects:
  4836 ;;		On entry : 0/0
  4837 ;;		On exit  : 0/0
  4838 ;;		Unchanged: 0/0
  4839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4844 ;;Total ram usage:        0 bytes
  4845 ;; Hardware stack levels used:    1
  4846 ;; Hardware stack levels required when called:   14
  4847 ;; This function calls:
  4848 ;;		_EUSART_Initialize
  4849 ;;		_I2C_Initialize
  4850 ;;		_OSCILLATOR_Initialize
  4851 ;;		_PIN_MANAGER_Initialize
  4852 ;;		_PWM3_Initialize
  4853 ;;		_TMR2_Initialize
  4854 ;; This function is called by:
  4855 ;;		_main
  4856 ;; This function uses a non-reentrant model
  4857 ;;
  4858                           
  4859                           
  4860                           ;psect for function _SYSTEM_Initialize
  4861  046F                     _SYSTEM_Initialize:	
  4862                           
  4863                           ;mcc.c: 52: I2C_Initialize();
  4864                           
  4865                           ;incstack = 0
  4866                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4867  046F  3185  250A  3184   	fcall	_I2C_Initialize
  4868                           
  4869                           ;mcc.c: 53: PIN_MANAGER_Initialize();
  4870  0472  3181  21EF  3184   	fcall	_PIN_MANAGER_Initialize
  4871                           
  4872                           ;mcc.c: 54: OSCILLATOR_Initialize();
  4873  0475  3185  2549  3184   	fcall	_OSCILLATOR_Initialize
  4874                           
  4875                           ;mcc.c: 55: PWM3_Initialize();
  4876  0478  3184  24FF  3184   	fcall	_PWM3_Initialize
  4877                           
  4878                           ;mcc.c: 56: TMR2_Initialize();
  4879  047B  3184  245B  3184   	fcall	_TMR2_Initialize
  4880                           
  4881                           ;mcc.c: 57: EUSART_Initialize();
  4882  047E  3182  22D0         	fcall	_EUSART_Initialize
  4883  0480  0008               	return
  4884  0481                     __end_of_SYSTEM_Initialize:	
  4885                           
  4886                           	psect	text6
  4887  045B                     __ptext6:	
  4888 ;; *************** function _TMR2_Initialize *****************
  4889 ;; Defined at:
  4890 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  4891 ;; Parameters:    Size  Location     Type
  4892 ;;		None
  4893 ;; Auto vars:     Size  Location     Type
  4894 ;;		None
  4895 ;; Return value:  Size  Location     Type
  4896 ;;                  1    wreg      void 
  4897 ;; Registers used:
  4898 ;;		wreg, status,2, status,0, pclath, cstack
  4899 ;; Tracked objects:
  4900 ;;		On entry : 0/0
  4901 ;;		On exit  : 0/0
  4902 ;;		Unchanged: 0/0
  4903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4908 ;;Total ram usage:        0 bytes
  4909 ;; Hardware stack levels used:    1
  4910 ;; Hardware stack levels required when called:   13
  4911 ;; This function calls:
  4912 ;;		_TMR2_SetInterruptHandler
  4913 ;; This function is called by:
  4914 ;;		_SYSTEM_Initialize
  4915 ;; This function uses a non-reentrant model
  4916 ;;
  4917                           
  4918                           
  4919                           ;psect for function _TMR2_Initialize
  4920  045B                     _TMR2_Initialize:	
  4921                           
  4922                           ;tmr2.c: 69: T2CLKCON = 0x00;
  4923                           
  4924                           ;incstack = 0
  4925                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4926  045B  0020               	movlb	0	; select bank0
  4927  045C  019E               	clrf	30	;volatile
  4928                           
  4929                           ;tmr2.c: 72: T2HLT = 0x00;
  4930  045D  019D               	clrf	29	;volatile
  4931                           
  4932                           ;tmr2.c: 75: T2RST = 0x00;
  4933  045E  019F               	clrf	31	;volatile
  4934                           
  4935                           ;tmr2.c: 78: T2PR = 0x9B;
  4936  045F  309B               	movlw	155
  4937  0460  009B               	movwf	27	;volatile
  4938                           
  4939                           ;tmr2.c: 81: T2TMR = 0x00;
  4940  0461  019A               	clrf	26	;volatile
  4941                           
  4942                           ;tmr2.c: 84: PIR1bits.TMR2IF = 0;
  4943  0462  1090               	bcf	16,1	;volatile
  4944                           
  4945                           ;tmr2.c: 87: PIE1bits.TMR2IE = 1;
  4946  0463  0021               	movlb	1	; select bank1
  4947  0464  1490               	bsf	16,1	;volatile
  4948                           
  4949                           ;tmr2.c: 90: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
  4950  0465  30EB               	movlw	low _TMR2_DefaultInterruptHandler
  4951  0466  00A4               	movwf	TMR2_SetInterruptHandler@InterruptHandler^(0+128)
  4952  0467  3005               	movlw	high _TMR2_DefaultInterruptHandler
  4953  0468  00A5               	movwf	(TMR2_SetInterruptHandler@InterruptHandler^(0+128)+1)
  4954  0469  3185  251E         	fcall	_TMR2_SetInterruptHandler
  4955                           
  4956                           ;tmr2.c: 93: T2CON = 0xF0;
  4957  046B  30F0               	movlw	240
  4958  046C  0020               	movlb	0	; select bank0
  4959  046D  009C               	movwf	28	;volatile
  4960  046E  0008               	return
  4961  046F                     __end_of_TMR2_Initialize:	
  4962                           
  4963                           	psect	text7
  4964  051E                     __ptext7:	
  4965 ;; *************** function _TMR2_SetInterruptHandler *****************
  4966 ;; Defined at:
  4967 ;;		line 178 in file "mcc_generated_files/tmr2.c"
  4968 ;; Parameters:    Size  Location     Type
  4969 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  4970 ;;		 -> MyTimer2ISR(1), TMR2_DefaultInterruptHandler(1), 
  4971 ;; Auto vars:     Size  Location     Type
  4972 ;;		None
  4973 ;; Return value:  Size  Location     Type
  4974 ;;                  1    wreg      void 
  4975 ;; Registers used:
  4976 ;;		wreg
  4977 ;; Tracked objects:
  4978 ;;		On entry : 0/0
  4979 ;;		On exit  : 0/0
  4980 ;;		Unchanged: 0/0
  4981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4982 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4985 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4986 ;;Total ram usage:        2 bytes
  4987 ;; Hardware stack levels used:    1
  4988 ;; Hardware stack levels required when called:   12
  4989 ;; This function calls:
  4990 ;;		Nothing
  4991 ;; This function is called by:
  4992 ;;		_TMR2_Initialize
  4993 ;;		_main
  4994 ;; This function uses a non-reentrant model
  4995 ;;
  4996                           
  4997                           
  4998                           ;psect for function _TMR2_SetInterruptHandler
  4999  051E                     _TMR2_SetInterruptHandler:	
  5000                           
  5001                           ;tmr2.c: 179: TMR2_InterruptHandler = InterruptHandler;
  5002                           
  5003                           ;incstack = 0
  5004                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  5005  051E  0021               	movlb	1	; select bank1
  5006  051F  0825               	movf	(TMR2_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5007  0520  0020               	movlb	0	; select bank0
  5008  0521  00E4               	movwf	_TMR2_InterruptHandler+1
  5009  0522  0021               	movlb	1	; select bank1
  5010  0523  0824               	movf	TMR2_SetInterruptHandler@InterruptHandler^(0+128),w
  5011  0524  0020               	movlb	0	; select bank0
  5012  0525  00E3               	movwf	_TMR2_InterruptHandler
  5013  0526  0008               	return
  5014  0527                     __end_of_TMR2_SetInterruptHandler:	
  5015                           
  5016                           	psect	text8
  5017  04FF                     __ptext8:	
  5018 ;; *************** function _PWM3_Initialize *****************
  5019 ;; Defined at:
  5020 ;;		line 58 in file "mcc_generated_files/pwm3.c"
  5021 ;; Parameters:    Size  Location     Type
  5022 ;;		None
  5023 ;; Auto vars:     Size  Location     Type
  5024 ;;		None
  5025 ;; Return value:  Size  Location     Type
  5026 ;;                  1    wreg      void 
  5027 ;; Registers used:
  5028 ;;		wreg, status,2, status,0
  5029 ;; Tracked objects:
  5030 ;;		On entry : 0/0
  5031 ;;		On exit  : 0/0
  5032 ;;		Unchanged: 0/0
  5033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5038 ;;Total ram usage:        0 bytes
  5039 ;; Hardware stack levels used:    1
  5040 ;; Hardware stack levels required when called:   12
  5041 ;; This function calls:
  5042 ;;		Nothing
  5043 ;; This function is called by:
  5044 ;;		_SYSTEM_Initialize
  5045 ;; This function uses a non-reentrant model
  5046 ;;
  5047                           
  5048                           
  5049                           ;psect for function _PWM3_Initialize
  5050  04FF                     _PWM3_Initialize:	
  5051                           
  5052                           ;pwm3.c: 62: PWM3CON = 0x80;
  5053                           
  5054                           ;incstack = 0
  5055                           ; Regs used in _PWM3_Initialize: [wreg+status,2+status,0]
  5056  04FF  3080               	movlw	128
  5057  0500  002C               	movlb	12	; select bank12
  5058  0501  0099               	movwf	25	;volatile
  5059                           
  5060                           ;pwm3.c: 65: PWM3DCH = 0x0F;
  5061  0502  300F               	movlw	15
  5062  0503  0098               	movwf	24	;volatile
  5063                           
  5064                           ;pwm3.c: 68: PWM3DCL = 0x40;
  5065  0504  3040               	movlw	64
  5066  0505  0097               	movwf	23	;volatile
  5067                           
  5068                           ;pwm3.c: 71: CCPTMRSbits.P3TSEL = 0;
  5069  0506  30CF               	movlw	-49
  5070  0507  0025               	movlb	5	; select bank5
  5071  0508  059E               	andwf	30,f	;volatile
  5072  0509  0008               	return
  5073  050A                     __end_of_PWM3_Initialize:	
  5074                           
  5075                           	psect	text9
  5076  01EF                     __ptext9:	
  5077 ;; *************** function _PIN_MANAGER_Initialize *****************
  5078 ;; Defined at:
  5079 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  5080 ;; Parameters:    Size  Location     Type
  5081 ;;		None
  5082 ;; Auto vars:     Size  Location     Type
  5083 ;;		None
  5084 ;; Return value:  Size  Location     Type
  5085 ;;                  1    wreg      void 
  5086 ;; Registers used:
  5087 ;;		wreg, status,2
  5088 ;; Tracked objects:
  5089 ;;		On entry : 0/0
  5090 ;;		On exit  : 0/0
  5091 ;;		Unchanged: 0/0
  5092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5097 ;;Total ram usage:        0 bytes
  5098 ;; Hardware stack levels used:    1
  5099 ;; Hardware stack levels required when called:   12
  5100 ;; This function calls:
  5101 ;;		Nothing
  5102 ;; This function is called by:
  5103 ;;		_SYSTEM_Initialize
  5104 ;; This function uses a non-reentrant model
  5105 ;;
  5106                           
  5107                           
  5108                           ;psect for function _PIN_MANAGER_Initialize
  5109  01EF                     _PIN_MANAGER_Initialize:	
  5110                           
  5111                           ;pin_manager.c: 60: LATA = 0x00;
  5112                           
  5113                           ;incstack = 0
  5114                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  5115  01EF  0022               	movlb	2	; select bank2
  5116  01F0  018C               	clrf	12	;volatile
  5117                           
  5118                           ;pin_manager.c: 61: LATB = 0x00;
  5119  01F1  018D               	clrf	13	;volatile
  5120                           
  5121                           ;pin_manager.c: 62: LATC = 0x00;
  5122  01F2  018E               	clrf	14	;volatile
  5123                           
  5124                           ;pin_manager.c: 67: TRISA = 0x13;
  5125  01F3  3013               	movlw	19
  5126  01F4  0021               	movlb	1	; select bank1
  5127  01F5  008C               	movwf	12	;volatile
  5128                           
  5129                           ;pin_manager.c: 68: TRISB = 0x70;
  5130  01F6  3070               	movlw	112
  5131  01F7  008D               	movwf	13	;volatile
  5132                           
  5133                           ;pin_manager.c: 69: TRISC = 0x3F;
  5134  01F8  303F               	movlw	63
  5135  01F9  008E               	movwf	14	;volatile
  5136                           
  5137                           ;pin_manager.c: 74: ANSELC = 0x0E;
  5138  01FA  300E               	movlw	14
  5139  01FB  0023               	movlb	3	; select bank3
  5140  01FC  008E               	movwf	14	;volatile
  5141                           
  5142                           ;pin_manager.c: 75: ANSELB = 0x00;
  5143  01FD  018D               	clrf	13	;volatile
  5144                           
  5145                           ;pin_manager.c: 76: ANSELA = 0x01;
  5146  01FE  3001               	movlw	1
  5147  01FF  008C               	movwf	12	;volatile
  5148                           
  5149                           ;pin_manager.c: 81: WPUB = 0x00;
  5150  0200  0024               	movlb	4	; select bank4
  5151  0201  018D               	clrf	13	;volatile
  5152                           
  5153                           ;pin_manager.c: 82: WPUA = 0x00;
  5154  0202  018C               	clrf	12	;volatile
  5155                           
  5156                           ;pin_manager.c: 83: WPUC = 0x00;
  5157  0203  018E               	clrf	14	;volatile
  5158                           
  5159                           ;pin_manager.c: 84: OPTION_REGbits.nWPUEN = 1;
  5160  0204  0021               	movlb	1	; select bank1
  5161  0205  1795               	bsf	21,7	;volatile
  5162                           
  5163                           ;pin_manager.c: 89: ODCONA = 0x00;
  5164  0206  0025               	movlb	5	; select bank5
  5165  0207  018C               	clrf	12	;volatile
  5166                           
  5167                           ;pin_manager.c: 90: ODCONB = 0x00;
  5168  0208  018D               	clrf	13	;volatile
  5169                           
  5170                           ;pin_manager.c: 91: ODCONC = 0x00;
  5171  0209  018E               	clrf	14	;volatile
  5172                           
  5173                           ;pin_manager.c: 96: SLRCONA = 0x37;
  5174  020A  3037               	movlw	55
  5175  020B  0026               	movlb	6	; select bank6
  5176  020C  008C               	movwf	12	;volatile
  5177                           
  5178                           ;pin_manager.c: 97: SLRCONB = 0xF0;
  5179  020D  30F0               	movlw	240
  5180  020E  008D               	movwf	13	;volatile
  5181                           
  5182                           ;pin_manager.c: 98: SLRCONC = 0xFF;
  5183  020F  30FF               	movlw	255
  5184  0210  008E               	movwf	14	;volatile
  5185                           
  5186                           ;pin_manager.c: 103: INLVLA = 0x3F;
  5187  0211  303F               	movlw	63
  5188  0212  0027               	movlb	7	; select bank7
  5189  0213  008C               	movwf	12	;volatile
  5190                           
  5191                           ;pin_manager.c: 104: INLVLB = 0xF0;
  5192  0214  30F0               	movlw	240
  5193  0215  008D               	movwf	13	;volatile
  5194                           
  5195                           ;pin_manager.c: 105: INLVLC = 0xFF;
  5196  0216  30FF               	movlw	255
  5197  0217  008E               	movwf	14	;volatile
  5198                           
  5199                           ;pin_manager.c: 114: RXPPS = 0x0D;
  5200  0218  300D               	movlw	13
  5201  0219  003C               	movlb	28	; select bank28
  5202  021A  00A4               	movwf	36	;volatile
  5203                           
  5204                           ;pin_manager.c: 115: SSPDATPPS = 0x0C;
  5205  021B  300C               	movlw	12
  5206  021C  00A1               	movwf	33	;volatile
  5207                           
  5208                           ;pin_manager.c: 116: RB6PPS = 0x10;
  5209  021D  3010               	movlw	16
  5210  021E  003D               	movlb	29	; select bank29
  5211  021F  009E               	movwf	30	;volatile
  5212                           
  5213                           ;pin_manager.c: 117: RB7PPS = 0x12;
  5214  0220  3012               	movlw	18
  5215  0221  009F               	movwf	31	;volatile
  5216                           
  5217                           ;pin_manager.c: 118: RB4PPS = 0x11;
  5218  0222  3011               	movlw	17
  5219  0223  009C               	movwf	28	;volatile
  5220                           
  5221                           ;pin_manager.c: 119: RA2PPS = 0x0E;
  5222  0224  300E               	movlw	14
  5223  0225  0092               	movwf	18	;volatile
  5224                           
  5225                           ;pin_manager.c: 120: SSPCLKPPS = 0x0E;
  5226  0226  300E               	movlw	14
  5227  0227  003C               	movlb	28	; select bank28
  5228  0228  00A0               	movwf	32	;volatile
  5229  0229  0008               	return
  5230  022A                     __end_of_PIN_MANAGER_Initialize:	
  5231                           
  5232                           	psect	text10
  5233  0549                     __ptext10:	
  5234 ;; *************** function _OSCILLATOR_Initialize *****************
  5235 ;; Defined at:
  5236 ;;		line 60 in file "mcc_generated_files/mcc.c"
  5237 ;; Parameters:    Size  Location     Type
  5238 ;;		None
  5239 ;; Auto vars:     Size  Location     Type
  5240 ;;		None
  5241 ;; Return value:  Size  Location     Type
  5242 ;;                  1    wreg      void 
  5243 ;; Registers used:
  5244 ;;		wreg, status,2
  5245 ;; Tracked objects:
  5246 ;;		On entry : 0/0
  5247 ;;		On exit  : 0/0
  5248 ;;		Unchanged: 0/0
  5249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5253 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5254 ;;Total ram usage:        0 bytes
  5255 ;; Hardware stack levels used:    1
  5256 ;; Hardware stack levels required when called:   12
  5257 ;; This function calls:
  5258 ;;		Nothing
  5259 ;; This function is called by:
  5260 ;;		_SYSTEM_Initialize
  5261 ;; This function uses a non-reentrant model
  5262 ;;
  5263                           
  5264                           
  5265                           ;psect for function _OSCILLATOR_Initialize
  5266  0549                     _OSCILLATOR_Initialize:	
  5267                           
  5268                           ;mcc.c: 63: OSCCON = 0x6A;
  5269                           
  5270                           ;incstack = 0
  5271                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5272  0549  306A               	movlw	106
  5273  054A  0021               	movlb	1	; select bank1
  5274  054B  0099               	movwf	25	;volatile
  5275                           
  5276                           ;mcc.c: 65: OSCTUNE = 0x00;
  5277  054C  0198               	clrf	24	;volatile
  5278                           
  5279                           ;mcc.c: 67: BORCON = 0x00;
  5280  054D  0022               	movlb	2	; select bank2
  5281  054E  0196               	clrf	22	;volatile
  5282  054F  0008               	return
  5283  0550                     __end_of_OSCILLATOR_Initialize:	
  5284                           
  5285                           	psect	text11
  5286  050A                     __ptext11:	
  5287 ;; *************** function _I2C_Initialize *****************
  5288 ;; Defined at:
  5289 ;;		line 167 in file "mcc_generated_files/i2c_master.c"
  5290 ;; Parameters:    Size  Location     Type
  5291 ;;		None
  5292 ;; Auto vars:     Size  Location     Type
  5293 ;;		None
  5294 ;; Return value:  Size  Location     Type
  5295 ;;                  1    wreg      void 
  5296 ;; Registers used:
  5297 ;;		wreg, status,2
  5298 ;; Tracked objects:
  5299 ;;		On entry : 0/0
  5300 ;;		On exit  : 0/0
  5301 ;;		Unchanged: 0/0
  5302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5306 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5307 ;;Total ram usage:        0 bytes
  5308 ;; Hardware stack levels used:    1
  5309 ;; Hardware stack levels required when called:   12
  5310 ;; This function calls:
  5311 ;;		Nothing
  5312 ;; This function is called by:
  5313 ;;		_SYSTEM_Initialize
  5314 ;; This function uses a non-reentrant model
  5315 ;;
  5316                           
  5317                           
  5318                           ;psect for function _I2C_Initialize
  5319  050A                     _I2C_Initialize:	
  5320                           
  5321                           ;i2c_master.c: 169: SSP1STAT = 0x80;
  5322                           
  5323                           ;incstack = 0
  5324                           ; Regs used in _I2C_Initialize: [wreg+status,2]
  5325  050A  3080               	movlw	128
  5326  050B  0024               	movlb	4	; select bank4
  5327  050C  0094               	movwf	20	;volatile
  5328                           
  5329                           ;i2c_master.c: 170: SSP1CON1 = 0x08;
  5330  050D  3008               	movlw	8
  5331  050E  0095               	movwf	21	;volatile
  5332                           
  5333                           ;i2c_master.c: 171: SSP1CON2 = 0x00;
  5334  050F  0196               	clrf	22	;volatile
  5335                           
  5336                           ;i2c_master.c: 172: SSP1ADD = 0x09;
  5337  0510  3009               	movlw	9
  5338  0511  0092               	movwf	18	;volatile
  5339                           
  5340                           ;i2c_master.c: 173: SSP1CON1bits.SSPEN = 0;
  5341  0512  1295               	bcf	21,5	;volatile
  5342  0513  0008               	return
  5343  0514                     __end_of_I2C_Initialize:	
  5344                           
  5345                           	psect	text12
  5346  02D0                     __ptext12:	
  5347 ;; *************** function _EUSART_Initialize *****************
  5348 ;; Defined at:
  5349 ;;		line 83 in file "mcc_generated_files/eusart.c"
  5350 ;; Parameters:    Size  Location     Type
  5351 ;;		None
  5352 ;; Auto vars:     Size  Location     Type
  5353 ;;		None
  5354 ;; Return value:  Size  Location     Type
  5355 ;;                  1    wreg      void 
  5356 ;; Registers used:
  5357 ;;		wreg, status,2, status,0, pclath, cstack
  5358 ;; Tracked objects:
  5359 ;;		On entry : 0/0
  5360 ;;		On exit  : 0/0
  5361 ;;		Unchanged: 0/0
  5362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5367 ;;Total ram usage:        0 bytes
  5368 ;; Hardware stack levels used:    1
  5369 ;; Hardware stack levels required when called:   13
  5370 ;; This function calls:
  5371 ;;		_EUSART_SetErrorHandler
  5372 ;;		_EUSART_SetFramingErrorHandler
  5373 ;;		_EUSART_SetOverrunErrorHandler
  5374 ;;		_EUSART_SetRxInterruptHandler
  5375 ;; This function is called by:
  5376 ;;		_SYSTEM_Initialize
  5377 ;; This function uses a non-reentrant model
  5378 ;;
  5379                           
  5380                           
  5381                           ;psect for function _EUSART_Initialize
  5382  02D0                     _EUSART_Initialize:	
  5383                           
  5384                           ;eusart.c: 86: PIE1bits.RCIE = 0;
  5385                           
  5386                           ;incstack = 0
  5387                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5388  02D0  0021               	movlb	1	; select bank1
  5389  02D1  1290               	bcf	16,5	;volatile
  5390                           
  5391                           ;eusart.c: 87: EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  5392  02D2  309B               	movlw	low _EUSART_Receive_ISR
  5393  02D3  00A4               	movwf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128)
  5394  02D4  3002               	movlw	high _EUSART_Receive_ISR
  5395  02D5  00A5               	movwf	(EUSART_SetRxInterruptHandler@interruptHandler^(0+128)+1)
  5396  02D6  3185  2527  3182   	fcall	_EUSART_SetRxInterruptHandler
  5397                           
  5398                           ;eusart.c: 91: BAUD1CON = 0x09;
  5399  02D9  3009               	movlw	9
  5400  02DA  0023               	movlb	3	; select bank3
  5401  02DB  009F               	movwf	31	;volatile
  5402                           
  5403                           ;eusart.c: 94: RC1STA = 0x90;
  5404  02DC  3090               	movlw	144
  5405  02DD  009D               	movwf	29	;volatile
  5406                           
  5407                           ;eusart.c: 97: TX1STA = 0x24;
  5408  02DE  3024               	movlw	36
  5409  02DF  009E               	movwf	30	;volatile
  5410                           
  5411                           ;eusart.c: 100: SPBRGL = 0x67;
  5412  02E0  3067               	movlw	103
  5413  02E1  009B               	movwf	27	;volatile
  5414                           
  5415                           ;eusart.c: 103: SPBRGH = 0x00;
  5416  02E2  019C               	clrf	28	;volatile
  5417                           
  5418                           ;eusart.c: 106: EUSART_SetFramingErrorHandler(EUSART_DefaultFramingErrorHandler);
  5419  02E3  30EC               	movlw	low _EUSART_DefaultFramingErrorHandler
  5420  02E4  0021               	movlb	1	; select bank1
  5421  02E5  00A4               	movwf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128)
  5422  02E6  3005               	movlw	high _EUSART_DefaultFramingErrorHandler
  5423  02E7  00A5               	movwf	(EUSART_SetFramingErrorHandler@interruptHandler^(0+128)+1)
  5424  02E8  3185  2530  3182   	fcall	_EUSART_SetFramingErrorHandler
  5425                           
  5426                           ;eusart.c: 107: EUSART_SetOverrunErrorHandler(EUSART_DefaultOverrunErrorHandler);
  5427  02EB  30BC               	movlw	low _EUSART_DefaultOverrunErrorHandler
  5428  02EC  0021               	movlb	1	; select bank1
  5429  02ED  00A4               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)
  5430  02EE  3005               	movlw	high _EUSART_DefaultOverrunErrorHandler
  5431  02EF  00A5               	movwf	(EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)+1)
  5432  02F0  3185  2569  3182   	fcall	_EUSART_SetOverrunErrorHandler
  5433                           
  5434                           ;eusart.c: 108: EUSART_SetErrorHandler(EUSART_DefaultErrorHandler);
  5435  02F3  30E4               	movlw	low _EUSART_DefaultErrorHandler
  5436  02F4  0021               	movlb	1	; select bank1
  5437  02F5  00A4               	movwf	EUSART_SetErrorHandler@interruptHandler^(0+128)
  5438  02F6  3005               	movlw	high _EUSART_DefaultErrorHandler
  5439  02F7  00A5               	movwf	(EUSART_SetErrorHandler@interruptHandler^(0+128)+1)
  5440  02F8  3185  256F         	fcall	_EUSART_SetErrorHandler
  5441                           
  5442                           ;eusart.c: 110: eusartRxLastError.status = 0;
  5443  02FA  0020               	movlb	0	; select bank0
  5444  02FB  01D3               	clrf	_eusartRxLastError	;volatile
  5445                           
  5446                           ;eusart.c: 113: eusartRxHead = 0;
  5447  02FC  01D6               	clrf	_eusartRxHead	;volatile
  5448                           
  5449                           ;eusart.c: 114: eusartRxTail = 0;
  5450  02FD  01D5               	clrf	_eusartRxTail	;volatile
  5451                           
  5452                           ;eusart.c: 115: eusartRxCount = 0;
  5453  02FE  01D4               	clrf	_eusartRxCount	;volatile
  5454                           
  5455                           ;eusart.c: 118: PIE1bits.RCIE = 1;
  5456  02FF  0021               	movlb	1	; select bank1
  5457  0300  1690               	bsf	16,5	;volatile
  5458  0301  0008               	return
  5459  0302                     __end_of_EUSART_Initialize:	
  5460                           
  5461                           	psect	text13
  5462  0527                     __ptext13:	
  5463 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  5464 ;; Defined at:
  5465 ;;		line 234 in file "mcc_generated_files/eusart.c"
  5466 ;; Parameters:    Size  Location     Type
  5467 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5468 ;;		 -> MyUART_ISR(1), EUSART_Receive_ISR(1), 
  5469 ;; Auto vars:     Size  Location     Type
  5470 ;;		None
  5471 ;; Return value:  Size  Location     Type
  5472 ;;                  1    wreg      void 
  5473 ;; Registers used:
  5474 ;;		wreg
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5480 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5483 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5484 ;;Total ram usage:        2 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; Hardware stack levels required when called:   12
  5487 ;; This function calls:
  5488 ;;		Nothing
  5489 ;; This function is called by:
  5490 ;;		_EUSART_Initialize
  5491 ;;		_main
  5492 ;; This function uses a non-reentrant model
  5493 ;;
  5494                           
  5495                           
  5496                           ;psect for function _EUSART_SetRxInterruptHandler
  5497  0527                     _EUSART_SetRxInterruptHandler:	
  5498                           
  5499                           ;eusart.c: 235: EUSART_RxDefaultInterruptHandler = interruptHandler;
  5500                           
  5501                           ;incstack = 0
  5502                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  5503  0527  0021               	movlb	1	; select bank1
  5504  0528  0825               	movf	(EUSART_SetRxInterruptHandler@interruptHandler+1)^(0+128),w
  5505  0529  0020               	movlb	0	; select bank0
  5506  052A  00E8               	movwf	_EUSART_RxDefaultInterruptHandler+1
  5507  052B  0021               	movlb	1	; select bank1
  5508  052C  0824               	movf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128),w
  5509  052D  0020               	movlb	0	; select bank0
  5510  052E  00E7               	movwf	_EUSART_RxDefaultInterruptHandler
  5511  052F  0008               	return
  5512  0530                     __end_of_EUSART_SetRxInterruptHandler:	
  5513                           
  5514                           	psect	text14
  5515  0569                     __ptext14:	
  5516 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  5517 ;; Defined at:
  5518 ;;		line 225 in file "mcc_generated_files/eusart.c"
  5519 ;; Parameters:    Size  Location     Type
  5520 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5521 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  5522 ;; Auto vars:     Size  Location     Type
  5523 ;;		None
  5524 ;; Return value:  Size  Location     Type
  5525 ;;                  1    wreg      void 
  5526 ;; Registers used:
  5527 ;;		wreg
  5528 ;; Tracked objects:
  5529 ;;		On entry : 0/0
  5530 ;;		On exit  : 0/0
  5531 ;;		Unchanged: 0/0
  5532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5533 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5536 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5537 ;;Total ram usage:        2 bytes
  5538 ;; Hardware stack levels used:    1
  5539 ;; Hardware stack levels required when called:   12
  5540 ;; This function calls:
  5541 ;;		Nothing
  5542 ;; This function is called by:
  5543 ;;		_EUSART_Initialize
  5544 ;; This function uses a non-reentrant model
  5545 ;;
  5546                           
  5547                           
  5548                           ;psect for function _EUSART_SetOverrunErrorHandler
  5549  0569                     _EUSART_SetOverrunErrorHandler:	
  5550                           
  5551                           ;eusart.c: 226: EUSART_OverrunErrorHandler = interruptHandler;
  5552                           
  5553                           ;incstack = 0
  5554                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  5555  0569  0021               	movlb	1	; select bank1
  5556  056A  0825               	movf	(EUSART_SetOverrunErrorHandler@interruptHandler+1)^(0+128),w
  5557  056B  00A3               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  5558  056C  0824               	movf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128),w
  5559  056D  00A2               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  5560  056E  0008               	return
  5561  056F                     __end_of_EUSART_SetOverrunErrorHandler:	
  5562                           
  5563                           	psect	text15
  5564  0530                     __ptext15:	
  5565 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  5566 ;; Defined at:
  5567 ;;		line 221 in file "mcc_generated_files/eusart.c"
  5568 ;; Parameters:    Size  Location     Type
  5569 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5570 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  5571 ;; Auto vars:     Size  Location     Type
  5572 ;;		None
  5573 ;; Return value:  Size  Location     Type
  5574 ;;                  1    wreg      void 
  5575 ;; Registers used:
  5576 ;;		wreg
  5577 ;; Tracked objects:
  5578 ;;		On entry : 0/0
  5579 ;;		On exit  : 0/0
  5580 ;;		Unchanged: 0/0
  5581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5582 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5585 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5586 ;;Total ram usage:        2 bytes
  5587 ;; Hardware stack levels used:    1
  5588 ;; Hardware stack levels required when called:   12
  5589 ;; This function calls:
  5590 ;;		Nothing
  5591 ;; This function is called by:
  5592 ;;		_EUSART_Initialize
  5593 ;; This function uses a non-reentrant model
  5594 ;;
  5595                           
  5596                           
  5597                           ;psect for function _EUSART_SetFramingErrorHandler
  5598  0530                     _EUSART_SetFramingErrorHandler:	
  5599                           
  5600                           ;eusart.c: 222: EUSART_FramingErrorHandler = interruptHandler;
  5601                           
  5602                           ;incstack = 0
  5603                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  5604  0530  0021               	movlb	1	; select bank1
  5605  0531  0825               	movf	(EUSART_SetFramingErrorHandler@interruptHandler+1)^(0+128),w
  5606  0532  0020               	movlb	0	; select bank0
  5607  0533  00E6               	movwf	_EUSART_FramingErrorHandler+1
  5608  0534  0021               	movlb	1	; select bank1
  5609  0535  0824               	movf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128),w
  5610  0536  0020               	movlb	0	; select bank0
  5611  0537  00E5               	movwf	_EUSART_FramingErrorHandler
  5612  0538  0008               	return
  5613  0539                     __end_of_EUSART_SetFramingErrorHandler:	
  5614                           
  5615                           	psect	text16
  5616  056F                     __ptext16:	
  5617 ;; *************** function _EUSART_SetErrorHandler *****************
  5618 ;; Defined at:
  5619 ;;		line 229 in file "mcc_generated_files/eusart.c"
  5620 ;; Parameters:    Size  Location     Type
  5621 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5622 ;;		 -> EUSART_DefaultErrorHandler(1), 
  5623 ;; Auto vars:     Size  Location     Type
  5624 ;;		None
  5625 ;; Return value:  Size  Location     Type
  5626 ;;                  1    wreg      void 
  5627 ;; Registers used:
  5628 ;;		wreg
  5629 ;; Tracked objects:
  5630 ;;		On entry : 0/0
  5631 ;;		On exit  : 0/0
  5632 ;;		Unchanged: 0/0
  5633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5634 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5637 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5638 ;;Total ram usage:        2 bytes
  5639 ;; Hardware stack levels used:    1
  5640 ;; Hardware stack levels required when called:   12
  5641 ;; This function calls:
  5642 ;;		Nothing
  5643 ;; This function is called by:
  5644 ;;		_EUSART_Initialize
  5645 ;; This function uses a non-reentrant model
  5646 ;;
  5647                           
  5648                           
  5649                           ;psect for function _EUSART_SetErrorHandler
  5650  056F                     _EUSART_SetErrorHandler:	
  5651                           
  5652                           ;eusart.c: 230: EUSART_ErrorHandler = interruptHandler;
  5653                           
  5654                           ;incstack = 0
  5655                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  5656  056F  0021               	movlb	1	; select bank1
  5657  0570  0825               	movf	(EUSART_SetErrorHandler@interruptHandler+1)^(0+128),w
  5658  0571  00A1               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  5659  0572  0824               	movf	EUSART_SetErrorHandler@interruptHandler^(0+128),w
  5660  0573  00A0               	movwf	_EUSART_ErrorHandler^(0+128)
  5661  0574  0008               	return
  5662  0575                     __end_of_EUSART_SetErrorHandler:	
  5663                           
  5664                           	psect	intentry
  5665  0004                     __pintentry:	
  5666 ;; *************** function _INTERRUPT_InterruptManager *****************
  5667 ;; Defined at:
  5668 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5669 ;; Parameters:    Size  Location     Type
  5670 ;;		None
  5671 ;; Auto vars:     Size  Location     Type
  5672 ;;		None
  5673 ;; Return value:  Size  Location     Type
  5674 ;;                  1    wreg      void 
  5675 ;; Registers used:
  5676 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5677 ;; Tracked objects:
  5678 ;;		On entry : 0/0
  5679 ;;		On exit  : 0/0
  5680 ;;		Unchanged: 0/0
  5681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5684 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5685 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5686 ;;Total ram usage:        1 bytes
  5687 ;; Hardware stack levels used:    1
  5688 ;; Hardware stack levels required when called:   11
  5689 ;; This function calls:
  5690 ;;		Absolute function
  5691 ;;		_EUSART_Receive_ISR
  5692 ;;		_MyUART_ISR
  5693 ;;		_TMR2_ISR
  5694 ;; This function is called by:
  5695 ;;		Interrupt level 1
  5696 ;; This function uses a non-reentrant model
  5697 ;;
  5698                           
  5699  0004                     _INTERRUPT_InterruptManager:	
  5700                           
  5701                           ;incstack = 0
  5702  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  5703                           
  5704                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5705  0005  3180               	pagesel	$
  5706  0006  0020               	movlb	0	; select bank0
  5707  0007  087F               	movf	127,w
  5708  0008  00E2               	movwf	??_INTERRUPT_InterruptManager
  5709                           
  5710                           ;interrupt_manager.c: 55: if(INTCONbits.PEIE == 1)
  5711  0009  1F0B               	btfss	11,6	;volatile
  5712  000A  281F               	goto	i1l123
  5713                           
  5714                           ;interrupt_manager.c: 56: {
  5715                           ;interrupt_manager.c: 57: if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
  5716  000B  0021               	movlb	1	; select bank1
  5717  000C  1E90               	btfss	16,5	;volatile
  5718  000D  2817               	goto	i1l118
  5719  000E  0020               	movlb	0	; select bank0
  5720  000F  1E90               	btfss	16,5	;volatile
  5721  0010  2817               	goto	i1l118
  5722                           
  5723                           ;interrupt_manager.c: 58: {
  5724                           ;interrupt_manager.c: 59: EUSART_RxDefaultInterruptHandler();
  5725  0011  0868               	movf	_EUSART_RxDefaultInterruptHandler+1,w
  5726  0012  008A               	movwf	10
  5727  0013  0867               	movf	_EUSART_RxDefaultInterruptHandler,w
  5728  0014  000A               	callw
  5729  0015  3180               	pagesel	$
  5730                           
  5731                           ;interrupt_manager.c: 60: }
  5732  0016  281F               	goto	i1l123
  5733  0017                     i1l118:	
  5734                           
  5735                           ;interrupt_manager.c: 61: else if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
  5736  0017  0021               	movlb	1	; select bank1
  5737  0018  1C90               	btfss	16,1	;volatile
  5738  0019  281F               	goto	i1l123
  5739  001A  0020               	movlb	0	; select bank0
  5740  001B  1C90               	btfss	16,1	;volatile
  5741  001C  281F               	goto	i1l123
  5742                           
  5743                           ;interrupt_manager.c: 62: {
  5744                           ;interrupt_manager.c: 63: TMR2_ISR();
  5745  001D  3184  24CF         	fcall	_TMR2_ISR
  5746  001F                     i1l123:	
  5747                           ;interrupt_manager.c: 70: else
  5748                           ;interrupt_manager.c: 71: {
  5749                           
  5750                           ;interrupt_manager.c: 68: }
  5751                           ;interrupt_manager.c: 69: }
  5752                           
  5753                           ;interrupt_manager.c: 65: else
  5754                           ;interrupt_manager.c: 66: {
  5755                           
  5756                           ;interrupt_manager.c: 64: }
  5757                           
  5758  001F  0020               	movlb	0	; select bank0
  5759  0020  0862               	movf	??_INTERRUPT_InterruptManager,w
  5760  0021  00FF               	movwf	127
  5761  0022  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  5762  0023  0009               	retfie
  5763  0024                     __end_of_INTERRUPT_InterruptManager:	
  5764                           
  5765                           	psect	text18
  5766  04CF                     __ptext18:	
  5767 ;; *************** function _TMR2_ISR *****************
  5768 ;; Defined at:
  5769 ;;		line 165 in file "mcc_generated_files/tmr2.c"
  5770 ;; Parameters:    Size  Location     Type
  5771 ;;		None
  5772 ;; Auto vars:     Size  Location     Type
  5773 ;;		None
  5774 ;; Return value:  Size  Location     Type
  5775 ;;                  1    wreg      void 
  5776 ;; Registers used:
  5777 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5778 ;; Tracked objects:
  5779 ;;		On entry : 0/0
  5780 ;;		On exit  : 0/0
  5781 ;;		Unchanged: 0/0
  5782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5787 ;;Total ram usage:        0 bytes
  5788 ;; Hardware stack levels used:    1
  5789 ;; Hardware stack levels required when called:   10
  5790 ;; This function calls:
  5791 ;;		Absolute function
  5792 ;;		_MyTimer2ISR
  5793 ;;		_TMR2_DefaultInterruptHandler
  5794 ;; This function is called by:
  5795 ;;		_INTERRUPT_InterruptManager
  5796 ;; This function uses a non-reentrant model
  5797 ;;
  5798                           
  5799                           
  5800                           ;psect for function _TMR2_ISR
  5801  04CF                     _TMR2_ISR:	
  5802                           
  5803                           ;tmr2.c: 169: PIR1bits.TMR2IF = 0;
  5804                           
  5805                           ;incstack = 0
  5806                           ; Regs used in _TMR2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5807  04CF  0020               	movlb	0	; select bank0
  5808  04D0  1090               	bcf	16,1	;volatile
  5809                           
  5810                           ;tmr2.c: 171: if(TMR2_InterruptHandler)
  5811  04D1  0863               	movf	_TMR2_InterruptHandler,w
  5812  04D2  0464               	iorwf	_TMR2_InterruptHandler+1,w
  5813  04D3  1903               	btfsc	3,2
  5814  04D4  0008               	return
  5815                           
  5816                           ;tmr2.c: 172: {
  5817                           ;tmr2.c: 173: TMR2_InterruptHandler();
  5818  04D5  0864               	movf	_TMR2_InterruptHandler+1,w
  5819  04D6  008A               	movwf	10
  5820  04D7  0863               	movf	_TMR2_InterruptHandler,w
  5821  04D8  000A               	callw
  5822  04D9  3184               	pagesel	$
  5823  04DA  0008               	return
  5824  04DB                     __end_of_TMR2_ISR:	
  5825                           
  5826                           	psect	text19
  5827  00F5                     __ptext19:	
  5828 ;; *************** function _MyTimer2ISR *****************
  5829 ;; Defined at:
  5830 ;;		line 58 in file "main.c"
  5831 ;; Parameters:    Size  Location     Type
  5832 ;;		None
  5833 ;; Auto vars:     Size  Location     Type
  5834 ;;		None
  5835 ;; Return value:  Size  Location     Type
  5836 ;;                  1    wreg      void 
  5837 ;; Registers used:
  5838 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5839 ;; Tracked objects:
  5840 ;;		On entry : 0/0
  5841 ;;		On exit  : 0/0
  5842 ;;		Unchanged: 0/0
  5843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5846 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5847 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5848 ;;Total ram usage:        2 bytes
  5849 ;; Hardware stack levels used:    1
  5850 ;; Hardware stack levels required when called:    9
  5851 ;; This function calls:
  5852 ;;		_EUSART_Write
  5853 ;;		_I2C_Write1ByteRegister
  5854 ;;		_PWM3_LoadDutyValue
  5855 ;; This function is called by:
  5856 ;;		_main
  5857 ;;		_TMR2_ISR
  5858 ;; This function uses a non-reentrant model
  5859 ;;
  5860                           
  5861                           
  5862                           ;psect for function _MyTimer2ISR
  5863  00F5                     _MyTimer2ISR:	
  5864                           
  5865                           ;main.c: 64: PWM3_LoadDutyValue((uint8_t)(Angle/2)+20);
  5866                           
  5867                           ;incstack = 0
  5868                           ; Regs used in _MyTimer2ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5869  00F5  0020               	movlb	0	; select bank0
  5870  00F6  086A               	movf	_Angle+1,w
  5871  00F7  00E1               	movwf	??_MyTimer2ISR+1
  5872  00F8  0869               	movf	_Angle,w
  5873  00F9  00E0               	movwf	??_MyTimer2ISR
  5874  00FA  36E1               	lsrf	??_MyTimer2ISR+1,f
  5875  00FB  0CE0               	rrf	??_MyTimer2ISR,f
  5876  00FC  0860               	movf	??_MyTimer2ISR,w
  5877  00FD  3E14               	addlw	20
  5878  00FE  00F0               	movwf	PWM3_LoadDutyValue@dutyValue
  5879  00FF  3000               	movlw	0
  5880  0100  1803               	skipnc
  5881  0101  3001               	movlw	1
  5882  0102  00F1               	movwf	PWM3_LoadDutyValue@dutyValue+1
  5883  0103  3184  2445  3180   	fcall	_PWM3_LoadDutyValue
  5884                           
  5885                           ;main.c: 65: if(PORTAbits.RA4) {
  5886  0106  0020               	movlb	0	; select bank0
  5887  0107  1E0C               	btfss	12,4	;volatile
  5888  0108  2939               	goto	i1l2683
  5889                           
  5890                           ;main.c: 66: EUSART_Write('B');
  5891  0109  3042               	movlw	66
  5892  010A  3185  2541  3180   	fcall	_EUSART_Write
  5893                           
  5894                           ;main.c: 67: EUSART_Write('1');
  5895  010D  3031               	movlw	49
  5896  010E  3185  2541  3180   	fcall	_EUSART_Write
  5897                           
  5898                           ;main.c: 68: EUSART_Write('s');
  5899  0111  3073               	movlw	115
  5900  0112  3185  2541  3180   	fcall	_EUSART_Write
  5901                           
  5902                           ;main.c: 69: if(Validation) {
  5903  0115  0020               	movlb	0	; select bank0
  5904  0116  086B               	movf	_Validation,w
  5905  0117  1903               	btfsc	3,2
  5906  0118  2930               	goto	i1l2681
  5907                           
  5908                           ;main.c: 71: if(Vitesse > 100) {Vitesse = 100;}
  5909  0119  3000               	movlw	0
  5910  011A  024E               	subwf	_Vitesse+1,w
  5911  011B  3065               	movlw	101
  5912  011C  1903               	skipnz
  5913  011D  024D               	subwf	_Vitesse,w
  5914  011E  1C03               	skipc
  5915  011F  2924               	goto	i1l2677
  5916  0120  3064               	movlw	100
  5917  0121  00CD               	movwf	_Vitesse
  5918  0122  3000               	movlw	0
  5919  0123  00CE               	movwf	_Vitesse+1
  5920  0124                     i1l2677:	
  5921                           
  5922                           ;main.c: 72: I2C_Write1ByteRegister(0x40, Vitesse, 0);
  5923  0124  084D               	movf	_Vitesse,w
  5924  0125  00E0               	movwf	??_MyTimer2ISR
  5925  0126  0860               	movf	??_MyTimer2ISR,w
  5926  0127  00DC               	movwf	I2C_Write1ByteRegister@reg
  5927  0128  01DD               	clrf	I2C_Write1ByteRegister@data
  5928  0129  3040               	movlw	64
  5929  012A  3183  2302         	fcall	_I2C_Write1ByteRegister
  5930                           
  5931                           ;main.c: 74: Validation--;
  5932  012C  3001               	movlw	1
  5933  012D  0020               	movlb	0	; select bank0
  5934  012E  02EB               	subwf	_Validation,f
  5935                           
  5936                           ;main.c: 75: } else {
  5937  012F  0008               	return
  5938  0130                     i1l2681:	
  5939                           
  5940                           ;main.c: 77: I2C_Write1ByteRegister(0x40, 101, 0);
  5941  0130  3065               	movlw	101
  5942  0131  00E0               	movwf	??_MyTimer2ISR
  5943  0132  0860               	movf	??_MyTimer2ISR,w
  5944  0133  00DC               	movwf	I2C_Write1ByteRegister@reg
  5945  0134  01DD               	clrf	I2C_Write1ByteRegister@data
  5946  0135  3040               	movlw	64
  5947  0136  3183  2302         	fcall	_I2C_Write1ByteRegister
  5948                           
  5949                           ;main.c: 79: }
  5950                           ;main.c: 80: } else {
  5951  0138  0008               	return
  5952  0139                     i1l2683:	
  5953                           
  5954                           ;main.c: 81: EUSART_Write('B');
  5955  0139  3042               	movlw	66
  5956  013A  3185  2541  3180   	fcall	_EUSART_Write
  5957                           
  5958                           ;main.c: 82: EUSART_Write('0');
  5959  013D  3030               	movlw	48
  5960  013E  3185  2541  3180   	fcall	_EUSART_Write
  5961                           
  5962                           ;main.c: 83: EUSART_Write('r');
  5963  0141  3072               	movlw	114
  5964  0142  3185  2541  3180   	fcall	_EUSART_Write
  5965                           
  5966                           ;main.c: 85: I2C_Write1ByteRegister(0x40, 101, 0);
  5967  0145  3065               	movlw	101
  5968  0146  0020               	movlb	0	; select bank0
  5969  0147  00E0               	movwf	??_MyTimer2ISR
  5970  0148  0860               	movf	??_MyTimer2ISR,w
  5971  0149  00DC               	movwf	I2C_Write1ByteRegister@reg
  5972  014A  01DD               	clrf	I2C_Write1ByteRegister@data
  5973  014B  3040               	movlw	64
  5974  014C  3183  2302         	fcall	_I2C_Write1ByteRegister
  5975  014E  0008               	return
  5976  014F                     __end_of_MyTimer2ISR:	
  5977                           
  5978                           	psect	text20
  5979  05EB                     __ptext20:	
  5980 ;; *************** function _TMR2_DefaultInterruptHandler *****************
  5981 ;; Defined at:
  5982 ;;		line 182 in file "mcc_generated_files/tmr2.c"
  5983 ;; Parameters:    Size  Location     Type
  5984 ;;		None
  5985 ;; Auto vars:     Size  Location     Type
  5986 ;;		None
  5987 ;; Return value:  Size  Location     Type
  5988 ;;                  1    wreg      void 
  5989 ;; Registers used:
  5990 ;;		None
  5991 ;; Tracked objects:
  5992 ;;		On entry : 0/0
  5993 ;;		On exit  : 0/0
  5994 ;;		Unchanged: 0/0
  5995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6000 ;;Total ram usage:        0 bytes
  6001 ;; Hardware stack levels used:    1
  6002 ;; This function calls:
  6003 ;;		Nothing
  6004 ;; This function is called by:
  6005 ;;		_TMR2_Initialize
  6006 ;;		_TMR2_ISR
  6007 ;; This function uses a non-reentrant model
  6008 ;;
  6009                           
  6010                           
  6011                           ;psect for function _TMR2_DefaultInterruptHandler
  6012  05EB                     _TMR2_DefaultInterruptHandler:	
  6013                           
  6014                           ;incstack = 0
  6015                           ; Regs used in _TMR2_DefaultInterruptHandler: []
  6016  05EB  0008               	return
  6017  05EC                     __end_of_TMR2_DefaultInterruptHandler:	
  6018                           
  6019                           	psect	text21
  6020  0445                     __ptext21:	
  6021 ;; *************** function _PWM3_LoadDutyValue *****************
  6022 ;; Defined at:
  6023 ;;		line 74 in file "mcc_generated_files/pwm3.c"
  6024 ;; Parameters:    Size  Location     Type
  6025 ;;  dutyValue       2    0[COMMON] unsigned int 
  6026 ;; Auto vars:     Size  Location     Type
  6027 ;;		None
  6028 ;; Return value:  Size  Location     Type
  6029 ;;                  1    wreg      void 
  6030 ;; Registers used:
  6031 ;;		wreg, status,2, status,0
  6032 ;; Tracked objects:
  6033 ;;		On entry : 0/0
  6034 ;;		On exit  : 0/0
  6035 ;;		Unchanged: 0/0
  6036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6037 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6039 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6040 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6041 ;;Total ram usage:        4 bytes
  6042 ;; Hardware stack levels used:    1
  6043 ;; This function calls:
  6044 ;;		Nothing
  6045 ;; This function is called by:
  6046 ;;		_MyTimer2ISR
  6047 ;; This function uses a non-reentrant model
  6048 ;;
  6049                           
  6050                           
  6051                           ;psect for function _PWM3_LoadDutyValue
  6052  0445                     _PWM3_LoadDutyValue:	
  6053                           
  6054                           ;pwm3.c: 77: PWM3DCH = (dutyValue & 0x03FC)>>2;
  6055                           
  6056                           ;incstack = 0
  6057                           ; Regs used in _PWM3_LoadDutyValue: [wreg+status,2+status,0]
  6058  0445  0871               	movf	PWM3_LoadDutyValue@dutyValue+1,w
  6059  0446  00F3               	movwf	??_PWM3_LoadDutyValue+1
  6060  0447  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
  6061  0448  00F2               	movwf	??_PWM3_LoadDutyValue
  6062  0449  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
  6063  044A  0CF2               	rrf	??_PWM3_LoadDutyValue,f
  6064  044B  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
  6065  044C  0CF2               	rrf	??_PWM3_LoadDutyValue,f
  6066  044D  0872               	movf	??_PWM3_LoadDutyValue,w
  6067  044E  002C               	movlb	12	; select bank12
  6068  044F  0098               	movwf	24	;volatile
  6069                           
  6070                           ;pwm3.c: 80: PWM3DCL = (dutyValue & 0x0003)<<6;
  6071  0450  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
  6072  0451  3903               	andlw	3
  6073  0452  00F2               	movwf	??_PWM3_LoadDutyValue
  6074  0453  3005               	movlw	5
  6075  0454                     u83_25:	
  6076  0454  35F2               	lslf	??_PWM3_LoadDutyValue,f
  6077  0455  3EFF               	addlw	-1
  6078  0456  1D03               	skipz
  6079  0457  2C54               	goto	u83_25
  6080  0458  3572               	lslf	??_PWM3_LoadDutyValue,w
  6081  0459  0097               	movwf	23	;volatile
  6082  045A  0008               	return
  6083  045B                     __end_of_PWM3_LoadDutyValue:	
  6084                           
  6085                           	psect	text22
  6086  0302                     __ptext22:	
  6087 ;; *************** function _I2C_Write1ByteRegister *****************
  6088 ;; Defined at:
  6089 ;;		line 91 in file "mcc_generated_files/examples/i2c_master_example.c"
  6090 ;; Parameters:    Size  Location     Type
  6091 ;;  address         1    wreg     unsigned char 
  6092 ;;  reg             1    5[BANK0 ] unsigned char 
  6093 ;;  data            1    6[BANK0 ] unsigned char 
  6094 ;; Auto vars:     Size  Location     Type
  6095 ;;  address         1    8[BANK0 ] unsigned char 
  6096 ;; Return value:  Size  Location     Type
  6097 ;;                  1    wreg      void 
  6098 ;; Registers used:
  6099 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6100 ;; Tracked objects:
  6101 ;;		On entry : 0/0
  6102 ;;		On exit  : 0/0
  6103 ;;		Unchanged: 0/0
  6104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6105 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6106 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6107 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6108 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6109 ;;Total ram usage:        4 bytes
  6110 ;; Hardware stack levels used:    1
  6111 ;; Hardware stack levels required when called:    8
  6112 ;; This function calls:
  6113 ;;		_I2C_Close
  6114 ;;		_I2C_MasterWrite
  6115 ;;		_I2C_Open
  6116 ;;		_I2C_SetAddressNackCallback
  6117 ;;		_I2C_SetBuffer
  6118 ;;		_I2C_SetDataCompleteCallback
  6119 ;; This function is called by:
  6120 ;;		_MyTimer2ISR
  6121 ;; This function uses a non-reentrant model
  6122 ;;
  6123                           
  6124                           
  6125                           ;psect for function _I2C_Write1ByteRegister
  6126  0302                     _I2C_Write1ByteRegister:	
  6127                           
  6128                           ;incstack = 0
  6129                           ; Regs used in _I2C_Write1ByteRegister: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6130                           ;I2C_Write1ByteRegister@address stored from wreg
  6131  0302  0020               	movlb	0	; select bank0
  6132  0303  00DF               	movwf	I2C_Write1ByteRegister@address
  6133  0304                     i1l2513:	
  6134                           ;i2c_master_example.c: 93: while(!I2C_Open(address));
  6135                           
  6136  0304  0020               	movlb	0	; select bank0
  6137  0305  085F               	movf	I2C_Write1ByteRegister@address,w
  6138  0306  3182  2264  3183   	fcall	_I2C_Open
  6139  0309  3A00               	xorlw	0
  6140  030A  1903               	skipnz
  6141  030B  2B04               	goto	i1l2513
  6142                           
  6143                           ;i2c_master_example.c: 94: I2C_SetDataCompleteCallback(wr1RegCompleteHandler,&data);
  6144  030C  3081               	movlw	low _wr1RegCompleteHandler
  6145  030D  00F5               	movwf	I2C_SetDataCompleteCallback@cb
  6146  030E  3004               	movlw	high _wr1RegCompleteHandler
  6147  030F  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
  6148  0310  305D               	movlw	(low (I2C_Write1ByteRegister@data| 0))& (0+255)
  6149  0311  0020               	movlb	0	; select bank0
  6150  0312  00DE               	movwf	??_I2C_Write1ByteRegister
  6151  0313  085E               	movf	??_I2C_Write1ByteRegister,w
  6152  0314  00F7               	movwf	I2C_SetDataCompleteCallback@ptr
  6153  0315  3184  24F3  3183   	fcall	_I2C_SetDataCompleteCallback
  6154                           
  6155                           ;i2c_master_example.c: 95: I2C_SetBuffer(&reg,1);
  6156  0318  3001               	movlw	1
  6157  0319  00F0               	movwf	I2C_SetBuffer@bufferSize
  6158  031A  3000               	movlw	0
  6159  031B  00F1               	movwf	I2C_SetBuffer@bufferSize+1
  6160  031C  305C               	movlw	(low (I2C_Write1ByteRegister@reg| 0))& (0+255)
  6161  031D  3184  24C1  3183   	fcall	_I2C_SetBuffer
  6162                           
  6163                           ;i2c_master_example.c: 96: I2C_SetAddressNackCallback((0),(0));
  6164  0320  3000               	movlw	0
  6165  0321  00F5               	movwf	I2C_SetAddressNackCallback@cb
  6166  0322  00F6               	movwf	I2C_SetAddressNackCallback@cb+1
  6167  0323  01F7               	clrf	I2C_SetAddressNackCallback@ptr
  6168  0324  3184  24DB  3183   	fcall	_I2C_SetAddressNackCallback
  6169                           
  6170                           ;i2c_master_example.c: 97: I2C_MasterWrite();
  6171  0327  3185  2590  3183   	fcall	_I2C_MasterWrite
  6172  032A                     i1l2523:	
  6173                           ;i2c_master_example.c: 98: while(I2C_BUSY == I2C_Close());
  6174                           
  6175  032A  3183  23FE  3183   	fcall	_I2C_Close
  6176  032D  3A01               	xorlw	1
  6177  032E  1D03               	btfss	3,2
  6178  032F  0008               	return
  6179  0330  2B2A               	goto	i1l2523
  6180  0331                     __end_of_I2C_Write1ByteRegister:	
  6181                           
  6182                           	psect	text23
  6183  04DB                     __ptext23:	
  6184 ;; *************** function _I2C_SetAddressNackCallback *****************
  6185 ;; Defined at:
  6186 ;;		line 283 in file "mcc_generated_files/i2c_master.c"
  6187 ;; Parameters:    Size  Location     Type
  6188 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
  6189 ;;		 -> Absolute function(1), 
  6190 ;;  ptr             1    7[COMMON] PTR void 
  6191 ;;		 -> NULL(0), 
  6192 ;; Auto vars:     Size  Location     Type
  6193 ;;		None
  6194 ;; Return value:  Size  Location     Type
  6195 ;;                  1    wreg      void 
  6196 ;; Registers used:
  6197 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6198 ;; Tracked objects:
  6199 ;;		On entry : 0/0
  6200 ;;		On exit  : 0/0
  6201 ;;		Unchanged: 0/0
  6202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6203 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6205 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6206 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6207 ;;Total ram usage:        4 bytes
  6208 ;; Hardware stack levels used:    1
  6209 ;; Hardware stack levels required when called:    1
  6210 ;; This function calls:
  6211 ;;		_I2C_SetCallback
  6212 ;; This function is called by:
  6213 ;;		_I2C_Write1ByteRegister
  6214 ;;		_I2C_Read1ByteRegister
  6215 ;;		_I2C_Read2ByteRegister
  6216 ;;		_I2C_Write2ByteRegister
  6217 ;;		_I2C_WriteNBytes
  6218 ;;		_I2C_ReadDataBlock
  6219 ;; This function uses a non-reentrant model
  6220 ;;
  6221                           
  6222                           
  6223                           ;psect for function _I2C_SetAddressNackCallback
  6224  04DB                     _I2C_SetAddressNackCallback:	
  6225                           
  6226                           ;i2c_master.c: 285: I2C_SetCallback(I2C_ADDR_NACK, cb, ptr);
  6227                           
  6228                           ;incstack = 0
  6229                           ; Regs used in _I2C_SetAddressNackCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6230  04DB  0876               	movf	I2C_SetAddressNackCallback@cb+1,w
  6231  04DC  00F1               	movwf	I2C_SetCallback@cb+1
  6232  04DD  0875               	movf	I2C_SetAddressNackCallback@cb,w
  6233  04DE  00F0               	movwf	I2C_SetCallback@cb
  6234  04DF  0877               	movf	I2C_SetAddressNackCallback@ptr,w
  6235  04E0  00F8               	movwf	??_I2C_SetAddressNackCallback
  6236  04E1  0878               	movf	??_I2C_SetAddressNackCallback,w
  6237  04E2  00F2               	movwf	I2C_SetCallback@ptr
  6238  04E3  3002               	movlw	2
  6239  04E4  3183  237D         	fcall	_I2C_SetCallback
  6240  04E6  0008               	return
  6241  04E7                     __end_of_I2C_SetAddressNackCallback:	
  6242                           
  6243                           	psect	text24
  6244  0264                     __ptext24:	
  6245 ;; *************** function _I2C_Open *****************
  6246 ;; Defined at:
  6247 ;;		line 176 in file "mcc_generated_files/i2c_master.c"
  6248 ;; Parameters:    Size  Location     Type
  6249 ;;  address         1    wreg     unsigned char 
  6250 ;; Auto vars:     Size  Location     Type
  6251 ;;  address         1    1[COMMON] unsigned char 
  6252 ;;  returnValue     1    2[COMMON] enum E92
  6253 ;; Return value:  Size  Location     Type
  6254 ;;                  1    wreg      enum E92
  6255 ;; Registers used:
  6256 ;;		wreg, status,2, status,0, pclath, cstack
  6257 ;; Tracked objects:
  6258 ;;		On entry : 0/0
  6259 ;;		On exit  : 0/0
  6260 ;;		Unchanged: 0/0
  6261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6263 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6264 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6265 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6266 ;;Total ram usage:        3 bytes
  6267 ;; Hardware stack levels used:    1
  6268 ;; Hardware stack levels required when called:    1
  6269 ;; This function calls:
  6270 ;;		_I2C_MasterClearIrq
  6271 ;;		_I2C_MasterOpen
  6272 ;; This function is called by:
  6273 ;;		_I2C_Write1ByteRegister
  6274 ;;		_I2C_Read1ByteRegister
  6275 ;;		_I2C_Read2ByteRegister
  6276 ;;		_I2C_Write2ByteRegister
  6277 ;;		_I2C_WriteNBytes
  6278 ;;		_I2C_ReadNBytes
  6279 ;;		_I2C_ReadDataBlock
  6280 ;; This function uses a non-reentrant model
  6281 ;;
  6282                           
  6283                           
  6284                           ;psect for function _I2C_Open
  6285  0264                     _I2C_Open:	
  6286                           
  6287                           ;incstack = 0
  6288                           ; Regs used in _I2C_Open: [wreg+status,2+status,0+pclath+cstack]
  6289                           ;I2C_Open@address stored from wreg
  6290  0264  00F1               	movwf	I2C_Open@address
  6291                           
  6292                           ;i2c_master.c: 178: i2c_error_t returnValue = I2C_BUSY;
  6293  0265  01F2               	clrf	I2C_Open@returnValue
  6294  0266  0AF2               	incf	I2C_Open@returnValue,f
  6295                           
  6296                           ;i2c_master.c: 180: if(!I2C_Status.inUse)
  6297  0267  0020               	movlb	0	; select bank0
  6298  0268  193C               	btfsc	_I2C_Status+28,2
  6299  0269  2A99               	goto	i1l321
  6300                           
  6301                           ;i2c_master.c: 181: {
  6302                           ;i2c_master.c: 182: I2C_Status.address = address;
  6303  026A  0871               	movf	I2C_Open@address,w
  6304  026B  00F0               	movwf	??_I2C_Open
  6305  026C  0870               	movf	??_I2C_Open,w
  6306  026D  00B6               	movwf	_I2C_Status+22
  6307                           
  6308                           ;i2c_master.c: 183: I2C_Status.busy = 0;
  6309  026E  10BC               	bcf	_I2C_Status+28,1
  6310                           
  6311                           ;i2c_master.c: 184: I2C_Status.inUse = 1;
  6312  026F  153C               	bsf	_I2C_Status+28,2
  6313                           
  6314                           ;i2c_master.c: 185: I2C_Status.addressNackCheck = 0;
  6315  0270  103C               	bcf	_I2C_Status+28,0
  6316                           
  6317                           ;i2c_master.c: 186: I2C_Status.state = I2C_RESET;
  6318  0271  300E               	movlw	14
  6319  0272  00F0               	movwf	??_I2C_Open
  6320  0273  0870               	movf	??_I2C_Open,w
  6321  0274  00BA               	movwf	_I2C_Status+26
  6322                           
  6323                           ;i2c_master.c: 187: I2C_Status.time_out_value = 500;
  6324  0275  30F4               	movlw	244
  6325  0276  00B4               	movwf	_I2C_Status+20
  6326  0277  3001               	movlw	1
  6327  0278  00B5               	movwf	_I2C_Status+21
  6328                           
  6329                           ;i2c_master.c: 188: I2C_Status.bufferFree = 1;
  6330  0279  15BC               	bsf	_I2C_Status+28,3
  6331                           
  6332                           ;i2c_master.c: 191: I2C_Status.callbackTable[I2C_DATA_COMPLETE]=I2C_CallbackReturnStop;
  6333  027A  30E9               	movlw	low _I2C_CallbackReturnStop
  6334  027B  00A0               	movwf	_I2C_Status
  6335  027C  3005               	movlw	high _I2C_CallbackReturnStop
  6336  027D  00A1               	movwf	_I2C_Status+1
  6337                           
  6338                           ;i2c_master.c: 192: I2C_Status.callbackPayload[I2C_DATA_COMPLETE] = (0);
  6339  027E  01AC               	clrf	low ((_I2C_Status| 0+12))
  6340                           
  6341                           ;i2c_master.c: 193: I2C_Status.callbackTable[I2C_WRITE_COLLISION]=I2C_CallbackReturnStop
      +                          ;
  6342  027F  30E9               	movlw	low _I2C_CallbackReturnStop
  6343  0280  00A2               	movwf	low ((_I2C_Status| 0+2))
  6344  0281  3005               	movlw	high _I2C_CallbackReturnStop
  6345  0282  00A3               	movwf	(low ((_I2C_Status| 0+2))+1)
  6346                           
  6347                           ;i2c_master.c: 194: I2C_Status.callbackPayload[I2C_WRITE_COLLISION] = (0);
  6348  0283  01AD               	clrf	low ((_I2C_Status| 0+13))
  6349                           
  6350                           ;i2c_master.c: 195: I2C_Status.callbackTable[I2C_ADDR_NACK]=I2C_CallbackReturnStop;
  6351  0284  30E9               	movlw	low _I2C_CallbackReturnStop
  6352  0285  00A4               	movwf	low ((_I2C_Status| 0+4))
  6353  0286  3005               	movlw	high _I2C_CallbackReturnStop
  6354  0287  00A5               	movwf	(low ((_I2C_Status| 0+4))+1)
  6355                           
  6356                           ;i2c_master.c: 196: I2C_Status.callbackPayload[I2C_ADDR_NACK] = (0);
  6357  0288  01AE               	clrf	low ((_I2C_Status| 0+14))
  6358                           
  6359                           ;i2c_master.c: 197: I2C_Status.callbackTable[I2C_DATA_NACK]=I2C_CallbackReturnStop;
  6360  0289  30E9               	movlw	low _I2C_CallbackReturnStop
  6361  028A  00A6               	movwf	low ((_I2C_Status| 0+6))
  6362  028B  3005               	movlw	high _I2C_CallbackReturnStop
  6363  028C  00A7               	movwf	(low ((_I2C_Status| 0+6))+1)
  6364                           
  6365                           ;i2c_master.c: 198: I2C_Status.callbackPayload[I2C_DATA_NACK] = (0);
  6366  028D  01AF               	clrf	low ((_I2C_Status| 0+15))
  6367                           
  6368                           ;i2c_master.c: 199: I2C_Status.callbackTable[I2C_TIMEOUT]=I2C_CallbackReturnReset;
  6369  028E  30E7               	movlw	low _I2C_CallbackReturnReset
  6370  028F  00A8               	movwf	low ((_I2C_Status| 0+8))
  6371  0290  3005               	movlw	high _I2C_CallbackReturnReset
  6372  0291  00A9               	movwf	(low ((_I2C_Status| 0+8))+1)
  6373                           
  6374                           ;i2c_master.c: 200: I2C_Status.callbackPayload[I2C_TIMEOUT] = (0);
  6375  0292  01B0               	clrf	low ((_I2C_Status| 0+16))
  6376                           
  6377                           ;i2c_master.c: 202: I2C_MasterClearIrq();
  6378  0293  3185  25E1  3182   	fcall	_I2C_MasterClearIrq
  6379                           
  6380                           ;i2c_master.c: 203: I2C_MasterOpen();
  6381  0296  3184  24E7         	fcall	_I2C_MasterOpen
  6382                           
  6383                           ;i2c_master.c: 204: returnValue = I2C_NOERR;
  6384  0298  01F2               	clrf	I2C_Open@returnValue
  6385  0299                     i1l321:	
  6386                           
  6387                           ;i2c_master.c: 205: }
  6388                           ;i2c_master.c: 206: return returnValue;
  6389  0299  0872               	movf	I2C_Open@returnValue,w
  6390  029A  0008               	return
  6391  029B                     __end_of_I2C_Open:	
  6392                           
  6393                           	psect	text25
  6394  04E7                     __ptext25:	
  6395 ;; *************** function _I2C_MasterOpen *****************
  6396 ;; Defined at:
  6397 ;;		line 543 in file "mcc_generated_files/i2c_master.c"
  6398 ;; Parameters:    Size  Location     Type
  6399 ;;		None
  6400 ;; Auto vars:     Size  Location     Type
  6401 ;;		None
  6402 ;; Return value:  Size  Location     Type
  6403 ;;                  1    wreg      unsigned char 
  6404 ;; Registers used:
  6405 ;;		wreg, status,2
  6406 ;; Tracked objects:
  6407 ;;		On entry : 0/0
  6408 ;;		On exit  : 0/0
  6409 ;;		Unchanged: 0/0
  6410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6415 ;;Total ram usage:        0 bytes
  6416 ;; Hardware stack levels used:    1
  6417 ;; This function calls:
  6418 ;;		Nothing
  6419 ;; This function is called by:
  6420 ;;		_I2C_Open
  6421 ;; This function uses a non-reentrant model
  6422 ;;
  6423                           
  6424                           
  6425                           ;psect for function _I2C_MasterOpen
  6426  04E7                     _I2C_MasterOpen:	
  6427                           
  6428                           ;i2c_master.c: 545: if(!SSP1CON1bits.SSPEN)
  6429                           
  6430                           ;incstack = 0
  6431                           ; Regs used in _I2C_MasterOpen: [wreg+status,2]
  6432  04E7  0024               	movlb	4	; select bank4
  6433  04E8  1A95               	btfsc	21,5	;volatile
  6434  04E9  0008               	return
  6435                           
  6436                           ;i2c_master.c: 546: {
  6437                           ;i2c_master.c: 547: SSP1STAT = 0x80;
  6438  04EA  3080               	movlw	128
  6439  04EB  0094               	movwf	20	;volatile
  6440                           
  6441                           ;i2c_master.c: 548: SSP1CON1 = 0x08;
  6442  04EC  3008               	movlw	8
  6443  04ED  0095               	movwf	21	;volatile
  6444                           
  6445                           ;i2c_master.c: 549: SSP1CON2 = 0x00;
  6446  04EE  0196               	clrf	22	;volatile
  6447                           
  6448                           ;i2c_master.c: 550: SSP1ADD = 0x09;
  6449  04EF  3009               	movlw	9
  6450  04F0  0092               	movwf	18	;volatile
  6451                           
  6452                           ;i2c_master.c: 551: SSP1CON1bits.SSPEN = 1;
  6453  04F1  1695               	bsf	21,5	;volatile
  6454                           
  6455                           ;i2c_master.c: 552: return 1;
  6456                           ;	Return value of _I2C_MasterOpen is never used
  6457  04F2  0008               	return
  6458  04F3                     __end_of_I2C_MasterOpen:	
  6459                           ;i2c_master.c: 553: }
  6460                           ;i2c_master.c: 554: return 0;
  6461                           ;	Return value of _I2C_MasterOpen is never used
  6462                           
  6463                           
  6464                           	psect	text26
  6465  0590                     __ptext26:	
  6466 ;; *************** function _I2C_MasterWrite *****************
  6467 ;; Defined at:
  6468 ;;		line 251 in file "mcc_generated_files/i2c_master.c"
  6469 ;; Parameters:    Size  Location     Type
  6470 ;;		None
  6471 ;; Auto vars:     Size  Location     Type
  6472 ;;		None
  6473 ;; Return value:  Size  Location     Type
  6474 ;;                  1    wreg      enum E92
  6475 ;; Registers used:
  6476 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6477 ;; Tracked objects:
  6478 ;;		On entry : 0/0
  6479 ;;		On exit  : 0/0
  6480 ;;		Unchanged: 0/0
  6481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6485 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6486 ;;Total ram usage:        0 bytes
  6487 ;; Hardware stack levels used:    1
  6488 ;; Hardware stack levels required when called:    7
  6489 ;; This function calls:
  6490 ;;		_I2C_MasterOperation
  6491 ;; This function is called by:
  6492 ;;		_I2C_Write1ByteRegister
  6493 ;;		_I2C_Read1ByteRegister
  6494 ;;		_I2C_Read2ByteRegister
  6495 ;;		_I2C_Write2ByteRegister
  6496 ;;		_I2C_WriteNBytes
  6497 ;;		_I2C_ReadDataBlock
  6498 ;; This function uses a non-reentrant model
  6499 ;;
  6500                           
  6501                           
  6502                           ;psect for function _I2C_MasterWrite
  6503  0590                     _I2C_MasterWrite:	
  6504                           
  6505                           ;i2c_master.c: 253: return I2C_MasterOperation(0);
  6506                           ;	Return value of _I2C_MasterWrite is never used
  6507                           
  6508                           ;incstack = 0
  6509                           ; Regs used in _I2C_MasterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6510  0590  3000               	movlw	0
  6511  0591  3183  23E4         	fcall	_I2C_MasterOperation
  6512  0593  0008               	return
  6513  0594                     __end_of_I2C_MasterWrite:	
  6514                           
  6515                           	psect	text27
  6516  03E4                     __ptext27:	
  6517 ;; *************** function _I2C_MasterOperation *****************
  6518 ;; Defined at:
  6519 ;;		line 224 in file "mcc_generated_files/i2c_master.c"
  6520 ;; Parameters:    Size  Location     Type
  6521 ;;  read            1    wreg     unsigned char 
  6522 ;; Auto vars:     Size  Location     Type
  6523 ;;  read            1    3[BANK0 ] unsigned char 
  6524 ;;  returnValue     1    4[BANK0 ] enum E92
  6525 ;; Return value:  Size  Location     Type
  6526 ;;                  1    wreg      enum E92
  6527 ;; Registers used:
  6528 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6529 ;; Tracked objects:
  6530 ;;		On entry : 0/0
  6531 ;;		On exit  : 0/0
  6532 ;;		Unchanged: 0/0
  6533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6535 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6536 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6537 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6538 ;;Total ram usage:        3 bytes
  6539 ;; Hardware stack levels used:    1
  6540 ;; Hardware stack levels required when called:    6
  6541 ;; This function calls:
  6542 ;;		_I2C_MasterStart
  6543 ;;		_I2C_Poller
  6544 ;; This function is called by:
  6545 ;;		_I2C_MasterWrite
  6546 ;;		_I2C_MasterRead
  6547 ;; This function uses a non-reentrant model
  6548 ;;
  6549                           
  6550                           
  6551                           ;psect for function _I2C_MasterOperation
  6552  03E4                     _I2C_MasterOperation:	
  6553                           
  6554                           ;incstack = 0
  6555                           ; Regs used in _I2C_MasterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6556                           ;I2C_MasterOperation@read stored from wreg
  6557  03E4  0020               	movlb	0	; select bank0
  6558  03E5  00DA               	movwf	I2C_MasterOperation@read
  6559                           
  6560                           ;i2c_master.c: 226: i2c_error_t returnValue = I2C_BUSY;
  6561  03E6  01DB               	clrf	I2C_MasterOperation@returnValue
  6562  03E7  0ADB               	incf	I2C_MasterOperation@returnValue,f
  6563                           
  6564                           ;i2c_master.c: 227: if(!I2C_Status.busy)
  6565  03E8  18BC               	btfsc	_I2C_Status+28,1
  6566  03E9  2BFB               	goto	i1l2451
  6567                           
  6568                           ;i2c_master.c: 228: {
  6569                           ;i2c_master.c: 229: I2C_Status.busy = 1;
  6570  03EA  14BC               	bsf	_I2C_Status+28,1
  6571                           
  6572                           ;i2c_master.c: 230: returnValue = I2C_NOERR;
  6573  03EB  01DB               	clrf	I2C_MasterOperation@returnValue
  6574                           
  6575                           ;i2c_master.c: 232: if(read)
  6576  03EC  085A               	movf	I2C_MasterOperation@read,w
  6577  03ED  1903               	btfsc	3,2
  6578  03EE  2BF2               	goto	i1l2445
  6579                           
  6580                           ;i2c_master.c: 233: {
  6581                           ;i2c_master.c: 234: I2C_Status.state = I2C_SEND_ADR_READ;
  6582  03EF  01BA               	clrf	_I2C_Status+26
  6583  03F0  0ABA               	incf	_I2C_Status+26,f
  6584                           
  6585                           ;i2c_master.c: 235: }
  6586  03F1  2BF6               	goto	i1l2447
  6587  03F2                     i1l2445:	
  6588                           
  6589                           ;i2c_master.c: 236: else
  6590                           ;i2c_master.c: 237: {
  6591                           ;i2c_master.c: 238: I2C_Status.state = I2C_SEND_ADR_WRITE;
  6592  03F2  3002               	movlw	2
  6593  03F3  00FD               	movwf	??_I2C_MasterOperation
  6594  03F4  087D               	movf	??_I2C_MasterOperation,w
  6595  03F5  00BA               	movwf	_I2C_Status+26
  6596  03F6                     i1l2447:	
  6597                           
  6598                           ;i2c_master.c: 239: }
  6599                           ;i2c_master.c: 240: I2C_MasterStart();
  6600  03F6  3185  25D8  3183   	fcall	_I2C_MasterStart
  6601                           
  6602                           ;i2c_master.c: 241: I2C_Poller();
  6603  03F9  3185  2514         	fcall	_I2C_Poller
  6604  03FB                     i1l2451:	
  6605                           
  6606                           ;i2c_master.c: 242: }
  6607                           ;i2c_master.c: 243: return returnValue;
  6608  03FB  0020               	movlb	0	; select bank0
  6609  03FC  085B               	movf	I2C_MasterOperation@returnValue,w
  6610  03FD  0008               	return
  6611  03FE                     __end_of_I2C_MasterOperation:	
  6612                           
  6613                           	psect	text28
  6614  0514                     __ptext28:	
  6615 ;; *************** function _I2C_Poller *****************
  6616 ;; Defined at:
  6617 ;;		line 312 in file "mcc_generated_files/i2c_master.c"
  6618 ;; Parameters:    Size  Location     Type
  6619 ;;		None
  6620 ;; Auto vars:     Size  Location     Type
  6621 ;;		None
  6622 ;; Return value:  Size  Location     Type
  6623 ;;                  1    wreg      void 
  6624 ;; Registers used:
  6625 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6626 ;; Tracked objects:
  6627 ;;		On entry : 0/0
  6628 ;;		On exit  : 0/0
  6629 ;;		Unchanged: 0/0
  6630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6634 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6635 ;;Total ram usage:        0 bytes
  6636 ;; Hardware stack levels used:    1
  6637 ;; Hardware stack levels required when called:    5
  6638 ;; This function calls:
  6639 ;;		_I2C_MasterFsm
  6640 ;;		_I2C_MasterWaitForEvent
  6641 ;; This function is called by:
  6642 ;;		_I2C_MasterOperation
  6643 ;; This function uses a non-reentrant model
  6644 ;;
  6645                           
  6646                           
  6647                           ;psect for function _I2C_Poller
  6648  0514                     _I2C_Poller:	
  6649  0514                     i1l2417:	
  6650                           ;i2c_master.c: 314: while(I2C_Status.busy)
  6651                           
  6652                           ;incstack = 0
  6653                           ; Regs used in _I2C_Poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6654                           
  6655  0514  0020               	movlb	0	; select bank0
  6656  0515  1CBC               	btfss	_I2C_Status+28,1
  6657  0516  0008               	return
  6658                           
  6659                           ;i2c_master.c: 315: {
  6660                           ;i2c_master.c: 316: I2C_MasterWaitForEvent();
  6661  0517  3185  2594  3185   	fcall	_I2C_MasterWaitForEvent
  6662                           
  6663                           ;i2c_master.c: 317: I2C_MasterFsm();
  6664  051A  3183  2331  3185   	fcall	_I2C_MasterFsm
  6665  051D  2D14               	goto	i1l2417
  6666  051E                     __end_of_I2C_Poller:	
  6667                           
  6668                           	psect	text29
  6669  0594                     __ptext29:	
  6670 ;; *************** function _I2C_MasterWaitForEvent *****************
  6671 ;; Defined at:
  6672 ;;		line 650 in file "mcc_generated_files/i2c_master.c"
  6673 ;; Parameters:    Size  Location     Type
  6674 ;;		None
  6675 ;; Auto vars:     Size  Location     Type
  6676 ;;		None
  6677 ;; Return value:  Size  Location     Type
  6678 ;;                  1    wreg      void 
  6679 ;; Registers used:
  6680 ;;		None
  6681 ;; Tracked objects:
  6682 ;;		On entry : 0/0
  6683 ;;		On exit  : 0/0
  6684 ;;		Unchanged: 0/0
  6685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6689 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6690 ;;Total ram usage:        0 bytes
  6691 ;; Hardware stack levels used:    1
  6692 ;; This function calls:
  6693 ;;		Nothing
  6694 ;; This function is called by:
  6695 ;;		_I2C_Poller
  6696 ;; This function uses a non-reentrant model
  6697 ;;
  6698                           
  6699                           
  6700                           ;psect for function _I2C_MasterWaitForEvent
  6701  0594                     _I2C_MasterWaitForEvent:	
  6702  0594                     i1l544:	
  6703                           ;incstack = 0
  6704                           ; Regs used in _I2C_MasterWaitForEvent: []
  6705                           ;i2c_master.c: 652: while(1)
  6706                           
  6707                           
  6708                           ;i2c_master.c: 653: {
  6709                           ;i2c_master.c: 654: if(PIR1bits.SSP1IF)
  6710  0594  0020               	movlb	0	; select bank0
  6711  0595  1990               	btfsc	16,3	;volatile
  6712  0596  0008               	return
  6713  0597  2D94               	goto	i1l544
  6714  0598                     __end_of_I2C_MasterWaitForEvent:	
  6715                           ;i2c_master.c: 655: {
  6716                           ;i2c_master.c: 656: break;
  6717                           
  6718                           
  6719                           	psect	text30
  6720  0331                     __ptext30:	
  6721 ;; *************** function _I2C_MasterFsm *****************
  6722 ;; Defined at:
  6723 ;;		line 321 in file "mcc_generated_files/i2c_master.c"
  6724 ;; Parameters:    Size  Location     Type
  6725 ;;		None
  6726 ;; Auto vars:     Size  Location     Type
  6727 ;;		None
  6728 ;; Return value:  Size  Location     Type
  6729 ;;                  1    wreg      void 
  6730 ;; Registers used:
  6731 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6732 ;; Tracked objects:
  6733 ;;		On entry : 0/0
  6734 ;;		On exit  : 0/0
  6735 ;;		Unchanged: 0/0
  6736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6739 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6740 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6741 ;;Total ram usage:        3 bytes
  6742 ;; Hardware stack levels used:    1
  6743 ;; Hardware stack levels required when called:    4
  6744 ;; This function calls:
  6745 ;;		_I2C_DO_ADDRESS_NACK
  6746 ;;		_I2C_DO_IDLE
  6747 ;;		_I2C_DO_RCEN
  6748 ;;		_I2C_DO_RESET
  6749 ;;		_I2C_DO_RX
  6750 ;;		_I2C_DO_RX_ACK
  6751 ;;		_I2C_DO_RX_NACK_RESTART
  6752 ;;		_I2C_DO_RX_NACK_STOP
  6753 ;;		_I2C_DO_SEND_ADR_READ
  6754 ;;		_I2C_DO_SEND_ADR_WRITE
  6755 ;;		_I2C_DO_SEND_RESTART
  6756 ;;		_I2C_DO_SEND_RESTART_READ
  6757 ;;		_I2C_DO_SEND_RESTART_WRITE
  6758 ;;		_I2C_DO_SEND_STOP
  6759 ;;		_I2C_DO_TX
  6760 ;;		_I2C_DO_TX_EMPTY
  6761 ;;		_I2C_MasterClearIrq
  6762 ;;		_I2C_MasterIsNack
  6763 ;; This function is called by:
  6764 ;;		_I2C_Poller
  6765 ;; This function uses a non-reentrant model
  6766 ;;
  6767                           
  6768                           
  6769                           ;psect for function _I2C_MasterFsm
  6770  0331                     _I2C_MasterFsm:	
  6771                           
  6772                           ;i2c_master.c: 323: I2C_MasterClearIrq();
  6773                           
  6774                           ;incstack = 0
  6775                           ; Regs used in _I2C_MasterFsm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6776  0331  3185  25E1  3183   	fcall	_I2C_MasterClearIrq
  6777                           
  6778                           ;i2c_master.c: 325: if(I2C_Status.addressNackCheck && I2C_MasterIsNack())
  6779  0334  0020               	movlb	0	; select bank0
  6780  0335  1C3C               	btfss	_I2C_Status+28,0
  6781  0336  2B42               	goto	i1l2407
  6782  0337  3185  257B  3183   	fcall	_I2C_MasterIsNack
  6783  033A  3A00               	xorlw	0
  6784  033B  1903               	skipnz
  6785  033C  2B42               	goto	i1l2407
  6786                           
  6787                           ;i2c_master.c: 326: {
  6788                           ;i2c_master.c: 327: I2C_Status.state = I2C_ADDRESS_NACK;
  6789  033D  300F               	movlw	15
  6790  033E  0020               	movlb	0	; select bank0
  6791  033F  00D7               	movwf	??_I2C_MasterFsm
  6792  0340  0857               	movf	??_I2C_MasterFsm,w
  6793  0341  00BA               	movwf	_I2C_Status+26
  6794  0342                     i1l2407:	
  6795                           
  6796                           ;i2c_master.c: 328: }
  6797                           ;i2c_master.c: 329: I2C_Status.state = fsmStateTable[I2C_Status.state]();
  6798  0342  0020               	movlb	0	; select bank0
  6799  0343  083A               	movf	_I2C_Status+26,w
  6800  0344  00D7               	movwf	??_I2C_MasterFsm
  6801  0345  01D8               	clrf	??_I2C_MasterFsm+1
  6802  0346  35D7               	lslf	??_I2C_MasterFsm,f
  6803  0347  0DD8               	rlf	??_I2C_MasterFsm+1,f
  6804  0348  30C4               	movlw	low (_fsmStateTable| (0+32768))
  6805  0349  0757               	addwf	??_I2C_MasterFsm,w
  6806  034A  0084               	movwf	4
  6807  034B  3083               	movlw	high (_fsmStateTable| (0+32768))
  6808  034C  3D58               	addwfc	??_I2C_MasterFsm+1,w
  6809  034D  0085               	movwf	5
  6810  034E  3F01               	moviw [1]fsr0
  6811  034F  008A               	movwf	10
  6812  0350  3F00               	moviw [0]fsr0
  6813  0351  000A               	callw
  6814  0352  3183               	pagesel	$
  6815  0353  0020               	movlb	0	; select bank0
  6816  0354  00D9               	movwf	??_I2C_MasterFsm+2
  6817  0355  0859               	movf	??_I2C_MasterFsm+2,w
  6818  0356  00BA               	movwf	_I2C_Status+26
  6819  0357  0008               	return
  6820  0358                     __end_of_I2C_MasterFsm:	
  6821                           
  6822                           	psect	text31
  6823  03A1                     __ptext31:	
  6824 ;; *************** function _I2C_DO_ADDRESS_NACK *****************
  6825 ;; Defined at:
  6826 ;;		line 500 in file "mcc_generated_files/i2c_master.c"
  6827 ;; Parameters:    Size  Location     Type
  6828 ;;		None
  6829 ;; Auto vars:     Size  Location     Type
  6830 ;;		None
  6831 ;; Return value:  Size  Location     Type
  6832 ;;                  1    wreg      enum E12103
  6833 ;; Registers used:
  6834 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6835 ;; Tracked objects:
  6836 ;;		On entry : 0/0
  6837 ;;		On exit  : 0/0
  6838 ;;		Unchanged: 0/0
  6839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6842 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6843 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6844 ;;Total ram usage:        1 bytes
  6845 ;; Hardware stack levels used:    1
  6846 ;; Hardware stack levels required when called:    3
  6847 ;; This function calls:
  6848 ;;		Absolute function
  6849 ;;		_I2C_CallbackReturnReset
  6850 ;;		_I2C_CallbackReturnStop
  6851 ;;		_I2C_DO_SEND_RESTART
  6852 ;;		_I2C_DO_SEND_STOP
  6853 ;;		_rd1RegCompleteHandler
  6854 ;;		_rd2RegCompleteHandler
  6855 ;;		_rdBlkRegCompleteHandler
  6856 ;;		_wr1RegCompleteHandler
  6857 ;;		_wr2RegCompleteHandler
  6858 ;; This function is called by:
  6859 ;;		_I2C_MasterFsm
  6860 ;; This function uses a non-reentrant model
  6861 ;;
  6862                           
  6863                           
  6864                           ;psect for function _I2C_DO_ADDRESS_NACK
  6865  03A1                     _I2C_DO_ADDRESS_NACK:	
  6866                           
  6867                           ;i2c_master.c: 502: I2C_Status.addressNackCheck = 0;
  6868                           
  6869                           ;incstack = 0
  6870                           ; Regs used in _I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6871  03A1  0020               	movlb	0	; select bank0
  6872  03A2  103C               	bcf	_I2C_Status+28,0
  6873                           
  6874                           ;i2c_master.c: 503: I2C_Status.error = I2C_FAIL;
  6875  03A3  3002               	movlw	2
  6876  03A4  00FA               	movwf	??_I2C_DO_ADDRESS_NACK
  6877  03A5  087A               	movf	??_I2C_DO_ADDRESS_NACK,w
  6878  03A6  00BB               	movwf	_I2C_Status+27
  6879                           
  6880                           ;i2c_master.c: 504: switch(I2C_Status.callbackTable[I2C_ADDR_NACK](I2C_Status.callbackPa
      +                          yload[I2C_ADDR_NACK]))
  6881  03A7  2BAE               	goto	i1l2395
  6882  03A8                     i1l2385:	
  6883                           ;i2c_master.c: 505: {
  6884                           ;i2c_master.c: 506: case I2C_RESTART_READ:
  6885                           
  6886                           
  6887                           ;i2c_master.c: 507: case I2C_RESTART_WRITE:
  6888                           ;i2c_master.c: 508: return I2C_DO_SEND_RESTART();
  6889  03A8  3185  25A8         	fcall	_I2C_DO_SEND_RESTART
  6890  03AA  0008               	return
  6891  03AB                     i1l2389:	
  6892                           ;i2c_master.c: 509: default:
  6893                           
  6894                           
  6895                           ;i2c_master.c: 510: return I2C_DO_SEND_STOP();
  6896  03AB  3185  25A4         	fcall	_I2C_DO_SEND_STOP
  6897                           
  6898                           ;i2c_master.c: 511: }
  6899  03AD  0008               	return
  6900  03AE                     i1l2395:	
  6901  03AE  0020               	movlb	0	; select bank0
  6902  03AF  082E               	movf	low ((_I2C_Status| 0+14)),w
  6903  03B0  00FA               	movwf	??_I2C_DO_ADDRESS_NACK
  6904  03B1  087A               	movf	??_I2C_DO_ADDRESS_NACK,w
  6905  03B2  00F9               	movwf	I2C_CallbackReturnReset@funPtr
  6906  03B3  3004               	movlw	4
  6907  03B4  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
  6908  03B5  0086               	movwf	6
  6909  03B6  0187               	clrf	7
  6910  03B7  3F41               	moviw [1]fsr1
  6911  03B8  008A               	movwf	10
  6912  03B9  3F40               	moviw [0]fsr1
  6913  03BA  000A               	callw
  6914  03BB  3183               	pagesel	$
  6915                           
  6916                           ; Switch size 1, requested type "space"
  6917                           ; Number of cases is 2, Range of values is 2 to 3
  6918                           ; switch strategies available:
  6919                           ; Name         Instructions Cycles
  6920                           ; simple_byte            7     4 (average)
  6921                           ; direct_byte           13     9 (fixed)
  6922                           ; jumptable            263     9 (fixed)
  6923                           ;	Chosen strategy is simple_byte
  6924  03BC  3A02               	xorlw	2	; case 2
  6925  03BD  1903               	skipnz
  6926  03BE  2BA8               	goto	i1l2385
  6927  03BF  3A01               	xorlw	1	; case 3
  6928  03C0  1903               	skipnz
  6929  03C1  2BA8               	goto	i1l2385
  6930  03C2  2BAB               	goto	i1l2389
  6931  03C3  0008               	return
  6932  03C4                     __end_of_I2C_DO_ADDRESS_NACK:	
  6933                           
  6934                           	psect	text32
  6935  0581                     __ptext32:	
  6936 ;; *************** function _I2C_DO_RESET *****************
  6937 ;; Defined at:
  6938 ;;		line 494 in file "mcc_generated_files/i2c_master.c"
  6939 ;; Parameters:    Size  Location     Type
  6940 ;;		None
  6941 ;; Auto vars:     Size  Location     Type
  6942 ;;		None
  6943 ;; Return value:  Size  Location     Type
  6944 ;;                  1    wreg      enum E12103
  6945 ;; Registers used:
  6946 ;;		wreg, status,2
  6947 ;; Tracked objects:
  6948 ;;		On entry : 0/0
  6949 ;;		On exit  : 0/0
  6950 ;;		Unchanged: 0/0
  6951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6955 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6956 ;;Total ram usage:        0 bytes
  6957 ;; Hardware stack levels used:    1
  6958 ;; This function calls:
  6959 ;;		Nothing
  6960 ;; This function is called by:
  6961 ;;		_I2C_MasterFsm
  6962 ;; This function uses a non-reentrant model
  6963 ;;
  6964                           
  6965                           
  6966                           ;psect for function _I2C_DO_RESET
  6967  0581                     _I2C_DO_RESET:	
  6968                           
  6969                           ;i2c_master.c: 496: I2C_Status.busy = 0;
  6970                           
  6971                           ;incstack = 0
  6972                           ; Regs used in _I2C_DO_RESET: [wreg+status,2]
  6973  0581  0020               	movlb	0	; select bank0
  6974  0582  10BC               	bcf	_I2C_Status+28,1
  6975                           
  6976                           ;i2c_master.c: 497: I2C_Status.error = I2C_NOERR;
  6977  0583  01BB               	clrf	_I2C_Status+27
  6978                           
  6979                           ;i2c_master.c: 498: return I2C_RESET;
  6980  0584  300E               	movlw	14
  6981  0585  0008               	return
  6982  0586                     __end_of_I2C_DO_RESET:	
  6983                           
  6984                           	psect	text33
  6985  0598                     __ptext33:	
  6986 ;; *************** function _I2C_DO_RX_NACK_RESTART *****************
  6987 ;; Defined at:
  6988 ;;		line 488 in file "mcc_generated_files/i2c_master.c"
  6989 ;; Parameters:    Size  Location     Type
  6990 ;;		None
  6991 ;; Auto vars:     Size  Location     Type
  6992 ;;		None
  6993 ;; Return value:  Size  Location     Type
  6994 ;;                  1    wreg      enum E12103
  6995 ;; Registers used:
  6996 ;;		wreg, status,2, status,0, pclath, cstack
  6997 ;; Tracked objects:
  6998 ;;		On entry : 0/0
  6999 ;;		On exit  : 0/0
  7000 ;;		Unchanged: 0/0
  7001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7005 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7006 ;;Total ram usage:        0 bytes
  7007 ;; Hardware stack levels used:    1
  7008 ;; Hardware stack levels required when called:    1
  7009 ;; This function calls:
  7010 ;;		_I2C_MasterSendNack
  7011 ;; This function is called by:
  7012 ;;		_I2C_DO_RX
  7013 ;;		_I2C_MasterFsm
  7014 ;; This function uses a non-reentrant model
  7015 ;;
  7016                           
  7017                           
  7018                           ;psect for function _I2C_DO_RX_NACK_RESTART
  7019  0598                     _I2C_DO_RX_NACK_RESTART:	
  7020                           
  7021                           ;i2c_master.c: 490: I2C_MasterSendNack();
  7022                           
  7023                           ;incstack = 0
  7024                           ; Regs used in _I2C_DO_RX_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  7025  0598  3185  25B8         	fcall	_I2C_MasterSendNack
  7026                           
  7027                           ;i2c_master.c: 491: return I2C_SEND_RESTART;
  7028  059A  3009               	movlw	9
  7029  059B  0008               	return
  7030  059C                     __end_of_I2C_DO_RX_NACK_RESTART:	
  7031                           
  7032                           	psect	text34
  7033  059C                     __ptext34:	
  7034 ;; *************** function _I2C_DO_RX_NACK_STOP *****************
  7035 ;; Defined at:
  7036 ;;		line 482 in file "mcc_generated_files/i2c_master.c"
  7037 ;; Parameters:    Size  Location     Type
  7038 ;;		None
  7039 ;; Auto vars:     Size  Location     Type
  7040 ;;		None
  7041 ;; Return value:  Size  Location     Type
  7042 ;;                  1    wreg      enum E12103
  7043 ;; Registers used:
  7044 ;;		wreg, status,2, status,0, pclath, cstack
  7045 ;; Tracked objects:
  7046 ;;		On entry : 0/0
  7047 ;;		On exit  : 0/0
  7048 ;;		Unchanged: 0/0
  7049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7053 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7054 ;;Total ram usage:        0 bytes
  7055 ;; Hardware stack levels used:    1
  7056 ;; Hardware stack levels required when called:    1
  7057 ;; This function calls:
  7058 ;;		_I2C_MasterSendNack
  7059 ;; This function is called by:
  7060 ;;		_I2C_DO_RX
  7061 ;;		_I2C_MasterFsm
  7062 ;; This function uses a non-reentrant model
  7063 ;;
  7064                           
  7065                           
  7066                           ;psect for function _I2C_DO_RX_NACK_STOP
  7067  059C                     _I2C_DO_RX_NACK_STOP:	
  7068                           
  7069                           ;i2c_master.c: 484: I2C_MasterSendNack();
  7070                           
  7071                           ;incstack = 0
  7072                           ; Regs used in _I2C_DO_RX_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  7073  059C  3185  25B8         	fcall	_I2C_MasterSendNack
  7074                           
  7075                           ;i2c_master.c: 485: return I2C_SEND_STOP;
  7076  059E  300A               	movlw	10
  7077  059F  0008               	return
  7078  05A0                     __end_of_I2C_DO_RX_NACK_STOP:	
  7079                           
  7080                           	psect	text35
  7081  05A0                     __ptext35:	
  7082 ;; *************** function _I2C_DO_RX_ACK *****************
  7083 ;; Defined at:
  7084 ;;		line 475 in file "mcc_generated_files/i2c_master.c"
  7085 ;; Parameters:    Size  Location     Type
  7086 ;;		None
  7087 ;; Auto vars:     Size  Location     Type
  7088 ;;		None
  7089 ;; Return value:  Size  Location     Type
  7090 ;;                  1    wreg      enum E12103
  7091 ;; Registers used:
  7092 ;;		wreg, status,2, status,0, pclath, cstack
  7093 ;; Tracked objects:
  7094 ;;		On entry : 0/0
  7095 ;;		On exit  : 0/0
  7096 ;;		Unchanged: 0/0
  7097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7102 ;;Total ram usage:        0 bytes
  7103 ;; Hardware stack levels used:    1
  7104 ;; Hardware stack levels required when called:    1
  7105 ;; This function calls:
  7106 ;;		_I2C_MasterSendAck
  7107 ;; This function is called by:
  7108 ;;		_I2C_MasterFsm
  7109 ;; This function uses a non-reentrant model
  7110 ;;
  7111                           
  7112                           
  7113                           ;psect for function _I2C_DO_RX_ACK
  7114  05A0                     _I2C_DO_RX_ACK:	
  7115                           
  7116                           ;i2c_master.c: 477: I2C_MasterSendAck();
  7117                           
  7118                           ;incstack = 0
  7119                           ; Regs used in _I2C_DO_RX_ACK: [wreg+status,2+status,0+pclath+cstack]
  7120  05A0  3185  25B4         	fcall	_I2C_MasterSendAck
  7121                           
  7122                           ;i2c_master.c: 478: return I2C_RCEN;
  7123  05A2  3005               	movlw	5
  7124  05A3  0008               	return
  7125  05A4                     __end_of_I2C_DO_RX_ACK:	
  7126                           
  7127                           	psect	text36
  7128  05A4                     __ptext36:	
  7129 ;; *************** function _I2C_DO_SEND_STOP *****************
  7130 ;; Defined at:
  7131 ;;		line 469 in file "mcc_generated_files/i2c_master.c"
  7132 ;; Parameters:    Size  Location     Type
  7133 ;;		None
  7134 ;; Auto vars:     Size  Location     Type
  7135 ;;		None
  7136 ;; Return value:  Size  Location     Type
  7137 ;;                  1    wreg      enum E12103
  7138 ;; Registers used:
  7139 ;;		wreg, status,2, status,0, pclath, cstack
  7140 ;; Tracked objects:
  7141 ;;		On entry : 0/0
  7142 ;;		On exit  : 0/0
  7143 ;;		Unchanged: 0/0
  7144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7148 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7149 ;;Total ram usage:        0 bytes
  7150 ;; Hardware stack levels used:    1
  7151 ;; Hardware stack levels required when called:    1
  7152 ;; This function calls:
  7153 ;;		_I2C_MasterStop
  7154 ;; This function is called by:
  7155 ;;		_I2C_DO_TX
  7156 ;;		_I2C_DO_TX_EMPTY
  7157 ;;		_I2C_DO_ADDRESS_NACK
  7158 ;;		_I2C_MasterFsm
  7159 ;; This function uses a non-reentrant model
  7160 ;;
  7161                           
  7162                           
  7163                           ;psect for function _I2C_DO_SEND_STOP
  7164  05A4                     _I2C_DO_SEND_STOP:	
  7165                           
  7166                           ;i2c_master.c: 471: I2C_MasterStop();
  7167                           
  7168                           ;incstack = 0
  7169                           ; Regs used in _I2C_DO_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
  7170  05A4  3185  25D2         	fcall	_I2C_MasterStop
  7171                           
  7172                           ;i2c_master.c: 472: return I2C_IDLE;
  7173  05A6  3000               	movlw	0
  7174  05A7  0008               	return
  7175  05A8                     __end_of_I2C_DO_SEND_STOP:	
  7176                           
  7177                           	psect	text37
  7178  05A8                     __ptext37:	
  7179 ;; *************** function _I2C_DO_SEND_RESTART *****************
  7180 ;; Defined at:
  7181 ;;		line 463 in file "mcc_generated_files/i2c_master.c"
  7182 ;; Parameters:    Size  Location     Type
  7183 ;;		None
  7184 ;; Auto vars:     Size  Location     Type
  7185 ;;		None
  7186 ;; Return value:  Size  Location     Type
  7187 ;;                  1    wreg      enum E12103
  7188 ;; Registers used:
  7189 ;;		wreg, status,2, status,0, pclath, cstack
  7190 ;; Tracked objects:
  7191 ;;		On entry : 0/0
  7192 ;;		On exit  : 0/0
  7193 ;;		Unchanged: 0/0
  7194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7199 ;;Total ram usage:        0 bytes
  7200 ;; Hardware stack levels used:    1
  7201 ;; Hardware stack levels required when called:    1
  7202 ;; This function calls:
  7203 ;;		_I2C_MasterEnableRestart
  7204 ;; This function is called by:
  7205 ;;		_I2C_DO_TX_EMPTY
  7206 ;;		_I2C_DO_ADDRESS_NACK
  7207 ;;		_I2C_MasterFsm
  7208 ;; This function uses a non-reentrant model
  7209 ;;
  7210                           
  7211                           
  7212                           ;psect for function _I2C_DO_SEND_RESTART
  7213  05A8                     _I2C_DO_SEND_RESTART:	
  7214                           
  7215                           ;i2c_master.c: 465: I2C_MasterEnableRestart();
  7216                           
  7217                           ;incstack = 0
  7218                           ; Regs used in _I2C_DO_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
  7219  05A8  3185  25D5         	fcall	_I2C_MasterEnableRestart
  7220                           
  7221                           ;i2c_master.c: 466: return I2C_SEND_ADR_READ;
  7222  05AA  3001               	movlw	1
  7223  05AB  0008               	return
  7224  05AC                     __end_of_I2C_DO_SEND_RESTART:	
  7225                           
  7226                           	psect	text38
  7227  05AC                     __ptext38:	
  7228 ;; *************** function _I2C_DO_SEND_RESTART_WRITE *****************
  7229 ;; Defined at:
  7230 ;;		line 456 in file "mcc_generated_files/i2c_master.c"
  7231 ;; Parameters:    Size  Location     Type
  7232 ;;		None
  7233 ;; Auto vars:     Size  Location     Type
  7234 ;;		None
  7235 ;; Return value:  Size  Location     Type
  7236 ;;                  1    wreg      enum E12103
  7237 ;; Registers used:
  7238 ;;		wreg, status,2, status,0, pclath, cstack
  7239 ;; Tracked objects:
  7240 ;;		On entry : 0/0
  7241 ;;		On exit  : 0/0
  7242 ;;		Unchanged: 0/0
  7243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7248 ;;Total ram usage:        0 bytes
  7249 ;; Hardware stack levels used:    1
  7250 ;; Hardware stack levels required when called:    1
  7251 ;; This function calls:
  7252 ;;		_I2C_MasterEnableRestart
  7253 ;; This function is called by:
  7254 ;;		_I2C_DO_TX
  7255 ;;		_I2C_MasterFsm
  7256 ;; This function uses a non-reentrant model
  7257 ;;
  7258                           
  7259                           
  7260                           ;psect for function _I2C_DO_SEND_RESTART_WRITE
  7261  05AC                     _I2C_DO_SEND_RESTART_WRITE:	
  7262                           
  7263                           ;i2c_master.c: 458: I2C_MasterEnableRestart();
  7264                           
  7265                           ;incstack = 0
  7266                           ; Regs used in _I2C_DO_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
  7267  05AC  3185  25D5         	fcall	_I2C_MasterEnableRestart
  7268                           
  7269                           ;i2c_master.c: 459: return I2C_SEND_ADR_WRITE;
  7270  05AE  3002               	movlw	2
  7271  05AF  0008               	return
  7272  05B0                     __end_of_I2C_DO_SEND_RESTART_WRITE:	
  7273                           
  7274                           	psect	text39
  7275  05B0                     __ptext39:	
  7276 ;; *************** function _I2C_DO_SEND_RESTART_READ *****************
  7277 ;; Defined at:
  7278 ;;		line 450 in file "mcc_generated_files/i2c_master.c"
  7279 ;; Parameters:    Size  Location     Type
  7280 ;;		None
  7281 ;; Auto vars:     Size  Location     Type
  7282 ;;		None
  7283 ;; Return value:  Size  Location     Type
  7284 ;;                  1    wreg      enum E12103
  7285 ;; Registers used:
  7286 ;;		wreg, status,2, status,0, pclath, cstack
  7287 ;; Tracked objects:
  7288 ;;		On entry : 0/0
  7289 ;;		On exit  : 0/0
  7290 ;;		Unchanged: 0/0
  7291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7296 ;;Total ram usage:        0 bytes
  7297 ;; Hardware stack levels used:    1
  7298 ;; Hardware stack levels required when called:    1
  7299 ;; This function calls:
  7300 ;;		_I2C_MasterEnableRestart
  7301 ;; This function is called by:
  7302 ;;		_I2C_DO_TX
  7303 ;;		_I2C_MasterFsm
  7304 ;; This function uses a non-reentrant model
  7305 ;;
  7306                           
  7307                           
  7308                           ;psect for function _I2C_DO_SEND_RESTART_READ
  7309  05B0                     _I2C_DO_SEND_RESTART_READ:	
  7310                           
  7311                           ;i2c_master.c: 452: I2C_MasterEnableRestart();
  7312                           
  7313                           ;incstack = 0
  7314                           ; Regs used in _I2C_DO_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
  7315  05B0  3185  25D5         	fcall	_I2C_MasterEnableRestart
  7316                           
  7317                           ;i2c_master.c: 453: return I2C_SEND_ADR_READ;
  7318  05B2  3001               	movlw	1
  7319  05B3  0008               	return
  7320  05B4                     __end_of_I2C_DO_SEND_RESTART_READ:	
  7321                           
  7322                           	psect	text40
  7323  0575                     __ptext40:	
  7324 ;; *************** function _I2C_DO_RCEN *****************
  7325 ;; Defined at:
  7326 ;;		line 402 in file "mcc_generated_files/i2c_master.c"
  7327 ;; Parameters:    Size  Location     Type
  7328 ;;		None
  7329 ;; Auto vars:     Size  Location     Type
  7330 ;;		None
  7331 ;; Return value:  Size  Location     Type
  7332 ;;                  1    wreg      enum E12103
  7333 ;; Registers used:
  7334 ;;		wreg, status,2, status,0, pclath, cstack
  7335 ;; Tracked objects:
  7336 ;;		On entry : 0/0
  7337 ;;		On exit  : 0/0
  7338 ;;		Unchanged: 0/0
  7339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7344 ;;Total ram usage:        0 bytes
  7345 ;; Hardware stack levels used:    1
  7346 ;; Hardware stack levels required when called:    1
  7347 ;; This function calls:
  7348 ;;		_I2C_MasterStartRx
  7349 ;; This function is called by:
  7350 ;;		_I2C_MasterFsm
  7351 ;; This function uses a non-reentrant model
  7352 ;;
  7353                           
  7354                           
  7355                           ;psect for function _I2C_DO_RCEN
  7356  0575                     _I2C_DO_RCEN:	
  7357                           
  7358                           ;i2c_master.c: 404: I2C_Status.addressNackCheck = 0;
  7359                           
  7360                           ;incstack = 0
  7361                           ; Regs used in _I2C_DO_RCEN: [wreg+status,2+status,0+pclath+cstack]
  7362  0575  0020               	movlb	0	; select bank0
  7363  0576  103C               	bcf	_I2C_Status+28,0
  7364                           
  7365                           ;i2c_master.c: 405: I2C_MasterStartRx();
  7366  0577  3185  25CF         	fcall	_I2C_MasterStartRx
  7367                           
  7368                           ;i2c_master.c: 406: return I2C_RX;
  7369  0579  3004               	movlw	4
  7370  057A  0008               	return
  7371  057B                     __end_of_I2C_DO_RCEN:	
  7372                           
  7373                           	psect	text41
  7374  022A                     __ptext41:	
  7375 ;; *************** function _I2C_DO_RX *****************
  7376 ;; Defined at:
  7377 ;;		line 378 in file "mcc_generated_files/i2c_master.c"
  7378 ;; Parameters:    Size  Location     Type
  7379 ;;		None
  7380 ;; Auto vars:     Size  Location     Type
  7381 ;;		None
  7382 ;; Return value:  Size  Location     Type
  7383 ;;                  1    wreg      enum E12103
  7384 ;; Registers used:
  7385 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7386 ;; Tracked objects:
  7387 ;;		On entry : 0/0
  7388 ;;		On exit  : 0/0
  7389 ;;		Unchanged: 0/0
  7390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7393 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7394 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7395 ;;Total ram usage:        1 bytes
  7396 ;; Hardware stack levels used:    1
  7397 ;; Hardware stack levels required when called:    3
  7398 ;; This function calls:
  7399 ;;		Absolute function
  7400 ;;		_I2C_CallbackReturnReset
  7401 ;;		_I2C_CallbackReturnStop
  7402 ;;		_I2C_DO_RX_NACK_RESTART
  7403 ;;		_I2C_DO_RX_NACK_STOP
  7404 ;;		_I2C_MasterGetRxData
  7405 ;;		_I2C_MasterSendAck
  7406 ;;		_rd1RegCompleteHandler
  7407 ;;		_rd2RegCompleteHandler
  7408 ;;		_rdBlkRegCompleteHandler
  7409 ;;		_wr1RegCompleteHandler
  7410 ;;		_wr2RegCompleteHandler
  7411 ;; This function is called by:
  7412 ;;		_I2C_MasterFsm
  7413 ;; This function uses a non-reentrant model
  7414 ;;
  7415                           
  7416                           
  7417                           ;psect for function _I2C_DO_RX
  7418  022A                     _I2C_DO_RX:	
  7419                           
  7420                           ;i2c_master.c: 380: *I2C_Status.data_ptr++ = I2C_MasterGetRxData();
  7421                           
  7422                           ;incstack = 0
  7423                           ; Regs used in _I2C_DO_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7424  022A  3185  25CC  3182   	fcall	_I2C_MasterGetRxData
  7425  022D  00FA               	movwf	??_I2C_DO_RX
  7426  022E  0020               	movlb	0	; select bank0
  7427  022F  0837               	movf	low ((_I2C_Status| 0+23)),w
  7428  0230  0086               	movwf	6
  7429  0231  0187               	clrf	7
  7430  0232  087A               	movf	??_I2C_DO_RX,w
  7431  0233  0081               	movwf	1
  7432  0234  3001               	movlw	1
  7433  0235  00FA               	movwf	??_I2C_DO_RX
  7434  0236  087A               	movf	??_I2C_DO_RX,w
  7435  0237  07B7               	addwf	low ((_I2C_Status| 0+23)),f
  7436                           
  7437                           ;i2c_master.c: 381: if(--I2C_Status.data_length)
  7438  0238  3001               	movlw	1
  7439  0239  02B8               	subwf	_I2C_Status+24,f
  7440  023A  3000               	movlw	0
  7441  023B  3BB9               	subwfb	_I2C_Status+25,f
  7442  023C  0838               	movf	_I2C_Status+24,w
  7443  023D  0439               	iorwf	_I2C_Status+25,w
  7444  023E  1903               	btfsc	3,2
  7445  023F  2A44               	goto	i1l403
  7446                           
  7447                           ;i2c_master.c: 382: {
  7448                           ;i2c_master.c: 383: I2C_MasterSendAck();
  7449  0240  3185  25B4         	fcall	_I2C_MasterSendAck
  7450                           
  7451                           ;i2c_master.c: 384: return I2C_RCEN;
  7452  0242  3005               	movlw	5
  7453                           
  7454                           ;i2c_master.c: 385: }
  7455  0243  0008               	return
  7456  0244                     i1l403:	
  7457                           
  7458                           ;i2c_master.c: 386: else
  7459                           ;i2c_master.c: 387: {
  7460                           ;i2c_master.c: 388: I2C_Status.bufferFree = 1;
  7461  0244  15BC               	bsf	_I2C_Status+28,3
  7462                           
  7463                           ;i2c_master.c: 389: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
  7464  0245  2A4C               	goto	i1l2337
  7465  0246                     i1l2327:	
  7466                           ;i2c_master.c: 390: {
  7467                           ;i2c_master.c: 391: case I2C_RESTART_WRITE:
  7468                           
  7469                           
  7470                           ;i2c_master.c: 392: case I2C_RESTART_READ:
  7471                           ;i2c_master.c: 393: return I2C_DO_RX_NACK_RESTART();
  7472  0246  3185  2598         	fcall	_I2C_DO_RX_NACK_RESTART
  7473  0248  0008               	return
  7474  0249                     i1l2331:	
  7475                           ;i2c_master.c: 395: case I2C_CONTINUE:
  7476                           
  7477                           ;i2c_master.c: 394: default:
  7478                           
  7479                           
  7480                           ;i2c_master.c: 396: case I2C_STOP:
  7481                           ;i2c_master.c: 397: return I2C_DO_RX_NACK_STOP();
  7482  0249  3185  259C         	fcall	_I2C_DO_RX_NACK_STOP
  7483                           
  7484                           ;i2c_master.c: 398: }
  7485  024B  0008               	return
  7486  024C                     i1l2337:	
  7487  024C  0020               	movlb	0	; select bank0
  7488  024D  082C               	movf	low ((_I2C_Status| 0+12)),w
  7489  024E  00FA               	movwf	??_I2C_DO_RX
  7490  024F  087A               	movf	??_I2C_DO_RX,w
  7491  0250  00F9               	movwf	I2C_CallbackReturnReset@funPtr
  7492  0251  0821               	movf	_I2C_Status+1,w
  7493  0252  008A               	movwf	10
  7494  0253  0820               	movf	_I2C_Status,w
  7495  0254  000A               	callw
  7496  0255  3182               	pagesel	$
  7497                           
  7498                           ; Switch size 1, requested type "space"
  7499                           ; Number of cases is 4, Range of values is 1 to 4
  7500                           ; switch strategies available:
  7501                           ; Name         Instructions Cycles
  7502                           ; simple_byte           13     7 (average)
  7503                           ; direct_byte           17     9 (fixed)
  7504                           ; jumptable            263     9 (fixed)
  7505                           ;	Chosen strategy is simple_byte
  7506  0256  3A01               	xorlw	1	; case 1
  7507  0257  1903               	skipnz
  7508  0258  2A49               	goto	i1l2331
  7509  0259  3A03               	xorlw	3	; case 2
  7510  025A  1903               	skipnz
  7511  025B  2A46               	goto	i1l2327
  7512  025C  3A01               	xorlw	1	; case 3
  7513  025D  1903               	skipnz
  7514  025E  2A46               	goto	i1l2327
  7515  025F  3A07               	xorlw	7	; case 4
  7516  0260  1903               	skipnz
  7517  0261  2A49               	goto	i1l2331
  7518  0262  2A49               	goto	i1l2331
  7519  0263  0008               	return
  7520  0264                     __end_of_I2C_DO_RX:	
  7521                           
  7522                           	psect	text42
  7523  01A4                     __ptext42:	
  7524 ;; *************** function _I2C_DO_TX *****************
  7525 ;; Defined at:
  7526 ;;		line 354 in file "mcc_generated_files/i2c_master.c"
  7527 ;; Parameters:    Size  Location     Type
  7528 ;;		None
  7529 ;; Auto vars:     Size  Location     Type
  7530 ;;		None
  7531 ;; Return value:  Size  Location     Type
  7532 ;;                  1    wreg      enum E12103
  7533 ;; Registers used:
  7534 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7535 ;; Tracked objects:
  7536 ;;		On entry : 0/0
  7537 ;;		On exit  : 0/0
  7538 ;;		Unchanged: 0/0
  7539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7541 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7542 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7543 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7544 ;;Total ram usage:        3 bytes
  7545 ;; Hardware stack levels used:    1
  7546 ;; Hardware stack levels required when called:    3
  7547 ;; This function calls:
  7548 ;;		Absolute function
  7549 ;;		_I2C_CallbackReturnReset
  7550 ;;		_I2C_CallbackReturnStop
  7551 ;;		_I2C_DO_SEND_RESTART_READ
  7552 ;;		_I2C_DO_SEND_RESTART_WRITE
  7553 ;;		_I2C_DO_SEND_STOP
  7554 ;;		_I2C_MasterIsNack
  7555 ;;		_I2C_MasterSendTxData
  7556 ;;		_rd1RegCompleteHandler
  7557 ;;		_rd2RegCompleteHandler
  7558 ;;		_rdBlkRegCompleteHandler
  7559 ;;		_wr1RegCompleteHandler
  7560 ;;		_wr2RegCompleteHandler
  7561 ;; This function is called by:
  7562 ;;		_I2C_MasterFsm
  7563 ;; This function uses a non-reentrant model
  7564 ;;
  7565                           
  7566                           
  7567                           ;psect for function _I2C_DO_TX
  7568  01A4                     _I2C_DO_TX:	
  7569                           
  7570                           ;i2c_master.c: 356: if(I2C_MasterIsNack())
  7571                           
  7572                           ;incstack = 0
  7573                           ; Regs used in _I2C_DO_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7574  01A4  3185  257B  3181   	fcall	_I2C_MasterIsNack
  7575  01A7  3A00               	xorlw	0
  7576  01A8  1D03               	btfss	3,2
  7577  01A9  29B4               	goto	i1l2301
  7578  01AA  29D0               	goto	i1l387
  7579  01AB                     i1l2287:	
  7580                           ;i2c_master.c: 359: {
  7581                           ;i2c_master.c: 360: case I2C_RESTART_READ:
  7582                           
  7583                           ;i2c_master.c: 357: {
  7584                           ;i2c_master.c: 358: switch(I2C_Status.callbackTable[I2C_DATA_NACK](I2C_Status.callbackPa
      +                          yload[I2C_DATA_NACK]))
  7585                           
  7586                           
  7587                           ;i2c_master.c: 361: return I2C_DO_SEND_RESTART_READ();
  7588  01AB  3185  25B0         	fcall	_I2C_DO_SEND_RESTART_READ
  7589  01AD  0008               	return
  7590  01AE                     i1l2291:	
  7591                           ;i2c_master.c: 362: case I2C_RESTART_WRITE:
  7592                           
  7593                           
  7594                           ;i2c_master.c: 363: return I2C_DO_SEND_RESTART_WRITE();
  7595  01AE  3185  25AC         	fcall	_I2C_DO_SEND_RESTART_WRITE
  7596  01B0  0008               	return
  7597  01B1                     i1l2295:	
  7598                           ;i2c_master.c: 365: case I2C_CONTINUE:
  7599                           
  7600                           ;i2c_master.c: 364: default:
  7601                           
  7602                           
  7603                           ;i2c_master.c: 366: case I2C_STOP:
  7604                           ;i2c_master.c: 367: return I2C_DO_SEND_STOP();
  7605  01B1  3185  25A4         	fcall	_I2C_DO_SEND_STOP
  7606                           
  7607                           ;i2c_master.c: 368: }
  7608  01B3  0008               	return
  7609  01B4                     i1l2301:	
  7610  01B4  0020               	movlb	0	; select bank0
  7611  01B5  082F               	movf	low ((_I2C_Status| 0+15)),w
  7612  01B6  00FA               	movwf	??_I2C_DO_TX
  7613  01B7  087A               	movf	??_I2C_DO_TX,w
  7614  01B8  00F9               	movwf	I2C_CallbackReturnReset@funPtr
  7615  01B9  3006               	movlw	6
  7616  01BA  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
  7617  01BB  0086               	movwf	6
  7618  01BC  0187               	clrf	7
  7619  01BD  3F41               	moviw [1]fsr1
  7620  01BE  008A               	movwf	10
  7621  01BF  3F40               	moviw [0]fsr1
  7622  01C0  000A               	callw
  7623  01C1  3181               	pagesel	$
  7624                           
  7625                           ; Switch size 1, requested type "space"
  7626                           ; Number of cases is 4, Range of values is 1 to 4
  7627                           ; switch strategies available:
  7628                           ; Name         Instructions Cycles
  7629                           ; simple_byte           13     7 (average)
  7630                           ; direct_byte           17     9 (fixed)
  7631                           ; jumptable            263     9 (fixed)
  7632                           ;	Chosen strategy is simple_byte
  7633  01C2  3A01               	xorlw	1	; case 1
  7634  01C3  1903               	skipnz
  7635  01C4  29B1               	goto	i1l2295
  7636  01C5  3A03               	xorlw	3	; case 2
  7637  01C6  1903               	skipnz
  7638  01C7  29AB               	goto	i1l2287
  7639  01C8  3A01               	xorlw	1	; case 3
  7640  01C9  1903               	skipnz
  7641  01CA  29AE               	goto	i1l2291
  7642  01CB  3A07               	xorlw	7	; case 4
  7643  01CC  1903               	skipnz
  7644  01CD  29B1               	goto	i1l2295
  7645  01CE  29B1               	goto	i1l2295
  7646                           
  7647                           ;i2c_master.c: 369: }
  7648  01CF  0008               	return
  7649  01D0                     i1l387:	
  7650                           
  7651                           ;i2c_master.c: 370: else
  7652                           ;i2c_master.c: 371: {
  7653                           ;i2c_master.c: 372: I2C_Status.addressNackCheck = 0;
  7654  01D0  0020               	movlb	0	; select bank0
  7655  01D1  103C               	bcf	_I2C_Status+28,0
  7656                           
  7657                           ;i2c_master.c: 373: I2C_MasterSendTxData(*I2C_Status.data_ptr++);
  7658  01D2  3017               	movlw	23
  7659  01D3  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
  7660  01D4  0086               	movwf	6
  7661  01D5  0187               	clrf	7
  7662  01D6  3F40               	moviw [0]fsr1
  7663  01D7  0084               	movwf	4
  7664  01D8  0185               	clrf	5
  7665  01D9  0A81               	incf	1,f
  7666  01DA  0800               	movf	0,w
  7667  01DB  3185  258B  3181   	fcall	_I2C_MasterSendTxData
  7668                           
  7669                           ;i2c_master.c: 374: return (--I2C_Status.data_length)?I2C_TX:I2C_TX_EMPTY;
  7670  01DE  3001               	movlw	1
  7671  01DF  0020               	movlb	0	; select bank0
  7672  01E0  02B8               	subwf	_I2C_Status+24,f
  7673  01E1  3000               	movlw	0
  7674  01E2  3BB9               	subwfb	_I2C_Status+25,f
  7675  01E3  0838               	movf	_I2C_Status+24,w
  7676  01E4  0439               	iorwf	_I2C_Status+25,w
  7677  01E5  1D03               	btfss	3,2
  7678  01E6  29E9               	goto	i1l2309
  7679  01E7  3006               	movlw	6
  7680  01E8  29EA               	goto	L1
  7681  01E9                     i1l2309:	
  7682  01E9  3003               	movlw	3
  7683  01EA                     L1:	
  7684  01EA  00FB               	movwf	_I2C_DO_TX$794
  7685  01EB  3000               	movlw	0
  7686  01EC  00FC               	movwf	_I2C_DO_TX$794+1
  7687  01ED  087B               	movf	_I2C_DO_TX$794,w
  7688  01EE  0008               	return
  7689  01EF                     __end_of_I2C_DO_TX:	
  7690                           
  7691                           	psect	text43
  7692  0550                     __ptext43:	
  7693 ;; *************** function _I2C_DO_SEND_ADR_WRITE *****************
  7694 ;; Defined at:
  7695 ;;		line 347 in file "mcc_generated_files/i2c_master.c"
  7696 ;; Parameters:    Size  Location     Type
  7697 ;;		None
  7698 ;; Auto vars:     Size  Location     Type
  7699 ;;		None
  7700 ;; Return value:  Size  Location     Type
  7701 ;;                  1    wreg      enum E12103
  7702 ;; Registers used:
  7703 ;;		wreg, status,2, status,0, pclath, cstack
  7704 ;; Tracked objects:
  7705 ;;		On entry : 0/0
  7706 ;;		On exit  : 0/0
  7707 ;;		Unchanged: 0/0
  7708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7713 ;;Total ram usage:        0 bytes
  7714 ;; Hardware stack levels used:    1
  7715 ;; Hardware stack levels required when called:    1
  7716 ;; This function calls:
  7717 ;;		_I2C_MasterSendTxData
  7718 ;; This function is called by:
  7719 ;;		_I2C_MasterFsm
  7720 ;; This function uses a non-reentrant model
  7721 ;;
  7722                           
  7723                           
  7724                           ;psect for function _I2C_DO_SEND_ADR_WRITE
  7725  0550                     _I2C_DO_SEND_ADR_WRITE:	
  7726                           
  7727                           ;i2c_master.c: 349: I2C_Status.addressNackCheck = 1;
  7728                           
  7729                           ;incstack = 0
  7730                           ; Regs used in _I2C_DO_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
  7731  0550  0020               	movlb	0	; select bank0
  7732  0551  143C               	bsf	_I2C_Status+28,0
  7733                           
  7734                           ;i2c_master.c: 350: I2C_MasterSendTxData(I2C_Status.address << 1);
  7735  0552  3536               	lslf	_I2C_Status+22,w
  7736  0553  3185  258B         	fcall	_I2C_MasterSendTxData
  7737                           
  7738                           ;i2c_master.c: 351: return I2C_TX;
  7739  0555  3003               	movlw	3
  7740  0556  0008               	return
  7741  0557                     __end_of_I2C_DO_SEND_ADR_WRITE:	
  7742                           
  7743                           	psect	text44
  7744  0539                     __ptext44:	
  7745 ;; *************** function _I2C_DO_SEND_ADR_READ *****************
  7746 ;; Defined at:
  7747 ;;		line 340 in file "mcc_generated_files/i2c_master.c"
  7748 ;; Parameters:    Size  Location     Type
  7749 ;;		None
  7750 ;; Auto vars:     Size  Location     Type
  7751 ;;		None
  7752 ;; Return value:  Size  Location     Type
  7753 ;;                  1    wreg      enum E12103
  7754 ;; Registers used:
  7755 ;;		wreg, status,2, status,0, pclath, cstack
  7756 ;; Tracked objects:
  7757 ;;		On entry : 0/0
  7758 ;;		On exit  : 0/0
  7759 ;;		Unchanged: 0/0
  7760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7764 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7765 ;;Total ram usage:        0 bytes
  7766 ;; Hardware stack levels used:    1
  7767 ;; Hardware stack levels required when called:    1
  7768 ;; This function calls:
  7769 ;;		_I2C_MasterSendTxData
  7770 ;; This function is called by:
  7771 ;;		_I2C_MasterFsm
  7772 ;; This function uses a non-reentrant model
  7773 ;;
  7774                           
  7775                           
  7776                           ;psect for function _I2C_DO_SEND_ADR_READ
  7777  0539                     _I2C_DO_SEND_ADR_READ:	
  7778                           
  7779                           ;i2c_master.c: 342: I2C_Status.addressNackCheck = 1;
  7780                           
  7781                           ;incstack = 0
  7782                           ; Regs used in _I2C_DO_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
  7783  0539  0020               	movlb	0	; select bank0
  7784  053A  143C               	bsf	_I2C_Status+28,0
  7785                           
  7786                           ;i2c_master.c: 343: I2C_MasterSendTxData(I2C_Status.address << 1 | 1);
  7787  053B  1403               	setc
  7788  053C  0D36               	rlf	_I2C_Status+22,w
  7789  053D  3185  258B         	fcall	_I2C_MasterSendTxData
  7790                           
  7791                           ;i2c_master.c: 344: return I2C_RCEN;
  7792  053F  3005               	movlw	5
  7793  0540  0008               	return
  7794  0541                     __end_of_I2C_DO_SEND_ADR_READ:	
  7795                           
  7796                           	psect	text45
  7797  0586                     __ptext45:	
  7798 ;; *************** function _I2C_DO_IDLE *****************
  7799 ;; Defined at:
  7800 ;;		line 333 in file "mcc_generated_files/i2c_master.c"
  7801 ;; Parameters:    Size  Location     Type
  7802 ;;		None
  7803 ;; Auto vars:     Size  Location     Type
  7804 ;;		None
  7805 ;; Return value:  Size  Location     Type
  7806 ;;                  1    wreg      enum E12103
  7807 ;; Registers used:
  7808 ;;		wreg, status,2
  7809 ;; Tracked objects:
  7810 ;;		On entry : 0/0
  7811 ;;		On exit  : 0/0
  7812 ;;		Unchanged: 0/0
  7813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7817 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7818 ;;Total ram usage:        0 bytes
  7819 ;; Hardware stack levels used:    1
  7820 ;; This function calls:
  7821 ;;		Nothing
  7822 ;; This function is called by:
  7823 ;;		_I2C_MasterFsm
  7824 ;; This function uses a non-reentrant model
  7825 ;;
  7826                           
  7827                           
  7828                           ;psect for function _I2C_DO_IDLE
  7829  0586                     _I2C_DO_IDLE:	
  7830                           
  7831                           ;i2c_master.c: 335: I2C_Status.busy = 0;
  7832                           
  7833                           ;incstack = 0
  7834                           ; Regs used in _I2C_DO_IDLE: [wreg+status,2]
  7835  0586  0020               	movlb	0	; select bank0
  7836  0587  10BC               	bcf	_I2C_Status+28,1
  7837                           
  7838                           ;i2c_master.c: 336: I2C_Status.error = I2C_NOERR;
  7839  0588  01BB               	clrf	_I2C_Status+27
  7840                           
  7841                           ;i2c_master.c: 337: return I2C_RESET;
  7842  0589  300E               	movlw	14
  7843  058A  0008               	return
  7844  058B                     __end_of_I2C_DO_IDLE:	
  7845                           
  7846                           	psect	text46
  7847  0358                     __ptext46:	
  7848 ;; *************** function _I2C_DO_TX_EMPTY *****************
  7849 ;; Defined at:
  7850 ;;		line 409 in file "mcc_generated_files/i2c_master.c"
  7851 ;; Parameters:    Size  Location     Type
  7852 ;;		None
  7853 ;; Auto vars:     Size  Location     Type
  7854 ;;		None
  7855 ;; Return value:  Size  Location     Type
  7856 ;;                  1    wreg      enum E12103
  7857 ;; Registers used:
  7858 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7859 ;; Tracked objects:
  7860 ;;		On entry : 0/0
  7861 ;;		On exit  : 0/0
  7862 ;;		Unchanged: 0/0
  7863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7866 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7867 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7868 ;;Total ram usage:        1 bytes
  7869 ;; Hardware stack levels used:    1
  7870 ;; Hardware stack levels required when called:    3
  7871 ;; This function calls:
  7872 ;;		Absolute function
  7873 ;;		_I2C_CallbackReturnReset
  7874 ;;		_I2C_CallbackReturnStop
  7875 ;;		_I2C_DO_SEND_RESTART
  7876 ;;		_I2C_DO_SEND_STOP
  7877 ;;		_I2C_MasterSetIrq
  7878 ;;		_rd1RegCompleteHandler
  7879 ;;		_rd2RegCompleteHandler
  7880 ;;		_rdBlkRegCompleteHandler
  7881 ;;		_wr1RegCompleteHandler
  7882 ;;		_wr2RegCompleteHandler
  7883 ;; This function is called by:
  7884 ;;		_I2C_MasterFsm
  7885 ;; This function uses a non-reentrant model
  7886 ;;
  7887                           
  7888                           
  7889                           ;psect for function _I2C_DO_TX_EMPTY
  7890  0358                     _I2C_DO_TX_EMPTY:	
  7891                           
  7892                           ;i2c_master.c: 411: I2C_Status.bufferFree = 1;
  7893                           
  7894                           ;incstack = 0
  7895                           ; Regs used in _I2C_DO_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7896  0358  0020               	movlb	0	; select bank0
  7897  0359  15BC               	bsf	_I2C_Status+28,3
  7898                           
  7899                           ;i2c_master.c: 412: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
  7900  035A  2B65               	goto	i1l2365
  7901  035B                     i1l2349:	
  7902                           ;i2c_master.c: 413: {
  7903                           ;i2c_master.c: 414: case I2C_RESTART_READ:
  7904                           
  7905                           
  7906                           ;i2c_master.c: 415: case I2C_RESTART_WRITE:
  7907                           ;i2c_master.c: 416: return I2C_DO_SEND_RESTART();
  7908  035B  3185  25A8         	fcall	_I2C_DO_SEND_RESTART
  7909  035D  0008               	return
  7910  035E                     i1l2353:	
  7911                           ;i2c_master.c: 417: case I2C_CONTINUE:
  7912                           
  7913                           
  7914                           ;i2c_master.c: 418: I2C_MasterSetIrq();
  7915  035E  3185  25C9         	fcall	_I2C_MasterSetIrq
  7916                           
  7917                           ;i2c_master.c: 419: return I2C_TX;
  7918  0360  3003               	movlw	3
  7919  0361  0008               	return
  7920  0362                     i1l2359:	
  7921                           ;i2c_master.c: 421: case I2C_STOP:
  7922                           
  7923                           ;i2c_master.c: 420: default:
  7924                           
  7925                           
  7926                           ;i2c_master.c: 422: return I2C_DO_SEND_STOP();
  7927  0362  3185  25A4         	fcall	_I2C_DO_SEND_STOP
  7928                           
  7929                           ;i2c_master.c: 423: }
  7930  0364  0008               	return
  7931  0365                     i1l2365:	
  7932  0365  0020               	movlb	0	; select bank0
  7933  0366  082C               	movf	low ((_I2C_Status| 0+12)),w
  7934  0367  00FA               	movwf	??_I2C_DO_TX_EMPTY
  7935  0368  087A               	movf	??_I2C_DO_TX_EMPTY,w
  7936  0369  00F9               	movwf	I2C_CallbackReturnReset@funPtr
  7937  036A  0821               	movf	_I2C_Status+1,w
  7938  036B  008A               	movwf	10
  7939  036C  0820               	movf	_I2C_Status,w
  7940  036D  000A               	callw
  7941  036E  3183               	pagesel	$
  7942                           
  7943                           ; Switch size 1, requested type "space"
  7944                           ; Number of cases is 4, Range of values is 1 to 4
  7945                           ; switch strategies available:
  7946                           ; Name         Instructions Cycles
  7947                           ; simple_byte           13     7 (average)
  7948                           ; direct_byte           17     9 (fixed)
  7949                           ; jumptable            263     9 (fixed)
  7950                           ;	Chosen strategy is simple_byte
  7951  036F  3A01               	xorlw	1	; case 1
  7952  0370  1903               	skipnz
  7953  0371  2B62               	goto	i1l2359
  7954  0372  3A03               	xorlw	3	; case 2
  7955  0373  1903               	skipnz
  7956  0374  2B5B               	goto	i1l2349
  7957  0375  3A01               	xorlw	1	; case 3
  7958  0376  1903               	skipnz
  7959  0377  2B5B               	goto	i1l2349
  7960  0378  3A07               	xorlw	7	; case 4
  7961  0379  1903               	skipnz
  7962  037A  2B5E               	goto	i1l2353
  7963  037B  2B62               	goto	i1l2359
  7964  037C  0008               	return
  7965  037D                     __end_of_I2C_DO_TX_EMPTY:	
  7966                           
  7967                           	psect	text47
  7968  05C9                     __ptext47:	
  7969 ;; *************** function _I2C_MasterSetIrq *****************
  7970 ;; Defined at:
  7971 ;;		line 645 in file "mcc_generated_files/i2c_master.c"
  7972 ;; Parameters:    Size  Location     Type
  7973 ;;		None
  7974 ;; Auto vars:     Size  Location     Type
  7975 ;;		None
  7976 ;; Return value:  Size  Location     Type
  7977 ;;                  1    wreg      void 
  7978 ;; Registers used:
  7979 ;;		None
  7980 ;; Tracked objects:
  7981 ;;		On entry : 0/0
  7982 ;;		On exit  : 0/0
  7983 ;;		Unchanged: 0/0
  7984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7988 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7989 ;;Total ram usage:        0 bytes
  7990 ;; Hardware stack levels used:    1
  7991 ;; This function calls:
  7992 ;;		Nothing
  7993 ;; This function is called by:
  7994 ;;		_I2C_DO_TX_EMPTY
  7995 ;; This function uses a non-reentrant model
  7996 ;;
  7997                           
  7998                           
  7999                           ;psect for function _I2C_MasterSetIrq
  8000  05C9                     _I2C_MasterSetIrq:	
  8001                           
  8002                           ;i2c_master.c: 647: PIR1bits.SSP1IF = 1;
  8003                           
  8004                           ;incstack = 0
  8005                           ; Regs used in _I2C_MasterSetIrq: []
  8006  05C9  0020               	movlb	0	; select bank0
  8007  05CA  1590               	bsf	16,3	;volatile
  8008  05CB  0008               	return
  8009  05CC                     __end_of_I2C_MasterSetIrq:	
  8010                           
  8011                           	psect	text48
  8012  057B                     __ptext48:	
  8013 ;; *************** function _I2C_MasterIsNack *****************
  8014 ;; Defined at:
  8015 ;;		line 598 in file "mcc_generated_files/i2c_master.c"
  8016 ;; Parameters:    Size  Location     Type
  8017 ;;		None
  8018 ;; Auto vars:     Size  Location     Type
  8019 ;;		None
  8020 ;; Return value:  Size  Location     Type
  8021 ;;                  1    wreg      unsigned char 
  8022 ;; Registers used:
  8023 ;;		wreg, status,2, status,0
  8024 ;; Tracked objects:
  8025 ;;		On entry : 0/0
  8026 ;;		On exit  : 0/0
  8027 ;;		Unchanged: 0/0
  8028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8033 ;;Total ram usage:        0 bytes
  8034 ;; Hardware stack levels used:    1
  8035 ;; This function calls:
  8036 ;;		Nothing
  8037 ;; This function is called by:
  8038 ;;		_I2C_MasterFsm
  8039 ;;		_I2C_DO_TX
  8040 ;; This function uses a non-reentrant model
  8041 ;;
  8042                           
  8043                           
  8044                           ;psect for function _I2C_MasterIsNack
  8045  057B                     _I2C_MasterIsNack:	
  8046                           
  8047                           ;i2c_master.c: 600: return SSP1CON2bits.ACKSTAT;
  8048                           
  8049                           ;incstack = 0
  8050                           ; Regs used in _I2C_MasterIsNack: [wreg+status,2+status,0]
  8051  057B  0024               	movlb	4	; select bank4
  8052  057C  0E16               	swapf	22,w	;volatile
  8053  057D  0C89               	rrf	9,f
  8054  057E  0C89               	rrf	9,f
  8055  057F  3901               	andlw	1
  8056  0580  0008               	return
  8057  0581                     __end_of_I2C_MasterIsNack:	
  8058                           
  8059                           	psect	text49
  8060  058B                     __ptext49:	
  8061 ;; *************** function _I2C_MasterSendTxData *****************
  8062 ;; Defined at:
  8063 ;;		line 568 in file "mcc_generated_files/i2c_master.c"
  8064 ;; Parameters:    Size  Location     Type
  8065 ;;  data            1    wreg     unsigned char 
  8066 ;; Auto vars:     Size  Location     Type
  8067 ;;  data            1    0[COMMON] unsigned char 
  8068 ;; Return value:  Size  Location     Type
  8069 ;;                  1    wreg      void 
  8070 ;; Registers used:
  8071 ;;		wreg
  8072 ;; Tracked objects:
  8073 ;;		On entry : 0/0
  8074 ;;		On exit  : 0/0
  8075 ;;		Unchanged: 0/0
  8076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8078 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8080 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8081 ;;Total ram usage:        1 bytes
  8082 ;; Hardware stack levels used:    1
  8083 ;; This function calls:
  8084 ;;		Nothing
  8085 ;; This function is called by:
  8086 ;;		_I2C_DO_SEND_ADR_READ
  8087 ;;		_I2C_DO_SEND_ADR_WRITE
  8088 ;;		_I2C_DO_TX
  8089 ;; This function uses a non-reentrant model
  8090 ;;
  8091                           
  8092                           
  8093                           ;psect for function _I2C_MasterSendTxData
  8094  058B                     _I2C_MasterSendTxData:	
  8095                           
  8096                           ;incstack = 0
  8097                           ; Regs used in _I2C_MasterSendTxData: [wreg]
  8098                           ;I2C_MasterSendTxData@data stored from wreg
  8099  058B  00F0               	movwf	I2C_MasterSendTxData@data
  8100                           
  8101                           ;i2c_master.c: 570: SSP1BUF = data;
  8102  058C  0870               	movf	I2C_MasterSendTxData@data,w
  8103  058D  0024               	movlb	4	; select bank4
  8104  058E  0091               	movwf	17	;volatile
  8105  058F  0008               	return
  8106  0590                     __end_of_I2C_MasterSendTxData:	
  8107                           
  8108                           	psect	text50
  8109  05B4                     __ptext50:	
  8110 ;; *************** function _I2C_MasterSendAck *****************
  8111 ;; Defined at:
  8112 ;;		line 603 in file "mcc_generated_files/i2c_master.c"
  8113 ;; Parameters:    Size  Location     Type
  8114 ;;		None
  8115 ;; Auto vars:     Size  Location     Type
  8116 ;;		None
  8117 ;; Return value:  Size  Location     Type
  8118 ;;                  1    wreg      void 
  8119 ;; Registers used:
  8120 ;;		None
  8121 ;; Tracked objects:
  8122 ;;		On entry : 0/0
  8123 ;;		On exit  : 0/0
  8124 ;;		Unchanged: 0/0
  8125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8129 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8130 ;;Total ram usage:        0 bytes
  8131 ;; Hardware stack levels used:    1
  8132 ;; This function calls:
  8133 ;;		Nothing
  8134 ;; This function is called by:
  8135 ;;		_I2C_DO_RX
  8136 ;;		_I2C_DO_RX_ACK
  8137 ;; This function uses a non-reentrant model
  8138 ;;
  8139                           
  8140                           
  8141                           ;psect for function _I2C_MasterSendAck
  8142  05B4                     _I2C_MasterSendAck:	
  8143                           
  8144                           ;i2c_master.c: 605: SSP1CON2bits.ACKDT = 0;
  8145                           
  8146                           ;incstack = 0
  8147                           ; Regs used in _I2C_MasterSendAck: []
  8148  05B4  0024               	movlb	4	; select bank4
  8149  05B5  1296               	bcf	22,5	;volatile
  8150                           
  8151                           ;i2c_master.c: 606: SSP1CON2bits.ACKEN = 1;
  8152  05B6  1616               	bsf	22,4	;volatile
  8153  05B7  0008               	return
  8154  05B8                     __end_of_I2C_MasterSendAck:	
  8155                           
  8156                           	psect	text51
  8157  05CC                     __ptext51:	
  8158 ;; *************** function _I2C_MasterGetRxData *****************
  8159 ;; Defined at:
  8160 ;;		line 563 in file "mcc_generated_files/i2c_master.c"
  8161 ;; Parameters:    Size  Location     Type
  8162 ;;		None
  8163 ;; Auto vars:     Size  Location     Type
  8164 ;;		None
  8165 ;; Return value:  Size  Location     Type
  8166 ;;                  1    wreg      unsigned char 
  8167 ;; Registers used:
  8168 ;;		wreg
  8169 ;; Tracked objects:
  8170 ;;		On entry : 0/0
  8171 ;;		On exit  : 0/0
  8172 ;;		Unchanged: 0/0
  8173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8178 ;;Total ram usage:        0 bytes
  8179 ;; Hardware stack levels used:    1
  8180 ;; This function calls:
  8181 ;;		Nothing
  8182 ;; This function is called by:
  8183 ;;		_I2C_DO_RX
  8184 ;; This function uses a non-reentrant model
  8185 ;;
  8186                           
  8187                           
  8188                           ;psect for function _I2C_MasterGetRxData
  8189  05CC                     _I2C_MasterGetRxData:	
  8190                           
  8191                           ;i2c_master.c: 565: return SSP1BUF;
  8192                           
  8193                           ;incstack = 0
  8194                           ; Regs used in _I2C_MasterGetRxData: [wreg]
  8195  05CC  0024               	movlb	4	; select bank4
  8196  05CD  0811               	movf	17,w	;volatile
  8197  05CE  0008               	return
  8198  05CF                     __end_of_I2C_MasterGetRxData:	
  8199                           
  8200                           	psect	text52
  8201  05B8                     __ptext52:	
  8202 ;; *************** function _I2C_MasterSendNack *****************
  8203 ;; Defined at:
  8204 ;;		line 609 in file "mcc_generated_files/i2c_master.c"
  8205 ;; Parameters:    Size  Location     Type
  8206 ;;		None
  8207 ;; Auto vars:     Size  Location     Type
  8208 ;;		None
  8209 ;; Return value:  Size  Location     Type
  8210 ;;                  1    wreg      void 
  8211 ;; Registers used:
  8212 ;;		None
  8213 ;; Tracked objects:
  8214 ;;		On entry : 0/0
  8215 ;;		On exit  : 0/0
  8216 ;;		Unchanged: 0/0
  8217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8222 ;;Total ram usage:        0 bytes
  8223 ;; Hardware stack levels used:    1
  8224 ;; This function calls:
  8225 ;;		Nothing
  8226 ;; This function is called by:
  8227 ;;		_I2C_DO_RX_NACK_STOP
  8228 ;;		_I2C_DO_RX_NACK_RESTART
  8229 ;; This function uses a non-reentrant model
  8230 ;;
  8231                           
  8232                           
  8233                           ;psect for function _I2C_MasterSendNack
  8234  05B8                     _I2C_MasterSendNack:	
  8235                           
  8236                           ;i2c_master.c: 611: SSP1CON2bits.ACKDT = 1;
  8237                           
  8238                           ;incstack = 0
  8239                           ; Regs used in _I2C_MasterSendNack: []
  8240  05B8  0024               	movlb	4	; select bank4
  8241  05B9  1696               	bsf	22,5	;volatile
  8242                           
  8243                           ;i2c_master.c: 612: SSP1CON2bits.ACKEN = 1;
  8244  05BA  1616               	bsf	22,4	;volatile
  8245  05BB  0008               	return
  8246  05BC                     __end_of_I2C_MasterSendNack:	
  8247                           
  8248                           	psect	text53
  8249  05CF                     __ptext53:	
  8250 ;; *************** function _I2C_MasterStartRx *****************
  8251 ;; Defined at:
  8252 ;;		line 583 in file "mcc_generated_files/i2c_master.c"
  8253 ;; Parameters:    Size  Location     Type
  8254 ;;		None
  8255 ;; Auto vars:     Size  Location     Type
  8256 ;;		None
  8257 ;; Return value:  Size  Location     Type
  8258 ;;                  1    wreg      void 
  8259 ;; Registers used:
  8260 ;;		None
  8261 ;; Tracked objects:
  8262 ;;		On entry : 0/0
  8263 ;;		On exit  : 0/0
  8264 ;;		Unchanged: 0/0
  8265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8270 ;;Total ram usage:        0 bytes
  8271 ;; Hardware stack levels used:    1
  8272 ;; This function calls:
  8273 ;;		Nothing
  8274 ;; This function is called by:
  8275 ;;		_I2C_DO_RCEN
  8276 ;; This function uses a non-reentrant model
  8277 ;;
  8278                           
  8279                           
  8280                           ;psect for function _I2C_MasterStartRx
  8281  05CF                     _I2C_MasterStartRx:	
  8282                           
  8283                           ;i2c_master.c: 585: SSP1CON2bits.RCEN = 1;
  8284                           
  8285                           ;incstack = 0
  8286                           ; Regs used in _I2C_MasterStartRx: []
  8287  05CF  0024               	movlb	4	; select bank4
  8288  05D0  1596               	bsf	22,3	;volatile
  8289  05D1  0008               	return
  8290  05D2                     __end_of_I2C_MasterStartRx:	
  8291                           
  8292                           	psect	text54
  8293  05E7                     __ptext54:	
  8294 ;; *************** function _I2C_CallbackReturnReset *****************
  8295 ;; Defined at:
  8296 ;;		line 525 in file "mcc_generated_files/i2c_master.c"
  8297 ;; Parameters:    Size  Location     Type
  8298 ;;  funPtr          1    9[COMMON] PTR void 
  8299 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8300 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8301 ;; Auto vars:     Size  Location     Type
  8302 ;;		None
  8303 ;; Return value:  Size  Location     Type
  8304 ;;                  1    wreg      enum E97
  8305 ;; Registers used:
  8306 ;;		wreg
  8307 ;; Tracked objects:
  8308 ;;		On entry : 0/0
  8309 ;;		On exit  : 0/0
  8310 ;;		Unchanged: 0/0
  8311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8312 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8315 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8316 ;;Total ram usage:        1 bytes
  8317 ;; Hardware stack levels used:    1
  8318 ;; This function calls:
  8319 ;;		Nothing
  8320 ;; This function is called by:
  8321 ;;		_I2C_Open
  8322 ;;		_I2C_DO_TX
  8323 ;;		_I2C_DO_RX
  8324 ;;		_I2C_DO_TX_EMPTY
  8325 ;;		_I2C_DO_ADDRESS_NACK
  8326 ;;		_I2C_DO_RX_EMPTY
  8327 ;; This function uses a non-reentrant model
  8328 ;;
  8329                           
  8330                           
  8331                           ;psect for function _I2C_CallbackReturnReset
  8332  05E7                     _I2C_CallbackReturnReset:	
  8333                           
  8334                           ;i2c_master.c: 527: return I2C_RESET_LINK;
  8335                           
  8336                           ;incstack = 0
  8337                           ; Regs used in _I2C_CallbackReturnReset: [wreg]
  8338  05E7  3005               	movlw	5
  8339  05E8  0008               	return
  8340  05E9                     __end_of_I2C_CallbackReturnReset:	
  8341                           
  8342                           	psect	text55
  8343  05E9                     __ptext55:	
  8344 ;; *************** function _I2C_CallbackReturnStop *****************
  8345 ;; Defined at:
  8346 ;;		line 520 in file "mcc_generated_files/i2c_master.c"
  8347 ;; Parameters:    Size  Location     Type
  8348 ;;  funPtr          1    9[COMMON] PTR void 
  8349 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8350 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8351 ;; Auto vars:     Size  Location     Type
  8352 ;;		None
  8353 ;; Return value:  Size  Location     Type
  8354 ;;                  1    wreg      enum E97
  8355 ;; Registers used:
  8356 ;;		wreg
  8357 ;; Tracked objects:
  8358 ;;		On entry : 0/0
  8359 ;;		On exit  : 0/0
  8360 ;;		Unchanged: 0/0
  8361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8362 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8365 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8366 ;;Total ram usage:        1 bytes
  8367 ;; Hardware stack levels used:    1
  8368 ;; This function calls:
  8369 ;;		Nothing
  8370 ;; This function is called by:
  8371 ;;		_I2C_Open
  8372 ;;		_I2C_SetCallback
  8373 ;;		_I2C_DO_TX
  8374 ;;		_I2C_DO_RX
  8375 ;;		_I2C_DO_TX_EMPTY
  8376 ;;		_I2C_DO_ADDRESS_NACK
  8377 ;;		_I2C_DO_RX_EMPTY
  8378 ;; This function uses a non-reentrant model
  8379 ;;
  8380                           
  8381                           
  8382                           ;psect for function _I2C_CallbackReturnStop
  8383  05E9                     _I2C_CallbackReturnStop:	
  8384                           
  8385                           ;i2c_master.c: 522: return I2C_STOP;
  8386                           
  8387                           ;incstack = 0
  8388                           ; Regs used in _I2C_CallbackReturnStop: [wreg]
  8389  05E9  3001               	movlw	1
  8390  05EA  0008               	return
  8391  05EB                     __end_of_I2C_CallbackReturnStop:	
  8392                           
  8393                           	psect	text56
  8394  0417                     __ptext56:	
  8395 ;; *************** function _rdBlkRegCompleteHandler *****************
  8396 ;; Defined at:
  8397 ;;		line 170 in file "mcc_generated_files/examples/i2c_master_example.c"
  8398 ;; Parameters:    Size  Location     Type
  8399 ;;  ptr             1    9[COMMON] PTR void 
  8400 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8401 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8402 ;; Auto vars:     Size  Location     Type
  8403 ;;		None
  8404 ;; Return value:  Size  Location     Type
  8405 ;;                  1    wreg      enum E97
  8406 ;; Registers used:
  8407 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8408 ;; Tracked objects:
  8409 ;;		On entry : 0/0
  8410 ;;		On exit  : 0/0
  8411 ;;		Unchanged: 0/0
  8412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8413 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8416 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8417 ;;Total ram usage:        1 bytes
  8418 ;; Hardware stack levels used:    1
  8419 ;; Hardware stack levels required when called:    2
  8420 ;; This function calls:
  8421 ;;		_I2C_SetBuffer
  8422 ;;		_I2C_SetDataCompleteCallback
  8423 ;; This function is called by:
  8424 ;;		_I2C_ReadDataBlock
  8425 ;;		_I2C_DO_TX
  8426 ;;		_I2C_DO_RX
  8427 ;;		_I2C_DO_TX_EMPTY
  8428 ;;		_I2C_DO_ADDRESS_NACK
  8429 ;;		_I2C_DO_RX_EMPTY
  8430 ;; This function uses a non-reentrant model
  8431 ;;
  8432                           
  8433                           
  8434                           ;psect for function _rdBlkRegCompleteHandler
  8435  0417                     _rdBlkRegCompleteHandler:	
  8436                           
  8437                           ;i2c_master_example.c: 172: I2C_SetBuffer(((i2c_buffer_t *)ptr)->data,((i2c_buffer_t*)pt
      +                          r)->len);
  8438                           
  8439                           ;incstack = 0
  8440                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  8441  0417  0879               	movf	rdBlkRegCompleteHandler@ptr,w
  8442  0418  0086               	movwf	6
  8443  0419  0187               	clrf	7
  8444  041A  3F40               	moviw [0]fsr1
  8445  041B  00F0               	movwf	I2C_SetBuffer@bufferSize
  8446  041C  3F41               	moviw [1]fsr1
  8447  041D  00F1               	movwf	I2C_SetBuffer@bufferSize+1
  8448  041E  0879               	movf	rdBlkRegCompleteHandler@ptr,w
  8449  041F  3E02               	addlw	2
  8450  0420  0086               	movwf	6
  8451  0421  0187               	clrf	7
  8452  0422  0801               	movf	1,w
  8453  0423  3184  24C1  3184   	fcall	_I2C_SetBuffer
  8454                           
  8455                           ;i2c_master_example.c: 173: I2C_SetDataCompleteCallback((0),(0));
  8456  0426  3000               	movlw	0
  8457  0427  00F5               	movwf	I2C_SetDataCompleteCallback@cb
  8458  0428  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
  8459  0429  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
  8460  042A  3184  24F3         	fcall	_I2C_SetDataCompleteCallback
  8461                           
  8462                           ;i2c_master_example.c: 174: return I2C_RESTART_READ;
  8463  042C  3002               	movlw	2
  8464  042D  0008               	return
  8465  042E                     __end_of_rdBlkRegCompleteHandler:	
  8466                           
  8467                           	psect	text57
  8468  0481                     __ptext57:	
  8469 ;; *************** function _wr1RegCompleteHandler *****************
  8470 ;; Defined at:
  8471 ;;		line 156 in file "mcc_generated_files/examples/i2c_master_example.c"
  8472 ;; Parameters:    Size  Location     Type
  8473 ;;  ptr             1    9[COMMON] PTR void 
  8474 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8475 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8476 ;; Auto vars:     Size  Location     Type
  8477 ;;		None
  8478 ;; Return value:  Size  Location     Type
  8479 ;;                  1    wreg      enum E97
  8480 ;; Registers used:
  8481 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8482 ;; Tracked objects:
  8483 ;;		On entry : 0/0
  8484 ;;		On exit  : 0/0
  8485 ;;		Unchanged: 0/0
  8486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8487 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8490 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8491 ;;Total ram usage:        1 bytes
  8492 ;; Hardware stack levels used:    1
  8493 ;; Hardware stack levels required when called:    2
  8494 ;; This function calls:
  8495 ;;		_I2C_SetBuffer
  8496 ;;		_I2C_SetDataCompleteCallback
  8497 ;; This function is called by:
  8498 ;;		_I2C_Write1ByteRegister
  8499 ;;		_I2C_DO_TX
  8500 ;;		_I2C_DO_RX
  8501 ;;		_I2C_DO_TX_EMPTY
  8502 ;;		_I2C_DO_ADDRESS_NACK
  8503 ;;		_I2C_DO_RX_EMPTY
  8504 ;; This function uses a non-reentrant model
  8505 ;;
  8506                           
  8507                           
  8508                           ;psect for function _wr1RegCompleteHandler
  8509  0481                     _wr1RegCompleteHandler:	
  8510                           
  8511                           ;i2c_master_example.c: 158: I2C_SetBuffer(ptr,1);
  8512                           
  8513                           ;incstack = 0
  8514                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8515  0481  3001               	movlw	1
  8516  0482  00F0               	movwf	I2C_SetBuffer@bufferSize
  8517  0483  3000               	movlw	0
  8518  0484  00F1               	movwf	I2C_SetBuffer@bufferSize+1
  8519  0485  0879               	movf	wr1RegCompleteHandler@ptr,w
  8520  0486  3184  24C1  3184   	fcall	_I2C_SetBuffer
  8521                           
  8522                           ;i2c_master_example.c: 159: I2C_SetDataCompleteCallback((0),(0));
  8523  0489  3000               	movlw	0
  8524  048A  00F5               	movwf	I2C_SetDataCompleteCallback@cb
  8525  048B  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
  8526  048C  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
  8527  048D  3184  24F3         	fcall	_I2C_SetDataCompleteCallback
  8528                           
  8529                           ;i2c_master_example.c: 160: return I2C_CONTINUE;
  8530  048F  3004               	movlw	4
  8531  0490  0008               	return
  8532  0491                     __end_of_wr1RegCompleteHandler:	
  8533                           
  8534                           	psect	text58
  8535  0491                     __ptext58:	
  8536 ;; *************** function _rd2RegCompleteHandler *****************
  8537 ;; Defined at:
  8538 ;;		line 149 in file "mcc_generated_files/examples/i2c_master_example.c"
  8539 ;; Parameters:    Size  Location     Type
  8540 ;;  ptr             1    9[COMMON] PTR void 
  8541 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8542 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8543 ;; Auto vars:     Size  Location     Type
  8544 ;;		None
  8545 ;; Return value:  Size  Location     Type
  8546 ;;                  1    wreg      enum E97
  8547 ;; Registers used:
  8548 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8549 ;; Tracked objects:
  8550 ;;		On entry : 0/0
  8551 ;;		On exit  : 0/0
  8552 ;;		Unchanged: 0/0
  8553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8554 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8557 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8558 ;;Total ram usage:        1 bytes
  8559 ;; Hardware stack levels used:    1
  8560 ;; Hardware stack levels required when called:    2
  8561 ;; This function calls:
  8562 ;;		_I2C_SetBuffer
  8563 ;;		_I2C_SetDataCompleteCallback
  8564 ;; This function is called by:
  8565 ;;		_I2C_Read2ByteRegister
  8566 ;;		_I2C_DO_TX
  8567 ;;		_I2C_DO_RX
  8568 ;;		_I2C_DO_TX_EMPTY
  8569 ;;		_I2C_DO_ADDRESS_NACK
  8570 ;;		_I2C_DO_RX_EMPTY
  8571 ;; This function uses a non-reentrant model
  8572 ;;
  8573                           
  8574                           
  8575                           ;psect for function _rd2RegCompleteHandler
  8576  0491                     _rd2RegCompleteHandler:	
  8577                           
  8578                           ;i2c_master_example.c: 151: I2C_SetBuffer(ptr,2);
  8579                           
  8580                           ;incstack = 0
  8581                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8582  0491  3002               	movlw	2
  8583  0492  00F0               	movwf	I2C_SetBuffer@bufferSize
  8584  0493  3000               	movlw	0
  8585  0494  00F1               	movwf	I2C_SetBuffer@bufferSize+1
  8586  0495  0879               	movf	rd2RegCompleteHandler@ptr,w
  8587  0496  3184  24C1  3184   	fcall	_I2C_SetBuffer
  8588                           
  8589                           ;i2c_master_example.c: 152: I2C_SetDataCompleteCallback((0),(0));
  8590  0499  3000               	movlw	0
  8591  049A  00F5               	movwf	I2C_SetDataCompleteCallback@cb
  8592  049B  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
  8593  049C  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
  8594  049D  3184  24F3         	fcall	_I2C_SetDataCompleteCallback
  8595                           
  8596                           ;i2c_master_example.c: 153: return I2C_RESTART_READ;
  8597  049F  3002               	movlw	2
  8598  04A0  0008               	return
  8599  04A1                     __end_of_rd2RegCompleteHandler:	
  8600                           
  8601                           	psect	text59
  8602  04A1                     __ptext59:	
  8603 ;; *************** function _rd1RegCompleteHandler *****************
  8604 ;; Defined at:
  8605 ;;		line 142 in file "mcc_generated_files/examples/i2c_master_example.c"
  8606 ;; Parameters:    Size  Location     Type
  8607 ;;  ptr             1    9[COMMON] PTR void 
  8608 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8609 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8610 ;; Auto vars:     Size  Location     Type
  8611 ;;		None
  8612 ;; Return value:  Size  Location     Type
  8613 ;;                  1    wreg      enum E97
  8614 ;; Registers used:
  8615 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8616 ;; Tracked objects:
  8617 ;;		On entry : 0/0
  8618 ;;		On exit  : 0/0
  8619 ;;		Unchanged: 0/0
  8620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8621 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8624 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8625 ;;Total ram usage:        1 bytes
  8626 ;; Hardware stack levels used:    1
  8627 ;; Hardware stack levels required when called:    2
  8628 ;; This function calls:
  8629 ;;		_I2C_SetBuffer
  8630 ;;		_I2C_SetDataCompleteCallback
  8631 ;; This function is called by:
  8632 ;;		_I2C_Read1ByteRegister
  8633 ;;		_I2C_DO_TX
  8634 ;;		_I2C_DO_RX
  8635 ;;		_I2C_DO_TX_EMPTY
  8636 ;;		_I2C_DO_ADDRESS_NACK
  8637 ;;		_I2C_DO_RX_EMPTY
  8638 ;; This function uses a non-reentrant model
  8639 ;;
  8640                           
  8641                           
  8642                           ;psect for function _rd1RegCompleteHandler
  8643  04A1                     _rd1RegCompleteHandler:	
  8644                           
  8645                           ;i2c_master_example.c: 144: I2C_SetBuffer(ptr,1);
  8646                           
  8647                           ;incstack = 0
  8648                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8649  04A1  3001               	movlw	1
  8650  04A2  00F0               	movwf	I2C_SetBuffer@bufferSize
  8651  04A3  3000               	movlw	0
  8652  04A4  00F1               	movwf	I2C_SetBuffer@bufferSize+1
  8653  04A5  0879               	movf	rd1RegCompleteHandler@ptr,w
  8654  04A6  3184  24C1  3184   	fcall	_I2C_SetBuffer
  8655                           
  8656                           ;i2c_master_example.c: 145: I2C_SetDataCompleteCallback((0),(0));
  8657  04A9  3000               	movlw	0
  8658  04AA  00F5               	movwf	I2C_SetDataCompleteCallback@cb
  8659  04AB  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
  8660  04AC  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
  8661  04AD  3184  24F3         	fcall	_I2C_SetDataCompleteCallback
  8662                           
  8663                           ;i2c_master_example.c: 146: return I2C_RESTART_READ;
  8664  04AF  3002               	movlw	2
  8665  04B0  0008               	return
  8666  04B1                     __end_of_rd1RegCompleteHandler:	
  8667                           
  8668                           	psect	text60
  8669  04B1                     __ptext60:	
  8670 ;; *************** function _wr2RegCompleteHandler *****************
  8671 ;; Defined at:
  8672 ;;		line 163 in file "mcc_generated_files/examples/i2c_master_example.c"
  8673 ;; Parameters:    Size  Location     Type
  8674 ;;  ptr             1    9[COMMON] PTR void 
  8675 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8676 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8677 ;; Auto vars:     Size  Location     Type
  8678 ;;		None
  8679 ;; Return value:  Size  Location     Type
  8680 ;;                  1    wreg      enum E97
  8681 ;; Registers used:
  8682 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8683 ;; Tracked objects:
  8684 ;;		On entry : 0/0
  8685 ;;		On exit  : 0/0
  8686 ;;		Unchanged: 0/0
  8687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8688 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8691 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8692 ;;Total ram usage:        1 bytes
  8693 ;; Hardware stack levels used:    1
  8694 ;; Hardware stack levels required when called:    2
  8695 ;; This function calls:
  8696 ;;		_I2C_SetBuffer
  8697 ;;		_I2C_SetDataCompleteCallback
  8698 ;; This function is called by:
  8699 ;;		_I2C_Write2ByteRegister
  8700 ;;		_I2C_DO_TX
  8701 ;;		_I2C_DO_RX
  8702 ;;		_I2C_DO_TX_EMPTY
  8703 ;;		_I2C_DO_ADDRESS_NACK
  8704 ;;		_I2C_DO_RX_EMPTY
  8705 ;; This function uses a non-reentrant model
  8706 ;;
  8707                           
  8708                           
  8709                           ;psect for function _wr2RegCompleteHandler
  8710  04B1                     _wr2RegCompleteHandler:	
  8711                           
  8712                           ;i2c_master_example.c: 165: I2C_SetBuffer(ptr,2);
  8713                           
  8714                           ;incstack = 0
  8715                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8716  04B1  3002               	movlw	2
  8717  04B2  00F0               	movwf	I2C_SetBuffer@bufferSize
  8718  04B3  3000               	movlw	0
  8719  04B4  00F1               	movwf	I2C_SetBuffer@bufferSize+1
  8720  04B5  0879               	movf	wr2RegCompleteHandler@ptr,w
  8721  04B6  3184  24C1  3184   	fcall	_I2C_SetBuffer
  8722                           
  8723                           ;i2c_master_example.c: 166: I2C_SetDataCompleteCallback((0),(0));
  8724  04B9  3000               	movlw	0
  8725  04BA  00F5               	movwf	I2C_SetDataCompleteCallback@cb
  8726  04BB  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
  8727  04BC  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
  8728  04BD  3184  24F3         	fcall	_I2C_SetDataCompleteCallback
  8729                           
  8730                           ;i2c_master_example.c: 167: return I2C_CONTINUE;
  8731  04BF  3004               	movlw	4
  8732  04C0  0008               	return
  8733  04C1                     __end_of_wr2RegCompleteHandler:	
  8734                           
  8735                           	psect	text61
  8736  04F3                     __ptext61:	
  8737 ;; *************** function _I2C_SetDataCompleteCallback *****************
  8738 ;; Defined at:
  8739 ;;		line 273 in file "mcc_generated_files/i2c_master.c"
  8740 ;; Parameters:    Size  Location     Type
  8741 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
  8742 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), 
  8743 ;;		 -> Absolute function(1), rd1RegCompleteHandler(1), 
  8744 ;;  ptr             1    7[COMMON] PTR void 
  8745 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8746 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8747 ;; Auto vars:     Size  Location     Type
  8748 ;;		None
  8749 ;; Return value:  Size  Location     Type
  8750 ;;                  1    wreg      void 
  8751 ;; Registers used:
  8752 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8753 ;; Tracked objects:
  8754 ;;		On entry : 0/0
  8755 ;;		On exit  : 0/0
  8756 ;;		Unchanged: 0/0
  8757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8758 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8760 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8761 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8762 ;;Total ram usage:        4 bytes
  8763 ;; Hardware stack levels used:    1
  8764 ;; Hardware stack levels required when called:    1
  8765 ;; This function calls:
  8766 ;;		_I2C_SetCallback
  8767 ;; This function is called by:
  8768 ;;		_I2C_Write1ByteRegister
  8769 ;;		_rd1RegCompleteHandler
  8770 ;;		_rd2RegCompleteHandler
  8771 ;;		_wr1RegCompleteHandler
  8772 ;;		_wr2RegCompleteHandler
  8773 ;;		_rdBlkRegCompleteHandler
  8774 ;;		_I2C_Read1ByteRegister
  8775 ;;		_I2C_Read2ByteRegister
  8776 ;;		_I2C_Write2ByteRegister
  8777 ;;		_I2C_ReadDataBlock
  8778 ;; This function uses a non-reentrant model
  8779 ;;
  8780                           
  8781                           
  8782                           ;psect for function _I2C_SetDataCompleteCallback
  8783  04F3                     _I2C_SetDataCompleteCallback:	
  8784                           
  8785                           ;i2c_master.c: 275: I2C_SetCallback(I2C_DATA_COMPLETE, cb, ptr);
  8786                           
  8787                           ;incstack = 0
  8788                           ; Regs used in _I2C_SetDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  8789  04F3  0876               	movf	I2C_SetDataCompleteCallback@cb+1,w
  8790  04F4  00F1               	movwf	I2C_SetCallback@cb+1
  8791  04F5  0875               	movf	I2C_SetDataCompleteCallback@cb,w
  8792  04F6  00F0               	movwf	I2C_SetCallback@cb
  8793  04F7  0877               	movf	I2C_SetDataCompleteCallback@ptr,w
  8794  04F8  00F8               	movwf	??_I2C_SetDataCompleteCallback
  8795  04F9  0878               	movf	??_I2C_SetDataCompleteCallback,w
  8796  04FA  00F2               	movwf	I2C_SetCallback@ptr
  8797  04FB  3000               	movlw	0
  8798  04FC  3183  237D         	fcall	_I2C_SetCallback
  8799  04FE  0008               	return
  8800  04FF                     __end_of_I2C_SetDataCompleteCallback:	
  8801                           
  8802                           	psect	text62
  8803  037D                     __ptext62:	
  8804 ;; *************** function _I2C_SetCallback *****************
  8805 ;; Defined at:
  8806 ;;		line 298 in file "mcc_generated_files/i2c_master.c"
  8807 ;; Parameters:    Size  Location     Type
  8808 ;;  idx             1    wreg     enum E12121
  8809 ;;  cb              2    0[COMMON] PTR FTN(PTR void ,)enum 
  8810 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), 
  8811 ;;		 -> Absolute function(1), rd1RegCompleteHandler(1), 
  8812 ;;  ptr             1    2[COMMON] PTR void 
  8813 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8814 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8815 ;; Auto vars:     Size  Location     Type
  8816 ;;  idx             1    4[COMMON] enum E12121
  8817 ;; Return value:  Size  Location     Type
  8818 ;;                  1    wreg      void 
  8819 ;; Registers used:
  8820 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8821 ;; Tracked objects:
  8822 ;;		On entry : 0/0
  8823 ;;		On exit  : 0/0
  8824 ;;		Unchanged: 0/0
  8825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8826 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8827 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8828 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8829 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8830 ;;Total ram usage:        5 bytes
  8831 ;; Hardware stack levels used:    1
  8832 ;; This function calls:
  8833 ;;		Nothing
  8834 ;; This function is called by:
  8835 ;;		_I2C_SetDataCompleteCallback
  8836 ;;		_I2C_SetAddressNackCallback
  8837 ;;		_I2C_SetWriteCollisionCallback
  8838 ;;		_I2C_SetDataNackCallback
  8839 ;;		_I2C_SetTimeoutCallback
  8840 ;; This function uses a non-reentrant model
  8841 ;;
  8842                           
  8843                           
  8844                           ;psect for function _I2C_SetCallback
  8845  037D                     _I2C_SetCallback:	
  8846                           
  8847                           ;incstack = 0
  8848                           ; Regs used in _I2C_SetCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
  8849                           ;I2C_SetCallback@idx stored from wreg
  8850  037D  00F4               	movwf	I2C_SetCallback@idx
  8851                           
  8852                           ;i2c_master.c: 300: if(cb)
  8853  037E  0870               	movf	I2C_SetCallback@cb,w
  8854  037F  0471               	iorwf	I2C_SetCallback@cb+1,w
  8855  0380  1903               	btfsc	3,2
  8856  0381  2B93               	goto	i1l2143
  8857                           
  8858                           ;i2c_master.c: 301: {
  8859                           ;i2c_master.c: 302: I2C_Status.callbackTable[idx] = cb;
  8860  0382  3574               	lslf	I2C_SetCallback@idx,w
  8861  0383  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
  8862  0384  0086               	movwf	6
  8863  0385  0187               	clrf	7
  8864  0386  0870               	movf	I2C_SetCallback@cb,w
  8865  0387  3FC0               	movwi [0]fsr1
  8866  0388  0871               	movf	I2C_SetCallback@cb+1,w
  8867  0389  3FC1               	movwi [1]fsr1
  8868                           
  8869                           ;i2c_master.c: 303: I2C_Status.callbackPayload[idx] = ptr;
  8870  038A  0872               	movf	I2C_SetCallback@ptr,w
  8871  038B  00F3               	movwf	??_I2C_SetCallback
  8872  038C  0874               	movf	I2C_SetCallback@idx,w
  8873  038D  3E2C               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
  8874  038E  0086               	movwf	6
  8875  038F  0187               	clrf	7
  8876  0390  0873               	movf	??_I2C_SetCallback,w
  8877  0391  0081               	movwf	1
  8878                           
  8879                           ;i2c_master.c: 304: }
  8880  0392  0008               	return
  8881  0393                     i1l2143:	
  8882                           
  8883                           ;i2c_master.c: 305: else
  8884                           ;i2c_master.c: 306: {
  8885                           ;i2c_master.c: 307: I2C_Status.callbackTable[idx] = I2C_CallbackReturnStop;
  8886  0393  3574               	lslf	I2C_SetCallback@idx,w
  8887  0394  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
  8888  0395  0086               	movwf	6
  8889  0396  0187               	clrf	7
  8890  0397  30E9               	movlw	low _I2C_CallbackReturnStop
  8891  0398  3FC0               	movwi [0]fsr1
  8892  0399  3005               	movlw	high _I2C_CallbackReturnStop
  8893  039A  3FC1               	movwi [1]fsr1
  8894                           
  8895                           ;i2c_master.c: 308: I2C_Status.callbackPayload[idx] = (0);
  8896  039B  0874               	movf	I2C_SetCallback@idx,w
  8897  039C  3E2C               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
  8898  039D  0086               	movwf	6
  8899  039E  0187               	clrf	7
  8900  039F  0181               	clrf	1
  8901  03A0  0008               	return
  8902  03A1                     __end_of_I2C_SetCallback:	
  8903                           
  8904                           	psect	text63
  8905  04C1                     __ptext63:	
  8906 ;; *************** function _I2C_SetBuffer *****************
  8907 ;; Defined at:
  8908 ;;		line 263 in file "mcc_generated_files/i2c_master.c"
  8909 ;; Parameters:    Size  Location     Type
  8910 ;;  buffer          1    wreg     PTR void 
  8911 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
  8912 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
  8913 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
  8914 ;;  bufferSize      2    0[COMMON] unsigned int 
  8915 ;; Auto vars:     Size  Location     Type
  8916 ;;  buffer          1    3[COMMON] PTR void 
  8917 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
  8918 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
  8919 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
  8920 ;; Return value:  Size  Location     Type
  8921 ;;                  1    wreg      void 
  8922 ;; Registers used:
  8923 ;;		wreg
  8924 ;; Tracked objects:
  8925 ;;		On entry : 0/0
  8926 ;;		On exit  : 0/0
  8927 ;;		Unchanged: 0/0
  8928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8929 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8930 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8931 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8932 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8933 ;;Total ram usage:        4 bytes
  8934 ;; Hardware stack levels used:    1
  8935 ;; This function calls:
  8936 ;;		Nothing
  8937 ;; This function is called by:
  8938 ;;		_I2C_Write1ByteRegister
  8939 ;;		_rd1RegCompleteHandler
  8940 ;;		_rd2RegCompleteHandler
  8941 ;;		_wr1RegCompleteHandler
  8942 ;;		_wr2RegCompleteHandler
  8943 ;;		_rdBlkRegCompleteHandler
  8944 ;;		_I2C_Read1ByteRegister
  8945 ;;		_I2C_Read2ByteRegister
  8946 ;;		_I2C_Write2ByteRegister
  8947 ;;		_I2C_WriteNBytes
  8948 ;;		_I2C_ReadNBytes
  8949 ;;		_I2C_ReadDataBlock
  8950 ;; This function uses a non-reentrant model
  8951 ;;
  8952                           
  8953                           
  8954                           ;psect for function _I2C_SetBuffer
  8955  04C1                     _I2C_SetBuffer:	
  8956                           
  8957                           ;incstack = 0
  8958                           ; Regs used in _I2C_SetBuffer: [wreg]
  8959                           ;I2C_SetBuffer@buffer stored from wreg
  8960  04C1  00F3               	movwf	I2C_SetBuffer@buffer
  8961                           
  8962                           ;i2c_master.c: 265: if(I2C_Status.bufferFree)
  8963  04C2  0020               	movlb	0	; select bank0
  8964  04C3  1DBC               	btfss	_I2C_Status+28,3
  8965  04C4  0008               	return
  8966                           
  8967                           ;i2c_master.c: 266: {
  8968                           ;i2c_master.c: 267: I2C_Status.data_ptr = buffer;
  8969  04C5  0873               	movf	I2C_SetBuffer@buffer,w
  8970  04C6  00F2               	movwf	??_I2C_SetBuffer
  8971  04C7  0872               	movf	??_I2C_SetBuffer,w
  8972  04C8  00B7               	movwf	low ((_I2C_Status| 0+23))
  8973                           
  8974                           ;i2c_master.c: 268: I2C_Status.data_length = bufferSize;
  8975  04C9  0871               	movf	I2C_SetBuffer@bufferSize+1,w
  8976  04CA  00B9               	movwf	_I2C_Status+25
  8977  04CB  0870               	movf	I2C_SetBuffer@bufferSize,w
  8978  04CC  00B8               	movwf	_I2C_Status+24
  8979                           
  8980                           ;i2c_master.c: 269: I2C_Status.bufferFree = 0;
  8981  04CD  11BC               	bcf	_I2C_Status+28,3
  8982  04CE  0008               	return
  8983  04CF                     __end_of_I2C_SetBuffer:	
  8984                           
  8985                           	psect	text64
  8986  05D2                     __ptext64:	
  8987 ;; *************** function _I2C_MasterStop *****************
  8988 ;; Defined at:
  8989 ;;		line 593 in file "mcc_generated_files/i2c_master.c"
  8990 ;; Parameters:    Size  Location     Type
  8991 ;;		None
  8992 ;; Auto vars:     Size  Location     Type
  8993 ;;		None
  8994 ;; Return value:  Size  Location     Type
  8995 ;;                  1    wreg      void 
  8996 ;; Registers used:
  8997 ;;		None
  8998 ;; Tracked objects:
  8999 ;;		On entry : 0/0
  9000 ;;		On exit  : 0/0
  9001 ;;		Unchanged: 0/0
  9002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9006 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9007 ;;Total ram usage:        0 bytes
  9008 ;; Hardware stack levels used:    1
  9009 ;; This function calls:
  9010 ;;		Nothing
  9011 ;; This function is called by:
  9012 ;;		_I2C_DO_SEND_STOP
  9013 ;; This function uses a non-reentrant model
  9014 ;;
  9015                           
  9016                           
  9017                           ;psect for function _I2C_MasterStop
  9018  05D2                     _I2C_MasterStop:	
  9019                           
  9020                           ;i2c_master.c: 595: SSP1CON2bits.PEN = 1;
  9021                           
  9022                           ;incstack = 0
  9023                           ; Regs used in _I2C_MasterStop: []
  9024  05D2  0024               	movlb	4	; select bank4
  9025  05D3  1516               	bsf	22,2	;volatile
  9026  05D4  0008               	return
  9027  05D5                     __end_of_I2C_MasterStop:	
  9028                           
  9029                           	psect	text65
  9030  05D5                     __ptext65:	
  9031 ;; *************** function _I2C_MasterEnableRestart *****************
  9032 ;; Defined at:
  9033 ;;		line 573 in file "mcc_generated_files/i2c_master.c"
  9034 ;; Parameters:    Size  Location     Type
  9035 ;;		None
  9036 ;; Auto vars:     Size  Location     Type
  9037 ;;		None
  9038 ;; Return value:  Size  Location     Type
  9039 ;;                  1    wreg      void 
  9040 ;; Registers used:
  9041 ;;		None
  9042 ;; Tracked objects:
  9043 ;;		On entry : 0/0
  9044 ;;		On exit  : 0/0
  9045 ;;		Unchanged: 0/0
  9046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9051 ;;Total ram usage:        0 bytes
  9052 ;; Hardware stack levels used:    1
  9053 ;; This function calls:
  9054 ;;		Nothing
  9055 ;; This function is called by:
  9056 ;;		_I2C_DO_SEND_RESTART_READ
  9057 ;;		_I2C_DO_SEND_RESTART_WRITE
  9058 ;;		_I2C_DO_SEND_RESTART
  9059 ;;		_I2C_DO_RX_EMPTY
  9060 ;; This function uses a non-reentrant model
  9061 ;;
  9062                           
  9063                           
  9064                           ;psect for function _I2C_MasterEnableRestart
  9065  05D5                     _I2C_MasterEnableRestart:	
  9066                           
  9067                           ;i2c_master.c: 575: SSP1CON2bits.RSEN = 1;
  9068                           
  9069                           ;incstack = 0
  9070                           ; Regs used in _I2C_MasterEnableRestart: []
  9071  05D5  0024               	movlb	4	; select bank4
  9072  05D6  1496               	bsf	22,1	;volatile
  9073  05D7  0008               	return
  9074  05D8                     __end_of_I2C_MasterEnableRestart:	
  9075                           
  9076                           	psect	text66
  9077  05D8                     __ptext66:	
  9078 ;; *************** function _I2C_MasterStart *****************
  9079 ;; Defined at:
  9080 ;;		line 588 in file "mcc_generated_files/i2c_master.c"
  9081 ;; Parameters:    Size  Location     Type
  9082 ;;		None
  9083 ;; Auto vars:     Size  Location     Type
  9084 ;;		None
  9085 ;; Return value:  Size  Location     Type
  9086 ;;                  1    wreg      void 
  9087 ;; Registers used:
  9088 ;;		None
  9089 ;; Tracked objects:
  9090 ;;		On entry : 0/0
  9091 ;;		On exit  : 0/0
  9092 ;;		Unchanged: 0/0
  9093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9098 ;;Total ram usage:        0 bytes
  9099 ;; Hardware stack levels used:    1
  9100 ;; This function calls:
  9101 ;;		Nothing
  9102 ;; This function is called by:
  9103 ;;		_I2C_MasterOperation
  9104 ;; This function uses a non-reentrant model
  9105 ;;
  9106                           
  9107                           
  9108                           ;psect for function _I2C_MasterStart
  9109  05D8                     _I2C_MasterStart:	
  9110                           
  9111                           ;i2c_master.c: 590: SSP1CON2bits.SEN = 1;
  9112                           
  9113                           ;incstack = 0
  9114                           ; Regs used in _I2C_MasterStart: []
  9115  05D8  0024               	movlb	4	; select bank4
  9116  05D9  1416               	bsf	22,0	;volatile
  9117  05DA  0008               	return
  9118  05DB                     __end_of_I2C_MasterStart:	
  9119                           
  9120                           	psect	text67
  9121  03FE                     __ptext67:	
  9122 ;; *************** function _I2C_Close *****************
  9123 ;; Defined at:
  9124 ;;		line 209 in file "mcc_generated_files/i2c_master.c"
  9125 ;; Parameters:    Size  Location     Type
  9126 ;;		None
  9127 ;; Auto vars:     Size  Location     Type
  9128 ;;  returnValue     1    1[COMMON] enum E92
  9129 ;; Return value:  Size  Location     Type
  9130 ;;                  1    wreg      enum E92
  9131 ;; Registers used:
  9132 ;;		wreg, status,2, status,0, pclath, cstack
  9133 ;; Tracked objects:
  9134 ;;		On entry : 0/0
  9135 ;;		On exit  : 0/0
  9136 ;;		Unchanged: 0/0
  9137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9139 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9140 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9141 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9142 ;;Total ram usage:        2 bytes
  9143 ;; Hardware stack levels used:    1
  9144 ;; Hardware stack levels required when called:    1
  9145 ;; This function calls:
  9146 ;;		_I2C_MasterClearIrq
  9147 ;;		_I2C_MasterClose
  9148 ;;		_I2C_MasterDisableIrq
  9149 ;; This function is called by:
  9150 ;;		_I2C_Write1ByteRegister
  9151 ;;		_I2C_Read1ByteRegister
  9152 ;;		_I2C_Read2ByteRegister
  9153 ;;		_I2C_Write2ByteRegister
  9154 ;;		_I2C_WriteNBytes
  9155 ;;		_I2C_ReadNBytes
  9156 ;;		_I2C_ReadDataBlock
  9157 ;; This function uses a non-reentrant model
  9158 ;;
  9159                           
  9160                           
  9161                           ;psect for function _I2C_Close
  9162  03FE                     _I2C_Close:	
  9163                           
  9164                           ;i2c_master.c: 211: i2c_error_t returnValue = I2C_BUSY;
  9165                           
  9166                           ;incstack = 0
  9167                           ; Regs used in _I2C_Close: [wreg+status,2+status,0+pclath+cstack]
  9168  03FE  01F1               	clrf	I2C_Close@returnValue
  9169  03FF  0AF1               	incf	I2C_Close@returnValue,f
  9170                           
  9171                           ;i2c_master.c: 212: if(!I2C_Status.busy)
  9172  0400  0020               	movlb	0	; select bank0
  9173  0401  18BC               	btfsc	_I2C_Status+28,1
  9174  0402  2C15               	goto	i1l2507
  9175                           
  9176                           ;i2c_master.c: 213: {
  9177                           ;i2c_master.c: 214: I2C_Status.inUse = 0;
  9178  0403  113C               	bcf	_I2C_Status+28,2
  9179                           
  9180                           ;i2c_master.c: 215: I2C_Status.address = 0xff;
  9181  0404  30FF               	movlw	255
  9182  0405  00F0               	movwf	??_I2C_Close
  9183  0406  0870               	movf	??_I2C_Close,w
  9184  0407  00B6               	movwf	_I2C_Status+22
  9185                           
  9186                           ;i2c_master.c: 216: I2C_MasterClearIrq();
  9187  0408  3185  25E1  3183   	fcall	_I2C_MasterClearIrq
  9188                           
  9189                           ;i2c_master.c: 217: I2C_MasterDisableIrq();
  9190  040B  3185  25DB  3183   	fcall	_I2C_MasterDisableIrq
  9191                           
  9192                           ;i2c_master.c: 218: I2C_MasterClose();
  9193  040E  3185  25DE         	fcall	_I2C_MasterClose
  9194                           
  9195                           ;i2c_master.c: 219: returnValue = I2C_Status.error;
  9196  0410  0020               	movlb	0	; select bank0
  9197  0411  083B               	movf	_I2C_Status+27,w
  9198  0412  00F0               	movwf	??_I2C_Close
  9199  0413  0870               	movf	??_I2C_Close,w
  9200  0414  00F1               	movwf	I2C_Close@returnValue
  9201  0415                     i1l2507:	
  9202                           
  9203                           ;i2c_master.c: 220: }
  9204                           ;i2c_master.c: 221: return returnValue;
  9205  0415  0871               	movf	I2C_Close@returnValue,w
  9206  0416  0008               	return
  9207  0417                     __end_of_I2C_Close:	
  9208                           
  9209                           	psect	text68
  9210  05DB                     __ptext68:	
  9211 ;; *************** function _I2C_MasterDisableIrq *****************
  9212 ;; Defined at:
  9213 ;;		line 635 in file "mcc_generated_files/i2c_master.c"
  9214 ;; Parameters:    Size  Location     Type
  9215 ;;		None
  9216 ;; Auto vars:     Size  Location     Type
  9217 ;;		None
  9218 ;; Return value:  Size  Location     Type
  9219 ;;                  1    wreg      void 
  9220 ;; Registers used:
  9221 ;;		None
  9222 ;; Tracked objects:
  9223 ;;		On entry : 0/0
  9224 ;;		On exit  : 0/0
  9225 ;;		Unchanged: 0/0
  9226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9231 ;;Total ram usage:        0 bytes
  9232 ;; Hardware stack levels used:    1
  9233 ;; This function calls:
  9234 ;;		Nothing
  9235 ;; This function is called by:
  9236 ;;		_I2C_Close
  9237 ;;		_I2C_SetTimeOut
  9238 ;; This function uses a non-reentrant model
  9239 ;;
  9240                           
  9241                           
  9242                           ;psect for function _I2C_MasterDisableIrq
  9243  05DB                     _I2C_MasterDisableIrq:	
  9244                           
  9245                           ;i2c_master.c: 637: PIE1bits.SSP1IE = 0;
  9246                           
  9247                           ;incstack = 0
  9248                           ; Regs used in _I2C_MasterDisableIrq: []
  9249  05DB  0021               	movlb	1	; select bank1
  9250  05DC  1190               	bcf	16,3	;volatile
  9251  05DD  0008               	return
  9252  05DE                     __end_of_I2C_MasterDisableIrq:	
  9253                           
  9254                           	psect	text69
  9255  05DE                     __ptext69:	
  9256 ;; *************** function _I2C_MasterClose *****************
  9257 ;; Defined at:
  9258 ;;		line 557 in file "mcc_generated_files/i2c_master.c"
  9259 ;; Parameters:    Size  Location     Type
  9260 ;;		None
  9261 ;; Auto vars:     Size  Location     Type
  9262 ;;		None
  9263 ;; Return value:  Size  Location     Type
  9264 ;;                  1    wreg      void 
  9265 ;; Registers used:
  9266 ;;		None
  9267 ;; Tracked objects:
  9268 ;;		On entry : 0/0
  9269 ;;		On exit  : 0/0
  9270 ;;		Unchanged: 0/0
  9271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9275 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9276 ;;Total ram usage:        0 bytes
  9277 ;; Hardware stack levels used:    1
  9278 ;; This function calls:
  9279 ;;		Nothing
  9280 ;; This function is called by:
  9281 ;;		_I2C_Close
  9282 ;; This function uses a non-reentrant model
  9283 ;;
  9284                           
  9285                           
  9286                           ;psect for function _I2C_MasterClose
  9287  05DE                     _I2C_MasterClose:	
  9288                           
  9289                           ;i2c_master.c: 560: SSP1CON1bits.SSPEN = 0;
  9290                           
  9291                           ;incstack = 0
  9292                           ; Regs used in _I2C_MasterClose: []
  9293  05DE  0024               	movlb	4	; select bank4
  9294  05DF  1295               	bcf	21,5	;volatile
  9295  05E0  0008               	return
  9296  05E1                     __end_of_I2C_MasterClose:	
  9297                           
  9298                           	psect	text70
  9299  05E1                     __ptext70:	
  9300 ;; *************** function _I2C_MasterClearIrq *****************
  9301 ;; Defined at:
  9302 ;;		line 640 in file "mcc_generated_files/i2c_master.c"
  9303 ;; Parameters:    Size  Location     Type
  9304 ;;		None
  9305 ;; Auto vars:     Size  Location     Type
  9306 ;;		None
  9307 ;; Return value:  Size  Location     Type
  9308 ;;                  1    wreg      void 
  9309 ;; Registers used:
  9310 ;;		None
  9311 ;; Tracked objects:
  9312 ;;		On entry : 0/0
  9313 ;;		On exit  : 0/0
  9314 ;;		Unchanged: 0/0
  9315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9320 ;;Total ram usage:        0 bytes
  9321 ;; Hardware stack levels used:    1
  9322 ;; This function calls:
  9323 ;;		Nothing
  9324 ;; This function is called by:
  9325 ;;		_I2C_Open
  9326 ;;		_I2C_Close
  9327 ;;		_I2C_MasterFsm
  9328 ;; This function uses a non-reentrant model
  9329 ;;
  9330                           
  9331                           
  9332                           ;psect for function _I2C_MasterClearIrq
  9333  05E1                     _I2C_MasterClearIrq:	
  9334                           
  9335                           ;i2c_master.c: 642: PIR1bits.SSP1IF = 0;
  9336                           
  9337                           ;incstack = 0
  9338                           ; Regs used in _I2C_MasterClearIrq: []
  9339  05E1  0020               	movlb	0	; select bank0
  9340  05E2  1190               	bcf	16,3	;volatile
  9341  05E3  0008               	return
  9342  05E4                     __end_of_I2C_MasterClearIrq:	
  9343                           
  9344                           	psect	text71
  9345  029B                     __ptext71:	
  9346 ;; *************** function _EUSART_Receive_ISR *****************
  9347 ;; Defined at:
  9348 ;;		line 173 in file "mcc_generated_files/eusart.c"
  9349 ;; Parameters:    Size  Location     Type
  9350 ;;		None
  9351 ;; Auto vars:     Size  Location     Type
  9352 ;;		None
  9353 ;; Return value:  Size  Location     Type
  9354 ;;                  1    wreg      void 
  9355 ;; Registers used:
  9356 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9357 ;; Tracked objects:
  9358 ;;		On entry : 0/0
  9359 ;;		On exit  : 0/0
  9360 ;;		Unchanged: 0/0
  9361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9365 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9366 ;;Total ram usage:        0 bytes
  9367 ;; Hardware stack levels used:    1
  9368 ;; Hardware stack levels required when called:    2
  9369 ;; This function calls:
  9370 ;;		Absolute function
  9371 ;;		_EUSART_DefaultErrorHandler
  9372 ;;		_EUSART_DefaultFramingErrorHandler
  9373 ;;		_EUSART_DefaultOverrunErrorHandler
  9374 ;;		_EUSART_RxDataHandler
  9375 ;; This function is called by:
  9376 ;;		_EUSART_Initialize
  9377 ;;		_INTERRUPT_InterruptManager
  9378 ;; This function uses a non-reentrant model
  9379 ;;
  9380                           
  9381                           
  9382                           ;psect for function _EUSART_Receive_ISR
  9383  029B                     _EUSART_Receive_ISR:	
  9384                           
  9385                           ;eusart.c: 176: eusartRxStatusBuffer[eusartRxHead].status = 0;
  9386                           
  9387                           ;incstack = 0
  9388                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9389  029B  0020               	movlb	0	; select bank0
  9390  029C  0856               	movf	_eusartRxHead,w	;volatile
  9391  029D  3E3D               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  9392  029E  0086               	movwf	6
  9393  029F  0187               	clrf	7
  9394  02A0  0181               	clrf	1
  9395                           
  9396                           ;eusart.c: 178: if(RC1STAbits.FERR){
  9397  02A1  0023               	movlb	3	; select bank3
  9398  02A2  1D1D               	btfss	29,2	;volatile
  9399  02A3  2AAF               	goto	i1l2703
  9400                           
  9401                           ;eusart.c: 179: eusartRxStatusBuffer[eusartRxHead].ferr = 1;
  9402  02A4  0020               	movlb	0	; select bank0
  9403  02A5  0856               	movf	_eusartRxHead,w	;volatile
  9404  02A6  3E3D               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  9405  02A7  0086               	movwf	6
  9406  02A8  0187               	clrf	7
  9407  02A9  1481               	bsf	1,1
  9408                           
  9409                           ;eusart.c: 180: EUSART_FramingErrorHandler();
  9410  02AA  0866               	movf	_EUSART_FramingErrorHandler+1,w
  9411  02AB  008A               	movwf	10
  9412  02AC  0865               	movf	_EUSART_FramingErrorHandler,w
  9413  02AD  000A               	callw
  9414  02AE  3182               	pagesel	$
  9415  02AF                     i1l2703:	
  9416                           
  9417                           ;eusart.c: 181: }
  9418                           ;eusart.c: 183: if(RC1STAbits.OERR){
  9419  02AF  0023               	movlb	3	; select bank3
  9420  02B0  1C9D               	btfss	29,1	;volatile
  9421  02B1  2ABE               	goto	i1l2709
  9422                           
  9423                           ;eusart.c: 184: eusartRxStatusBuffer[eusartRxHead].oerr = 1;
  9424  02B2  0020               	movlb	0	; select bank0
  9425  02B3  0856               	movf	_eusartRxHead,w	;volatile
  9426  02B4  3E3D               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  9427  02B5  0086               	movwf	6
  9428  02B6  0187               	clrf	7
  9429  02B7  1501               	bsf	1,2
  9430                           
  9431                           ;eusart.c: 185: EUSART_OverrunErrorHandler();
  9432  02B8  0021               	movlb	1	; select bank1
  9433  02B9  0823               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
  9434  02BA  008A               	movwf	10
  9435  02BB  0822               	movf	_EUSART_OverrunErrorHandler^(0+128),w
  9436  02BC  000A               	callw
  9437  02BD  3182               	pagesel	$
  9438  02BE                     i1l2709:	
  9439                           
  9440                           ;eusart.c: 186: }
  9441                           ;eusart.c: 188: if(eusartRxStatusBuffer[eusartRxHead].status){
  9442  02BE  0020               	movlb	0	; select bank0
  9443  02BF  0856               	movf	_eusartRxHead,w	;volatile
  9444  02C0  3E3D               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  9445  02C1  0086               	movwf	6
  9446  02C2  0187               	clrf	7
  9447  02C3  0801               	movf	1,w
  9448  02C4  1903               	btfsc	3,2
  9449  02C5  2ACD               	goto	i1l2713
  9450                           
  9451                           ;eusart.c: 189: EUSART_ErrorHandler();
  9452  02C6  0021               	movlb	1	; select bank1
  9453  02C7  0821               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
  9454  02C8  008A               	movwf	10
  9455  02C9  0820               	movf	_EUSART_ErrorHandler^(0+128),w
  9456  02CA  000A               	callw
  9457  02CB  3182               	pagesel	$
  9458                           
  9459                           ;eusart.c: 190: } else {
  9460  02CC  0008               	return
  9461  02CD                     i1l2713:	
  9462                           
  9463                           ;eusart.c: 191: EUSART_RxDataHandler();
  9464  02CD  3184  242E         	fcall	_EUSART_RxDataHandler
  9465  02CF  0008               	return
  9466  02D0                     __end_of_EUSART_Receive_ISR:	
  9467                           
  9468                           	psect	text72
  9469  003D                     __ptext72:	
  9470 ;; *************** function _MyUART_ISR *****************
  9471 ;; Defined at:
  9472 ;;		line 90 in file "main.c"
  9473 ;; Parameters:    Size  Location     Type
  9474 ;;		None
  9475 ;; Auto vars:     Size  Location     Type
  9476 ;;  c               1    5[COMMON] unsigned char 
  9477 ;; Return value:  Size  Location     Type
  9478 ;;                  1    wreg      void 
  9479 ;; Registers used:
  9480 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9481 ;; Tracked objects:
  9482 ;;		On entry : 0/0
  9483 ;;		On exit  : 0/0
  9484 ;;		Unchanged: 0/0
  9485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9487 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9488 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9489 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9490 ;;Total ram usage:        5 bytes
  9491 ;; Hardware stack levels used:    1
  9492 ;; Hardware stack levels required when called:    1
  9493 ;; This function calls:
  9494 ;;		_EUSART_Write
  9495 ;; This function is called by:
  9496 ;;		_main
  9497 ;;		_INTERRUPT_InterruptManager
  9498 ;; This function uses a non-reentrant model
  9499 ;;
  9500                           
  9501                           
  9502                           ;psect for function _MyUART_ISR
  9503  003D                     _MyUART_ISR:	
  9504                           
  9505                           ;main.c: 91: unsigned char c = RC1REG;
  9506                           
  9507                           ;incstack = 0
  9508                           ; Regs used in _MyUART_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9509  003D  0023               	movlb	3	; select bank3
  9510  003E  0819               	movf	25,w	;volatile
  9511  003F  00F1               	movwf	??_MyUART_ISR
  9512  0040  0871               	movf	??_MyUART_ISR,w
  9513  0041  00F5               	movwf	MyUART_ISR@c
  9514                           
  9515                           ;main.c: 92: if(c) {
  9516  0042  0875               	movf	MyUART_ISR@c,w
  9517  0043  1903               	btfsc	3,2
  9518  0044  0008               	return
  9519  0045  28E8               	goto	i1l2775
  9520  0046                     i1l2725:	
  9521                           ;main.c: 94: case S_Idle:
  9522                           
  9523                           ;main.c: 93: switch(PosUart) {
  9524                           
  9525                           
  9526                           ;main.c: 95: if(c == 'V' || c == 'A' || c == 'P' || c == 'L') {
  9527  0046  3056               	movlw	86
  9528  0047  0675               	xorwf	MyUART_ISR@c,w
  9529  0048  1903               	btfsc	3,2
  9530  0049  2856               	goto	i1l2733
  9531  004A  3041               	movlw	65
  9532  004B  0675               	xorwf	MyUART_ISR@c,w
  9533  004C  1903               	btfsc	3,2
  9534  004D  2856               	goto	i1l2733
  9535  004E  3050               	movlw	80
  9536  004F  0675               	xorwf	MyUART_ISR@c,w
  9537  0050  1903               	btfsc	3,2
  9538  0051  2856               	goto	i1l2733
  9539  0052  304C               	movlw	76
  9540  0053  0675               	xorwf	MyUART_ISR@c,w
  9541  0054  1D03               	btfss	3,2
  9542  0055  0008               	return
  9543  0056                     i1l2733:	
  9544                           
  9545                           ;main.c: 96: Type = c;
  9546  0056  0875               	movf	MyUART_ISR@c,w
  9547  0057  00F1               	movwf	??_MyUART_ISR
  9548  0058  0871               	movf	??_MyUART_ISR,w
  9549  0059  0020               	movlb	0	; select bank0
  9550  005A  00D1               	movwf	_Type
  9551                           
  9552                           ;main.c: 97: PosUart = S_Data;
  9553  005B  01D0               	clrf	_PosUart
  9554  005C  0AD0               	incf	_PosUart,f
  9555                           
  9556                           ;main.c: 98: }
  9557                           ;main.c: 99: break;
  9558  005D  0008               	return
  9559  005E                     i1l2737:	
  9560                           ;main.c: 100: case S_Data:
  9561                           
  9562                           
  9563                           ;main.c: 101: Data = c;
  9564  005E  0875               	movf	MyUART_ISR@c,w
  9565  005F  00F1               	movwf	??_MyUART_ISR
  9566  0060  0871               	movf	??_MyUART_ISR,w
  9567  0061  00D2               	movwf	_Data
  9568                           
  9569                           ;main.c: 102: PosUart = S_Check;
  9570  0062  3002               	movlw	2
  9571  0063  00F1               	movwf	??_MyUART_ISR
  9572  0064  0871               	movf	??_MyUART_ISR,w
  9573  0065  00D0               	movwf	_PosUart
  9574                           
  9575                           ;main.c: 103: break;
  9576  0066  0008               	return
  9577  0067                     i1l2739:	
  9578                           ;main.c: 104: case S_Check:
  9579                           
  9580                           
  9581                           ;main.c: 105: if((Type+Data)%256 == c) {
  9582  0067  0851               	movf	_Type,w
  9583  0068  0752               	addwf	_Data,w
  9584  0069  00F1               	movwf	??_MyUART_ISR
  9585  006A  01F2               	clrf	??_MyUART_ISR+1
  9586  006B  0DF2               	rlf	??_MyUART_ISR+1,f
  9587  006C  30FF               	movlw	255
  9588  006D  0571               	andwf	??_MyUART_ISR,w
  9589  006E  00F3               	movwf	??_MyUART_ISR+2
  9590  006F  3000               	movlw	0
  9591  0070  0572               	andwf	??_MyUART_ISR+1,w
  9592  0071  00F4               	movwf	??_MyUART_ISR+3
  9593  0072  0875               	movf	MyUART_ISR@c,w
  9594  0073  0673               	xorwf	??_MyUART_ISR+2,w
  9595  0074  0474               	iorwf	??_MyUART_ISR+3,w
  9596  0075  1D03               	skipz
  9597  0076  28D8               	goto	i1l2767
  9598                           
  9599                           ;main.c: 106: Validation = 4;
  9600  0077  3004               	movlw	4
  9601  0078  00F1               	movwf	??_MyUART_ISR
  9602  0079  0871               	movf	??_MyUART_ISR,w
  9603  007A  00EB               	movwf	_Validation
  9604                           
  9605                           ;main.c: 107: if(Type == 'V') {
  9606  007B  3056               	movlw	86
  9607  007C  0651               	xorwf	_Type,w
  9608  007D  1D03               	btfss	3,2
  9609  007E  2887               	goto	i1l2747
  9610                           
  9611                           ;main.c: 108: Vitesse = Data;
  9612  007F  0852               	movf	_Data,w
  9613  0080  00F1               	movwf	??_MyUART_ISR
  9614  0081  01F2               	clrf	??_MyUART_ISR+1
  9615  0082  0871               	movf	??_MyUART_ISR,w
  9616  0083  00CD               	movwf	_Vitesse
  9617  0084  0872               	movf	??_MyUART_ISR+1,w
  9618  0085  00CE               	movwf	_Vitesse+1
  9619                           
  9620                           ;main.c: 109: } else if(Type == 'A') {
  9621  0086  28E3               	goto	i1l2769
  9622  0087                     i1l2747:	
  9623  0087  3041               	movlw	65
  9624  0088  0651               	xorwf	_Type,w
  9625  0089  1D03               	btfss	3,2
  9626  008A  2893               	goto	i1l2751
  9627                           
  9628                           ;main.c: 110: Angle = Data;
  9629  008B  0852               	movf	_Data,w
  9630  008C  00F1               	movwf	??_MyUART_ISR
  9631  008D  01F2               	clrf	??_MyUART_ISR+1
  9632  008E  0871               	movf	??_MyUART_ISR,w
  9633  008F  00E9               	movwf	_Angle
  9634  0090  0872               	movf	??_MyUART_ISR+1,w
  9635  0091  00EA               	movwf	_Angle+1
  9636                           
  9637                           ;main.c: 111: } else if(Type == 'P') {
  9638  0092  28E3               	goto	i1l2769
  9639  0093                     i1l2751:	
  9640  0093  3050               	movlw	80
  9641  0094  0651               	xorwf	_Type,w
  9642  0095  1D03               	btfss	3,2
  9643  0096  28A1               	goto	i1l2755
  9644                           
  9645                           ;main.c: 112: EUSART_Write('P');
  9646  0097  3050               	movlw	80
  9647  0098  3185  2541  3180   	fcall	_EUSART_Write
  9648                           
  9649                           ;main.c: 113: EUSART_Write('+');
  9650  009B  302B               	movlw	43
  9651  009C  3185  2541  3180   	fcall	_EUSART_Write
  9652                           
  9653                           ;main.c: 114: EUSART_Write('{');
  9654  009F  307B               	movlw	123
  9655  00A0  28E1               	goto	L2
  9656  00A1                     i1l2755:	
  9657                           ;main.c: 115: } else if(Type == 'L') {
  9658                           
  9659  00A1  304C               	movlw	76
  9660  00A2  0020               	movlb	0	; select bank0
  9661  00A3  0651               	xorwf	_Type,w
  9662  00A4  1D03               	btfss	3,2
  9663  00A5  28CE               	goto	i1l2765
  9664                           
  9665                           ;main.c: 116: SateLeds++;
  9666  00A6  3001               	movlw	1
  9667  00A7  00F1               	movwf	??_MyUART_ISR
  9668  00A8  0871               	movf	??_MyUART_ISR,w
  9669  00A9  07CF               	addwf	_SateLeds,f
  9670                           
  9671                           ;main.c: 117: switch(SateLeds) {
  9672  00AA  28BF               	goto	i1l2763
  9673  00AB                     i1l837:	
  9674                           ;main.c: 119: do { LATCbits.LATC6 = 0; } while(0);
  9675                           
  9676                           ;main.c: 118: case S_leds_off:
  9677                           
  9678  00AB  0022               	movlb	2	; select bank2
  9679  00AC  130E               	bcf	14,6	;volatile
  9680  00AD  28B0               	goto	i1l845
  9681  00AE                     i1l843:	
  9682                           ;main.c: 123: do { LATCbits.LATC6 = 1; } while(0);
  9683                           
  9684                           ;main.c: 122: case S_led_r:
  9685                           
  9686                           ;main.c: 121: break;
  9687                           
  9688                           ;main.c: 120: do { LATCbits.LATC7 = 0; } while(0);
  9689                           
  9690  00AE  0022               	movlb	2	; select bank2
  9691  00AF  170E               	bsf	14,6	;volatile
  9692  00B0                     i1l845:	
  9693                           ;main.c: 124: do { LATCbits.LATC7 = 0; } while(0);
  9694                           
  9695  00B0  138E               	bcf	14,7	;volatile
  9696                           
  9697                           ;main.c: 125: break;
  9698  00B1  28E3               	goto	i1l2769
  9699  00B2                     i1l848:	
  9700                           ;main.c: 127: do { LATCbits.LATC6 = 0; } while(0);
  9701                           
  9702                           ;main.c: 126: case S_led_l:
  9703                           
  9704  00B2  0022               	movlb	2	; select bank2
  9705  00B3  130E               	bcf	14,6	;volatile
  9706  00B4  28B7               	goto	i1l855
  9707  00B5                     i1l853:	
  9708                           ;main.c: 131: do { LATCbits.LATC6 = 1; } while(0);
  9709                           
  9710                           ;main.c: 130: case S_leds_on:
  9711                           
  9712                           ;main.c: 129: break;
  9713                           
  9714                           ;main.c: 128: do { LATCbits.LATC7 = 1; } while(0);
  9715                           
  9716  00B5  0022               	movlb	2	; select bank2
  9717  00B6  170E               	bsf	14,6	;volatile
  9718  00B7                     i1l855:	
  9719                           ;main.c: 132: do { LATCbits.LATC7 = 1; } while(0);
  9720                           
  9721  00B7  178E               	bsf	14,7	;volatile
  9722                           
  9723                           ;main.c: 133: break;
  9724  00B8  28E3               	goto	i1l2769
  9725  00B9                     i1l858:	
  9726                           ;main.c: 135: do { LATCbits.LATC6 = 0; } while(0);
  9727                           
  9728                           ;main.c: 134: default:
  9729                           
  9730  00B9  0022               	movlb	2	; select bank2
  9731  00BA  130E               	bcf	14,6	;volatile
  9732                           
  9733                           ;main.c: 136: do { LATCbits.LATC7 = 0; } while(0);
  9734  00BB  138E               	bcf	14,7	;volatile
  9735                           
  9736                           ;main.c: 137: SateLeds = S_leds_off;
  9737  00BC  0020               	movlb	0	; select bank0
  9738  00BD  01CF               	clrf	_SateLeds
  9739                           
  9740                           ;main.c: 139: }
  9741                           
  9742                           ;main.c: 138: break;
  9743  00BE  28E3               	goto	i1l2769
  9744  00BF                     i1l2763:	
  9745  00BF  084F               	movf	_SateLeds,w
  9746                           
  9747                           ; Switch size 1, requested type "space"
  9748                           ; Number of cases is 4, Range of values is 0 to 3
  9749                           ; switch strategies available:
  9750                           ; Name         Instructions Cycles
  9751                           ; simple_byte           13     7 (average)
  9752                           ; direct_byte           14     6 (fixed)
  9753                           ; jumptable            260     6 (fixed)
  9754                           ;	Chosen strategy is simple_byte
  9755  00C0  3A00               	xorlw	0	; case 0
  9756  00C1  1903               	skipnz
  9757  00C2  28AB               	goto	i1l837
  9758  00C3  3A01               	xorlw	1	; case 1
  9759  00C4  1903               	skipnz
  9760  00C5  28AE               	goto	i1l843
  9761  00C6  3A03               	xorlw	3	; case 2
  9762  00C7  1903               	skipnz
  9763  00C8  28B2               	goto	i1l848
  9764  00C9  3A01               	xorlw	1	; case 3
  9765  00CA  1903               	skipnz
  9766  00CB  28B5               	goto	i1l853
  9767  00CC  28B9               	goto	i1l858
  9768                           
  9769                           ;main.c: 140: } else {
  9770  00CD  28E3               	goto	i1l2769
  9771  00CE                     i1l2765:	
  9772                           
  9773                           ;main.c: 141: EUSART_Write('$');
  9774  00CE  3024               	movlw	36
  9775  00CF  3185  2541  3180   	fcall	_EUSART_Write
  9776                           
  9777                           ;main.c: 142: EUSART_Write('M');
  9778  00D2  304D               	movlw	77
  9779  00D3  3185  2541  3180   	fcall	_EUSART_Write
  9780                           
  9781                           ;main.c: 143: EUSART_Write('q');
  9782  00D6  3071               	movlw	113
  9783  00D7  28E1               	goto	L2
  9784  00D8                     i1l2767:	
  9785                           ;main.c: 144: }
  9786                           ;main.c: 145: } else {
  9787                           
  9788                           
  9789                           ;main.c: 146: EUSART_Write('$');
  9790  00D8  3024               	movlw	36
  9791  00D9  3185  2541  3180   	fcall	_EUSART_Write
  9792                           
  9793                           ;main.c: 147: EUSART_Write('C');
  9794  00DC  3043               	movlw	67
  9795  00DD  3185  2541  3180   	fcall	_EUSART_Write
  9796                           
  9797                           ;main.c: 148: EUSART_Write('g');
  9798  00E0  3067               	movlw	103
  9799  00E1                     L2:	
  9800  00E1  3185  2541         	fcall	_EUSART_Write
  9801  00E3                     i1l2769:	
  9802                           
  9803                           ;main.c: 149: }
  9804                           ;main.c: 150: PosUart = S_Idle;
  9805  00E3  0020               	movlb	0	; select bank0
  9806  00E4  01D0               	clrf	_PosUart
  9807                           
  9808                           ;main.c: 151: break;
  9809  00E5  0008               	return
  9810  00E6                     i1l2771:	
  9811                           ;main.c: 152: default:
  9812                           
  9813                           
  9814                           ;main.c: 153: PosUart = S_Idle;
  9815  00E6  01D0               	clrf	_PosUart
  9816                           
  9817                           ;main.c: 155: }
  9818                           
  9819                           ;main.c: 154: break;
  9820  00E7  0008               	return
  9821  00E8                     i1l2775:	
  9822  00E8  0020               	movlb	0	; select bank0
  9823  00E9  0850               	movf	_PosUart,w
  9824                           
  9825                           ; Switch size 1, requested type "space"
  9826                           ; Number of cases is 3, Range of values is 0 to 2
  9827                           ; switch strategies available:
  9828                           ; Name         Instructions Cycles
  9829                           ; simple_byte           10     6 (average)
  9830                           ; direct_byte           12     6 (fixed)
  9831                           ; jumptable            260     6 (fixed)
  9832                           ;	Chosen strategy is simple_byte
  9833  00EA  3A00               	xorlw	0	; case 0
  9834  00EB  1903               	skipnz
  9835  00EC  2846               	goto	i1l2725
  9836  00ED  3A01               	xorlw	1	; case 1
  9837  00EE  1903               	skipnz
  9838  00EF  285E               	goto	i1l2737
  9839  00F0  3A03               	xorlw	3	; case 2
  9840  00F1  1903               	skipnz
  9841  00F2  2867               	goto	i1l2739
  9842  00F3  28E6               	goto	i1l2771
  9843  00F4  0008               	return
  9844  00F5                     __end_of_MyUART_ISR:	
  9845                           
  9846                           	psect	text73
  9847  0541                     __ptext73:	
  9848 ;; *************** function _EUSART_Write *****************
  9849 ;; Defined at:
  9850 ;;		line 162 in file "mcc_generated_files/eusart.c"
  9851 ;; Parameters:    Size  Location     Type
  9852 ;;  txData          1    wreg     unsigned char 
  9853 ;; Auto vars:     Size  Location     Type
  9854 ;;  txData          1    0[COMMON] unsigned char 
  9855 ;; Return value:  Size  Location     Type
  9856 ;;                  1    wreg      void 
  9857 ;; Registers used:
  9858 ;;		wreg
  9859 ;; Tracked objects:
  9860 ;;		On entry : 0/0
  9861 ;;		On exit  : 0/0
  9862 ;;		Unchanged: 0/0
  9863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9865 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9867 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9868 ;;Total ram usage:        1 bytes
  9869 ;; Hardware stack levels used:    1
  9870 ;; This function calls:
  9871 ;;		Nothing
  9872 ;; This function is called by:
  9873 ;;		_MyTimer2ISR
  9874 ;;		_MyUART_ISR
  9875 ;; This function uses a non-reentrant model
  9876 ;;
  9877                           
  9878                           
  9879                           ;psect for function _EUSART_Write
  9880  0541                     _EUSART_Write:	
  9881                           
  9882                           ;incstack = 0
  9883                           ; Regs used in _EUSART_Write: [wreg]
  9884                           ;EUSART_Write@txData stored from wreg
  9885  0541  00F0               	movwf	EUSART_Write@txData
  9886  0542                     i1l635:	
  9887                           ;eusart.c: 165: {
  9888                           
  9889                           ;eusart.c: 164: while(0 == PIR1bits.TXIF)
  9890                           
  9891  0542  0020               	movlb	0	; select bank0
  9892  0543  1E10               	btfss	16,4	;volatile
  9893  0544  2D42               	goto	i1l635
  9894                           
  9895                           ;eusart.c: 166: }
  9896                           ;eusart.c: 168: TX1REG = txData;
  9897  0545  0870               	movf	EUSART_Write@txData,w
  9898  0546  0023               	movlb	3	; select bank3
  9899  0547  009A               	movwf	26	;volatile
  9900  0548  0008               	return
  9901  0549                     __end_of_EUSART_Write:	
  9902                           
  9903                           	psect	text74
  9904  05BC                     __ptext74:	
  9905 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
  9906 ;; Defined at:
  9907 ;;		line 209 in file "mcc_generated_files/eusart.c"
  9908 ;; Parameters:    Size  Location     Type
  9909 ;;		None
  9910 ;; Auto vars:     Size  Location     Type
  9911 ;;		None
  9912 ;; Return value:  Size  Location     Type
  9913 ;;                  1    wreg      void 
  9914 ;; Registers used:
  9915 ;;		None
  9916 ;; Tracked objects:
  9917 ;;		On entry : 0/0
  9918 ;;		On exit  : 0/0
  9919 ;;		Unchanged: 0/0
  9920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9924 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9925 ;;Total ram usage:        0 bytes
  9926 ;; Hardware stack levels used:    1
  9927 ;; This function calls:
  9928 ;;		Nothing
  9929 ;; This function is called by:
  9930 ;;		_EUSART_Initialize
  9931 ;;		_EUSART_Receive_ISR
  9932 ;; This function uses a non-reentrant model
  9933 ;;
  9934                           
  9935                           
  9936                           ;psect for function _EUSART_DefaultOverrunErrorHandler
  9937  05BC                     _EUSART_DefaultOverrunErrorHandler:	
  9938                           
  9939                           ;eusart.c: 212: RC1STAbits.CREN = 0;
  9940                           
  9941                           ;incstack = 0
  9942                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
  9943  05BC  0023               	movlb	3	; select bank3
  9944  05BD  121D               	bcf	29,4	;volatile
  9945                           
  9946                           ;eusart.c: 213: RC1STAbits.CREN = 1;
  9947  05BE  161D               	bsf	29,4	;volatile
  9948  05BF  0008               	return
  9949  05C0                     __end_of_EUSART_DefaultOverrunErrorHandler:	
  9950                           
  9951                           	psect	text75
  9952  05EC                     __ptext75:	
  9953 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
  9954 ;; Defined at:
  9955 ;;		line 207 in file "mcc_generated_files/eusart.c"
  9956 ;; Parameters:    Size  Location     Type
  9957 ;;		None
  9958 ;; Auto vars:     Size  Location     Type
  9959 ;;		None
  9960 ;; Return value:  Size  Location     Type
  9961 ;;                  1    wreg      void 
  9962 ;; Registers used:
  9963 ;;		None
  9964 ;; Tracked objects:
  9965 ;;		On entry : 0/0
  9966 ;;		On exit  : 0/0
  9967 ;;		Unchanged: 0/0
  9968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9972 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9973 ;;Total ram usage:        0 bytes
  9974 ;; Hardware stack levels used:    1
  9975 ;; This function calls:
  9976 ;;		Nothing
  9977 ;; This function is called by:
  9978 ;;		_EUSART_Initialize
  9979 ;;		_EUSART_Receive_ISR
  9980 ;; This function uses a non-reentrant model
  9981 ;;
  9982                           
  9983                           
  9984                           ;psect for function _EUSART_DefaultFramingErrorHandler
  9985  05EC                     _EUSART_DefaultFramingErrorHandler:	
  9986                           
  9987                           ;incstack = 0
  9988                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
  9989  05EC  0008               	return
  9990  05ED                     __end_of_EUSART_DefaultFramingErrorHandler:	
  9991                           
  9992                           	psect	text76
  9993  05E4                     __ptext76:	
  9994 ;; *************** function _EUSART_DefaultErrorHandler *****************
  9995 ;; Defined at:
  9996 ;;		line 217 in file "mcc_generated_files/eusart.c"
  9997 ;; Parameters:    Size  Location     Type
  9998 ;;		None
  9999 ;; Auto vars:     Size  Location     Type
 10000 ;;		None
 10001 ;; Return value:  Size  Location     Type
 10002 ;;                  1    wreg      void 
 10003 ;; Registers used:
 10004 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10005 ;; Tracked objects:
 10006 ;;		On entry : 0/0
 10007 ;;		On exit  : 0/0
 10008 ;;		Unchanged: 0/0
 10009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10013 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10014 ;;Total ram usage:        0 bytes
 10015 ;; Hardware stack levels used:    1
 10016 ;; Hardware stack levels required when called:    1
 10017 ;; This function calls:
 10018 ;;		_EUSART_RxDataHandler
 10019 ;; This function is called by:
 10020 ;;		_EUSART_Initialize
 10021 ;;		_EUSART_Receive_ISR
 10022 ;; This function uses a non-reentrant model
 10023 ;;
 10024                           
 10025                           
 10026                           ;psect for function _EUSART_DefaultErrorHandler
 10027  05E4                     _EUSART_DefaultErrorHandler:	
 10028                           
 10029                           ;eusart.c: 218: EUSART_RxDataHandler();
 10030                           
 10031                           ;incstack = 0
 10032                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10033  05E4  3184  242E         	fcall	_EUSART_RxDataHandler
 10034  05E6  0008               	return
 10035  05E7                     __end_of_EUSART_DefaultErrorHandler:	
 10036                           
 10037                           	psect	text77
 10038  042E                     __ptext77:	
 10039 ;; *************** function _EUSART_RxDataHandler *****************
 10040 ;; Defined at:
 10041 ;;		line 197 in file "mcc_generated_files/eusart.c"
 10042 ;; Parameters:    Size  Location     Type
 10043 ;;		None
 10044 ;; Auto vars:     Size  Location     Type
 10045 ;;		None
 10046 ;; Return value:  Size  Location     Type
 10047 ;;                  1    wreg      void 
 10048 ;; Registers used:
 10049 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10050 ;; Tracked objects:
 10051 ;;		On entry : 0/0
 10052 ;;		On exit  : 0/0
 10053 ;;		Unchanged: 0/0
 10054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10057 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10058 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10059 ;;Total ram usage:        1 bytes
 10060 ;; Hardware stack levels used:    1
 10061 ;; This function calls:
 10062 ;;		Nothing
 10063 ;; This function is called by:
 10064 ;;		_EUSART_Receive_ISR
 10065 ;;		_EUSART_DefaultErrorHandler
 10066 ;; This function uses a non-reentrant model
 10067 ;;
 10068                           
 10069                           
 10070                           ;psect for function _EUSART_RxDataHandler
 10071  042E                     _EUSART_RxDataHandler:	
 10072                           
 10073                           ;eusart.c: 199: eusartRxBuffer[eusartRxHead++] = RC1REG;
 10074                           
 10075                           ;incstack = 0
 10076                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 10077  042E  0023               	movlb	3	; select bank3
 10078  042F  0819               	movf	25,w	;volatile
 10079  0430  00F0               	movwf	??_EUSART_RxDataHandler
 10080  0431  0020               	movlb	0	; select bank0
 10081  0432  0856               	movf	_eusartRxHead,w
 10082  0433  3E45               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 10083  0434  0086               	movwf	6
 10084  0435  0187               	clrf	7
 10085  0436  0870               	movf	??_EUSART_RxDataHandler,w
 10086  0437  0081               	movwf	1
 10087  0438  3001               	movlw	1
 10088  0439  00F0               	movwf	??_EUSART_RxDataHandler
 10089  043A  0870               	movf	??_EUSART_RxDataHandler,w
 10090  043B  07D6               	addwf	_eusartRxHead,f	;volatile
 10091                           
 10092                           ;eusart.c: 200: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 10093  043C  3008               	movlw	8
 10094  043D  0256               	subwf	_eusartRxHead,w	;volatile
 10095  043E  1803               	btfsc	3,0
 10096                           
 10097                           ;eusart.c: 201: {
 10098                           ;eusart.c: 202: eusartRxHead = 0;
 10099  043F  01D6               	clrf	_eusartRxHead	;volatile
 10100                           
 10101                           ;eusart.c: 203: }
 10102                           ;eusart.c: 204: eusartRxCount++;
 10103  0440  3001               	movlw	1
 10104  0441  00F0               	movwf	??_EUSART_RxDataHandler
 10105  0442  0870               	movf	??_EUSART_RxDataHandler,w
 10106  0443  07D4               	addwf	_eusartRxCount,f	;volatile
 10107  0444  0008               	return
 10108  0445                     __end_of_EUSART_RxDataHandler:	
 10109  007E                     btemp	set	126	;btemp
 10110  007E                     int$flags	set	126
 10111  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    32
    Data        3
    BSS         55
    Persistent  10
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     12      76
    BANK1            80      4       8
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    I2C_Read1ByteRegister@returnValue.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Read2ByteRegister@returnValue.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Write1ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Write2ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    I2C_DO_TX$1905$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_RX$1911$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX_EMPTY$1917$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_RX_EMPTY$1923$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX_EMPTY$1922	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX_EMPTY$1917	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_DO_RX$1916	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_RX$1911	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_DO_TX$1910	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX$1905	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_MasterFsm$1904	const PTR FTN()enum E12103 size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    I2C_CallbackReturnStop@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_CallbackReturnReset@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    Absolute function$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S443$0$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyTimer2ISR(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyTimer2ISR(), TMR2_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyUART_ISR(), EUSART_Receive_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), Absolute function(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), Absolute function(), 

    I2C_SetCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_SetCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> Absolute function(), rd1RegCompleteHandler(), 

    I2C_SetAddressNackCallback@ptr	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    I2C_SetAddressNackCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> Absolute function(), 

    I2C_SetDataCompleteCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_SetDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> Absolute function(), rd1RegCompleteHandler(), 

    I2C_SetBuffer@buffer	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(BANK0[1]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S443$data_ptr	PTR unsigned char  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(BANK0[1]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_Status.data_ptr	PTR unsigned char  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(BANK0[1]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S443$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_Status.callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S443$callbackTable	PTR FTN(PTR void ,)enum E97[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_Status.callbackTable	PTR FTN(PTR void ,)enum E97[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    fsmStateTable	const PTR FTN()enum E12103[16] size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyUART_ISR(), EUSART_Receive_ISR(), Absolute function(), 

    rdBlkRegCompleteHandler@ptr.data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    wr2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    wr1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    rd2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    rd1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S85$data	PTR unsigned char  size(1) Largest target is 0

    bufferBlock.data	PTR unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _I2C_SetAddressNackCallback->_I2C_SetCallback
    _I2C_MasterWrite->_I2C_MasterOperation
    _I2C_MasterFsm->_I2C_DO_TX
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnReset
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnStop
    _I2C_DO_TX_EMPTY->_rd1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rd2RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rdBlkRegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr2RegCompleteHandler
    _I2C_DO_TX->_I2C_CallbackReturnReset
    _I2C_DO_TX->_I2C_CallbackReturnStop
    _I2C_DO_TX->_rd1RegCompleteHandler
    _I2C_DO_TX->_rd2RegCompleteHandler
    _I2C_DO_TX->_rdBlkRegCompleteHandler
    _I2C_DO_TX->_wr1RegCompleteHandler
    _I2C_DO_TX->_wr2RegCompleteHandler
    _I2C_DO_SEND_ADR_WRITE->_I2C_MasterSendTxData
    _I2C_DO_RX->_I2C_CallbackReturnReset
    _I2C_DO_RX->_I2C_CallbackReturnStop
    _I2C_DO_RX->_rd1RegCompleteHandler
    _I2C_DO_RX->_rd2RegCompleteHandler
    _I2C_DO_RX->_rdBlkRegCompleteHandler
    _I2C_DO_RX->_wr1RegCompleteHandler
    _I2C_DO_RX->_wr2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnReset
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnStop
    _I2C_DO_ADDRESS_NACK->_rd1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rd2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rdBlkRegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr2RegCompleteHandler
    _wr2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _wr1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rdBlkRegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _I2C_SetDataCompleteCallback->_I2C_SetCallback
    _MyUART_ISR->_EUSART_Write
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _TMR2_ISR->_MyTimer2ISR
    _MyTimer2ISR->_I2C_Write1ByteRegister
    _I2C_MasterWrite->_I2C_MasterOperation
    _I2C_Poller->_I2C_MasterFsm

Critical Paths under _main in BANK1

    _main->_EUSART_SetRxInterruptHandler
    _main->_TMR2_SetInterruptHandler
    _main->_TMR2_WriteTimer
    _TMR2_WriteTimer->_TMR2_Counter8BitSet
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1269
                                              2 BANK1      2     2      0
       _EUSART_SetRxInterruptHandler
                  _SYSTEM_Initialize
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
                    _TMR2_WriteTimer
 ---------------------------------------------------------------------------------
 (1) _TMR2_WriteTimer                                      1     1      0      62
                                              1 BANK1      1     1      0
                _TMR2_Counter8BitSet
 ---------------------------------------------------------------------------------
 (2) _TMR2_Counter8BitSet                                  1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
                         _TMR2_Start
 ---------------------------------------------------------------------------------
 (2) _TMR2_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     785
                  _EUSART_Initialize
                     _I2C_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM3_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     211
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR2_SetInterruptHandler                             2     0      2     211
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     574
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     211
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     121
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     121
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     121
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           1     1      0   84965
                                             11 BANK0      1     1      0
                   Absolute function *
                 _EUSART_Receive_ISR *
                         _MyUART_ISR *
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR2_ISR                                             0     0      0   84766
                   Absolute function *
                        _MyTimer2ISR *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (6) _TMR2_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _MyTimer2ISR                                          2     2      0   84766
                                              9 BANK0      2     2      0
                       _EUSART_Write
             _I2C_Write1ByteRegister
                 _PWM3_LoadDutyValue
 ---------------------------------------------------------------------------------
 (7) _PWM3_LoadDutyValue                                   4     2      2     120
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (7) _I2C_Write1ByteRegister                               4     2      2   84624
                                              5 BANK0      4     2      2
                          _I2C_Close
                    _I2C_MasterWrite
                           _I2C_Open
         _I2C_SetAddressNackCallback
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _I2C_SetAddressNackCallback                           4     1      3    1870
                                              5 COMMON     4     1      3
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (8) _I2C_Open                                             3     3      0      46
                                              0 COMMON     3     3      0
                 _I2C_MasterClearIrq
                     _I2C_MasterOpen
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterOpen                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C_MasterWrite                                      0     0      0   78324
                _I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterOperation                                  3     3      0   78324
                                             13 COMMON     1     1      0
                                              3 BANK0      2     2      0
                    _I2C_MasterStart
                         _I2C_Poller
 ---------------------------------------------------------------------------------
 (10) _I2C_Poller                                          0     0      0   78278
                      _I2C_MasterFsm
             _I2C_MasterWaitForEvent
 ---------------------------------------------------------------------------------
 (11) _I2C_MasterWaitForEvent                              0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _I2C_MasterFsm                                       3     3      0   78278
                                              0 BANK0      3     3      0
                _I2C_DO_ADDRESS_NACK *
                        _I2C_DO_IDLE *
                        _I2C_DO_RCEN *
                       _I2C_DO_RESET *
                          _I2C_DO_RX *
                      _I2C_DO_RX_ACK *
             _I2C_DO_RX_NACK_RESTART *
                _I2C_DO_RX_NACK_STOP *
               _I2C_DO_SEND_ADR_READ *
              _I2C_DO_SEND_ADR_WRITE *
                _I2C_DO_SEND_RESTART *
           _I2C_DO_SEND_RESTART_READ *
          _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_DO_SEND_STOP *
                          _I2C_DO_TX *
                    _I2C_DO_TX_EMPTY *
                 _I2C_MasterClearIrq
                   _I2C_MasterIsNack
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_TX_EMPTY                                     1     1      0   19547
                                             10 COMMON     1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
                   _I2C_MasterSetIrq
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (13) _I2C_MasterSetIrq                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_TX                                           3     3      0   19593
                                             10 COMMON     3     3      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
           _I2C_DO_SEND_RESTART_READ
          _I2C_DO_SEND_RESTART_WRITE
                   _I2C_DO_SEND_STOP
                   _I2C_MasterIsNack
               _I2C_MasterSendTxData
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (12) _I2C_MasterIsNack                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _I2C_DO_SEND_RESTART_WRITE                           0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (13) _I2C_DO_SEND_RESTART_READ                            0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_SEND_ADR_WRITE                               0     0      0      22
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_SEND_ADR_READ                                0     0      0      22
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (13) _I2C_MasterSendTxData                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_RX_ACK                                       0     0      0       0
                  _I2C_MasterSendAck
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_RX                                           1     1      0   19547
                                             10 COMMON     1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
             _I2C_DO_RX_NACK_RESTART
                _I2C_DO_RX_NACK_STOP
                _I2C_MasterGetRxData
                  _I2C_MasterSendAck
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (13) _I2C_MasterSendAck                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _I2C_MasterGetRxData                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_RX_NACK_STOP                                 0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_RX_NACK_RESTART                              0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (13) _I2C_MasterSendNack                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_RESET                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_RCEN                                         0     0      0       0
                  _I2C_MasterStartRx
 ---------------------------------------------------------------------------------
 (13) _I2C_MasterStartRx                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_IDLE                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_ADDRESS_NACK                                 1     1      0   19547
                                             10 COMMON     1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (13) _wr2RegCompleteHandler                               1     0      1    3852
                                              9 COMMON     1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (13) _wr1RegCompleteHandler                               1     0      1    3852
                                              9 COMMON     1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (13) _rdBlkRegCompleteHandler                             1     0      1    3874
                                              9 COMMON     1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (13) _rd2RegCompleteHandler                               1     0      1    3852
                                              9 COMMON     1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (13) _rd1RegCompleteHandler                               1     0      1    3852
                                              9 COMMON     1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _I2C_SetDataCompleteCallback                          4     1      3    2478
                                              5 COMMON     4     1      3
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (9) _I2C_SetCallback                                      5     2      3     914
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (8) _I2C_SetBuffer                                        4     2      2    1352
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (13) _I2C_DO_SEND_STOP                                    0     0      0       0
                     _I2C_MasterStop
 ---------------------------------------------------------------------------------
 (14) _I2C_MasterStop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _I2C_DO_SEND_RESTART                                 0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (14) _I2C_MasterEnableRestart                             0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _I2C_CallbackReturnStop                              1     0      1       0
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (13) _I2C_CallbackReturnReset                             1     0      1     265
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (10) _I2C_MasterStart                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C_Close                                            2     2      0      24
                                              0 COMMON     2     2      0
                 _I2C_MasterClearIrq
                    _I2C_MasterClose
               _I2C_MasterDisableIrq
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterDisableIrq                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterClose                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterClearIrq                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _MyUART_ISR                                           5     5      0     199
                                              1 COMMON     5     5      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (7) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Receive_ISR                                   0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (6) _EUSART_DefaultOverrunErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_DefaultFramingErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_DefaultErrorHandler                           0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (6) _EUSART_RxDataHandler                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_SetRxInterruptHandler
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
     _I2C_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM3_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
   _TMR2_SetInterruptHandler
   _TMR2_StartTimer
     _TMR2_Start
   _TMR2_WriteTimer
     _TMR2_Counter8BitSet

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _MyUART_ISR *
     _EUSART_Write
   _TMR2_ISR *
     Absolute function(Fake) *
     _MyTimer2ISR *
       _EUSART_Write
       _I2C_Write1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
       _PWM3_LoadDutyValue
     _TMR2_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      C      4C       5       95.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      4       8       7       10.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      62      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      62      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Mar 26 18:50:12 2020

                ?_EUSART_SetRxInterruptHandler 00A4                         ??_I2C_DO_SEND_ADR_READ 0070  
                                  MyUART_ISR@c 0075                    __size_of_I2C_MasterSendNack 0004  
                           __size_of_I2C_Close 0019               __end_of_TMR2_SetInterruptHandler 0527  
                      ??_I2C_DO_SEND_ADR_WRITE 0071                                    __CFG_CP$OFF 0000  
                          __size_of_I2C_Poller 000A                          ??_I2C_DO_SEND_RESTART 0070  
                                  __CFG_LVP$ON 0000                   __size_of_I2C_MasterOperation 001A  
                __size_of_I2C_MasterSendTxData 0005                                            _PR2 001B  
                       ??_EUSART_RxDataHandler 0070                         _I2C_MasterWaitForEvent 0594  
               ?_EUSART_SetFramingErrorHandler 00A4                                _TMR2_Initialize 045B  
                                 __CFG_BORV$LO 0000                                            wreg 0009  
                                 __CFG_IESO$ON 0000                   ??_I2C_SetAddressNackCallback 0078  
                       _I2C_Write1ByteRegister 0302                       ??_I2C_CallbackReturnStop 007A  
                                 _I2C_DO_RESET 0581                                   __CFG_ZCD$OFF 0000  
                      ??_rd2RegCompleteHandler 007A                                           l3091 017C  
                                         l3093 018A                                           l3085 019E  
                                         l3095 0195                                           l3087 016E  
                                         u1310 0193                                           _LATA 010C  
                                         _LATB 010D                                           _LATC 010E  
                                         u1337 0182                                           u1290 017A  
                                         u1347 0199                                           _T2PR 001B  
                                         _TMR2 001A                                           _WPUA 020C  
                                         _WPUB 020D                                           _WPUC 020E  
                                         _Data 0052                        ??_wr2RegCompleteHandler 007A  
                                 __CFG_WRT$OFF 0000                                  __CFG_FCMEN$ON 0000  
                                         _Type 0051                                           _main 014F  
                     ?_I2C_CallbackReturnReset 0079                                           fsr0h 0005  
                                         fsr1h 0007                                           indf0 0000  
                                         fsr0l 0004                                           indf1 0001  
                                         fsr1l 0006                               __end_of_I2C_Open 029B  
                                         btemp 007E                                  __CFG_BOREN$ON 0000  
                                         start 0024                                  __CFG_MCLRE$ON 0000  
                          _TMR2_Counter8BitSet 0563               __size_of_rdBlkRegCompleteHandler 0017  
                                _I2C_DO_TX$794 007B                               ?_I2C_MasterClose 0070  
                                __CFG_PLLEN$ON 0000                                  ?_EUSART_Write 0070  
          __size_of_I2C_SetAddressNackCallback 000C                 __size_of_OSCILLATOR_Initialize 0007  
                             ?_I2C_MasterStart 0070                                  _I2C_DO_RX_ACK 05A0  
                             ?_I2C_MasterWrite 0070                  __end_of_OSCILLATOR_Initialize 0550  
                                        ?_main 0070                                  __CFG_WDTE$OFF 0000  
                                        _T2CON 001C                                          _T2HLT 001D  
                                        i1l123 001F                                          _T2TMR 001A  
                                        i1l118 0017                                          i1l321 0299  
                                        _T2RST 001F                                          i1l403 0244  
                                        i1l544 0594                                          i1l635 0542  
                                        i1l387 01D0                                          i1l843 00AE  
                                        i1l853 00B5                                          i1l845 00B0  
                                        i1l837 00AB                                          i1l855 00B7  
                                        i1l848 00B2                                          i1l858 00B9  
                 __size_of_I2C_DO_RX_NACK_STOP 0004                              ??_I2C_DO_TX_EMPTY 007A  
                                        _TRISA 008C                                          _TRISB 008D  
                                        _TRISC 008E                                          u83_25 0454  
                                        _RXPPS 0E24                                          _Angle 0069  
                         ?_TMR2_Counter8BitSet 0070                              __end_of_I2C_DO_RX 0264  
                            __end_of_I2C_DO_TX 01EF                               __end_of_TMR2_ISR 04DB  
                                  ?_TMR2_Start 0070                              __end_of_I2C_Close 0417  
                       __size_of_I2C_MasterFsm 0027                 I2C_MasterOperation@returnValue 005B  
                                   _MyUART_ISR 003D                        _I2C_MasterEnableRestart 05D5  
                      __end_of_PWM3_Initialize 050A                                          pclath 000A  
                             ?_I2C_SetCallback 0070                   I2C_SetAddressNackCallback@cb 0075  
                                        status 0003                                          wtemp0 007E  
                            ?_I2C_DO_SEND_STOP 0070                         __size_of_I2C_SetBuffer 000E  
                              _TMR2_StartTimer 05C3                             ??_I2C_DO_SEND_STOP 0070  
                                _fsmStateTable 03C4                                __initialization 0026  
                                ??_MyTimer2ISR 0060                                   __end_of_main 01A4  
            __size_of_I2C_DO_SEND_RESTART_READ 0004                      ?_I2C_DO_SEND_RESTART_READ 0070  
                               ??_EUSART_Write 0070                                 ?_I2C_DO_RX_ACK 0070  
                      __end_of_TMR2_Initialize 046F                                 __CFG_LPBOR$OFF 0000  
                  ?_INTERRUPT_InterruptManager 0070                 ??_EUSART_SetRxInterruptHandler 00A6  
                     _TMR2_SetInterruptHandler 051E                                         ??_main 00A6  
                            ?_I2C_MasterIsNack 0070                                _TMR2_WriteTimer 055D  
                            ?_I2C_MasterSetIrq 0070                             ??_I2C_MasterIsNack 0070  
                        ??_TMR2_Counter8BitSet 00A4                             ??_I2C_MasterSetIrq 0070  
    __end_of_EUSART_DefaultFramingErrorHandler 05ED     __size_of_EUSART_DefaultFramingErrorHandler 0001  
          ??_EUSART_DefaultFramingErrorHandler 0070             ?_EUSART_DefaultFramingErrorHandler 0070  
            _EUSART_DefaultFramingErrorHandler 05EC                     _EUSART_OverrunErrorHandler 00A2  
              __end_of_I2C_CallbackReturnReset 05E9                __size_of_I2C_CallbackReturnStop 0002  
                I2C_SetDataCompleteCallback@cb 0075                                         _ANSELA 018C  
                                       _ANSELB 018D                                         _ANSELC 018E  
                                       _BORCON 0116                                   ??_I2C_Poller 007D  
                                       _RC1REG 0199                                         _RA2PPS 0E92  
                                       _RC1STA 019D                                         _RB4PPS 0E9C  
                                       _RB6PPS 0E9E                                         _RB7PPS 0E9F  
                                       i1l2301 01B4                                         i1l2143 0393  
                                       _ODCONA 028C                                         _ODCONB 028D  
                                       i1l2331 0249                                         _ODCONC 028E  
                                       i1l2309 01E9                                         i1l2327 0246  
                                       i1l2407 0342                                         i1l2353 035E  
                                       i1l2337 024C                                         i1l2417 0514  
                                       i1l2513 0304                                         i1l2507 0415  
                                       i1l2291 01AE                                         i1l2451 03FB  
                                       i1l2523 032A                                         i1l2349 035B  
                                       i1l2365 0365                                         i1l2445 03F2  
                                       i1l2703 02AF                                         i1l2359 0362  
                                       i1l2295 01B1                                         i1l2287 01AB  
                                       i1l2447 03F6                                         i1l2713 02CD  
                                       i1l2385 03A8                                         i1l2395 03AE  
                                       i1l2733 0056                                         i1l2725 0046  
                                       i1l2709 02BE                                         i1l2389 03AB  
                                       i1l2751 0093                                         i1l2737 005E  
                                       i1l2681 0130                                         i1l2771 00E6  
                                       i1l2763 00BF                                         i1l2755 00A1  
                                       i1l2747 0087                                         i1l2739 0067  
                                       i1l2683 0139                                         i1l2765 00CE  
                                       i1l2677 0124                                         i1l2767 00D8  
                                       i1l2775 00E8                                         i1l2769 00E3  
                                       _INLVLA 038C                                         _INLVLB 038D  
                                       _INLVLC 038E                                         _OSCCON 0099  
                                       _SPBRGH 019C                                         _SPBRGL 019B  
                                       _TX1REG 019A                                         _TX1STA 019E  
                                   _Validation 006B                                 __CFG_PWRTE$OFF 0000  
                          _I2C_MasterGetRxData 05CC                    __size_of_PWM3_LoadDutyValue 0016  
                                _I2C_MasterFsm 0331                                 __CFG_STVREN$ON 0000  
                          __size_of_TMR2_Start 0003                              I2C_SetCallback@cb 0070  
                      __size_of_I2C_MasterOpen 000C                        __size_of_I2C_MasterStop 0003  
                      __size_of_I2C_Initialize 000A                                  _I2C_SetBuffer 04C1  
                          __end_of_MyTimer2ISR 014F                             __end_of_I2C_Poller 051E  
                 __end_of_I2C_MasterDisableIrq 05DE                            _I2C_DO_ADDRESS_NACK 03A1  
                         ?_I2C_MasterGetRxData 0070                                      ?_I2C_Open 0070  
           __end_of_I2C_SetAddressNackCallback 04E7                     _I2C_SetAddressNackCallback 04DB  
                    ??_I2C_MasterEnableRestart 0070                        __end_of_TMR2_StartTimer 05C6  
     TMR2_SetInterruptHandler@InterruptHandler 00A4                                    ?_MyUART_ISR 0070  
                             ?_PWM3_Initialize 0070                              _SYSTEM_Initialize 046F  
                      __end_of__initialization 0039                            _I2C_MasterOperation 03E4  
                           ?_SYSTEM_Initialize 0070                           ?_I2C_DO_ADDRESS_NACK 0070  
                      _rdBlkRegCompleteHandler 0417                                 __pcstackCOMMON 0070  
                               ?_I2C_MasterFsm 0070                                ??_I2C_DO_RX_ACK 0070  
                                 __pidataBANK0 05C0                         _I2C_CallbackReturnStop 05E9  
                          ??_SYSTEM_Initialize 00A6                                      ?_TMR2_ISR 0070  
                      __end_of_TMR2_WriteTimer 0563                               ?_TMR2_Initialize 0070  
                               ?_I2C_SetBuffer 0070                        ?_I2C_MasterWaitForEvent 0070  
               __size_of_I2C_DO_SEND_ADR_WRITE 0007             __size_of_I2C_DO_SEND_RESTART_WRITE 0004  
                __end_of_I2C_DO_SEND_ADR_WRITE 0557                     ?_I2C_DO_SEND_RESTART_WRITE 0070  
                         ?_I2C_MasterOperation 0070                          ??_I2C_MasterGetRxData 0070  
                      ?_I2C_Write1ByteRegister 005C                                 _OPTION_REGbits 0095  
                                   ??_I2C_Open 0070                           _eusartRxStatusBuffer 003D  
                   __end_of_I2C_MasterClearIrq 05E4                ??_EUSART_SetOverrunErrorHandler 00A6  
                    __end_of_SYSTEM_Initialize 0481                              _I2C_MasterSendAck 05B4  
                                   __pbssBANK0 0020                           __end_of_EUSART_Write 0549  
                                ??_I2C_DO_IDLE 0070                 __size_of_rd2RegCompleteHandler 0010  
                                ??_I2C_DO_RCEN 0070                  __end_of_rd2RegCompleteHandler 04A1  
                 __end_of_I2C_MasterSendTxData 0590                             ?_I2C_MasterSendAck 0070  
                            _I2C_MasterStartRx 05CF                 __size_of_wr2RegCompleteHandler 0010  
                        ??_I2C_DO_ADDRESS_NACK 007A                  __end_of_wr2RegCompleteHandler 04C1  
                  __size_of_EUSART_Receive_ISR 0035                            _I2C_DO_RX_NACK_STOP 059C  
                        _rd1RegCompleteHandler 04A1                             ?_I2C_MasterStartRx 0070  
                   __end_of_I2C_MasterSendNack 05BC                          _wr1RegCompleteHandler 0481  
                                   __pmaintext 014F                            ??_I2C_MasterSendAck 0070  
                     rd1RegCompleteHandler@ptr 0079                    __end_of_I2C_DO_SEND_RESTART 05AC  
                                  _MyTimer2ISR 00F5                                _I2C_DO_TX_EMPTY 0358  
                          I2C_SetBuffer@buffer 0073                                __CFG_PPS1WAY$ON 0000  
                                   ??_TMR2_ISR 007E                                     __pintentry 0004  
               __end_of_I2C_MasterWaitForEvent 0598                            ??_I2C_MasterStartRx 0070  
                __size_of_I2C_DO_SEND_ADR_READ 0008                            __size_of_MyUART_ISR 00B8  
             __size_of_I2C_CallbackReturnReset 0002                   ??_EUSART_DefaultErrorHandler 0071  
                        ??_I2C_MasterOperation 007D                 I2C_SetDataCompleteCallback@ptr 0077  
               __end_of_I2C_Write1ByteRegister 0331                       ??_I2C_DO_RX_NACK_RESTART 0070  
            __end_of_I2C_DO_SEND_RESTART_WRITE 05B0                           ?_I2C_DO_RX_NACK_STOP 0070  
                                _eusartRxCount 0054                                __CFG_WDTCCS$SWC 0000  
                __size_of_EUSART_RxDataHandler 0017                      __end_of_I2C_MasterSendAck 05B8  
                                      _OSCTUNE 0098                                        _PWM3DCH 0618  
                                      _PWM3DCL 0617                                        _PWM3CON 0619  
                                      _SSP1ADD 0212                                        _SLRCONA 030C  
                                      _SLRCONB 030D                                        _SLRCONC 030E  
                                      _SSP1BUF 0211                                   ??_TMR2_Start 00A4  
                     ??_EUSART_SetErrorHandler 00A6                               ?_TMR2_StartTimer 0070  
                    __end_of_I2C_MasterStartRx 05D2                           I2C_Close@returnValue 0071  
                 ?_I2C_SetDataCompleteCallback 0075                                      _I2C_DO_RX 022A  
                                    _I2C_DO_TX 01A4               __end_of_I2C_DO_SEND_RESTART_READ 05B4  
                                    _I2C_Close 03FE                      ??_rdBlkRegCompleteHandler 007A  
                         _I2C_MasterDisableIrq 05DB                                ??_I2C_MasterFsm 0057  
          __size_of_EUSART_DefaultErrorHandler 0003                     ??_TMR2_SetInterruptHandler 00A6  
                                      _PosUart 0050                            __end_of_I2C_DO_IDLE 058B  
                          __end_of_I2C_DO_RCEN 057B                                        _Vitesse 004D  
                              ??_I2C_SetBuffer 0072                               ?_TMR2_WriteTimer 0070  
                      I2C_SetBuffer@bufferSize 0070                             __end_of_TMR2_Start 05C9  
                               _I2C_MasterOpen 04E7                                 _I2C_MasterStop 05D2  
                               _I2C_Initialize 050A                      __size_of_I2C_DO_SEND_STOP 0004  
                                      __ptext1 055D                                        __ptext2 0563  
                                      __ptext3 05C3                                        __ptext4 05C6  
                                      __ptext5 046F                                        __ptext6 045B  
                                      __ptext7 051E                                        __ptext8 04FF  
                                      __ptext9 01EF                          ??_I2C_DO_RX_NACK_STOP 0070  
                        _OSCILLATOR_Initialize 0549                                      _T2CONbits 001C  
                           I2C_SetCallback@idx 0074                       __size_of_I2C_MasterClose 0003  
                     ??_PIN_MANAGER_Initialize 00A4                  I2C_CallbackReturnReset@funPtr 0079  
                                    _T2HLTbits 001D                             I2C_SetCallback@ptr 0072  
                     wr1RegCompleteHandler@ptr 0079                      I2C_Write1ByteRegister@reg 005C  
                     __size_of_I2C_MasterStart 0003                       __size_of_I2C_MasterWrite 0004  
                   __size_of_SYSTEM_Initialize 0012                                        clrloop0 0558  
                         end_of_initialization 0039                                      _T2RSTbits 001F  
                                   ?_I2C_DO_RX 0070                                     ?_I2C_DO_TX 0070  
        __end_of_EUSART_SetOverrunErrorHandler 056F         __size_of_EUSART_SetOverrunErrorHandler 0006  
                _EUSART_SetOverrunErrorHandler 0569                      __size_of_I2C_MasterIsNack 0006  
                                   ?_I2C_Close 0070                         ?_rd1RegCompleteHandler 0079  
                      __end_of_I2C_DO_TX_EMPTY 037D                      __size_of_I2C_MasterSetIrq 0003  
                        ?_I2C_MasterDisableIrq 0070                              _EUSART_Initialize 02D0  
                       ?_wr1RegCompleteHandler 0079                             ?_EUSART_Initialize 0070  
                     __size_of_I2C_SetCallback 0024                         __end_of_I2C_MasterOpen 04F3  
                       __end_of_I2C_MasterStop 05D5                         __end_of_I2C_Initialize 0514  
                  __end_of_TMR2_Counter8BitSet 0569                            ??_EUSART_Initialize 00A6  
                                    _PORTAbits 000C                __end_of_rdBlkRegCompleteHandler 042E  
                         _I2C_MasterSendTxData 058B                                      _SSPDATPPS 0E21  
              __size_of_I2C_DO_RX_NACK_RESTART 0004                                      _SSPCLKPPS 0E20  
                             __CFG_FOSC$INTOSC 0000                    ?_I2C_SetAddressNackCallback 0075  
                        __size_of_EUSART_Write 0008                     __size_of_I2C_MasterSendAck 0004  
                            __size_of_I2C_Open 0037                                   ??_MyUART_ISR 0071  
              __size_of_EUSART_SetErrorHandler 0006                     __size_of_I2C_MasterStartRx 0003  
                      TMR2_WriteTimer@timerVal 00A5                      __end_of_EUSART_Initialize 0302  
                                  _I2C_DO_IDLE 0586                                    _I2C_DO_RCEN 0575  
                   rdBlkRegCompleteHandler@ptr 0079                  I2C_Write1ByteRegister@address 005F  
                      ?_I2C_CallbackReturnStop 0079                     __end_of_PWM3_LoadDutyValue 045B  
                     _I2C_DO_SEND_RESTART_READ 05B0                   I2C_CallbackReturnStop@funPtr 0079  
                              ?_I2C_MasterOpen 0070                                ?_I2C_MasterStop 0070  
                              ?_I2C_Initialize 0070           __end_of_TMR2_DefaultInterruptHandler 05EC  
        __size_of_TMR2_DefaultInterruptHandler 0001                   _TMR2_DefaultInterruptHandler 05EB  
                      _I2C_CallbackReturnReset 05E7             __end_of_EUSART_DefaultErrorHandler 05E7  
                   _EUSART_DefaultErrorHandler 05E4           __size_of_I2C_SetDataCompleteCallback 000C  
                                 _EUSART_Write 0541                              __size_of_TMR2_ISR 000C  
                           __end_of_MyUART_ISR 00F5                          ?_I2C_MasterSendTxData 0070  
                       ?_OSCILLATOR_Initialize 0070                    ??_I2C_DO_SEND_RESTART_WRITE 0070  
                          start_initialization 0026                __size_of_PIN_MANAGER_Initialize 003B  
                                ?_I2C_DO_RESET 0070   EUSART_SetRxInterruptHandler@interruptHandler 00A4  
                                  ??_I2C_DO_RX 007A                                    ??_I2C_DO_TX 007A  
                            ??_I2C_MasterClose 0070                         ??_I2C_MasterDisableIrq 0070  
                                  ??_I2C_Close 0070                              ??_I2C_MasterStart 0070  
                            ??_I2C_MasterWrite 007E                 __end_of_I2C_CallbackReturnStop 05EB  
                       _I2C_DO_RX_NACK_RESTART 0598                               ?_I2C_DO_TX_EMPTY 0070  
                           _I2C_MasterClearIrq 05E1                 ?_EUSART_SetOverrunErrorHandler 00A4  
                     __size_of_PWM3_Initialize 000B                     _EUSART_FramingErrorHandler 0065  
                                 ?_MyTimer2ISR 0070                         _EUSART_SetErrorHandler 056F  
                                  _CCPTMRSbits 029E                            ?_I2C_MasterClearIrq 0070  
                  __end_of_I2C_MasterGetRxData 05CF                                    __pdataBANK0 0069  
                        __end_of_I2C_DO_RX_ACK 05A4                  ?_TMR2_DefaultInterruptHandler 0070  
                             _I2C_DO_SEND_STOP 05A4                              ??_I2C_SetCallback 0073  
                          I2C_Open@returnValue 0072                             _I2C_MasterSendNack 05B8  
                     ?_I2C_MasterEnableRestart 0070                          _I2C_DO_SEND_ADR_WRITE 0550  
                                    ___latbits 0002                                  __pcstackBANK0 0057  
                                __pcstackBANK1 00A4                                 ??_I2C_DO_RESET 0070  
                     __size_of_TMR2_Initialize 0014                            ?_I2C_MasterSendNack 0070  
                 __end_of_I2C_DO_SEND_ADR_READ 0541                           ??_I2C_MasterClearIrq 0070  
                  __end_of_I2C_DO_ADDRESS_NACK 03C4                     __end_of_EUSART_Receive_ISR 02D0  
                             _I2C_MasterIsNack 057B                     __size_of_EUSART_Initialize 0032  
                    _I2C_DO_SEND_RESTART_WRITE 05AC               _EUSART_RxDefaultInterruptHandler 0067  
                             _I2C_MasterSetIrq 05C9                                      __pnvBANK0 0063  
                                    __pnvBANK1 00A0                          _rd2RegCompleteHandler 0491  
                        __end_of_fsmStateTable 03E4                   __end_of_EUSART_RxDataHandler 0445  
                       _PIN_MANAGER_Initialize 01EF                          _wr2RegCompleteHandler 04B1  
                    ??_I2C_CallbackReturnReset 007A                    __end_of_I2C_MasterOperation 03FE  
                         ??_I2C_MasterSendNack 0070                       rd2RegCompleteHandler@ptr 0079  
                                 _eusartRxHead 0056                                   _eusartRxTail 0055  
                       ??_I2C_MasterSendTxData 0070                   ??_INTERRUPT_InterruptManager 0062  
                 __size_of_I2C_DO_SEND_RESTART 0004                                       _BAUD1CON 019F  
                      I2C_MasterOperation@read 005A                                       _I2C_Open 0264  
                                     _T2CLKCON 001E                        ??_rd1RegCompleteHandler 007A  
                               _eusartRxBuffer 0045                        ??_wr1RegCompleteHandler 007A  
                                     _LATAbits 010C         EUSART_SetErrorHandler@interruptHandler 00A4  
                                     _LATCbits 010E                                      clear_ram0 0557  
                                     _PIE1bits 0090                              _eusartRxLastError 0053  
                     __size_of_TMR2_StartTimer 0003            __size_of_INTERRUPT_InterruptManager 0020  
                                     _PIR1bits 0010                ??_EUSART_SetFramingErrorHandler 00A6  
                                     _PIR2bits 0011                          __end_of_I2C_MasterFsm 0358  
                  __end_of_I2C_DO_RX_NACK_STOP 05A0                           __CFG_WDTCPS$WDTCPS1F 0000  
                                     _SSP1CON1 0215                                       _SSP1CON2 0216  
    __end_of_EUSART_DefaultOverrunErrorHandler 05C0     __size_of_EUSART_DefaultOverrunErrorHandler 0004  
          ??_EUSART_DefaultOverrunErrorHandler 0070             ?_EUSART_DefaultOverrunErrorHandler 0070  
            _EUSART_DefaultOverrunErrorHandler 05BC                                       _TMR2_ISR 04CF  
              __end_of_I2C_MasterEnableRestart 05D8                                       _SSP1STAT 0214  
                        __end_of_I2C_SetBuffer 04CF                              ??_PWM3_Initialize 00A4  
                       ?_I2C_DO_SEND_ADR_WRITE 0070                       I2C_MasterSendTxData@data 0070  
               ??_TMR2_DefaultInterruptHandler 0070              __size_of_TMR2_SetInterruptHandler 0009  
                     __size_of_TMR2_WriteTimer 0006                      ?_TMR2_SetInterruptHandler 00A4  
                     wr2RegCompleteHandler@ptr 0079                     ??_I2C_DO_SEND_RESTART_READ 0070  
                     ?_rdBlkRegCompleteHandler 0079                                     _I2C_Poller 0514  
                                   _I2C_Status 0020                                   ?_I2C_DO_IDLE 0070  
                                 ?_I2C_DO_RCEN 0070                              ??_TMR2_Initialize 00A6  
                       ?_rd2RegCompleteHandler 0079                                       _SateLeds 004F  
                             ??_I2C_MasterOpen 0070                         ?_wr2RegCompleteHandler 0079  
                             ??_I2C_MasterStop 0070                       ??_I2C_MasterWaitForEvent 0070  
                             ??_I2C_Initialize 00A4                           __end_of_I2C_DO_RESET 0586  
                     ??_I2C_Write1ByteRegister 005E                        ??_OSCILLATOR_Initialize 00A4  
                          _EUSART_ErrorHandler 00A0                           _I2C_DO_SEND_ADR_READ 0539  
                         __size_of_MyTimer2ISR 005A                    ?_EUSART_DefaultErrorHandler 0070  
                           _PWM3_LoadDutyValue 0445                                _I2C_MasterClose 05DE  
                I2C_SetAddressNackCallback@ptr 0077                                I2C_Open@address 0071  
                              _I2C_MasterStart 05D8                                _I2C_MasterWrite 0590  
                         _EUSART_RxDataHandler 042E                   __size_of_TMR2_Counter8BitSet 0006  
                                     __ptext10 0549                                       __ptext11 050A  
                                     __ptext20 05EB                                       __ptext12 02D0  
                                     __ptext21 0445                                       __ptext13 0527  
                                     __ptext30 0331                                       __ptext22 0302  
                                     __ptext14 0569                                       __ptext31 03A1  
                                     __ptext23 04DB                                       __ptext15 0530  
                                     __ptext40 0575                                       __ptext32 0581  
                                     __ptext24 0264                                       __ptext16 056F  
                                     __ptext41 022A                                       __ptext33 0598  
                                     __ptext25 04E7                                       __ptext50 05B4  
                                     __ptext42 01A4                                       __ptext34 059C  
                                     __ptext26 0590                                       __ptext18 04CF  
                                     __ptext51 05CC                                       __ptext43 0550  
                                     __ptext35 05A0                                       __ptext27 03E4  
                                     __ptext19 00F5                                       __ptext60 04B1  
                                     __ptext52 05B8                                       __ptext44 0539  
                                     __ptext36 05A4                                       __ptext28 0514  
                                     __ptext61 04F3                                       __ptext53 05CF  
                                     __ptext45 0586                                       __ptext37 05A8  
                                     __ptext29 0594                                       __ptext70 05E1  
                                     __ptext62 037D                                       __ptext54 05E7  
                                     __ptext46 0358                                       __ptext38 05AC  
                                     __ptext71 029B                                       __ptext63 04C1  
                                     __ptext55 05E9                                       __ptext47 05C9  
                                     __ptext39 05B0                                       __ptext72 003D  
                                     __ptext64 05D2                                       __ptext56 0417  
                                     __ptext48 057B                                       __ptext73 0541  
                                     __ptext65 05D5                                       __ptext57 0481  
                                     __ptext49 058B                                       __ptext74 05BC  
                                     __ptext66 05D8                                       __ptext58 0491  
                          ?_PWM3_LoadDutyValue 0070                                       __ptext75 05EC  
                                     __ptext67 03FE                                       __ptext59 04A1  
                                     __ptext76 05E4                                       __ptext68 05DB  
                                     __ptext77 042E                                       __ptext69 05DE  
                                 _SSP1CON1bits 0215                                   _SSP1CON2bits 0216  
          __end_of_I2C_SetDataCompleteCallback 04FF                    _I2C_SetDataCompleteCallback 04F3  
                      ?_I2C_DO_RX_NACK_RESTART 0070                       __end_of_I2C_DO_SEND_STOP 05A8  
                                __size_of_main 0055                           __CFG_WDTCWS$WDTCWSSW 0000  
                      ?_EUSART_SetErrorHandler 00A4                                _I2C_SetCallback 037D  
                ??_I2C_SetDataCompleteCallback 0078                                     _RC1STAbits 019D  
                   I2C_Write1ByteRegister@data 005D  EUSART_SetOverrunErrorHandler@interruptHandler 00A4  
                         ??_PWM3_LoadDutyValue 0072                                       int$flags 007E  
                        ?_I2C_DO_SEND_ADR_READ 0070                              ??_TMR2_StartTimer 00A4  
           __end_of_INTERRUPT_InterruptManager 0024                     _INTERRUPT_InterruptManager 0004  
        __end_of_EUSART_SetFramingErrorHandler 0539         __size_of_EUSART_SetFramingErrorHandler 0009  
                _EUSART_SetFramingErrorHandler 0530                                   _SSP1STATbits 0214  
                     __end_of_I2C_MasterIsNack 0581                       __end_of_I2C_MasterSetIrq 05CC  
                                   _INTCONbits 000B                          ?_EUSART_RxDataHandler 0070  
               __end_of_I2C_DO_RX_NACK_RESTART 059C                    TMR2_Counter8BitSet@timerVal 00A4  
                                     intlevel1 0000                                    ?_I2C_Poller 0070  
                            ??_TMR2_WriteTimer 00A5               __size_of_I2C_MasterEnableRestart 0003  
                      ?_PIN_MANAGER_Initialize 0070                 __end_of_EUSART_SetErrorHandler 0575  
                            __CFG_CLKOUTEN$OFF 0000                            _I2C_DO_SEND_RESTART 05A8  
                __size_of_I2C_MasterDisableIrq 0003           __end_of_EUSART_SetRxInterruptHandler 0530  
        __size_of_EUSART_SetRxInterruptHandler 0009                   _EUSART_SetRxInterruptHandler 0527  
              __size_of_I2C_MasterWaitForEvent 0004                __size_of_I2C_Write1ByteRegister 002F  
                           _EUSART_Receive_ISR 029B  EUSART_SetFramingErrorHandler@interruptHandler 00A4  
                      __end_of_I2C_MasterClose 05E1                       __size_of_I2C_DO_TX_EMPTY 0025  
                  PWM3_LoadDutyValue@dutyValue 0070                        __end_of_I2C_MasterStart 05DB  
                      __end_of_I2C_MasterWrite 0594                                  __pstringtext1 03C4  
                         ?_I2C_DO_SEND_RESTART 0070                            ?_EUSART_Receive_ISR 0070  
                 __size_of_I2C_MasterGetRxData 0003                                     _TX1STAbits 019E  
                                   _TMR2_Start 05C6                    __size_of_I2C_MasterClearIrq 0003  
                           EUSART_Write@txData 0070                        __end_of_I2C_SetCallback 03A1  
               __end_of_PIN_MANAGER_Initialize 022A                 __size_of_rd1RegCompleteHandler 0010  
                __end_of_rd1RegCompleteHandler 04B1                         __size_of_I2C_DO_RX_ACK 0004  
               __size_of_wr1RegCompleteHandler 0010                           ??_EUSART_Receive_ISR 0071  
                        __size_of_I2C_DO_RESET 0005                  __end_of_wr1RegCompleteHandler 0491  
                        _TMR2_InterruptHandler 0063                   __size_of_I2C_DO_ADDRESS_NACK 0023  
                         __size_of_I2C_DO_IDLE 0005                           __size_of_I2C_DO_RCEN 0006  
                              _PWM3_Initialize 04FF                             __size_of_I2C_DO_RX 003A  
                           __size_of_I2C_DO_TX 004B  
