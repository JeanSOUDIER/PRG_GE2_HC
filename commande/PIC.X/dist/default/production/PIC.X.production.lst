

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Apr 06 13:28:08 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2
    51                           	psect	text35,local,class=CODE,merge=1,delta=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,delta=2
    54                           	psect	text38,local,class=CODE,merge=1,delta=2
    55                           	psect	text39,local,class=CODE,merge=1,delta=2
    56                           	psect	text40,local,class=CODE,merge=1,delta=2
    57                           	psect	text41,local,class=CODE,merge=1,delta=2
    58                           	psect	text42,local,class=CODE,merge=1,delta=2
    59                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    60                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text50,local,class=CODE,merge=1,delta=2
    67                           	psect	text51,local,class=CODE,merge=1,delta=2
    68                           	psect	text52,local,class=CODE,merge=1,delta=2
    69                           	psect	text53,local,class=CODE,merge=1,delta=2
    70                           	psect	text54,local,class=CODE,merge=1,delta=2
    71                           	psect	text55,local,class=CODE,merge=1,delta=2
    72                           	psect	text56,local,class=CODE,merge=1,delta=2
    73                           	psect	text57,local,class=CODE,merge=1,delta=2
    74                           	psect	text58,local,class=CODE,merge=1,delta=2
    75                           	psect	text59,local,class=CODE,merge=1,delta=2
    76                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text63,local,class=CODE,merge=1,delta=2
    80                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text65,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text66,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	intentry,global,class=CODE,delta=2
    84                           	psect	text68,local,class=CODE,merge=1,delta=2
    85                           	psect	text69,local,class=CODE,merge=1,delta=2
    86                           	psect	text70,local,class=CODE,merge=1,delta=2
    87                           	psect	text71,local,class=CODE,merge=1,delta=2
    88                           	psect	text72,local,class=CODE,merge=1,delta=2
    89                           	psect	text73,local,class=CODE,merge=1,delta=2
    90                           	psect	text74,local,class=CODE,merge=1,delta=2
    91                           	psect	text75,local,class=CODE,merge=1,delta=2
    92                           	psect	text76,local,class=CODE,merge=1,delta=2
    93                           	psect	text77,local,class=CODE,merge=1,delta=2
    94                           	psect	text78,local,class=CODE,merge=1,inline,delta=2
    95                           	psect	text79,local,class=CODE,merge=1,delta=2
    96                           	psect	text80,local,class=CODE,merge=1,delta=2
    97                           	psect	text81,local,class=CODE,merge=1,delta=2
    98                           	psect	text82,local,class=CODE,merge=1,inline,delta=2
    99                           	psect	text83,local,class=CODE,merge=1,inline,delta=2
   100                           	psect	text84,local,class=CODE,merge=1,delta=2
   101                           	psect	text85,local,class=CODE,merge=1,delta=2
   102                           	psect	text86,local,class=CODE,merge=1,delta=2
   103                           	psect	text87,local,class=CODE,merge=1,delta=2
   104                           	psect	text88,local,class=CODE,merge=1,delta=2
   105                           	psect	text89,local,class=CODE,merge=1,delta=2
   106                           	psect	text90,local,class=CODE,merge=1,delta=2
   107                           	psect	text91,local,class=CODE,merge=1,delta=2
   108                           	psect	text92,local,class=CODE,merge=1,delta=2
   109                           	psect	text93,local,class=CODE,merge=1,delta=2
   110                           	psect	text94,local,class=CODE,merge=1,delta=2
   111                           	psect	text95,local,class=CODE,merge=1,delta=2
   112                           	psect	text96,local,class=CODE,merge=1,delta=2
   113                           	psect	text97,local,class=CODE,merge=1,delta=2
   114                           	psect	text98,local,class=CODE,merge=1,delta=2
   115                           	psect	text99,local,class=CODE,merge=1,delta=2
   116                           	psect	text100,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   120                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   121                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text107,local,class=CODE,merge=1,delta=2
   124                           	psect	text108,local,class=CODE,merge=1,delta=2
   125                           	psect	text109,local,class=CODE,merge=1,delta=2
   126                           	psect	text110,local,class=CODE,merge=1,delta=2
   127                           	psect	text111,local,class=CODE,merge=1,delta=2
   128                           	psect	text112,local,class=CODE,merge=1,delta=2
   129                           	psect	text113,local,class=CODE,merge=1,delta=2
   130                           	psect	text114,local,class=CODE,merge=1,delta=2
   131                           	psect	text115,local,class=CODE,merge=1,delta=2
   132                           	psect	text116,local,class=CODE,merge=1,delta=2
   133                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text120,local,class=CODE,merge=1,delta=2
   137                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   138                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   139                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text124,local,class=CODE,merge=1,delta=2
   141                           	psect	text125,local,class=CODE,merge=1,delta=2
   142                           	psect	text126,local,class=CODE,merge=1,delta=2
   143                           	psect	text127,local,class=CODE,merge=1,delta=2
   144                           	psect	text128,local,class=CODE,merge=1,delta=2
   145                           	psect	text129,local,class=CODE,merge=1,delta=2
   146                           	psect	text130,local,class=CODE,merge=1,delta=2
   147                           	psect	text131,local,class=CODE,merge=1,delta=2
   148                           	psect	text132,local,class=CODE,merge=1,delta=2
   149                           	dabs	1,0x7E,2
   150  0000                     
   151                           ; Version 1.45
   152                           ; Generated 16/11/2017 GMT
   153                           ; 
   154                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   155                           ; All rights reserved.
   156                           ; 
   157                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   158                           ; 
   159                           ; Redistribution and use in source and binary forms, with or without modification, are
   160                           ; permitted provided that the following conditions are met:
   161                           ; 
   162                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   163                           ;        conditions and the following disclaimer.
   164                           ; 
   165                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   166                           ;        of conditions and the following disclaimer in the documentation and/or other
   167                           ;        materials provided with the distribution.
   168                           ; 
   169                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   170                           ;        software without specific prior written permission.
   171                           ; 
   172                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   173                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   174                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   175                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   176                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   177                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   178                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   179                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   180                           ; 
   181                           ; 
   182                           ; Code-generator required, PIC16F1619 Definitions
   183                           ; 
   184                           ; SFR Addresses
   185  0000                     	;# 
   186  0001                     	;# 
   187  0002                     	;# 
   188  0003                     	;# 
   189  0004                     	;# 
   190  0005                     	;# 
   191  0006                     	;# 
   192  0007                     	;# 
   193  0008                     	;# 
   194  0009                     	;# 
   195  000A                     	;# 
   196  000B                     	;# 
   197  000C                     	;# 
   198  000D                     	;# 
   199  000E                     	;# 
   200  0010                     	;# 
   201  0011                     	;# 
   202  0012                     	;# 
   203  0013                     	;# 
   204  0014                     	;# 
   205  0015                     	;# 
   206  0016                     	;# 
   207  0016                     	;# 
   208  0017                     	;# 
   209  0018                     	;# 
   210  0019                     	;# 
   211  001A                     	;# 
   212  001A                     	;# 
   213  001B                     	;# 
   214  001B                     	;# 
   215  001C                     	;# 
   216  001D                     	;# 
   217  001E                     	;# 
   218  001F                     	;# 
   219  008C                     	;# 
   220  008D                     	;# 
   221  008E                     	;# 
   222  0090                     	;# 
   223  0091                     	;# 
   224  0092                     	;# 
   225  0093                     	;# 
   226  0094                     	;# 
   227  0095                     	;# 
   228  0096                     	;# 
   229  0098                     	;# 
   230  0099                     	;# 
   231  009A                     	;# 
   232  009B                     	;# 
   233  009B                     	;# 
   234  009C                     	;# 
   235  009D                     	;# 
   236  009E                     	;# 
   237  009F                     	;# 
   238  010C                     	;# 
   239  010D                     	;# 
   240  010E                     	;# 
   241  0111                     	;# 
   242  0112                     	;# 
   243  0113                     	;# 
   244  0114                     	;# 
   245  0115                     	;# 
   246  0116                     	;# 
   247  0117                     	;# 
   248  0118                     	;# 
   249  0119                     	;# 
   250  011C                     	;# 
   251  018C                     	;# 
   252  018D                     	;# 
   253  018E                     	;# 
   254  0191                     	;# 
   255  0191                     	;# 
   256  0192                     	;# 
   257  0193                     	;# 
   258  0193                     	;# 
   259  0194                     	;# 
   260  0195                     	;# 
   261  0196                     	;# 
   262  0197                     	;# 
   263  0199                     	;# 
   264  0199                     	;# 
   265  0199                     	;# 
   266  019A                     	;# 
   267  019A                     	;# 
   268  019A                     	;# 
   269  019B                     	;# 
   270  019B                     	;# 
   271  019B                     	;# 
   272  019B                     	;# 
   273  019B                     	;# 
   274  019C                     	;# 
   275  019C                     	;# 
   276  019C                     	;# 
   277  019D                     	;# 
   278  019D                     	;# 
   279  019D                     	;# 
   280  019E                     	;# 
   281  019E                     	;# 
   282  019E                     	;# 
   283  019F                     	;# 
   284  019F                     	;# 
   285  019F                     	;# 
   286  019F                     	;# 
   287  019F                     	;# 
   288  020C                     	;# 
   289  020D                     	;# 
   290  020E                     	;# 
   291  0211                     	;# 
   292  0211                     	;# 
   293  0212                     	;# 
   294  0212                     	;# 
   295  0213                     	;# 
   296  0213                     	;# 
   297  0214                     	;# 
   298  0214                     	;# 
   299  0215                     	;# 
   300  0215                     	;# 
   301  0215                     	;# 
   302  0215                     	;# 
   303  0216                     	;# 
   304  0216                     	;# 
   305  0217                     	;# 
   306  0217                     	;# 
   307  028C                     	;# 
   308  028D                     	;# 
   309  028E                     	;# 
   310  0291                     	;# 
   311  0291                     	;# 
   312  0292                     	;# 
   313  0293                     	;# 
   314  0294                     	;# 
   315  0298                     	;# 
   316  0298                     	;# 
   317  0299                     	;# 
   318  029A                     	;# 
   319  029B                     	;# 
   320  029E                     	;# 
   321  030C                     	;# 
   322  030D                     	;# 
   323  030E                     	;# 
   324  038C                     	;# 
   325  038D                     	;# 
   326  038E                     	;# 
   327  0391                     	;# 
   328  0392                     	;# 
   329  0393                     	;# 
   330  0394                     	;# 
   331  0395                     	;# 
   332  0396                     	;# 
   333  0397                     	;# 
   334  0398                     	;# 
   335  0399                     	;# 
   336  040E                     	;# 
   337  0413                     	;# 
   338  0413                     	;# 
   339  0414                     	;# 
   340  0414                     	;# 
   341  0415                     	;# 
   342  0416                     	;# 
   343  0417                     	;# 
   344  0418                     	;# 
   345  041A                     	;# 
   346  041A                     	;# 
   347  041B                     	;# 
   348  041B                     	;# 
   349  041C                     	;# 
   350  041D                     	;# 
   351  041E                     	;# 
   352  041F                     	;# 
   353  0493                     	;# 
   354  0494                     	;# 
   355  0495                     	;# 
   356  0496                     	;# 
   357  049A                     	;# 
   358  049B                     	;# 
   359  049C                     	;# 
   360  049D                     	;# 
   361  058C                     	;# 
   362  058C                     	;# 
   363  058D                     	;# 
   364  058E                     	;# 
   365  058E                     	;# 
   366  058F                     	;# 
   367  0590                     	;# 
   368  0590                     	;# 
   369  0591                     	;# 
   370  0592                     	;# 
   371  0592                     	;# 
   372  0593                     	;# 
   373  0594                     	;# 
   374  0594                     	;# 
   375  0595                     	;# 
   376  0596                     	;# 
   377  0596                     	;# 
   378  0597                     	;# 
   379  0598                     	;# 
   380  0599                     	;# 
   381  059A                     	;# 
   382  059B                     	;# 
   383  059B                     	;# 
   384  059C                     	;# 
   385  059D                     	;# 
   386  060C                     	;# 
   387  060C                     	;# 
   388  060D                     	;# 
   389  060E                     	;# 
   390  060F                     	;# 
   391  060F                     	;# 
   392  0610                     	;# 
   393  0611                     	;# 
   394  0612                     	;# 
   395  0613                     	;# 
   396  0614                     	;# 
   397  0617                     	;# 
   398  0618                     	;# 
   399  0619                     	;# 
   400  061A                     	;# 
   401  061B                     	;# 
   402  061C                     	;# 
   403  0691                     	;# 
   404  0692                     	;# 
   405  0693                     	;# 
   406  0694                     	;# 
   407  0695                     	;# 
   408  0696                     	;# 
   409  0697                     	;# 
   410  0699                     	;# 
   411  069A                     	;# 
   412  0711                     	;# 
   413  0712                     	;# 
   414  0713                     	;# 
   415  0714                     	;# 
   416  0715                     	;# 
   417  0718                     	;# 
   418  0718                     	;# 
   419  0719                     	;# 
   420  071A                     	;# 
   421  071A                     	;# 
   422  071B                     	;# 
   423  071C                     	;# 
   424  071D                     	;# 
   425  0791                     	;# 
   426  0791                     	;# 
   427  0792                     	;# 
   428  0793                     	;# 
   429  0793                     	;# 
   430  0794                     	;# 
   431  0795                     	;# 
   432  0795                     	;# 
   433  0796                     	;# 
   434  0797                     	;# 
   435  0797                     	;# 
   436  0798                     	;# 
   437  0799                     	;# 
   438  079A                     	;# 
   439  080C                     	;# 
   440  080C                     	;# 
   441  080D                     	;# 
   442  080E                     	;# 
   443  080E                     	;# 
   444  080F                     	;# 
   445  0810                     	;# 
   446  0810                     	;# 
   447  0811                     	;# 
   448  0812                     	;# 
   449  0812                     	;# 
   450  0813                     	;# 
   451  0814                     	;# 
   452  0815                     	;# 
   453  0816                     	;# 
   454  0817                     	;# 
   455  0818                     	;# 
   456  0819                     	;# 
   457  081A                     	;# 
   458  081A                     	;# 
   459  081B                     	;# 
   460  081C                     	;# 
   461  081C                     	;# 
   462  081D                     	;# 
   463  088C                     	;# 
   464  088D                     	;# 
   465  088E                     	;# 
   466  088F                     	;# 
   467  088F                     	;# 
   468  0890                     	;# 
   469  0891                     	;# 
   470  0892                     	;# 
   471  0893                     	;# 
   472  0893                     	;# 
   473  0894                     	;# 
   474  0895                     	;# 
   475  0896                     	;# 
   476  0897                     	;# 
   477  0897                     	;# 
   478  0898                     	;# 
   479  0899                     	;# 
   480  0D8C                     	;# 
   481  0D8C                     	;# 
   482  0D8D                     	;# 
   483  0D8E                     	;# 
   484  0D8F                     	;# 
   485  0D8F                     	;# 
   486  0D90                     	;# 
   487  0D91                     	;# 
   488  0D92                     	;# 
   489  0D92                     	;# 
   490  0D93                     	;# 
   491  0D94                     	;# 
   492  0D95                     	;# 
   493  0D95                     	;# 
   494  0D96                     	;# 
   495  0D97                     	;# 
   496  0D98                     	;# 
   497  0D99                     	;# 
   498  0D9A                     	;# 
   499  0D9B                     	;# 
   500  0D9C                     	;# 
   501  0D9D                     	;# 
   502  0D9E                     	;# 
   503  0D9E                     	;# 
   504  0D9F                     	;# 
   505  0DA0                     	;# 
   506  0DA1                     	;# 
   507  0DA1                     	;# 
   508  0DA2                     	;# 
   509  0DA3                     	;# 
   510  0DA4                     	;# 
   511  0DA4                     	;# 
   512  0DA5                     	;# 
   513  0DA6                     	;# 
   514  0DA7                     	;# 
   515  0DA7                     	;# 
   516  0DA8                     	;# 
   517  0DA9                     	;# 
   518  0DAA                     	;# 
   519  0DAB                     	;# 
   520  0DAC                     	;# 
   521  0DAD                     	;# 
   522  0DAE                     	;# 
   523  0DAF                     	;# 
   524  0E0F                     	;# 
   525  0E10                     	;# 
   526  0E11                     	;# 
   527  0E12                     	;# 
   528  0E13                     	;# 
   529  0E14                     	;# 
   530  0E15                     	;# 
   531  0E16                     	;# 
   532  0E17                     	;# 
   533  0E18                     	;# 
   534  0E19                     	;# 
   535  0E1A                     	;# 
   536  0E1B                     	;# 
   537  0E1C                     	;# 
   538  0E1D                     	;# 
   539  0E1E                     	;# 
   540  0E1F                     	;# 
   541  0E20                     	;# 
   542  0E21                     	;# 
   543  0E22                     	;# 
   544  0E23                     	;# 
   545  0E24                     	;# 
   546  0E25                     	;# 
   547  0E26                     	;# 
   548  0E27                     	;# 
   549  0E28                     	;# 
   550  0E29                     	;# 
   551  0E2A                     	;# 
   552  0E2B                     	;# 
   553  0E2C                     	;# 
   554  0E2D                     	;# 
   555  0E2E                     	;# 
   556  0E90                     	;# 
   557  0E91                     	;# 
   558  0E92                     	;# 
   559  0E94                     	;# 
   560  0E95                     	;# 
   561  0E9C                     	;# 
   562  0E9D                     	;# 
   563  0E9E                     	;# 
   564  0E9F                     	;# 
   565  0EA0                     	;# 
   566  0EA1                     	;# 
   567  0EA2                     	;# 
   568  0EA3                     	;# 
   569  0EA4                     	;# 
   570  0EA5                     	;# 
   571  0EA6                     	;# 
   572  0EA7                     	;# 
   573  0F0F                     	;# 
   574  0F10                     	;# 
   575  0F11                     	;# 
   576  0F12                     	;# 
   577  0F13                     	;# 
   578  0F14                     	;# 
   579  0F15                     	;# 
   580  0F16                     	;# 
   581  0F17                     	;# 
   582  0F18                     	;# 
   583  0F19                     	;# 
   584  0F1A                     	;# 
   585  0F1B                     	;# 
   586  0F1C                     	;# 
   587  0F1D                     	;# 
   588  0F1E                     	;# 
   589  0F1F                     	;# 
   590  0F20                     	;# 
   591  0F21                     	;# 
   592  0F22                     	;# 
   593  0F23                     	;# 
   594  0F24                     	;# 
   595  0F25                     	;# 
   596  0F26                     	;# 
   597  0F27                     	;# 
   598  0F28                     	;# 
   599  0F29                     	;# 
   600  0F2A                     	;# 
   601  0F2B                     	;# 
   602  0F2C                     	;# 
   603  0F2D                     	;# 
   604  0F2E                     	;# 
   605  0F2F                     	;# 
   606  0F30                     	;# 
   607  0F31                     	;# 
   608  0F32                     	;# 
   609  0F33                     	;# 
   610  0F34                     	;# 
   611  0F35                     	;# 
   612  0F36                     	;# 
   613  0F37                     	;# 
   614  0FE4                     	;# 
   615  0FE5                     	;# 
   616  0FE6                     	;# 
   617  0FE7                     	;# 
   618  0FE8                     	;# 
   619  0FE9                     	;# 
   620  0FEA                     	;# 
   621  0FEB                     	;# 
   622  0FED                     	;# 
   623  0FEE                     	;# 
   624  0FEF                     	;# 
   625  0000                     	;# 
   626  0001                     	;# 
   627  0002                     	;# 
   628  0003                     	;# 
   629  0004                     	;# 
   630  0005                     	;# 
   631  0006                     	;# 
   632  0007                     	;# 
   633  0008                     	;# 
   634  0009                     	;# 
   635  000A                     	;# 
   636  000B                     	;# 
   637  000C                     	;# 
   638  000D                     	;# 
   639  000E                     	;# 
   640  0010                     	;# 
   641  0011                     	;# 
   642  0012                     	;# 
   643  0013                     	;# 
   644  0014                     	;# 
   645  0015                     	;# 
   646  0016                     	;# 
   647  0016                     	;# 
   648  0017                     	;# 
   649  0018                     	;# 
   650  0019                     	;# 
   651  001A                     	;# 
   652  001A                     	;# 
   653  001B                     	;# 
   654  001B                     	;# 
   655  001C                     	;# 
   656  001D                     	;# 
   657  001E                     	;# 
   658  001F                     	;# 
   659  008C                     	;# 
   660  008D                     	;# 
   661  008E                     	;# 
   662  0090                     	;# 
   663  0091                     	;# 
   664  0092                     	;# 
   665  0093                     	;# 
   666  0094                     	;# 
   667  0095                     	;# 
   668  0096                     	;# 
   669  0098                     	;# 
   670  0099                     	;# 
   671  009A                     	;# 
   672  009B                     	;# 
   673  009B                     	;# 
   674  009C                     	;# 
   675  009D                     	;# 
   676  009E                     	;# 
   677  009F                     	;# 
   678  010C                     	;# 
   679  010D                     	;# 
   680  010E                     	;# 
   681  0111                     	;# 
   682  0112                     	;# 
   683  0113                     	;# 
   684  0114                     	;# 
   685  0115                     	;# 
   686  0116                     	;# 
   687  0117                     	;# 
   688  0118                     	;# 
   689  0119                     	;# 
   690  011C                     	;# 
   691  018C                     	;# 
   692  018D                     	;# 
   693  018E                     	;# 
   694  0191                     	;# 
   695  0191                     	;# 
   696  0192                     	;# 
   697  0193                     	;# 
   698  0193                     	;# 
   699  0194                     	;# 
   700  0195                     	;# 
   701  0196                     	;# 
   702  0197                     	;# 
   703  0199                     	;# 
   704  0199                     	;# 
   705  0199                     	;# 
   706  019A                     	;# 
   707  019A                     	;# 
   708  019A                     	;# 
   709  019B                     	;# 
   710  019B                     	;# 
   711  019B                     	;# 
   712  019B                     	;# 
   713  019B                     	;# 
   714  019C                     	;# 
   715  019C                     	;# 
   716  019C                     	;# 
   717  019D                     	;# 
   718  019D                     	;# 
   719  019D                     	;# 
   720  019E                     	;# 
   721  019E                     	;# 
   722  019E                     	;# 
   723  019F                     	;# 
   724  019F                     	;# 
   725  019F                     	;# 
   726  019F                     	;# 
   727  019F                     	;# 
   728  020C                     	;# 
   729  020D                     	;# 
   730  020E                     	;# 
   731  0211                     	;# 
   732  0211                     	;# 
   733  0212                     	;# 
   734  0212                     	;# 
   735  0213                     	;# 
   736  0213                     	;# 
   737  0214                     	;# 
   738  0214                     	;# 
   739  0215                     	;# 
   740  0215                     	;# 
   741  0215                     	;# 
   742  0215                     	;# 
   743  0216                     	;# 
   744  0216                     	;# 
   745  0217                     	;# 
   746  0217                     	;# 
   747  028C                     	;# 
   748  028D                     	;# 
   749  028E                     	;# 
   750  0291                     	;# 
   751  0291                     	;# 
   752  0292                     	;# 
   753  0293                     	;# 
   754  0294                     	;# 
   755  0298                     	;# 
   756  0298                     	;# 
   757  0299                     	;# 
   758  029A                     	;# 
   759  029B                     	;# 
   760  029E                     	;# 
   761  030C                     	;# 
   762  030D                     	;# 
   763  030E                     	;# 
   764  038C                     	;# 
   765  038D                     	;# 
   766  038E                     	;# 
   767  0391                     	;# 
   768  0392                     	;# 
   769  0393                     	;# 
   770  0394                     	;# 
   771  0395                     	;# 
   772  0396                     	;# 
   773  0397                     	;# 
   774  0398                     	;# 
   775  0399                     	;# 
   776  040E                     	;# 
   777  0413                     	;# 
   778  0413                     	;# 
   779  0414                     	;# 
   780  0414                     	;# 
   781  0415                     	;# 
   782  0416                     	;# 
   783  0417                     	;# 
   784  0418                     	;# 
   785  041A                     	;# 
   786  041A                     	;# 
   787  041B                     	;# 
   788  041B                     	;# 
   789  041C                     	;# 
   790  041D                     	;# 
   791  041E                     	;# 
   792  041F                     	;# 
   793  0493                     	;# 
   794  0494                     	;# 
   795  0495                     	;# 
   796  0496                     	;# 
   797  049A                     	;# 
   798  049B                     	;# 
   799  049C                     	;# 
   800  049D                     	;# 
   801  058C                     	;# 
   802  058C                     	;# 
   803  058D                     	;# 
   804  058E                     	;# 
   805  058E                     	;# 
   806  058F                     	;# 
   807  0590                     	;# 
   808  0590                     	;# 
   809  0591                     	;# 
   810  0592                     	;# 
   811  0592                     	;# 
   812  0593                     	;# 
   813  0594                     	;# 
   814  0594                     	;# 
   815  0595                     	;# 
   816  0596                     	;# 
   817  0596                     	;# 
   818  0597                     	;# 
   819  0598                     	;# 
   820  0599                     	;# 
   821  059A                     	;# 
   822  059B                     	;# 
   823  059B                     	;# 
   824  059C                     	;# 
   825  059D                     	;# 
   826  060C                     	;# 
   827  060C                     	;# 
   828  060D                     	;# 
   829  060E                     	;# 
   830  060F                     	;# 
   831  060F                     	;# 
   832  0610                     	;# 
   833  0611                     	;# 
   834  0612                     	;# 
   835  0613                     	;# 
   836  0614                     	;# 
   837  0617                     	;# 
   838  0618                     	;# 
   839  0619                     	;# 
   840  061A                     	;# 
   841  061B                     	;# 
   842  061C                     	;# 
   843  0691                     	;# 
   844  0692                     	;# 
   845  0693                     	;# 
   846  0694                     	;# 
   847  0695                     	;# 
   848  0696                     	;# 
   849  0697                     	;# 
   850  0699                     	;# 
   851  069A                     	;# 
   852  0711                     	;# 
   853  0712                     	;# 
   854  0713                     	;# 
   855  0714                     	;# 
   856  0715                     	;# 
   857  0718                     	;# 
   858  0718                     	;# 
   859  0719                     	;# 
   860  071A                     	;# 
   861  071A                     	;# 
   862  071B                     	;# 
   863  071C                     	;# 
   864  071D                     	;# 
   865  0791                     	;# 
   866  0791                     	;# 
   867  0792                     	;# 
   868  0793                     	;# 
   869  0793                     	;# 
   870  0794                     	;# 
   871  0795                     	;# 
   872  0795                     	;# 
   873  0796                     	;# 
   874  0797                     	;# 
   875  0797                     	;# 
   876  0798                     	;# 
   877  0799                     	;# 
   878  079A                     	;# 
   879  080C                     	;# 
   880  080C                     	;# 
   881  080D                     	;# 
   882  080E                     	;# 
   883  080E                     	;# 
   884  080F                     	;# 
   885  0810                     	;# 
   886  0810                     	;# 
   887  0811                     	;# 
   888  0812                     	;# 
   889  0812                     	;# 
   890  0813                     	;# 
   891  0814                     	;# 
   892  0815                     	;# 
   893  0816                     	;# 
   894  0817                     	;# 
   895  0818                     	;# 
   896  0819                     	;# 
   897  081A                     	;# 
   898  081A                     	;# 
   899  081B                     	;# 
   900  081C                     	;# 
   901  081C                     	;# 
   902  081D                     	;# 
   903  088C                     	;# 
   904  088D                     	;# 
   905  088E                     	;# 
   906  088F                     	;# 
   907  088F                     	;# 
   908  0890                     	;# 
   909  0891                     	;# 
   910  0892                     	;# 
   911  0893                     	;# 
   912  0893                     	;# 
   913  0894                     	;# 
   914  0895                     	;# 
   915  0896                     	;# 
   916  0897                     	;# 
   917  0897                     	;# 
   918  0898                     	;# 
   919  0899                     	;# 
   920  0D8C                     	;# 
   921  0D8C                     	;# 
   922  0D8D                     	;# 
   923  0D8E                     	;# 
   924  0D8F                     	;# 
   925  0D8F                     	;# 
   926  0D90                     	;# 
   927  0D91                     	;# 
   928  0D92                     	;# 
   929  0D92                     	;# 
   930  0D93                     	;# 
   931  0D94                     	;# 
   932  0D95                     	;# 
   933  0D95                     	;# 
   934  0D96                     	;# 
   935  0D97                     	;# 
   936  0D98                     	;# 
   937  0D99                     	;# 
   938  0D9A                     	;# 
   939  0D9B                     	;# 
   940  0D9C                     	;# 
   941  0D9D                     	;# 
   942  0D9E                     	;# 
   943  0D9E                     	;# 
   944  0D9F                     	;# 
   945  0DA0                     	;# 
   946  0DA1                     	;# 
   947  0DA1                     	;# 
   948  0DA2                     	;# 
   949  0DA3                     	;# 
   950  0DA4                     	;# 
   951  0DA4                     	;# 
   952  0DA5                     	;# 
   953  0DA6                     	;# 
   954  0DA7                     	;# 
   955  0DA7                     	;# 
   956  0DA8                     	;# 
   957  0DA9                     	;# 
   958  0DAA                     	;# 
   959  0DAB                     	;# 
   960  0DAC                     	;# 
   961  0DAD                     	;# 
   962  0DAE                     	;# 
   963  0DAF                     	;# 
   964  0E0F                     	;# 
   965  0E10                     	;# 
   966  0E11                     	;# 
   967  0E12                     	;# 
   968  0E13                     	;# 
   969  0E14                     	;# 
   970  0E15                     	;# 
   971  0E16                     	;# 
   972  0E17                     	;# 
   973  0E18                     	;# 
   974  0E19                     	;# 
   975  0E1A                     	;# 
   976  0E1B                     	;# 
   977  0E1C                     	;# 
   978  0E1D                     	;# 
   979  0E1E                     	;# 
   980  0E1F                     	;# 
   981  0E20                     	;# 
   982  0E21                     	;# 
   983  0E22                     	;# 
   984  0E23                     	;# 
   985  0E24                     	;# 
   986  0E25                     	;# 
   987  0E26                     	;# 
   988  0E27                     	;# 
   989  0E28                     	;# 
   990  0E29                     	;# 
   991  0E2A                     	;# 
   992  0E2B                     	;# 
   993  0E2C                     	;# 
   994  0E2D                     	;# 
   995  0E2E                     	;# 
   996  0E90                     	;# 
   997  0E91                     	;# 
   998  0E92                     	;# 
   999  0E94                     	;# 
  1000  0E95                     	;# 
  1001  0E9C                     	;# 
  1002  0E9D                     	;# 
  1003  0E9E                     	;# 
  1004  0E9F                     	;# 
  1005  0EA0                     	;# 
  1006  0EA1                     	;# 
  1007  0EA2                     	;# 
  1008  0EA3                     	;# 
  1009  0EA4                     	;# 
  1010  0EA5                     	;# 
  1011  0EA6                     	;# 
  1012  0EA7                     	;# 
  1013  0F0F                     	;# 
  1014  0F10                     	;# 
  1015  0F11                     	;# 
  1016  0F12                     	;# 
  1017  0F13                     	;# 
  1018  0F14                     	;# 
  1019  0F15                     	;# 
  1020  0F16                     	;# 
  1021  0F17                     	;# 
  1022  0F18                     	;# 
  1023  0F19                     	;# 
  1024  0F1A                     	;# 
  1025  0F1B                     	;# 
  1026  0F1C                     	;# 
  1027  0F1D                     	;# 
  1028  0F1E                     	;# 
  1029  0F1F                     	;# 
  1030  0F20                     	;# 
  1031  0F21                     	;# 
  1032  0F22                     	;# 
  1033  0F23                     	;# 
  1034  0F24                     	;# 
  1035  0F25                     	;# 
  1036  0F26                     	;# 
  1037  0F27                     	;# 
  1038  0F28                     	;# 
  1039  0F29                     	;# 
  1040  0F2A                     	;# 
  1041  0F2B                     	;# 
  1042  0F2C                     	;# 
  1043  0F2D                     	;# 
  1044  0F2E                     	;# 
  1045  0F2F                     	;# 
  1046  0F30                     	;# 
  1047  0F31                     	;# 
  1048  0F32                     	;# 
  1049  0F33                     	;# 
  1050  0F34                     	;# 
  1051  0F35                     	;# 
  1052  0F36                     	;# 
  1053  0F37                     	;# 
  1054  0FE4                     	;# 
  1055  0FE5                     	;# 
  1056  0FE6                     	;# 
  1057  0FE7                     	;# 
  1058  0FE8                     	;# 
  1059  0FE9                     	;# 
  1060  0FEA                     	;# 
  1061  0FEB                     	;# 
  1062  0FED                     	;# 
  1063  0FEE                     	;# 
  1064  0FEF                     	;# 
  1065  0000                     	;# 
  1066  0001                     	;# 
  1067  0002                     	;# 
  1068  0003                     	;# 
  1069  0004                     	;# 
  1070  0005                     	;# 
  1071  0006                     	;# 
  1072  0007                     	;# 
  1073  0008                     	;# 
  1074  0009                     	;# 
  1075  000A                     	;# 
  1076  000B                     	;# 
  1077  000C                     	;# 
  1078  000D                     	;# 
  1079  000E                     	;# 
  1080  0010                     	;# 
  1081  0011                     	;# 
  1082  0012                     	;# 
  1083  0013                     	;# 
  1084  0014                     	;# 
  1085  0015                     	;# 
  1086  0016                     	;# 
  1087  0016                     	;# 
  1088  0017                     	;# 
  1089  0018                     	;# 
  1090  0019                     	;# 
  1091  001A                     	;# 
  1092  001A                     	;# 
  1093  001B                     	;# 
  1094  001B                     	;# 
  1095  001C                     	;# 
  1096  001D                     	;# 
  1097  001E                     	;# 
  1098  001F                     	;# 
  1099  008C                     	;# 
  1100  008D                     	;# 
  1101  008E                     	;# 
  1102  0090                     	;# 
  1103  0091                     	;# 
  1104  0092                     	;# 
  1105  0093                     	;# 
  1106  0094                     	;# 
  1107  0095                     	;# 
  1108  0096                     	;# 
  1109  0098                     	;# 
  1110  0099                     	;# 
  1111  009A                     	;# 
  1112  009B                     	;# 
  1113  009B                     	;# 
  1114  009C                     	;# 
  1115  009D                     	;# 
  1116  009E                     	;# 
  1117  009F                     	;# 
  1118  010C                     	;# 
  1119  010D                     	;# 
  1120  010E                     	;# 
  1121  0111                     	;# 
  1122  0112                     	;# 
  1123  0113                     	;# 
  1124  0114                     	;# 
  1125  0115                     	;# 
  1126  0116                     	;# 
  1127  0117                     	;# 
  1128  0118                     	;# 
  1129  0119                     	;# 
  1130  011C                     	;# 
  1131  018C                     	;# 
  1132  018D                     	;# 
  1133  018E                     	;# 
  1134  0191                     	;# 
  1135  0191                     	;# 
  1136  0192                     	;# 
  1137  0193                     	;# 
  1138  0193                     	;# 
  1139  0194                     	;# 
  1140  0195                     	;# 
  1141  0196                     	;# 
  1142  0197                     	;# 
  1143  0199                     	;# 
  1144  0199                     	;# 
  1145  0199                     	;# 
  1146  019A                     	;# 
  1147  019A                     	;# 
  1148  019A                     	;# 
  1149  019B                     	;# 
  1150  019B                     	;# 
  1151  019B                     	;# 
  1152  019B                     	;# 
  1153  019B                     	;# 
  1154  019C                     	;# 
  1155  019C                     	;# 
  1156  019C                     	;# 
  1157  019D                     	;# 
  1158  019D                     	;# 
  1159  019D                     	;# 
  1160  019E                     	;# 
  1161  019E                     	;# 
  1162  019E                     	;# 
  1163  019F                     	;# 
  1164  019F                     	;# 
  1165  019F                     	;# 
  1166  019F                     	;# 
  1167  019F                     	;# 
  1168  020C                     	;# 
  1169  020D                     	;# 
  1170  020E                     	;# 
  1171  0211                     	;# 
  1172  0211                     	;# 
  1173  0212                     	;# 
  1174  0212                     	;# 
  1175  0213                     	;# 
  1176  0213                     	;# 
  1177  0214                     	;# 
  1178  0214                     	;# 
  1179  0215                     	;# 
  1180  0215                     	;# 
  1181  0215                     	;# 
  1182  0215                     	;# 
  1183  0216                     	;# 
  1184  0216                     	;# 
  1185  0217                     	;# 
  1186  0217                     	;# 
  1187  028C                     	;# 
  1188  028D                     	;# 
  1189  028E                     	;# 
  1190  0291                     	;# 
  1191  0291                     	;# 
  1192  0292                     	;# 
  1193  0293                     	;# 
  1194  0294                     	;# 
  1195  0298                     	;# 
  1196  0298                     	;# 
  1197  0299                     	;# 
  1198  029A                     	;# 
  1199  029B                     	;# 
  1200  029E                     	;# 
  1201  030C                     	;# 
  1202  030D                     	;# 
  1203  030E                     	;# 
  1204  038C                     	;# 
  1205  038D                     	;# 
  1206  038E                     	;# 
  1207  0391                     	;# 
  1208  0392                     	;# 
  1209  0393                     	;# 
  1210  0394                     	;# 
  1211  0395                     	;# 
  1212  0396                     	;# 
  1213  0397                     	;# 
  1214  0398                     	;# 
  1215  0399                     	;# 
  1216  040E                     	;# 
  1217  0413                     	;# 
  1218  0413                     	;# 
  1219  0414                     	;# 
  1220  0414                     	;# 
  1221  0415                     	;# 
  1222  0416                     	;# 
  1223  0417                     	;# 
  1224  0418                     	;# 
  1225  041A                     	;# 
  1226  041A                     	;# 
  1227  041B                     	;# 
  1228  041B                     	;# 
  1229  041C                     	;# 
  1230  041D                     	;# 
  1231  041E                     	;# 
  1232  041F                     	;# 
  1233  0493                     	;# 
  1234  0494                     	;# 
  1235  0495                     	;# 
  1236  0496                     	;# 
  1237  049A                     	;# 
  1238  049B                     	;# 
  1239  049C                     	;# 
  1240  049D                     	;# 
  1241  058C                     	;# 
  1242  058C                     	;# 
  1243  058D                     	;# 
  1244  058E                     	;# 
  1245  058E                     	;# 
  1246  058F                     	;# 
  1247  0590                     	;# 
  1248  0590                     	;# 
  1249  0591                     	;# 
  1250  0592                     	;# 
  1251  0592                     	;# 
  1252  0593                     	;# 
  1253  0594                     	;# 
  1254  0594                     	;# 
  1255  0595                     	;# 
  1256  0596                     	;# 
  1257  0596                     	;# 
  1258  0597                     	;# 
  1259  0598                     	;# 
  1260  0599                     	;# 
  1261  059A                     	;# 
  1262  059B                     	;# 
  1263  059B                     	;# 
  1264  059C                     	;# 
  1265  059D                     	;# 
  1266  060C                     	;# 
  1267  060C                     	;# 
  1268  060D                     	;# 
  1269  060E                     	;# 
  1270  060F                     	;# 
  1271  060F                     	;# 
  1272  0610                     	;# 
  1273  0611                     	;# 
  1274  0612                     	;# 
  1275  0613                     	;# 
  1276  0614                     	;# 
  1277  0617                     	;# 
  1278  0618                     	;# 
  1279  0619                     	;# 
  1280  061A                     	;# 
  1281  061B                     	;# 
  1282  061C                     	;# 
  1283  0691                     	;# 
  1284  0692                     	;# 
  1285  0693                     	;# 
  1286  0694                     	;# 
  1287  0695                     	;# 
  1288  0696                     	;# 
  1289  0697                     	;# 
  1290  0699                     	;# 
  1291  069A                     	;# 
  1292  0711                     	;# 
  1293  0712                     	;# 
  1294  0713                     	;# 
  1295  0714                     	;# 
  1296  0715                     	;# 
  1297  0718                     	;# 
  1298  0718                     	;# 
  1299  0719                     	;# 
  1300  071A                     	;# 
  1301  071A                     	;# 
  1302  071B                     	;# 
  1303  071C                     	;# 
  1304  071D                     	;# 
  1305  0791                     	;# 
  1306  0791                     	;# 
  1307  0792                     	;# 
  1308  0793                     	;# 
  1309  0793                     	;# 
  1310  0794                     	;# 
  1311  0795                     	;# 
  1312  0795                     	;# 
  1313  0796                     	;# 
  1314  0797                     	;# 
  1315  0797                     	;# 
  1316  0798                     	;# 
  1317  0799                     	;# 
  1318  079A                     	;# 
  1319  080C                     	;# 
  1320  080C                     	;# 
  1321  080D                     	;# 
  1322  080E                     	;# 
  1323  080E                     	;# 
  1324  080F                     	;# 
  1325  0810                     	;# 
  1326  0810                     	;# 
  1327  0811                     	;# 
  1328  0812                     	;# 
  1329  0812                     	;# 
  1330  0813                     	;# 
  1331  0814                     	;# 
  1332  0815                     	;# 
  1333  0816                     	;# 
  1334  0817                     	;# 
  1335  0818                     	;# 
  1336  0819                     	;# 
  1337  081A                     	;# 
  1338  081A                     	;# 
  1339  081B                     	;# 
  1340  081C                     	;# 
  1341  081C                     	;# 
  1342  081D                     	;# 
  1343  088C                     	;# 
  1344  088D                     	;# 
  1345  088E                     	;# 
  1346  088F                     	;# 
  1347  088F                     	;# 
  1348  0890                     	;# 
  1349  0891                     	;# 
  1350  0892                     	;# 
  1351  0893                     	;# 
  1352  0893                     	;# 
  1353  0894                     	;# 
  1354  0895                     	;# 
  1355  0896                     	;# 
  1356  0897                     	;# 
  1357  0897                     	;# 
  1358  0898                     	;# 
  1359  0899                     	;# 
  1360  0D8C                     	;# 
  1361  0D8C                     	;# 
  1362  0D8D                     	;# 
  1363  0D8E                     	;# 
  1364  0D8F                     	;# 
  1365  0D8F                     	;# 
  1366  0D90                     	;# 
  1367  0D91                     	;# 
  1368  0D92                     	;# 
  1369  0D92                     	;# 
  1370  0D93                     	;# 
  1371  0D94                     	;# 
  1372  0D95                     	;# 
  1373  0D95                     	;# 
  1374  0D96                     	;# 
  1375  0D97                     	;# 
  1376  0D98                     	;# 
  1377  0D99                     	;# 
  1378  0D9A                     	;# 
  1379  0D9B                     	;# 
  1380  0D9C                     	;# 
  1381  0D9D                     	;# 
  1382  0D9E                     	;# 
  1383  0D9E                     	;# 
  1384  0D9F                     	;# 
  1385  0DA0                     	;# 
  1386  0DA1                     	;# 
  1387  0DA1                     	;# 
  1388  0DA2                     	;# 
  1389  0DA3                     	;# 
  1390  0DA4                     	;# 
  1391  0DA4                     	;# 
  1392  0DA5                     	;# 
  1393  0DA6                     	;# 
  1394  0DA7                     	;# 
  1395  0DA7                     	;# 
  1396  0DA8                     	;# 
  1397  0DA9                     	;# 
  1398  0DAA                     	;# 
  1399  0DAB                     	;# 
  1400  0DAC                     	;# 
  1401  0DAD                     	;# 
  1402  0DAE                     	;# 
  1403  0DAF                     	;# 
  1404  0E0F                     	;# 
  1405  0E10                     	;# 
  1406  0E11                     	;# 
  1407  0E12                     	;# 
  1408  0E13                     	;# 
  1409  0E14                     	;# 
  1410  0E15                     	;# 
  1411  0E16                     	;# 
  1412  0E17                     	;# 
  1413  0E18                     	;# 
  1414  0E19                     	;# 
  1415  0E1A                     	;# 
  1416  0E1B                     	;# 
  1417  0E1C                     	;# 
  1418  0E1D                     	;# 
  1419  0E1E                     	;# 
  1420  0E1F                     	;# 
  1421  0E20                     	;# 
  1422  0E21                     	;# 
  1423  0E22                     	;# 
  1424  0E23                     	;# 
  1425  0E24                     	;# 
  1426  0E25                     	;# 
  1427  0E26                     	;# 
  1428  0E27                     	;# 
  1429  0E28                     	;# 
  1430  0E29                     	;# 
  1431  0E2A                     	;# 
  1432  0E2B                     	;# 
  1433  0E2C                     	;# 
  1434  0E2D                     	;# 
  1435  0E2E                     	;# 
  1436  0E90                     	;# 
  1437  0E91                     	;# 
  1438  0E92                     	;# 
  1439  0E94                     	;# 
  1440  0E95                     	;# 
  1441  0E9C                     	;# 
  1442  0E9D                     	;# 
  1443  0E9E                     	;# 
  1444  0E9F                     	;# 
  1445  0EA0                     	;# 
  1446  0EA1                     	;# 
  1447  0EA2                     	;# 
  1448  0EA3                     	;# 
  1449  0EA4                     	;# 
  1450  0EA5                     	;# 
  1451  0EA6                     	;# 
  1452  0EA7                     	;# 
  1453  0F0F                     	;# 
  1454  0F10                     	;# 
  1455  0F11                     	;# 
  1456  0F12                     	;# 
  1457  0F13                     	;# 
  1458  0F14                     	;# 
  1459  0F15                     	;# 
  1460  0F16                     	;# 
  1461  0F17                     	;# 
  1462  0F18                     	;# 
  1463  0F19                     	;# 
  1464  0F1A                     	;# 
  1465  0F1B                     	;# 
  1466  0F1C                     	;# 
  1467  0F1D                     	;# 
  1468  0F1E                     	;# 
  1469  0F1F                     	;# 
  1470  0F20                     	;# 
  1471  0F21                     	;# 
  1472  0F22                     	;# 
  1473  0F23                     	;# 
  1474  0F24                     	;# 
  1475  0F25                     	;# 
  1476  0F26                     	;# 
  1477  0F27                     	;# 
  1478  0F28                     	;# 
  1479  0F29                     	;# 
  1480  0F2A                     	;# 
  1481  0F2B                     	;# 
  1482  0F2C                     	;# 
  1483  0F2D                     	;# 
  1484  0F2E                     	;# 
  1485  0F2F                     	;# 
  1486  0F30                     	;# 
  1487  0F31                     	;# 
  1488  0F32                     	;# 
  1489  0F33                     	;# 
  1490  0F34                     	;# 
  1491  0F35                     	;# 
  1492  0F36                     	;# 
  1493  0F37                     	;# 
  1494  0FE4                     	;# 
  1495  0FE5                     	;# 
  1496  0FE6                     	;# 
  1497  0FE7                     	;# 
  1498  0FE8                     	;# 
  1499  0FE9                     	;# 
  1500  0FEA                     	;# 
  1501  0FEB                     	;# 
  1502  0FED                     	;# 
  1503  0FEE                     	;# 
  1504  0FEF                     	;# 
  1505  0000                     	;# 
  1506  0001                     	;# 
  1507  0002                     	;# 
  1508  0003                     	;# 
  1509  0004                     	;# 
  1510  0005                     	;# 
  1511  0006                     	;# 
  1512  0007                     	;# 
  1513  0008                     	;# 
  1514  0009                     	;# 
  1515  000A                     	;# 
  1516  000B                     	;# 
  1517  000C                     	;# 
  1518  000D                     	;# 
  1519  000E                     	;# 
  1520  0010                     	;# 
  1521  0011                     	;# 
  1522  0012                     	;# 
  1523  0013                     	;# 
  1524  0014                     	;# 
  1525  0015                     	;# 
  1526  0016                     	;# 
  1527  0016                     	;# 
  1528  0017                     	;# 
  1529  0018                     	;# 
  1530  0019                     	;# 
  1531  001A                     	;# 
  1532  001A                     	;# 
  1533  001B                     	;# 
  1534  001B                     	;# 
  1535  001C                     	;# 
  1536  001D                     	;# 
  1537  001E                     	;# 
  1538  001F                     	;# 
  1539  008C                     	;# 
  1540  008D                     	;# 
  1541  008E                     	;# 
  1542  0090                     	;# 
  1543  0091                     	;# 
  1544  0092                     	;# 
  1545  0093                     	;# 
  1546  0094                     	;# 
  1547  0095                     	;# 
  1548  0096                     	;# 
  1549  0098                     	;# 
  1550  0099                     	;# 
  1551  009A                     	;# 
  1552  009B                     	;# 
  1553  009B                     	;# 
  1554  009C                     	;# 
  1555  009D                     	;# 
  1556  009E                     	;# 
  1557  009F                     	;# 
  1558  010C                     	;# 
  1559  010D                     	;# 
  1560  010E                     	;# 
  1561  0111                     	;# 
  1562  0112                     	;# 
  1563  0113                     	;# 
  1564  0114                     	;# 
  1565  0115                     	;# 
  1566  0116                     	;# 
  1567  0117                     	;# 
  1568  0118                     	;# 
  1569  0119                     	;# 
  1570  011C                     	;# 
  1571  018C                     	;# 
  1572  018D                     	;# 
  1573  018E                     	;# 
  1574  0191                     	;# 
  1575  0191                     	;# 
  1576  0192                     	;# 
  1577  0193                     	;# 
  1578  0193                     	;# 
  1579  0194                     	;# 
  1580  0195                     	;# 
  1581  0196                     	;# 
  1582  0197                     	;# 
  1583  0199                     	;# 
  1584  0199                     	;# 
  1585  0199                     	;# 
  1586  019A                     	;# 
  1587  019A                     	;# 
  1588  019A                     	;# 
  1589  019B                     	;# 
  1590  019B                     	;# 
  1591  019B                     	;# 
  1592  019B                     	;# 
  1593  019B                     	;# 
  1594  019C                     	;# 
  1595  019C                     	;# 
  1596  019C                     	;# 
  1597  019D                     	;# 
  1598  019D                     	;# 
  1599  019D                     	;# 
  1600  019E                     	;# 
  1601  019E                     	;# 
  1602  019E                     	;# 
  1603  019F                     	;# 
  1604  019F                     	;# 
  1605  019F                     	;# 
  1606  019F                     	;# 
  1607  019F                     	;# 
  1608  020C                     	;# 
  1609  020D                     	;# 
  1610  020E                     	;# 
  1611  0211                     	;# 
  1612  0211                     	;# 
  1613  0212                     	;# 
  1614  0212                     	;# 
  1615  0213                     	;# 
  1616  0213                     	;# 
  1617  0214                     	;# 
  1618  0214                     	;# 
  1619  0215                     	;# 
  1620  0215                     	;# 
  1621  0215                     	;# 
  1622  0215                     	;# 
  1623  0216                     	;# 
  1624  0216                     	;# 
  1625  0217                     	;# 
  1626  0217                     	;# 
  1627  028C                     	;# 
  1628  028D                     	;# 
  1629  028E                     	;# 
  1630  0291                     	;# 
  1631  0291                     	;# 
  1632  0292                     	;# 
  1633  0293                     	;# 
  1634  0294                     	;# 
  1635  0298                     	;# 
  1636  0298                     	;# 
  1637  0299                     	;# 
  1638  029A                     	;# 
  1639  029B                     	;# 
  1640  029E                     	;# 
  1641  030C                     	;# 
  1642  030D                     	;# 
  1643  030E                     	;# 
  1644  038C                     	;# 
  1645  038D                     	;# 
  1646  038E                     	;# 
  1647  0391                     	;# 
  1648  0392                     	;# 
  1649  0393                     	;# 
  1650  0394                     	;# 
  1651  0395                     	;# 
  1652  0396                     	;# 
  1653  0397                     	;# 
  1654  0398                     	;# 
  1655  0399                     	;# 
  1656  040E                     	;# 
  1657  0413                     	;# 
  1658  0413                     	;# 
  1659  0414                     	;# 
  1660  0414                     	;# 
  1661  0415                     	;# 
  1662  0416                     	;# 
  1663  0417                     	;# 
  1664  0418                     	;# 
  1665  041A                     	;# 
  1666  041A                     	;# 
  1667  041B                     	;# 
  1668  041B                     	;# 
  1669  041C                     	;# 
  1670  041D                     	;# 
  1671  041E                     	;# 
  1672  041F                     	;# 
  1673  0493                     	;# 
  1674  0494                     	;# 
  1675  0495                     	;# 
  1676  0496                     	;# 
  1677  049A                     	;# 
  1678  049B                     	;# 
  1679  049C                     	;# 
  1680  049D                     	;# 
  1681  058C                     	;# 
  1682  058C                     	;# 
  1683  058D                     	;# 
  1684  058E                     	;# 
  1685  058E                     	;# 
  1686  058F                     	;# 
  1687  0590                     	;# 
  1688  0590                     	;# 
  1689  0591                     	;# 
  1690  0592                     	;# 
  1691  0592                     	;# 
  1692  0593                     	;# 
  1693  0594                     	;# 
  1694  0594                     	;# 
  1695  0595                     	;# 
  1696  0596                     	;# 
  1697  0596                     	;# 
  1698  0597                     	;# 
  1699  0598                     	;# 
  1700  0599                     	;# 
  1701  059A                     	;# 
  1702  059B                     	;# 
  1703  059B                     	;# 
  1704  059C                     	;# 
  1705  059D                     	;# 
  1706  060C                     	;# 
  1707  060C                     	;# 
  1708  060D                     	;# 
  1709  060E                     	;# 
  1710  060F                     	;# 
  1711  060F                     	;# 
  1712  0610                     	;# 
  1713  0611                     	;# 
  1714  0612                     	;# 
  1715  0613                     	;# 
  1716  0614                     	;# 
  1717  0617                     	;# 
  1718  0618                     	;# 
  1719  0619                     	;# 
  1720  061A                     	;# 
  1721  061B                     	;# 
  1722  061C                     	;# 
  1723  0691                     	;# 
  1724  0692                     	;# 
  1725  0693                     	;# 
  1726  0694                     	;# 
  1727  0695                     	;# 
  1728  0696                     	;# 
  1729  0697                     	;# 
  1730  0699                     	;# 
  1731  069A                     	;# 
  1732  0711                     	;# 
  1733  0712                     	;# 
  1734  0713                     	;# 
  1735  0714                     	;# 
  1736  0715                     	;# 
  1737  0718                     	;# 
  1738  0718                     	;# 
  1739  0719                     	;# 
  1740  071A                     	;# 
  1741  071A                     	;# 
  1742  071B                     	;# 
  1743  071C                     	;# 
  1744  071D                     	;# 
  1745  0791                     	;# 
  1746  0791                     	;# 
  1747  0792                     	;# 
  1748  0793                     	;# 
  1749  0793                     	;# 
  1750  0794                     	;# 
  1751  0795                     	;# 
  1752  0795                     	;# 
  1753  0796                     	;# 
  1754  0797                     	;# 
  1755  0797                     	;# 
  1756  0798                     	;# 
  1757  0799                     	;# 
  1758  079A                     	;# 
  1759  080C                     	;# 
  1760  080C                     	;# 
  1761  080D                     	;# 
  1762  080E                     	;# 
  1763  080E                     	;# 
  1764  080F                     	;# 
  1765  0810                     	;# 
  1766  0810                     	;# 
  1767  0811                     	;# 
  1768  0812                     	;# 
  1769  0812                     	;# 
  1770  0813                     	;# 
  1771  0814                     	;# 
  1772  0815                     	;# 
  1773  0816                     	;# 
  1774  0817                     	;# 
  1775  0818                     	;# 
  1776  0819                     	;# 
  1777  081A                     	;# 
  1778  081A                     	;# 
  1779  081B                     	;# 
  1780  081C                     	;# 
  1781  081C                     	;# 
  1782  081D                     	;# 
  1783  088C                     	;# 
  1784  088D                     	;# 
  1785  088E                     	;# 
  1786  088F                     	;# 
  1787  088F                     	;# 
  1788  0890                     	;# 
  1789  0891                     	;# 
  1790  0892                     	;# 
  1791  0893                     	;# 
  1792  0893                     	;# 
  1793  0894                     	;# 
  1794  0895                     	;# 
  1795  0896                     	;# 
  1796  0897                     	;# 
  1797  0897                     	;# 
  1798  0898                     	;# 
  1799  0899                     	;# 
  1800  0D8C                     	;# 
  1801  0D8C                     	;# 
  1802  0D8D                     	;# 
  1803  0D8E                     	;# 
  1804  0D8F                     	;# 
  1805  0D8F                     	;# 
  1806  0D90                     	;# 
  1807  0D91                     	;# 
  1808  0D92                     	;# 
  1809  0D92                     	;# 
  1810  0D93                     	;# 
  1811  0D94                     	;# 
  1812  0D95                     	;# 
  1813  0D95                     	;# 
  1814  0D96                     	;# 
  1815  0D97                     	;# 
  1816  0D98                     	;# 
  1817  0D99                     	;# 
  1818  0D9A                     	;# 
  1819  0D9B                     	;# 
  1820  0D9C                     	;# 
  1821  0D9D                     	;# 
  1822  0D9E                     	;# 
  1823  0D9E                     	;# 
  1824  0D9F                     	;# 
  1825  0DA0                     	;# 
  1826  0DA1                     	;# 
  1827  0DA1                     	;# 
  1828  0DA2                     	;# 
  1829  0DA3                     	;# 
  1830  0DA4                     	;# 
  1831  0DA4                     	;# 
  1832  0DA5                     	;# 
  1833  0DA6                     	;# 
  1834  0DA7                     	;# 
  1835  0DA7                     	;# 
  1836  0DA8                     	;# 
  1837  0DA9                     	;# 
  1838  0DAA                     	;# 
  1839  0DAB                     	;# 
  1840  0DAC                     	;# 
  1841  0DAD                     	;# 
  1842  0DAE                     	;# 
  1843  0DAF                     	;# 
  1844  0E0F                     	;# 
  1845  0E10                     	;# 
  1846  0E11                     	;# 
  1847  0E12                     	;# 
  1848  0E13                     	;# 
  1849  0E14                     	;# 
  1850  0E15                     	;# 
  1851  0E16                     	;# 
  1852  0E17                     	;# 
  1853  0E18                     	;# 
  1854  0E19                     	;# 
  1855  0E1A                     	;# 
  1856  0E1B                     	;# 
  1857  0E1C                     	;# 
  1858  0E1D                     	;# 
  1859  0E1E                     	;# 
  1860  0E1F                     	;# 
  1861  0E20                     	;# 
  1862  0E21                     	;# 
  1863  0E22                     	;# 
  1864  0E23                     	;# 
  1865  0E24                     	;# 
  1866  0E25                     	;# 
  1867  0E26                     	;# 
  1868  0E27                     	;# 
  1869  0E28                     	;# 
  1870  0E29                     	;# 
  1871  0E2A                     	;# 
  1872  0E2B                     	;# 
  1873  0E2C                     	;# 
  1874  0E2D                     	;# 
  1875  0E2E                     	;# 
  1876  0E90                     	;# 
  1877  0E91                     	;# 
  1878  0E92                     	;# 
  1879  0E94                     	;# 
  1880  0E95                     	;# 
  1881  0E9C                     	;# 
  1882  0E9D                     	;# 
  1883  0E9E                     	;# 
  1884  0E9F                     	;# 
  1885  0EA0                     	;# 
  1886  0EA1                     	;# 
  1887  0EA2                     	;# 
  1888  0EA3                     	;# 
  1889  0EA4                     	;# 
  1890  0EA5                     	;# 
  1891  0EA6                     	;# 
  1892  0EA7                     	;# 
  1893  0F0F                     	;# 
  1894  0F10                     	;# 
  1895  0F11                     	;# 
  1896  0F12                     	;# 
  1897  0F13                     	;# 
  1898  0F14                     	;# 
  1899  0F15                     	;# 
  1900  0F16                     	;# 
  1901  0F17                     	;# 
  1902  0F18                     	;# 
  1903  0F19                     	;# 
  1904  0F1A                     	;# 
  1905  0F1B                     	;# 
  1906  0F1C                     	;# 
  1907  0F1D                     	;# 
  1908  0F1E                     	;# 
  1909  0F1F                     	;# 
  1910  0F20                     	;# 
  1911  0F21                     	;# 
  1912  0F22                     	;# 
  1913  0F23                     	;# 
  1914  0F24                     	;# 
  1915  0F25                     	;# 
  1916  0F26                     	;# 
  1917  0F27                     	;# 
  1918  0F28                     	;# 
  1919  0F29                     	;# 
  1920  0F2A                     	;# 
  1921  0F2B                     	;# 
  1922  0F2C                     	;# 
  1923  0F2D                     	;# 
  1924  0F2E                     	;# 
  1925  0F2F                     	;# 
  1926  0F30                     	;# 
  1927  0F31                     	;# 
  1928  0F32                     	;# 
  1929  0F33                     	;# 
  1930  0F34                     	;# 
  1931  0F35                     	;# 
  1932  0F36                     	;# 
  1933  0F37                     	;# 
  1934  0FE4                     	;# 
  1935  0FE5                     	;# 
  1936  0FE6                     	;# 
  1937  0FE7                     	;# 
  1938  0FE8                     	;# 
  1939  0FE9                     	;# 
  1940  0FEA                     	;# 
  1941  0FEB                     	;# 
  1942  0FED                     	;# 
  1943  0FEE                     	;# 
  1944  0FEF                     	;# 
  1945  0000                     	;# 
  1946  0001                     	;# 
  1947  0002                     	;# 
  1948  0003                     	;# 
  1949  0004                     	;# 
  1950  0005                     	;# 
  1951  0006                     	;# 
  1952  0007                     	;# 
  1953  0008                     	;# 
  1954  0009                     	;# 
  1955  000A                     	;# 
  1956  000B                     	;# 
  1957  000C                     	;# 
  1958  000D                     	;# 
  1959  000E                     	;# 
  1960  0010                     	;# 
  1961  0011                     	;# 
  1962  0012                     	;# 
  1963  0013                     	;# 
  1964  0014                     	;# 
  1965  0015                     	;# 
  1966  0016                     	;# 
  1967  0016                     	;# 
  1968  0017                     	;# 
  1969  0018                     	;# 
  1970  0019                     	;# 
  1971  001A                     	;# 
  1972  001A                     	;# 
  1973  001B                     	;# 
  1974  001B                     	;# 
  1975  001C                     	;# 
  1976  001D                     	;# 
  1977  001E                     	;# 
  1978  001F                     	;# 
  1979  008C                     	;# 
  1980  008D                     	;# 
  1981  008E                     	;# 
  1982  0090                     	;# 
  1983  0091                     	;# 
  1984  0092                     	;# 
  1985  0093                     	;# 
  1986  0094                     	;# 
  1987  0095                     	;# 
  1988  0096                     	;# 
  1989  0098                     	;# 
  1990  0099                     	;# 
  1991  009A                     	;# 
  1992  009B                     	;# 
  1993  009B                     	;# 
  1994  009C                     	;# 
  1995  009D                     	;# 
  1996  009E                     	;# 
  1997  009F                     	;# 
  1998  010C                     	;# 
  1999  010D                     	;# 
  2000  010E                     	;# 
  2001  0111                     	;# 
  2002  0112                     	;# 
  2003  0113                     	;# 
  2004  0114                     	;# 
  2005  0115                     	;# 
  2006  0116                     	;# 
  2007  0117                     	;# 
  2008  0118                     	;# 
  2009  0119                     	;# 
  2010  011C                     	;# 
  2011  018C                     	;# 
  2012  018D                     	;# 
  2013  018E                     	;# 
  2014  0191                     	;# 
  2015  0191                     	;# 
  2016  0192                     	;# 
  2017  0193                     	;# 
  2018  0193                     	;# 
  2019  0194                     	;# 
  2020  0195                     	;# 
  2021  0196                     	;# 
  2022  0197                     	;# 
  2023  0199                     	;# 
  2024  0199                     	;# 
  2025  0199                     	;# 
  2026  019A                     	;# 
  2027  019A                     	;# 
  2028  019A                     	;# 
  2029  019B                     	;# 
  2030  019B                     	;# 
  2031  019B                     	;# 
  2032  019B                     	;# 
  2033  019B                     	;# 
  2034  019C                     	;# 
  2035  019C                     	;# 
  2036  019C                     	;# 
  2037  019D                     	;# 
  2038  019D                     	;# 
  2039  019D                     	;# 
  2040  019E                     	;# 
  2041  019E                     	;# 
  2042  019E                     	;# 
  2043  019F                     	;# 
  2044  019F                     	;# 
  2045  019F                     	;# 
  2046  019F                     	;# 
  2047  019F                     	;# 
  2048  020C                     	;# 
  2049  020D                     	;# 
  2050  020E                     	;# 
  2051  0211                     	;# 
  2052  0211                     	;# 
  2053  0212                     	;# 
  2054  0212                     	;# 
  2055  0213                     	;# 
  2056  0213                     	;# 
  2057  0214                     	;# 
  2058  0214                     	;# 
  2059  0215                     	;# 
  2060  0215                     	;# 
  2061  0215                     	;# 
  2062  0215                     	;# 
  2063  0216                     	;# 
  2064  0216                     	;# 
  2065  0217                     	;# 
  2066  0217                     	;# 
  2067  028C                     	;# 
  2068  028D                     	;# 
  2069  028E                     	;# 
  2070  0291                     	;# 
  2071  0291                     	;# 
  2072  0292                     	;# 
  2073  0293                     	;# 
  2074  0294                     	;# 
  2075  0298                     	;# 
  2076  0298                     	;# 
  2077  0299                     	;# 
  2078  029A                     	;# 
  2079  029B                     	;# 
  2080  029E                     	;# 
  2081  030C                     	;# 
  2082  030D                     	;# 
  2083  030E                     	;# 
  2084  038C                     	;# 
  2085  038D                     	;# 
  2086  038E                     	;# 
  2087  0391                     	;# 
  2088  0392                     	;# 
  2089  0393                     	;# 
  2090  0394                     	;# 
  2091  0395                     	;# 
  2092  0396                     	;# 
  2093  0397                     	;# 
  2094  0398                     	;# 
  2095  0399                     	;# 
  2096  040E                     	;# 
  2097  0413                     	;# 
  2098  0413                     	;# 
  2099  0414                     	;# 
  2100  0414                     	;# 
  2101  0415                     	;# 
  2102  0416                     	;# 
  2103  0417                     	;# 
  2104  0418                     	;# 
  2105  041A                     	;# 
  2106  041A                     	;# 
  2107  041B                     	;# 
  2108  041B                     	;# 
  2109  041C                     	;# 
  2110  041D                     	;# 
  2111  041E                     	;# 
  2112  041F                     	;# 
  2113  0493                     	;# 
  2114  0494                     	;# 
  2115  0495                     	;# 
  2116  0496                     	;# 
  2117  049A                     	;# 
  2118  049B                     	;# 
  2119  049C                     	;# 
  2120  049D                     	;# 
  2121  058C                     	;# 
  2122  058C                     	;# 
  2123  058D                     	;# 
  2124  058E                     	;# 
  2125  058E                     	;# 
  2126  058F                     	;# 
  2127  0590                     	;# 
  2128  0590                     	;# 
  2129  0591                     	;# 
  2130  0592                     	;# 
  2131  0592                     	;# 
  2132  0593                     	;# 
  2133  0594                     	;# 
  2134  0594                     	;# 
  2135  0595                     	;# 
  2136  0596                     	;# 
  2137  0596                     	;# 
  2138  0597                     	;# 
  2139  0598                     	;# 
  2140  0599                     	;# 
  2141  059A                     	;# 
  2142  059B                     	;# 
  2143  059B                     	;# 
  2144  059C                     	;# 
  2145  059D                     	;# 
  2146  060C                     	;# 
  2147  060C                     	;# 
  2148  060D                     	;# 
  2149  060E                     	;# 
  2150  060F                     	;# 
  2151  060F                     	;# 
  2152  0610                     	;# 
  2153  0611                     	;# 
  2154  0612                     	;# 
  2155  0613                     	;# 
  2156  0614                     	;# 
  2157  0617                     	;# 
  2158  0618                     	;# 
  2159  0619                     	;# 
  2160  061A                     	;# 
  2161  061B                     	;# 
  2162  061C                     	;# 
  2163  0691                     	;# 
  2164  0692                     	;# 
  2165  0693                     	;# 
  2166  0694                     	;# 
  2167  0695                     	;# 
  2168  0696                     	;# 
  2169  0697                     	;# 
  2170  0699                     	;# 
  2171  069A                     	;# 
  2172  0711                     	;# 
  2173  0712                     	;# 
  2174  0713                     	;# 
  2175  0714                     	;# 
  2176  0715                     	;# 
  2177  0718                     	;# 
  2178  0718                     	;# 
  2179  0719                     	;# 
  2180  071A                     	;# 
  2181  071A                     	;# 
  2182  071B                     	;# 
  2183  071C                     	;# 
  2184  071D                     	;# 
  2185  0791                     	;# 
  2186  0791                     	;# 
  2187  0792                     	;# 
  2188  0793                     	;# 
  2189  0793                     	;# 
  2190  0794                     	;# 
  2191  0795                     	;# 
  2192  0795                     	;# 
  2193  0796                     	;# 
  2194  0797                     	;# 
  2195  0797                     	;# 
  2196  0798                     	;# 
  2197  0799                     	;# 
  2198  079A                     	;# 
  2199  080C                     	;# 
  2200  080C                     	;# 
  2201  080D                     	;# 
  2202  080E                     	;# 
  2203  080E                     	;# 
  2204  080F                     	;# 
  2205  0810                     	;# 
  2206  0810                     	;# 
  2207  0811                     	;# 
  2208  0812                     	;# 
  2209  0812                     	;# 
  2210  0813                     	;# 
  2211  0814                     	;# 
  2212  0815                     	;# 
  2213  0816                     	;# 
  2214  0817                     	;# 
  2215  0818                     	;# 
  2216  0819                     	;# 
  2217  081A                     	;# 
  2218  081A                     	;# 
  2219  081B                     	;# 
  2220  081C                     	;# 
  2221  081C                     	;# 
  2222  081D                     	;# 
  2223  088C                     	;# 
  2224  088D                     	;# 
  2225  088E                     	;# 
  2226  088F                     	;# 
  2227  088F                     	;# 
  2228  0890                     	;# 
  2229  0891                     	;# 
  2230  0892                     	;# 
  2231  0893                     	;# 
  2232  0893                     	;# 
  2233  0894                     	;# 
  2234  0895                     	;# 
  2235  0896                     	;# 
  2236  0897                     	;# 
  2237  0897                     	;# 
  2238  0898                     	;# 
  2239  0899                     	;# 
  2240  0D8C                     	;# 
  2241  0D8C                     	;# 
  2242  0D8D                     	;# 
  2243  0D8E                     	;# 
  2244  0D8F                     	;# 
  2245  0D8F                     	;# 
  2246  0D90                     	;# 
  2247  0D91                     	;# 
  2248  0D92                     	;# 
  2249  0D92                     	;# 
  2250  0D93                     	;# 
  2251  0D94                     	;# 
  2252  0D95                     	;# 
  2253  0D95                     	;# 
  2254  0D96                     	;# 
  2255  0D97                     	;# 
  2256  0D98                     	;# 
  2257  0D99                     	;# 
  2258  0D9A                     	;# 
  2259  0D9B                     	;# 
  2260  0D9C                     	;# 
  2261  0D9D                     	;# 
  2262  0D9E                     	;# 
  2263  0D9E                     	;# 
  2264  0D9F                     	;# 
  2265  0DA0                     	;# 
  2266  0DA1                     	;# 
  2267  0DA1                     	;# 
  2268  0DA2                     	;# 
  2269  0DA3                     	;# 
  2270  0DA4                     	;# 
  2271  0DA4                     	;# 
  2272  0DA5                     	;# 
  2273  0DA6                     	;# 
  2274  0DA7                     	;# 
  2275  0DA7                     	;# 
  2276  0DA8                     	;# 
  2277  0DA9                     	;# 
  2278  0DAA                     	;# 
  2279  0DAB                     	;# 
  2280  0DAC                     	;# 
  2281  0DAD                     	;# 
  2282  0DAE                     	;# 
  2283  0DAF                     	;# 
  2284  0E0F                     	;# 
  2285  0E10                     	;# 
  2286  0E11                     	;# 
  2287  0E12                     	;# 
  2288  0E13                     	;# 
  2289  0E14                     	;# 
  2290  0E15                     	;# 
  2291  0E16                     	;# 
  2292  0E17                     	;# 
  2293  0E18                     	;# 
  2294  0E19                     	;# 
  2295  0E1A                     	;# 
  2296  0E1B                     	;# 
  2297  0E1C                     	;# 
  2298  0E1D                     	;# 
  2299  0E1E                     	;# 
  2300  0E1F                     	;# 
  2301  0E20                     	;# 
  2302  0E21                     	;# 
  2303  0E22                     	;# 
  2304  0E23                     	;# 
  2305  0E24                     	;# 
  2306  0E25                     	;# 
  2307  0E26                     	;# 
  2308  0E27                     	;# 
  2309  0E28                     	;# 
  2310  0E29                     	;# 
  2311  0E2A                     	;# 
  2312  0E2B                     	;# 
  2313  0E2C                     	;# 
  2314  0E2D                     	;# 
  2315  0E2E                     	;# 
  2316  0E90                     	;# 
  2317  0E91                     	;# 
  2318  0E92                     	;# 
  2319  0E94                     	;# 
  2320  0E95                     	;# 
  2321  0E9C                     	;# 
  2322  0E9D                     	;# 
  2323  0E9E                     	;# 
  2324  0E9F                     	;# 
  2325  0EA0                     	;# 
  2326  0EA1                     	;# 
  2327  0EA2                     	;# 
  2328  0EA3                     	;# 
  2329  0EA4                     	;# 
  2330  0EA5                     	;# 
  2331  0EA6                     	;# 
  2332  0EA7                     	;# 
  2333  0F0F                     	;# 
  2334  0F10                     	;# 
  2335  0F11                     	;# 
  2336  0F12                     	;# 
  2337  0F13                     	;# 
  2338  0F14                     	;# 
  2339  0F15                     	;# 
  2340  0F16                     	;# 
  2341  0F17                     	;# 
  2342  0F18                     	;# 
  2343  0F19                     	;# 
  2344  0F1A                     	;# 
  2345  0F1B                     	;# 
  2346  0F1C                     	;# 
  2347  0F1D                     	;# 
  2348  0F1E                     	;# 
  2349  0F1F                     	;# 
  2350  0F20                     	;# 
  2351  0F21                     	;# 
  2352  0F22                     	;# 
  2353  0F23                     	;# 
  2354  0F24                     	;# 
  2355  0F25                     	;# 
  2356  0F26                     	;# 
  2357  0F27                     	;# 
  2358  0F28                     	;# 
  2359  0F29                     	;# 
  2360  0F2A                     	;# 
  2361  0F2B                     	;# 
  2362  0F2C                     	;# 
  2363  0F2D                     	;# 
  2364  0F2E                     	;# 
  2365  0F2F                     	;# 
  2366  0F30                     	;# 
  2367  0F31                     	;# 
  2368  0F32                     	;# 
  2369  0F33                     	;# 
  2370  0F34                     	;# 
  2371  0F35                     	;# 
  2372  0F36                     	;# 
  2373  0F37                     	;# 
  2374  0FE4                     	;# 
  2375  0FE5                     	;# 
  2376  0FE6                     	;# 
  2377  0FE7                     	;# 
  2378  0FE8                     	;# 
  2379  0FE9                     	;# 
  2380  0FEA                     	;# 
  2381  0FEB                     	;# 
  2382  0FED                     	;# 
  2383  0FEE                     	;# 
  2384  0FEF                     	;# 
  2385  0000                     	;# 
  2386  0001                     	;# 
  2387  0002                     	;# 
  2388  0003                     	;# 
  2389  0004                     	;# 
  2390  0005                     	;# 
  2391  0006                     	;# 
  2392  0007                     	;# 
  2393  0008                     	;# 
  2394  0009                     	;# 
  2395  000A                     	;# 
  2396  000B                     	;# 
  2397  000C                     	;# 
  2398  000D                     	;# 
  2399  000E                     	;# 
  2400  0010                     	;# 
  2401  0011                     	;# 
  2402  0012                     	;# 
  2403  0013                     	;# 
  2404  0014                     	;# 
  2405  0015                     	;# 
  2406  0016                     	;# 
  2407  0016                     	;# 
  2408  0017                     	;# 
  2409  0018                     	;# 
  2410  0019                     	;# 
  2411  001A                     	;# 
  2412  001A                     	;# 
  2413  001B                     	;# 
  2414  001B                     	;# 
  2415  001C                     	;# 
  2416  001D                     	;# 
  2417  001E                     	;# 
  2418  001F                     	;# 
  2419  008C                     	;# 
  2420  008D                     	;# 
  2421  008E                     	;# 
  2422  0090                     	;# 
  2423  0091                     	;# 
  2424  0092                     	;# 
  2425  0093                     	;# 
  2426  0094                     	;# 
  2427  0095                     	;# 
  2428  0096                     	;# 
  2429  0098                     	;# 
  2430  0099                     	;# 
  2431  009A                     	;# 
  2432  009B                     	;# 
  2433  009B                     	;# 
  2434  009C                     	;# 
  2435  009D                     	;# 
  2436  009E                     	;# 
  2437  009F                     	;# 
  2438  010C                     	;# 
  2439  010D                     	;# 
  2440  010E                     	;# 
  2441  0111                     	;# 
  2442  0112                     	;# 
  2443  0113                     	;# 
  2444  0114                     	;# 
  2445  0115                     	;# 
  2446  0116                     	;# 
  2447  0117                     	;# 
  2448  0118                     	;# 
  2449  0119                     	;# 
  2450  011C                     	;# 
  2451  018C                     	;# 
  2452  018D                     	;# 
  2453  018E                     	;# 
  2454  0191                     	;# 
  2455  0191                     	;# 
  2456  0192                     	;# 
  2457  0193                     	;# 
  2458  0193                     	;# 
  2459  0194                     	;# 
  2460  0195                     	;# 
  2461  0196                     	;# 
  2462  0197                     	;# 
  2463  0199                     	;# 
  2464  0199                     	;# 
  2465  0199                     	;# 
  2466  019A                     	;# 
  2467  019A                     	;# 
  2468  019A                     	;# 
  2469  019B                     	;# 
  2470  019B                     	;# 
  2471  019B                     	;# 
  2472  019B                     	;# 
  2473  019B                     	;# 
  2474  019C                     	;# 
  2475  019C                     	;# 
  2476  019C                     	;# 
  2477  019D                     	;# 
  2478  019D                     	;# 
  2479  019D                     	;# 
  2480  019E                     	;# 
  2481  019E                     	;# 
  2482  019E                     	;# 
  2483  019F                     	;# 
  2484  019F                     	;# 
  2485  019F                     	;# 
  2486  019F                     	;# 
  2487  019F                     	;# 
  2488  020C                     	;# 
  2489  020D                     	;# 
  2490  020E                     	;# 
  2491  0211                     	;# 
  2492  0211                     	;# 
  2493  0212                     	;# 
  2494  0212                     	;# 
  2495  0213                     	;# 
  2496  0213                     	;# 
  2497  0214                     	;# 
  2498  0214                     	;# 
  2499  0215                     	;# 
  2500  0215                     	;# 
  2501  0215                     	;# 
  2502  0215                     	;# 
  2503  0216                     	;# 
  2504  0216                     	;# 
  2505  0217                     	;# 
  2506  0217                     	;# 
  2507  028C                     	;# 
  2508  028D                     	;# 
  2509  028E                     	;# 
  2510  0291                     	;# 
  2511  0291                     	;# 
  2512  0292                     	;# 
  2513  0293                     	;# 
  2514  0294                     	;# 
  2515  0298                     	;# 
  2516  0298                     	;# 
  2517  0299                     	;# 
  2518  029A                     	;# 
  2519  029B                     	;# 
  2520  029E                     	;# 
  2521  030C                     	;# 
  2522  030D                     	;# 
  2523  030E                     	;# 
  2524  038C                     	;# 
  2525  038D                     	;# 
  2526  038E                     	;# 
  2527  0391                     	;# 
  2528  0392                     	;# 
  2529  0393                     	;# 
  2530  0394                     	;# 
  2531  0395                     	;# 
  2532  0396                     	;# 
  2533  0397                     	;# 
  2534  0398                     	;# 
  2535  0399                     	;# 
  2536  040E                     	;# 
  2537  0413                     	;# 
  2538  0413                     	;# 
  2539  0414                     	;# 
  2540  0414                     	;# 
  2541  0415                     	;# 
  2542  0416                     	;# 
  2543  0417                     	;# 
  2544  0418                     	;# 
  2545  041A                     	;# 
  2546  041A                     	;# 
  2547  041B                     	;# 
  2548  041B                     	;# 
  2549  041C                     	;# 
  2550  041D                     	;# 
  2551  041E                     	;# 
  2552  041F                     	;# 
  2553  0493                     	;# 
  2554  0494                     	;# 
  2555  0495                     	;# 
  2556  0496                     	;# 
  2557  049A                     	;# 
  2558  049B                     	;# 
  2559  049C                     	;# 
  2560  049D                     	;# 
  2561  058C                     	;# 
  2562  058C                     	;# 
  2563  058D                     	;# 
  2564  058E                     	;# 
  2565  058E                     	;# 
  2566  058F                     	;# 
  2567  0590                     	;# 
  2568  0590                     	;# 
  2569  0591                     	;# 
  2570  0592                     	;# 
  2571  0592                     	;# 
  2572  0593                     	;# 
  2573  0594                     	;# 
  2574  0594                     	;# 
  2575  0595                     	;# 
  2576  0596                     	;# 
  2577  0596                     	;# 
  2578  0597                     	;# 
  2579  0598                     	;# 
  2580  0599                     	;# 
  2581  059A                     	;# 
  2582  059B                     	;# 
  2583  059B                     	;# 
  2584  059C                     	;# 
  2585  059D                     	;# 
  2586  060C                     	;# 
  2587  060C                     	;# 
  2588  060D                     	;# 
  2589  060E                     	;# 
  2590  060F                     	;# 
  2591  060F                     	;# 
  2592  0610                     	;# 
  2593  0611                     	;# 
  2594  0612                     	;# 
  2595  0613                     	;# 
  2596  0614                     	;# 
  2597  0617                     	;# 
  2598  0618                     	;# 
  2599  0619                     	;# 
  2600  061A                     	;# 
  2601  061B                     	;# 
  2602  061C                     	;# 
  2603  0691                     	;# 
  2604  0692                     	;# 
  2605  0693                     	;# 
  2606  0694                     	;# 
  2607  0695                     	;# 
  2608  0696                     	;# 
  2609  0697                     	;# 
  2610  0699                     	;# 
  2611  069A                     	;# 
  2612  0711                     	;# 
  2613  0712                     	;# 
  2614  0713                     	;# 
  2615  0714                     	;# 
  2616  0715                     	;# 
  2617  0718                     	;# 
  2618  0718                     	;# 
  2619  0719                     	;# 
  2620  071A                     	;# 
  2621  071A                     	;# 
  2622  071B                     	;# 
  2623  071C                     	;# 
  2624  071D                     	;# 
  2625  0791                     	;# 
  2626  0791                     	;# 
  2627  0792                     	;# 
  2628  0793                     	;# 
  2629  0793                     	;# 
  2630  0794                     	;# 
  2631  0795                     	;# 
  2632  0795                     	;# 
  2633  0796                     	;# 
  2634  0797                     	;# 
  2635  0797                     	;# 
  2636  0798                     	;# 
  2637  0799                     	;# 
  2638  079A                     	;# 
  2639  080C                     	;# 
  2640  080C                     	;# 
  2641  080D                     	;# 
  2642  080E                     	;# 
  2643  080E                     	;# 
  2644  080F                     	;# 
  2645  0810                     	;# 
  2646  0810                     	;# 
  2647  0811                     	;# 
  2648  0812                     	;# 
  2649  0812                     	;# 
  2650  0813                     	;# 
  2651  0814                     	;# 
  2652  0815                     	;# 
  2653  0816                     	;# 
  2654  0817                     	;# 
  2655  0818                     	;# 
  2656  0819                     	;# 
  2657  081A                     	;# 
  2658  081A                     	;# 
  2659  081B                     	;# 
  2660  081C                     	;# 
  2661  081C                     	;# 
  2662  081D                     	;# 
  2663  088C                     	;# 
  2664  088D                     	;# 
  2665  088E                     	;# 
  2666  088F                     	;# 
  2667  088F                     	;# 
  2668  0890                     	;# 
  2669  0891                     	;# 
  2670  0892                     	;# 
  2671  0893                     	;# 
  2672  0893                     	;# 
  2673  0894                     	;# 
  2674  0895                     	;# 
  2675  0896                     	;# 
  2676  0897                     	;# 
  2677  0897                     	;# 
  2678  0898                     	;# 
  2679  0899                     	;# 
  2680  0D8C                     	;# 
  2681  0D8C                     	;# 
  2682  0D8D                     	;# 
  2683  0D8E                     	;# 
  2684  0D8F                     	;# 
  2685  0D8F                     	;# 
  2686  0D90                     	;# 
  2687  0D91                     	;# 
  2688  0D92                     	;# 
  2689  0D92                     	;# 
  2690  0D93                     	;# 
  2691  0D94                     	;# 
  2692  0D95                     	;# 
  2693  0D95                     	;# 
  2694  0D96                     	;# 
  2695  0D97                     	;# 
  2696  0D98                     	;# 
  2697  0D99                     	;# 
  2698  0D9A                     	;# 
  2699  0D9B                     	;# 
  2700  0D9C                     	;# 
  2701  0D9D                     	;# 
  2702  0D9E                     	;# 
  2703  0D9E                     	;# 
  2704  0D9F                     	;# 
  2705  0DA0                     	;# 
  2706  0DA1                     	;# 
  2707  0DA1                     	;# 
  2708  0DA2                     	;# 
  2709  0DA3                     	;# 
  2710  0DA4                     	;# 
  2711  0DA4                     	;# 
  2712  0DA5                     	;# 
  2713  0DA6                     	;# 
  2714  0DA7                     	;# 
  2715  0DA7                     	;# 
  2716  0DA8                     	;# 
  2717  0DA9                     	;# 
  2718  0DAA                     	;# 
  2719  0DAB                     	;# 
  2720  0DAC                     	;# 
  2721  0DAD                     	;# 
  2722  0DAE                     	;# 
  2723  0DAF                     	;# 
  2724  0E0F                     	;# 
  2725  0E10                     	;# 
  2726  0E11                     	;# 
  2727  0E12                     	;# 
  2728  0E13                     	;# 
  2729  0E14                     	;# 
  2730  0E15                     	;# 
  2731  0E16                     	;# 
  2732  0E17                     	;# 
  2733  0E18                     	;# 
  2734  0E19                     	;# 
  2735  0E1A                     	;# 
  2736  0E1B                     	;# 
  2737  0E1C                     	;# 
  2738  0E1D                     	;# 
  2739  0E1E                     	;# 
  2740  0E1F                     	;# 
  2741  0E20                     	;# 
  2742  0E21                     	;# 
  2743  0E22                     	;# 
  2744  0E23                     	;# 
  2745  0E24                     	;# 
  2746  0E25                     	;# 
  2747  0E26                     	;# 
  2748  0E27                     	;# 
  2749  0E28                     	;# 
  2750  0E29                     	;# 
  2751  0E2A                     	;# 
  2752  0E2B                     	;# 
  2753  0E2C                     	;# 
  2754  0E2D                     	;# 
  2755  0E2E                     	;# 
  2756  0E90                     	;# 
  2757  0E91                     	;# 
  2758  0E92                     	;# 
  2759  0E94                     	;# 
  2760  0E95                     	;# 
  2761  0E9C                     	;# 
  2762  0E9D                     	;# 
  2763  0E9E                     	;# 
  2764  0E9F                     	;# 
  2765  0EA0                     	;# 
  2766  0EA1                     	;# 
  2767  0EA2                     	;# 
  2768  0EA3                     	;# 
  2769  0EA4                     	;# 
  2770  0EA5                     	;# 
  2771  0EA6                     	;# 
  2772  0EA7                     	;# 
  2773  0F0F                     	;# 
  2774  0F10                     	;# 
  2775  0F11                     	;# 
  2776  0F12                     	;# 
  2777  0F13                     	;# 
  2778  0F14                     	;# 
  2779  0F15                     	;# 
  2780  0F16                     	;# 
  2781  0F17                     	;# 
  2782  0F18                     	;# 
  2783  0F19                     	;# 
  2784  0F1A                     	;# 
  2785  0F1B                     	;# 
  2786  0F1C                     	;# 
  2787  0F1D                     	;# 
  2788  0F1E                     	;# 
  2789  0F1F                     	;# 
  2790  0F20                     	;# 
  2791  0F21                     	;# 
  2792  0F22                     	;# 
  2793  0F23                     	;# 
  2794  0F24                     	;# 
  2795  0F25                     	;# 
  2796  0F26                     	;# 
  2797  0F27                     	;# 
  2798  0F28                     	;# 
  2799  0F29                     	;# 
  2800  0F2A                     	;# 
  2801  0F2B                     	;# 
  2802  0F2C                     	;# 
  2803  0F2D                     	;# 
  2804  0F2E                     	;# 
  2805  0F2F                     	;# 
  2806  0F30                     	;# 
  2807  0F31                     	;# 
  2808  0F32                     	;# 
  2809  0F33                     	;# 
  2810  0F34                     	;# 
  2811  0F35                     	;# 
  2812  0F36                     	;# 
  2813  0F37                     	;# 
  2814  0FE4                     	;# 
  2815  0FE5                     	;# 
  2816  0FE6                     	;# 
  2817  0FE7                     	;# 
  2818  0FE8                     	;# 
  2819  0FE9                     	;# 
  2820  0FEA                     	;# 
  2821  0FEB                     	;# 
  2822  0FED                     	;# 
  2823  0FEE                     	;# 
  2824  0FEF                     	;# 
  2825  0000                     	;# 
  2826  0001                     	;# 
  2827  0002                     	;# 
  2828  0003                     	;# 
  2829  0004                     	;# 
  2830  0005                     	;# 
  2831  0006                     	;# 
  2832  0007                     	;# 
  2833  0008                     	;# 
  2834  0009                     	;# 
  2835  000A                     	;# 
  2836  000B                     	;# 
  2837  000C                     	;# 
  2838  000D                     	;# 
  2839  000E                     	;# 
  2840  0010                     	;# 
  2841  0011                     	;# 
  2842  0012                     	;# 
  2843  0013                     	;# 
  2844  0014                     	;# 
  2845  0015                     	;# 
  2846  0016                     	;# 
  2847  0016                     	;# 
  2848  0017                     	;# 
  2849  0018                     	;# 
  2850  0019                     	;# 
  2851  001A                     	;# 
  2852  001A                     	;# 
  2853  001B                     	;# 
  2854  001B                     	;# 
  2855  001C                     	;# 
  2856  001D                     	;# 
  2857  001E                     	;# 
  2858  001F                     	;# 
  2859  008C                     	;# 
  2860  008D                     	;# 
  2861  008E                     	;# 
  2862  0090                     	;# 
  2863  0091                     	;# 
  2864  0092                     	;# 
  2865  0093                     	;# 
  2866  0094                     	;# 
  2867  0095                     	;# 
  2868  0096                     	;# 
  2869  0098                     	;# 
  2870  0099                     	;# 
  2871  009A                     	;# 
  2872  009B                     	;# 
  2873  009B                     	;# 
  2874  009C                     	;# 
  2875  009D                     	;# 
  2876  009E                     	;# 
  2877  009F                     	;# 
  2878  010C                     	;# 
  2879  010D                     	;# 
  2880  010E                     	;# 
  2881  0111                     	;# 
  2882  0112                     	;# 
  2883  0113                     	;# 
  2884  0114                     	;# 
  2885  0115                     	;# 
  2886  0116                     	;# 
  2887  0117                     	;# 
  2888  0118                     	;# 
  2889  0119                     	;# 
  2890  011C                     	;# 
  2891  018C                     	;# 
  2892  018D                     	;# 
  2893  018E                     	;# 
  2894  0191                     	;# 
  2895  0191                     	;# 
  2896  0192                     	;# 
  2897  0193                     	;# 
  2898  0193                     	;# 
  2899  0194                     	;# 
  2900  0195                     	;# 
  2901  0196                     	;# 
  2902  0197                     	;# 
  2903  0199                     	;# 
  2904  0199                     	;# 
  2905  0199                     	;# 
  2906  019A                     	;# 
  2907  019A                     	;# 
  2908  019A                     	;# 
  2909  019B                     	;# 
  2910  019B                     	;# 
  2911  019B                     	;# 
  2912  019B                     	;# 
  2913  019B                     	;# 
  2914  019C                     	;# 
  2915  019C                     	;# 
  2916  019C                     	;# 
  2917  019D                     	;# 
  2918  019D                     	;# 
  2919  019D                     	;# 
  2920  019E                     	;# 
  2921  019E                     	;# 
  2922  019E                     	;# 
  2923  019F                     	;# 
  2924  019F                     	;# 
  2925  019F                     	;# 
  2926  019F                     	;# 
  2927  019F                     	;# 
  2928  020C                     	;# 
  2929  020D                     	;# 
  2930  020E                     	;# 
  2931  0211                     	;# 
  2932  0211                     	;# 
  2933  0212                     	;# 
  2934  0212                     	;# 
  2935  0213                     	;# 
  2936  0213                     	;# 
  2937  0214                     	;# 
  2938  0214                     	;# 
  2939  0215                     	;# 
  2940  0215                     	;# 
  2941  0215                     	;# 
  2942  0215                     	;# 
  2943  0216                     	;# 
  2944  0216                     	;# 
  2945  0217                     	;# 
  2946  0217                     	;# 
  2947  028C                     	;# 
  2948  028D                     	;# 
  2949  028E                     	;# 
  2950  0291                     	;# 
  2951  0291                     	;# 
  2952  0292                     	;# 
  2953  0293                     	;# 
  2954  0294                     	;# 
  2955  0298                     	;# 
  2956  0298                     	;# 
  2957  0299                     	;# 
  2958  029A                     	;# 
  2959  029B                     	;# 
  2960  029E                     	;# 
  2961  030C                     	;# 
  2962  030D                     	;# 
  2963  030E                     	;# 
  2964  038C                     	;# 
  2965  038D                     	;# 
  2966  038E                     	;# 
  2967  0391                     	;# 
  2968  0392                     	;# 
  2969  0393                     	;# 
  2970  0394                     	;# 
  2971  0395                     	;# 
  2972  0396                     	;# 
  2973  0397                     	;# 
  2974  0398                     	;# 
  2975  0399                     	;# 
  2976  040E                     	;# 
  2977  0413                     	;# 
  2978  0413                     	;# 
  2979  0414                     	;# 
  2980  0414                     	;# 
  2981  0415                     	;# 
  2982  0416                     	;# 
  2983  0417                     	;# 
  2984  0418                     	;# 
  2985  041A                     	;# 
  2986  041A                     	;# 
  2987  041B                     	;# 
  2988  041B                     	;# 
  2989  041C                     	;# 
  2990  041D                     	;# 
  2991  041E                     	;# 
  2992  041F                     	;# 
  2993  0493                     	;# 
  2994  0494                     	;# 
  2995  0495                     	;# 
  2996  0496                     	;# 
  2997  049A                     	;# 
  2998  049B                     	;# 
  2999  049C                     	;# 
  3000  049D                     	;# 
  3001  058C                     	;# 
  3002  058C                     	;# 
  3003  058D                     	;# 
  3004  058E                     	;# 
  3005  058E                     	;# 
  3006  058F                     	;# 
  3007  0590                     	;# 
  3008  0590                     	;# 
  3009  0591                     	;# 
  3010  0592                     	;# 
  3011  0592                     	;# 
  3012  0593                     	;# 
  3013  0594                     	;# 
  3014  0594                     	;# 
  3015  0595                     	;# 
  3016  0596                     	;# 
  3017  0596                     	;# 
  3018  0597                     	;# 
  3019  0598                     	;# 
  3020  0599                     	;# 
  3021  059A                     	;# 
  3022  059B                     	;# 
  3023  059B                     	;# 
  3024  059C                     	;# 
  3025  059D                     	;# 
  3026  060C                     	;# 
  3027  060C                     	;# 
  3028  060D                     	;# 
  3029  060E                     	;# 
  3030  060F                     	;# 
  3031  060F                     	;# 
  3032  0610                     	;# 
  3033  0611                     	;# 
  3034  0612                     	;# 
  3035  0613                     	;# 
  3036  0614                     	;# 
  3037  0617                     	;# 
  3038  0618                     	;# 
  3039  0619                     	;# 
  3040  061A                     	;# 
  3041  061B                     	;# 
  3042  061C                     	;# 
  3043  0691                     	;# 
  3044  0692                     	;# 
  3045  0693                     	;# 
  3046  0694                     	;# 
  3047  0695                     	;# 
  3048  0696                     	;# 
  3049  0697                     	;# 
  3050  0699                     	;# 
  3051  069A                     	;# 
  3052  0711                     	;# 
  3053  0712                     	;# 
  3054  0713                     	;# 
  3055  0714                     	;# 
  3056  0715                     	;# 
  3057  0718                     	;# 
  3058  0718                     	;# 
  3059  0719                     	;# 
  3060  071A                     	;# 
  3061  071A                     	;# 
  3062  071B                     	;# 
  3063  071C                     	;# 
  3064  071D                     	;# 
  3065  0791                     	;# 
  3066  0791                     	;# 
  3067  0792                     	;# 
  3068  0793                     	;# 
  3069  0793                     	;# 
  3070  0794                     	;# 
  3071  0795                     	;# 
  3072  0795                     	;# 
  3073  0796                     	;# 
  3074  0797                     	;# 
  3075  0797                     	;# 
  3076  0798                     	;# 
  3077  0799                     	;# 
  3078  079A                     	;# 
  3079  080C                     	;# 
  3080  080C                     	;# 
  3081  080D                     	;# 
  3082  080E                     	;# 
  3083  080E                     	;# 
  3084  080F                     	;# 
  3085  0810                     	;# 
  3086  0810                     	;# 
  3087  0811                     	;# 
  3088  0812                     	;# 
  3089  0812                     	;# 
  3090  0813                     	;# 
  3091  0814                     	;# 
  3092  0815                     	;# 
  3093  0816                     	;# 
  3094  0817                     	;# 
  3095  0818                     	;# 
  3096  0819                     	;# 
  3097  081A                     	;# 
  3098  081A                     	;# 
  3099  081B                     	;# 
  3100  081C                     	;# 
  3101  081C                     	;# 
  3102  081D                     	;# 
  3103  088C                     	;# 
  3104  088D                     	;# 
  3105  088E                     	;# 
  3106  088F                     	;# 
  3107  088F                     	;# 
  3108  0890                     	;# 
  3109  0891                     	;# 
  3110  0892                     	;# 
  3111  0893                     	;# 
  3112  0893                     	;# 
  3113  0894                     	;# 
  3114  0895                     	;# 
  3115  0896                     	;# 
  3116  0897                     	;# 
  3117  0897                     	;# 
  3118  0898                     	;# 
  3119  0899                     	;# 
  3120  0D8C                     	;# 
  3121  0D8C                     	;# 
  3122  0D8D                     	;# 
  3123  0D8E                     	;# 
  3124  0D8F                     	;# 
  3125  0D8F                     	;# 
  3126  0D90                     	;# 
  3127  0D91                     	;# 
  3128  0D92                     	;# 
  3129  0D92                     	;# 
  3130  0D93                     	;# 
  3131  0D94                     	;# 
  3132  0D95                     	;# 
  3133  0D95                     	;# 
  3134  0D96                     	;# 
  3135  0D97                     	;# 
  3136  0D98                     	;# 
  3137  0D99                     	;# 
  3138  0D9A                     	;# 
  3139  0D9B                     	;# 
  3140  0D9C                     	;# 
  3141  0D9D                     	;# 
  3142  0D9E                     	;# 
  3143  0D9E                     	;# 
  3144  0D9F                     	;# 
  3145  0DA0                     	;# 
  3146  0DA1                     	;# 
  3147  0DA1                     	;# 
  3148  0DA2                     	;# 
  3149  0DA3                     	;# 
  3150  0DA4                     	;# 
  3151  0DA4                     	;# 
  3152  0DA5                     	;# 
  3153  0DA6                     	;# 
  3154  0DA7                     	;# 
  3155  0DA7                     	;# 
  3156  0DA8                     	;# 
  3157  0DA9                     	;# 
  3158  0DAA                     	;# 
  3159  0DAB                     	;# 
  3160  0DAC                     	;# 
  3161  0DAD                     	;# 
  3162  0DAE                     	;# 
  3163  0DAF                     	;# 
  3164  0E0F                     	;# 
  3165  0E10                     	;# 
  3166  0E11                     	;# 
  3167  0E12                     	;# 
  3168  0E13                     	;# 
  3169  0E14                     	;# 
  3170  0E15                     	;# 
  3171  0E16                     	;# 
  3172  0E17                     	;# 
  3173  0E18                     	;# 
  3174  0E19                     	;# 
  3175  0E1A                     	;# 
  3176  0E1B                     	;# 
  3177  0E1C                     	;# 
  3178  0E1D                     	;# 
  3179  0E1E                     	;# 
  3180  0E1F                     	;# 
  3181  0E20                     	;# 
  3182  0E21                     	;# 
  3183  0E22                     	;# 
  3184  0E23                     	;# 
  3185  0E24                     	;# 
  3186  0E25                     	;# 
  3187  0E26                     	;# 
  3188  0E27                     	;# 
  3189  0E28                     	;# 
  3190  0E29                     	;# 
  3191  0E2A                     	;# 
  3192  0E2B                     	;# 
  3193  0E2C                     	;# 
  3194  0E2D                     	;# 
  3195  0E2E                     	;# 
  3196  0E90                     	;# 
  3197  0E91                     	;# 
  3198  0E92                     	;# 
  3199  0E94                     	;# 
  3200  0E95                     	;# 
  3201  0E9C                     	;# 
  3202  0E9D                     	;# 
  3203  0E9E                     	;# 
  3204  0E9F                     	;# 
  3205  0EA0                     	;# 
  3206  0EA1                     	;# 
  3207  0EA2                     	;# 
  3208  0EA3                     	;# 
  3209  0EA4                     	;# 
  3210  0EA5                     	;# 
  3211  0EA6                     	;# 
  3212  0EA7                     	;# 
  3213  0F0F                     	;# 
  3214  0F10                     	;# 
  3215  0F11                     	;# 
  3216  0F12                     	;# 
  3217  0F13                     	;# 
  3218  0F14                     	;# 
  3219  0F15                     	;# 
  3220  0F16                     	;# 
  3221  0F17                     	;# 
  3222  0F18                     	;# 
  3223  0F19                     	;# 
  3224  0F1A                     	;# 
  3225  0F1B                     	;# 
  3226  0F1C                     	;# 
  3227  0F1D                     	;# 
  3228  0F1E                     	;# 
  3229  0F1F                     	;# 
  3230  0F20                     	;# 
  3231  0F21                     	;# 
  3232  0F22                     	;# 
  3233  0F23                     	;# 
  3234  0F24                     	;# 
  3235  0F25                     	;# 
  3236  0F26                     	;# 
  3237  0F27                     	;# 
  3238  0F28                     	;# 
  3239  0F29                     	;# 
  3240  0F2A                     	;# 
  3241  0F2B                     	;# 
  3242  0F2C                     	;# 
  3243  0F2D                     	;# 
  3244  0F2E                     	;# 
  3245  0F2F                     	;# 
  3246  0F30                     	;# 
  3247  0F31                     	;# 
  3248  0F32                     	;# 
  3249  0F33                     	;# 
  3250  0F34                     	;# 
  3251  0F35                     	;# 
  3252  0F36                     	;# 
  3253  0F37                     	;# 
  3254  0FE4                     	;# 
  3255  0FE5                     	;# 
  3256  0FE6                     	;# 
  3257  0FE7                     	;# 
  3258  0FE8                     	;# 
  3259  0FE9                     	;# 
  3260  0FEA                     	;# 
  3261  0FEB                     	;# 
  3262  0FED                     	;# 
  3263  0FEE                     	;# 
  3264  0FEF                     	;# 
  3265  0000                     	;# 
  3266  0001                     	;# 
  3267  0002                     	;# 
  3268  0003                     	;# 
  3269  0004                     	;# 
  3270  0005                     	;# 
  3271  0006                     	;# 
  3272  0007                     	;# 
  3273  0008                     	;# 
  3274  0009                     	;# 
  3275  000A                     	;# 
  3276  000B                     	;# 
  3277  000C                     	;# 
  3278  000D                     	;# 
  3279  000E                     	;# 
  3280  0010                     	;# 
  3281  0011                     	;# 
  3282  0012                     	;# 
  3283  0013                     	;# 
  3284  0014                     	;# 
  3285  0015                     	;# 
  3286  0016                     	;# 
  3287  0016                     	;# 
  3288  0017                     	;# 
  3289  0018                     	;# 
  3290  0019                     	;# 
  3291  001A                     	;# 
  3292  001A                     	;# 
  3293  001B                     	;# 
  3294  001B                     	;# 
  3295  001C                     	;# 
  3296  001D                     	;# 
  3297  001E                     	;# 
  3298  001F                     	;# 
  3299  008C                     	;# 
  3300  008D                     	;# 
  3301  008E                     	;# 
  3302  0090                     	;# 
  3303  0091                     	;# 
  3304  0092                     	;# 
  3305  0093                     	;# 
  3306  0094                     	;# 
  3307  0095                     	;# 
  3308  0096                     	;# 
  3309  0098                     	;# 
  3310  0099                     	;# 
  3311  009A                     	;# 
  3312  009B                     	;# 
  3313  009B                     	;# 
  3314  009C                     	;# 
  3315  009D                     	;# 
  3316  009E                     	;# 
  3317  009F                     	;# 
  3318  010C                     	;# 
  3319  010D                     	;# 
  3320  010E                     	;# 
  3321  0111                     	;# 
  3322  0112                     	;# 
  3323  0113                     	;# 
  3324  0114                     	;# 
  3325  0115                     	;# 
  3326  0116                     	;# 
  3327  0117                     	;# 
  3328  0118                     	;# 
  3329  0119                     	;# 
  3330  011C                     	;# 
  3331  018C                     	;# 
  3332  018D                     	;# 
  3333  018E                     	;# 
  3334  0191                     	;# 
  3335  0191                     	;# 
  3336  0192                     	;# 
  3337  0193                     	;# 
  3338  0193                     	;# 
  3339  0194                     	;# 
  3340  0195                     	;# 
  3341  0196                     	;# 
  3342  0197                     	;# 
  3343  0199                     	;# 
  3344  0199                     	;# 
  3345  0199                     	;# 
  3346  019A                     	;# 
  3347  019A                     	;# 
  3348  019A                     	;# 
  3349  019B                     	;# 
  3350  019B                     	;# 
  3351  019B                     	;# 
  3352  019B                     	;# 
  3353  019B                     	;# 
  3354  019C                     	;# 
  3355  019C                     	;# 
  3356  019C                     	;# 
  3357  019D                     	;# 
  3358  019D                     	;# 
  3359  019D                     	;# 
  3360  019E                     	;# 
  3361  019E                     	;# 
  3362  019E                     	;# 
  3363  019F                     	;# 
  3364  019F                     	;# 
  3365  019F                     	;# 
  3366  019F                     	;# 
  3367  019F                     	;# 
  3368  020C                     	;# 
  3369  020D                     	;# 
  3370  020E                     	;# 
  3371  0211                     	;# 
  3372  0211                     	;# 
  3373  0212                     	;# 
  3374  0212                     	;# 
  3375  0213                     	;# 
  3376  0213                     	;# 
  3377  0214                     	;# 
  3378  0214                     	;# 
  3379  0215                     	;# 
  3380  0215                     	;# 
  3381  0215                     	;# 
  3382  0215                     	;# 
  3383  0216                     	;# 
  3384  0216                     	;# 
  3385  0217                     	;# 
  3386  0217                     	;# 
  3387  028C                     	;# 
  3388  028D                     	;# 
  3389  028E                     	;# 
  3390  0291                     	;# 
  3391  0291                     	;# 
  3392  0292                     	;# 
  3393  0293                     	;# 
  3394  0294                     	;# 
  3395  0298                     	;# 
  3396  0298                     	;# 
  3397  0299                     	;# 
  3398  029A                     	;# 
  3399  029B                     	;# 
  3400  029E                     	;# 
  3401  030C                     	;# 
  3402  030D                     	;# 
  3403  030E                     	;# 
  3404  038C                     	;# 
  3405  038D                     	;# 
  3406  038E                     	;# 
  3407  0391                     	;# 
  3408  0392                     	;# 
  3409  0393                     	;# 
  3410  0394                     	;# 
  3411  0395                     	;# 
  3412  0396                     	;# 
  3413  0397                     	;# 
  3414  0398                     	;# 
  3415  0399                     	;# 
  3416  040E                     	;# 
  3417  0413                     	;# 
  3418  0413                     	;# 
  3419  0414                     	;# 
  3420  0414                     	;# 
  3421  0415                     	;# 
  3422  0416                     	;# 
  3423  0417                     	;# 
  3424  0418                     	;# 
  3425  041A                     	;# 
  3426  041A                     	;# 
  3427  041B                     	;# 
  3428  041B                     	;# 
  3429  041C                     	;# 
  3430  041D                     	;# 
  3431  041E                     	;# 
  3432  041F                     	;# 
  3433  0493                     	;# 
  3434  0494                     	;# 
  3435  0495                     	;# 
  3436  0496                     	;# 
  3437  049A                     	;# 
  3438  049B                     	;# 
  3439  049C                     	;# 
  3440  049D                     	;# 
  3441  058C                     	;# 
  3442  058C                     	;# 
  3443  058D                     	;# 
  3444  058E                     	;# 
  3445  058E                     	;# 
  3446  058F                     	;# 
  3447  0590                     	;# 
  3448  0590                     	;# 
  3449  0591                     	;# 
  3450  0592                     	;# 
  3451  0592                     	;# 
  3452  0593                     	;# 
  3453  0594                     	;# 
  3454  0594                     	;# 
  3455  0595                     	;# 
  3456  0596                     	;# 
  3457  0596                     	;# 
  3458  0597                     	;# 
  3459  0598                     	;# 
  3460  0599                     	;# 
  3461  059A                     	;# 
  3462  059B                     	;# 
  3463  059B                     	;# 
  3464  059C                     	;# 
  3465  059D                     	;# 
  3466  060C                     	;# 
  3467  060C                     	;# 
  3468  060D                     	;# 
  3469  060E                     	;# 
  3470  060F                     	;# 
  3471  060F                     	;# 
  3472  0610                     	;# 
  3473  0611                     	;# 
  3474  0612                     	;# 
  3475  0613                     	;# 
  3476  0614                     	;# 
  3477  0617                     	;# 
  3478  0618                     	;# 
  3479  0619                     	;# 
  3480  061A                     	;# 
  3481  061B                     	;# 
  3482  061C                     	;# 
  3483  0691                     	;# 
  3484  0692                     	;# 
  3485  0693                     	;# 
  3486  0694                     	;# 
  3487  0695                     	;# 
  3488  0696                     	;# 
  3489  0697                     	;# 
  3490  0699                     	;# 
  3491  069A                     	;# 
  3492  0711                     	;# 
  3493  0712                     	;# 
  3494  0713                     	;# 
  3495  0714                     	;# 
  3496  0715                     	;# 
  3497  0718                     	;# 
  3498  0718                     	;# 
  3499  0719                     	;# 
  3500  071A                     	;# 
  3501  071A                     	;# 
  3502  071B                     	;# 
  3503  071C                     	;# 
  3504  071D                     	;# 
  3505  0791                     	;# 
  3506  0791                     	;# 
  3507  0792                     	;# 
  3508  0793                     	;# 
  3509  0793                     	;# 
  3510  0794                     	;# 
  3511  0795                     	;# 
  3512  0795                     	;# 
  3513  0796                     	;# 
  3514  0797                     	;# 
  3515  0797                     	;# 
  3516  0798                     	;# 
  3517  0799                     	;# 
  3518  079A                     	;# 
  3519  080C                     	;# 
  3520  080C                     	;# 
  3521  080D                     	;# 
  3522  080E                     	;# 
  3523  080E                     	;# 
  3524  080F                     	;# 
  3525  0810                     	;# 
  3526  0810                     	;# 
  3527  0811                     	;# 
  3528  0812                     	;# 
  3529  0812                     	;# 
  3530  0813                     	;# 
  3531  0814                     	;# 
  3532  0815                     	;# 
  3533  0816                     	;# 
  3534  0817                     	;# 
  3535  0818                     	;# 
  3536  0819                     	;# 
  3537  081A                     	;# 
  3538  081A                     	;# 
  3539  081B                     	;# 
  3540  081C                     	;# 
  3541  081C                     	;# 
  3542  081D                     	;# 
  3543  088C                     	;# 
  3544  088D                     	;# 
  3545  088E                     	;# 
  3546  088F                     	;# 
  3547  088F                     	;# 
  3548  0890                     	;# 
  3549  0891                     	;# 
  3550  0892                     	;# 
  3551  0893                     	;# 
  3552  0893                     	;# 
  3553  0894                     	;# 
  3554  0895                     	;# 
  3555  0896                     	;# 
  3556  0897                     	;# 
  3557  0897                     	;# 
  3558  0898                     	;# 
  3559  0899                     	;# 
  3560  0D8C                     	;# 
  3561  0D8C                     	;# 
  3562  0D8D                     	;# 
  3563  0D8E                     	;# 
  3564  0D8F                     	;# 
  3565  0D8F                     	;# 
  3566  0D90                     	;# 
  3567  0D91                     	;# 
  3568  0D92                     	;# 
  3569  0D92                     	;# 
  3570  0D93                     	;# 
  3571  0D94                     	;# 
  3572  0D95                     	;# 
  3573  0D95                     	;# 
  3574  0D96                     	;# 
  3575  0D97                     	;# 
  3576  0D98                     	;# 
  3577  0D99                     	;# 
  3578  0D9A                     	;# 
  3579  0D9B                     	;# 
  3580  0D9C                     	;# 
  3581  0D9D                     	;# 
  3582  0D9E                     	;# 
  3583  0D9E                     	;# 
  3584  0D9F                     	;# 
  3585  0DA0                     	;# 
  3586  0DA1                     	;# 
  3587  0DA1                     	;# 
  3588  0DA2                     	;# 
  3589  0DA3                     	;# 
  3590  0DA4                     	;# 
  3591  0DA4                     	;# 
  3592  0DA5                     	;# 
  3593  0DA6                     	;# 
  3594  0DA7                     	;# 
  3595  0DA7                     	;# 
  3596  0DA8                     	;# 
  3597  0DA9                     	;# 
  3598  0DAA                     	;# 
  3599  0DAB                     	;# 
  3600  0DAC                     	;# 
  3601  0DAD                     	;# 
  3602  0DAE                     	;# 
  3603  0DAF                     	;# 
  3604  0E0F                     	;# 
  3605  0E10                     	;# 
  3606  0E11                     	;# 
  3607  0E12                     	;# 
  3608  0E13                     	;# 
  3609  0E14                     	;# 
  3610  0E15                     	;# 
  3611  0E16                     	;# 
  3612  0E17                     	;# 
  3613  0E18                     	;# 
  3614  0E19                     	;# 
  3615  0E1A                     	;# 
  3616  0E1B                     	;# 
  3617  0E1C                     	;# 
  3618  0E1D                     	;# 
  3619  0E1E                     	;# 
  3620  0E1F                     	;# 
  3621  0E20                     	;# 
  3622  0E21                     	;# 
  3623  0E22                     	;# 
  3624  0E23                     	;# 
  3625  0E24                     	;# 
  3626  0E25                     	;# 
  3627  0E26                     	;# 
  3628  0E27                     	;# 
  3629  0E28                     	;# 
  3630  0E29                     	;# 
  3631  0E2A                     	;# 
  3632  0E2B                     	;# 
  3633  0E2C                     	;# 
  3634  0E2D                     	;# 
  3635  0E2E                     	;# 
  3636  0E90                     	;# 
  3637  0E91                     	;# 
  3638  0E92                     	;# 
  3639  0E94                     	;# 
  3640  0E95                     	;# 
  3641  0E9C                     	;# 
  3642  0E9D                     	;# 
  3643  0E9E                     	;# 
  3644  0E9F                     	;# 
  3645  0EA0                     	;# 
  3646  0EA1                     	;# 
  3647  0EA2                     	;# 
  3648  0EA3                     	;# 
  3649  0EA4                     	;# 
  3650  0EA5                     	;# 
  3651  0EA6                     	;# 
  3652  0EA7                     	;# 
  3653  0F0F                     	;# 
  3654  0F10                     	;# 
  3655  0F11                     	;# 
  3656  0F12                     	;# 
  3657  0F13                     	;# 
  3658  0F14                     	;# 
  3659  0F15                     	;# 
  3660  0F16                     	;# 
  3661  0F17                     	;# 
  3662  0F18                     	;# 
  3663  0F19                     	;# 
  3664  0F1A                     	;# 
  3665  0F1B                     	;# 
  3666  0F1C                     	;# 
  3667  0F1D                     	;# 
  3668  0F1E                     	;# 
  3669  0F1F                     	;# 
  3670  0F20                     	;# 
  3671  0F21                     	;# 
  3672  0F22                     	;# 
  3673  0F23                     	;# 
  3674  0F24                     	;# 
  3675  0F25                     	;# 
  3676  0F26                     	;# 
  3677  0F27                     	;# 
  3678  0F28                     	;# 
  3679  0F29                     	;# 
  3680  0F2A                     	;# 
  3681  0F2B                     	;# 
  3682  0F2C                     	;# 
  3683  0F2D                     	;# 
  3684  0F2E                     	;# 
  3685  0F2F                     	;# 
  3686  0F30                     	;# 
  3687  0F31                     	;# 
  3688  0F32                     	;# 
  3689  0F33                     	;# 
  3690  0F34                     	;# 
  3691  0F35                     	;# 
  3692  0F36                     	;# 
  3693  0F37                     	;# 
  3694  0FE4                     	;# 
  3695  0FE5                     	;# 
  3696  0FE6                     	;# 
  3697  0FE7                     	;# 
  3698  0FE8                     	;# 
  3699  0FE9                     	;# 
  3700  0FEA                     	;# 
  3701  0FEB                     	;# 
  3702  0FED                     	;# 
  3703  0FEE                     	;# 
  3704  0FEF                     	;# 
  3705  0000                     	;# 
  3706  0001                     	;# 
  3707  0002                     	;# 
  3708  0003                     	;# 
  3709  0004                     	;# 
  3710  0005                     	;# 
  3711  0006                     	;# 
  3712  0007                     	;# 
  3713  0008                     	;# 
  3714  0009                     	;# 
  3715  000A                     	;# 
  3716  000B                     	;# 
  3717  000C                     	;# 
  3718  000D                     	;# 
  3719  000E                     	;# 
  3720  0010                     	;# 
  3721  0011                     	;# 
  3722  0012                     	;# 
  3723  0013                     	;# 
  3724  0014                     	;# 
  3725  0015                     	;# 
  3726  0016                     	;# 
  3727  0016                     	;# 
  3728  0017                     	;# 
  3729  0018                     	;# 
  3730  0019                     	;# 
  3731  001A                     	;# 
  3732  001A                     	;# 
  3733  001B                     	;# 
  3734  001B                     	;# 
  3735  001C                     	;# 
  3736  001D                     	;# 
  3737  001E                     	;# 
  3738  001F                     	;# 
  3739  008C                     	;# 
  3740  008D                     	;# 
  3741  008E                     	;# 
  3742  0090                     	;# 
  3743  0091                     	;# 
  3744  0092                     	;# 
  3745  0093                     	;# 
  3746  0094                     	;# 
  3747  0095                     	;# 
  3748  0096                     	;# 
  3749  0098                     	;# 
  3750  0099                     	;# 
  3751  009A                     	;# 
  3752  009B                     	;# 
  3753  009B                     	;# 
  3754  009C                     	;# 
  3755  009D                     	;# 
  3756  009E                     	;# 
  3757  009F                     	;# 
  3758  010C                     	;# 
  3759  010D                     	;# 
  3760  010E                     	;# 
  3761  0111                     	;# 
  3762  0112                     	;# 
  3763  0113                     	;# 
  3764  0114                     	;# 
  3765  0115                     	;# 
  3766  0116                     	;# 
  3767  0117                     	;# 
  3768  0118                     	;# 
  3769  0119                     	;# 
  3770  011C                     	;# 
  3771  018C                     	;# 
  3772  018D                     	;# 
  3773  018E                     	;# 
  3774  0191                     	;# 
  3775  0191                     	;# 
  3776  0192                     	;# 
  3777  0193                     	;# 
  3778  0193                     	;# 
  3779  0194                     	;# 
  3780  0195                     	;# 
  3781  0196                     	;# 
  3782  0197                     	;# 
  3783  0199                     	;# 
  3784  0199                     	;# 
  3785  0199                     	;# 
  3786  019A                     	;# 
  3787  019A                     	;# 
  3788  019A                     	;# 
  3789  019B                     	;# 
  3790  019B                     	;# 
  3791  019B                     	;# 
  3792  019B                     	;# 
  3793  019B                     	;# 
  3794  019C                     	;# 
  3795  019C                     	;# 
  3796  019C                     	;# 
  3797  019D                     	;# 
  3798  019D                     	;# 
  3799  019D                     	;# 
  3800  019E                     	;# 
  3801  019E                     	;# 
  3802  019E                     	;# 
  3803  019F                     	;# 
  3804  019F                     	;# 
  3805  019F                     	;# 
  3806  019F                     	;# 
  3807  019F                     	;# 
  3808  020C                     	;# 
  3809  020D                     	;# 
  3810  020E                     	;# 
  3811  0211                     	;# 
  3812  0211                     	;# 
  3813  0212                     	;# 
  3814  0212                     	;# 
  3815  0213                     	;# 
  3816  0213                     	;# 
  3817  0214                     	;# 
  3818  0214                     	;# 
  3819  0215                     	;# 
  3820  0215                     	;# 
  3821  0215                     	;# 
  3822  0215                     	;# 
  3823  0216                     	;# 
  3824  0216                     	;# 
  3825  0217                     	;# 
  3826  0217                     	;# 
  3827  028C                     	;# 
  3828  028D                     	;# 
  3829  028E                     	;# 
  3830  0291                     	;# 
  3831  0291                     	;# 
  3832  0292                     	;# 
  3833  0293                     	;# 
  3834  0294                     	;# 
  3835  0298                     	;# 
  3836  0298                     	;# 
  3837  0299                     	;# 
  3838  029A                     	;# 
  3839  029B                     	;# 
  3840  029E                     	;# 
  3841  030C                     	;# 
  3842  030D                     	;# 
  3843  030E                     	;# 
  3844  038C                     	;# 
  3845  038D                     	;# 
  3846  038E                     	;# 
  3847  0391                     	;# 
  3848  0392                     	;# 
  3849  0393                     	;# 
  3850  0394                     	;# 
  3851  0395                     	;# 
  3852  0396                     	;# 
  3853  0397                     	;# 
  3854  0398                     	;# 
  3855  0399                     	;# 
  3856  040E                     	;# 
  3857  0413                     	;# 
  3858  0413                     	;# 
  3859  0414                     	;# 
  3860  0414                     	;# 
  3861  0415                     	;# 
  3862  0416                     	;# 
  3863  0417                     	;# 
  3864  0418                     	;# 
  3865  041A                     	;# 
  3866  041A                     	;# 
  3867  041B                     	;# 
  3868  041B                     	;# 
  3869  041C                     	;# 
  3870  041D                     	;# 
  3871  041E                     	;# 
  3872  041F                     	;# 
  3873  0493                     	;# 
  3874  0494                     	;# 
  3875  0495                     	;# 
  3876  0496                     	;# 
  3877  049A                     	;# 
  3878  049B                     	;# 
  3879  049C                     	;# 
  3880  049D                     	;# 
  3881  058C                     	;# 
  3882  058C                     	;# 
  3883  058D                     	;# 
  3884  058E                     	;# 
  3885  058E                     	;# 
  3886  058F                     	;# 
  3887  0590                     	;# 
  3888  0590                     	;# 
  3889  0591                     	;# 
  3890  0592                     	;# 
  3891  0592                     	;# 
  3892  0593                     	;# 
  3893  0594                     	;# 
  3894  0594                     	;# 
  3895  0595                     	;# 
  3896  0596                     	;# 
  3897  0596                     	;# 
  3898  0597                     	;# 
  3899  0598                     	;# 
  3900  0599                     	;# 
  3901  059A                     	;# 
  3902  059B                     	;# 
  3903  059B                     	;# 
  3904  059C                     	;# 
  3905  059D                     	;# 
  3906  060C                     	;# 
  3907  060C                     	;# 
  3908  060D                     	;# 
  3909  060E                     	;# 
  3910  060F                     	;# 
  3911  060F                     	;# 
  3912  0610                     	;# 
  3913  0611                     	;# 
  3914  0612                     	;# 
  3915  0613                     	;# 
  3916  0614                     	;# 
  3917  0617                     	;# 
  3918  0618                     	;# 
  3919  0619                     	;# 
  3920  061A                     	;# 
  3921  061B                     	;# 
  3922  061C                     	;# 
  3923  0691                     	;# 
  3924  0692                     	;# 
  3925  0693                     	;# 
  3926  0694                     	;# 
  3927  0695                     	;# 
  3928  0696                     	;# 
  3929  0697                     	;# 
  3930  0699                     	;# 
  3931  069A                     	;# 
  3932  0711                     	;# 
  3933  0712                     	;# 
  3934  0713                     	;# 
  3935  0714                     	;# 
  3936  0715                     	;# 
  3937  0718                     	;# 
  3938  0718                     	;# 
  3939  0719                     	;# 
  3940  071A                     	;# 
  3941  071A                     	;# 
  3942  071B                     	;# 
  3943  071C                     	;# 
  3944  071D                     	;# 
  3945  0791                     	;# 
  3946  0791                     	;# 
  3947  0792                     	;# 
  3948  0793                     	;# 
  3949  0793                     	;# 
  3950  0794                     	;# 
  3951  0795                     	;# 
  3952  0795                     	;# 
  3953  0796                     	;# 
  3954  0797                     	;# 
  3955  0797                     	;# 
  3956  0798                     	;# 
  3957  0799                     	;# 
  3958  079A                     	;# 
  3959  080C                     	;# 
  3960  080C                     	;# 
  3961  080D                     	;# 
  3962  080E                     	;# 
  3963  080E                     	;# 
  3964  080F                     	;# 
  3965  0810                     	;# 
  3966  0810                     	;# 
  3967  0811                     	;# 
  3968  0812                     	;# 
  3969  0812                     	;# 
  3970  0813                     	;# 
  3971  0814                     	;# 
  3972  0815                     	;# 
  3973  0816                     	;# 
  3974  0817                     	;# 
  3975  0818                     	;# 
  3976  0819                     	;# 
  3977  081A                     	;# 
  3978  081A                     	;# 
  3979  081B                     	;# 
  3980  081C                     	;# 
  3981  081C                     	;# 
  3982  081D                     	;# 
  3983  088C                     	;# 
  3984  088D                     	;# 
  3985  088E                     	;# 
  3986  088F                     	;# 
  3987  088F                     	;# 
  3988  0890                     	;# 
  3989  0891                     	;# 
  3990  0892                     	;# 
  3991  0893                     	;# 
  3992  0893                     	;# 
  3993  0894                     	;# 
  3994  0895                     	;# 
  3995  0896                     	;# 
  3996  0897                     	;# 
  3997  0897                     	;# 
  3998  0898                     	;# 
  3999  0899                     	;# 
  4000  0D8C                     	;# 
  4001  0D8C                     	;# 
  4002  0D8D                     	;# 
  4003  0D8E                     	;# 
  4004  0D8F                     	;# 
  4005  0D8F                     	;# 
  4006  0D90                     	;# 
  4007  0D91                     	;# 
  4008  0D92                     	;# 
  4009  0D92                     	;# 
  4010  0D93                     	;# 
  4011  0D94                     	;# 
  4012  0D95                     	;# 
  4013  0D95                     	;# 
  4014  0D96                     	;# 
  4015  0D97                     	;# 
  4016  0D98                     	;# 
  4017  0D99                     	;# 
  4018  0D9A                     	;# 
  4019  0D9B                     	;# 
  4020  0D9C                     	;# 
  4021  0D9D                     	;# 
  4022  0D9E                     	;# 
  4023  0D9E                     	;# 
  4024  0D9F                     	;# 
  4025  0DA0                     	;# 
  4026  0DA1                     	;# 
  4027  0DA1                     	;# 
  4028  0DA2                     	;# 
  4029  0DA3                     	;# 
  4030  0DA4                     	;# 
  4031  0DA4                     	;# 
  4032  0DA5                     	;# 
  4033  0DA6                     	;# 
  4034  0DA7                     	;# 
  4035  0DA7                     	;# 
  4036  0DA8                     	;# 
  4037  0DA9                     	;# 
  4038  0DAA                     	;# 
  4039  0DAB                     	;# 
  4040  0DAC                     	;# 
  4041  0DAD                     	;# 
  4042  0DAE                     	;# 
  4043  0DAF                     	;# 
  4044  0E0F                     	;# 
  4045  0E10                     	;# 
  4046  0E11                     	;# 
  4047  0E12                     	;# 
  4048  0E13                     	;# 
  4049  0E14                     	;# 
  4050  0E15                     	;# 
  4051  0E16                     	;# 
  4052  0E17                     	;# 
  4053  0E18                     	;# 
  4054  0E19                     	;# 
  4055  0E1A                     	;# 
  4056  0E1B                     	;# 
  4057  0E1C                     	;# 
  4058  0E1D                     	;# 
  4059  0E1E                     	;# 
  4060  0E1F                     	;# 
  4061  0E20                     	;# 
  4062  0E21                     	;# 
  4063  0E22                     	;# 
  4064  0E23                     	;# 
  4065  0E24                     	;# 
  4066  0E25                     	;# 
  4067  0E26                     	;# 
  4068  0E27                     	;# 
  4069  0E28                     	;# 
  4070  0E29                     	;# 
  4071  0E2A                     	;# 
  4072  0E2B                     	;# 
  4073  0E2C                     	;# 
  4074  0E2D                     	;# 
  4075  0E2E                     	;# 
  4076  0E90                     	;# 
  4077  0E91                     	;# 
  4078  0E92                     	;# 
  4079  0E94                     	;# 
  4080  0E95                     	;# 
  4081  0E9C                     	;# 
  4082  0E9D                     	;# 
  4083  0E9E                     	;# 
  4084  0E9F                     	;# 
  4085  0EA0                     	;# 
  4086  0EA1                     	;# 
  4087  0EA2                     	;# 
  4088  0EA3                     	;# 
  4089  0EA4                     	;# 
  4090  0EA5                     	;# 
  4091  0EA6                     	;# 
  4092  0EA7                     	;# 
  4093  0F0F                     	;# 
  4094  0F10                     	;# 
  4095  0F11                     	;# 
  4096  0F12                     	;# 
  4097  0F13                     	;# 
  4098  0F14                     	;# 
  4099  0F15                     	;# 
  4100  0F16                     	;# 
  4101  0F17                     	;# 
  4102  0F18                     	;# 
  4103  0F19                     	;# 
  4104  0F1A                     	;# 
  4105  0F1B                     	;# 
  4106  0F1C                     	;# 
  4107  0F1D                     	;# 
  4108  0F1E                     	;# 
  4109  0F1F                     	;# 
  4110  0F20                     	;# 
  4111  0F21                     	;# 
  4112  0F22                     	;# 
  4113  0F23                     	;# 
  4114  0F24                     	;# 
  4115  0F25                     	;# 
  4116  0F26                     	;# 
  4117  0F27                     	;# 
  4118  0F28                     	;# 
  4119  0F29                     	;# 
  4120  0F2A                     	;# 
  4121  0F2B                     	;# 
  4122  0F2C                     	;# 
  4123  0F2D                     	;# 
  4124  0F2E                     	;# 
  4125  0F2F                     	;# 
  4126  0F30                     	;# 
  4127  0F31                     	;# 
  4128  0F32                     	;# 
  4129  0F33                     	;# 
  4130  0F34                     	;# 
  4131  0F35                     	;# 
  4132  0F36                     	;# 
  4133  0F37                     	;# 
  4134  0FE4                     	;# 
  4135  0FE5                     	;# 
  4136  0FE6                     	;# 
  4137  0FE7                     	;# 
  4138  0FE8                     	;# 
  4139  0FE9                     	;# 
  4140  0FEA                     	;# 
  4141  0FEB                     	;# 
  4142  0FED                     	;# 
  4143  0FEE                     	;# 
  4144  0FEF                     	;# 
  4145                           
  4146                           	psect	idataBANK0
  4147  0E39                     __pidataBANK0:	
  4148                           
  4149                           ;initializer for _StateBat
  4150  0E39  3401               	retlw	1
  4151                           
  4152                           ;initializer for _Angle
  4153  0E3A  342D               	retlw	45
  4154                           
  4155                           ;initializer for _Validation
  4156  0E3B  3404               	retlw	4
  4157                           
  4158                           	psect	stringtext1
  4159  0615                     __pstringtext1:	
  4160  0615                     _fsmStateTable:	
  4161  0615  343C               	retlw	low _I2C_DO_IDLE
  4162  0616  340F               	retlw	high _I2C_DO_IDLE
  4163  0617  34CE               	retlw	low _I2C_DO_SEND_ADR_READ
  4164  0618  340F               	retlw	high _I2C_DO_SEND_ADR_READ
  4165  0619  3494               	retlw	low _I2C_DO_SEND_ADR_WRITE
  4166  061A  340F               	retlw	high _I2C_DO_SEND_ADR_WRITE
  4167  061B  341B               	retlw	low _I2C_DO_TX
  4168  061C  3402               	retlw	high _I2C_DO_TX
  4169  061D  34B6               	retlw	low _I2C_DO_RX
  4170  061E  3402               	retlw	high _I2C_DO_RX
  4171  061F  346B               	retlw	low _I2C_DO_RCEN
  4172  0620  340F               	retlw	high _I2C_DO_RCEN
  4173  0621  34DE               	retlw	low _I2C_DO_TX_EMPTY
  4174  0622  3404               	retlw	high _I2C_DO_TX_EMPTY
  4175  0623  34FB               	retlw	low _I2C_DO_SEND_RESTART_READ
  4176  0624  340E               	retlw	high _I2C_DO_SEND_RESTART_READ
  4177  0625  3403               	retlw	low _I2C_DO_SEND_RESTART_WRITE
  4178  0626  340F               	retlw	high _I2C_DO_SEND_RESTART_WRITE
  4179  0627  340B               	retlw	low _I2C_DO_SEND_RESTART
  4180  0628  340F               	retlw	high _I2C_DO_SEND_RESTART
  4181  0629  3413               	retlw	low _I2C_DO_SEND_STOP
  4182  062A  340F               	retlw	high _I2C_DO_SEND_STOP
  4183  062B  341B               	retlw	low _I2C_DO_RX_ACK
  4184  062C  340F               	retlw	high _I2C_DO_RX_ACK
  4185  062D  3423               	retlw	low _I2C_DO_RX_NACK_STOP
  4186  062E  340F               	retlw	high _I2C_DO_RX_NACK_STOP
  4187  062F  342B               	retlw	low _I2C_DO_RX_NACK_RESTART
  4188  0630  340F               	retlw	high _I2C_DO_RX_NACK_RESTART
  4189  0631  3445               	retlw	low _I2C_DO_RESET
  4190  0632  340F               	retlw	high _I2C_DO_RESET
  4191  0633  3409               	retlw	low _I2C_DO_ADDRESS_NACK
  4192  0634  3405               	retlw	high _I2C_DO_ADDRESS_NACK
  4193  0635                     __end_of_fsmStateTable:	
  4194                           
  4195                           	psect	nvBANK0
  4196  0057                     __pnvBANK0:	
  4197  0057                     _TMR2_InterruptHandler:	
  4198  0057                     	ds	2
  4199  0059                     _EUSART_OverrunErrorHandler:	
  4200  0059                     	ds	2
  4201  005B                     _EUSART_FramingErrorHandler:	
  4202  005B                     	ds	2
  4203  005D                     _EUSART_RxDefaultInterruptHandler:	
  4204  005D                     	ds	2
  4205                           
  4206                           	psect	nvBANK1
  4207  00CA                     __pnvBANK1:	
  4208  00CA                     _EUSART_ErrorHandler:	
  4209  00CA                     	ds	2
  4210  000C                     _PORTAbits	set	12
  4211  001B                     _PR2	set	27
  4212  001A                     _TMR2	set	26
  4213  001C                     _T2CONbits	set	28
  4214  001F                     _T2RSTbits	set	31
  4215  001D                     _T2HLTbits	set	29
  4216  001C                     _T2CON	set	28
  4217  001A                     _T2TMR	set	26
  4218  001B                     _T2PR	set	27
  4219  001F                     _T2RST	set	31
  4220  001D                     _T2HLT	set	29
  4221  001E                     _T2CLKCON	set	30
  4222  0011                     _PIR2bits	set	17
  4223  0014                     _PIR5bits	set	20
  4224  0010                     _PIR1bits	set	16
  4225  000B                     _INTCONbits	set	11
  4226  0095                     _OPTION_REGbits	set	149
  4227  008E                     _TRISC	set	142
  4228  008D                     _TRISB	set	141
  4229  008C                     _TRISA	set	140
  4230  0098                     _OSCTUNE	set	152
  4231  0099                     _OSCCON	set	153
  4232  0094                     _PIE5bits	set	148
  4233  0090                     _PIE1bits	set	144
  4234  010C                     _LATAbits	set	268
  4235  010E                     _LATCbits	set	270
  4236  010E                     _LATC	set	270
  4237  010D                     _LATB	set	269
  4238  010C                     _LATA	set	268
  4239  0116                     _BORCON	set	278
  4240  0199                     _RC1REG	set	409
  4241  019D                     _RC1STAbits	set	413
  4242  019A                     _TX1REG	set	410
  4243  019E                     _TX1STAbits	set	414
  4244  019C                     _SPBRGH	set	412
  4245  019B                     _SPBRGL	set	411
  4246  019E                     _TX1STA	set	414
  4247  019D                     _RC1STA	set	413
  4248  019F                     _BAUD1CON	set	415
  4249  018C                     _ANSELA	set	396
  4250  018D                     _ANSELB	set	397
  4251  018E                     _ANSELC	set	398
  4252  0214                     _SSP1STATbits	set	532
  4253  0216                     _SSP1CON2bits	set	534
  4254  0211                     _SSP1BUF	set	529
  4255  0215                     _SSP1CON1bits	set	533
  4256  0212                     _SSP1ADD	set	530
  4257  0216                     _SSP1CON2	set	534
  4258  0215                     _SSP1CON1	set	533
  4259  0214                     _SSP1STAT	set	532
  4260  020E                     _WPUC	set	526
  4261  020C                     _WPUA	set	524
  4262  020D                     _WPUB	set	525
  4263  029E                     _CCPTMRSbits	set	670
  4264  028E                     _ODCONC	set	654
  4265  028D                     _ODCONB	set	653
  4266  028C                     _ODCONA	set	652
  4267  030E                     _SLRCONC	set	782
  4268  030D                     _SLRCONB	set	781
  4269  030C                     _SLRCONA	set	780
  4270  038E                     _INLVLC	set	910
  4271  038D                     _INLVLB	set	909
  4272  038C                     _INLVLA	set	908
  4273  059A                     _PID1OUTU	set	1434
  4274  0599                     _PID1OUTHH	set	1433
  4275  0598                     _PID1OUTHL	set	1432
  4276  0597                     _PID1OUTLH	set	1431
  4277  0596                     _PID1OUTLL	set	1430
  4278  059D                     _PID1Z1U	set	1437
  4279  059C                     _PID1Z1H	set	1436
  4280  059B                     _PID1Z1L	set	1435
  4281  058E                     _PID1INL	set	1422
  4282  058F                     _PID1INH	set	1423
  4283  058C                     _PID1SETL	set	1420
  4284  058D                     _PID1SETH	set	1421
  4285  0594                     _PID1K3L	set	1428
  4286  0595                     _PID1K3H	set	1429
  4287  0592                     _PID1K2L	set	1426
  4288  0593                     _PID1K2H	set	1427
  4289  0590                     _PID1K1L	set	1424
  4290  0591                     _PID1K1H	set	1425
  4291  060E                     _PID1Z2U	set	1550
  4292  060D                     _PID1Z2H	set	1549
  4293  060C                     _PID1Z2L	set	1548
  4294  0614                     _PID1CON	set	1556
  4295  0617                     _PWM3DCL	set	1559
  4296  0618                     _PWM3DCH	set	1560
  4297  0619                     _PWM3CON	set	1561
  4298  0E20                     _SSPCLKPPS	set	3616
  4299  0E21                     _SSPDATPPS	set	3617
  4300  0E24                     _RXPPS	set	3620
  4301  0E92                     _RA2PPS	set	3730
  4302  0E9C                     _RB4PPS	set	3740
  4303  0E9F                     _RB7PPS	set	3743
  4304  0E9E                     _RB6PPS	set	3742
  4305                           
  4306                           ; #config settings
  4307  0000                     
  4308                           	psect	cinit
  4309  003A                     start_initialization:	
  4310  003A                     __initialization:	
  4311                           
  4312                           ; Initialize objects allocated to BANK0
  4313  003A  318E  2639  3180   	fcall	__pidataBANK0	;fetch initializer
  4314  003D  00DF               	movwf	__pdataBANK0& (0+127)
  4315  003E  318E  263A  3180   	fcall	__pidataBANK0+1	;fetch initializer
  4316  0041  00E0               	movwf	(__pdataBANK0+1)& (0+127)
  4317  0042  318E  263B  3180   	fcall	__pidataBANK0+2	;fetch initializer
  4318  0045  00E1               	movwf	(__pdataBANK0+2)& (0+127)
  4319                           
  4320                           ; Clear objects allocated to BANK0
  4321  0046  3020               	movlw	low __pbssBANK0
  4322  0047  0084               	movwf	4
  4323  0048  3000               	movlw	high __pbssBANK0
  4324  0049  0085               	movwf	5
  4325  004A  301D               	movlw	29
  4326  004B  318E  26D7  3180   	fcall	clear_ram0
  4327                           
  4328                           ; Clear objects allocated to BANK1
  4329  004E  30A0               	movlw	low __pbssBANK1
  4330  004F  0084               	movwf	4
  4331  0050  3000               	movlw	high __pbssBANK1
  4332  0051  0085               	movwf	5
  4333  0052  301D               	movlw	29
  4334  0053  318E  26D7         	fcall	clear_ram0
  4335  0055                     end_of_initialization:	
  4336                           ;End of C runtime variable initialization code
  4337                           
  4338  0055                     __end_of__initialization:	
  4339  0055  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4340  0056  0020               	movlb	0
  4341  0057  3181  29AB         	ljmp	_main	;jump to C main() function
  4342                           
  4343                           	psect	bssBANK0
  4344  0020                     __pbssBANK0:	
  4345  0020                     _eusartRxStatusBuffer:	
  4346  0020                     	ds	8
  4347  0028                     _eusartRxBuffer:	
  4348  0028                     	ds	8
  4349  0030                     _StateLeds:	
  4350  0030                     	ds	1
  4351  0031                     _PosUart:	
  4352  0031                     	ds	1
  4353  0032                     _StateToggle:	
  4354  0032                     	ds	1
  4355  0033                     _Vitesse:	
  4356  0033                     	ds	1
  4357  0034                     _G:	
  4358  0034                     	ds	1
  4359  0035                     _CptBat:	
  4360  0035                     	ds	1
  4361  0036                     _Type:	
  4362  0036                     	ds	1
  4363  0037                     _Data:	
  4364  0037                     	ds	1
  4365  0038                     _Pos:	
  4366  0038                     	ds	1
  4367  0039                     _eusartRxLastError:	
  4368  0039                     	ds	1
  4369  003A                     _eusartRxCount:	
  4370  003A                     	ds	1
  4371  003B                     _eusartRxTail:	
  4372  003B                     	ds	1
  4373  003C                     _eusartRxHead:	
  4374  003C                     	ds	1
  4375                           
  4376                           	psect	dataBANK0
  4377  005F                     __pdataBANK0:	
  4378  005F                     _StateBat:	
  4379  005F                     	ds	1
  4380  0060                     _Angle:	
  4381  0060                     	ds	1
  4382  0061                     _Validation:	
  4383  0061                     	ds	1
  4384                           
  4385                           	psect	bssBANK1
  4386  00A0                     __pbssBANK1:	
  4387  00A0                     _I2C_Status:	
  4388  00A0                     	ds	29
  4389                           
  4390                           	psect	clrtext
  4391  0ED7                     clear_ram0:	
  4392                           ;	Called with FSR0 containing the base address, and
  4393                           ;	WREG with the size to clear
  4394                           
  4395  0ED7  0064               	clrwdt	;clear the watchdog before getting into this loop
  4396  0ED8                     clrloop0:	
  4397  0ED8  0180               	clrf	0	;clear RAM location pointed to by FSR
  4398  0ED9  3101               	addfsr 0,1
  4399  0EDA  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4400  0EDB  2ED8               	goto	clrloop0	;have we reached the end yet?
  4401  0EDC  3400               	retlw	0	;all done for this memory range, return
  4402                           
  4403                           	psect	cstackBANK1
  4404  00BD                     __pcstackBANK1:	
  4405  00BD                     _I2C_DO_TX$864:	
  4406                           
  4407                           ; 2 bytes @ 0x0
  4408  00BD                     	ds	2
  4409  00BF                     ??_I2C_MasterFsm:	
  4410                           
  4411                           ; 1 bytes @ 0x2
  4412  00BF                     	ds	3
  4413  00C2                     I2C_MasterOperation@read:	
  4414                           
  4415                           ; 1 bytes @ 0x5
  4416  00C2                     	ds	1
  4417  00C3                     I2C_MasterOperation@returnValue:	
  4418                           
  4419                           ; 1 bytes @ 0x6
  4420  00C3                     	ds	1
  4421  00C4                     ?_I2C_Write1ByteRegister:	
  4422  00C4                     I2C_Write1ByteRegister@reg:	
  4423                           ; 1 bytes @ 0x7
  4424                           
  4425                           
  4426                           ; 1 bytes @ 0x7
  4427  00C4                     	ds	1
  4428  00C5                     I2C_Write1ByteRegister@data:	
  4429                           
  4430                           ; 1 bytes @ 0x8
  4431  00C5                     	ds	1
  4432  00C6                     ??_I2C_Write1ByteRegister:	
  4433                           
  4434                           ; 1 bytes @ 0x9
  4435  00C6                     	ds	1
  4436  00C7                     I2C_Write1ByteRegister@address:	
  4437                           
  4438                           ; 1 bytes @ 0xA
  4439  00C7                     	ds	1
  4440  00C8                     ??_main:	
  4441                           
  4442                           ; 1 bytes @ 0xB
  4443  00C8                     	ds	2
  4444                           
  4445                           	psect	cstackCOMMON
  4446  0070                     __pcstackCOMMON:	
  4447  0070                     ?_I2C_Open:	
  4448  0070                     ?_I2C_MasterWrite:	
  4449                           ; 1 bytes @ 0x0
  4450                           
  4451  0070                     ?_I2C_Close:	
  4452                           ; 1 bytes @ 0x0
  4453                           
  4454  0070                     ?_TMR2_ISR:	
  4455                           ; 1 bytes @ 0x0
  4456                           
  4457  0070                     ?_MATHACC_PID_ISR:	
  4458                           ; 1 bytes @ 0x0
  4459                           
  4460  0070                     ??_MATHACC_PID_ISR:	
  4461                           ; 1 bytes @ 0x0
  4462                           
  4463  0070                     ?_MATHACC_Error_ISR:	
  4464                           ; 1 bytes @ 0x0
  4465                           
  4466  0070                     ??_MATHACC_Error_ISR:	
  4467                           ; 1 bytes @ 0x0
  4468                           
  4469  0070                     ?_I2C_Initialize:	
  4470                           ; 1 bytes @ 0x0
  4471                           
  4472  0070                     ?_PIN_MANAGER_Initialize:	
  4473                           ; 1 bytes @ 0x0
  4474                           
  4475  0070                     ?_OSCILLATOR_Initialize:	
  4476                           ; 1 bytes @ 0x0
  4477                           
  4478  0070                     ?_PWM3_Initialize:	
  4479                           ; 1 bytes @ 0x0
  4480                           
  4481  0070                     ?_TMR2_Initialize:	
  4482                           ; 1 bytes @ 0x0
  4483                           
  4484  0070                     ?_MATHACC_Initialize:	
  4485                           ; 1 bytes @ 0x0
  4486                           
  4487  0070                     ?_EUSART_Initialize:	
  4488                           ; 1 bytes @ 0x0
  4489                           
  4490  0070                     ?_I2C_DO_IDLE:	
  4491                           ; 1 bytes @ 0x0
  4492                           
  4493  0070                     ?_I2C_DO_SEND_ADR_READ:	
  4494                           ; 1 bytes @ 0x0
  4495                           
  4496  0070                     ?_I2C_DO_SEND_ADR_WRITE:	
  4497                           ; 1 bytes @ 0x0
  4498                           
  4499  0070                     ?_I2C_DO_TX:	
  4500                           ; 1 bytes @ 0x0
  4501                           
  4502  0070                     ?_I2C_DO_RX:	
  4503                           ; 1 bytes @ 0x0
  4504                           
  4505  0070                     ?_I2C_DO_RCEN:	
  4506                           ; 1 bytes @ 0x0
  4507                           
  4508  0070                     ?_I2C_DO_TX_EMPTY:	
  4509                           ; 1 bytes @ 0x0
  4510                           
  4511  0070                     ?_I2C_DO_SEND_RESTART_READ:	
  4512                           ; 1 bytes @ 0x0
  4513                           
  4514  0070                     ?_I2C_DO_SEND_RESTART_WRITE:	
  4515                           ; 1 bytes @ 0x0
  4516                           
  4517  0070                     ?_I2C_DO_SEND_RESTART:	
  4518                           ; 1 bytes @ 0x0
  4519                           
  4520  0070                     ?_I2C_DO_SEND_STOP:	
  4521                           ; 1 bytes @ 0x0
  4522                           
  4523  0070                     ?_I2C_DO_RX_ACK:	
  4524                           ; 1 bytes @ 0x0
  4525                           
  4526  0070                     ?_I2C_DO_RX_NACK_STOP:	
  4527                           ; 1 bytes @ 0x0
  4528                           
  4529  0070                     ?_I2C_DO_RX_NACK_RESTART:	
  4530                           ; 1 bytes @ 0x0
  4531                           
  4532  0070                     ?_I2C_DO_RESET:	
  4533                           ; 1 bytes @ 0x0
  4534                           
  4535  0070                     ?_I2C_DO_ADDRESS_NACK:	
  4536                           ; 1 bytes @ 0x0
  4537                           
  4538  0070                     ?_I2C_MasterClearIrq:	
  4539                           ; 1 bytes @ 0x0
  4540                           
  4541  0070                     ?_I2C_MasterOpen:	
  4542                           ; 1 bytes @ 0x0
  4543                           
  4544  0070                     ?_I2C_MasterDisableIrq:	
  4545                           ; 1 bytes @ 0x0
  4546                           
  4547  0070                     ?_I2C_MasterClose:	
  4548                           ; 1 bytes @ 0x0
  4549                           
  4550  0070                     ?_I2C_MasterStart:	
  4551                           ; 1 bytes @ 0x0
  4552                           
  4553  0070                     ?_I2C_Poller:	
  4554                           ; 1 bytes @ 0x0
  4555                           
  4556  0070                     ?_I2C_MasterWaitForEvent:	
  4557                           ; 1 bytes @ 0x0
  4558                           
  4559  0070                     ?_I2C_MasterFsm:	
  4560                           ; 1 bytes @ 0x0
  4561                           
  4562  0070                     ?_I2C_MasterIsNack:	
  4563                           ; 1 bytes @ 0x0
  4564                           
  4565  0070                     ?_I2C_MasterSendTxData:	
  4566                           ; 1 bytes @ 0x0
  4567                           
  4568  0070                     ?_I2C_MasterGetRxData:	
  4569                           ; 1 bytes @ 0x0
  4570                           
  4571  0070                     ?_I2C_MasterSendAck:	
  4572                           ; 1 bytes @ 0x0
  4573                           
  4574  0070                     ?_I2C_MasterStartRx:	
  4575                           ; 1 bytes @ 0x0
  4576                           
  4577  0070                     ?_I2C_MasterSetIrq:	
  4578                           ; 1 bytes @ 0x0
  4579                           
  4580  0070                     ?_I2C_MasterEnableRestart:	
  4581                           ; 1 bytes @ 0x0
  4582                           
  4583  0070                     ?_I2C_MasterStop:	
  4584                           ; 1 bytes @ 0x0
  4585                           
  4586  0070                     ?_I2C_MasterSendNack:	
  4587                           ; 1 bytes @ 0x0
  4588                           
  4589  0070                     ?_EUSART_Receive_ISR:	
  4590                           ; 1 bytes @ 0x0
  4591                           
  4592  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  4593                           ; 1 bytes @ 0x0
  4594                           
  4595  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  4596                           ; 1 bytes @ 0x0
  4597                           
  4598  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  4599                           ; 1 bytes @ 0x0
  4600                           
  4601  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  4602                           ; 1 bytes @ 0x0
  4603                           
  4604  0070                     ?_EUSART_DefaultErrorHandler:	
  4605                           ; 1 bytes @ 0x0
  4606                           
  4607  0070                     ?_EUSART_RxDataHandler:	
  4608                           ; 1 bytes @ 0x0
  4609                           
  4610  0070                     ??_EUSART_RxDataHandler:	
  4611                           ; 1 bytes @ 0x0
  4612                           
  4613  0070                     ?_TMR2_DefaultInterruptHandler:	
  4614                           ; 1 bytes @ 0x0
  4615                           
  4616  0070                     ??_TMR2_DefaultInterruptHandler:	
  4617                           ; 1 bytes @ 0x0
  4618                           
  4619  0070                     ?_TMR2_CallBack:	
  4620                           ; 1 bytes @ 0x0
  4621                           
  4622  0070                     ?_INTERRUPT_InterruptManager:	
  4623                           ; 1 bytes @ 0x0
  4624                           
  4625  0070                     ?_SYSTEM_Initialize:	
  4626                           ; 1 bytes @ 0x0
  4627                           
  4628  0070                     ?_I2C_MasterOperation:	
  4629                           ; 1 bytes @ 0x0
  4630                           
  4631  0070                     ?_EUSART_Write:	
  4632                           ; 1 bytes @ 0x0
  4633                           
  4634  0070                     ??_EUSART_Write:	
  4635                           ; 1 bytes @ 0x0
  4636                           
  4637  0070                     ?_PWM3_LoadDutyValue:	
  4638                           ; 1 bytes @ 0x0
  4639                           
  4640  0070                     ?_TMR2_Start:	
  4641                           ; 1 bytes @ 0x0
  4642                           
  4643  0070                     ?_TMR2_StartTimer:	
  4644                           ; 1 bytes @ 0x0
  4645                           
  4646  0070                     ?_TMR2_Counter8BitSet:	
  4647                           ; 1 bytes @ 0x0
  4648                           
  4649  0070                     ?_TMR2_WriteTimer:	
  4650                           ; 1 bytes @ 0x0
  4651                           
  4652  0070                     ?_MATHACC_PIDController:	
  4653                           ; 1 bytes @ 0x0
  4654                           
  4655  0070                     ?_MyTimer2ISR:	
  4656                           ; 1 bytes @ 0x0
  4657                           
  4658  0070                     ?_MyUART_ISR:	
  4659                           ; 1 bytes @ 0x0
  4660                           
  4661  0070                     ?_main:	
  4662                           ; 1 bytes @ 0x0
  4663                           
  4664  0070                     ?i1_I2C_Open:	
  4665                           ; 1 bytes @ 0x0
  4666                           
  4667  0070                     ??i1_I2C_Open:	
  4668                           ; 1 bytes @ 0x0
  4669                           
  4670  0070                     ?i1_I2C_Close:	
  4671                           ; 1 bytes @ 0x0
  4672                           
  4673  0070                     ??i1_I2C_Close:	
  4674                           ; 1 bytes @ 0x0
  4675                           
  4676  0070                     ?i1_I2C_MasterOperation:	
  4677                           ; 1 bytes @ 0x0
  4678                           
  4679  0070                     ?i1_I2C_MasterWrite:	
  4680                           ; 1 bytes @ 0x0
  4681                           
  4682  0070                     ?i1_I2C_SetBuffer:	
  4683                           ; 1 bytes @ 0x0
  4684                           
  4685  0070                     ?i1_I2C_SetCallback:	
  4686                           ; 1 bytes @ 0x0
  4687                           
  4688  0070                     ?i1_I2C_Poller:	
  4689                           ; 1 bytes @ 0x0
  4690                           
  4691  0070                     ?i1_I2C_MasterFsm:	
  4692                           ; 1 bytes @ 0x0
  4693                           
  4694  0070                     ?i1_I2C_DO_IDLE:	
  4695                           ; 1 bytes @ 0x0
  4696                           
  4697  0070                     ??i1_I2C_DO_IDLE:	
  4698                           ; 1 bytes @ 0x0
  4699                           
  4700  0070                     ?i1_I2C_DO_SEND_ADR_READ:	
  4701                           ; 1 bytes @ 0x0
  4702                           
  4703  0070                     ??i1_I2C_DO_SEND_ADR_READ:	
  4704                           ; 1 bytes @ 0x0
  4705                           
  4706  0070                     ?i1_I2C_DO_SEND_ADR_WRITE:	
  4707                           ; 1 bytes @ 0x0
  4708                           
  4709  0070                     ??i1_I2C_DO_SEND_ADR_WRITE:	
  4710                           ; 1 bytes @ 0x0
  4711                           
  4712  0070                     ?i1_I2C_DO_TX:	
  4713                           ; 1 bytes @ 0x0
  4714                           
  4715  0070                     ?i1_I2C_DO_RX:	
  4716                           ; 1 bytes @ 0x0
  4717                           
  4718  0070                     ?i1_I2C_DO_RCEN:	
  4719                           ; 1 bytes @ 0x0
  4720                           
  4721  0070                     ??i1_I2C_DO_RCEN:	
  4722                           ; 1 bytes @ 0x0
  4723                           
  4724  0070                     ?i1_I2C_DO_TX_EMPTY:	
  4725                           ; 1 bytes @ 0x0
  4726                           
  4727  0070                     ?i1_I2C_DO_SEND_RESTART_READ:	
  4728                           ; 1 bytes @ 0x0
  4729                           
  4730  0070                     ??i1_I2C_DO_SEND_RESTART_READ:	
  4731                           ; 1 bytes @ 0x0
  4732                           
  4733  0070                     ?i1_I2C_DO_SEND_RESTART_WRITE:	
  4734                           ; 1 bytes @ 0x0
  4735                           
  4736  0070                     ??i1_I2C_DO_SEND_RESTART_WRITE:	
  4737                           ; 1 bytes @ 0x0
  4738                           
  4739  0070                     ?i1_I2C_DO_SEND_RESTART:	
  4740                           ; 1 bytes @ 0x0
  4741                           
  4742  0070                     ??i1_I2C_DO_SEND_RESTART:	
  4743                           ; 1 bytes @ 0x0
  4744                           
  4745  0070                     ?i1_I2C_DO_SEND_STOP:	
  4746                           ; 1 bytes @ 0x0
  4747                           
  4748  0070                     ??i1_I2C_DO_SEND_STOP:	
  4749                           ; 1 bytes @ 0x0
  4750                           
  4751  0070                     ?i1_I2C_DO_RX_ACK:	
  4752                           ; 1 bytes @ 0x0
  4753                           
  4754  0070                     ??i1_I2C_DO_RX_ACK:	
  4755                           ; 1 bytes @ 0x0
  4756                           
  4757  0070                     ?i1_I2C_DO_RX_NACK_STOP:	
  4758                           ; 1 bytes @ 0x0
  4759                           
  4760  0070                     ??i1_I2C_DO_RX_NACK_STOP:	
  4761                           ; 1 bytes @ 0x0
  4762                           
  4763  0070                     ?i1_I2C_DO_RX_NACK_RESTART:	
  4764                           ; 1 bytes @ 0x0
  4765                           
  4766  0070                     ??i1_I2C_DO_RX_NACK_RESTART:	
  4767                           ; 1 bytes @ 0x0
  4768                           
  4769  0070                     ?i1_I2C_DO_RESET:	
  4770                           ; 1 bytes @ 0x0
  4771                           
  4772  0070                     ??i1_I2C_DO_RESET:	
  4773                           ; 1 bytes @ 0x0
  4774                           
  4775  0070                     ?i1_I2C_DO_ADDRESS_NACK:	
  4776                           ; 1 bytes @ 0x0
  4777                           
  4778  0070                     ?i1_I2C_MasterOpen:	
  4779                           ; 1 bytes @ 0x0
  4780                           
  4781  0070                     ??i1_I2C_MasterOpen:	
  4782                           ; 1 bytes @ 0x0
  4783                           
  4784  0070                     ?i1_I2C_MasterClose:	
  4785                           ; 1 bytes @ 0x0
  4786                           
  4787  0070                     ??i1_I2C_MasterClose:	
  4788                           ; 1 bytes @ 0x0
  4789                           
  4790  0070                     ?i1_I2C_MasterGetRxData:	
  4791                           ; 1 bytes @ 0x0
  4792                           
  4793  0070                     ??i1_I2C_MasterGetRxData:	
  4794                           ; 1 bytes @ 0x0
  4795                           
  4796  0070                     ?i1_I2C_MasterSendTxData:	
  4797                           ; 1 bytes @ 0x0
  4798                           
  4799  0070                     ??i1_I2C_MasterSendTxData:	
  4800                           ; 1 bytes @ 0x0
  4801                           
  4802  0070                     ?i1_I2C_MasterEnableRestart:	
  4803                           ; 1 bytes @ 0x0
  4804                           
  4805  0070                     ??i1_I2C_MasterEnableRestart:	
  4806                           ; 1 bytes @ 0x0
  4807                           
  4808  0070                     ?i1_I2C_MasterStartRx:	
  4809                           ; 1 bytes @ 0x0
  4810                           
  4811  0070                     ??i1_I2C_MasterStartRx:	
  4812                           ; 1 bytes @ 0x0
  4813                           
  4814  0070                     ?i1_I2C_MasterStart:	
  4815                           ; 1 bytes @ 0x0
  4816                           
  4817  0070                     ??i1_I2C_MasterStart:	
  4818                           ; 1 bytes @ 0x0
  4819                           
  4820  0070                     ?i1_I2C_MasterStop:	
  4821                           ; 1 bytes @ 0x0
  4822                           
  4823  0070                     ??i1_I2C_MasterStop:	
  4824                           ; 1 bytes @ 0x0
  4825                           
  4826  0070                     ?i1_I2C_MasterIsNack:	
  4827                           ; 1 bytes @ 0x0
  4828                           
  4829  0070                     ??i1_I2C_MasterIsNack:	
  4830                           ; 1 bytes @ 0x0
  4831                           
  4832  0070                     ?i1_I2C_MasterSendAck:	
  4833                           ; 1 bytes @ 0x0
  4834                           
  4835  0070                     ??i1_I2C_MasterSendAck:	
  4836                           ; 1 bytes @ 0x0
  4837                           
  4838  0070                     ?i1_I2C_MasterSendNack:	
  4839                           ; 1 bytes @ 0x0
  4840                           
  4841  0070                     ??i1_I2C_MasterSendNack:	
  4842                           ; 1 bytes @ 0x0
  4843                           
  4844  0070                     ?i1_I2C_MasterDisableIrq:	
  4845                           ; 1 bytes @ 0x0
  4846                           
  4847  0070                     ??i1_I2C_MasterDisableIrq:	
  4848                           ; 1 bytes @ 0x0
  4849                           
  4850  0070                     ?i1_I2C_MasterClearIrq:	
  4851                           ; 1 bytes @ 0x0
  4852                           
  4853  0070                     ??i1_I2C_MasterClearIrq:	
  4854                           ; 1 bytes @ 0x0
  4855                           
  4856  0070                     ?i1_I2C_MasterSetIrq:	
  4857                           ; 1 bytes @ 0x0
  4858                           
  4859  0070                     ??i1_I2C_MasterSetIrq:	
  4860                           ; 1 bytes @ 0x0
  4861                           
  4862  0070                     ?i1_I2C_MasterWaitForEvent:	
  4863                           ; 1 bytes @ 0x0
  4864                           
  4865  0070                     ??i1_I2C_MasterWaitForEvent:	
  4866                           ; 1 bytes @ 0x0
  4867                           
  4868  0070                     EUSART_Write@txData:	
  4869                           ; 1 bytes @ 0x0
  4870                           
  4871  0070                     i1I2C_MasterSendTxData@data:	
  4872                           ; 1 bytes @ 0x0
  4873                           
  4874  0070                     PWM3_LoadDutyValue@dutyValue:	
  4875                           ; 1 bytes @ 0x0
  4876                           
  4877  0070                     MATHACC_PIDController@setpoint:	
  4878                           ; 2 bytes @ 0x0
  4879                           
  4880  0070                     i1I2C_SetBuffer@bufferSize:	
  4881                           ; 2 bytes @ 0x0
  4882                           
  4883  0070                     i1I2C_SetCallback@cb:	
  4884                           ; 2 bytes @ 0x0
  4885                           
  4886                           
  4887                           ; 2 bytes @ 0x0
  4888  0070                     	ds	1
  4889  0071                     ??_EUSART_Receive_ISR:	
  4890  0071                     ??_EUSART_DefaultErrorHandler:	
  4891                           ; 1 bytes @ 0x1
  4892                           
  4893  0071                     ??_MyUART_ISR:	
  4894                           ; 1 bytes @ 0x1
  4895                           
  4896  0071                     i1I2C_Open@address:	
  4897                           ; 1 bytes @ 0x1
  4898                           
  4899  0071                     i1I2C_Close@returnValue:	
  4900                           ; 1 bytes @ 0x1
  4901                           
  4902                           
  4903                           ; 1 bytes @ 0x1
  4904  0071                     	ds	1
  4905  0072                     ??_PWM3_LoadDutyValue:	
  4906  0072                     ??i1_I2C_SetBuffer:	
  4907                           ; 1 bytes @ 0x2
  4908                           
  4909  0072                     i1I2C_Open@returnValue:	
  4910                           ; 1 bytes @ 0x2
  4911                           
  4912  0072                     i1I2C_SetCallback@ptr:	
  4913                           ; 1 bytes @ 0x2
  4914                           
  4915  0072                     MATHACC_PIDController@input:	
  4916                           ; 1 bytes @ 0x2
  4917                           
  4918                           
  4919                           ; 2 bytes @ 0x2
  4920  0072                     	ds	1
  4921  0073                     ??i1_I2C_SetCallback:	
  4922  0073                     i1I2C_SetBuffer@buffer:	
  4923                           ; 1 bytes @ 0x3
  4924                           
  4925                           
  4926                           ; 1 bytes @ 0x3
  4927  0073                     	ds	1
  4928  0074                     ??_MATHACC_PIDController:	
  4929  0074                     i1I2C_SetCallback@idx:	
  4930                           ; 1 bytes @ 0x4
  4931                           
  4932                           
  4933                           ; 1 bytes @ 0x4
  4934  0074                     	ds	1
  4935  0075                     ?i1_I2C_SetDataCompleteCallback:	
  4936  0075                     ?i1_I2C_SetAddressNackCallback:	
  4937                           ; 1 bytes @ 0x5
  4938                           
  4939  0075                     MyUART_ISR@c:	
  4940                           ; 1 bytes @ 0x5
  4941                           
  4942  0075                     i1I2C_SetDataCompleteCallback@cb:	
  4943                           ; 1 bytes @ 0x5
  4944                           
  4945  0075                     i1I2C_SetAddressNackCallback@cb:	
  4946                           ; 2 bytes @ 0x5
  4947                           
  4948                           
  4949                           ; 2 bytes @ 0x5
  4950  0075                     	ds	2
  4951  0077                     i1I2C_SetDataCompleteCallback@ptr:	
  4952  0077                     i1I2C_SetAddressNackCallback@ptr:	
  4953                           ; 1 bytes @ 0x7
  4954                           
  4955                           
  4956                           ; 1 bytes @ 0x7
  4957  0077                     	ds	1
  4958  0078                     ??i1_I2C_SetDataCompleteCallback:	
  4959  0078                     ??i1_I2C_SetAddressNackCallback:	
  4960                           ; 1 bytes @ 0x8
  4961                           
  4962                           
  4963                           ; 1 bytes @ 0x8
  4964  0078                     	ds	1
  4965  0079                     ?i1_rd1RegCompleteHandler:	
  4966  0079                     ?i1_rd2RegCompleteHandler:	
  4967                           ; 1 bytes @ 0x9
  4968                           
  4969  0079                     ?i1_wr1RegCompleteHandler:	
  4970                           ; 1 bytes @ 0x9
  4971                           
  4972  0079                     ?i1_wr2RegCompleteHandler:	
  4973                           ; 1 bytes @ 0x9
  4974                           
  4975  0079                     ?i1_rdBlkRegCompleteHandler:	
  4976                           ; 1 bytes @ 0x9
  4977                           
  4978  0079                     ?i1_I2C_CallbackReturnStop:	
  4979                           ; 1 bytes @ 0x9
  4980                           
  4981  0079                     ?i1_I2C_CallbackReturnReset:	
  4982                           ; 1 bytes @ 0x9
  4983                           
  4984  0079                     i1rd1RegCompleteHandler@ptr:	
  4985                           ; 1 bytes @ 0x9
  4986                           
  4987  0079                     i1rd2RegCompleteHandler@ptr:	
  4988                           ; 1 bytes @ 0x9
  4989                           
  4990  0079                     i1wr1RegCompleteHandler@ptr:	
  4991                           ; 1 bytes @ 0x9
  4992                           
  4993  0079                     i1wr2RegCompleteHandler@ptr:	
  4994                           ; 1 bytes @ 0x9
  4995                           
  4996  0079                     i1rdBlkRegCompleteHandler@ptr:	
  4997                           ; 1 bytes @ 0x9
  4998                           
  4999  0079                     i1I2C_CallbackReturnStop@funPtr:	
  5000                           ; 1 bytes @ 0x9
  5001                           
  5002  0079                     i1I2C_CallbackReturnReset@funPtr:	
  5003                           ; 1 bytes @ 0x9
  5004                           
  5005                           
  5006                           ; 1 bytes @ 0x9
  5007  0079                     	ds	1
  5008  007A                     ??i1_rd1RegCompleteHandler:	
  5009  007A                     ??i1_rd2RegCompleteHandler:	
  5010                           ; 1 bytes @ 0xA
  5011                           
  5012  007A                     ??i1_wr1RegCompleteHandler:	
  5013                           ; 1 bytes @ 0xA
  5014                           
  5015  007A                     ??i1_wr2RegCompleteHandler:	
  5016                           ; 1 bytes @ 0xA
  5017                           
  5018  007A                     ??i1_rdBlkRegCompleteHandler:	
  5019                           ; 1 bytes @ 0xA
  5020                           
  5021  007A                     ??i1_I2C_DO_TX:	
  5022                           ; 1 bytes @ 0xA
  5023                           
  5024  007A                     ??i1_I2C_DO_RX:	
  5025                           ; 1 bytes @ 0xA
  5026                           
  5027  007A                     ??i1_I2C_DO_TX_EMPTY:	
  5028                           ; 1 bytes @ 0xA
  5029                           
  5030  007A                     ??i1_I2C_DO_ADDRESS_NACK:	
  5031                           ; 1 bytes @ 0xA
  5032                           
  5033  007A                     ??i1_I2C_CallbackReturnStop:	
  5034                           ; 1 bytes @ 0xA
  5035                           
  5036  007A                     ??i1_I2C_CallbackReturnReset:	
  5037                           ; 1 bytes @ 0xA
  5038                           
  5039                           
  5040                           ; 1 bytes @ 0xA
  5041  007A                     	ds	1
  5042  007B                     i1_I2C_DO_TX$864:	
  5043                           
  5044                           ; 2 bytes @ 0xB
  5045  007B                     	ds	2
  5046  007D                     ??i1_I2C_MasterOperation:	
  5047  007D                     ??i1_I2C_Poller:	
  5048                           ; 1 bytes @ 0xD
  5049                           
  5050                           
  5051                           ; 1 bytes @ 0xD
  5052  007D                     	ds	1
  5053  007E                     ??_TMR2_ISR:	
  5054  007E                     ??_TMR2_CallBack:	
  5055                           ; 1 bytes @ 0xE
  5056                           
  5057  007E                     ??i1_I2C_MasterWrite:	
  5058                           ; 1 bytes @ 0xE
  5059                           
  5060                           
  5061                           	psect	cstackBANK0
  5062  003D                     __pcstackBANK0:	
  5063                           ; 1 bytes @ 0xE
  5064                           
  5065  003D                     ??i1_I2C_MasterFsm:	
  5066                           
  5067                           ; 1 bytes @ 0x0
  5068  003D                     	ds	3
  5069  0040                     i1I2C_MasterOperation@read:	
  5070                           
  5071                           ; 1 bytes @ 0x3
  5072  0040                     	ds	1
  5073  0041                     i1I2C_MasterOperation@returnValue:	
  5074                           
  5075                           ; 1 bytes @ 0x4
  5076  0041                     	ds	1
  5077  0042                     ?_I2C_Read1ByteRegister:	
  5078  0042                     ?i1_I2C_Write1ByteRegister:	
  5079                           ; 1 bytes @ 0x5
  5080                           
  5081  0042                     I2C_Read1ByteRegister@reg:	
  5082                           ; 1 bytes @ 0x5
  5083                           
  5084  0042                     i1I2C_Write1ByteRegister@reg:	
  5085                           ; 1 bytes @ 0x5
  5086                           
  5087                           
  5088                           ; 1 bytes @ 0x5
  5089  0042                     	ds	1
  5090  0043                     ??_I2C_Read1ByteRegister:	
  5091  0043                     i1I2C_Write1ByteRegister@data:	
  5092                           ; 1 bytes @ 0x6
  5093                           
  5094                           
  5095                           ; 1 bytes @ 0x6
  5096  0043                     	ds	1
  5097  0044                     ??i1_I2C_Write1ByteRegister:	
  5098  0044                     I2C_Read1ByteRegister@address:	
  5099                           ; 1 bytes @ 0x7
  5100                           
  5101                           
  5102                           ; 1 bytes @ 0x7
  5103  0044                     	ds	1
  5104  0045                     I2C_Read1ByteRegister@returnValue:	
  5105  0045                     i1I2C_Write1ByteRegister@address:	
  5106                           ; 1 bytes @ 0x8
  5107                           
  5108                           
  5109                           ; 1 bytes @ 0x8
  5110  0045                     	ds	1
  5111  0046                     ??_MyTimer2ISR:	
  5112                           
  5113                           ; 1 bytes @ 0x9
  5114  0046                     	ds	4
  5115  004A                     ??_INTERRUPT_InterruptManager:	
  5116                           
  5117                           ; 1 bytes @ 0xD
  5118  004A                     	ds	1
  5119  004B                     ??_I2C_Open:	
  5120  004B                     ?_I2C_SetBuffer:	
  5121                           ; 1 bytes @ 0xE
  5122                           
  5123  004B                     ??_I2C_Close:	
  5124                           ; 1 bytes @ 0xE
  5125                           
  5126  004B                     ??_I2C_Initialize:	
  5127                           ; 1 bytes @ 0xE
  5128                           
  5129  004B                     ??_PIN_MANAGER_Initialize:	
  5130                           ; 1 bytes @ 0xE
  5131                           
  5132  004B                     ??_OSCILLATOR_Initialize:	
  5133                           ; 1 bytes @ 0xE
  5134                           
  5135  004B                     ??_PWM3_Initialize:	
  5136                           ; 1 bytes @ 0xE
  5137                           
  5138  004B                     ??_MATHACC_Initialize:	
  5139                           ; 1 bytes @ 0xE
  5140                           
  5141  004B                     ??_I2C_DO_IDLE:	
  5142                           ; 1 bytes @ 0xE
  5143                           
  5144  004B                     ??_I2C_DO_SEND_ADR_READ:	
  5145                           ; 1 bytes @ 0xE
  5146                           
  5147  004B                     ??_I2C_DO_RCEN:	
  5148                           ; 1 bytes @ 0xE
  5149                           
  5150  004B                     ??_I2C_DO_SEND_RESTART_READ:	
  5151                           ; 1 bytes @ 0xE
  5152                           
  5153  004B                     ??_I2C_DO_SEND_RESTART_WRITE:	
  5154                           ; 1 bytes @ 0xE
  5155                           
  5156  004B                     ??_I2C_DO_SEND_RESTART:	
  5157                           ; 1 bytes @ 0xE
  5158                           
  5159  004B                     ??_I2C_DO_SEND_STOP:	
  5160                           ; 1 bytes @ 0xE
  5161                           
  5162  004B                     ??_I2C_DO_RX_ACK:	
  5163                           ; 1 bytes @ 0xE
  5164                           
  5165  004B                     ??_I2C_DO_RX_NACK_STOP:	
  5166                           ; 1 bytes @ 0xE
  5167                           
  5168  004B                     ??_I2C_DO_RX_NACK_RESTART:	
  5169                           ; 1 bytes @ 0xE
  5170                           
  5171  004B                     ??_I2C_DO_RESET:	
  5172                           ; 1 bytes @ 0xE
  5173                           
  5174  004B                     ??_I2C_MasterClearIrq:	
  5175                           ; 1 bytes @ 0xE
  5176                           
  5177  004B                     ??_I2C_MasterOpen:	
  5178                           ; 1 bytes @ 0xE
  5179                           
  5180  004B                     ??_I2C_MasterDisableIrq:	
  5181                           ; 1 bytes @ 0xE
  5182                           
  5183  004B                     ??_I2C_MasterClose:	
  5184                           ; 1 bytes @ 0xE
  5185                           
  5186  004B                     ??_I2C_MasterStart:	
  5187                           ; 1 bytes @ 0xE
  5188                           
  5189  004B                     ?_I2C_SetCallback:	
  5190                           ; 1 bytes @ 0xE
  5191                           
  5192  004B                     ??_I2C_MasterWaitForEvent:	
  5193                           ; 1 bytes @ 0xE
  5194                           
  5195  004B                     ??_I2C_MasterIsNack:	
  5196                           ; 1 bytes @ 0xE
  5197                           
  5198  004B                     ??_I2C_MasterSendTxData:	
  5199                           ; 1 bytes @ 0xE
  5200                           
  5201  004B                     ??_I2C_MasterGetRxData:	
  5202                           ; 1 bytes @ 0xE
  5203                           
  5204  004B                     ??_I2C_MasterSendAck:	
  5205                           ; 1 bytes @ 0xE
  5206                           
  5207  004B                     ??_I2C_MasterStartRx:	
  5208                           ; 1 bytes @ 0xE
  5209                           
  5210  004B                     ??_I2C_MasterSetIrq:	
  5211                           ; 1 bytes @ 0xE
  5212                           
  5213  004B                     ??_I2C_MasterEnableRestart:	
  5214                           ; 1 bytes @ 0xE
  5215                           
  5216  004B                     ??_I2C_MasterStop:	
  5217                           ; 1 bytes @ 0xE
  5218                           
  5219  004B                     ??_I2C_MasterSendNack:	
  5220                           ; 1 bytes @ 0xE
  5221                           
  5222  004B                     ?_EUSART_SetRxInterruptHandler:	
  5223                           ; 1 bytes @ 0xE
  5224                           
  5225  004B                     ?_EUSART_SetFramingErrorHandler:	
  5226                           ; 1 bytes @ 0xE
  5227                           
  5228  004B                     ?_EUSART_SetOverrunErrorHandler:	
  5229                           ; 1 bytes @ 0xE
  5230                           
  5231  004B                     ?_EUSART_SetErrorHandler:	
  5232                           ; 1 bytes @ 0xE
  5233                           
  5234  004B                     ?_TMR2_SetInterruptHandler:	
  5235                           ; 1 bytes @ 0xE
  5236                           
  5237  004B                     ??_TMR2_Start:	
  5238                           ; 1 bytes @ 0xE
  5239                           
  5240  004B                     ??_TMR2_StartTimer:	
  5241                           ; 1 bytes @ 0xE
  5242                           
  5243  004B                     ??_TMR2_Counter8BitSet:	
  5244                           ; 1 bytes @ 0xE
  5245                           
  5246  004B                     I2C_MasterSendTxData@data:	
  5247                           ; 1 bytes @ 0xE
  5248                           
  5249  004B                     TMR2_Counter8BitSet@timerVal:	
  5250                           ; 1 bytes @ 0xE
  5251                           
  5252  004B                     I2C_SetBuffer@bufferSize:	
  5253                           ; 1 bytes @ 0xE
  5254                           
  5255  004B                     I2C_SetCallback@cb:	
  5256                           ; 2 bytes @ 0xE
  5257                           
  5258  004B                     EUSART_SetFramingErrorHandler@interruptHandler:	
  5259                           ; 2 bytes @ 0xE
  5260                           
  5261  004B                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  5262                           ; 2 bytes @ 0xE
  5263                           
  5264  004B                     EUSART_SetErrorHandler@interruptHandler:	
  5265                           ; 2 bytes @ 0xE
  5266                           
  5267  004B                     EUSART_SetRxInterruptHandler@interruptHandler:	
  5268                           ; 2 bytes @ 0xE
  5269                           
  5270  004B                     TMR2_SetInterruptHandler@InterruptHandler:	
  5271                           ; 2 bytes @ 0xE
  5272                           
  5273                           
  5274                           ; 2 bytes @ 0xE
  5275  004B                     	ds	1
  5276  004C                     ??_I2C_DO_SEND_ADR_WRITE:	
  5277  004C                     ??_TMR2_WriteTimer:	
  5278                           ; 1 bytes @ 0xF
  5279                           
  5280  004C                     I2C_Open@address:	
  5281                           ; 1 bytes @ 0xF
  5282                           
  5283  004C                     I2C_Close@returnValue:	
  5284                           ; 1 bytes @ 0xF
  5285                           
  5286  004C                     TMR2_WriteTimer@timerVal:	
  5287                           ; 1 bytes @ 0xF
  5288                           
  5289                           
  5290                           ; 1 bytes @ 0xF
  5291  004C                     	ds	1
  5292  004D                     ??_I2C_SetBuffer:	
  5293  004D                     ??_TMR2_Initialize:	
  5294                           ; 1 bytes @ 0x10
  5295                           
  5296  004D                     ??_EUSART_Initialize:	
  5297                           ; 1 bytes @ 0x10
  5298                           
  5299  004D                     ??_EUSART_SetRxInterruptHandler:	
  5300                           ; 1 bytes @ 0x10
  5301                           
  5302  004D                     ??_EUSART_SetFramingErrorHandler:	
  5303                           ; 1 bytes @ 0x10
  5304                           
  5305  004D                     ??_EUSART_SetOverrunErrorHandler:	
  5306                           ; 1 bytes @ 0x10
  5307                           
  5308  004D                     ??_EUSART_SetErrorHandler:	
  5309                           ; 1 bytes @ 0x10
  5310                           
  5311  004D                     ??_TMR2_SetInterruptHandler:	
  5312                           ; 1 bytes @ 0x10
  5313                           
  5314  004D                     ??_SYSTEM_Initialize:	
  5315                           ; 1 bytes @ 0x10
  5316                           
  5317  004D                     I2C_Open@returnValue:	
  5318                           ; 1 bytes @ 0x10
  5319                           
  5320  004D                     I2C_SetCallback@ptr:	
  5321                           ; 1 bytes @ 0x10
  5322                           
  5323                           
  5324                           ; 1 bytes @ 0x10
  5325  004D                     	ds	1
  5326  004E                     ??_I2C_SetCallback:	
  5327  004E                     I2C_SetBuffer@buffer:	
  5328                           ; 1 bytes @ 0x11
  5329                           
  5330                           
  5331                           ; 1 bytes @ 0x11
  5332  004E                     	ds	1
  5333  004F                     I2C_SetCallback@idx:	
  5334                           
  5335                           ; 1 bytes @ 0x12
  5336  004F                     	ds	1
  5337  0050                     ?_I2C_SetDataCompleteCallback:	
  5338  0050                     ?_I2C_SetAddressNackCallback:	
  5339                           ; 1 bytes @ 0x13
  5340                           
  5341  0050                     I2C_SetDataCompleteCallback@cb:	
  5342                           ; 1 bytes @ 0x13
  5343                           
  5344  0050                     I2C_SetAddressNackCallback@cb:	
  5345                           ; 2 bytes @ 0x13
  5346                           
  5347                           
  5348                           ; 2 bytes @ 0x13
  5349  0050                     	ds	2
  5350  0052                     I2C_SetDataCompleteCallback@ptr:	
  5351  0052                     I2C_SetAddressNackCallback@ptr:	
  5352                           ; 1 bytes @ 0x15
  5353                           
  5354                           
  5355                           ; 1 bytes @ 0x15
  5356  0052                     	ds	1
  5357  0053                     ??_I2C_SetDataCompleteCallback:	
  5358  0053                     ??_I2C_SetAddressNackCallback:	
  5359                           ; 1 bytes @ 0x16
  5360                           
  5361                           
  5362                           ; 1 bytes @ 0x16
  5363  0053                     	ds	1
  5364  0054                     ?_rd1RegCompleteHandler:	
  5365  0054                     ?_rd2RegCompleteHandler:	
  5366                           ; 1 bytes @ 0x17
  5367                           
  5368  0054                     ?_wr1RegCompleteHandler:	
  5369                           ; 1 bytes @ 0x17
  5370                           
  5371  0054                     ?_wr2RegCompleteHandler:	
  5372                           ; 1 bytes @ 0x17
  5373                           
  5374  0054                     ?_rdBlkRegCompleteHandler:	
  5375                           ; 1 bytes @ 0x17
  5376                           
  5377  0054                     ?_I2C_CallbackReturnStop:	
  5378                           ; 1 bytes @ 0x17
  5379                           
  5380  0054                     ?_I2C_CallbackReturnReset:	
  5381                           ; 1 bytes @ 0x17
  5382                           
  5383  0054                     rd1RegCompleteHandler@ptr:	
  5384                           ; 1 bytes @ 0x17
  5385                           
  5386  0054                     rd2RegCompleteHandler@ptr:	
  5387                           ; 1 bytes @ 0x17
  5388                           
  5389  0054                     wr1RegCompleteHandler@ptr:	
  5390                           ; 1 bytes @ 0x17
  5391                           
  5392  0054                     wr2RegCompleteHandler@ptr:	
  5393                           ; 1 bytes @ 0x17
  5394                           
  5395  0054                     rdBlkRegCompleteHandler@ptr:	
  5396                           ; 1 bytes @ 0x17
  5397                           
  5398  0054                     I2C_CallbackReturnStop@funPtr:	
  5399                           ; 1 bytes @ 0x17
  5400                           
  5401  0054                     I2C_CallbackReturnReset@funPtr:	
  5402                           ; 1 bytes @ 0x17
  5403                           
  5404                           
  5405                           ; 1 bytes @ 0x17
  5406  0054                     	ds	1
  5407  0055                     ??_rd1RegCompleteHandler:	
  5408  0055                     ??_rd2RegCompleteHandler:	
  5409                           ; 1 bytes @ 0x18
  5410                           
  5411  0055                     ??_wr1RegCompleteHandler:	
  5412                           ; 1 bytes @ 0x18
  5413                           
  5414  0055                     ??_wr2RegCompleteHandler:	
  5415                           ; 1 bytes @ 0x18
  5416                           
  5417  0055                     ??_rdBlkRegCompleteHandler:	
  5418                           ; 1 bytes @ 0x18
  5419                           
  5420  0055                     ??_I2C_DO_TX:	
  5421                           ; 1 bytes @ 0x18
  5422                           
  5423  0055                     ??_I2C_DO_RX:	
  5424                           ; 1 bytes @ 0x18
  5425                           
  5426  0055                     ??_I2C_DO_TX_EMPTY:	
  5427                           ; 1 bytes @ 0x18
  5428                           
  5429  0055                     ??_I2C_DO_ADDRESS_NACK:	
  5430                           ; 1 bytes @ 0x18
  5431                           
  5432  0055                     ??_I2C_CallbackReturnStop:	
  5433                           ; 1 bytes @ 0x18
  5434                           
  5435  0055                     ??_I2C_CallbackReturnReset:	
  5436                           ; 1 bytes @ 0x18
  5437                           
  5438                           
  5439                           ; 1 bytes @ 0x18
  5440  0055                     	ds	1
  5441  0056                     ??_I2C_Poller:	
  5442  0056                     ??_I2C_MasterOperation:	
  5443                           ; 1 bytes @ 0x19
  5444                           
  5445                           
  5446                           ; 1 bytes @ 0x19
  5447  0056                     	ds	1
  5448  0057                     ??_I2C_MasterWrite:	
  5449                           
  5450                           	psect	maintext
  5451  01AB                     __pmaintext:	
  5452                           ; 1 bytes @ 0x1A
  5453 ;;
  5454 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  5455 ;;
  5456 ;; *************** function _main *****************
  5457 ;; Defined at:
  5458 ;;		line 175 in file "main.c"
  5459 ;; Parameters:    Size  Location     Type
  5460 ;;		None
  5461 ;; Auto vars:     Size  Location     Type
  5462 ;;		None
  5463 ;; Return value:  Size  Location     Type
  5464 ;;                  1    wreg      void 
  5465 ;; Registers used:
  5466 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5467 ;; Tracked objects:
  5468 ;;		On entry : B1F/0
  5469 ;;		On exit  : 0/0
  5470 ;;		Unchanged: 0/0
  5471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5474 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5475 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5476 ;;Total ram usage:        2 bytes
  5477 ;; Hardware stack levels required when called:   22
  5478 ;; This function calls:
  5479 ;;		_EUSART_SetRxInterruptHandler
  5480 ;;		_I2C_Write1ByteRegister
  5481 ;;		_SYSTEM_Initialize
  5482 ;;		_TMR2_SetInterruptHandler
  5483 ;;		_TMR2_StartTimer
  5484 ;;		_TMR2_WriteTimer
  5485 ;; This function is called by:
  5486 ;;		Startup code after reset
  5487 ;; This function uses a non-reentrant model
  5488 ;;
  5489                           
  5490                           
  5491                           ;psect for function _main
  5492  01AB                     _main:	
  5493                           
  5494                           ;main.c: 176: SYSTEM_Initialize();
  5495                           
  5496                           ;incstack = 0
  5497 ;; hardware stack exceeded
  5498                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5499  01AB  3187  275F  3181   	fcall	_SYSTEM_Initialize
  5500                           
  5501                           ;main.c: 178: do { LATCbits.LATC5 = 1; } while(0);
  5502  01AE  0022               	movlb	2	; select bank2
  5503  01AF  168E               	bsf	14,5	;volatile
  5504                           
  5505                           ;main.c: 179: do { LATAbits.LATA5 = 1; } while(0);
  5506  01B0  168C               	bsf	12,5	;volatile
  5507                           
  5508                           ;main.c: 182: I2C_Write1ByteRegister(0x68, 0x26, 0x02);
  5509  01B1  3026               	movlw	38
  5510  01B2  0021               	movlb	1	; select bank1
  5511  01B3  00C8               	movwf	??_main^(0+128)
  5512  01B4  0848               	movf	??_main^(0+128),w
  5513  01B5  00C4               	movwf	I2C_Write1ByteRegister@reg^(0+128)
  5514  01B6  3002               	movlw	2
  5515  01B7  00C9               	movwf	(??_main+1)^(0+128)
  5516  01B8  0849               	movf	(??_main+1)^(0+128),w
  5517  01B9  00C5               	movwf	I2C_Write1ByteRegister@data^(0+128)
  5518  01BA  3068               	movlw	104
  5519  01BB  3184  244A  3181   	fcall	_I2C_Write1ByteRegister
  5520                           
  5521                           ;main.c: 183: I2C_Write1ByteRegister(0x68, 0x27, 0x10);
  5522  01BE  3027               	movlw	39
  5523  01BF  0021               	movlb	1	; select bank1
  5524  01C0  00C8               	movwf	??_main^(0+128)
  5525  01C1  0848               	movf	??_main^(0+128),w
  5526  01C2  00C4               	movwf	I2C_Write1ByteRegister@reg^(0+128)
  5527  01C3  3010               	movlw	16
  5528  01C4  00C9               	movwf	(??_main+1)^(0+128)
  5529  01C5  0849               	movf	(??_main+1)^(0+128),w
  5530  01C6  00C5               	movwf	I2C_Write1ByteRegister@data^(0+128)
  5531  01C7  3068               	movlw	104
  5532  01C8  3184  244A  3181   	fcall	_I2C_Write1ByteRegister
  5533                           
  5534                           ;main.c: 186: TMR2_SetInterruptHandler(MyTimer2ISR);
  5535  01CB  300B               	movlw	low _MyTimer2ISR
  5536  01CC  0020               	movlb	0	; select bank0
  5537  01CD  00CB               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  5538  01CE  3001               	movlw	high _MyTimer2ISR
  5539  01CF  00CC               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  5540  01D0  318E  26CB  3181   	fcall	_TMR2_SetInterruptHandler
  5541                           
  5542                           ;main.c: 187: TMR2_WriteTimer(255);
  5543  01D3  30FF               	movlw	255
  5544  01D4  318E  26D1  3181   	fcall	_TMR2_WriteTimer
  5545                           
  5546                           ;main.c: 188: TMR2_StartTimer();
  5547  01D7  318E  2636  3181   	fcall	_TMR2_StartTimer
  5548                           
  5549                           ;main.c: 190: EUSART_SetRxInterruptHandler(MyUART_ISR);
  5550  01DA  3059               	movlw	low _MyUART_ISR
  5551  01DB  0020               	movlb	0	; select bank0
  5552  01DC  00CB               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  5553  01DD  3000               	movlw	high _MyUART_ISR
  5554  01DE  00CC               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  5555  01DF  318E  26C5  3181   	fcall	_EUSART_SetRxInterruptHandler
  5556                           
  5557                           ;main.c: 192: (INTCONbits.PEIE = 1);
  5558  01E2  170B               	bsf	11,6	;volatile
  5559                           
  5560                           ;main.c: 193: (INTCONbits.GIE = 1);
  5561  01E3  178B               	bsf	11,7	;volatile
  5562  01E4  2A15               	goto	l6465
  5563  01E5                     l6467:	
  5564                           
  5565                           ;main.c: 197: if(Validation) {
  5566  01E5  0861               	movf	_Validation,w
  5567  01E6  1903               	btfsc	3,2
  5568  01E7  2A01               	goto	l6473
  5569                           
  5570                           ;main.c: 198: do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  5571  01E8  1003               	clrc
  5572  01E9  0022               	movlb	2	; select bank2
  5573  01EA  1E8C               	btfss	12,5	;volatile
  5574  01EB  1403               	setc
  5575  01EC  1C03               	btfss	3,0
  5576  01ED  29F1               	goto	u4310
  5577  01EE  0022               	movlb	2	; select bank2
  5578  01EF  168C               	bsf	12,5	;volatile
  5579  01F0  29F3               	goto	l6471
  5580  01F1                     u4310:	
  5581  01F1  0022               	movlb	2	; select bank2
  5582  01F2  128C               	bcf	12,5	;volatile
  5583  01F3                     l6471:	
  5584                           
  5585                           ;main.c: 199: _delay((unsigned long)((500)*(4000000/4000.0)));
  5586  01F3  3003               	movlw	3
  5587  01F4  0021               	movlb	1	; select bank1
  5588  01F5  00C9               	movwf	(??_main^(0+128)+1)
  5589  01F6  308A               	movlw	138
  5590  01F7  00C8               	movwf	??_main^(0+128)
  5591  01F8  3055               	movlw	85
  5592  01F9                     u4357:	
  5593  01F9  0B89               	decfsz	9,f
  5594  01FA  29F9               	goto	u4357
  5595  01FB  0BC8               	decfsz	??_main^(0+128),f
  5596  01FC  29F9               	goto	u4357
  5597  01FD  0BC9               	decfsz	(??_main^(0+128)+1),f
  5598  01FE  29F9               	goto	u4357
  5599  01FF  3200               	nop2
  5600                           
  5601                           ;main.c: 200: } else {
  5602  0200  2A15               	goto	l6465
  5603  0201                     l6473:	
  5604                           ;main.c: 201: do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  5605                           
  5606  0201  1003               	clrc
  5607  0202  0022               	movlb	2	; select bank2
  5608  0203  1E8C               	btfss	12,5	;volatile
  5609  0204  1403               	setc
  5610  0205  1C03               	btfss	3,0
  5611  0206  2A0A               	goto	u4330
  5612  0207  0022               	movlb	2	; select bank2
  5613  0208  168C               	bsf	12,5	;volatile
  5614  0209  2A0C               	goto	l6475
  5615  020A                     u4330:	
  5616  020A  0022               	movlb	2	; select bank2
  5617  020B  128C               	bcf	12,5	;volatile
  5618  020C                     l6475:	
  5619                           
  5620                           ;main.c: 202: _delay((unsigned long)((100)*(4000000/4000.0)));
  5621  020C  3082               	movlw	130
  5622  020D  0021               	movlb	1	; select bank1
  5623  020E  00C8               	movwf	??_main^(0+128)
  5624  020F  30DD               	movlw	221
  5625  0210                     u4367:	
  5626  0210  0B89               	decfsz	9,f
  5627  0211  2A10               	goto	u4367
  5628  0212  0BC8               	decfsz	??_main^(0+128),f
  5629  0213  2A10               	goto	u4367
  5630  0214  3200               	nop2
  5631  0215                     l6465:	
  5632                           ;main.c: 195: while (1) {
  5633                           
  5634                           ;main.c: 203: }
  5635                           ;main.c: 204: } else {
  5636                           
  5637                           
  5638                           ;main.c: 196: if(PORTAbits.RA4) {
  5639  0215  0020               	movlb	0	; select bank0
  5640  0216  1A0C               	btfsc	12,4	;volatile
  5641  0217  29E5               	goto	l6467
  5642                           
  5643                           ;main.c: 205: do { LATAbits.LATA5 = 1; } while(0);
  5644  0218  0022               	movlb	2	; select bank2
  5645  0219  168C               	bsf	12,5	;volatile
  5646  021A  2A15               	goto	l6465
  5647  021B                     __end_of_main:	
  5648                           
  5649                           	psect	text1
  5650  0ED1                     __ptext1:	
  5651 ;; *************** function _TMR2_WriteTimer *****************
  5652 ;; Defined at:
  5653 ;;		line 150 in file "mcc_generated_files/tmr2.c"
  5654 ;; Parameters:    Size  Location     Type
  5655 ;;  timerVal        1    wreg     unsigned char 
  5656 ;; Auto vars:     Size  Location     Type
  5657 ;;  timerVal        1   15[BANK0 ] unsigned char 
  5658 ;; Return value:  Size  Location     Type
  5659 ;;                  1    wreg      void 
  5660 ;; Registers used:
  5661 ;;		wreg, status,2, status,0, pclath, cstack
  5662 ;; Tracked objects:
  5663 ;;		On entry : 0/0
  5664 ;;		On exit  : 0/0
  5665 ;;		Unchanged: 0/0
  5666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5668 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5670 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5671 ;;Total ram usage:        1 bytes
  5672 ;; Hardware stack levels used:    1
  5673 ;; Hardware stack levels required when called:   14
  5674 ;; This function calls:
  5675 ;;		_TMR2_Counter8BitSet
  5676 ;; This function is called by:
  5677 ;;		_main
  5678 ;; This function uses a non-reentrant model
  5679 ;;
  5680                           
  5681                           
  5682                           ;psect for function _TMR2_WriteTimer
  5683  0ED1                     _TMR2_WriteTimer:	
  5684                           
  5685                           ;incstack = 0
  5686                           ; Regs used in _TMR2_WriteTimer: [wreg+status,2+status,0+pclath+cstack]
  5687                           ;TMR2_WriteTimer@timerVal stored from wreg
  5688  0ED1  0020               	movlb	0	; select bank0
  5689  0ED2  00CC               	movwf	TMR2_WriteTimer@timerVal
  5690                           
  5691                           ;tmr2.c: 152: TMR2_Counter8BitSet(timerVal);
  5692  0ED3  084C               	movf	TMR2_WriteTimer@timerVal,w
  5693  0ED4  318E  2690         	fcall	_TMR2_Counter8BitSet
  5694  0ED6  0008               	return
  5695  0ED7                     __end_of_TMR2_WriteTimer:	
  5696                           
  5697                           	psect	text2
  5698  0E90                     __ptext2:	
  5699 ;; *************** function _TMR2_Counter8BitSet *****************
  5700 ;; Defined at:
  5701 ;;		line 144 in file "mcc_generated_files/tmr2.c"
  5702 ;; Parameters:    Size  Location     Type
  5703 ;;  timerVal        1    wreg     unsigned char 
  5704 ;; Auto vars:     Size  Location     Type
  5705 ;;  timerVal        1   14[BANK0 ] unsigned char 
  5706 ;; Return value:  Size  Location     Type
  5707 ;;                  1    wreg      void 
  5708 ;; Registers used:
  5709 ;;		wreg
  5710 ;; Tracked objects:
  5711 ;;		On entry : 0/0
  5712 ;;		On exit  : 0/0
  5713 ;;		Unchanged: 0/0
  5714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5716 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5718 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5719 ;;Total ram usage:        1 bytes
  5720 ;; Hardware stack levels used:    1
  5721 ;; Hardware stack levels required when called:   13
  5722 ;; This function calls:
  5723 ;;		Nothing
  5724 ;; This function is called by:
  5725 ;;		_TMR2_WriteTimer
  5726 ;; This function uses a non-reentrant model
  5727 ;;
  5728                           
  5729                           
  5730                           ;psect for function _TMR2_Counter8BitSet
  5731  0E90                     _TMR2_Counter8BitSet:	
  5732                           
  5733                           ;incstack = 0
  5734                           ; Regs used in _TMR2_Counter8BitSet: [wreg]
  5735                           ;TMR2_Counter8BitSet@timerVal stored from wreg
  5736  0E90  0020               	movlb	0	; select bank0
  5737  0E91  00CB               	movwf	TMR2_Counter8BitSet@timerVal
  5738                           
  5739                           ;tmr2.c: 147: TMR2 = timerVal;
  5740  0E92  084B               	movf	TMR2_Counter8BitSet@timerVal,w
  5741  0E93  009A               	movwf	26	;volatile
  5742  0E94  0008               	return
  5743  0E95                     __end_of_TMR2_Counter8BitSet:	
  5744                           
  5745                           	psect	text3
  5746  0E36                     __ptext3:	
  5747 ;; *************** function _TMR2_StartTimer *****************
  5748 ;; Defined at:
  5749 ;;		line 114 in file "mcc_generated_files/tmr2.c"
  5750 ;; Parameters:    Size  Location     Type
  5751 ;;		None
  5752 ;; Auto vars:     Size  Location     Type
  5753 ;;		None
  5754 ;; Return value:  Size  Location     Type
  5755 ;;                  1    wreg      void 
  5756 ;; Registers used:
  5757 ;;		status,2, status,0, pclath, cstack
  5758 ;; Tracked objects:
  5759 ;;		On entry : 0/0
  5760 ;;		On exit  : 0/0
  5761 ;;		Unchanged: 0/0
  5762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5767 ;;Total ram usage:        0 bytes
  5768 ;; Hardware stack levels used:    1
  5769 ;; Hardware stack levels required when called:   14
  5770 ;; This function calls:
  5771 ;;		_TMR2_Start
  5772 ;; This function is called by:
  5773 ;;		_main
  5774 ;; This function uses a non-reentrant model
  5775 ;;
  5776                           
  5777                           
  5778                           ;psect for function _TMR2_StartTimer
  5779  0E36                     _TMR2_StartTimer:	
  5780                           
  5781                           ;tmr2.c: 116: TMR2_Start();
  5782                           
  5783                           ;incstack = 0
  5784                           ; Regs used in _TMR2_StartTimer: [status,2+status,0+pclath+cstack]
  5785  0E36  318E  2633         	fcall	_TMR2_Start
  5786  0E38  0008               	return
  5787  0E39                     __end_of_TMR2_StartTimer:	
  5788                           
  5789                           	psect	text4
  5790  0E33                     __ptext4:	
  5791 ;; *************** function _TMR2_Start *****************
  5792 ;; Defined at:
  5793 ;;		line 108 in file "mcc_generated_files/tmr2.c"
  5794 ;; Parameters:    Size  Location     Type
  5795 ;;		None
  5796 ;; Auto vars:     Size  Location     Type
  5797 ;;		None
  5798 ;; Return value:  Size  Location     Type
  5799 ;;                  1    wreg      void 
  5800 ;; Registers used:
  5801 ;;		None
  5802 ;; Tracked objects:
  5803 ;;		On entry : 0/0
  5804 ;;		On exit  : 0/0
  5805 ;;		Unchanged: 0/0
  5806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5811 ;;Total ram usage:        0 bytes
  5812 ;; Hardware stack levels used:    1
  5813 ;; Hardware stack levels required when called:   13
  5814 ;; This function calls:
  5815 ;;		Nothing
  5816 ;; This function is called by:
  5817 ;;		_TMR2_StartTimer
  5818 ;; This function uses a non-reentrant model
  5819 ;;
  5820                           
  5821                           
  5822                           ;psect for function _TMR2_Start
  5823  0E33                     _TMR2_Start:	
  5824                           
  5825                           ;tmr2.c: 111: T2CONbits.TMR2ON = 1;
  5826                           
  5827                           ;incstack = 0
  5828                           ; Regs used in _TMR2_Start: []
  5829  0E33  0020               	movlb	0	; select bank0
  5830  0E34  179C               	bsf	28,7	;volatile
  5831  0E35  0008               	return
  5832  0E36                     __end_of_TMR2_Start:	
  5833                           
  5834                           	psect	text5
  5835  075F                     __ptext5:	
  5836 ;; *************** function _SYSTEM_Initialize *****************
  5837 ;; Defined at:
  5838 ;;		line 50 in file "mcc_generated_files/mcc.c"
  5839 ;; Parameters:    Size  Location     Type
  5840 ;;		None
  5841 ;; Auto vars:     Size  Location     Type
  5842 ;;		None
  5843 ;; Return value:  Size  Location     Type
  5844 ;;                  1    wreg      void 
  5845 ;; Registers used:
  5846 ;;		wreg, status,2, status,0, pclath, cstack
  5847 ;; Tracked objects:
  5848 ;;		On entry : 0/0
  5849 ;;		On exit  : 0/0
  5850 ;;		Unchanged: 0/0
  5851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5855 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5856 ;;Total ram usage:        0 bytes
  5857 ;; Hardware stack levels used:    1
  5858 ;; Hardware stack levels required when called:   15
  5859 ;; This function calls:
  5860 ;;		_EUSART_Initialize
  5861 ;;		_I2C_Initialize
  5862 ;;		_MATHACC_Initialize
  5863 ;;		_OSCILLATOR_Initialize
  5864 ;;		_PIN_MANAGER_Initialize
  5865 ;;		_PWM3_Initialize
  5866 ;;		_TMR2_Initialize
  5867 ;; This function is called by:
  5868 ;;		_main
  5869 ;; This function uses a non-reentrant model
  5870 ;;
  5871                           
  5872                           
  5873                           ;psect for function _SYSTEM_Initialize
  5874  075F                     _SYSTEM_Initialize:	
  5875                           
  5876                           ;mcc.c: 52: I2C_Initialize();
  5877                           
  5878                           ;incstack = 0
  5879                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5880  075F  318F  277F  3187   	fcall	_I2C_Initialize
  5881                           
  5882                           ;mcc.c: 53: PIN_MANAGER_Initialize();
  5883  0762  3183  2337  3187   	fcall	_PIN_MANAGER_Initialize
  5884                           
  5885                           ;mcc.c: 54: OSCILLATOR_Initialize();
  5886  0765  318E  26E4  3187   	fcall	_OSCILLATOR_Initialize
  5887                           
  5888                           ;mcc.c: 55: PWM3_Initialize();
  5889  0768  318F  279F  3187   	fcall	_PWM3_Initialize
  5890                           
  5891                           ;mcc.c: 56: TMR2_Initialize();
  5892  076B  3187  2774  3187   	fcall	_TMR2_Initialize
  5893                           
  5894                           ;mcc.c: 57: MATHACC_Initialize();
  5895  076E  3187  279E  3187   	fcall	_MATHACC_Initialize
  5896                           
  5897                           ;mcc.c: 58: EUSART_Initialize();
  5898  0771  3184  2417         	fcall	_EUSART_Initialize
  5899  0773  0008               	return
  5900  0774                     __end_of_SYSTEM_Initialize:	
  5901                           
  5902                           	psect	text6
  5903  0774                     __ptext6:	
  5904 ;; *************** function _TMR2_Initialize *****************
  5905 ;; Defined at:
  5906 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  5907 ;; Parameters:    Size  Location     Type
  5908 ;;		None
  5909 ;; Auto vars:     Size  Location     Type
  5910 ;;		None
  5911 ;; Return value:  Size  Location     Type
  5912 ;;                  1    wreg      void 
  5913 ;; Registers used:
  5914 ;;		wreg, status,2, status,0, pclath, cstack
  5915 ;; Tracked objects:
  5916 ;;		On entry : 0/0
  5917 ;;		On exit  : 0/0
  5918 ;;		Unchanged: 0/0
  5919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5923 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5924 ;;Total ram usage:        0 bytes
  5925 ;; Hardware stack levels used:    1
  5926 ;; Hardware stack levels required when called:   14
  5927 ;; This function calls:
  5928 ;;		_TMR2_SetInterruptHandler
  5929 ;; This function is called by:
  5930 ;;		_SYSTEM_Initialize
  5931 ;; This function uses a non-reentrant model
  5932 ;;
  5933                           
  5934                           
  5935                           ;psect for function _TMR2_Initialize
  5936  0774                     _TMR2_Initialize:	
  5937                           
  5938                           ;tmr2.c: 69: T2CLKCON = 0x00;
  5939                           
  5940                           ;incstack = 0
  5941                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5942  0774  0020               	movlb	0	; select bank0
  5943  0775  019E               	clrf	30	;volatile
  5944                           
  5945                           ;tmr2.c: 72: T2HLT = 0x00;
  5946  0776  019D               	clrf	29	;volatile
  5947                           
  5948                           ;tmr2.c: 75: T2RST = 0x00;
  5949  0777  019F               	clrf	31	;volatile
  5950                           
  5951                           ;tmr2.c: 78: T2PR = 0x9B;
  5952  0778  309B               	movlw	155
  5953  0779  009B               	movwf	27	;volatile
  5954                           
  5955                           ;tmr2.c: 81: T2TMR = 0x00;
  5956  077A  019A               	clrf	26	;volatile
  5957                           
  5958                           ;tmr2.c: 84: PIR1bits.TMR2IF = 0;
  5959  077B  1090               	bcf	16,1	;volatile
  5960                           
  5961                           ;tmr2.c: 87: PIE1bits.TMR2IE = 1;
  5962  077C  0021               	movlb	1	; select bank1
  5963  077D  1490               	bsf	16,1	;volatile
  5964                           
  5965                           ;tmr2.c: 90: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
  5966  077E  30F4               	movlw	low _TMR2_DefaultInterruptHandler
  5967  077F  0020               	movlb	0	; select bank0
  5968  0780  00CB               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  5969  0781  300D               	movlw	high _TMR2_DefaultInterruptHandler
  5970  0782  00CC               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  5971  0783  318E  26CB         	fcall	_TMR2_SetInterruptHandler
  5972                           
  5973                           ;tmr2.c: 93: T2CON = 0xF0;
  5974  0785  30F0               	movlw	240
  5975  0786  0020               	movlb	0	; select bank0
  5976  0787  009C               	movwf	28	;volatile
  5977  0788  0008               	return
  5978  0789                     __end_of_TMR2_Initialize:	
  5979                           
  5980                           	psect	text7
  5981  0ECB                     __ptext7:	
  5982 ;; *************** function _TMR2_SetInterruptHandler *****************
  5983 ;; Defined at:
  5984 ;;		line 186 in file "mcc_generated_files/tmr2.c"
  5985 ;; Parameters:    Size  Location     Type
  5986 ;;  InterruptHan    2   14[BANK0 ] PTR FTN()void 
  5987 ;;		 -> MyTimer2ISR(1), TMR2_DefaultInterruptHandler(1), 
  5988 ;; Auto vars:     Size  Location     Type
  5989 ;;		None
  5990 ;; Return value:  Size  Location     Type
  5991 ;;                  1    wreg      void 
  5992 ;; Registers used:
  5993 ;;		wreg
  5994 ;; Tracked objects:
  5995 ;;		On entry : 0/0
  5996 ;;		On exit  : 0/0
  5997 ;;		Unchanged: 0/0
  5998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5999 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6002 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6003 ;;Total ram usage:        2 bytes
  6004 ;; Hardware stack levels used:    1
  6005 ;; Hardware stack levels required when called:   13
  6006 ;; This function calls:
  6007 ;;		Nothing
  6008 ;; This function is called by:
  6009 ;;		_TMR2_Initialize
  6010 ;;		_main
  6011 ;; This function uses a non-reentrant model
  6012 ;;
  6013                           
  6014                           
  6015                           ;psect for function _TMR2_SetInterruptHandler
  6016  0ECB                     _TMR2_SetInterruptHandler:	
  6017                           
  6018                           ;tmr2.c: 187: TMR2_InterruptHandler = InterruptHandler;
  6019                           
  6020                           ;incstack = 0
  6021                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  6022  0ECB  0020               	movlb	0	; select bank0
  6023  0ECC  084C               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  6024  0ECD  00D8               	movwf	_TMR2_InterruptHandler+1
  6025  0ECE  084B               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  6026  0ECF  00D7               	movwf	_TMR2_InterruptHandler
  6027  0ED0  0008               	return
  6028  0ED1                     __end_of_TMR2_SetInterruptHandler:	
  6029                           
  6030                           	psect	text8
  6031  0F9F                     __ptext8:	
  6032 ;; *************** function _PWM3_Initialize *****************
  6033 ;; Defined at:
  6034 ;;		line 58 in file "mcc_generated_files/pwm3.c"
  6035 ;; Parameters:    Size  Location     Type
  6036 ;;		None
  6037 ;; Auto vars:     Size  Location     Type
  6038 ;;		None
  6039 ;; Return value:  Size  Location     Type
  6040 ;;                  1    wreg      void 
  6041 ;; Registers used:
  6042 ;;		wreg, status,2, status,0
  6043 ;; Tracked objects:
  6044 ;;		On entry : 0/0
  6045 ;;		On exit  : 0/0
  6046 ;;		Unchanged: 0/0
  6047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6052 ;;Total ram usage:        0 bytes
  6053 ;; Hardware stack levels used:    1
  6054 ;; Hardware stack levels required when called:   13
  6055 ;; This function calls:
  6056 ;;		Nothing
  6057 ;; This function is called by:
  6058 ;;		_SYSTEM_Initialize
  6059 ;; This function uses a non-reentrant model
  6060 ;;
  6061                           
  6062                           
  6063                           ;psect for function _PWM3_Initialize
  6064  0F9F                     _PWM3_Initialize:	
  6065                           
  6066                           ;pwm3.c: 62: PWM3CON = 0x80;
  6067                           
  6068                           ;incstack = 0
  6069                           ; Regs used in _PWM3_Initialize: [wreg+status,2+status,0]
  6070  0F9F  3080               	movlw	128
  6071  0FA0  002C               	movlb	12	; select bank12
  6072  0FA1  0099               	movwf	25	;volatile
  6073                           
  6074                           ;pwm3.c: 65: PWM3DCH = 0x0F;
  6075  0FA2  300F               	movlw	15
  6076  0FA3  0098               	movwf	24	;volatile
  6077                           
  6078                           ;pwm3.c: 68: PWM3DCL = 0x40;
  6079  0FA4  3040               	movlw	64
  6080  0FA5  0097               	movwf	23	;volatile
  6081                           
  6082                           ;pwm3.c: 71: CCPTMRSbits.P3TSEL = 0;
  6083  0FA6  30CF               	movlw	-49
  6084  0FA7  0025               	movlb	5	; select bank5
  6085  0FA8  059E               	andwf	30,f	;volatile
  6086  0FA9  0008               	return
  6087  0FAA                     __end_of_PWM3_Initialize:	
  6088                           
  6089                           	psect	text9
  6090  0337                     __ptext9:	
  6091 ;; *************** function _PIN_MANAGER_Initialize *****************
  6092 ;; Defined at:
  6093 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  6094 ;; Parameters:    Size  Location     Type
  6095 ;;		None
  6096 ;; Auto vars:     Size  Location     Type
  6097 ;;		None
  6098 ;; Return value:  Size  Location     Type
  6099 ;;                  1    wreg      void 
  6100 ;; Registers used:
  6101 ;;		wreg, status,2
  6102 ;; Tracked objects:
  6103 ;;		On entry : 0/0
  6104 ;;		On exit  : 0/0
  6105 ;;		Unchanged: 0/0
  6106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6111 ;;Total ram usage:        0 bytes
  6112 ;; Hardware stack levels used:    1
  6113 ;; Hardware stack levels required when called:   13
  6114 ;; This function calls:
  6115 ;;		Nothing
  6116 ;; This function is called by:
  6117 ;;		_SYSTEM_Initialize
  6118 ;; This function uses a non-reentrant model
  6119 ;;
  6120                           
  6121                           
  6122                           ;psect for function _PIN_MANAGER_Initialize
  6123  0337                     _PIN_MANAGER_Initialize:	
  6124                           
  6125                           ;pin_manager.c: 60: LATA = 0x00;
  6126                           
  6127                           ;incstack = 0
  6128                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6129  0337  0022               	movlb	2	; select bank2
  6130  0338  018C               	clrf	12	;volatile
  6131                           
  6132                           ;pin_manager.c: 61: LATB = 0x00;
  6133  0339  018D               	clrf	13	;volatile
  6134                           
  6135                           ;pin_manager.c: 62: LATC = 0x00;
  6136  033A  018E               	clrf	14	;volatile
  6137                           
  6138                           ;pin_manager.c: 67: TRISA = 0x13;
  6139  033B  3013               	movlw	19
  6140  033C  0021               	movlb	1	; select bank1
  6141  033D  008C               	movwf	12	;volatile
  6142                           
  6143                           ;pin_manager.c: 68: TRISB = 0x70;
  6144  033E  3070               	movlw	112
  6145  033F  008D               	movwf	13	;volatile
  6146                           
  6147                           ;pin_manager.c: 69: TRISC = 0x1F;
  6148  0340  301F               	movlw	31
  6149  0341  008E               	movwf	14	;volatile
  6150                           
  6151                           ;pin_manager.c: 74: ANSELC = 0x0E;
  6152  0342  300E               	movlw	14
  6153  0343  0023               	movlb	3	; select bank3
  6154  0344  008E               	movwf	14	;volatile
  6155                           
  6156                           ;pin_manager.c: 75: ANSELB = 0x00;
  6157  0345  018D               	clrf	13	;volatile
  6158                           
  6159                           ;pin_manager.c: 76: ANSELA = 0x01;
  6160  0346  3001               	movlw	1
  6161  0347  008C               	movwf	12	;volatile
  6162                           
  6163                           ;pin_manager.c: 81: WPUB = 0x00;
  6164  0348  0024               	movlb	4	; select bank4
  6165  0349  018D               	clrf	13	;volatile
  6166                           
  6167                           ;pin_manager.c: 82: WPUA = 0x00;
  6168  034A  018C               	clrf	12	;volatile
  6169                           
  6170                           ;pin_manager.c: 83: WPUC = 0x00;
  6171  034B  018E               	clrf	14	;volatile
  6172                           
  6173                           ;pin_manager.c: 84: OPTION_REGbits.nWPUEN = 1;
  6174  034C  0021               	movlb	1	; select bank1
  6175  034D  1795               	bsf	21,7	;volatile
  6176                           
  6177                           ;pin_manager.c: 89: ODCONA = 0x00;
  6178  034E  0025               	movlb	5	; select bank5
  6179  034F  018C               	clrf	12	;volatile
  6180                           
  6181                           ;pin_manager.c: 90: ODCONB = 0x00;
  6182  0350  018D               	clrf	13	;volatile
  6183                           
  6184                           ;pin_manager.c: 91: ODCONC = 0x00;
  6185  0351  018E               	clrf	14	;volatile
  6186                           
  6187                           ;pin_manager.c: 96: SLRCONA = 0x37;
  6188  0352  3037               	movlw	55
  6189  0353  0026               	movlb	6	; select bank6
  6190  0354  008C               	movwf	12	;volatile
  6191                           
  6192                           ;pin_manager.c: 97: SLRCONB = 0xF0;
  6193  0355  30F0               	movlw	240
  6194  0356  008D               	movwf	13	;volatile
  6195                           
  6196                           ;pin_manager.c: 98: SLRCONC = 0xFF;
  6197  0357  30FF               	movlw	255
  6198  0358  008E               	movwf	14	;volatile
  6199                           
  6200                           ;pin_manager.c: 103: INLVLA = 0x3F;
  6201  0359  303F               	movlw	63
  6202  035A  0027               	movlb	7	; select bank7
  6203  035B  008C               	movwf	12	;volatile
  6204                           
  6205                           ;pin_manager.c: 104: INLVLB = 0xF0;
  6206  035C  30F0               	movlw	240
  6207  035D  008D               	movwf	13	;volatile
  6208                           
  6209                           ;pin_manager.c: 105: INLVLC = 0xFF;
  6210  035E  30FF               	movlw	255
  6211  035F  008E               	movwf	14	;volatile
  6212                           
  6213                           ;pin_manager.c: 114: RXPPS = 0x0D;
  6214  0360  300D               	movlw	13
  6215  0361  003C               	movlb	28	; select bank28
  6216  0362  00A4               	movwf	36	;volatile
  6217                           
  6218                           ;pin_manager.c: 115: SSPDATPPS = 0x0C;
  6219  0363  300C               	movlw	12
  6220  0364  00A1               	movwf	33	;volatile
  6221                           
  6222                           ;pin_manager.c: 116: RB6PPS = 0x10;
  6223  0365  3010               	movlw	16
  6224  0366  003D               	movlb	29	; select bank29
  6225  0367  009E               	movwf	30	;volatile
  6226                           
  6227                           ;pin_manager.c: 117: RB7PPS = 0x12;
  6228  0368  3012               	movlw	18
  6229  0369  009F               	movwf	31	;volatile
  6230                           
  6231                           ;pin_manager.c: 118: RB4PPS = 0x11;
  6232  036A  3011               	movlw	17
  6233  036B  009C               	movwf	28	;volatile
  6234                           
  6235                           ;pin_manager.c: 119: RA2PPS = 0x0E;
  6236  036C  300E               	movlw	14
  6237  036D  0092               	movwf	18	;volatile
  6238                           
  6239                           ;pin_manager.c: 120: SSPCLKPPS = 0x0E;
  6240  036E  300E               	movlw	14
  6241  036F  003C               	movlb	28	; select bank28
  6242  0370  00A0               	movwf	32	;volatile
  6243  0371  0008               	return
  6244  0372                     __end_of_PIN_MANAGER_Initialize:	
  6245                           
  6246                           	psect	text10
  6247  0EE4                     __ptext10:	
  6248 ;; *************** function _OSCILLATOR_Initialize *****************
  6249 ;; Defined at:
  6250 ;;		line 61 in file "mcc_generated_files/mcc.c"
  6251 ;; Parameters:    Size  Location     Type
  6252 ;;		None
  6253 ;; Auto vars:     Size  Location     Type
  6254 ;;		None
  6255 ;; Return value:  Size  Location     Type
  6256 ;;                  1    wreg      void 
  6257 ;; Registers used:
  6258 ;;		wreg, status,2
  6259 ;; Tracked objects:
  6260 ;;		On entry : 0/0
  6261 ;;		On exit  : 0/0
  6262 ;;		Unchanged: 0/0
  6263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6268 ;;Total ram usage:        0 bytes
  6269 ;; Hardware stack levels used:    1
  6270 ;; Hardware stack levels required when called:   13
  6271 ;; This function calls:
  6272 ;;		Nothing
  6273 ;; This function is called by:
  6274 ;;		_SYSTEM_Initialize
  6275 ;; This function uses a non-reentrant model
  6276 ;;
  6277                           
  6278                           
  6279                           ;psect for function _OSCILLATOR_Initialize
  6280  0EE4                     _OSCILLATOR_Initialize:	
  6281                           
  6282                           ;mcc.c: 64: OSCCON = 0x6A;
  6283                           
  6284                           ;incstack = 0
  6285                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6286  0EE4  306A               	movlw	106
  6287  0EE5  0021               	movlb	1	; select bank1
  6288  0EE6  0099               	movwf	25	;volatile
  6289                           
  6290                           ;mcc.c: 66: OSCTUNE = 0x00;
  6291  0EE7  0198               	clrf	24	;volatile
  6292                           
  6293                           ;mcc.c: 68: BORCON = 0x00;
  6294  0EE8  0022               	movlb	2	; select bank2
  6295  0EE9  0196               	clrf	22	;volatile
  6296  0EEA  0008               	return
  6297  0EEB                     __end_of_OSCILLATOR_Initialize:	
  6298                           
  6299                           	psect	text11
  6300  079E                     __ptext11:	
  6301 ;; *************** function _MATHACC_Initialize *****************
  6302 ;; Defined at:
  6303 ;;		line 58 in file "mcc_generated_files/mathacc.c"
  6304 ;; Parameters:    Size  Location     Type
  6305 ;;		None
  6306 ;; Auto vars:     Size  Location     Type
  6307 ;;		None
  6308 ;; Return value:  Size  Location     Type
  6309 ;;                  1    wreg      void 
  6310 ;; Registers used:
  6311 ;;		wreg, status,2
  6312 ;; Tracked objects:
  6313 ;;		On entry : 0/0
  6314 ;;		On exit  : 0/0
  6315 ;;		Unchanged: 0/0
  6316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6321 ;;Total ram usage:        0 bytes
  6322 ;; Hardware stack levels used:    1
  6323 ;; Hardware stack levels required when called:   13
  6324 ;; This function calls:
  6325 ;;		Nothing
  6326 ;; This function is called by:
  6327 ;;		_SYSTEM_Initialize
  6328 ;; This function uses a non-reentrant model
  6329 ;;
  6330                           
  6331                           
  6332                           ;psect for function _MATHACC_Initialize
  6333  079E                     _MATHACC_Initialize:	
  6334                           
  6335                           ;mathacc.c: 62: PID1CON = 0x85;
  6336                           
  6337                           ;incstack = 0
  6338                           ; Regs used in _MATHACC_Initialize: [wreg+status,2]
  6339  079E  3085               	movlw	133
  6340  079F  002C               	movlb	12	; select bank12
  6341  07A0  0094               	movwf	20	;volatile
  6342                           
  6343                           ;mathacc.c: 65: PID1K1H = (uint8_t) ((2 & 0xFF00) >> 8);
  6344  07A1  002B               	movlb	11	; select bank11
  6345  07A2  0191               	clrf	17	;volatile
  6346                           
  6347                           ;mathacc.c: 66: PID1K1L = (uint8_t) (2 & 0x00FF);
  6348  07A3  3002               	movlw	2
  6349  07A4  0090               	movwf	16	;volatile
  6350                           
  6351                           ;mathacc.c: 67: PID1K2H = (uint8_t) ((-2 & 0xFF00) >> 8);
  6352  07A5  30FF               	movlw	255
  6353  07A6  0093               	movwf	19	;volatile
  6354                           
  6355                           ;mathacc.c: 68: PID1K2L = (uint8_t) (-2 & 0x00FF);
  6356  07A7  30FE               	movlw	254
  6357  07A8  0092               	movwf	18	;volatile
  6358                           
  6359                           ;mathacc.c: 69: PID1K3H = (uint8_t) ((0 & 0xFF00) >> 8);
  6360  07A9  0195               	clrf	21	;volatile
  6361                           
  6362                           ;mathacc.c: 70: PID1K3L = (uint8_t) (0 & 0x00FF);
  6363  07AA  0194               	clrf	20	;volatile
  6364                           
  6365                           ;mathacc.c: 72: PIR5bits.PID1DIF = 0;
  6366  07AB  0020               	movlb	0	; select bank0
  6367  07AC  1014               	bcf	20,0	;volatile
  6368                           
  6369                           ;mathacc.c: 73: PIR5bits.PID1EIF = 0;
  6370  07AD  1094               	bcf	20,1	;volatile
  6371                           
  6372                           ;mathacc.c: 74: PIE5bits.PID1DIE = 1;
  6373  07AE  0021               	movlb	1	; select bank1
  6374  07AF  1414               	bsf	20,0	;volatile
  6375                           
  6376                           ;mathacc.c: 75: PIE5bits.PID1EIE = 1;
  6377  07B0  1494               	bsf	20,1	;volatile
  6378  07B1  0008               	return
  6379  07B2                     __end_of_MATHACC_Initialize:	
  6380                           
  6381                           	psect	text12
  6382  0F7F                     __ptext12:	
  6383 ;; *************** function _I2C_Initialize *****************
  6384 ;; Defined at:
  6385 ;;		line 167 in file "mcc_generated_files/i2c_master.c"
  6386 ;; Parameters:    Size  Location     Type
  6387 ;;		None
  6388 ;; Auto vars:     Size  Location     Type
  6389 ;;		None
  6390 ;; Return value:  Size  Location     Type
  6391 ;;                  1    wreg      void 
  6392 ;; Registers used:
  6393 ;;		wreg, status,2
  6394 ;; Tracked objects:
  6395 ;;		On entry : 0/0
  6396 ;;		On exit  : 0/0
  6397 ;;		Unchanged: 0/0
  6398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6403 ;;Total ram usage:        0 bytes
  6404 ;; Hardware stack levels used:    1
  6405 ;; Hardware stack levels required when called:   13
  6406 ;; This function calls:
  6407 ;;		Nothing
  6408 ;; This function is called by:
  6409 ;;		_SYSTEM_Initialize
  6410 ;; This function uses a non-reentrant model
  6411 ;;
  6412                           
  6413                           
  6414                           ;psect for function _I2C_Initialize
  6415  0F7F                     _I2C_Initialize:	
  6416                           
  6417                           ;i2c_master.c: 169: SSP1STAT = 0x80;
  6418                           
  6419                           ;incstack = 0
  6420                           ; Regs used in _I2C_Initialize: [wreg+status,2]
  6421  0F7F  3080               	movlw	128
  6422  0F80  0024               	movlb	4	; select bank4
  6423  0F81  0094               	movwf	20	;volatile
  6424                           
  6425                           ;i2c_master.c: 170: SSP1CON1 = 0x08;
  6426  0F82  3008               	movlw	8
  6427  0F83  0095               	movwf	21	;volatile
  6428                           
  6429                           ;i2c_master.c: 171: SSP1CON2 = 0x00;
  6430  0F84  0196               	clrf	22	;volatile
  6431                           
  6432                           ;i2c_master.c: 172: SSP1ADD = 0x09;
  6433  0F85  3009               	movlw	9
  6434  0F86  0092               	movwf	18	;volatile
  6435                           
  6436                           ;i2c_master.c: 173: SSP1CON1bits.SSPEN = 0;
  6437  0F87  1295               	bcf	21,5	;volatile
  6438  0F88  0008               	return
  6439  0F89                     __end_of_I2C_Initialize:	
  6440                           
  6441                           	psect	text13
  6442  0417                     __ptext13:	
  6443 ;; *************** function _EUSART_Initialize *****************
  6444 ;; Defined at:
  6445 ;;		line 83 in file "mcc_generated_files/eusart.c"
  6446 ;; Parameters:    Size  Location     Type
  6447 ;;		None
  6448 ;; Auto vars:     Size  Location     Type
  6449 ;;		None
  6450 ;; Return value:  Size  Location     Type
  6451 ;;                  1    wreg      void 
  6452 ;; Registers used:
  6453 ;;		wreg, status,2, status,0, pclath, cstack
  6454 ;; Tracked objects:
  6455 ;;		On entry : 0/0
  6456 ;;		On exit  : 0/0
  6457 ;;		Unchanged: 0/0
  6458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6463 ;;Total ram usage:        0 bytes
  6464 ;; Hardware stack levels used:    1
  6465 ;; Hardware stack levels required when called:   14
  6466 ;; This function calls:
  6467 ;;		_EUSART_SetErrorHandler
  6468 ;;		_EUSART_SetFramingErrorHandler
  6469 ;;		_EUSART_SetOverrunErrorHandler
  6470 ;;		_EUSART_SetRxInterruptHandler
  6471 ;; This function is called by:
  6472 ;;		_SYSTEM_Initialize
  6473 ;; This function uses a non-reentrant model
  6474 ;;
  6475                           
  6476                           
  6477                           ;psect for function _EUSART_Initialize
  6478  0417                     _EUSART_Initialize:	
  6479                           
  6480                           ;eusart.c: 86: PIE1bits.RCIE = 0;
  6481                           
  6482                           ;incstack = 0
  6483                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6484  0417  0021               	movlb	1	; select bank1
  6485  0418  1290               	bcf	16,5	;volatile
  6486                           
  6487                           ;eusart.c: 87: EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  6488  0419  30E3               	movlw	low _EUSART_Receive_ISR
  6489  041A  0020               	movlb	0	; select bank0
  6490  041B  00CB               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  6491  041C  3003               	movlw	high _EUSART_Receive_ISR
  6492  041D  00CC               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  6493  041E  318E  26C5  3184   	fcall	_EUSART_SetRxInterruptHandler
  6494                           
  6495                           ;eusart.c: 91: BAUD1CON = 0x09;
  6496  0421  3009               	movlw	9
  6497  0422  0023               	movlb	3	; select bank3
  6498  0423  009F               	movwf	31	;volatile
  6499                           
  6500                           ;eusart.c: 94: RC1STA = 0x90;
  6501  0424  3090               	movlw	144
  6502  0425  009D               	movwf	29	;volatile
  6503                           
  6504                           ;eusart.c: 97: TX1STA = 0x24;
  6505  0426  3024               	movlw	36
  6506  0427  009E               	movwf	30	;volatile
  6507                           
  6508                           ;eusart.c: 100: SPBRGL = 0x67;
  6509  0428  3067               	movlw	103
  6510  0429  009B               	movwf	27	;volatile
  6511                           
  6512                           ;eusart.c: 103: SPBRGH = 0x00;
  6513  042A  019C               	clrf	28	;volatile
  6514                           
  6515                           ;eusart.c: 106: EUSART_SetFramingErrorHandler(EUSART_DefaultFramingErrorHandler);
  6516  042B  30F3               	movlw	low _EUSART_DefaultFramingErrorHandler
  6517  042C  0020               	movlb	0	; select bank0
  6518  042D  00CB               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  6519  042E  300D               	movlw	high _EUSART_DefaultFramingErrorHandler
  6520  042F  00CC               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  6521  0430  318E  26B9  3184   	fcall	_EUSART_SetFramingErrorHandler
  6522                           
  6523                           ;eusart.c: 107: EUSART_SetOverrunErrorHandler(EUSART_DefaultOverrunErrorHandler);
  6524  0433  303C               	movlw	low _EUSART_DefaultOverrunErrorHandler
  6525  0434  0020               	movlb	0	; select bank0
  6526  0435  00CB               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  6527  0436  300E               	movlw	high _EUSART_DefaultOverrunErrorHandler
  6528  0437  00CC               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  6529  0438  318E  26BF  3184   	fcall	_EUSART_SetOverrunErrorHandler
  6530                           
  6531                           ;eusart.c: 108: EUSART_SetErrorHandler(EUSART_DefaultErrorHandler);
  6532  043B  30F7               	movlw	low _EUSART_DefaultErrorHandler
  6533  043C  0020               	movlb	0	; select bank0
  6534  043D  00CB               	movwf	EUSART_SetErrorHandler@interruptHandler
  6535  043E  300D               	movlw	high _EUSART_DefaultErrorHandler
  6536  043F  00CC               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  6537  0440  318F  274E         	fcall	_EUSART_SetErrorHandler
  6538                           
  6539                           ;eusart.c: 110: eusartRxLastError.status = 0;
  6540  0442  0020               	movlb	0	; select bank0
  6541  0443  01B9               	clrf	_eusartRxLastError	;volatile
  6542                           
  6543                           ;eusart.c: 113: eusartRxHead = 0;
  6544  0444  01BC               	clrf	_eusartRxHead	;volatile
  6545                           
  6546                           ;eusart.c: 114: eusartRxTail = 0;
  6547  0445  01BB               	clrf	_eusartRxTail	;volatile
  6548                           
  6549                           ;eusart.c: 115: eusartRxCount = 0;
  6550  0446  01BA               	clrf	_eusartRxCount	;volatile
  6551                           
  6552                           ;eusart.c: 118: PIE1bits.RCIE = 1;
  6553  0447  0021               	movlb	1	; select bank1
  6554  0448  1690               	bsf	16,5	;volatile
  6555  0449  0008               	return
  6556  044A                     __end_of_EUSART_Initialize:	
  6557                           
  6558                           	psect	text14
  6559  0EC5                     __ptext14:	
  6560 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  6561 ;; Defined at:
  6562 ;;		line 234 in file "mcc_generated_files/eusart.c"
  6563 ;; Parameters:    Size  Location     Type
  6564 ;;  interruptHan    2   14[BANK0 ] PTR FTN()void 
  6565 ;;		 -> MyUART_ISR(1), EUSART_Receive_ISR(1), 
  6566 ;; Auto vars:     Size  Location     Type
  6567 ;;		None
  6568 ;; Return value:  Size  Location     Type
  6569 ;;                  1    wreg      void 
  6570 ;; Registers used:
  6571 ;;		wreg
  6572 ;; Tracked objects:
  6573 ;;		On entry : 0/0
  6574 ;;		On exit  : 0/0
  6575 ;;		Unchanged: 0/0
  6576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6577 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6580 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6581 ;;Total ram usage:        2 bytes
  6582 ;; Hardware stack levels used:    1
  6583 ;; Hardware stack levels required when called:   13
  6584 ;; This function calls:
  6585 ;;		Nothing
  6586 ;; This function is called by:
  6587 ;;		_EUSART_Initialize
  6588 ;;		_main
  6589 ;; This function uses a non-reentrant model
  6590 ;;
  6591                           
  6592                           
  6593                           ;psect for function _EUSART_SetRxInterruptHandler
  6594  0EC5                     _EUSART_SetRxInterruptHandler:	
  6595                           
  6596                           ;eusart.c: 235: EUSART_RxDefaultInterruptHandler = interruptHandler;
  6597                           
  6598                           ;incstack = 0
  6599                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  6600  0EC5  0020               	movlb	0	; select bank0
  6601  0EC6  084C               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  6602  0EC7  00DE               	movwf	_EUSART_RxDefaultInterruptHandler+1
  6603  0EC8  084B               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  6604  0EC9  00DD               	movwf	_EUSART_RxDefaultInterruptHandler
  6605  0ECA  0008               	return
  6606  0ECB                     __end_of_EUSART_SetRxInterruptHandler:	
  6607                           
  6608                           	psect	text15
  6609  0EBF                     __ptext15:	
  6610 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  6611 ;; Defined at:
  6612 ;;		line 225 in file "mcc_generated_files/eusart.c"
  6613 ;; Parameters:    Size  Location     Type
  6614 ;;  interruptHan    2   14[BANK0 ] PTR FTN()void 
  6615 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  6616 ;; Auto vars:     Size  Location     Type
  6617 ;;		None
  6618 ;; Return value:  Size  Location     Type
  6619 ;;                  1    wreg      void 
  6620 ;; Registers used:
  6621 ;;		wreg
  6622 ;; Tracked objects:
  6623 ;;		On entry : 0/0
  6624 ;;		On exit  : 0/0
  6625 ;;		Unchanged: 0/0
  6626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6627 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6630 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6631 ;;Total ram usage:        2 bytes
  6632 ;; Hardware stack levels used:    1
  6633 ;; Hardware stack levels required when called:   13
  6634 ;; This function calls:
  6635 ;;		Nothing
  6636 ;; This function is called by:
  6637 ;;		_EUSART_Initialize
  6638 ;; This function uses a non-reentrant model
  6639 ;;
  6640                           
  6641                           
  6642                           ;psect for function _EUSART_SetOverrunErrorHandler
  6643  0EBF                     _EUSART_SetOverrunErrorHandler:	
  6644                           
  6645                           ;eusart.c: 226: EUSART_OverrunErrorHandler = interruptHandler;
  6646                           
  6647                           ;incstack = 0
  6648                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  6649  0EBF  0020               	movlb	0	; select bank0
  6650  0EC0  084C               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  6651  0EC1  00DA               	movwf	_EUSART_OverrunErrorHandler+1
  6652  0EC2  084B               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  6653  0EC3  00D9               	movwf	_EUSART_OverrunErrorHandler
  6654  0EC4  0008               	return
  6655  0EC5                     __end_of_EUSART_SetOverrunErrorHandler:	
  6656                           
  6657                           	psect	text16
  6658  0EB9                     __ptext16:	
  6659 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  6660 ;; Defined at:
  6661 ;;		line 221 in file "mcc_generated_files/eusart.c"
  6662 ;; Parameters:    Size  Location     Type
  6663 ;;  interruptHan    2   14[BANK0 ] PTR FTN()void 
  6664 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  6665 ;; Auto vars:     Size  Location     Type
  6666 ;;		None
  6667 ;; Return value:  Size  Location     Type
  6668 ;;                  1    wreg      void 
  6669 ;; Registers used:
  6670 ;;		wreg
  6671 ;; Tracked objects:
  6672 ;;		On entry : 0/0
  6673 ;;		On exit  : 0/0
  6674 ;;		Unchanged: 0/0
  6675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6676 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6679 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6680 ;;Total ram usage:        2 bytes
  6681 ;; Hardware stack levels used:    1
  6682 ;; Hardware stack levels required when called:   13
  6683 ;; This function calls:
  6684 ;;		Nothing
  6685 ;; This function is called by:
  6686 ;;		_EUSART_Initialize
  6687 ;; This function uses a non-reentrant model
  6688 ;;
  6689                           
  6690                           
  6691                           ;psect for function _EUSART_SetFramingErrorHandler
  6692  0EB9                     _EUSART_SetFramingErrorHandler:	
  6693                           
  6694                           ;eusart.c: 222: EUSART_FramingErrorHandler = interruptHandler;
  6695                           
  6696                           ;incstack = 0
  6697                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  6698  0EB9  0020               	movlb	0	; select bank0
  6699  0EBA  084C               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  6700  0EBB  00DC               	movwf	_EUSART_FramingErrorHandler+1
  6701  0EBC  084B               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  6702  0EBD  00DB               	movwf	_EUSART_FramingErrorHandler
  6703  0EBE  0008               	return
  6704  0EBF                     __end_of_EUSART_SetFramingErrorHandler:	
  6705                           
  6706                           	psect	text17
  6707  0F4E                     __ptext17:	
  6708 ;; *************** function _EUSART_SetErrorHandler *****************
  6709 ;; Defined at:
  6710 ;;		line 229 in file "mcc_generated_files/eusart.c"
  6711 ;; Parameters:    Size  Location     Type
  6712 ;;  interruptHan    2   14[BANK0 ] PTR FTN()void 
  6713 ;;		 -> EUSART_DefaultErrorHandler(1), 
  6714 ;; Auto vars:     Size  Location     Type
  6715 ;;		None
  6716 ;; Return value:  Size  Location     Type
  6717 ;;                  1    wreg      void 
  6718 ;; Registers used:
  6719 ;;		wreg
  6720 ;; Tracked objects:
  6721 ;;		On entry : 0/0
  6722 ;;		On exit  : 0/0
  6723 ;;		Unchanged: 0/0
  6724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6725 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6728 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6729 ;;Total ram usage:        2 bytes
  6730 ;; Hardware stack levels used:    1
  6731 ;; Hardware stack levels required when called:   13
  6732 ;; This function calls:
  6733 ;;		Nothing
  6734 ;; This function is called by:
  6735 ;;		_EUSART_Initialize
  6736 ;; This function uses a non-reentrant model
  6737 ;;
  6738                           
  6739                           
  6740                           ;psect for function _EUSART_SetErrorHandler
  6741  0F4E                     _EUSART_SetErrorHandler:	
  6742                           
  6743                           ;eusart.c: 230: EUSART_ErrorHandler = interruptHandler;
  6744                           
  6745                           ;incstack = 0
  6746                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  6747  0F4E  0020               	movlb	0	; select bank0
  6748  0F4F  084C               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  6749  0F50  0021               	movlb	1	; select bank1
  6750  0F51  00CB               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  6751  0F52  0020               	movlb	0	; select bank0
  6752  0F53  084B               	movf	EUSART_SetErrorHandler@interruptHandler,w
  6753  0F54  0021               	movlb	1	; select bank1
  6754  0F55  00CA               	movwf	_EUSART_ErrorHandler^(0+128)
  6755  0F56  0008               	return
  6756  0F57                     __end_of_EUSART_SetErrorHandler:	
  6757                           
  6758                           	psect	text18
  6759  044A                     __ptext18:	
  6760 ;; *************** function _I2C_Write1ByteRegister *****************
  6761 ;; Defined at:
  6762 ;;		line 91 in file "mcc_generated_files/examples/i2c_master_example.c"
  6763 ;; Parameters:    Size  Location     Type
  6764 ;;  address         1    wreg     unsigned char 
  6765 ;;  reg             1    7[BANK1 ] unsigned char 
  6766 ;;  data            1    8[BANK1 ] unsigned char 
  6767 ;; Auto vars:     Size  Location     Type
  6768 ;;  address         1   10[BANK1 ] unsigned char 
  6769 ;; Return value:  Size  Location     Type
  6770 ;;                  1    wreg      void 
  6771 ;; Registers used:
  6772 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6773 ;; Tracked objects:
  6774 ;;		On entry : 0/0
  6775 ;;		On exit  : 0/0
  6776 ;;		Unchanged: 0/0
  6777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6778 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6779 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6780 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6781 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6782 ;;Total ram usage:        4 bytes
  6783 ;; Hardware stack levels used:    1
  6784 ;; Hardware stack levels required when called:   21
  6785 ;; This function calls:
  6786 ;;		_I2C_Close
  6787 ;;		_I2C_MasterWrite
  6788 ;;		_I2C_Open
  6789 ;;		_I2C_SetAddressNackCallback
  6790 ;;		_I2C_SetBuffer
  6791 ;;		_I2C_SetDataCompleteCallback
  6792 ;; This function is called by:
  6793 ;;		_main
  6794 ;; This function uses a non-reentrant model
  6795 ;;
  6796                           
  6797                           
  6798                           ;psect for function _I2C_Write1ByteRegister
  6799  044A                     _I2C_Write1ByteRegister:	
  6800                           
  6801                           ;incstack = 0
  6802 ;; hardware stack exceeded
  6803                           ; Regs used in _I2C_Write1ByteRegister: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6804                           ;I2C_Write1ByteRegister@address stored from wreg
  6805  044A  0021               	movlb	1	; select bank1
  6806  044B  00C7               	movwf	I2C_Write1ByteRegister@address^(0+128)
  6807  044C                     l6301:	
  6808                           ;i2c_master_example.c: 93: while(!I2C_Open(address));
  6809                           
  6810  044C  0021               	movlb	1	; select bank1
  6811  044D  0847               	movf	I2C_Write1ByteRegister@address^(0+128),w
  6812  044E  3182  22F9  3184   	fcall	_I2C_Open
  6813  0451  3A00               	xorlw	0
  6814  0452  1903               	skipnz
  6815  0453  2C4C               	goto	l6301
  6816                           
  6817                           ;i2c_master_example.c: 94: I2C_SetDataCompleteCallback(wr1RegCompleteHandler,&data);
  6818  0454  30F1               	movlw	low _wr1RegCompleteHandler
  6819  0455  0020               	movlb	0	; select bank0
  6820  0456  00D0               	movwf	I2C_SetDataCompleteCallback@cb
  6821  0457  3006               	movlw	high _wr1RegCompleteHandler
  6822  0458  00D1               	movwf	I2C_SetDataCompleteCallback@cb+1
  6823  0459  30C5               	movlw	(low (I2C_Write1ByteRegister@data| 0))& (0+255)
  6824  045A  0021               	movlb	1	; select bank1
  6825  045B  00C6               	movwf	??_I2C_Write1ByteRegister^(0+128)
  6826  045C  0846               	movf	??_I2C_Write1ByteRegister^(0+128),w
  6827  045D  0020               	movlb	0	; select bank0
  6828  045E  00D2               	movwf	I2C_SetDataCompleteCallback@ptr
  6829  045F  318F  27E6  3184   	fcall	_I2C_SetDataCompleteCallback
  6830                           
  6831                           ;i2c_master_example.c: 95: I2C_SetBuffer(&reg,1);
  6832  0462  3001               	movlw	1
  6833  0463  0020               	movlb	0	; select bank0
  6834  0464  00CB               	movwf	I2C_SetBuffer@bufferSize
  6835  0465  3000               	movlw	0
  6836  0466  00CC               	movwf	I2C_SetBuffer@bufferSize+1
  6837  0467  30C4               	movlw	(low (I2C_Write1ByteRegister@reg| 0))& (0+255)
  6838  0468  3187  2789  3184   	fcall	_I2C_SetBuffer
  6839                           
  6840                           ;i2c_master_example.c: 96: I2C_SetAddressNackCallback((0),(0));
  6841  046B  3000               	movlw	0
  6842  046C  0020               	movlb	0	; select bank0
  6843  046D  00D0               	movwf	I2C_SetAddressNackCallback@cb
  6844  046E  00D1               	movwf	I2C_SetAddressNackCallback@cb+1
  6845  046F  01D2               	clrf	I2C_SetAddressNackCallback@ptr
  6846  0470  318F  27F3  3184   	fcall	_I2C_SetAddressNackCallback
  6847                           
  6848                           ;i2c_master_example.c: 97: I2C_MasterWrite();
  6849  0473  318E  2678  3184   	fcall	_I2C_MasterWrite
  6850  0476                     l6311:	
  6851                           ;i2c_master_example.c: 98: while(I2C_BUSY == I2C_Close());
  6852                           
  6853  0476  3186  2635  3184   	fcall	_I2C_Close
  6854  0479  3A01               	xorlw	1
  6855  047A  1D03               	btfss	3,2
  6856  047B  0008               	return
  6857  047C  2C76               	goto	l6311
  6858  047D                     __end_of_I2C_Write1ByteRegister:	
  6859                           
  6860                           	psect	text19
  6861  0FF3                     __ptext19:	
  6862 ;; *************** function _I2C_SetAddressNackCallback *****************
  6863 ;; Defined at:
  6864 ;;		line 283 in file "mcc_generated_files/i2c_master.c"
  6865 ;; Parameters:    Size  Location     Type
  6866 ;;  cb              2   19[BANK0 ] PTR FTN(PTR void ,)enum 
  6867 ;;		 -> Absolute function(1), 
  6868 ;;  ptr             1   21[BANK0 ] PTR void 
  6869 ;;		 -> NULL(0), 
  6870 ;; Auto vars:     Size  Location     Type
  6871 ;;		None
  6872 ;; Return value:  Size  Location     Type
  6873 ;;                  1    wreg      void 
  6874 ;; Registers used:
  6875 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6876 ;; Tracked objects:
  6877 ;;		On entry : 0/0
  6878 ;;		On exit  : 0/0
  6879 ;;		Unchanged: 0/0
  6880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6881 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6883 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6884 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6885 ;;Total ram usage:        4 bytes
  6886 ;; Hardware stack levels used:    1
  6887 ;; Hardware stack levels required when called:   14
  6888 ;; This function calls:
  6889 ;;		_I2C_SetCallback
  6890 ;; This function is called by:
  6891 ;;		_I2C_Write1ByteRegister
  6892 ;;		_I2C_Read2ByteRegister
  6893 ;;		_I2C_Write2ByteRegister
  6894 ;;		_I2C_WriteNBytes
  6895 ;;		_I2C_ReadDataBlock
  6896 ;; This function uses a non-reentrant model
  6897 ;;
  6898                           
  6899                           
  6900                           ;psect for function _I2C_SetAddressNackCallback
  6901  0FF3                     _I2C_SetAddressNackCallback:	
  6902                           
  6903                           ;i2c_master.c: 285: I2C_SetCallback(I2C_ADDR_NACK, cb, ptr);
  6904                           
  6905                           ;incstack = 0
  6906                           ; Regs used in _I2C_SetAddressNackCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6907  0FF3  0020               	movlb	0	; select bank0
  6908  0FF4  0851               	movf	I2C_SetAddressNackCallback@cb+1,w
  6909  0FF5  00CC               	movwf	I2C_SetCallback@cb+1
  6910  0FF6  0850               	movf	I2C_SetAddressNackCallback@cb,w
  6911  0FF7  00CB               	movwf	I2C_SetCallback@cb
  6912  0FF8  0852               	movf	I2C_SetAddressNackCallback@ptr,w
  6913  0FF9  00D3               	movwf	??_I2C_SetAddressNackCallback
  6914  0FFA  0853               	movf	??_I2C_SetAddressNackCallback,w
  6915  0FFB  00CD               	movwf	I2C_SetCallback@ptr
  6916  0FFC  3002               	movlw	2
  6917  0FFD  3185  2584         	fcall	_I2C_SetCallback
  6918  0FFF  0008               	return
  6919  1000                     __end_of_I2C_SetAddressNackCallback:	
  6920                           
  6921                           	psect	text20
  6922  02F9                     __ptext20:	
  6923 ;; *************** function _I2C_Open *****************
  6924 ;; Defined at:
  6925 ;;		line 176 in file "mcc_generated_files/i2c_master.c"
  6926 ;; Parameters:    Size  Location     Type
  6927 ;;  address         1    wreg     unsigned char 
  6928 ;; Auto vars:     Size  Location     Type
  6929 ;;  address         1   15[BANK0 ] unsigned char 
  6930 ;;  returnValue     1   16[BANK0 ] enum E92
  6931 ;; Return value:  Size  Location     Type
  6932 ;;                  1    wreg      enum E92
  6933 ;; Registers used:
  6934 ;;		wreg, status,2, status,0, pclath, cstack
  6935 ;; Tracked objects:
  6936 ;;		On entry : 0/0
  6937 ;;		On exit  : 0/0
  6938 ;;		Unchanged: 0/0
  6939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6941 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6942 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6943 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6944 ;;Total ram usage:        3 bytes
  6945 ;; Hardware stack levels used:    1
  6946 ;; Hardware stack levels required when called:   14
  6947 ;; This function calls:
  6948 ;;		_I2C_MasterClearIrq
  6949 ;;		_I2C_MasterOpen
  6950 ;; This function is called by:
  6951 ;;		_I2C_Write1ByteRegister
  6952 ;;		_I2C_Read2ByteRegister
  6953 ;;		_I2C_Write2ByteRegister
  6954 ;;		_I2C_WriteNBytes
  6955 ;;		_I2C_ReadNBytes
  6956 ;;		_I2C_ReadDataBlock
  6957 ;; This function uses a non-reentrant model
  6958 ;;
  6959                           
  6960                           
  6961                           ;psect for function _I2C_Open
  6962  02F9                     _I2C_Open:	
  6963                           
  6964                           ;incstack = 0
  6965                           ; Regs used in _I2C_Open: [wreg+status,2+status,0+pclath+cstack]
  6966                           ;I2C_Open@address stored from wreg
  6967  02F9  0020               	movlb	0	; select bank0
  6968  02FA  00CC               	movwf	I2C_Open@address
  6969                           
  6970                           ;i2c_master.c: 178: i2c_error_t returnValue = I2C_BUSY;
  6971  02FB  01CD               	clrf	I2C_Open@returnValue
  6972  02FC  0ACD               	incf	I2C_Open@returnValue,f
  6973                           
  6974                           ;i2c_master.c: 180: if(!I2C_Status.inUse)
  6975  02FD  0021               	movlb	1	; select bank1
  6976  02FE  193C               	btfsc	(_I2C_Status^(0+128)+28),2
  6977  02FF  2B34               	goto	l335
  6978                           
  6979                           ;i2c_master.c: 181: {
  6980                           ;i2c_master.c: 182: I2C_Status.address = address;
  6981  0300  0020               	movlb	0	; select bank0
  6982  0301  084C               	movf	I2C_Open@address,w
  6983  0302  00CB               	movwf	??_I2C_Open
  6984  0303  084B               	movf	??_I2C_Open,w
  6985  0304  0021               	movlb	1	; select bank1
  6986  0305  00B6               	movwf	(_I2C_Status^(0+128)+22)
  6987                           
  6988                           ;i2c_master.c: 183: I2C_Status.busy = 0;
  6989  0306  10BC               	bcf	(_I2C_Status^(0+128)+28),1
  6990                           
  6991                           ;i2c_master.c: 184: I2C_Status.inUse = 1;
  6992  0307  153C               	bsf	(_I2C_Status^(0+128)+28),2
  6993                           
  6994                           ;i2c_master.c: 185: I2C_Status.addressNackCheck = 0;
  6995  0308  103C               	bcf	(_I2C_Status^(0+128)+28),0
  6996                           
  6997                           ;i2c_master.c: 186: I2C_Status.state = I2C_RESET;
  6998  0309  300E               	movlw	14
  6999  030A  0020               	movlb	0	; select bank0
  7000  030B  00CB               	movwf	??_I2C_Open
  7001  030C  084B               	movf	??_I2C_Open,w
  7002  030D  0021               	movlb	1	; select bank1
  7003  030E  00BA               	movwf	(_I2C_Status^(0+128)+26)
  7004                           
  7005                           ;i2c_master.c: 187: I2C_Status.time_out_value = 500;
  7006  030F  30F4               	movlw	244
  7007  0310  00B4               	movwf	(_I2C_Status^(0+128)+20)
  7008  0311  3001               	movlw	1
  7009  0312  00B5               	movwf	(_I2C_Status^(0+128)+21)
  7010                           
  7011                           ;i2c_master.c: 188: I2C_Status.bufferFree = 1;
  7012  0313  15BC               	bsf	(_I2C_Status^(0+128)+28),3
  7013                           
  7014                           ;i2c_master.c: 191: I2C_Status.callbackTable[I2C_DATA_COMPLETE]=I2C_CallbackReturnStop;
  7015  0314  30A1               	movlw	low _I2C_CallbackReturnStop
  7016  0315  00A0               	movwf	_I2C_Status^(0+128)
  7017  0316  300E               	movlw	high _I2C_CallbackReturnStop
  7018  0317  00A1               	movwf	(_I2C_Status^(0+128)+1)
  7019                           
  7020                           ;i2c_master.c: 192: I2C_Status.callbackPayload[I2C_DATA_COMPLETE] = (0);
  7021  0318  01AC               	clrf	(low ((_I2C_Status| 0+12)))^(0+128)
  7022                           
  7023                           ;i2c_master.c: 193: I2C_Status.callbackTable[I2C_WRITE_COLLISION]=I2C_CallbackReturnStop
      +                          ;
  7024  0319  30A1               	movlw	low _I2C_CallbackReturnStop
  7025  031A  00A2               	movwf	(low ((_I2C_Status| 0+2)))^(0+128)
  7026  031B  300E               	movlw	high _I2C_CallbackReturnStop
  7027  031C  00A3               	movwf	((low ((_I2C_Status| 0+2)))^(0+128)+1)
  7028                           
  7029                           ;i2c_master.c: 194: I2C_Status.callbackPayload[I2C_WRITE_COLLISION] = (0);
  7030  031D  01AD               	clrf	(low ((_I2C_Status| 0+13)))^(0+128)
  7031                           
  7032                           ;i2c_master.c: 195: I2C_Status.callbackTable[I2C_ADDR_NACK]=I2C_CallbackReturnStop;
  7033  031E  30A1               	movlw	low _I2C_CallbackReturnStop
  7034  031F  00A4               	movwf	(low ((_I2C_Status| 0+4)))^(0+128)
  7035  0320  300E               	movlw	high _I2C_CallbackReturnStop
  7036  0321  00A5               	movwf	((low ((_I2C_Status| 0+4)))^(0+128)+1)
  7037                           
  7038                           ;i2c_master.c: 196: I2C_Status.callbackPayload[I2C_ADDR_NACK] = (0);
  7039  0322  01AE               	clrf	(low ((_I2C_Status| 0+14)))^(0+128)
  7040                           
  7041                           ;i2c_master.c: 197: I2C_Status.callbackTable[I2C_DATA_NACK]=I2C_CallbackReturnStop;
  7042  0323  30A1               	movlw	low _I2C_CallbackReturnStop
  7043  0324  00A6               	movwf	(low ((_I2C_Status| 0+6)))^(0+128)
  7044  0325  300E               	movlw	high _I2C_CallbackReturnStop
  7045  0326  00A7               	movwf	((low ((_I2C_Status| 0+6)))^(0+128)+1)
  7046                           
  7047                           ;i2c_master.c: 198: I2C_Status.callbackPayload[I2C_DATA_NACK] = (0);
  7048  0327  01AF               	clrf	(low ((_I2C_Status| 0+15)))^(0+128)
  7049                           
  7050                           ;i2c_master.c: 199: I2C_Status.callbackTable[I2C_TIMEOUT]=I2C_CallbackReturnReset;
  7051  0328  30A7               	movlw	low _I2C_CallbackReturnReset
  7052  0329  00A8               	movwf	(low ((_I2C_Status| 0+8)))^(0+128)
  7053  032A  300E               	movlw	high _I2C_CallbackReturnReset
  7054  032B  00A9               	movwf	((low ((_I2C_Status| 0+8)))^(0+128)+1)
  7055                           
  7056                           ;i2c_master.c: 200: I2C_Status.callbackPayload[I2C_TIMEOUT] = (0);
  7057  032C  01B0               	clrf	(low ((_I2C_Status| 0+16)))^(0+128)
  7058                           
  7059                           ;i2c_master.c: 202: I2C_MasterClearIrq();
  7060  032D  318E  2618  3182   	fcall	_I2C_MasterClearIrq
  7061                           
  7062                           ;i2c_master.c: 203: I2C_MasterOpen();
  7063  0330  318F  27DA         	fcall	_I2C_MasterOpen
  7064                           
  7065                           ;i2c_master.c: 204: returnValue = I2C_NOERR;
  7066  0332  0020               	movlb	0	; select bank0
  7067  0333  01CD               	clrf	I2C_Open@returnValue
  7068  0334                     l335:	
  7069                           
  7070                           ;i2c_master.c: 205: }
  7071                           ;i2c_master.c: 206: return returnValue;
  7072  0334  0020               	movlb	0	; select bank0
  7073  0335  084D               	movf	I2C_Open@returnValue,w
  7074  0336  0008               	return
  7075  0337                     __end_of_I2C_Open:	
  7076                           
  7077                           	psect	text21
  7078  0FDA                     __ptext21:	
  7079 ;; *************** function _I2C_MasterOpen *****************
  7080 ;; Defined at:
  7081 ;;		line 543 in file "mcc_generated_files/i2c_master.c"
  7082 ;; Parameters:    Size  Location     Type
  7083 ;;		None
  7084 ;; Auto vars:     Size  Location     Type
  7085 ;;		None
  7086 ;; Return value:  Size  Location     Type
  7087 ;;                  1    wreg      unsigned char 
  7088 ;; Registers used:
  7089 ;;		wreg, status,2
  7090 ;; Tracked objects:
  7091 ;;		On entry : 0/0
  7092 ;;		On exit  : 0/0
  7093 ;;		Unchanged: 0/0
  7094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7098 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7099 ;;Total ram usage:        0 bytes
  7100 ;; Hardware stack levels used:    1
  7101 ;; Hardware stack levels required when called:   13
  7102 ;; This function calls:
  7103 ;;		Nothing
  7104 ;; This function is called by:
  7105 ;;		_I2C_Open
  7106 ;; This function uses a non-reentrant model
  7107 ;;
  7108                           
  7109                           
  7110                           ;psect for function _I2C_MasterOpen
  7111  0FDA                     _I2C_MasterOpen:	
  7112                           
  7113                           ;i2c_master.c: 545: if(!SSP1CON1bits.SSPEN)
  7114                           
  7115                           ;incstack = 0
  7116                           ; Regs used in _I2C_MasterOpen: [wreg+status,2]
  7117  0FDA  0024               	movlb	4	; select bank4
  7118  0FDB  1A95               	btfsc	21,5	;volatile
  7119  0FDC  0008               	return
  7120                           
  7121                           ;i2c_master.c: 546: {
  7122                           ;i2c_master.c: 547: SSP1STAT = 0x80;
  7123  0FDD  3080               	movlw	128
  7124  0FDE  0094               	movwf	20	;volatile
  7125                           
  7126                           ;i2c_master.c: 548: SSP1CON1 = 0x08;
  7127  0FDF  3008               	movlw	8
  7128  0FE0  0095               	movwf	21	;volatile
  7129                           
  7130                           ;i2c_master.c: 549: SSP1CON2 = 0x00;
  7131  0FE1  0196               	clrf	22	;volatile
  7132                           
  7133                           ;i2c_master.c: 550: SSP1ADD = 0x09;
  7134  0FE2  3009               	movlw	9
  7135  0FE3  0092               	movwf	18	;volatile
  7136                           
  7137                           ;i2c_master.c: 551: SSP1CON1bits.SSPEN = 1;
  7138  0FE4  1695               	bsf	21,5	;volatile
  7139                           
  7140                           ;i2c_master.c: 552: return 1;
  7141                           ;	Return value of _I2C_MasterOpen is never used
  7142  0FE5  0008               	return
  7143  0FE6                     __end_of_I2C_MasterOpen:	
  7144                           ;i2c_master.c: 553: }
  7145                           ;i2c_master.c: 554: return 0;
  7146                           ;	Return value of _I2C_MasterOpen is never used
  7147                           
  7148                           
  7149                           	psect	text22
  7150  0E78                     __ptext22:	
  7151 ;; *************** function _I2C_MasterWrite *****************
  7152 ;; Defined at:
  7153 ;;		line 251 in file "mcc_generated_files/i2c_master.c"
  7154 ;; Parameters:    Size  Location     Type
  7155 ;;		None
  7156 ;; Auto vars:     Size  Location     Type
  7157 ;;		None
  7158 ;; Return value:  Size  Location     Type
  7159 ;;                  1    wreg      enum E92
  7160 ;; Registers used:
  7161 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7162 ;; Tracked objects:
  7163 ;;		On entry : 0/0
  7164 ;;		On exit  : 0/0
  7165 ;;		Unchanged: 0/0
  7166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7171 ;;Total ram usage:        0 bytes
  7172 ;; Hardware stack levels used:    1
  7173 ;; Hardware stack levels required when called:   20
  7174 ;; This function calls:
  7175 ;;		_I2C_MasterOperation
  7176 ;; This function is called by:
  7177 ;;		_I2C_Write1ByteRegister
  7178 ;;		_I2C_Read2ByteRegister
  7179 ;;		_I2C_Write2ByteRegister
  7180 ;;		_I2C_WriteNBytes
  7181 ;;		_I2C_ReadDataBlock
  7182 ;; This function uses a non-reentrant model
  7183 ;;
  7184                           
  7185                           
  7186                           ;psect for function _I2C_MasterWrite
  7187  0E78                     _I2C_MasterWrite:	
  7188                           
  7189                           ;i2c_master.c: 253: return I2C_MasterOperation(0);
  7190                           ;	Return value of _I2C_MasterWrite is never used
  7191                           
  7192                           ;incstack = 0
  7193 ;; hardware stack exceeded
  7194                           ; Regs used in _I2C_MasterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7195  0E78  3000               	movlw	0
  7196  0E79  3186  268E         	fcall	_I2C_MasterOperation
  7197  0E7B  0008               	return
  7198  0E7C                     __end_of_I2C_MasterWrite:	
  7199                           
  7200                           	psect	text23
  7201  068E                     __ptext23:	
  7202 ;; *************** function _I2C_MasterOperation *****************
  7203 ;; Defined at:
  7204 ;;		line 224 in file "mcc_generated_files/i2c_master.c"
  7205 ;; Parameters:    Size  Location     Type
  7206 ;;  read            1    wreg     unsigned char 
  7207 ;; Auto vars:     Size  Location     Type
  7208 ;;  read            1    5[BANK1 ] unsigned char 
  7209 ;;  returnValue     1    6[BANK1 ] enum E92
  7210 ;; Return value:  Size  Location     Type
  7211 ;;                  1    wreg      enum E92
  7212 ;; Registers used:
  7213 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7214 ;; Tracked objects:
  7215 ;;		On entry : 0/0
  7216 ;;		On exit  : 0/0
  7217 ;;		Unchanged: 0/0
  7218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7220 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7221 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7222 ;;      Totals:         0       1       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7223 ;;Total ram usage:        3 bytes
  7224 ;; Hardware stack levels used:    1
  7225 ;; Hardware stack levels required when called:   19
  7226 ;; This function calls:
  7227 ;;		_I2C_MasterStart
  7228 ;;		_I2C_Poller
  7229 ;; This function is called by:
  7230 ;;		_I2C_MasterWrite
  7231 ;;		_I2C_MasterRead
  7232 ;; This function uses a non-reentrant model
  7233 ;;
  7234                           
  7235                           
  7236                           ;psect for function _I2C_MasterOperation
  7237  068E                     _I2C_MasterOperation:	
  7238                           
  7239                           ;incstack = 0
  7240 ;; hardware stack exceeded
  7241                           ; Regs used in _I2C_MasterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7242                           ;I2C_MasterOperation@read stored from wreg
  7243  068E  0021               	movlb	1	; select bank1
  7244  068F  00C2               	movwf	I2C_MasterOperation@read^(0+128)
  7245                           
  7246                           ;i2c_master.c: 226: i2c_error_t returnValue = I2C_BUSY;
  7247  0690  01C3               	clrf	I2C_MasterOperation@returnValue^(0+128)
  7248  0691  0AC3               	incf	I2C_MasterOperation@returnValue^(0+128),f
  7249                           
  7250                           ;i2c_master.c: 227: if(!I2C_Status.busy)
  7251  0692  18BC               	btfsc	(_I2C_Status^(0+128)+28),1
  7252  0693  2EA7               	goto	l6219
  7253                           
  7254                           ;i2c_master.c: 228: {
  7255                           ;i2c_master.c: 229: I2C_Status.busy = 1;
  7256  0694  14BC               	bsf	(_I2C_Status^(0+128)+28),1
  7257                           
  7258                           ;i2c_master.c: 230: returnValue = I2C_NOERR;
  7259  0695  01C3               	clrf	I2C_MasterOperation@returnValue^(0+128)
  7260                           
  7261                           ;i2c_master.c: 232: if(read)
  7262  0696  0842               	movf	I2C_MasterOperation@read^(0+128),w
  7263  0697  1903               	btfsc	3,2
  7264  0698  2E9C               	goto	l6213
  7265                           
  7266                           ;i2c_master.c: 233: {
  7267                           ;i2c_master.c: 234: I2C_Status.state = I2C_SEND_ADR_READ;
  7268  0699  01BA               	clrf	(_I2C_Status^(0+128)+26)
  7269  069A  0ABA               	incf	(_I2C_Status^(0+128)+26),f
  7270                           
  7271                           ;i2c_master.c: 235: }
  7272  069B  2EA2               	goto	l6215
  7273  069C                     l6213:	
  7274                           
  7275                           ;i2c_master.c: 236: else
  7276                           ;i2c_master.c: 237: {
  7277                           ;i2c_master.c: 238: I2C_Status.state = I2C_SEND_ADR_WRITE;
  7278  069C  3002               	movlw	2
  7279  069D  0020               	movlb	0	; select bank0
  7280  069E  00D6               	movwf	??_I2C_MasterOperation
  7281  069F  0856               	movf	??_I2C_MasterOperation,w
  7282  06A0  0021               	movlb	1	; select bank1
  7283  06A1  00BA               	movwf	(_I2C_Status^(0+128)+26)
  7284  06A2                     l6215:	
  7285                           
  7286                           ;i2c_master.c: 239: }
  7287                           ;i2c_master.c: 240: I2C_MasterStart();
  7288  06A2  318E  2621  3186   	fcall	_I2C_MasterStart
  7289                           
  7290                           ;i2c_master.c: 241: I2C_Poller();
  7291  06A5  318F  2775         	fcall	_I2C_Poller
  7292  06A7                     l6219:	
  7293                           
  7294                           ;i2c_master.c: 242: }
  7295                           ;i2c_master.c: 243: return returnValue;
  7296  06A7  0021               	movlb	1	; select bank1
  7297  06A8  0843               	movf	I2C_MasterOperation@returnValue^(0+128),w
  7298  06A9  0008               	return
  7299  06AA                     __end_of_I2C_MasterOperation:	
  7300                           
  7301                           	psect	text24
  7302  0F75                     __ptext24:	
  7303 ;; *************** function _I2C_Poller *****************
  7304 ;; Defined at:
  7305 ;;		line 312 in file "mcc_generated_files/i2c_master.c"
  7306 ;; Parameters:    Size  Location     Type
  7307 ;;		None
  7308 ;; Auto vars:     Size  Location     Type
  7309 ;;		None
  7310 ;; Return value:  Size  Location     Type
  7311 ;;                  1    wreg      void 
  7312 ;; Registers used:
  7313 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7314 ;; Tracked objects:
  7315 ;;		On entry : 0/0
  7316 ;;		On exit  : 0/0
  7317 ;;		Unchanged: 0/0
  7318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7323 ;;Total ram usage:        0 bytes
  7324 ;; Hardware stack levels used:    1
  7325 ;; Hardware stack levels required when called:   18
  7326 ;; This function calls:
  7327 ;;		_I2C_MasterFsm
  7328 ;;		_I2C_MasterWaitForEvent
  7329 ;; This function is called by:
  7330 ;;		_I2C_MasterOperation
  7331 ;; This function uses a non-reentrant model
  7332 ;;
  7333                           
  7334                           
  7335                           ;psect for function _I2C_Poller
  7336  0F75                     _I2C_Poller:	
  7337  0F75                     l6187:	
  7338                           ;i2c_master.c: 314: while(I2C_Status.busy)
  7339                           
  7340                           ;incstack = 0
  7341 ;; hardware stack exceeded
  7342                           ; Regs used in _I2C_Poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7343                           
  7344  0F75  0021               	movlb	1	; select bank1
  7345  0F76  1CBC               	btfss	(_I2C_Status^(0+128)+28),1
  7346  0F77  0008               	return
  7347                           
  7348                           ;i2c_master.c: 315: {
  7349                           ;i2c_master.c: 316: I2C_MasterWaitForEvent();
  7350  0F78  318E  2674  318F   	fcall	_I2C_MasterWaitForEvent
  7351                           
  7352                           ;i2c_master.c: 317: I2C_MasterFsm();
  7353  0F7B  3185  255D  318F   	fcall	_I2C_MasterFsm
  7354  0F7E  2F75               	goto	l6187
  7355  0F7F                     __end_of_I2C_Poller:	
  7356                           
  7357                           	psect	text25
  7358  0E74                     __ptext25:	
  7359 ;; *************** function _I2C_MasterWaitForEvent *****************
  7360 ;; Defined at:
  7361 ;;		line 650 in file "mcc_generated_files/i2c_master.c"
  7362 ;; Parameters:    Size  Location     Type
  7363 ;;		None
  7364 ;; Auto vars:     Size  Location     Type
  7365 ;;		None
  7366 ;; Return value:  Size  Location     Type
  7367 ;;                  1    wreg      void 
  7368 ;; Registers used:
  7369 ;;		None
  7370 ;; Tracked objects:
  7371 ;;		On entry : 0/0
  7372 ;;		On exit  : 0/0
  7373 ;;		Unchanged: 0/0
  7374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7378 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7379 ;;Total ram usage:        0 bytes
  7380 ;; Hardware stack levels used:    1
  7381 ;; Hardware stack levels required when called:   13
  7382 ;; This function calls:
  7383 ;;		Nothing
  7384 ;; This function is called by:
  7385 ;;		_I2C_Poller
  7386 ;; This function uses a non-reentrant model
  7387 ;;
  7388                           
  7389                           
  7390                           ;psect for function _I2C_MasterWaitForEvent
  7391  0E74                     _I2C_MasterWaitForEvent:	
  7392  0E74                     l558:	
  7393                           ;incstack = 0
  7394 ;; hardware stack exceeded
  7395                           ; Regs used in _I2C_MasterWaitForEvent: []
  7396                           ;i2c_master.c: 652: while(1)
  7397                           
  7398                           
  7399                           ;i2c_master.c: 653: {
  7400                           ;i2c_master.c: 654: if(PIR1bits.SSP1IF)
  7401  0E74  0020               	movlb	0	; select bank0
  7402  0E75  1990               	btfsc	16,3	;volatile
  7403  0E76  0008               	return
  7404  0E77  2E74               	goto	l558
  7405  0E78                     __end_of_I2C_MasterWaitForEvent:	
  7406                           ;i2c_master.c: 655: {
  7407                           ;i2c_master.c: 656: break;
  7408                           
  7409                           
  7410                           	psect	text26
  7411  055D                     __ptext26:	
  7412 ;; *************** function _I2C_MasterFsm *****************
  7413 ;; Defined at:
  7414 ;;		line 321 in file "mcc_generated_files/i2c_master.c"
  7415 ;; Parameters:    Size  Location     Type
  7416 ;;		None
  7417 ;; Auto vars:     Size  Location     Type
  7418 ;;		None
  7419 ;; Return value:  Size  Location     Type
  7420 ;;                  1    wreg      void 
  7421 ;; Registers used:
  7422 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7423 ;; Tracked objects:
  7424 ;;		On entry : 0/0
  7425 ;;		On exit  : 0/0
  7426 ;;		Unchanged: 0/0
  7427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7430 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7431 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7432 ;;Total ram usage:        3 bytes
  7433 ;; Hardware stack levels used:    1
  7434 ;; Hardware stack levels required when called:   17
  7435 ;; This function calls:
  7436 ;;		_I2C_DO_ADDRESS_NACK
  7437 ;;		_I2C_DO_IDLE
  7438 ;;		_I2C_DO_RCEN
  7439 ;;		_I2C_DO_RESET
  7440 ;;		_I2C_DO_RX
  7441 ;;		_I2C_DO_RX_ACK
  7442 ;;		_I2C_DO_RX_NACK_RESTART
  7443 ;;		_I2C_DO_RX_NACK_STOP
  7444 ;;		_I2C_DO_SEND_ADR_READ
  7445 ;;		_I2C_DO_SEND_ADR_WRITE
  7446 ;;		_I2C_DO_SEND_RESTART
  7447 ;;		_I2C_DO_SEND_RESTART_READ
  7448 ;;		_I2C_DO_SEND_RESTART_WRITE
  7449 ;;		_I2C_DO_SEND_STOP
  7450 ;;		_I2C_DO_TX
  7451 ;;		_I2C_DO_TX_EMPTY
  7452 ;;		_I2C_MasterClearIrq
  7453 ;;		_I2C_MasterIsNack
  7454 ;; This function is called by:
  7455 ;;		_I2C_Poller
  7456 ;; This function uses a non-reentrant model
  7457 ;;
  7458                           
  7459                           
  7460                           ;psect for function _I2C_MasterFsm
  7461  055D                     _I2C_MasterFsm:	
  7462                           
  7463                           ;i2c_master.c: 323: I2C_MasterClearIrq();
  7464                           
  7465                           ;incstack = 0
  7466 ;; hardware stack exceeded
  7467                           ; Regs used in _I2C_MasterFsm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7468  055D  318E  2618  3185   	fcall	_I2C_MasterClearIrq
  7469                           
  7470                           ;i2c_master.c: 325: if(I2C_Status.addressNackCheck && I2C_MasterIsNack())
  7471  0560  0021               	movlb	1	; select bank1
  7472  0561  1C3C               	btfss	(_I2C_Status^(0+128)+28),0
  7473  0562  2D6E               	goto	l6157
  7474  0563  318E  26B3  3185   	fcall	_I2C_MasterIsNack
  7475  0566  3A00               	xorlw	0
  7476  0567  1903               	skipnz
  7477  0568  2D6E               	goto	l6157
  7478                           
  7479                           ;i2c_master.c: 326: {
  7480                           ;i2c_master.c: 327: I2C_Status.state = I2C_ADDRESS_NACK;
  7481  0569  300F               	movlw	15
  7482  056A  0021               	movlb	1	; select bank1
  7483  056B  00BF               	movwf	??_I2C_MasterFsm^(0+128)
  7484  056C  083F               	movf	??_I2C_MasterFsm^(0+128),w
  7485  056D  00BA               	movwf	(_I2C_Status^(0+128)+26)
  7486  056E                     l6157:	
  7487                           
  7488                           ;i2c_master.c: 328: }
  7489                           ;i2c_master.c: 329: I2C_Status.state = fsmStateTable[I2C_Status.state]();
  7490  056E  0021               	movlb	1	; select bank1
  7491  056F  083A               	movf	(_I2C_Status^(0+128)+26),w
  7492  0570  00BF               	movwf	??_I2C_MasterFsm^(0+128)
  7493  0571  01C0               	clrf	(??_I2C_MasterFsm^(0+128)+1)
  7494  0572  35BF               	lslf	??_I2C_MasterFsm^(0+128),f
  7495  0573  0DC0               	rlf	(??_I2C_MasterFsm^(0+128)+1),f
  7496  0574  3015               	movlw	low (_fsmStateTable| (0+32768))
  7497  0575  073F               	addwf	??_I2C_MasterFsm^(0+128),w
  7498  0576  0084               	movwf	4
  7499  0577  3086               	movlw	high (_fsmStateTable| (0+32768))
  7500  0578  3D40               	addwfc	(??_I2C_MasterFsm+1)^(0+128),w
  7501  0579  0085               	movwf	5
  7502  057A  3F01               	moviw [1]fsr0
  7503  057B  008A               	movwf	10
  7504  057C  3F00               	moviw [0]fsr0
  7505  057D  000A               	callw
  7506  057E  3185               	pagesel	$
  7507  057F  0021               	movlb	1	; select bank1
  7508  0580  00C1               	movwf	(??_I2C_MasterFsm+2)^(0+128)
  7509  0581  0841               	movf	(??_I2C_MasterFsm+2)^(0+128),w
  7510  0582  00BA               	movwf	(_I2C_Status^(0+128)+26)
  7511  0583  0008               	return
  7512  0584                     __end_of_I2C_MasterFsm:	
  7513                           
  7514                           	psect	text27
  7515  0509                     __ptext27:	
  7516 ;; *************** function _I2C_DO_ADDRESS_NACK *****************
  7517 ;; Defined at:
  7518 ;;		line 500 in file "mcc_generated_files/i2c_master.c"
  7519 ;; Parameters:    Size  Location     Type
  7520 ;;		None
  7521 ;; Auto vars:     Size  Location     Type
  7522 ;;		None
  7523 ;; Return value:  Size  Location     Type
  7524 ;;                  1    wreg      enum E12103
  7525 ;; Registers used:
  7526 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7527 ;; Tracked objects:
  7528 ;;		On entry : 0/0
  7529 ;;		On exit  : 0/0
  7530 ;;		Unchanged: 0/0
  7531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7534 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7535 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7536 ;;Total ram usage:        1 bytes
  7537 ;; Hardware stack levels used:    1
  7538 ;; Hardware stack levels required when called:   16
  7539 ;; This function calls:
  7540 ;;		Absolute function
  7541 ;;		_I2C_CallbackReturnReset
  7542 ;;		_I2C_CallbackReturnStop
  7543 ;;		_I2C_DO_SEND_RESTART
  7544 ;;		_I2C_DO_SEND_STOP
  7545 ;;		_rd1RegCompleteHandler
  7546 ;;		_rd2RegCompleteHandler
  7547 ;;		_rdBlkRegCompleteHandler
  7548 ;;		_wr1RegCompleteHandler
  7549 ;;		_wr2RegCompleteHandler
  7550 ;; This function is called by:
  7551 ;;		i1_I2C_MasterFsm
  7552 ;;		_I2C_MasterFsm
  7553 ;; This function uses a non-reentrant model
  7554 ;;
  7555                           
  7556                           
  7557                           ;psect for function _I2C_DO_ADDRESS_NACK
  7558  0509                     _I2C_DO_ADDRESS_NACK:	
  7559                           
  7560                           ;Skip over the trampoline to the duplicate function for level 1
  7561  0509  1C7E               	btfss	126,0
  7562  050A  2D0D               	goto	l6113
  7563  050B  3185  2DF2         	ljmp	i1l6003
  7564  050D                     _I2C_DO_ADDRESS_NACK$intlevel0:	
  7565  050D                     l6113:	
  7566                           ;incstack = 0
  7567 ;; hardware stack exceeded
  7568                           ; Regs used in _I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7569                           
  7570                           
  7571                           ;i2c_master.c: 502: I2C_Status.addressNackCheck = 0;
  7572  050D  0021               	movlb	1	; select bank1
  7573  050E  103C               	bcf	(_I2C_Status^(0+128)+28),0
  7574                           
  7575                           ;i2c_master.c: 503: I2C_Status.error = I2C_FAIL;
  7576  050F  3002               	movlw	2
  7577  0510  0020               	movlb	0	; select bank0
  7578  0511  00D5               	movwf	??_I2C_DO_ADDRESS_NACK
  7579  0512  0855               	movf	??_I2C_DO_ADDRESS_NACK,w
  7580  0513  0021               	movlb	1	; select bank1
  7581  0514  00BB               	movwf	(_I2C_Status^(0+128)+27)
  7582                           
  7583                           ;i2c_master.c: 504: switch(I2C_Status.callbackTable[I2C_ADDR_NACK](I2C_Status.callbackPa
      +                          yload[I2C_ADDR_NACK]))
  7584  0515  2D1C               	goto	l6127
  7585  0516                     l6117:	
  7586                           ;i2c_master.c: 505: {
  7587                           ;i2c_master.c: 506: case I2C_RESTART_READ:
  7588                           
  7589                           
  7590                           ;i2c_master.c: 507: case I2C_RESTART_WRITE:
  7591                           ;i2c_master.c: 508: return I2C_DO_SEND_RESTART();
  7592  0516  318F  270B         	fcall	_I2C_DO_SEND_RESTART
  7593  0518  0008               	return
  7594  0519                     l6121:	
  7595                           ;i2c_master.c: 509: default:
  7596                           
  7597                           
  7598                           ;i2c_master.c: 510: return I2C_DO_SEND_STOP();
  7599  0519  318F  2713         	fcall	_I2C_DO_SEND_STOP
  7600                           
  7601                           ;i2c_master.c: 511: }
  7602  051B  0008               	return
  7603  051C                     l6127:	
  7604  051C  0021               	movlb	1	; select bank1
  7605  051D  082E               	movf	(low ((_I2C_Status| 0+14)))^(0+128),w
  7606  051E  0020               	movlb	0	; select bank0
  7607  051F  00D5               	movwf	??_I2C_DO_ADDRESS_NACK
  7608  0520  0855               	movf	??_I2C_DO_ADDRESS_NACK,w
  7609  0521  00D4               	movwf	I2C_CallbackReturnReset@funPtr
  7610  0522  3004               	movlw	4
  7611  0523  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
  7612  0524  0086               	movwf	6
  7613  0525  0187               	clrf	7
  7614  0526  3F41               	moviw [1]fsr1
  7615  0527  008A               	movwf	10
  7616  0528  3F40               	moviw [0]fsr1
  7617  0529  000A               	callw
  7618  052A  3185               	pagesel	$
  7619                           
  7620                           ; Switch size 1, requested type "space"
  7621                           ; Number of cases is 2, Range of values is 2 to 3
  7622                           ; switch strategies available:
  7623                           ; Name         Instructions Cycles
  7624                           ; simple_byte            7     4 (average)
  7625                           ; direct_byte           13     9 (fixed)
  7626                           ; jumptable            263     9 (fixed)
  7627                           ;	Chosen strategy is simple_byte
  7628  052B  3A02               	xorlw	2	; case 2
  7629  052C  1903               	skipnz
  7630  052D  2D16               	goto	l6117
  7631  052E  3A01               	xorlw	1	; case 3
  7632  052F  1903               	skipnz
  7633  0530  2D16               	goto	l6117
  7634  0531  2D19               	goto	l6121
  7635  0532  0008               	return
  7636  0533                     __end_of_I2C_DO_ADDRESS_NACK:	
  7637                           
  7638                           	psect	text28
  7639  0F45                     __ptext28:	
  7640 ;; *************** function _I2C_DO_RESET *****************
  7641 ;; Defined at:
  7642 ;;		line 494 in file "mcc_generated_files/i2c_master.c"
  7643 ;; Parameters:    Size  Location     Type
  7644 ;;		None
  7645 ;; Auto vars:     Size  Location     Type
  7646 ;;		None
  7647 ;; Return value:  Size  Location     Type
  7648 ;;                  1    wreg      enum E12103
  7649 ;; Registers used:
  7650 ;;		wreg, status,2
  7651 ;; Tracked objects:
  7652 ;;		On entry : 0/0
  7653 ;;		On exit  : 0/0
  7654 ;;		Unchanged: 0/0
  7655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7660 ;;Total ram usage:        0 bytes
  7661 ;; Hardware stack levels used:    1
  7662 ;; Hardware stack levels required when called:   13
  7663 ;; This function calls:
  7664 ;;		Nothing
  7665 ;; This function is called by:
  7666 ;;		i1_I2C_MasterFsm
  7667 ;;		_I2C_MasterFsm
  7668 ;; This function uses a non-reentrant model
  7669 ;;
  7670                           
  7671                           
  7672                           ;psect for function _I2C_DO_RESET
  7673  0F45                     _I2C_DO_RESET:	
  7674                           
  7675                           ;Skip over the trampoline to the duplicate function for level 1
  7676  0F45  1C7E               	btfss	126,0
  7677  0F46  2F49               	goto	l4371
  7678  0F47  318E  2E86         	ljmp	i1l2987
  7679  0F49                     _I2C_DO_RESET$intlevel0:	
  7680  0F49                     l4371:	
  7681                           ;incstack = 0
  7682 ;; hardware stack exceeded
  7683                           ; Regs used in _I2C_DO_RESET: [wreg+status,2]
  7684                           
  7685                           
  7686                           ;i2c_master.c: 496: I2C_Status.busy = 0;
  7687  0F49  0021               	movlb	1	; select bank1
  7688  0F4A  10BC               	bcf	(_I2C_Status^(0+128)+28),1
  7689                           
  7690                           ;i2c_master.c: 497: I2C_Status.error = I2C_NOERR;
  7691  0F4B  01BB               	clrf	(_I2C_Status^(0+128)+27)
  7692                           
  7693                           ;i2c_master.c: 498: return I2C_RESET;
  7694  0F4C  300E               	movlw	14
  7695  0F4D  0008               	return
  7696  0F4E                     __end_of_I2C_DO_RESET:	
  7697                           
  7698                           	psect	text29
  7699  0F2B                     __ptext29:	
  7700 ;; *************** function _I2C_DO_RX_NACK_RESTART *****************
  7701 ;; Defined at:
  7702 ;;		line 488 in file "mcc_generated_files/i2c_master.c"
  7703 ;; Parameters:    Size  Location     Type
  7704 ;;		None
  7705 ;; Auto vars:     Size  Location     Type
  7706 ;;		None
  7707 ;; Return value:  Size  Location     Type
  7708 ;;                  1    wreg      enum E12103
  7709 ;; Registers used:
  7710 ;;		wreg, status,2, status,0, pclath, cstack
  7711 ;; Tracked objects:
  7712 ;;		On entry : 0/0
  7713 ;;		On exit  : 0/0
  7714 ;;		Unchanged: 0/0
  7715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7719 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7720 ;;Total ram usage:        0 bytes
  7721 ;; Hardware stack levels used:    1
  7722 ;; Hardware stack levels required when called:   14
  7723 ;; This function calls:
  7724 ;;		_I2C_MasterSendNack
  7725 ;; This function is called by:
  7726 ;;		_I2C_DO_RX
  7727 ;;		i1_I2C_MasterFsm
  7728 ;;		_I2C_MasterFsm
  7729 ;; This function uses a non-reentrant model
  7730 ;;
  7731                           
  7732                           
  7733                           ;psect for function _I2C_DO_RX_NACK_RESTART
  7734  0F2B                     _I2C_DO_RX_NACK_RESTART:	
  7735                           
  7736                           ;Skip over the trampoline to the duplicate function for level 1
  7737  0F2B  1C7E               	btfss	126,0
  7738  0F2C  2F2F               	goto	l4217
  7739  0F2D  318E  2E60         	ljmp	i1l2837
  7740  0F2F                     _I2C_DO_RX_NACK_RESTART$intlevel0:	
  7741  0F2F                     l4217:	
  7742                           ;incstack = 0
  7743 ;; hardware stack exceeded
  7744                           ; Regs used in _I2C_DO_RX_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  7745                           
  7746                           
  7747                           ;i2c_master.c: 490: I2C_MasterSendNack();
  7748  0F2F  318E  266C         	fcall	_I2C_MasterSendNack
  7749                           
  7750                           ;i2c_master.c: 491: return I2C_SEND_RESTART;
  7751  0F31  3009               	movlw	9
  7752  0F32  0008               	return
  7753  0F33                     __end_of_I2C_DO_RX_NACK_RESTART:	
  7754                           
  7755                           	psect	text30
  7756  0F23                     __ptext30:	
  7757 ;; *************** function _I2C_DO_RX_NACK_STOP *****************
  7758 ;; Defined at:
  7759 ;;		line 482 in file "mcc_generated_files/i2c_master.c"
  7760 ;; Parameters:    Size  Location     Type
  7761 ;;		None
  7762 ;; Auto vars:     Size  Location     Type
  7763 ;;		None
  7764 ;; Return value:  Size  Location     Type
  7765 ;;                  1    wreg      enum E12103
  7766 ;; Registers used:
  7767 ;;		wreg, status,2, status,0, pclath, cstack
  7768 ;; Tracked objects:
  7769 ;;		On entry : 0/0
  7770 ;;		On exit  : 0/0
  7771 ;;		Unchanged: 0/0
  7772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7776 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7777 ;;Total ram usage:        0 bytes
  7778 ;; Hardware stack levels used:    1
  7779 ;; Hardware stack levels required when called:   14
  7780 ;; This function calls:
  7781 ;;		_I2C_MasterSendNack
  7782 ;; This function is called by:
  7783 ;;		_I2C_DO_RX
  7784 ;;		i1_I2C_MasterFsm
  7785 ;;		_I2C_MasterFsm
  7786 ;; This function uses a non-reentrant model
  7787 ;;
  7788                           
  7789                           
  7790                           ;psect for function _I2C_DO_RX_NACK_STOP
  7791  0F23                     _I2C_DO_RX_NACK_STOP:	
  7792                           
  7793                           ;Skip over the trampoline to the duplicate function for level 1
  7794  0F23  1C7E               	btfss	126,0
  7795  0F24  2F27               	goto	l4223
  7796  0F25  318E  2E5C         	ljmp	i1l2831
  7797  0F27                     _I2C_DO_RX_NACK_STOP$intlevel0:	
  7798  0F27                     l4223:	
  7799                           ;incstack = 0
  7800 ;; hardware stack exceeded
  7801                           ; Regs used in _I2C_DO_RX_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  7802                           
  7803                           
  7804                           ;i2c_master.c: 484: I2C_MasterSendNack();
  7805  0F27  318E  266C         	fcall	_I2C_MasterSendNack
  7806                           
  7807                           ;i2c_master.c: 485: return I2C_SEND_STOP;
  7808  0F29  300A               	movlw	10
  7809  0F2A  0008               	return
  7810  0F2B                     __end_of_I2C_DO_RX_NACK_STOP:	
  7811                           
  7812                           	psect	text31
  7813  0F1B                     __ptext31:	
  7814 ;; *************** function _I2C_DO_RX_ACK *****************
  7815 ;; Defined at:
  7816 ;;		line 475 in file "mcc_generated_files/i2c_master.c"
  7817 ;; Parameters:    Size  Location     Type
  7818 ;;		None
  7819 ;; Auto vars:     Size  Location     Type
  7820 ;;		None
  7821 ;; Return value:  Size  Location     Type
  7822 ;;                  1    wreg      enum E12103
  7823 ;; Registers used:
  7824 ;;		wreg, status,2, status,0, pclath, cstack
  7825 ;; Tracked objects:
  7826 ;;		On entry : 0/0
  7827 ;;		On exit  : 0/0
  7828 ;;		Unchanged: 0/0
  7829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7834 ;;Total ram usage:        0 bytes
  7835 ;; Hardware stack levels used:    1
  7836 ;; Hardware stack levels required when called:   14
  7837 ;; This function calls:
  7838 ;;		_I2C_MasterSendAck
  7839 ;; This function is called by:
  7840 ;;		i1_I2C_MasterFsm
  7841 ;;		_I2C_MasterFsm
  7842 ;; This function uses a non-reentrant model
  7843 ;;
  7844                           
  7845                           
  7846                           ;psect for function _I2C_DO_RX_ACK
  7847  0F1B                     _I2C_DO_RX_ACK:	
  7848                           
  7849                           ;Skip over the trampoline to the duplicate function for level 1
  7850  0F1B  1C7E               	btfss	126,0
  7851  0F1C  2F1F               	goto	l4365
  7852  0F1D  318E  2E58         	ljmp	i1l2981
  7853  0F1F                     _I2C_DO_RX_ACK$intlevel0:	
  7854  0F1F                     l4365:	
  7855                           ;incstack = 0
  7856 ;; hardware stack exceeded
  7857                           ; Regs used in _I2C_DO_RX_ACK: [wreg+status,2+status,0+pclath+cstack]
  7858                           
  7859                           
  7860                           ;i2c_master.c: 477: I2C_MasterSendAck();
  7861  0F1F  318E  2670         	fcall	_I2C_MasterSendAck
  7862                           
  7863                           ;i2c_master.c: 478: return I2C_RCEN;
  7864  0F21  3005               	movlw	5
  7865  0F22  0008               	return
  7866  0F23                     __end_of_I2C_DO_RX_ACK:	
  7867                           
  7868                           	psect	text32
  7869  0F13                     __ptext32:	
  7870 ;; *************** function _I2C_DO_SEND_STOP *****************
  7871 ;; Defined at:
  7872 ;;		line 469 in file "mcc_generated_files/i2c_master.c"
  7873 ;; Parameters:    Size  Location     Type
  7874 ;;		None
  7875 ;; Auto vars:     Size  Location     Type
  7876 ;;		None
  7877 ;; Return value:  Size  Location     Type
  7878 ;;                  1    wreg      enum E12103
  7879 ;; Registers used:
  7880 ;;		wreg, status,2, status,0, pclath, cstack
  7881 ;; Tracked objects:
  7882 ;;		On entry : 0/0
  7883 ;;		On exit  : 0/0
  7884 ;;		Unchanged: 0/0
  7885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7889 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7890 ;;Total ram usage:        0 bytes
  7891 ;; Hardware stack levels used:    1
  7892 ;; Hardware stack levels required when called:   14
  7893 ;; This function calls:
  7894 ;;		_I2C_MasterStop
  7895 ;; This function is called by:
  7896 ;;		_I2C_DO_TX
  7897 ;;		_I2C_DO_TX_EMPTY
  7898 ;;		_I2C_DO_ADDRESS_NACK
  7899 ;;		i1_I2C_MasterFsm
  7900 ;;		_I2C_MasterFsm
  7901 ;; This function uses a non-reentrant model
  7902 ;;
  7903                           
  7904                           
  7905                           ;psect for function _I2C_DO_SEND_STOP
  7906  0F13                     _I2C_DO_SEND_STOP:	
  7907                           
  7908                           ;Skip over the trampoline to the duplicate function for level 1
  7909  0F13  1C7E               	btfss	126,0
  7910  0F14  2F17               	goto	l4205
  7911  0F15  318E  2E54         	ljmp	i1l2825
  7912  0F17                     _I2C_DO_SEND_STOP$intlevel0:	
  7913  0F17                     l4205:	
  7914                           ;incstack = 0
  7915 ;; hardware stack exceeded
  7916                           ; Regs used in _I2C_DO_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
  7917                           
  7918                           
  7919                           ;i2c_master.c: 471: I2C_MasterStop();
  7920  0F17  318E  2627         	fcall	_I2C_MasterStop
  7921                           
  7922                           ;i2c_master.c: 472: return I2C_IDLE;
  7923  0F19  3000               	movlw	0
  7924  0F1A  0008               	return
  7925  0F1B                     __end_of_I2C_DO_SEND_STOP:	
  7926                           
  7927                           	psect	text33
  7928  0F0B                     __ptext33:	
  7929 ;; *************** function _I2C_DO_SEND_RESTART *****************
  7930 ;; Defined at:
  7931 ;;		line 463 in file "mcc_generated_files/i2c_master.c"
  7932 ;; Parameters:    Size  Location     Type
  7933 ;;		None
  7934 ;; Auto vars:     Size  Location     Type
  7935 ;;		None
  7936 ;; Return value:  Size  Location     Type
  7937 ;;                  1    wreg      enum E12103
  7938 ;; Registers used:
  7939 ;;		wreg, status,2, status,0, pclath, cstack
  7940 ;; Tracked objects:
  7941 ;;		On entry : 0/0
  7942 ;;		On exit  : 0/0
  7943 ;;		Unchanged: 0/0
  7944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7949 ;;Total ram usage:        0 bytes
  7950 ;; Hardware stack levels used:    1
  7951 ;; Hardware stack levels required when called:   14
  7952 ;; This function calls:
  7953 ;;		_I2C_MasterEnableRestart
  7954 ;; This function is called by:
  7955 ;;		_I2C_DO_TX_EMPTY
  7956 ;;		_I2C_DO_ADDRESS_NACK
  7957 ;;		i1_I2C_MasterFsm
  7958 ;;		_I2C_MasterFsm
  7959 ;; This function uses a non-reentrant model
  7960 ;;
  7961                           
  7962                           
  7963                           ;psect for function _I2C_DO_SEND_RESTART
  7964  0F0B                     _I2C_DO_SEND_RESTART:	
  7965                           
  7966                           ;Skip over the trampoline to the duplicate function for level 1
  7967  0F0B  1C7E               	btfss	126,0
  7968  0F0C  2F0F               	goto	l4231
  7969  0F0D  318E  2E50         	ljmp	i1l2819
  7970  0F0F                     _I2C_DO_SEND_RESTART$intlevel0:	
  7971  0F0F                     l4231:	
  7972                           ;incstack = 0
  7973 ;; hardware stack exceeded
  7974                           ; Regs used in _I2C_DO_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
  7975                           
  7976                           
  7977                           ;i2c_master.c: 465: I2C_MasterEnableRestart();
  7978  0F0F  318E  2624         	fcall	_I2C_MasterEnableRestart
  7979                           
  7980                           ;i2c_master.c: 466: return I2C_SEND_ADR_READ;
  7981  0F11  3001               	movlw	1
  7982  0F12  0008               	return
  7983  0F13                     __end_of_I2C_DO_SEND_RESTART:	
  7984                           
  7985                           	psect	text34
  7986  0F03                     __ptext34:	
  7987 ;; *************** function _I2C_DO_SEND_RESTART_WRITE *****************
  7988 ;; Defined at:
  7989 ;;		line 456 in file "mcc_generated_files/i2c_master.c"
  7990 ;; Parameters:    Size  Location     Type
  7991 ;;		None
  7992 ;; Auto vars:     Size  Location     Type
  7993 ;;		None
  7994 ;; Return value:  Size  Location     Type
  7995 ;;                  1    wreg      enum E12103
  7996 ;; Registers used:
  7997 ;;		wreg, status,2, status,0, pclath, cstack
  7998 ;; Tracked objects:
  7999 ;;		On entry : 0/0
  8000 ;;		On exit  : 0/0
  8001 ;;		Unchanged: 0/0
  8002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8006 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8007 ;;Total ram usage:        0 bytes
  8008 ;; Hardware stack levels used:    1
  8009 ;; Hardware stack levels required when called:   14
  8010 ;; This function calls:
  8011 ;;		_I2C_MasterEnableRestart
  8012 ;; This function is called by:
  8013 ;;		_I2C_DO_TX
  8014 ;;		i1_I2C_MasterFsm
  8015 ;;		_I2C_MasterFsm
  8016 ;; This function uses a non-reentrant model
  8017 ;;
  8018                           
  8019                           
  8020                           ;psect for function _I2C_DO_SEND_RESTART_WRITE
  8021  0F03                     _I2C_DO_SEND_RESTART_WRITE:	
  8022                           
  8023                           ;Skip over the trampoline to the duplicate function for level 1
  8024  0F03  1C7E               	btfss	126,0
  8025  0F04  2F07               	goto	l4199
  8026  0F05  318E  2E4C         	ljmp	i1l2813
  8027  0F07                     _I2C_DO_SEND_RESTART_WRITE$intlevel0:	
  8028  0F07                     l4199:	
  8029                           ;incstack = 0
  8030 ;; hardware stack exceeded
  8031                           ; Regs used in _I2C_DO_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
  8032                           
  8033                           
  8034                           ;i2c_master.c: 458: I2C_MasterEnableRestart();
  8035  0F07  318E  2624         	fcall	_I2C_MasterEnableRestart
  8036                           
  8037                           ;i2c_master.c: 459: return I2C_SEND_ADR_WRITE;
  8038  0F09  3002               	movlw	2
  8039  0F0A  0008               	return
  8040  0F0B                     __end_of_I2C_DO_SEND_RESTART_WRITE:	
  8041                           
  8042                           	psect	text35
  8043  0EFB                     __ptext35:	
  8044 ;; *************** function _I2C_DO_SEND_RESTART_READ *****************
  8045 ;; Defined at:
  8046 ;;		line 450 in file "mcc_generated_files/i2c_master.c"
  8047 ;; Parameters:    Size  Location     Type
  8048 ;;		None
  8049 ;; Auto vars:     Size  Location     Type
  8050 ;;		None
  8051 ;; Return value:  Size  Location     Type
  8052 ;;                  1    wreg      enum E12103
  8053 ;; Registers used:
  8054 ;;		wreg, status,2, status,0, pclath, cstack
  8055 ;; Tracked objects:
  8056 ;;		On entry : 0/0
  8057 ;;		On exit  : 0/0
  8058 ;;		Unchanged: 0/0
  8059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8064 ;;Total ram usage:        0 bytes
  8065 ;; Hardware stack levels used:    1
  8066 ;; Hardware stack levels required when called:   14
  8067 ;; This function calls:
  8068 ;;		_I2C_MasterEnableRestart
  8069 ;; This function is called by:
  8070 ;;		_I2C_DO_TX
  8071 ;;		i1_I2C_MasterFsm
  8072 ;;		_I2C_MasterFsm
  8073 ;; This function uses a non-reentrant model
  8074 ;;
  8075                           
  8076                           
  8077                           ;psect for function _I2C_DO_SEND_RESTART_READ
  8078  0EFB                     _I2C_DO_SEND_RESTART_READ:	
  8079                           
  8080                           ;Skip over the trampoline to the duplicate function for level 1
  8081  0EFB  1C7E               	btfss	126,0
  8082  0EFC  2EFF               	goto	l4193
  8083  0EFD  318E  2E48         	ljmp	i1l2807
  8084  0EFF                     _I2C_DO_SEND_RESTART_READ$intlevel0:	
  8085  0EFF                     l4193:	
  8086                           ;incstack = 0
  8087 ;; hardware stack exceeded
  8088                           ; Regs used in _I2C_DO_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
  8089                           
  8090                           
  8091                           ;i2c_master.c: 452: I2C_MasterEnableRestart();
  8092  0EFF  318E  2624         	fcall	_I2C_MasterEnableRestart
  8093                           
  8094                           ;i2c_master.c: 453: return I2C_SEND_ADR_READ;
  8095  0F01  3001               	movlw	1
  8096  0F02  0008               	return
  8097  0F03                     __end_of_I2C_DO_SEND_RESTART_READ:	
  8098                           
  8099                           	psect	text36
  8100  0F6B                     __ptext36:	
  8101 ;; *************** function _I2C_DO_RCEN *****************
  8102 ;; Defined at:
  8103 ;;		line 402 in file "mcc_generated_files/i2c_master.c"
  8104 ;; Parameters:    Size  Location     Type
  8105 ;;		None
  8106 ;; Auto vars:     Size  Location     Type
  8107 ;;		None
  8108 ;; Return value:  Size  Location     Type
  8109 ;;                  1    wreg      enum E12103
  8110 ;; Registers used:
  8111 ;;		wreg, status,2, status,0, pclath, cstack
  8112 ;; Tracked objects:
  8113 ;;		On entry : 0/0
  8114 ;;		On exit  : 0/0
  8115 ;;		Unchanged: 0/0
  8116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8120 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8121 ;;Total ram usage:        0 bytes
  8122 ;; Hardware stack levels used:    1
  8123 ;; Hardware stack levels required when called:   14
  8124 ;; This function calls:
  8125 ;;		_I2C_MasterStartRx
  8126 ;; This function is called by:
  8127 ;;		i1_I2C_MasterFsm
  8128 ;;		_I2C_MasterFsm
  8129 ;; This function uses a non-reentrant model
  8130 ;;
  8131                           
  8132                           
  8133                           ;psect for function _I2C_DO_RCEN
  8134  0F6B                     _I2C_DO_RCEN:	
  8135                           
  8136                           ;Skip over the trampoline to the duplicate function for level 1
  8137  0F6B  1C7E               	btfss	126,0
  8138  0F6C  2F6F               	goto	l4337
  8139  0F6D  318E  2E9B         	ljmp	i1l2953
  8140  0F6F                     _I2C_DO_RCEN$intlevel0:	
  8141  0F6F                     l4337:	
  8142                           ;incstack = 0
  8143 ;; hardware stack exceeded
  8144                           ; Regs used in _I2C_DO_RCEN: [wreg+status,2+status,0+pclath+cstack]
  8145                           
  8146                           
  8147                           ;i2c_master.c: 404: I2C_Status.addressNackCheck = 0;
  8148  0F6F  0021               	movlb	1	; select bank1
  8149  0F70  103C               	bcf	(_I2C_Status^(0+128)+28),0
  8150                           
  8151                           ;i2c_master.c: 405: I2C_MasterStartRx();
  8152  0F71  318E  262A         	fcall	_I2C_MasterStartRx
  8153                           
  8154                           ;i2c_master.c: 406: return I2C_RX;
  8155  0F73  3004               	movlw	4
  8156  0F74  0008               	return
  8157  0F75                     __end_of_I2C_DO_RCEN:	
  8158                           
  8159                           	psect	text37
  8160  02B6                     __ptext37:	
  8161 ;; *************** function _I2C_DO_RX *****************
  8162 ;; Defined at:
  8163 ;;		line 378 in file "mcc_generated_files/i2c_master.c"
  8164 ;; Parameters:    Size  Location     Type
  8165 ;;		None
  8166 ;; Auto vars:     Size  Location     Type
  8167 ;;		None
  8168 ;; Return value:  Size  Location     Type
  8169 ;;                  1    wreg      enum E12103
  8170 ;; Registers used:
  8171 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8172 ;; Tracked objects:
  8173 ;;		On entry : 0/0
  8174 ;;		On exit  : 0/0
  8175 ;;		Unchanged: 0/0
  8176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8179 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8180 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8181 ;;Total ram usage:        1 bytes
  8182 ;; Hardware stack levels used:    1
  8183 ;; Hardware stack levels required when called:   16
  8184 ;; This function calls:
  8185 ;;		Absolute function
  8186 ;;		_I2C_CallbackReturnReset
  8187 ;;		_I2C_CallbackReturnStop
  8188 ;;		_I2C_DO_RX_NACK_RESTART
  8189 ;;		_I2C_DO_RX_NACK_STOP
  8190 ;;		_I2C_MasterGetRxData
  8191 ;;		_I2C_MasterSendAck
  8192 ;;		_rd1RegCompleteHandler
  8193 ;;		_rd2RegCompleteHandler
  8194 ;;		_rdBlkRegCompleteHandler
  8195 ;;		_wr1RegCompleteHandler
  8196 ;;		_wr2RegCompleteHandler
  8197 ;; This function is called by:
  8198 ;;		i1_I2C_MasterFsm
  8199 ;;		_I2C_MasterFsm
  8200 ;; This function uses a non-reentrant model
  8201 ;;
  8202                           
  8203                           
  8204                           ;psect for function _I2C_DO_RX
  8205  02B6                     _I2C_DO_RX:	
  8206                           
  8207                           ;Skip over the trampoline to the duplicate function for level 1
  8208  02B6  1C7E               	btfss	126,0
  8209  02B7  2ABA               	goto	l6067
  8210  02B8  3183  2B72         	ljmp	i1l5957
  8211  02BA                     _I2C_DO_RX$intlevel0:	
  8212  02BA                     l6067:	
  8213                           ;incstack = 0
  8214 ;; hardware stack exceeded
  8215                           ; Regs used in _I2C_DO_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8216                           
  8217                           
  8218                           ;i2c_master.c: 380: *I2C_Status.data_ptr++ = I2C_MasterGetRxData();
  8219  02BA  318E  262D  3182   	fcall	_I2C_MasterGetRxData
  8220  02BD  0020               	movlb	0	; select bank0
  8221  02BE  00D5               	movwf	??_I2C_DO_RX
  8222  02BF  0021               	movlb	1	; select bank1
  8223  02C0  0837               	movf	(low ((_I2C_Status| 0+23)))^(0+128),w
  8224  02C1  0086               	movwf	6
  8225  02C2  0187               	clrf	7
  8226  02C3  0020               	movlb	0	; select bank0
  8227  02C4  0855               	movf	??_I2C_DO_RX,w
  8228  02C5  0081               	movwf	1
  8229  02C6  3001               	movlw	1
  8230  02C7  00D5               	movwf	??_I2C_DO_RX
  8231  02C8  0855               	movf	??_I2C_DO_RX,w
  8232  02C9  0021               	movlb	1	; select bank1
  8233  02CA  07B7               	addwf	(low ((_I2C_Status| 0+23)))^(0+128),f
  8234                           
  8235                           ;i2c_master.c: 381: if(--I2C_Status.data_length)
  8236  02CB  3001               	movlw	1
  8237  02CC  02B8               	subwf	(_I2C_Status^(0+128)+24),f
  8238  02CD  3000               	movlw	0
  8239  02CE  3BB9               	subwfb	((_I2C_Status+1)^(0+128)+24),f
  8240  02CF  0838               	movf	(_I2C_Status^(0+128)+24),w
  8241  02D0  0439               	iorwf	((_I2C_Status+1)^(0+128)+24),w
  8242  02D1  1903               	btfsc	3,2
  8243  02D2  2AD7               	goto	l417
  8244                           
  8245                           ;i2c_master.c: 382: {
  8246                           ;i2c_master.c: 383: I2C_MasterSendAck();
  8247  02D3  318E  2670         	fcall	_I2C_MasterSendAck
  8248                           
  8249                           ;i2c_master.c: 384: return I2C_RCEN;
  8250  02D5  3005               	movlw	5
  8251                           
  8252                           ;i2c_master.c: 385: }
  8253  02D6  0008               	return
  8254  02D7                     l417:	
  8255                           
  8256                           ;i2c_master.c: 386: else
  8257                           ;i2c_master.c: 387: {
  8258                           ;i2c_master.c: 388: I2C_Status.bufferFree = 1;
  8259  02D7  15BC               	bsf	(_I2C_Status^(0+128)+28),3
  8260                           
  8261                           ;i2c_master.c: 389: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
  8262  02D8  2ADF               	goto	l6091
  8263  02D9                     l6081:	
  8264                           ;i2c_master.c: 390: {
  8265                           ;i2c_master.c: 391: case I2C_RESTART_WRITE:
  8266                           
  8267                           
  8268                           ;i2c_master.c: 392: case I2C_RESTART_READ:
  8269                           ;i2c_master.c: 393: return I2C_DO_RX_NACK_RESTART();
  8270  02D9  318F  272B         	fcall	_I2C_DO_RX_NACK_RESTART
  8271  02DB  0008               	return
  8272  02DC                     l6085:	
  8273                           ;i2c_master.c: 395: case I2C_CONTINUE:
  8274                           
  8275                           ;i2c_master.c: 394: default:
  8276                           
  8277                           
  8278                           ;i2c_master.c: 396: case I2C_STOP:
  8279                           ;i2c_master.c: 397: return I2C_DO_RX_NACK_STOP();
  8280  02DC  318F  2723         	fcall	_I2C_DO_RX_NACK_STOP
  8281                           
  8282                           ;i2c_master.c: 398: }
  8283  02DE  0008               	return
  8284  02DF                     l6091:	
  8285  02DF  0021               	movlb	1	; select bank1
  8286  02E0  082C               	movf	(low ((_I2C_Status| 0+12)))^(0+128),w
  8287  02E1  0020               	movlb	0	; select bank0
  8288  02E2  00D5               	movwf	??_I2C_DO_RX
  8289  02E3  0855               	movf	??_I2C_DO_RX,w
  8290  02E4  00D4               	movwf	I2C_CallbackReturnReset@funPtr
  8291  02E5  0021               	movlb	1	; select bank1
  8292  02E6  0821               	movf	(_I2C_Status+1)^(0+128),w
  8293  02E7  008A               	movwf	10
  8294  02E8  0820               	movf	_I2C_Status^(0+128),w
  8295  02E9  000A               	callw
  8296  02EA  3182               	pagesel	$
  8297                           
  8298                           ; Switch size 1, requested type "space"
  8299                           ; Number of cases is 4, Range of values is 1 to 4
  8300                           ; switch strategies available:
  8301                           ; Name         Instructions Cycles
  8302                           ; simple_byte           13     7 (average)
  8303                           ; direct_byte           17     9 (fixed)
  8304                           ; jumptable            263     9 (fixed)
  8305                           ;	Chosen strategy is simple_byte
  8306  02EB  3A01               	xorlw	1	; case 1
  8307  02EC  1903               	skipnz
  8308  02ED  2ADC               	goto	l6085
  8309  02EE  3A03               	xorlw	3	; case 2
  8310  02EF  1903               	skipnz
  8311  02F0  2AD9               	goto	l6081
  8312  02F1  3A01               	xorlw	1	; case 3
  8313  02F2  1903               	skipnz
  8314  02F3  2AD9               	goto	l6081
  8315  02F4  3A07               	xorlw	7	; case 4
  8316  02F5  1903               	skipnz
  8317  02F6  2ADC               	goto	l6085
  8318  02F7  2ADC               	goto	l6085
  8319  02F8  0008               	return
  8320  02F9                     __end_of_I2C_DO_RX:	
  8321                           
  8322                           	psect	text38
  8323  021B                     __ptext38:	
  8324 ;; *************** function _I2C_DO_TX *****************
  8325 ;; Defined at:
  8326 ;;		line 354 in file "mcc_generated_files/i2c_master.c"
  8327 ;; Parameters:    Size  Location     Type
  8328 ;;		None
  8329 ;; Auto vars:     Size  Location     Type
  8330 ;;		None
  8331 ;; Return value:  Size  Location     Type
  8332 ;;                  1    wreg      enum E12103
  8333 ;; Registers used:
  8334 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8335 ;; Tracked objects:
  8336 ;;		On entry : 0/0
  8337 ;;		On exit  : 0/0
  8338 ;;		Unchanged: 0/0
  8339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8341 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8342 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8343 ;;      Totals:         0       1       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8344 ;;Total ram usage:        3 bytes
  8345 ;; Hardware stack levels used:    1
  8346 ;; Hardware stack levels required when called:   16
  8347 ;; This function calls:
  8348 ;;		Absolute function
  8349 ;;		_I2C_CallbackReturnReset
  8350 ;;		_I2C_CallbackReturnStop
  8351 ;;		_I2C_DO_SEND_RESTART_READ
  8352 ;;		_I2C_DO_SEND_RESTART_WRITE
  8353 ;;		_I2C_DO_SEND_STOP
  8354 ;;		_I2C_MasterIsNack
  8355 ;;		_I2C_MasterSendTxData
  8356 ;;		_rd1RegCompleteHandler
  8357 ;;		_rd2RegCompleteHandler
  8358 ;;		_rdBlkRegCompleteHandler
  8359 ;;		_wr1RegCompleteHandler
  8360 ;;		_wr2RegCompleteHandler
  8361 ;; This function is called by:
  8362 ;;		i1_I2C_MasterFsm
  8363 ;;		_I2C_MasterFsm
  8364 ;; This function uses a non-reentrant model
  8365 ;;
  8366                           
  8367                           
  8368                           ;psect for function _I2C_DO_TX
  8369  021B                     _I2C_DO_TX:	
  8370                           
  8371                           ;Skip over the trampoline to the duplicate function for level 1
  8372  021B  1C7E               	btfss	126,0
  8373  021C  2A1F               	goto	l6037
  8374  021D  3182  2A6B         	ljmp	i1l5927
  8375  021F                     _I2C_DO_TX$intlevel0:	
  8376  021F                     l6037:	
  8377                           ;incstack = 0
  8378 ;; hardware stack exceeded
  8379                           ; Regs used in _I2C_DO_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8380                           
  8381                           
  8382                           ;i2c_master.c: 356: if(I2C_MasterIsNack())
  8383  021F  318E  26B3  3182   	fcall	_I2C_MasterIsNack
  8384  0222  3A00               	xorlw	0
  8385  0223  1D03               	btfss	3,2
  8386  0224  2A2F               	goto	l6055
  8387  0225  2A4C               	goto	l401
  8388  0226                     l6041:	
  8389                           ;i2c_master.c: 359: {
  8390                           ;i2c_master.c: 360: case I2C_RESTART_READ:
  8391                           
  8392                           ;i2c_master.c: 357: {
  8393                           ;i2c_master.c: 358: switch(I2C_Status.callbackTable[I2C_DATA_NACK](I2C_Status.callbackPa
      +                          yload[I2C_DATA_NACK]))
  8394                           
  8395                           
  8396                           ;i2c_master.c: 361: return I2C_DO_SEND_RESTART_READ();
  8397  0226  318E  26FB         	fcall	_I2C_DO_SEND_RESTART_READ
  8398  0228  0008               	return
  8399  0229                     l6045:	
  8400                           ;i2c_master.c: 362: case I2C_RESTART_WRITE:
  8401                           
  8402                           
  8403                           ;i2c_master.c: 363: return I2C_DO_SEND_RESTART_WRITE();
  8404  0229  318F  2703         	fcall	_I2C_DO_SEND_RESTART_WRITE
  8405  022B  0008               	return
  8406  022C                     l6049:	
  8407                           ;i2c_master.c: 365: case I2C_CONTINUE:
  8408                           
  8409                           ;i2c_master.c: 364: default:
  8410                           
  8411                           
  8412                           ;i2c_master.c: 366: case I2C_STOP:
  8413                           ;i2c_master.c: 367: return I2C_DO_SEND_STOP();
  8414  022C  318F  2713         	fcall	_I2C_DO_SEND_STOP
  8415                           
  8416                           ;i2c_master.c: 368: }
  8417  022E  0008               	return
  8418  022F                     l6055:	
  8419  022F  0021               	movlb	1	; select bank1
  8420  0230  082F               	movf	(low ((_I2C_Status| 0+15)))^(0+128),w
  8421  0231  0020               	movlb	0	; select bank0
  8422  0232  00D5               	movwf	??_I2C_DO_TX
  8423  0233  0855               	movf	??_I2C_DO_TX,w
  8424  0234  00D4               	movwf	I2C_CallbackReturnReset@funPtr
  8425  0235  3006               	movlw	6
  8426  0236  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
  8427  0237  0086               	movwf	6
  8428  0238  0187               	clrf	7
  8429  0239  3F41               	moviw [1]fsr1
  8430  023A  008A               	movwf	10
  8431  023B  3F40               	moviw [0]fsr1
  8432  023C  000A               	callw
  8433  023D  3182               	pagesel	$
  8434                           
  8435                           ; Switch size 1, requested type "space"
  8436                           ; Number of cases is 4, Range of values is 1 to 4
  8437                           ; switch strategies available:
  8438                           ; Name         Instructions Cycles
  8439                           ; simple_byte           13     7 (average)
  8440                           ; direct_byte           17     9 (fixed)
  8441                           ; jumptable            263     9 (fixed)
  8442                           ;	Chosen strategy is simple_byte
  8443  023E  3A01               	xorlw	1	; case 1
  8444  023F  1903               	skipnz
  8445  0240  2A2C               	goto	l6049
  8446  0241  3A03               	xorlw	3	; case 2
  8447  0242  1903               	skipnz
  8448  0243  2A26               	goto	l6041
  8449  0244  3A01               	xorlw	1	; case 3
  8450  0245  1903               	skipnz
  8451  0246  2A29               	goto	l6045
  8452  0247  3A07               	xorlw	7	; case 4
  8453  0248  1903               	skipnz
  8454  0249  2A2C               	goto	l6049
  8455  024A  2A2C               	goto	l6049
  8456                           
  8457                           ;i2c_master.c: 369: }
  8458  024B  0008               	return
  8459  024C                     l401:	
  8460                           
  8461                           ;i2c_master.c: 370: else
  8462                           ;i2c_master.c: 371: {
  8463                           ;i2c_master.c: 372: I2C_Status.addressNackCheck = 0;
  8464  024C  0021               	movlb	1	; select bank1
  8465  024D  103C               	bcf	(_I2C_Status^(0+128)+28),0
  8466                           
  8467                           ;i2c_master.c: 373: I2C_MasterSendTxData(*I2C_Status.data_ptr++);
  8468  024E  3017               	movlw	23
  8469  024F  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
  8470  0250  0086               	movwf	6
  8471  0251  0187               	clrf	7
  8472  0252  3F40               	moviw [0]fsr1
  8473  0253  0084               	movwf	4
  8474  0254  0185               	clrf	5
  8475  0255  0A81               	incf	1,f
  8476  0256  0800               	movf	0,w
  8477  0257  318E  26AD  3182   	fcall	_I2C_MasterSendTxData
  8478                           
  8479                           ;i2c_master.c: 374: return (--I2C_Status.data_length)?I2C_TX:I2C_TX_EMPTY;
  8480  025A  3001               	movlw	1
  8481  025B  0021               	movlb	1	; select bank1
  8482  025C  02B8               	subwf	(_I2C_Status^(0+128)+24),f
  8483  025D  3000               	movlw	0
  8484  025E  3BB9               	subwfb	((_I2C_Status+1)^(0+128)+24),f
  8485  025F  0838               	movf	(_I2C_Status^(0+128)+24),w
  8486  0260  0439               	iorwf	((_I2C_Status+1)^(0+128)+24),w
  8487  0261  1D03               	btfss	3,2
  8488  0262  2A65               	goto	l6063
  8489  0263  3006               	movlw	6
  8490  0264  2A66               	goto	L1
  8491  0265                     l6063:	
  8492  0265  3003               	movlw	3
  8493  0266                     L1:	
  8494  0266  00BD               	movwf	_I2C_DO_TX$864^(0+128)
  8495  0267  3000               	movlw	0
  8496  0268  00BE               	movwf	(_I2C_DO_TX$864^(0+128)+1)
  8497  0269  083D               	movf	_I2C_DO_TX$864^(0+128),w
  8498  026A  0008               	return
  8499  026B                     __end_of_I2C_DO_TX:	
  8500                           
  8501                           	psect	text39
  8502  0F94                     __ptext39:	
  8503 ;; *************** function _I2C_DO_SEND_ADR_WRITE *****************
  8504 ;; Defined at:
  8505 ;;		line 347 in file "mcc_generated_files/i2c_master.c"
  8506 ;; Parameters:    Size  Location     Type
  8507 ;;		None
  8508 ;; Auto vars:     Size  Location     Type
  8509 ;;		None
  8510 ;; Return value:  Size  Location     Type
  8511 ;;                  1    wreg      enum E12103
  8512 ;; Registers used:
  8513 ;;		wreg, status,2, status,0, pclath, cstack
  8514 ;; Tracked objects:
  8515 ;;		On entry : 0/0
  8516 ;;		On exit  : 0/0
  8517 ;;		Unchanged: 0/0
  8518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8523 ;;Total ram usage:        0 bytes
  8524 ;; Hardware stack levels used:    1
  8525 ;; Hardware stack levels required when called:   14
  8526 ;; This function calls:
  8527 ;;		_I2C_MasterSendTxData
  8528 ;; This function is called by:
  8529 ;;		i1_I2C_MasterFsm
  8530 ;;		_I2C_MasterFsm
  8531 ;; This function uses a non-reentrant model
  8532 ;;
  8533                           
  8534                           
  8535                           ;psect for function _I2C_DO_SEND_ADR_WRITE
  8536  0F94                     _I2C_DO_SEND_ADR_WRITE:	
  8537                           
  8538                           ;Skip over the trampoline to the duplicate function for level 1
  8539  0F94  1C7E               	btfss	126,0
  8540  0F95  2F98               	goto	l4273
  8541  0F96  318E  2EDD         	ljmp	i1l2889
  8542  0F98                     _I2C_DO_SEND_ADR_WRITE$intlevel0:	
  8543  0F98                     l4273:	
  8544                           ;incstack = 0
  8545 ;; hardware stack exceeded
  8546                           ; Regs used in _I2C_DO_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
  8547                           
  8548                           
  8549                           ;i2c_master.c: 349: I2C_Status.addressNackCheck = 1;
  8550  0F98  0021               	movlb	1	; select bank1
  8551  0F99  143C               	bsf	(_I2C_Status^(0+128)+28),0
  8552                           
  8553                           ;i2c_master.c: 350: I2C_MasterSendTxData(I2C_Status.address << 1);
  8554  0F9A  3536               	lslf	(_I2C_Status^(0+128)+22),w
  8555  0F9B  318E  26AD         	fcall	_I2C_MasterSendTxData
  8556                           
  8557                           ;i2c_master.c: 351: return I2C_TX;
  8558  0F9D  3003               	movlw	3
  8559  0F9E  0008               	return
  8560  0F9F                     __end_of_I2C_DO_SEND_ADR_WRITE:	
  8561                           
  8562                           	psect	text40
  8563  0FCE                     __ptext40:	
  8564 ;; *************** function _I2C_DO_SEND_ADR_READ *****************
  8565 ;; Defined at:
  8566 ;;		line 340 in file "mcc_generated_files/i2c_master.c"
  8567 ;; Parameters:    Size  Location     Type
  8568 ;;		None
  8569 ;; Auto vars:     Size  Location     Type
  8570 ;;		None
  8571 ;; Return value:  Size  Location     Type
  8572 ;;                  1    wreg      enum E12103
  8573 ;; Registers used:
  8574 ;;		wreg, status,2, status,0, pclath, cstack
  8575 ;; Tracked objects:
  8576 ;;		On entry : 0/0
  8577 ;;		On exit  : 0/0
  8578 ;;		Unchanged: 0/0
  8579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8583 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8584 ;;Total ram usage:        0 bytes
  8585 ;; Hardware stack levels used:    1
  8586 ;; Hardware stack levels required when called:   14
  8587 ;; This function calls:
  8588 ;;		_I2C_MasterSendTxData
  8589 ;; This function is called by:
  8590 ;;		i1_I2C_MasterFsm
  8591 ;;		_I2C_MasterFsm
  8592 ;; This function uses a non-reentrant model
  8593 ;;
  8594                           
  8595                           
  8596                           ;psect for function _I2C_DO_SEND_ADR_READ
  8597  0FCE                     _I2C_DO_SEND_ADR_READ:	
  8598                           
  8599                           ;Skip over the trampoline to the duplicate function for level 1
  8600  0FCE  1C7E               	btfss	126,0
  8601  0FCF  2FD2               	goto	l4265
  8602  0FD0  318E  2EF3         	ljmp	i1l2881
  8603  0FD2                     _I2C_DO_SEND_ADR_READ$intlevel0:	
  8604  0FD2                     l4265:	
  8605                           ;incstack = 0
  8606 ;; hardware stack exceeded
  8607                           ; Regs used in _I2C_DO_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
  8608                           
  8609                           
  8610                           ;i2c_master.c: 342: I2C_Status.addressNackCheck = 1;
  8611  0FD2  0021               	movlb	1	; select bank1
  8612  0FD3  143C               	bsf	(_I2C_Status^(0+128)+28),0
  8613                           
  8614                           ;i2c_master.c: 343: I2C_MasterSendTxData(I2C_Status.address << 1 | 1);
  8615  0FD4  1403               	setc
  8616  0FD5  0D36               	rlf	(_I2C_Status^(0+128)+22),w
  8617  0FD6  318E  26AD         	fcall	_I2C_MasterSendTxData
  8618                           
  8619                           ;i2c_master.c: 344: return I2C_RCEN;
  8620  0FD8  3005               	movlw	5
  8621  0FD9  0008               	return
  8622  0FDA                     __end_of_I2C_DO_SEND_ADR_READ:	
  8623                           
  8624                           	psect	text41
  8625  0F3C                     __ptext41:	
  8626 ;; *************** function _I2C_DO_IDLE *****************
  8627 ;; Defined at:
  8628 ;;		line 333 in file "mcc_generated_files/i2c_master.c"
  8629 ;; Parameters:    Size  Location     Type
  8630 ;;		None
  8631 ;; Auto vars:     Size  Location     Type
  8632 ;;		None
  8633 ;; Return value:  Size  Location     Type
  8634 ;;                  1    wreg      enum E12103
  8635 ;; Registers used:
  8636 ;;		wreg, status,2
  8637 ;; Tracked objects:
  8638 ;;		On entry : 0/0
  8639 ;;		On exit  : 0/0
  8640 ;;		Unchanged: 0/0
  8641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8645 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8646 ;;Total ram usage:        0 bytes
  8647 ;; Hardware stack levels used:    1
  8648 ;; Hardware stack levels required when called:   13
  8649 ;; This function calls:
  8650 ;;		Nothing
  8651 ;; This function is called by:
  8652 ;;		i1_I2C_MasterFsm
  8653 ;;		_I2C_MasterFsm
  8654 ;; This function uses a non-reentrant model
  8655 ;;
  8656                           
  8657                           
  8658                           ;psect for function _I2C_DO_IDLE
  8659  0F3C                     _I2C_DO_IDLE:	
  8660                           
  8661                           ;Skip over the trampoline to the duplicate function for level 1
  8662  0F3C  1C7E               	btfss	126,0
  8663  0F3D  2F40               	goto	l4257
  8664  0F3E  318E  2E81         	ljmp	i1l2873
  8665  0F40                     _I2C_DO_IDLE$intlevel0:	
  8666  0F40                     l4257:	
  8667                           ;incstack = 0
  8668 ;; hardware stack exceeded
  8669                           ; Regs used in _I2C_DO_IDLE: [wreg+status,2]
  8670                           
  8671                           
  8672                           ;i2c_master.c: 335: I2C_Status.busy = 0;
  8673  0F40  0021               	movlb	1	; select bank1
  8674  0F41  10BC               	bcf	(_I2C_Status^(0+128)+28),1
  8675                           
  8676                           ;i2c_master.c: 336: I2C_Status.error = I2C_NOERR;
  8677  0F42  01BB               	clrf	(_I2C_Status^(0+128)+27)
  8678                           
  8679                           ;i2c_master.c: 337: return I2C_RESET;
  8680  0F43  300E               	movlw	14
  8681  0F44  0008               	return
  8682  0F45                     __end_of_I2C_DO_IDLE:	
  8683                           
  8684                           	psect	text42
  8685  04DE                     __ptext42:	
  8686 ;; *************** function _I2C_DO_TX_EMPTY *****************
  8687 ;; Defined at:
  8688 ;;		line 409 in file "mcc_generated_files/i2c_master.c"
  8689 ;; Parameters:    Size  Location     Type
  8690 ;;		None
  8691 ;; Auto vars:     Size  Location     Type
  8692 ;;		None
  8693 ;; Return value:  Size  Location     Type
  8694 ;;                  1    wreg      enum E12103
  8695 ;; Registers used:
  8696 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8697 ;; Tracked objects:
  8698 ;;		On entry : 0/0
  8699 ;;		On exit  : 0/0
  8700 ;;		Unchanged: 0/0
  8701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8704 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8705 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8706 ;;Total ram usage:        1 bytes
  8707 ;; Hardware stack levels used:    1
  8708 ;; Hardware stack levels required when called:   16
  8709 ;; This function calls:
  8710 ;;		Absolute function
  8711 ;;		_I2C_CallbackReturnReset
  8712 ;;		_I2C_CallbackReturnStop
  8713 ;;		_I2C_DO_SEND_RESTART
  8714 ;;		_I2C_DO_SEND_STOP
  8715 ;;		_I2C_MasterSetIrq
  8716 ;;		_rd1RegCompleteHandler
  8717 ;;		_rd2RegCompleteHandler
  8718 ;;		_rdBlkRegCompleteHandler
  8719 ;;		_wr1RegCompleteHandler
  8720 ;;		_wr2RegCompleteHandler
  8721 ;; This function is called by:
  8722 ;;		i1_I2C_MasterFsm
  8723 ;;		_I2C_MasterFsm
  8724 ;; This function uses a non-reentrant model
  8725 ;;
  8726                           
  8727                           
  8728                           ;psect for function _I2C_DO_TX_EMPTY
  8729  04DE                     _I2C_DO_TX_EMPTY:	
  8730                           
  8731                           ;Skip over the trampoline to the duplicate function for level 1
  8732  04DE  1C7E               	btfss	126,0
  8733  04DF  2CE2               	goto	l6093
  8734  04E0  3185  2DA9         	ljmp	i1l5983
  8735  04E2                     _I2C_DO_TX_EMPTY$intlevel0:	
  8736  04E2                     l6093:	
  8737                           ;incstack = 0
  8738 ;; hardware stack exceeded
  8739                           ; Regs used in _I2C_DO_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8740                           
  8741                           
  8742                           ;i2c_master.c: 411: I2C_Status.bufferFree = 1;
  8743  04E2  0021               	movlb	1	; select bank1
  8744  04E3  15BC               	bsf	(_I2C_Status^(0+128)+28),3
  8745                           
  8746                           ;i2c_master.c: 412: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
  8747  04E4  2CEF               	goto	l6111
  8748  04E5                     l6095:	
  8749                           ;i2c_master.c: 413: {
  8750                           ;i2c_master.c: 414: case I2C_RESTART_READ:
  8751                           
  8752                           
  8753                           ;i2c_master.c: 415: case I2C_RESTART_WRITE:
  8754                           ;i2c_master.c: 416: return I2C_DO_SEND_RESTART();
  8755  04E5  318F  270B         	fcall	_I2C_DO_SEND_RESTART
  8756  04E7  0008               	return
  8757  04E8                     l6099:	
  8758                           ;i2c_master.c: 417: case I2C_CONTINUE:
  8759                           
  8760                           
  8761                           ;i2c_master.c: 418: I2C_MasterSetIrq();
  8762  04E8  318E  2630         	fcall	_I2C_MasterSetIrq
  8763                           
  8764                           ;i2c_master.c: 419: return I2C_TX;
  8765  04EA  3003               	movlw	3
  8766  04EB  0008               	return
  8767  04EC                     l6105:	
  8768                           ;i2c_master.c: 421: case I2C_STOP:
  8769                           
  8770                           ;i2c_master.c: 420: default:
  8771                           
  8772                           
  8773                           ;i2c_master.c: 422: return I2C_DO_SEND_STOP();
  8774  04EC  318F  2713         	fcall	_I2C_DO_SEND_STOP
  8775                           
  8776                           ;i2c_master.c: 423: }
  8777  04EE  0008               	return
  8778  04EF                     l6111:	
  8779  04EF  0021               	movlb	1	; select bank1
  8780  04F0  082C               	movf	(low ((_I2C_Status| 0+12)))^(0+128),w
  8781  04F1  0020               	movlb	0	; select bank0
  8782  04F2  00D5               	movwf	??_I2C_DO_TX_EMPTY
  8783  04F3  0855               	movf	??_I2C_DO_TX_EMPTY,w
  8784  04F4  00D4               	movwf	I2C_CallbackReturnReset@funPtr
  8785  04F5  0021               	movlb	1	; select bank1
  8786  04F6  0821               	movf	(_I2C_Status+1)^(0+128),w
  8787  04F7  008A               	movwf	10
  8788  04F8  0820               	movf	_I2C_Status^(0+128),w
  8789  04F9  000A               	callw
  8790  04FA  3184               	pagesel	$
  8791                           
  8792                           ; Switch size 1, requested type "space"
  8793                           ; Number of cases is 4, Range of values is 1 to 4
  8794                           ; switch strategies available:
  8795                           ; Name         Instructions Cycles
  8796                           ; simple_byte           13     7 (average)
  8797                           ; direct_byte           17     9 (fixed)
  8798                           ; jumptable            263     9 (fixed)
  8799                           ;	Chosen strategy is simple_byte
  8800  04FB  3A01               	xorlw	1	; case 1
  8801  04FC  1903               	skipnz
  8802  04FD  2CEC               	goto	l6105
  8803  04FE  3A03               	xorlw	3	; case 2
  8804  04FF  1903               	skipnz
  8805  0500  2CE5               	goto	l6095
  8806  0501  3A01               	xorlw	1	; case 3
  8807  0502  1903               	skipnz
  8808  0503  2CE5               	goto	l6095
  8809  0504  3A07               	xorlw	7	; case 4
  8810  0505  1903               	skipnz
  8811  0506  2CE8               	goto	l6099
  8812  0507  2CEC               	goto	l6105
  8813  0508  0008               	return
  8814  0509                     __end_of_I2C_DO_TX_EMPTY:	
  8815                           
  8816                           	psect	text43
  8817  0E30                     __ptext43:	
  8818 ;; *************** function _I2C_MasterSetIrq *****************
  8819 ;; Defined at:
  8820 ;;		line 645 in file "mcc_generated_files/i2c_master.c"
  8821 ;; Parameters:    Size  Location     Type
  8822 ;;		None
  8823 ;; Auto vars:     Size  Location     Type
  8824 ;;		None
  8825 ;; Return value:  Size  Location     Type
  8826 ;;                  1    wreg      void 
  8827 ;; Registers used:
  8828 ;;		None
  8829 ;; Tracked objects:
  8830 ;;		On entry : 0/0
  8831 ;;		On exit  : 0/0
  8832 ;;		Unchanged: 0/0
  8833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8838 ;;Total ram usage:        0 bytes
  8839 ;; Hardware stack levels used:    1
  8840 ;; Hardware stack levels required when called:   13
  8841 ;; This function calls:
  8842 ;;		Nothing
  8843 ;; This function is called by:
  8844 ;;		_I2C_DO_TX_EMPTY
  8845 ;; This function uses a non-reentrant model
  8846 ;;
  8847                           
  8848                           
  8849                           ;psect for function _I2C_MasterSetIrq
  8850  0E30                     _I2C_MasterSetIrq:	
  8851                           
  8852                           ;i2c_master.c: 647: PIR1bits.SSP1IF = 1;
  8853                           
  8854                           ;incstack = 0
  8855 ;; hardware stack exceeded
  8856                           ; Regs used in _I2C_MasterSetIrq: []
  8857  0E30  0020               	movlb	0	; select bank0
  8858  0E31  1590               	bsf	16,3	;volatile
  8859  0E32  0008               	return
  8860  0E33                     __end_of_I2C_MasterSetIrq:	
  8861                           
  8862                           	psect	text44
  8863  0EB3                     __ptext44:	
  8864 ;; *************** function _I2C_MasterIsNack *****************
  8865 ;; Defined at:
  8866 ;;		line 598 in file "mcc_generated_files/i2c_master.c"
  8867 ;; Parameters:    Size  Location     Type
  8868 ;;		None
  8869 ;; Auto vars:     Size  Location     Type
  8870 ;;		None
  8871 ;; Return value:  Size  Location     Type
  8872 ;;                  1    wreg      unsigned char 
  8873 ;; Registers used:
  8874 ;;		wreg, status,2, status,0
  8875 ;; Tracked objects:
  8876 ;;		On entry : 0/0
  8877 ;;		On exit  : 0/0
  8878 ;;		Unchanged: 0/0
  8879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8884 ;;Total ram usage:        0 bytes
  8885 ;; Hardware stack levels used:    1
  8886 ;; Hardware stack levels required when called:   13
  8887 ;; This function calls:
  8888 ;;		Nothing
  8889 ;; This function is called by:
  8890 ;;		_I2C_MasterFsm
  8891 ;;		_I2C_DO_TX
  8892 ;; This function uses a non-reentrant model
  8893 ;;
  8894                           
  8895                           
  8896                           ;psect for function _I2C_MasterIsNack
  8897  0EB3                     _I2C_MasterIsNack:	
  8898                           
  8899                           ;i2c_master.c: 600: return SSP1CON2bits.ACKSTAT;
  8900                           
  8901                           ;incstack = 0
  8902 ;; hardware stack exceeded
  8903                           ; Regs used in _I2C_MasterIsNack: [wreg+status,2+status,0]
  8904  0EB3  0024               	movlb	4	; select bank4
  8905  0EB4  0E16               	swapf	22,w	;volatile
  8906  0EB5  0C89               	rrf	9,f
  8907  0EB6  0C89               	rrf	9,f
  8908  0EB7  3901               	andlw	1
  8909  0EB8  0008               	return
  8910  0EB9                     __end_of_I2C_MasterIsNack:	
  8911                           
  8912                           	psect	text45
  8913  0EAD                     __ptext45:	
  8914 ;; *************** function _I2C_MasterSendTxData *****************
  8915 ;; Defined at:
  8916 ;;		line 568 in file "mcc_generated_files/i2c_master.c"
  8917 ;; Parameters:    Size  Location     Type
  8918 ;;  data            1    wreg     unsigned char 
  8919 ;; Auto vars:     Size  Location     Type
  8920 ;;  data            1   14[BANK0 ] unsigned char 
  8921 ;; Return value:  Size  Location     Type
  8922 ;;                  1    wreg      void 
  8923 ;; Registers used:
  8924 ;;		wreg
  8925 ;; Tracked objects:
  8926 ;;		On entry : 0/0
  8927 ;;		On exit  : 0/0
  8928 ;;		Unchanged: 0/0
  8929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8931 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8933 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8934 ;;Total ram usage:        1 bytes
  8935 ;; Hardware stack levels used:    1
  8936 ;; Hardware stack levels required when called:   13
  8937 ;; This function calls:
  8938 ;;		Nothing
  8939 ;; This function is called by:
  8940 ;;		_I2C_DO_SEND_ADR_READ
  8941 ;;		_I2C_DO_SEND_ADR_WRITE
  8942 ;;		_I2C_DO_TX
  8943 ;; This function uses a non-reentrant model
  8944 ;;
  8945                           
  8946                           
  8947                           ;psect for function _I2C_MasterSendTxData
  8948  0EAD                     _I2C_MasterSendTxData:	
  8949                           
  8950                           ;incstack = 0
  8951 ;; hardware stack exceeded
  8952                           ; Regs used in _I2C_MasterSendTxData: [wreg]
  8953                           ;I2C_MasterSendTxData@data stored from wreg
  8954  0EAD  0020               	movlb	0	; select bank0
  8955  0EAE  00CB               	movwf	I2C_MasterSendTxData@data
  8956                           
  8957                           ;i2c_master.c: 570: SSP1BUF = data;
  8958  0EAF  084B               	movf	I2C_MasterSendTxData@data,w
  8959  0EB0  0024               	movlb	4	; select bank4
  8960  0EB1  0091               	movwf	17	;volatile
  8961  0EB2  0008               	return
  8962  0EB3                     __end_of_I2C_MasterSendTxData:	
  8963                           
  8964                           	psect	text46
  8965  0E70                     __ptext46:	
  8966 ;; *************** function _I2C_MasterSendAck *****************
  8967 ;; Defined at:
  8968 ;;		line 603 in file "mcc_generated_files/i2c_master.c"
  8969 ;; Parameters:    Size  Location     Type
  8970 ;;		None
  8971 ;; Auto vars:     Size  Location     Type
  8972 ;;		None
  8973 ;; Return value:  Size  Location     Type
  8974 ;;                  1    wreg      void 
  8975 ;; Registers used:
  8976 ;;		None
  8977 ;; Tracked objects:
  8978 ;;		On entry : 0/0
  8979 ;;		On exit  : 0/0
  8980 ;;		Unchanged: 0/0
  8981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8986 ;;Total ram usage:        0 bytes
  8987 ;; Hardware stack levels used:    1
  8988 ;; Hardware stack levels required when called:   13
  8989 ;; This function calls:
  8990 ;;		Nothing
  8991 ;; This function is called by:
  8992 ;;		_I2C_DO_RX
  8993 ;;		_I2C_DO_RX_ACK
  8994 ;; This function uses a non-reentrant model
  8995 ;;
  8996                           
  8997                           
  8998                           ;psect for function _I2C_MasterSendAck
  8999  0E70                     _I2C_MasterSendAck:	
  9000                           
  9001                           ;i2c_master.c: 605: SSP1CON2bits.ACKDT = 0;
  9002                           
  9003                           ;incstack = 0
  9004 ;; hardware stack exceeded
  9005                           ; Regs used in _I2C_MasterSendAck: []
  9006  0E70  0024               	movlb	4	; select bank4
  9007  0E71  1296               	bcf	22,5	;volatile
  9008                           
  9009                           ;i2c_master.c: 606: SSP1CON2bits.ACKEN = 1;
  9010  0E72  1616               	bsf	22,4	;volatile
  9011  0E73  0008               	return
  9012  0E74                     __end_of_I2C_MasterSendAck:	
  9013                           
  9014                           	psect	text47
  9015  0E2D                     __ptext47:	
  9016 ;; *************** function _I2C_MasterGetRxData *****************
  9017 ;; Defined at:
  9018 ;;		line 563 in file "mcc_generated_files/i2c_master.c"
  9019 ;; Parameters:    Size  Location     Type
  9020 ;;		None
  9021 ;; Auto vars:     Size  Location     Type
  9022 ;;		None
  9023 ;; Return value:  Size  Location     Type
  9024 ;;                  1    wreg      unsigned char 
  9025 ;; Registers used:
  9026 ;;		wreg
  9027 ;; Tracked objects:
  9028 ;;		On entry : 0/0
  9029 ;;		On exit  : 0/0
  9030 ;;		Unchanged: 0/0
  9031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9036 ;;Total ram usage:        0 bytes
  9037 ;; Hardware stack levels used:    1
  9038 ;; Hardware stack levels required when called:   13
  9039 ;; This function calls:
  9040 ;;		Nothing
  9041 ;; This function is called by:
  9042 ;;		_I2C_DO_RX
  9043 ;; This function uses a non-reentrant model
  9044 ;;
  9045                           
  9046                           
  9047                           ;psect for function _I2C_MasterGetRxData
  9048  0E2D                     _I2C_MasterGetRxData:	
  9049                           
  9050                           ;i2c_master.c: 565: return SSP1BUF;
  9051                           
  9052                           ;incstack = 0
  9053 ;; hardware stack exceeded
  9054                           ; Regs used in _I2C_MasterGetRxData: [wreg]
  9055  0E2D  0024               	movlb	4	; select bank4
  9056  0E2E  0811               	movf	17,w	;volatile
  9057  0E2F  0008               	return
  9058  0E30                     __end_of_I2C_MasterGetRxData:	
  9059                           
  9060                           	psect	text48
  9061  0E6C                     __ptext48:	
  9062 ;; *************** function _I2C_MasterSendNack *****************
  9063 ;; Defined at:
  9064 ;;		line 609 in file "mcc_generated_files/i2c_master.c"
  9065 ;; Parameters:    Size  Location     Type
  9066 ;;		None
  9067 ;; Auto vars:     Size  Location     Type
  9068 ;;		None
  9069 ;; Return value:  Size  Location     Type
  9070 ;;                  1    wreg      void 
  9071 ;; Registers used:
  9072 ;;		None
  9073 ;; Tracked objects:
  9074 ;;		On entry : 0/0
  9075 ;;		On exit  : 0/0
  9076 ;;		Unchanged: 0/0
  9077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9082 ;;Total ram usage:        0 bytes
  9083 ;; Hardware stack levels used:    1
  9084 ;; Hardware stack levels required when called:   13
  9085 ;; This function calls:
  9086 ;;		Nothing
  9087 ;; This function is called by:
  9088 ;;		_I2C_DO_RX_NACK_STOP
  9089 ;;		_I2C_DO_RX_NACK_RESTART
  9090 ;; This function uses a non-reentrant model
  9091 ;;
  9092                           
  9093                           
  9094                           ;psect for function _I2C_MasterSendNack
  9095  0E6C                     _I2C_MasterSendNack:	
  9096                           
  9097                           ;i2c_master.c: 611: SSP1CON2bits.ACKDT = 1;
  9098                           
  9099                           ;incstack = 0
  9100 ;; hardware stack exceeded
  9101                           ; Regs used in _I2C_MasterSendNack: []
  9102  0E6C  0024               	movlb	4	; select bank4
  9103  0E6D  1696               	bsf	22,5	;volatile
  9104                           
  9105                           ;i2c_master.c: 612: SSP1CON2bits.ACKEN = 1;
  9106  0E6E  1616               	bsf	22,4	;volatile
  9107  0E6F  0008               	return
  9108  0E70                     __end_of_I2C_MasterSendNack:	
  9109                           
  9110                           	psect	text49
  9111  0E2A                     __ptext49:	
  9112 ;; *************** function _I2C_MasterStartRx *****************
  9113 ;; Defined at:
  9114 ;;		line 583 in file "mcc_generated_files/i2c_master.c"
  9115 ;; Parameters:    Size  Location     Type
  9116 ;;		None
  9117 ;; Auto vars:     Size  Location     Type
  9118 ;;		None
  9119 ;; Return value:  Size  Location     Type
  9120 ;;                  1    wreg      void 
  9121 ;; Registers used:
  9122 ;;		None
  9123 ;; Tracked objects:
  9124 ;;		On entry : 0/0
  9125 ;;		On exit  : 0/0
  9126 ;;		Unchanged: 0/0
  9127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9132 ;;Total ram usage:        0 bytes
  9133 ;; Hardware stack levels used:    1
  9134 ;; Hardware stack levels required when called:   13
  9135 ;; This function calls:
  9136 ;;		Nothing
  9137 ;; This function is called by:
  9138 ;;		_I2C_DO_RCEN
  9139 ;; This function uses a non-reentrant model
  9140 ;;
  9141                           
  9142                           
  9143                           ;psect for function _I2C_MasterStartRx
  9144  0E2A                     _I2C_MasterStartRx:	
  9145                           
  9146                           ;i2c_master.c: 585: SSP1CON2bits.RCEN = 1;
  9147                           
  9148                           ;incstack = 0
  9149 ;; hardware stack exceeded
  9150                           ; Regs used in _I2C_MasterStartRx: []
  9151  0E2A  0024               	movlb	4	; select bank4
  9152  0E2B  1596               	bsf	22,3	;volatile
  9153  0E2C  0008               	return
  9154  0E2D                     __end_of_I2C_MasterStartRx:	
  9155                           
  9156                           	psect	text50
  9157  0EA7                     __ptext50:	
  9158 ;; *************** function _I2C_CallbackReturnReset *****************
  9159 ;; Defined at:
  9160 ;;		line 525 in file "mcc_generated_files/i2c_master.c"
  9161 ;; Parameters:    Size  Location     Type
  9162 ;;  funPtr          1   23[BANK0 ] PTR void 
  9163 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  9164 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  9165 ;; Auto vars:     Size  Location     Type
  9166 ;;		None
  9167 ;; Return value:  Size  Location     Type
  9168 ;;                  1    wreg      enum E97
  9169 ;; Registers used:
  9170 ;;		wreg
  9171 ;; Tracked objects:
  9172 ;;		On entry : 0/0
  9173 ;;		On exit  : 0/0
  9174 ;;		Unchanged: 0/0
  9175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9176 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9179 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9180 ;;Total ram usage:        1 bytes
  9181 ;; Hardware stack levels used:    1
  9182 ;; Hardware stack levels required when called:   13
  9183 ;; This function calls:
  9184 ;;		Nothing
  9185 ;; This function is called by:
  9186 ;;		_I2C_Open
  9187 ;;		i1_I2C_DO_TX
  9188 ;;		i1_I2C_DO_RX
  9189 ;;		i1_I2C_DO_TX_EMPTY
  9190 ;;		i1_I2C_DO_ADDRESS_NACK
  9191 ;;		_I2C_DO_TX
  9192 ;;		_I2C_DO_RX
  9193 ;;		_I2C_DO_TX_EMPTY
  9194 ;;		_I2C_DO_ADDRESS_NACK
  9195 ;;		_I2C_DO_RX_EMPTY
  9196 ;; This function uses a non-reentrant model
  9197 ;;
  9198                           
  9199                           
  9200                           ;psect for function _I2C_CallbackReturnReset
  9201  0EA7                     _I2C_CallbackReturnReset:	
  9202                           
  9203                           ;Skip over the trampoline to the duplicate function for level 1
  9204  0EA7  1C7E               	btfss	126,0
  9205  0EA8  2EAB               	goto	l4243
  9206  0EA9  3180  2802         	ljmp	i1l2847
  9207  0EAB                     _I2C_CallbackReturnReset$intlevel0:	
  9208  0EAB                     l4243:	
  9209                           ;incstack = 0
  9210 ;; hardware stack exceeded
  9211                           ; Regs used in _I2C_CallbackReturnReset: [wreg]
  9212                           
  9213                           
  9214                           ;i2c_master.c: 527: return I2C_RESET_LINK;
  9215  0EAB  3005               	movlw	5
  9216  0EAC  0008               	return
  9217  0EAD                     __end_of_I2C_CallbackReturnReset:	
  9218                           
  9219                           	psect	text51
  9220  0EA1                     __ptext51:	
  9221 ;; *************** function _I2C_CallbackReturnStop *****************
  9222 ;; Defined at:
  9223 ;;		line 520 in file "mcc_generated_files/i2c_master.c"
  9224 ;; Parameters:    Size  Location     Type
  9225 ;;  funPtr          1   23[BANK0 ] PTR void 
  9226 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  9227 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  9228 ;; Auto vars:     Size  Location     Type
  9229 ;;		None
  9230 ;; Return value:  Size  Location     Type
  9231 ;;                  1    wreg      enum E97
  9232 ;; Registers used:
  9233 ;;		wreg
  9234 ;; Tracked objects:
  9235 ;;		On entry : 0/0
  9236 ;;		On exit  : 0/0
  9237 ;;		Unchanged: 0/0
  9238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9239 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9242 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9243 ;;Total ram usage:        1 bytes
  9244 ;; Hardware stack levels used:    1
  9245 ;; Hardware stack levels required when called:   13
  9246 ;; This function calls:
  9247 ;;		Nothing
  9248 ;; This function is called by:
  9249 ;;		_I2C_Open
  9250 ;;		_I2C_SetCallback
  9251 ;;		i1_I2C_DO_TX
  9252 ;;		i1_I2C_DO_RX
  9253 ;;		i1_I2C_DO_TX_EMPTY
  9254 ;;		i1_I2C_DO_ADDRESS_NACK
  9255 ;;		_I2C_DO_TX
  9256 ;;		_I2C_DO_RX
  9257 ;;		_I2C_DO_TX_EMPTY
  9258 ;;		_I2C_DO_ADDRESS_NACK
  9259 ;;		_I2C_DO_RX_EMPTY
  9260 ;; This function uses a non-reentrant model
  9261 ;;
  9262                           
  9263                           
  9264                           ;psect for function _I2C_CallbackReturnStop
  9265  0EA1                     _I2C_CallbackReturnStop:	
  9266                           
  9267                           ;Skip over the trampoline to the duplicate function for level 1
  9268  0EA1  1C7E               	btfss	126,0
  9269  0EA2  2EA5               	goto	l4239
  9270  0EA3  318D  2DF5         	ljmp	i1l2843
  9271  0EA5                     _I2C_CallbackReturnStop$intlevel0:	
  9272  0EA5                     l4239:	
  9273                           ;incstack = 0
  9274 ;; hardware stack exceeded
  9275                           ; Regs used in _I2C_CallbackReturnStop: [wreg]
  9276                           
  9277                           
  9278                           ;i2c_master.c: 522: return I2C_STOP;
  9279  0EA5  3001               	movlw	1
  9280  0EA6  0008               	return
  9281  0EA7                     __end_of_I2C_CallbackReturnStop:	
  9282                           
  9283                           	psect	text52
  9284  0671                     __ptext52:	
  9285 ;; *************** function _rdBlkRegCompleteHandler *****************
  9286 ;; Defined at:
  9287 ;;		line 170 in file "mcc_generated_files/examples/i2c_master_example.c"
  9288 ;; Parameters:    Size  Location     Type
  9289 ;;  ptr             1   23[BANK0 ] PTR void 
  9290 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  9291 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  9292 ;; Auto vars:     Size  Location     Type
  9293 ;;		None
  9294 ;; Return value:  Size  Location     Type
  9295 ;;                  1    wreg      enum E97
  9296 ;; Registers used:
  9297 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9298 ;; Tracked objects:
  9299 ;;		On entry : 0/0
  9300 ;;		On exit  : 0/0
  9301 ;;		Unchanged: 0/0
  9302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9303 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9306 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9307 ;;Total ram usage:        1 bytes
  9308 ;; Hardware stack levels used:    1
  9309 ;; Hardware stack levels required when called:   15
  9310 ;; This function calls:
  9311 ;;		_I2C_SetBuffer
  9312 ;;		_I2C_SetDataCompleteCallback
  9313 ;; This function is called by:
  9314 ;;		_I2C_ReadDataBlock
  9315 ;;		i1_I2C_DO_TX
  9316 ;;		i1_I2C_DO_RX
  9317 ;;		i1_I2C_DO_TX_EMPTY
  9318 ;;		i1_I2C_DO_ADDRESS_NACK
  9319 ;;		_I2C_DO_TX
  9320 ;;		_I2C_DO_RX
  9321 ;;		_I2C_DO_TX_EMPTY
  9322 ;;		_I2C_DO_ADDRESS_NACK
  9323 ;;		_I2C_DO_RX_EMPTY
  9324 ;; This function uses a non-reentrant model
  9325 ;;
  9326                           
  9327                           
  9328                           ;psect for function _rdBlkRegCompleteHandler
  9329  0671                     _rdBlkRegCompleteHandler:	
  9330                           
  9331                           ;Skip over the trampoline to the duplicate function for level 1
  9332  0671  1C7E               	btfss	126,0
  9333  0672  2E75               	goto	l4181
  9334  0673  3186  2EC3         	ljmp	i1l2801
  9335  0675                     _rdBlkRegCompleteHandler$intlevel0:	
  9336  0675                     l4181:	
  9337                           ;incstack = 0
  9338 ;; hardware stack exceeded
  9339                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  9340                           
  9341                           
  9342                           ;i2c_master_example.c: 172: I2C_SetBuffer(((i2c_buffer_t *)ptr)->data,((i2c_buffer_t*)pt
      +                          r)->len);
  9343  0675  0020               	movlb	0	; select bank0
  9344  0676  0854               	movf	rdBlkRegCompleteHandler@ptr,w
  9345  0677  0086               	movwf	6
  9346  0678  0187               	clrf	7
  9347  0679  3F40               	moviw [0]fsr1
  9348  067A  00CB               	movwf	I2C_SetBuffer@bufferSize
  9349  067B  3F41               	moviw [1]fsr1
  9350  067C  00CC               	movwf	I2C_SetBuffer@bufferSize+1
  9351  067D  0854               	movf	rdBlkRegCompleteHandler@ptr,w
  9352  067E  3E02               	addlw	2
  9353  067F  0086               	movwf	6
  9354  0680  0187               	clrf	7
  9355  0681  0801               	movf	1,w
  9356  0682  3187  2789  3186   	fcall	_I2C_SetBuffer
  9357                           
  9358                           ;i2c_master_example.c: 173: I2C_SetDataCompleteCallback((0),(0));
  9359  0685  3000               	movlw	0
  9360  0686  0020               	movlb	0	; select bank0
  9361  0687  00D0               	movwf	I2C_SetDataCompleteCallback@cb
  9362  0688  00D1               	movwf	I2C_SetDataCompleteCallback@cb+1
  9363  0689  01D2               	clrf	I2C_SetDataCompleteCallback@ptr
  9364  068A  318F  27E6         	fcall	_I2C_SetDataCompleteCallback
  9365                           
  9366                           ;i2c_master_example.c: 174: return I2C_RESTART_READ;
  9367  068C  3002               	movlw	2
  9368  068D  0008               	return
  9369  068E                     __end_of_rdBlkRegCompleteHandler:	
  9370                           
  9371                           	psect	text53
  9372  06F1                     __ptext53:	
  9373 ;; *************** function _wr1RegCompleteHandler *****************
  9374 ;; Defined at:
  9375 ;;		line 156 in file "mcc_generated_files/examples/i2c_master_example.c"
  9376 ;; Parameters:    Size  Location     Type
  9377 ;;  ptr             1   23[BANK0 ] PTR void 
  9378 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  9379 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  9380 ;; Auto vars:     Size  Location     Type
  9381 ;;		None
  9382 ;; Return value:  Size  Location     Type
  9383 ;;                  1    wreg      enum E97
  9384 ;; Registers used:
  9385 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9386 ;; Tracked objects:
  9387 ;;		On entry : 0/0
  9388 ;;		On exit  : 0/0
  9389 ;;		Unchanged: 0/0
  9390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9391 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9394 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9395 ;;Total ram usage:        1 bytes
  9396 ;; Hardware stack levels used:    1
  9397 ;; Hardware stack levels required when called:   15
  9398 ;; This function calls:
  9399 ;;		_I2C_SetBuffer
  9400 ;;		_I2C_SetDataCompleteCallback
  9401 ;; This function is called by:
  9402 ;;		_I2C_Write1ByteRegister
  9403 ;;		i1_I2C_DO_TX
  9404 ;;		i1_I2C_DO_RX
  9405 ;;		i1_I2C_DO_TX_EMPTY
  9406 ;;		i1_I2C_DO_ADDRESS_NACK
  9407 ;;		_I2C_DO_TX
  9408 ;;		_I2C_DO_RX
  9409 ;;		_I2C_DO_TX_EMPTY
  9410 ;;		_I2C_DO_ADDRESS_NACK
  9411 ;;		_I2C_DO_RX_EMPTY
  9412 ;; This function uses a non-reentrant model
  9413 ;;
  9414                           
  9415                           
  9416                           ;psect for function _wr1RegCompleteHandler
  9417  06F1                     _wr1RegCompleteHandler:	
  9418                           
  9419                           ;Skip over the trampoline to the duplicate function for level 1
  9420  06F1  1C7E               	btfss	126,0
  9421  06F2  2EF5               	goto	l4165
  9422  06F3  3187  2FB2         	ljmp	i1l2785
  9423  06F5                     _wr1RegCompleteHandler$intlevel0:	
  9424  06F5                     l4165:	
  9425                           ;incstack = 0
  9426 ;; hardware stack exceeded
  9427                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9428                           
  9429                           
  9430                           ;i2c_master_example.c: 158: I2C_SetBuffer(ptr,1);
  9431  06F5  3001               	movlw	1
  9432  06F6  0020               	movlb	0	; select bank0
  9433  06F7  00CB               	movwf	I2C_SetBuffer@bufferSize
  9434  06F8  3000               	movlw	0
  9435  06F9  00CC               	movwf	I2C_SetBuffer@bufferSize+1
  9436  06FA  0854               	movf	wr1RegCompleteHandler@ptr,w
  9437  06FB  3187  2789  3186   	fcall	_I2C_SetBuffer
  9438                           
  9439                           ;i2c_master_example.c: 159: I2C_SetDataCompleteCallback((0),(0));
  9440  06FE  3000               	movlw	0
  9441  06FF  0020               	movlb	0	; select bank0
  9442  0700  00D0               	movwf	I2C_SetDataCompleteCallback@cb
  9443  0701  00D1               	movwf	I2C_SetDataCompleteCallback@cb+1
  9444  0702  01D2               	clrf	I2C_SetDataCompleteCallback@ptr
  9445  0703  318F  27E6         	fcall	_I2C_SetDataCompleteCallback
  9446                           
  9447                           ;i2c_master_example.c: 160: return I2C_CONTINUE;
  9448  0705  3004               	movlw	4
  9449  0706  0008               	return
  9450  0707                     __end_of_wr1RegCompleteHandler:	
  9451                           
  9452                           	psect	text54
  9453  0707                     __ptext54:	
  9454 ;; *************** function _rd2RegCompleteHandler *****************
  9455 ;; Defined at:
  9456 ;;		line 149 in file "mcc_generated_files/examples/i2c_master_example.c"
  9457 ;; Parameters:    Size  Location     Type
  9458 ;;  ptr             1   23[BANK0 ] PTR void 
  9459 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  9460 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  9461 ;; Auto vars:     Size  Location     Type
  9462 ;;		None
  9463 ;; Return value:  Size  Location     Type
  9464 ;;                  1    wreg      enum E97
  9465 ;; Registers used:
  9466 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9467 ;; Tracked objects:
  9468 ;;		On entry : 0/0
  9469 ;;		On exit  : 0/0
  9470 ;;		Unchanged: 0/0
  9471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9472 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9475 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9476 ;;Total ram usage:        1 bytes
  9477 ;; Hardware stack levels used:    1
  9478 ;; Hardware stack levels required when called:   15
  9479 ;; This function calls:
  9480 ;;		_I2C_SetBuffer
  9481 ;;		_I2C_SetDataCompleteCallback
  9482 ;; This function is called by:
  9483 ;;		_I2C_Read2ByteRegister
  9484 ;;		i1_I2C_DO_TX
  9485 ;;		i1_I2C_DO_RX
  9486 ;;		i1_I2C_DO_TX_EMPTY
  9487 ;;		i1_I2C_DO_ADDRESS_NACK
  9488 ;;		_I2C_DO_TX
  9489 ;;		_I2C_DO_RX
  9490 ;;		_I2C_DO_TX_EMPTY
  9491 ;;		_I2C_DO_ADDRESS_NACK
  9492 ;;		_I2C_DO_RX_EMPTY
  9493 ;; This function uses a non-reentrant model
  9494 ;;
  9495                           
  9496                           
  9497                           ;psect for function _rd2RegCompleteHandler
  9498  0707                     _rd2RegCompleteHandler:	
  9499                           
  9500                           ;Skip over the trampoline to the duplicate function for level 1
  9501  0707  1C7E               	btfss	126,0
  9502  0708  2F0B               	goto	l4157
  9503  0709  3187  2FC2         	ljmp	i1l2777
  9504  070B                     _rd2RegCompleteHandler$intlevel0:	
  9505  070B                     l4157:	
  9506                           ;incstack = 0
  9507 ;; hardware stack exceeded
  9508                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9509                           
  9510                           
  9511                           ;i2c_master_example.c: 151: I2C_SetBuffer(ptr,2);
  9512  070B  3002               	movlw	2
  9513  070C  0020               	movlb	0	; select bank0
  9514  070D  00CB               	movwf	I2C_SetBuffer@bufferSize
  9515  070E  3000               	movlw	0
  9516  070F  00CC               	movwf	I2C_SetBuffer@bufferSize+1
  9517  0710  0854               	movf	rd2RegCompleteHandler@ptr,w
  9518  0711  3187  2789  3187   	fcall	_I2C_SetBuffer
  9519                           
  9520                           ;i2c_master_example.c: 152: I2C_SetDataCompleteCallback((0),(0));
  9521  0714  3000               	movlw	0
  9522  0715  0020               	movlb	0	; select bank0
  9523  0716  00D0               	movwf	I2C_SetDataCompleteCallback@cb
  9524  0717  00D1               	movwf	I2C_SetDataCompleteCallback@cb+1
  9525  0718  01D2               	clrf	I2C_SetDataCompleteCallback@ptr
  9526  0719  318F  27E6         	fcall	_I2C_SetDataCompleteCallback
  9527                           
  9528                           ;i2c_master_example.c: 153: return I2C_RESTART_READ;
  9529  071B  3002               	movlw	2
  9530  071C  0008               	return
  9531  071D                     __end_of_rd2RegCompleteHandler:	
  9532                           
  9533                           	psect	text55
  9534  071D                     __ptext55:	
  9535 ;; *************** function _rd1RegCompleteHandler *****************
  9536 ;; Defined at:
  9537 ;;		line 142 in file "mcc_generated_files/examples/i2c_master_example.c"
  9538 ;; Parameters:    Size  Location     Type
  9539 ;;  ptr             1   23[BANK0 ] PTR void 
  9540 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  9541 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  9542 ;; Auto vars:     Size  Location     Type
  9543 ;;		None
  9544 ;; Return value:  Size  Location     Type
  9545 ;;                  1    wreg      enum E97
  9546 ;; Registers used:
  9547 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9548 ;; Tracked objects:
  9549 ;;		On entry : 0/0
  9550 ;;		On exit  : 0/0
  9551 ;;		Unchanged: 0/0
  9552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9553 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9556 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9557 ;;Total ram usage:        1 bytes
  9558 ;; Hardware stack levels used:    1
  9559 ;; Hardware stack levels required when called:   15
  9560 ;; This function calls:
  9561 ;;		_I2C_SetBuffer
  9562 ;;		_I2C_SetDataCompleteCallback
  9563 ;; This function is called by:
  9564 ;;		i1_I2C_DO_TX
  9565 ;;		i1_I2C_DO_RX
  9566 ;;		i1_I2C_DO_TX_EMPTY
  9567 ;;		i1_I2C_DO_ADDRESS_NACK
  9568 ;;		_I2C_DO_TX
  9569 ;;		_I2C_DO_RX
  9570 ;;		_I2C_DO_TX_EMPTY
  9571 ;;		_I2C_DO_ADDRESS_NACK
  9572 ;;		_I2C_DO_RX_EMPTY
  9573 ;; This function uses a non-reentrant model
  9574 ;;
  9575                           
  9576                           
  9577                           ;psect for function _rd1RegCompleteHandler
  9578  071D                     _rd1RegCompleteHandler:	
  9579                           
  9580                           ;Skip over the trampoline to the duplicate function for level 1
  9581  071D  1C7E               	btfss	126,0
  9582  071E  2F21               	goto	l4149
  9583  071F  3187  2FD2         	ljmp	i1l2769
  9584  0721                     _rd1RegCompleteHandler$intlevel0:	
  9585  0721                     l4149:	
  9586                           ;incstack = 0
  9587 ;; hardware stack exceeded
  9588                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9589                           
  9590                           
  9591                           ;i2c_master_example.c: 144: I2C_SetBuffer(ptr,1);
  9592  0721  3001               	movlw	1
  9593  0722  0020               	movlb	0	; select bank0
  9594  0723  00CB               	movwf	I2C_SetBuffer@bufferSize
  9595  0724  3000               	movlw	0
  9596  0725  00CC               	movwf	I2C_SetBuffer@bufferSize+1
  9597  0726  0854               	movf	rd1RegCompleteHandler@ptr,w
  9598  0727  3187  2789  3187   	fcall	_I2C_SetBuffer
  9599                           
  9600                           ;i2c_master_example.c: 145: I2C_SetDataCompleteCallback((0),(0));
  9601  072A  3000               	movlw	0
  9602  072B  0020               	movlb	0	; select bank0
  9603  072C  00D0               	movwf	I2C_SetDataCompleteCallback@cb
  9604  072D  00D1               	movwf	I2C_SetDataCompleteCallback@cb+1
  9605  072E  01D2               	clrf	I2C_SetDataCompleteCallback@ptr
  9606  072F  318F  27E6         	fcall	_I2C_SetDataCompleteCallback
  9607                           
  9608                           ;i2c_master_example.c: 146: return I2C_RESTART_READ;
  9609  0731  3002               	movlw	2
  9610  0732  0008               	return
  9611  0733                     __end_of_rd1RegCompleteHandler:	
  9612                           
  9613                           	psect	text56
  9614  0733                     __ptext56:	
  9615 ;; *************** function _wr2RegCompleteHandler *****************
  9616 ;; Defined at:
  9617 ;;		line 163 in file "mcc_generated_files/examples/i2c_master_example.c"
  9618 ;; Parameters:    Size  Location     Type
  9619 ;;  ptr             1   23[BANK0 ] PTR void 
  9620 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  9621 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  9622 ;; Auto vars:     Size  Location     Type
  9623 ;;		None
  9624 ;; Return value:  Size  Location     Type
  9625 ;;                  1    wreg      enum E97
  9626 ;; Registers used:
  9627 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9628 ;; Tracked objects:
  9629 ;;		On entry : 0/0
  9630 ;;		On exit  : 0/0
  9631 ;;		Unchanged: 0/0
  9632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9633 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9636 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9637 ;;Total ram usage:        1 bytes
  9638 ;; Hardware stack levels used:    1
  9639 ;; Hardware stack levels required when called:   15
  9640 ;; This function calls:
  9641 ;;		_I2C_SetBuffer
  9642 ;;		_I2C_SetDataCompleteCallback
  9643 ;; This function is called by:
  9644 ;;		_I2C_Write2ByteRegister
  9645 ;;		i1_I2C_DO_TX
  9646 ;;		i1_I2C_DO_RX
  9647 ;;		i1_I2C_DO_TX_EMPTY
  9648 ;;		i1_I2C_DO_ADDRESS_NACK
  9649 ;;		_I2C_DO_TX
  9650 ;;		_I2C_DO_RX
  9651 ;;		_I2C_DO_TX_EMPTY
  9652 ;;		_I2C_DO_ADDRESS_NACK
  9653 ;;		_I2C_DO_RX_EMPTY
  9654 ;; This function uses a non-reentrant model
  9655 ;;
  9656                           
  9657                           
  9658                           ;psect for function _wr2RegCompleteHandler
  9659  0733                     _wr2RegCompleteHandler:	
  9660                           
  9661                           ;Skip over the trampoline to the duplicate function for level 1
  9662  0733  1C7E               	btfss	126,0
  9663  0734  2F37               	goto	l4173
  9664  0735  3187  2FE2         	ljmp	i1l2793
  9665  0737                     _wr2RegCompleteHandler$intlevel0:	
  9666  0737                     l4173:	
  9667                           ;incstack = 0
  9668 ;; hardware stack exceeded
  9669                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9670                           
  9671                           
  9672                           ;i2c_master_example.c: 165: I2C_SetBuffer(ptr,2);
  9673  0737  3002               	movlw	2
  9674  0738  0020               	movlb	0	; select bank0
  9675  0739  00CB               	movwf	I2C_SetBuffer@bufferSize
  9676  073A  3000               	movlw	0
  9677  073B  00CC               	movwf	I2C_SetBuffer@bufferSize+1
  9678  073C  0854               	movf	wr2RegCompleteHandler@ptr,w
  9679  073D  3187  2789  3187   	fcall	_I2C_SetBuffer
  9680                           
  9681                           ;i2c_master_example.c: 166: I2C_SetDataCompleteCallback((0),(0));
  9682  0740  3000               	movlw	0
  9683  0741  0020               	movlb	0	; select bank0
  9684  0742  00D0               	movwf	I2C_SetDataCompleteCallback@cb
  9685  0743  00D1               	movwf	I2C_SetDataCompleteCallback@cb+1
  9686  0744  01D2               	clrf	I2C_SetDataCompleteCallback@ptr
  9687  0745  318F  27E6         	fcall	_I2C_SetDataCompleteCallback
  9688                           
  9689                           ;i2c_master_example.c: 167: return I2C_CONTINUE;
  9690  0747  3004               	movlw	4
  9691  0748  0008               	return
  9692  0749                     __end_of_wr2RegCompleteHandler:	
  9693                           
  9694                           	psect	text57
  9695  0FE6                     __ptext57:	
  9696 ;; *************** function _I2C_SetDataCompleteCallback *****************
  9697 ;; Defined at:
  9698 ;;		line 273 in file "mcc_generated_files/i2c_master.c"
  9699 ;; Parameters:    Size  Location     Type
  9700 ;;  cb              2   19[BANK0 ] PTR FTN(PTR void ,)enum 
  9701 ;;		 -> i1_wr1RegCompleteHandler(1), i1_rd1RegCompleteHandler(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), 
  9702 ;;		 -> wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), Absolute function(1), rd1RegCompleteHandler(1), 
  9703 ;;  ptr             1   21[BANK0 ] PTR void 
  9704 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  9705 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  9706 ;; Auto vars:     Size  Location     Type
  9707 ;;		None
  9708 ;; Return value:  Size  Location     Type
  9709 ;;                  1    wreg      void 
  9710 ;; Registers used:
  9711 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9712 ;; Tracked objects:
  9713 ;;		On entry : 0/0
  9714 ;;		On exit  : 0/0
  9715 ;;		Unchanged: 0/0
  9716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9717 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9719 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9720 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9721 ;;Total ram usage:        4 bytes
  9722 ;; Hardware stack levels used:    1
  9723 ;; Hardware stack levels required when called:   14
  9724 ;; This function calls:
  9725 ;;		_I2C_SetCallback
  9726 ;; This function is called by:
  9727 ;;		_I2C_Write1ByteRegister
  9728 ;;		_rd1RegCompleteHandler
  9729 ;;		_rd2RegCompleteHandler
  9730 ;;		_wr1RegCompleteHandler
  9731 ;;		_wr2RegCompleteHandler
  9732 ;;		_rdBlkRegCompleteHandler
  9733 ;;		_I2C_Read2ByteRegister
  9734 ;;		_I2C_Write2ByteRegister
  9735 ;;		_I2C_ReadDataBlock
  9736 ;; This function uses a non-reentrant model
  9737 ;;
  9738                           
  9739                           
  9740                           ;psect for function _I2C_SetDataCompleteCallback
  9741  0FE6                     _I2C_SetDataCompleteCallback:	
  9742                           
  9743                           ;i2c_master.c: 275: I2C_SetCallback(I2C_DATA_COMPLETE, cb, ptr);
  9744                           
  9745                           ;incstack = 0
  9746                           ; Regs used in _I2C_SetDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  9747  0FE6  0020               	movlb	0	; select bank0
  9748  0FE7  0851               	movf	I2C_SetDataCompleteCallback@cb+1,w
  9749  0FE8  00CC               	movwf	I2C_SetCallback@cb+1
  9750  0FE9  0850               	movf	I2C_SetDataCompleteCallback@cb,w
  9751  0FEA  00CB               	movwf	I2C_SetCallback@cb
  9752  0FEB  0852               	movf	I2C_SetDataCompleteCallback@ptr,w
  9753  0FEC  00D3               	movwf	??_I2C_SetDataCompleteCallback
  9754  0FED  0853               	movf	??_I2C_SetDataCompleteCallback,w
  9755  0FEE  00CD               	movwf	I2C_SetCallback@ptr
  9756  0FEF  3000               	movlw	0
  9757  0FF0  3185  2584         	fcall	_I2C_SetCallback
  9758  0FF2  0008               	return
  9759  0FF3                     __end_of_I2C_SetDataCompleteCallback:	
  9760                           
  9761                           	psect	text58
  9762  0584                     __ptext58:	
  9763 ;; *************** function _I2C_SetCallback *****************
  9764 ;; Defined at:
  9765 ;;		line 298 in file "mcc_generated_files/i2c_master.c"
  9766 ;; Parameters:    Size  Location     Type
  9767 ;;  idx             1    wreg     enum E12121
  9768 ;;  cb              2   14[BANK0 ] PTR FTN(PTR void ,)enum 
  9769 ;;		 -> i1_wr1RegCompleteHandler(1), i1_rd1RegCompleteHandler(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), 
  9770 ;;		 -> wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), Absolute function(1), rd1RegCompleteHandler(1), 
  9771 ;;  ptr             1   16[BANK0 ] PTR void 
  9772 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  9773 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  9774 ;; Auto vars:     Size  Location     Type
  9775 ;;  idx             1   18[BANK0 ] enum E12121
  9776 ;; Return value:  Size  Location     Type
  9777 ;;                  1    wreg      void 
  9778 ;; Registers used:
  9779 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9780 ;; Tracked objects:
  9781 ;;		On entry : 0/0
  9782 ;;		On exit  : 0/0
  9783 ;;		Unchanged: 0/0
  9784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9785 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9786 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9787 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9788 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9789 ;;Total ram usage:        5 bytes
  9790 ;; Hardware stack levels used:    1
  9791 ;; Hardware stack levels required when called:   13
  9792 ;; This function calls:
  9793 ;;		Nothing
  9794 ;; This function is called by:
  9795 ;;		_I2C_SetDataCompleteCallback
  9796 ;;		_I2C_SetAddressNackCallback
  9797 ;;		_I2C_SetWriteCollisionCallback
  9798 ;;		_I2C_SetDataNackCallback
  9799 ;;		_I2C_SetTimeoutCallback
  9800 ;; This function uses a non-reentrant model
  9801 ;;
  9802                           
  9803                           
  9804                           ;psect for function _I2C_SetCallback
  9805  0584                     _I2C_SetCallback:	
  9806                           
  9807                           ;incstack = 0
  9808                           ; Regs used in _I2C_SetCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
  9809                           ;I2C_SetCallback@idx stored from wreg
  9810  0584  0020               	movlb	0	; select bank0
  9811  0585  00CF               	movwf	I2C_SetCallback@idx
  9812                           
  9813                           ;i2c_master.c: 300: if(cb)
  9814  0586  084B               	movf	I2C_SetCallback@cb,w
  9815  0587  044C               	iorwf	I2C_SetCallback@cb+1,w
  9816  0588  1903               	btfsc	3,2
  9817  0589  2D9B               	goto	l4031
  9818                           
  9819                           ;i2c_master.c: 301: {
  9820                           ;i2c_master.c: 302: I2C_Status.callbackTable[idx] = cb;
  9821  058A  354F               	lslf	I2C_SetCallback@idx,w
  9822  058B  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
  9823  058C  0086               	movwf	6
  9824  058D  0187               	clrf	7
  9825  058E  084B               	movf	I2C_SetCallback@cb,w
  9826  058F  3FC0               	movwi [0]fsr1
  9827  0590  084C               	movf	I2C_SetCallback@cb+1,w
  9828  0591  3FC1               	movwi [1]fsr1
  9829                           
  9830                           ;i2c_master.c: 303: I2C_Status.callbackPayload[idx] = ptr;
  9831  0592  084D               	movf	I2C_SetCallback@ptr,w
  9832  0593  00CE               	movwf	??_I2C_SetCallback
  9833  0594  084F               	movf	I2C_SetCallback@idx,w
  9834  0595  3EAC               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
  9835  0596  0086               	movwf	6
  9836  0597  0187               	clrf	7
  9837  0598  084E               	movf	??_I2C_SetCallback,w
  9838  0599  0081               	movwf	1
  9839                           
  9840                           ;i2c_master.c: 304: }
  9841  059A  0008               	return
  9842  059B                     l4031:	
  9843                           
  9844                           ;i2c_master.c: 305: else
  9845                           ;i2c_master.c: 306: {
  9846                           ;i2c_master.c: 307: I2C_Status.callbackTable[idx] = I2C_CallbackReturnStop;
  9847  059B  354F               	lslf	I2C_SetCallback@idx,w
  9848  059C  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
  9849  059D  0086               	movwf	6
  9850  059E  0187               	clrf	7
  9851  059F  30A1               	movlw	low _I2C_CallbackReturnStop
  9852  05A0  3FC0               	movwi [0]fsr1
  9853  05A1  300E               	movlw	high _I2C_CallbackReturnStop
  9854  05A2  3FC1               	movwi [1]fsr1
  9855                           
  9856                           ;i2c_master.c: 308: I2C_Status.callbackPayload[idx] = (0);
  9857  05A3  084F               	movf	I2C_SetCallback@idx,w
  9858  05A4  3EAC               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
  9859  05A5  0086               	movwf	6
  9860  05A6  0187               	clrf	7
  9861  05A7  0181               	clrf	1
  9862  05A8  0008               	return
  9863  05A9                     __end_of_I2C_SetCallback:	
  9864                           
  9865                           	psect	text59
  9866  0789                     __ptext59:	
  9867 ;; *************** function _I2C_SetBuffer *****************
  9868 ;; Defined at:
  9869 ;;		line 263 in file "mcc_generated_files/i2c_master.c"
  9870 ;; Parameters:    Size  Location     Type
  9871 ;;  buffer          1    wreg     PTR void 
  9872 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
  9873 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
  9874 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
  9875 ;;  bufferSize      2   14[BANK0 ] unsigned int 
  9876 ;; Auto vars:     Size  Location     Type
  9877 ;;  buffer          1   17[BANK0 ] PTR void 
  9878 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
  9879 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
  9880 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
  9881 ;; Return value:  Size  Location     Type
  9882 ;;                  1    wreg      void 
  9883 ;; Registers used:
  9884 ;;		wreg
  9885 ;; Tracked objects:
  9886 ;;		On entry : 0/0
  9887 ;;		On exit  : 0/0
  9888 ;;		Unchanged: 0/0
  9889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9890 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9891 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9892 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9893 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9894 ;;Total ram usage:        4 bytes
  9895 ;; Hardware stack levels used:    1
  9896 ;; Hardware stack levels required when called:   13
  9897 ;; This function calls:
  9898 ;;		Nothing
  9899 ;; This function is called by:
  9900 ;;		_I2C_Write1ByteRegister
  9901 ;;		_rd1RegCompleteHandler
  9902 ;;		_rd2RegCompleteHandler
  9903 ;;		_wr1RegCompleteHandler
  9904 ;;		_wr2RegCompleteHandler
  9905 ;;		_rdBlkRegCompleteHandler
  9906 ;;		_I2C_Read2ByteRegister
  9907 ;;		_I2C_Write2ByteRegister
  9908 ;;		_I2C_WriteNBytes
  9909 ;;		_I2C_ReadNBytes
  9910 ;;		_I2C_ReadDataBlock
  9911 ;; This function uses a non-reentrant model
  9912 ;;
  9913                           
  9914                           
  9915                           ;psect for function _I2C_SetBuffer
  9916  0789                     _I2C_SetBuffer:	
  9917                           
  9918                           ;incstack = 0
  9919                           ; Regs used in _I2C_SetBuffer: [wreg]
  9920                           ;I2C_SetBuffer@buffer stored from wreg
  9921  0789  0020               	movlb	0	; select bank0
  9922  078A  00CE               	movwf	I2C_SetBuffer@buffer
  9923                           
  9924                           ;i2c_master.c: 265: if(I2C_Status.bufferFree)
  9925  078B  0021               	movlb	1	; select bank1
  9926  078C  1DBC               	btfss	(_I2C_Status^(0+128)+28),3
  9927  078D  0008               	return
  9928                           
  9929                           ;i2c_master.c: 266: {
  9930                           ;i2c_master.c: 267: I2C_Status.data_ptr = buffer;
  9931  078E  0020               	movlb	0	; select bank0
  9932  078F  084E               	movf	I2C_SetBuffer@buffer,w
  9933  0790  00CD               	movwf	??_I2C_SetBuffer
  9934  0791  084D               	movf	??_I2C_SetBuffer,w
  9935  0792  0021               	movlb	1	; select bank1
  9936  0793  00B7               	movwf	(low ((_I2C_Status| 0+23)))^(0+128)
  9937                           
  9938                           ;i2c_master.c: 268: I2C_Status.data_length = bufferSize;
  9939  0794  0020               	movlb	0	; select bank0
  9940  0795  084C               	movf	I2C_SetBuffer@bufferSize+1,w
  9941  0796  0021               	movlb	1	; select bank1
  9942  0797  00B9               	movwf	((_I2C_Status+1)^(0+128)+24)
  9943  0798  0020               	movlb	0	; select bank0
  9944  0799  084B               	movf	I2C_SetBuffer@bufferSize,w
  9945  079A  0021               	movlb	1	; select bank1
  9946  079B  00B8               	movwf	(_I2C_Status^(0+128)+24)
  9947                           
  9948                           ;i2c_master.c: 269: I2C_Status.bufferFree = 0;
  9949  079C  11BC               	bcf	(_I2C_Status^(0+128)+28),3
  9950  079D  0008               	return
  9951  079E                     __end_of_I2C_SetBuffer:	
  9952                           
  9953                           	psect	text60
  9954  0E27                     __ptext60:	
  9955 ;; *************** function _I2C_MasterStop *****************
  9956 ;; Defined at:
  9957 ;;		line 593 in file "mcc_generated_files/i2c_master.c"
  9958 ;; Parameters:    Size  Location     Type
  9959 ;;		None
  9960 ;; Auto vars:     Size  Location     Type
  9961 ;;		None
  9962 ;; Return value:  Size  Location     Type
  9963 ;;                  1    wreg      void 
  9964 ;; Registers used:
  9965 ;;		None
  9966 ;; Tracked objects:
  9967 ;;		On entry : 0/0
  9968 ;;		On exit  : 0/0
  9969 ;;		Unchanged: 0/0
  9970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9975 ;;Total ram usage:        0 bytes
  9976 ;; Hardware stack levels used:    1
  9977 ;; Hardware stack levels required when called:   13
  9978 ;; This function calls:
  9979 ;;		Nothing
  9980 ;; This function is called by:
  9981 ;;		_I2C_DO_SEND_STOP
  9982 ;; This function uses a non-reentrant model
  9983 ;;
  9984                           
  9985                           
  9986                           ;psect for function _I2C_MasterStop
  9987  0E27                     _I2C_MasterStop:	
  9988                           
  9989                           ;i2c_master.c: 595: SSP1CON2bits.PEN = 1;
  9990                           
  9991                           ;incstack = 0
  9992 ;; hardware stack exceeded
  9993                           ; Regs used in _I2C_MasterStop: []
  9994  0E27  0024               	movlb	4	; select bank4
  9995  0E28  1516               	bsf	22,2	;volatile
  9996  0E29  0008               	return
  9997  0E2A                     __end_of_I2C_MasterStop:	
  9998                           
  9999                           	psect	text61
 10000  0E24                     __ptext61:	
 10001 ;; *************** function _I2C_MasterEnableRestart *****************
 10002 ;; Defined at:
 10003 ;;		line 573 in file "mcc_generated_files/i2c_master.c"
 10004 ;; Parameters:    Size  Location     Type
 10005 ;;		None
 10006 ;; Auto vars:     Size  Location     Type
 10007 ;;		None
 10008 ;; Return value:  Size  Location     Type
 10009 ;;                  1    wreg      void 
 10010 ;; Registers used:
 10011 ;;		None
 10012 ;; Tracked objects:
 10013 ;;		On entry : 0/0
 10014 ;;		On exit  : 0/0
 10015 ;;		Unchanged: 0/0
 10016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10020 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10021 ;;Total ram usage:        0 bytes
 10022 ;; Hardware stack levels used:    1
 10023 ;; Hardware stack levels required when called:   13
 10024 ;; This function calls:
 10025 ;;		Nothing
 10026 ;; This function is called by:
 10027 ;;		_I2C_DO_SEND_RESTART_READ
 10028 ;;		_I2C_DO_SEND_RESTART_WRITE
 10029 ;;		_I2C_DO_SEND_RESTART
 10030 ;;		_I2C_DO_RX_EMPTY
 10031 ;; This function uses a non-reentrant model
 10032 ;;
 10033                           
 10034                           
 10035                           ;psect for function _I2C_MasterEnableRestart
 10036  0E24                     _I2C_MasterEnableRestart:	
 10037                           
 10038                           ;i2c_master.c: 575: SSP1CON2bits.RSEN = 1;
 10039                           
 10040                           ;incstack = 0
 10041 ;; hardware stack exceeded
 10042                           ; Regs used in _I2C_MasterEnableRestart: []
 10043  0E24  0024               	movlb	4	; select bank4
 10044  0E25  1496               	bsf	22,1	;volatile
 10045  0E26  0008               	return
 10046  0E27                     __end_of_I2C_MasterEnableRestart:	
 10047                           
 10048                           	psect	text62
 10049  0E21                     __ptext62:	
 10050 ;; *************** function _I2C_MasterStart *****************
 10051 ;; Defined at:
 10052 ;;		line 588 in file "mcc_generated_files/i2c_master.c"
 10053 ;; Parameters:    Size  Location     Type
 10054 ;;		None
 10055 ;; Auto vars:     Size  Location     Type
 10056 ;;		None
 10057 ;; Return value:  Size  Location     Type
 10058 ;;                  1    wreg      void 
 10059 ;; Registers used:
 10060 ;;		None
 10061 ;; Tracked objects:
 10062 ;;		On entry : 0/0
 10063 ;;		On exit  : 0/0
 10064 ;;		Unchanged: 0/0
 10065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10069 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10070 ;;Total ram usage:        0 bytes
 10071 ;; Hardware stack levels used:    1
 10072 ;; Hardware stack levels required when called:   13
 10073 ;; This function calls:
 10074 ;;		Nothing
 10075 ;; This function is called by:
 10076 ;;		_I2C_MasterOperation
 10077 ;; This function uses a non-reentrant model
 10078 ;;
 10079                           
 10080                           
 10081                           ;psect for function _I2C_MasterStart
 10082  0E21                     _I2C_MasterStart:	
 10083                           
 10084                           ;i2c_master.c: 590: SSP1CON2bits.SEN = 1;
 10085                           
 10086                           ;incstack = 0
 10087 ;; hardware stack exceeded
 10088                           ; Regs used in _I2C_MasterStart: []
 10089  0E21  0024               	movlb	4	; select bank4
 10090  0E22  1416               	bsf	22,0	;volatile
 10091  0E23  0008               	return
 10092  0E24                     __end_of_I2C_MasterStart:	
 10093                           
 10094                           	psect	text63
 10095  0635                     __ptext63:	
 10096 ;; *************** function _I2C_Close *****************
 10097 ;; Defined at:
 10098 ;;		line 209 in file "mcc_generated_files/i2c_master.c"
 10099 ;; Parameters:    Size  Location     Type
 10100 ;;		None
 10101 ;; Auto vars:     Size  Location     Type
 10102 ;;  returnValue     1   15[BANK0 ] enum E92
 10103 ;; Return value:  Size  Location     Type
 10104 ;;                  1    wreg      enum E92
 10105 ;; Registers used:
 10106 ;;		wreg, status,2, status,0, pclath, cstack
 10107 ;; Tracked objects:
 10108 ;;		On entry : 0/0
 10109 ;;		On exit  : 0/0
 10110 ;;		Unchanged: 0/0
 10111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10113 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10114 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10115 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10116 ;;Total ram usage:        2 bytes
 10117 ;; Hardware stack levels used:    1
 10118 ;; Hardware stack levels required when called:   14
 10119 ;; This function calls:
 10120 ;;		_I2C_MasterClearIrq
 10121 ;;		_I2C_MasterClose
 10122 ;;		_I2C_MasterDisableIrq
 10123 ;; This function is called by:
 10124 ;;		_I2C_Write1ByteRegister
 10125 ;;		_I2C_Read2ByteRegister
 10126 ;;		_I2C_Write2ByteRegister
 10127 ;;		_I2C_WriteNBytes
 10128 ;;		_I2C_ReadNBytes
 10129 ;;		_I2C_ReadDataBlock
 10130 ;; This function uses a non-reentrant model
 10131 ;;
 10132                           
 10133                           
 10134                           ;psect for function _I2C_Close
 10135  0635                     _I2C_Close:	
 10136                           
 10137                           ;i2c_master.c: 211: i2c_error_t returnValue = I2C_BUSY;
 10138                           
 10139                           ;incstack = 0
 10140                           ; Regs used in _I2C_Close: [wreg+status,2+status,0+pclath+cstack]
 10141  0635  0020               	movlb	0	; select bank0
 10142  0636  01CC               	clrf	I2C_Close@returnValue
 10143  0637  0ACC               	incf	I2C_Close@returnValue,f
 10144                           
 10145                           ;i2c_master.c: 212: if(!I2C_Status.busy)
 10146  0638  0021               	movlb	1	; select bank1
 10147  0639  18BC               	btfsc	(_I2C_Status^(0+128)+28),1
 10148  063A  2E50               	goto	l4607
 10149                           
 10150                           ;i2c_master.c: 213: {
 10151                           ;i2c_master.c: 214: I2C_Status.inUse = 0;
 10152  063B  113C               	bcf	(_I2C_Status^(0+128)+28),2
 10153                           
 10154                           ;i2c_master.c: 215: I2C_Status.address = 0xff;
 10155  063C  30FF               	movlw	255
 10156  063D  0020               	movlb	0	; select bank0
 10157  063E  00CB               	movwf	??_I2C_Close
 10158  063F  084B               	movf	??_I2C_Close,w
 10159  0640  0021               	movlb	1	; select bank1
 10160  0641  00B6               	movwf	(_I2C_Status^(0+128)+22)
 10161                           
 10162                           ;i2c_master.c: 216: I2C_MasterClearIrq();
 10163  0642  318E  2618  3186   	fcall	_I2C_MasterClearIrq
 10164                           
 10165                           ;i2c_master.c: 217: I2C_MasterDisableIrq();
 10166  0645  318E  261E  3186   	fcall	_I2C_MasterDisableIrq
 10167                           
 10168                           ;i2c_master.c: 218: I2C_MasterClose();
 10169  0648  318E  261B         	fcall	_I2C_MasterClose
 10170                           
 10171                           ;i2c_master.c: 219: returnValue = I2C_Status.error;
 10172  064A  0021               	movlb	1	; select bank1
 10173  064B  083B               	movf	(_I2C_Status^(0+128)+27),w
 10174  064C  0020               	movlb	0	; select bank0
 10175  064D  00CB               	movwf	??_I2C_Close
 10176  064E  084B               	movf	??_I2C_Close,w
 10177  064F  00CC               	movwf	I2C_Close@returnValue
 10178  0650                     l4607:	
 10179                           
 10180                           ;i2c_master.c: 220: }
 10181                           ;i2c_master.c: 221: return returnValue;
 10182  0650  0020               	movlb	0	; select bank0
 10183  0651  084C               	movf	I2C_Close@returnValue,w
 10184  0652  0008               	return
 10185  0653                     __end_of_I2C_Close:	
 10186                           
 10187                           	psect	text64
 10188  0E1E                     __ptext64:	
 10189 ;; *************** function _I2C_MasterDisableIrq *****************
 10190 ;; Defined at:
 10191 ;;		line 635 in file "mcc_generated_files/i2c_master.c"
 10192 ;; Parameters:    Size  Location     Type
 10193 ;;		None
 10194 ;; Auto vars:     Size  Location     Type
 10195 ;;		None
 10196 ;; Return value:  Size  Location     Type
 10197 ;;                  1    wreg      void 
 10198 ;; Registers used:
 10199 ;;		None
 10200 ;; Tracked objects:
 10201 ;;		On entry : 0/0
 10202 ;;		On exit  : 0/0
 10203 ;;		Unchanged: 0/0
 10204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10208 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10209 ;;Total ram usage:        0 bytes
 10210 ;; Hardware stack levels used:    1
 10211 ;; Hardware stack levels required when called:   13
 10212 ;; This function calls:
 10213 ;;		Nothing
 10214 ;; This function is called by:
 10215 ;;		_I2C_Close
 10216 ;;		_I2C_SetTimeOut
 10217 ;; This function uses a non-reentrant model
 10218 ;;
 10219                           
 10220                           
 10221                           ;psect for function _I2C_MasterDisableIrq
 10222  0E1E                     _I2C_MasterDisableIrq:	
 10223                           
 10224                           ;i2c_master.c: 637: PIE1bits.SSP1IE = 0;
 10225                           
 10226                           ;incstack = 0
 10227                           ; Regs used in _I2C_MasterDisableIrq: []
 10228  0E1E  0021               	movlb	1	; select bank1
 10229  0E1F  1190               	bcf	16,3	;volatile
 10230  0E20  0008               	return
 10231  0E21                     __end_of_I2C_MasterDisableIrq:	
 10232                           
 10233                           	psect	text65
 10234  0E1B                     __ptext65:	
 10235 ;; *************** function _I2C_MasterClose *****************
 10236 ;; Defined at:
 10237 ;;		line 557 in file "mcc_generated_files/i2c_master.c"
 10238 ;; Parameters:    Size  Location     Type
 10239 ;;		None
 10240 ;; Auto vars:     Size  Location     Type
 10241 ;;		None
 10242 ;; Return value:  Size  Location     Type
 10243 ;;                  1    wreg      void 
 10244 ;; Registers used:
 10245 ;;		None
 10246 ;; Tracked objects:
 10247 ;;		On entry : 0/0
 10248 ;;		On exit  : 0/0
 10249 ;;		Unchanged: 0/0
 10250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10254 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10255 ;;Total ram usage:        0 bytes
 10256 ;; Hardware stack levels used:    1
 10257 ;; Hardware stack levels required when called:   13
 10258 ;; This function calls:
 10259 ;;		Nothing
 10260 ;; This function is called by:
 10261 ;;		_I2C_Close
 10262 ;; This function uses a non-reentrant model
 10263 ;;
 10264                           
 10265                           
 10266                           ;psect for function _I2C_MasterClose
 10267  0E1B                     _I2C_MasterClose:	
 10268                           
 10269                           ;i2c_master.c: 560: SSP1CON1bits.SSPEN = 0;
 10270                           
 10271                           ;incstack = 0
 10272                           ; Regs used in _I2C_MasterClose: []
 10273  0E1B  0024               	movlb	4	; select bank4
 10274  0E1C  1295               	bcf	21,5	;volatile
 10275  0E1D  0008               	return
 10276  0E1E                     __end_of_I2C_MasterClose:	
 10277                           
 10278                           	psect	text66
 10279  0E18                     __ptext66:	
 10280 ;; *************** function _I2C_MasterClearIrq *****************
 10281 ;; Defined at:
 10282 ;;		line 640 in file "mcc_generated_files/i2c_master.c"
 10283 ;; Parameters:    Size  Location     Type
 10284 ;;		None
 10285 ;; Auto vars:     Size  Location     Type
 10286 ;;		None
 10287 ;; Return value:  Size  Location     Type
 10288 ;;                  1    wreg      void 
 10289 ;; Registers used:
 10290 ;;		None
 10291 ;; Tracked objects:
 10292 ;;		On entry : 0/0
 10293 ;;		On exit  : 0/0
 10294 ;;		Unchanged: 0/0
 10295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10299 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10300 ;;Total ram usage:        0 bytes
 10301 ;; Hardware stack levels used:    1
 10302 ;; Hardware stack levels required when called:   13
 10303 ;; This function calls:
 10304 ;;		Nothing
 10305 ;; This function is called by:
 10306 ;;		_I2C_Open
 10307 ;;		_I2C_Close
 10308 ;;		_I2C_MasterFsm
 10309 ;; This function uses a non-reentrant model
 10310 ;;
 10311                           
 10312                           
 10313                           ;psect for function _I2C_MasterClearIrq
 10314  0E18                     _I2C_MasterClearIrq:	
 10315                           
 10316                           ;i2c_master.c: 642: PIR1bits.SSP1IF = 0;
 10317                           
 10318                           ;incstack = 0
 10319                           ; Regs used in _I2C_MasterClearIrq: []
 10320  0E18  0020               	movlb	0	; select bank0
 10321  0E19  1190               	bcf	16,3	;volatile
 10322  0E1A  0008               	return
 10323  0E1B                     __end_of_I2C_MasterClearIrq:	
 10324                           
 10325                           	psect	intentry
 10326  0004                     __pintentry:	
 10327 ;; *************** function _INTERRUPT_InterruptManager *****************
 10328 ;; Defined at:
 10329 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 10330 ;; Parameters:    Size  Location     Type
 10331 ;;		None
 10332 ;; Auto vars:     Size  Location     Type
 10333 ;;		None
 10334 ;; Return value:  Size  Location     Type
 10335 ;;                  1    wreg      void 
 10336 ;; Registers used:
 10337 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10338 ;; Tracked objects:
 10339 ;;		On entry : 0/0
 10340 ;;		On exit  : 0/0
 10341 ;;		Unchanged: 0/0
 10342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10345 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10346 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10347 ;;Total ram usage:        1 bytes
 10348 ;; Hardware stack levels used:    1
 10349 ;; Hardware stack levels required when called:   12
 10350 ;; This function calls:
 10351 ;;		Absolute function
 10352 ;;		_EUSART_Receive_ISR
 10353 ;;		_MATHACC_Error_ISR
 10354 ;;		_MATHACC_PID_ISR
 10355 ;;		_MyUART_ISR
 10356 ;;		_TMR2_ISR
 10357 ;; This function is called by:
 10358 ;;		Interrupt level 1
 10359 ;; This function uses a non-reentrant model
 10360 ;;
 10361                           
 10362  0004                     _INTERRUPT_InterruptManager:	
 10363                           
 10364                           ;incstack = 0
 10365 ;; hardware stack exceeded
 10366  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 10367                           
 10368                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10369  0005  3180               	pagesel	$
 10370  0006  0020               	movlb	0	; select bank0
 10371  0007  087F               	movf	127,w
 10372  0008  00CA               	movwf	??_INTERRUPT_InterruptManager
 10373                           
 10374                           ;interrupt_manager.c: 55: if(INTCONbits.PEIE == 1)
 10375  0009  1F0B               	btfss	11,6	;volatile
 10376  000A  2833               	goto	i1l135
 10377                           
 10378                           ;interrupt_manager.c: 56: {
 10379                           ;interrupt_manager.c: 57: if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
 10380  000B  0021               	movlb	1	; select bank1
 10381  000C  1E90               	btfss	16,5	;volatile
 10382  000D  2817               	goto	i1l126
 10383  000E  0020               	movlb	0	; select bank0
 10384  000F  1E90               	btfss	16,5	;volatile
 10385  0010  2817               	goto	i1l126
 10386                           
 10387                           ;interrupt_manager.c: 58: {
 10388                           ;interrupt_manager.c: 59: EUSART_RxDefaultInterruptHandler();
 10389  0011  085E               	movf	_EUSART_RxDefaultInterruptHandler+1,w
 10390  0012  008A               	movwf	10
 10391  0013  085D               	movf	_EUSART_RxDefaultInterruptHandler,w
 10392  0014  000A               	callw
 10393  0015  3180               	pagesel	$
 10394                           
 10395                           ;interrupt_manager.c: 60: }
 10396  0016  2833               	goto	i1l135
 10397  0017                     i1l126:	
 10398                           
 10399                           ;interrupt_manager.c: 61: else if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
 10400  0017  0021               	movlb	1	; select bank1
 10401  0018  1C90               	btfss	16,1	;volatile
 10402  0019  2821               	goto	i1l128
 10403  001A  0020               	movlb	0	; select bank0
 10404  001B  1C90               	btfss	16,1	;volatile
 10405  001C  2821               	goto	i1l128
 10406                           
 10407                           ;interrupt_manager.c: 62: {
 10408                           ;interrupt_manager.c: 63: TMR2_ISR();
 10409  001D  318E  268B  3180   	fcall	_TMR2_ISR
 10410                           
 10411                           ;interrupt_manager.c: 64: }
 10412  0020  2833               	goto	i1l135
 10413  0021                     i1l128:	
 10414                           
 10415                           ;interrupt_manager.c: 65: else if(PIE5bits.PID1DIE == 1 && PIR5bits.PID1DIF == 1)
 10416  0021  0021               	movlb	1	; select bank1
 10417  0022  1C14               	btfss	20,0	;volatile
 10418  0023  282B               	goto	i1l130
 10419  0024  0020               	movlb	0	; select bank0
 10420  0025  1C14               	btfss	20,0	;volatile
 10421  0026  282B               	goto	i1l130
 10422                           
 10423                           ;interrupt_manager.c: 66: {
 10424                           ;interrupt_manager.c: 67: MATHACC_PID_ISR();
 10425  0027  318F  2733  3180   	fcall	_MATHACC_PID_ISR
 10426                           
 10427                           ;interrupt_manager.c: 68: }
 10428  002A  2833               	goto	i1l135
 10429  002B                     i1l130:	
 10430                           
 10431                           ;interrupt_manager.c: 69: else if(PIE5bits.PID1EIE == 1 && PIR5bits.PID1EIF == 1)
 10432  002B  0021               	movlb	1	; select bank1
 10433  002C  1C94               	btfss	20,1	;volatile
 10434  002D  2833               	goto	i1l135
 10435  002E  0020               	movlb	0	; select bank0
 10436  002F  1C94               	btfss	20,1	;volatile
 10437  0030  2833               	goto	i1l135
 10438                           
 10439                           ;interrupt_manager.c: 70: {
 10440                           ;interrupt_manager.c: 71: MATHACC_Error_ISR();
 10441  0031  318D  25FA         	fcall	_MATHACC_Error_ISR
 10442  0033                     i1l135:	
 10443                           ;interrupt_manager.c: 78: else
 10444                           ;interrupt_manager.c: 79: {
 10445                           
 10446                           ;interrupt_manager.c: 76: }
 10447                           ;interrupt_manager.c: 77: }
 10448                           
 10449                           ;interrupt_manager.c: 73: else
 10450                           ;interrupt_manager.c: 74: {
 10451                           
 10452                           ;interrupt_manager.c: 72: }
 10453                           
 10454  0033  0020               	movlb	0	; select bank0
 10455  0034  084A               	movf	??_INTERRUPT_InterruptManager,w
 10456  0035  00FF               	movwf	127
 10457  0036  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 10458  0037  0009               	retfie
 10459  0038                     __end_of_INTERRUPT_InterruptManager:	
 10460                           
 10461                           	psect	text68
 10462  0E8B                     __ptext68:	
 10463 ;; *************** function _TMR2_ISR *****************
 10464 ;; Defined at:
 10465 ;;		line 165 in file "mcc_generated_files/tmr2.c"
 10466 ;; Parameters:    Size  Location     Type
 10467 ;;		None
 10468 ;; Auto vars:     Size  Location     Type
 10469 ;;		None
 10470 ;; Return value:  Size  Location     Type
 10471 ;;                  1    wreg      void 
 10472 ;; Registers used:
 10473 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10474 ;; Tracked objects:
 10475 ;;		On entry : 0/0
 10476 ;;		On exit  : 0/0
 10477 ;;		Unchanged: 0/0
 10478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10483 ;;Total ram usage:        0 bytes
 10484 ;; Hardware stack levels used:    1
 10485 ;; Hardware stack levels required when called:   11
 10486 ;; This function calls:
 10487 ;;		_TMR2_CallBack
 10488 ;; This function is called by:
 10489 ;;		_INTERRUPT_InterruptManager
 10490 ;; This function uses a non-reentrant model
 10491 ;;
 10492                           
 10493                           
 10494                           ;psect for function _TMR2_ISR
 10495  0E8B                     _TMR2_ISR:	
 10496                           
 10497                           ;tmr2.c: 169: PIR1bits.TMR2IF = 0;
 10498                           
 10499                           ;incstack = 0
 10500 ;; hardware stack exceeded
 10501                           ; Regs used in _TMR2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10502  0E8B  0020               	movlb	0	; select bank0
 10503  0E8C  1090               	bcf	16,1	;volatile
 10504                           
 10505                           ;tmr2.c: 173: TMR2_CallBack();
 10506  0E8D  318F  2789         	fcall	_TMR2_CallBack
 10507  0E8F  0008               	return
 10508  0E90                     __end_of_TMR2_ISR:	
 10509                           
 10510                           	psect	text69
 10511  0F89                     __ptext69:	
 10512 ;; *************** function _TMR2_CallBack *****************
 10513 ;; Defined at:
 10514 ;;		line 176 in file "mcc_generated_files/tmr2.c"
 10515 ;; Parameters:    Size  Location     Type
 10516 ;;		None
 10517 ;; Auto vars:     Size  Location     Type
 10518 ;;		None
 10519 ;; Return value:  Size  Location     Type
 10520 ;;                  1    wreg      void 
 10521 ;; Registers used:
 10522 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10523 ;; Tracked objects:
 10524 ;;		On entry : 0/0
 10525 ;;		On exit  : 0/0
 10526 ;;		Unchanged: 0/0
 10527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10531 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10532 ;;Total ram usage:        0 bytes
 10533 ;; Hardware stack levels used:    1
 10534 ;; Hardware stack levels required when called:   10
 10535 ;; This function calls:
 10536 ;;		Absolute function
 10537 ;;		_MyTimer2ISR
 10538 ;;		_TMR2_DefaultInterruptHandler
 10539 ;; This function is called by:
 10540 ;;		_TMR2_ISR
 10541 ;; This function uses a non-reentrant model
 10542 ;;
 10543                           
 10544                           
 10545                           ;psect for function _TMR2_CallBack
 10546  0F89                     _TMR2_CallBack:	
 10547                           
 10548                           ;tmr2.c: 180: if(TMR2_InterruptHandler)
 10549                           
 10550                           ;incstack = 0
 10551 ;; hardware stack exceeded
 10552                           ; Regs used in _TMR2_CallBack: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10553  0F89  0020               	movlb	0	; select bank0
 10554  0F8A  0857               	movf	_TMR2_InterruptHandler,w
 10555  0F8B  0458               	iorwf	_TMR2_InterruptHandler+1,w
 10556  0F8C  1903               	btfsc	3,2
 10557  0F8D  0008               	return
 10558                           
 10559                           ;tmr2.c: 181: {
 10560                           ;tmr2.c: 182: TMR2_InterruptHandler();
 10561  0F8E  0858               	movf	_TMR2_InterruptHandler+1,w
 10562  0F8F  008A               	movwf	10
 10563  0F90  0857               	movf	_TMR2_InterruptHandler,w
 10564  0F91  000A               	callw
 10565  0F92  318F               	pagesel	$
 10566  0F93  0008               	return
 10567  0F94                     __end_of_TMR2_CallBack:	
 10568                           
 10569                           	psect	text70
 10570  010B                     __ptext70:	
 10571 ;; *************** function _MyTimer2ISR *****************
 10572 ;; Defined at:
 10573 ;;		line 59 in file "main.c"
 10574 ;; Parameters:    Size  Location     Type
 10575 ;;		None
 10576 ;; Auto vars:     Size  Location     Type
 10577 ;;		None
 10578 ;; Return value:  Size  Location     Type
 10579 ;;                  1    wreg      void 
 10580 ;; Registers used:
 10581 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10582 ;; Tracked objects:
 10583 ;;		On entry : 0/0
 10584 ;;		On exit  : 0/0
 10585 ;;		Unchanged: 0/0
 10586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10589 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10590 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10591 ;;Total ram usage:        4 bytes
 10592 ;; Hardware stack levels used:    1
 10593 ;; Hardware stack levels required when called:    9
 10594 ;; This function calls:
 10595 ;;		_EUSART_Write
 10596 ;;		_I2C_Read1ByteRegister
 10597 ;;		_MATHACC_PIDController
 10598 ;;		_PWM3_LoadDutyValue
 10599 ;;		i1_I2C_Write1ByteRegister
 10600 ;; This function is called by:
 10601 ;;		_main
 10602 ;;		_TMR2_CallBack
 10603 ;; This function uses a non-reentrant model
 10604 ;;
 10605                           
 10606                           
 10607                           ;psect for function _MyTimer2ISR
 10608  010B                     _MyTimer2ISR:	
 10609                           
 10610                           ;main.c: 60: StateToggle = ~StateToggle;
 10611                           
 10612                           ;incstack = 0
 10613 ;; hardware stack exceeded
 10614                           ; Regs used in _MyTimer2ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10615  010B  0020               	movlb	0	; select bank0
 10616  010C  09B2               	comf	_StateToggle,f
 10617                           
 10618                           ;main.c: 61: if(StateToggle) {
 10619  010D  0832               	movf	_StateToggle,w
 10620  010E  1903               	btfsc	3,2
 10621  010F  293E               	goto	i1l6233
 10622                           
 10623                           ;main.c: 62: PWM3_LoadDutyValue(((Pos)>>3)+50);
 10624  0110  0838               	movf	_Pos,w
 10625  0111  00C6               	movwf	??_MyTimer2ISR
 10626  0112  3003               	movlw	3
 10627  0113                     u395_25:	
 10628  0113  36C6               	lsrf	??_MyTimer2ISR,f
 10629  0114  0B89               	decfsz	9,f
 10630  0115  2913               	goto	u395_25
 10631  0116  0846               	movf	??_MyTimer2ISR,w
 10632  0117  3E32               	addlw	50
 10633  0118  00F0               	movwf	PWM3_LoadDutyValue@dutyValue
 10634  0119  3000               	movlw	0
 10635  011A  1803               	skipnc
 10636  011B  3001               	movlw	1
 10637  011C  00F1               	movwf	PWM3_LoadDutyValue@dutyValue+1
 10638  011D  3187  2749  3181   	fcall	_PWM3_LoadDutyValue
 10639                           
 10640                           ;main.c: 64: G -= I2C_Read1ByteRegister(0x68, 0x47);
 10641  0120  3047               	movlw	71
 10642  0121  0020               	movlb	0	; select bank0
 10643  0122  00C6               	movwf	??_MyTimer2ISR
 10644  0123  0846               	movf	??_MyTimer2ISR,w
 10645  0124  00C2               	movwf	I2C_Read1ByteRegister@reg
 10646  0125  3068               	movlw	104
 10647  0126  3184  247D  3181   	fcall	_I2C_Read1ByteRegister
 10648  0129  0020               	movlb	0	; select bank0
 10649  012A  00C7               	movwf	??_MyTimer2ISR+1
 10650  012B  0847               	movf	??_MyTimer2ISR+1,w
 10651  012C  02B4               	subwf	_G,f
 10652                           
 10653                           ;main.c: 66: MATHACC_PIDController(Angle,G);
 10654  012D  0860               	movf	_Angle,w
 10655  012E  00C6               	movwf	??_MyTimer2ISR
 10656  012F  01C7               	clrf	??_MyTimer2ISR+1
 10657  0130  0846               	movf	??_MyTimer2ISR,w
 10658  0131  00F0               	movwf	MATHACC_PIDController@setpoint
 10659  0132  0847               	movf	??_MyTimer2ISR+1,w
 10660  0133  00F1               	movwf	MATHACC_PIDController@setpoint+1
 10661  0134  0834               	movf	_G,w
 10662  0135  00C8               	movwf	??_MyTimer2ISR+2
 10663  0136  01C9               	clrf	??_MyTimer2ISR+3
 10664  0137  0848               	movf	??_MyTimer2ISR+2,w
 10665  0138  00F2               	movwf	MATHACC_PIDController@input
 10666  0139  0849               	movf	??_MyTimer2ISR+3,w
 10667  013A  00F3               	movwf	MATHACC_PIDController@input+1
 10668  013B  318F  2761         	fcall	_MATHACC_PIDController
 10669                           
 10670                           ;main.c: 67: } else {
 10671  013D  0008               	return
 10672  013E                     i1l6233:	
 10673                           
 10674                           ;main.c: 68: PWM3_LoadDutyValue(((Pos)>>3)+50);
 10675  013E  0020               	movlb	0	; select bank0
 10676  013F  0838               	movf	_Pos,w
 10677  0140  00C6               	movwf	??_MyTimer2ISR
 10678  0141  3003               	movlw	3
 10679  0142                     u396_25:	
 10680  0142  36C6               	lsrf	??_MyTimer2ISR,f
 10681  0143  0B89               	decfsz	9,f
 10682  0144  2942               	goto	u396_25
 10683  0145  0846               	movf	??_MyTimer2ISR,w
 10684  0146  3E32               	addlw	50
 10685  0147  00F0               	movwf	PWM3_LoadDutyValue@dutyValue
 10686  0148  3000               	movlw	0
 10687  0149  1803               	skipnc
 10688  014A  3001               	movlw	1
 10689  014B  00F1               	movwf	PWM3_LoadDutyValue@dutyValue+1
 10690  014C  3187  2749  3181   	fcall	_PWM3_LoadDutyValue
 10691                           
 10692                           ;main.c: 69: if(PORTAbits.RA4) {
 10693  014F  0020               	movlb	0	; select bank0
 10694  0150  1E0C               	btfss	12,4	;volatile
 10695  0151  2990               	goto	i1l6261
 10696                           
 10697                           ;main.c: 70: CptBat = 0;
 10698  0152  01B5               	clrf	_CptBat
 10699                           
 10700                           ;main.c: 71: if(StateBat == S_bat_low) {
 10701  0153  085F               	movf	_StateBat,w
 10702  0154  1D03               	btfss	3,2
 10703  0155  2965               	goto	i1l6245
 10704                           
 10705                           ;main.c: 72: EUSART_Write('B');
 10706  0156  3042               	movlw	66
 10707  0157  318E  26EB  3181   	fcall	_EUSART_Write
 10708                           
 10709                           ;main.c: 73: EUSART_Write('1');
 10710  015A  3031               	movlw	49
 10711  015B  318E  26EB  3181   	fcall	_EUSART_Write
 10712                           
 10713                           ;main.c: 74: EUSART_Write('s');
 10714  015E  3073               	movlw	115
 10715  015F  318E  26EB  3181   	fcall	_EUSART_Write
 10716                           
 10717                           ;main.c: 75: StateBat = S_bat_high;
 10718  0162  0020               	movlb	0	; select bank0
 10719  0163  01DF               	clrf	_StateBat
 10720  0164  0ADF               	incf	_StateBat,f
 10721  0165                     i1l6245:	
 10722                           
 10723                           ;main.c: 76: }
 10724                           ;main.c: 77: if(Validation) {
 10725  0165  0861               	movf	_Validation,w
 10726  0166  1903               	btfsc	3,2
 10727  0167  297C               	goto	i1l6255
 10728                           
 10729                           ;main.c: 79: if(Vitesse > 100) {Vitesse = 100;}
 10730  0168  3065               	movlw	101
 10731  0169  0233               	subwf	_Vitesse,w
 10732  016A  1C03               	skipc
 10733  016B  2970               	goto	i1l6251
 10734  016C  3064               	movlw	100
 10735  016D  00C6               	movwf	??_MyTimer2ISR
 10736  016E  0846               	movf	??_MyTimer2ISR,w
 10737  016F  00B3               	movwf	_Vitesse
 10738  0170                     i1l6251:	
 10739                           
 10740                           ;main.c: 80: I2C_Write1ByteRegister(0x40, Vitesse, 0);
 10741  0170  0833               	movf	_Vitesse,w
 10742  0171  00C6               	movwf	??_MyTimer2ISR
 10743  0172  0846               	movf	??_MyTimer2ISR,w
 10744  0173  00C2               	movwf	i1I2C_Write1ByteRegister@reg
 10745  0174  01C3               	clrf	i1I2C_Write1ByteRegister@data
 10746  0175  3040               	movlw	64
 10747  0176  3184  24AF         	fcall	i1_I2C_Write1ByteRegister
 10748                           
 10749                           ;main.c: 82: Validation--;
 10750  0178  3001               	movlw	1
 10751  0179  0020               	movlb	0	; select bank0
 10752  017A  02E1               	subwf	_Validation,f
 10753                           
 10754                           ;main.c: 83: } else {
 10755  017B  0008               	return
 10756  017C                     i1l6255:	
 10757                           
 10758                           ;main.c: 84: CptBat++;
 10759  017C  3001               	movlw	1
 10760  017D  00C6               	movwf	??_MyTimer2ISR
 10761  017E  0846               	movf	??_MyTimer2ISR,w
 10762  017F  07B5               	addwf	_CptBat,f
 10763                           
 10764                           ;main.c: 85: if(CptBat > 100) {
 10765  0180  3065               	movlw	101
 10766  0181  0235               	subwf	_CptBat,w
 10767  0182  1C03               	skipc
 10768  0183  2986               	goto	i1l6259
 10769                           
 10770                           ;main.c: 86: do { LATCbits.LATC5 = 0; } while(0);
 10771  0184  0022               	movlb	2	; select bank2
 10772  0185  128E               	bcf	14,5	;volatile
 10773  0186                     i1l6259:	
 10774                           
 10775                           ;main.c: 87: }
 10776                           ;main.c: 89: I2C_Write1ByteRegister(0x40, 101, 0);
 10777  0186  3065               	movlw	101
 10778  0187  0020               	movlb	0	; select bank0
 10779  0188  00C6               	movwf	??_MyTimer2ISR
 10780  0189  0846               	movf	??_MyTimer2ISR,w
 10781  018A  00C2               	movwf	i1I2C_Write1ByteRegister@reg
 10782  018B  01C3               	clrf	i1I2C_Write1ByteRegister@data
 10783  018C  3040               	movlw	64
 10784  018D  3184  24AF         	fcall	i1_I2C_Write1ByteRegister
 10785                           
 10786                           ;main.c: 91: }
 10787                           ;main.c: 92: } else {
 10788  018F  0008               	return
 10789  0190                     i1l6261:	
 10790                           
 10791                           ;main.c: 93: if(StateBat == S_bat_high) {
 10792  0190  0020               	movlb	0	; select bank0
 10793  0191  035F               	decf	_StateBat,w
 10794  0192  1D03               	btfss	3,2
 10795  0193  29A2               	goto	i1l6267
 10796                           
 10797                           ;main.c: 94: EUSART_Write('B');
 10798  0194  3042               	movlw	66
 10799  0195  318E  26EB  3181   	fcall	_EUSART_Write
 10800                           
 10801                           ;main.c: 95: EUSART_Write('0');
 10802  0198  3030               	movlw	48
 10803  0199  318E  26EB  3181   	fcall	_EUSART_Write
 10804                           
 10805                           ;main.c: 96: EUSART_Write('r');
 10806  019C  3072               	movlw	114
 10807  019D  318E  26EB  3181   	fcall	_EUSART_Write
 10808                           
 10809                           ;main.c: 97: StateBat = S_bat_low;
 10810  01A0  0020               	movlb	0	; select bank0
 10811  01A1  01DF               	clrf	_StateBat
 10812  01A2                     i1l6267:	
 10813                           
 10814                           ;main.c: 98: }
 10815                           ;main.c: 100: I2C_Write1ByteRegister(0x40, 101, 0);
 10816  01A2  3065               	movlw	101
 10817  01A3  00C6               	movwf	??_MyTimer2ISR
 10818  01A4  0846               	movf	??_MyTimer2ISR,w
 10819  01A5  00C2               	movwf	i1I2C_Write1ByteRegister@reg
 10820  01A6  01C3               	clrf	i1I2C_Write1ByteRegister@data
 10821  01A7  3040               	movlw	64
 10822  01A8  3184  24AF         	fcall	i1_I2C_Write1ByteRegister
 10823  01AA  0008               	return
 10824  01AB                     __end_of_MyTimer2ISR:	
 10825                           
 10826                           	psect	text71
 10827  0DF4                     __ptext71:	
 10828 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 10829 ;; Defined at:
 10830 ;;		line 190 in file "mcc_generated_files/tmr2.c"
 10831 ;; Parameters:    Size  Location     Type
 10832 ;;		None
 10833 ;; Auto vars:     Size  Location     Type
 10834 ;;		None
 10835 ;; Return value:  Size  Location     Type
 10836 ;;                  1    wreg      void 
 10837 ;; Registers used:
 10838 ;;		None
 10839 ;; Tracked objects:
 10840 ;;		On entry : 0/0
 10841 ;;		On exit  : 0/0
 10842 ;;		Unchanged: 0/0
 10843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10848 ;;Total ram usage:        0 bytes
 10849 ;; Hardware stack levels used:    1
 10850 ;; This function calls:
 10851 ;;		Nothing
 10852 ;; This function is called by:
 10853 ;;		_TMR2_Initialize
 10854 ;;		_TMR2_CallBack
 10855 ;; This function uses a non-reentrant model
 10856 ;;
 10857                           
 10858                           
 10859                           ;psect for function _TMR2_DefaultInterruptHandler
 10860  0DF4                     _TMR2_DefaultInterruptHandler:	
 10861                           
 10862                           ;incstack = 0
 10863                           ; Regs used in _TMR2_DefaultInterruptHandler: []
 10864  0DF4  0008               	return
 10865  0DF5                     __end_of_TMR2_DefaultInterruptHandler:	
 10866                           
 10867                           	psect	text72
 10868  04AF                     __ptext72:	
 10869 ;; *************** function i1_I2C_Write1ByteRegister *****************
 10870 ;; Defined at:
 10871 ;;		line 91 in file "mcc_generated_files/examples/i2c_master_example.c"
 10872 ;; Parameters:    Size  Location     Type
 10873 ;;  address         1    wreg     unsigned char 
 10874 ;;  reg             1    5[BANK0 ] unsigned char 
 10875 ;;  data            1    6[BANK0 ] unsigned char 
 10876 ;; Auto vars:     Size  Location     Type
 10877 ;;  address         1    8[BANK0 ] unsigned char 
 10878 ;; Return value:  Size  Location     Type
 10879 ;;                  1    wreg      void 
 10880 ;; Registers used:
 10881 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10882 ;; Tracked objects:
 10883 ;;		On entry : 0/0
 10884 ;;		On exit  : 0/0
 10885 ;;		Unchanged: 0/0
 10886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10887 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10888 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10889 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10890 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10891 ;;Total ram usage:        4 bytes
 10892 ;; Hardware stack levels used:    1
 10893 ;; Hardware stack levels required when called:    8
 10894 ;; This function calls:
 10895 ;;		i1_I2C_Close
 10896 ;;		i1_I2C_MasterWrite
 10897 ;;		i1_I2C_Open
 10898 ;;		i1_I2C_SetAddressNackCallback
 10899 ;;		i1_I2C_SetBuffer
 10900 ;;		i1_I2C_SetDataCompleteCallback
 10901 ;; This function is called by:
 10902 ;;		_MyTimer2ISR
 10903 ;; This function uses a non-reentrant model
 10904 ;;
 10905                           
 10906                           
 10907                           ;psect for function i1_I2C_Write1ByteRegister
 10908  04AF                     i1_I2C_Write1ByteRegister:	
 10909                           
 10910                           ;incstack = 0
 10911 ;; hardware stack exceeded
 10912                           ; Regs used in i1_I2C_Write1ByteRegister: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10913                           ;i1I2C_Write1ByteRegister@address stored from wreg
 10914  04AF  0020               	movlb	0	; select bank0
 10915  04B0  00C5               	movwf	i1I2C_Write1ByteRegister@address
 10916  04B1                     i1l6191:	
 10917                           ;i2c_master_example.c: 93: while(!I2C_Open(address));
 10918                           
 10919  04B1  0020               	movlb	0	; select bank0
 10920  04B2  0845               	movf	i1I2C_Write1ByteRegister@address,w
 10921  04B3  3183  23AC  3184   	fcall	i1_I2C_Open
 10922  04B6  3A00               	xorlw	0
 10923  04B7  1903               	skipnz
 10924  04B8  2CB1               	goto	i1l6191
 10925                           
 10926                           ;i2c_master_example.c: 94: I2C_SetDataCompleteCallback(wr1RegCompleteHandler,&data);
 10927  04B9  30F1               	movlw	low _wr1RegCompleteHandler
 10928  04BA  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 10929  04BB  3006               	movlw	high _wr1RegCompleteHandler
 10930  04BC  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 10931  04BD  3043               	movlw	(low (i1I2C_Write1ByteRegister@data| 0))& (0+255)
 10932  04BE  0020               	movlb	0	; select bank0
 10933  04BF  00C4               	movwf	??i1_I2C_Write1ByteRegister
 10934  04C0  0844               	movf	??i1_I2C_Write1ByteRegister,w
 10935  04C1  00F7               	movwf	i1I2C_SetDataCompleteCallback@ptr
 10936  04C2  318F  27AA  3184   	fcall	i1_I2C_SetDataCompleteCallback
 10937                           
 10938                           ;i2c_master_example.c: 95: I2C_SetBuffer(&reg,1);
 10939  04C5  3001               	movlw	1
 10940  04C6  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 10941  04C7  3000               	movlw	0
 10942  04C8  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 10943  04C9  3042               	movlw	(low (i1I2C_Write1ByteRegister@reg| 0))& (0+255)
 10944  04CA  3187  27F2  3184   	fcall	i1_I2C_SetBuffer
 10945                           
 10946                           ;i2c_master_example.c: 96: I2C_SetAddressNackCallback((0),(0));
 10947  04CD  3000               	movlw	0
 10948  04CE  00F5               	movwf	i1I2C_SetAddressNackCallback@cb
 10949  04CF  00F6               	movwf	i1I2C_SetAddressNackCallback@cb+1
 10950  04D0  01F7               	clrf	i1I2C_SetAddressNackCallback@ptr
 10951  04D1  318F  27C2  3184   	fcall	i1_I2C_SetAddressNackCallback
 10952                           
 10953                           ;i2c_master_example.c: 97: I2C_MasterWrite();
 10954  04D4  318E  2668  3184   	fcall	i1_I2C_MasterWrite
 10955  04D7                     i1l6201:	
 10956                           ;i2c_master_example.c: 98: while(I2C_BUSY == I2C_Close());
 10957                           
 10958  04D7  3186  26AA  3184   	fcall	i1_I2C_Close
 10959  04DA  3A01               	xorlw	1
 10960  04DB  1D03               	btfss	3,2
 10961  04DC  0008               	return
 10962  04DD  2CD7               	goto	i1l6201
 10963  04DE                     __end_ofi1_I2C_Write1ByteRegister:	
 10964                           
 10965                           	psect	text73
 10966  0749                     __ptext73:	
 10967 ;; *************** function _PWM3_LoadDutyValue *****************
 10968 ;; Defined at:
 10969 ;;		line 74 in file "mcc_generated_files/pwm3.c"
 10970 ;; Parameters:    Size  Location     Type
 10971 ;;  dutyValue       2    0[COMMON] unsigned int 
 10972 ;; Auto vars:     Size  Location     Type
 10973 ;;		None
 10974 ;; Return value:  Size  Location     Type
 10975 ;;                  1    wreg      void 
 10976 ;; Registers used:
 10977 ;;		wreg, status,2, status,0
 10978 ;; Tracked objects:
 10979 ;;		On entry : 0/0
 10980 ;;		On exit  : 0/0
 10981 ;;		Unchanged: 0/0
 10982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10983 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10985 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10986 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10987 ;;Total ram usage:        4 bytes
 10988 ;; Hardware stack levels used:    1
 10989 ;; This function calls:
 10990 ;;		Nothing
 10991 ;; This function is called by:
 10992 ;;		_MyTimer2ISR
 10993 ;; This function uses a non-reentrant model
 10994 ;;
 10995                           
 10996                           
 10997                           ;psect for function _PWM3_LoadDutyValue
 10998  0749                     _PWM3_LoadDutyValue:	
 10999                           
 11000                           ;pwm3.c: 77: PWM3DCH = (dutyValue & 0x03FC)>>2;
 11001                           
 11002                           ;incstack = 0
 11003                           ; Regs used in _PWM3_LoadDutyValue: [wreg+status,2+status,0]
 11004  0749  0871               	movf	PWM3_LoadDutyValue@dutyValue+1,w
 11005  074A  00F3               	movwf	??_PWM3_LoadDutyValue+1
 11006  074B  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
 11007  074C  00F2               	movwf	??_PWM3_LoadDutyValue
 11008  074D  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
 11009  074E  0CF2               	rrf	??_PWM3_LoadDutyValue,f
 11010  074F  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
 11011  0750  0CF2               	rrf	??_PWM3_LoadDutyValue,f
 11012  0751  0872               	movf	??_PWM3_LoadDutyValue,w
 11013  0752  002C               	movlb	12	; select bank12
 11014  0753  0098               	movwf	24	;volatile
 11015                           
 11016                           ;pwm3.c: 80: PWM3DCL = (dutyValue & 0x0003)<<6;
 11017  0754  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
 11018  0755  3903               	andlw	3
 11019  0756  00F2               	movwf	??_PWM3_LoadDutyValue
 11020  0757  3005               	movlw	5
 11021  0758                     u123_25:	
 11022  0758  35F2               	lslf	??_PWM3_LoadDutyValue,f
 11023  0759  3EFF               	addlw	-1
 11024  075A  1D03               	skipz
 11025  075B  2F58               	goto	u123_25
 11026  075C  3572               	lslf	??_PWM3_LoadDutyValue,w
 11027  075D  0097               	movwf	23	;volatile
 11028  075E  0008               	return
 11029  075F                     __end_of_PWM3_LoadDutyValue:	
 11030                           
 11031                           	psect	text74
 11032  0F61                     __ptext74:	
 11033 ;; *************** function _MATHACC_PIDController *****************
 11034 ;; Defined at:
 11035 ;;		line 78 in file "mcc_generated_files/mathacc.c"
 11036 ;; Parameters:    Size  Location     Type
 11037 ;;  setpoint        2    0[COMMON] int 
 11038 ;;  input           2    2[COMMON] int 
 11039 ;; Auto vars:     Size  Location     Type
 11040 ;;		None
 11041 ;; Return value:  Size  Location     Type
 11042 ;;                  1    wreg      void 
 11043 ;; Registers used:
 11044 ;;		wreg, status,2
 11045 ;; Tracked objects:
 11046 ;;		On entry : 0/0
 11047 ;;		On exit  : 0/0
 11048 ;;		Unchanged: 0/0
 11049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11050 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11053 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11054 ;;Total ram usage:        4 bytes
 11055 ;; Hardware stack levels used:    1
 11056 ;; This function calls:
 11057 ;;		Nothing
 11058 ;; This function is called by:
 11059 ;;		_MyTimer2ISR
 11060 ;; This function uses a non-reentrant model
 11061 ;;
 11062                           
 11063                           
 11064                           ;psect for function _MATHACC_PIDController
 11065  0F61                     _MATHACC_PIDController:	
 11066                           
 11067                           ;mathacc.c: 80: PID1SETH = (uint8_t) (((uint16_t)setpoint & 0xFF00) >> 8);
 11068                           
 11069                           ;incstack = 0
 11070                           ; Regs used in _MATHACC_PIDController: [wreg+status,2]
 11071  0F61  0871               	movf	MATHACC_PIDController@setpoint+1,w
 11072  0F62  002B               	movlb	11	; select bank11
 11073  0F63  008D               	movwf	13	;volatile
 11074                           
 11075                           ;mathacc.c: 81: PID1SETL = (uint8_t) (setpoint & 0x00FF);
 11076  0F64  0870               	movf	MATHACC_PIDController@setpoint,w
 11077  0F65  008C               	movwf	12	;volatile
 11078                           
 11079                           ;mathacc.c: 82: PID1INH = (uint8_t) (((uint16_t)input & 0xFF00) >> 8);
 11080  0F66  0873               	movf	MATHACC_PIDController@input+1,w
 11081  0F67  008F               	movwf	15	;volatile
 11082                           
 11083                           ;mathacc.c: 83: PID1INL = (uint8_t) (input & 0x00FF);
 11084  0F68  0872               	movf	MATHACC_PIDController@input,w
 11085  0F69  008E               	movwf	14	;volatile
 11086  0F6A  0008               	return
 11087  0F6B                     __end_of_MATHACC_PIDController:	
 11088                           
 11089                           	psect	text75
 11090  047D                     __ptext75:	
 11091 ;; *************** function _I2C_Read1ByteRegister *****************
 11092 ;; Defined at:
 11093 ;;		line 63 in file "mcc_generated_files/examples/i2c_master_example.c"
 11094 ;; Parameters:    Size  Location     Type
 11095 ;;  address         1    wreg     unsigned char 
 11096 ;;  reg             1    5[BANK0 ] unsigned char 
 11097 ;; Auto vars:     Size  Location     Type
 11098 ;;  address         1    7[BANK0 ] unsigned char 
 11099 ;;  returnValue     1    8[BANK0 ] unsigned char 
 11100 ;; Return value:  Size  Location     Type
 11101 ;;                  1    wreg      unsigned char 
 11102 ;; Registers used:
 11103 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11104 ;; Tracked objects:
 11105 ;;		On entry : 0/0
 11106 ;;		On exit  : 0/0
 11107 ;;		Unchanged: 0/0
 11108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11109 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11110 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11111 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11112 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11113 ;;Total ram usage:        4 bytes
 11114 ;; Hardware stack levels used:    1
 11115 ;; Hardware stack levels required when called:    8
 11116 ;; This function calls:
 11117 ;;		i1_I2C_Close
 11118 ;;		i1_I2C_MasterWrite
 11119 ;;		i1_I2C_Open
 11120 ;;		i1_I2C_SetAddressNackCallback
 11121 ;;		i1_I2C_SetBuffer
 11122 ;;		i1_I2C_SetDataCompleteCallback
 11123 ;; This function is called by:
 11124 ;;		_MyTimer2ISR
 11125 ;; This function uses a non-reentrant model
 11126 ;;
 11127                           
 11128                           
 11129                           ;psect for function _I2C_Read1ByteRegister
 11130  047D                     _I2C_Read1ByteRegister:	
 11131                           
 11132                           ;incstack = 0
 11133 ;; hardware stack exceeded
 11134                           ; Regs used in _I2C_Read1ByteRegister: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11135                           ;I2C_Read1ByteRegister@address stored from wreg
 11136  047D  0020               	movlb	0	; select bank0
 11137  047E  00C4               	movwf	I2C_Read1ByteRegister@address
 11138                           
 11139                           ;i2c_master_example.c: 65: uint8_t returnValue = 0x00;
 11140  047F  01C5               	clrf	I2C_Read1ByteRegister@returnValue
 11141  0480                     i1l6165:	
 11142                           ;i2c_master_example.c: 67: while(!I2C_Open(address));
 11143                           
 11144  0480  0020               	movlb	0	; select bank0
 11145  0481  0844               	movf	I2C_Read1ByteRegister@address,w
 11146  0482  3183  23AC  3184   	fcall	i1_I2C_Open
 11147  0485  3A00               	xorlw	0
 11148  0486  1903               	skipnz
 11149  0487  2C80               	goto	i1l6165
 11150                           
 11151                           ;i2c_master_example.c: 68: I2C_SetDataCompleteCallback(rd1RegCompleteHandler,&returnValu
      +                          e);
 11152  0488  301D               	movlw	low _rd1RegCompleteHandler
 11153  0489  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 11154  048A  3007               	movlw	high _rd1RegCompleteHandler
 11155  048B  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 11156  048C  3045               	movlw	(low (I2C_Read1ByteRegister@returnValue| 0))& (0+255)
 11157  048D  0020               	movlb	0	; select bank0
 11158  048E  00C3               	movwf	??_I2C_Read1ByteRegister
 11159  048F  0843               	movf	??_I2C_Read1ByteRegister,w
 11160  0490  00F7               	movwf	i1I2C_SetDataCompleteCallback@ptr
 11161  0491  318F  27AA  3184   	fcall	i1_I2C_SetDataCompleteCallback
 11162                           
 11163                           ;i2c_master_example.c: 69: I2C_SetBuffer(&reg,1);
 11164  0494  3001               	movlw	1
 11165  0495  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 11166  0496  3000               	movlw	0
 11167  0497  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 11168  0498  3042               	movlw	(low (I2C_Read1ByteRegister@reg| 0))& (0+255)
 11169  0499  3187  27F2  3184   	fcall	i1_I2C_SetBuffer
 11170                           
 11171                           ;i2c_master_example.c: 70: I2C_SetAddressNackCallback((0),(0));
 11172  049C  3000               	movlw	0
 11173  049D  00F5               	movwf	i1I2C_SetAddressNackCallback@cb
 11174  049E  00F6               	movwf	i1I2C_SetAddressNackCallback@cb+1
 11175  049F  01F7               	clrf	i1I2C_SetAddressNackCallback@ptr
 11176  04A0  318F  27C2  3184   	fcall	i1_I2C_SetAddressNackCallback
 11177                           
 11178                           ;i2c_master_example.c: 71: I2C_MasterWrite();
 11179  04A3  318E  2668  3184   	fcall	i1_I2C_MasterWrite
 11180  04A6                     i1l6175:	
 11181                           ;i2c_master_example.c: 72: while(I2C_BUSY == I2C_Close());
 11182                           
 11183  04A6  3186  26AA  3184   	fcall	i1_I2C_Close
 11184  04A9  3A01               	xorlw	1
 11185  04AA  1903               	skipnz
 11186  04AB  2CA6               	goto	i1l6175
 11187                           
 11188                           ;i2c_master_example.c: 74: return returnValue;
 11189  04AC  0020               	movlb	0	; select bank0
 11190  04AD  0845               	movf	I2C_Read1ByteRegister@returnValue,w
 11191  04AE  0008               	return
 11192  04AF                     __end_of_I2C_Read1ByteRegister:	
 11193                           
 11194                           	psect	text76
 11195  0FC2                     __ptext76:	
 11196 ;; *************** function i1_I2C_SetAddressNackCallback *****************
 11197 ;; Defined at:
 11198 ;;		line 283 in file "mcc_generated_files/i2c_master.c"
 11199 ;; Parameters:    Size  Location     Type
 11200 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
 11201 ;;		 -> Absolute function(1), 
 11202 ;;  ptr             1    7[COMMON] PTR void 
 11203 ;;		 -> NULL(0), 
 11204 ;; Auto vars:     Size  Location     Type
 11205 ;;		None
 11206 ;; Return value:  Size  Location     Type
 11207 ;;                  1    wreg      void 
 11208 ;; Registers used:
 11209 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11210 ;; Tracked objects:
 11211 ;;		On entry : 0/0
 11212 ;;		On exit  : 0/0
 11213 ;;		Unchanged: 0/0
 11214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11215 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11217 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11218 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11219 ;;Total ram usage:        4 bytes
 11220 ;; Hardware stack levels used:    1
 11221 ;; Hardware stack levels required when called:    1
 11222 ;; This function calls:
 11223 ;;		i1_I2C_SetCallback
 11224 ;; This function is called by:
 11225 ;;		_I2C_Read1ByteRegister
 11226 ;;		i1_I2C_Write1ByteRegister
 11227 ;; This function uses a non-reentrant model
 11228 ;;
 11229                           
 11230                           
 11231                           ;psect for function i1_I2C_SetAddressNackCallback
 11232  0FC2                     i1_I2C_SetAddressNackCallback:	
 11233                           
 11234                           ;i2c_master.c: 285: I2C_SetCallback(I2C_ADDR_NACK, cb, ptr);
 11235                           
 11236                           ;incstack = 0
 11237                           ; Regs used in i1_I2C_SetAddressNackCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 11238  0FC2  0876               	movf	i1I2C_SetAddressNackCallback@cb+1,w
 11239  0FC3  00F1               	movwf	i1I2C_SetCallback@cb+1
 11240  0FC4  0875               	movf	i1I2C_SetAddressNackCallback@cb,w
 11241  0FC5  00F0               	movwf	i1I2C_SetCallback@cb
 11242  0FC6  0877               	movf	i1I2C_SetAddressNackCallback@ptr,w
 11243  0FC7  00F8               	movwf	??i1_I2C_SetAddressNackCallback
 11244  0FC8  0878               	movf	??i1_I2C_SetAddressNackCallback,w
 11245  0FC9  00F2               	movwf	i1I2C_SetCallback@ptr
 11246  0FCA  3002               	movlw	2
 11247  0FCB  3185  25CE         	fcall	i1_I2C_SetCallback
 11248  0FCD  0008               	return
 11249  0FCE                     __end_ofi1_I2C_SetAddressNackCallback:	
 11250                           
 11251                           	psect	text77
 11252  03AC                     __ptext77:	
 11253 ;; *************** function i1_I2C_Open *****************
 11254 ;; Defined at:
 11255 ;;		line 176 in file "mcc_generated_files/i2c_master.c"
 11256 ;; Parameters:    Size  Location     Type
 11257 ;;  address         1    wreg     unsigned char 
 11258 ;; Auto vars:     Size  Location     Type
 11259 ;;  address         1    1[COMMON] unsigned char 
 11260 ;;  I2C_Open        1    2[COMMON] enum E92
 11261 ;; Return value:  Size  Location     Type
 11262 ;;                  1    wreg      enum E92
 11263 ;; Registers used:
 11264 ;;		wreg, status,2, status,0, pclath, cstack
 11265 ;; Tracked objects:
 11266 ;;		On entry : 0/0
 11267 ;;		On exit  : 0/0
 11268 ;;		Unchanged: 0/0
 11269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11271 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11272 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11273 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11274 ;;Total ram usage:        3 bytes
 11275 ;; Hardware stack levels used:    1
 11276 ;; Hardware stack levels required when called:    1
 11277 ;; This function calls:
 11278 ;;		i1_I2C_MasterClearIrq
 11279 ;;		i1_I2C_MasterOpen
 11280 ;; This function is called by:
 11281 ;;		_I2C_Read1ByteRegister
 11282 ;;		i1_I2C_Write1ByteRegister
 11283 ;; This function uses a non-reentrant model
 11284 ;;
 11285                           
 11286                           
 11287                           ;psect for function i1_I2C_Open
 11288  03AC                     i1_I2C_Open:	
 11289                           
 11290                           ;incstack = 0
 11291                           ; Regs used in i1_I2C_Open: [wreg+status,2+status,0+pclath+cstack]
 11292                           ;i1I2C_Open@address stored from wreg
 11293  03AC  00F1               	movwf	i1I2C_Open@address
 11294                           
 11295                           ;i2c_master.c: 178: i2c_error_t returnValue = I2C_BUSY;
 11296  03AD  01F2               	clrf	i1I2C_Open@returnValue
 11297  03AE  0AF2               	incf	i1I2C_Open@returnValue,f
 11298                           
 11299                           ;i2c_master.c: 180: if(!I2C_Status.inUse)
 11300  03AF  0021               	movlb	1	; select bank1
 11301  03B0  193C               	btfsc	(_I2C_Status^(0+128)+28),2
 11302  03B1  2BE1               	goto	i1l335
 11303                           
 11304                           ;i2c_master.c: 181: {
 11305                           ;i2c_master.c: 182: I2C_Status.address = address;
 11306  03B2  0871               	movf	i1I2C_Open@address,w
 11307  03B3  00F0               	movwf	??i1_I2C_Open
 11308  03B4  0870               	movf	??i1_I2C_Open,w
 11309  03B5  00B6               	movwf	(_I2C_Status^(0+128)+22)
 11310                           
 11311                           ;i2c_master.c: 183: I2C_Status.busy = 0;
 11312  03B6  10BC               	bcf	(_I2C_Status^(0+128)+28),1
 11313                           
 11314                           ;i2c_master.c: 184: I2C_Status.inUse = 1;
 11315  03B7  153C               	bsf	(_I2C_Status^(0+128)+28),2
 11316                           
 11317                           ;i2c_master.c: 185: I2C_Status.addressNackCheck = 0;
 11318  03B8  103C               	bcf	(_I2C_Status^(0+128)+28),0
 11319                           
 11320                           ;i2c_master.c: 186: I2C_Status.state = I2C_RESET;
 11321  03B9  300E               	movlw	14
 11322  03BA  00F0               	movwf	??i1_I2C_Open
 11323  03BB  0870               	movf	??i1_I2C_Open,w
 11324  03BC  00BA               	movwf	(_I2C_Status^(0+128)+26)
 11325                           
 11326                           ;i2c_master.c: 187: I2C_Status.time_out_value = 500;
 11327  03BD  30F4               	movlw	244
 11328  03BE  00B4               	movwf	(_I2C_Status^(0+128)+20)
 11329  03BF  3001               	movlw	1
 11330  03C0  00B5               	movwf	(_I2C_Status^(0+128)+21)
 11331                           
 11332                           ;i2c_master.c: 188: I2C_Status.bufferFree = 1;
 11333  03C1  15BC               	bsf	(_I2C_Status^(0+128)+28),3
 11334                           
 11335                           ;i2c_master.c: 191: I2C_Status.callbackTable[I2C_DATA_COMPLETE]=I2C_CallbackReturnStop;
 11336  03C2  30A1               	movlw	low _I2C_CallbackReturnStop
 11337  03C3  00A0               	movwf	_I2C_Status^(0+128)
 11338  03C4  300E               	movlw	high _I2C_CallbackReturnStop
 11339  03C5  00A1               	movwf	(_I2C_Status^(0+128)+1)
 11340                           
 11341                           ;i2c_master.c: 192: I2C_Status.callbackPayload[I2C_DATA_COMPLETE] = (0);
 11342  03C6  01AC               	clrf	(low ((_I2C_Status| 0+12)))^(0+128)
 11343                           
 11344                           ;i2c_master.c: 193: I2C_Status.callbackTable[I2C_WRITE_COLLISION]=I2C_CallbackReturnStop
      +                          ;
 11345  03C7  30A1               	movlw	low _I2C_CallbackReturnStop
 11346  03C8  00A2               	movwf	(low ((_I2C_Status| 0+2)))^(0+128)
 11347  03C9  300E               	movlw	high _I2C_CallbackReturnStop
 11348  03CA  00A3               	movwf	((low ((_I2C_Status| 0+2)))^(0+128)+1)
 11349                           
 11350                           ;i2c_master.c: 194: I2C_Status.callbackPayload[I2C_WRITE_COLLISION] = (0);
 11351  03CB  01AD               	clrf	(low ((_I2C_Status| 0+13)))^(0+128)
 11352                           
 11353                           ;i2c_master.c: 195: I2C_Status.callbackTable[I2C_ADDR_NACK]=I2C_CallbackReturnStop;
 11354  03CC  30A1               	movlw	low _I2C_CallbackReturnStop
 11355  03CD  00A4               	movwf	(low ((_I2C_Status| 0+4)))^(0+128)
 11356  03CE  300E               	movlw	high _I2C_CallbackReturnStop
 11357  03CF  00A5               	movwf	((low ((_I2C_Status| 0+4)))^(0+128)+1)
 11358                           
 11359                           ;i2c_master.c: 196: I2C_Status.callbackPayload[I2C_ADDR_NACK] = (0);
 11360  03D0  01AE               	clrf	(low ((_I2C_Status| 0+14)))^(0+128)
 11361                           
 11362                           ;i2c_master.c: 197: I2C_Status.callbackTable[I2C_DATA_NACK]=I2C_CallbackReturnStop;
 11363  03D1  30A1               	movlw	low _I2C_CallbackReturnStop
 11364  03D2  00A6               	movwf	(low ((_I2C_Status| 0+6)))^(0+128)
 11365  03D3  300E               	movlw	high _I2C_CallbackReturnStop
 11366  03D4  00A7               	movwf	((low ((_I2C_Status| 0+6)))^(0+128)+1)
 11367                           
 11368                           ;i2c_master.c: 198: I2C_Status.callbackPayload[I2C_DATA_NACK] = (0);
 11369  03D5  01AF               	clrf	(low ((_I2C_Status| 0+15)))^(0+128)
 11370                           
 11371                           ;i2c_master.c: 199: I2C_Status.callbackTable[I2C_TIMEOUT]=I2C_CallbackReturnReset;
 11372  03D6  30A7               	movlw	low _I2C_CallbackReturnReset
 11373  03D7  00A8               	movwf	(low ((_I2C_Status| 0+8)))^(0+128)
 11374  03D8  300E               	movlw	high _I2C_CallbackReturnReset
 11375  03D9  00A9               	movwf	((low ((_I2C_Status| 0+8)))^(0+128)+1)
 11376                           
 11377                           ;i2c_master.c: 200: I2C_Status.callbackPayload[I2C_TIMEOUT] = (0);
 11378  03DA  01B0               	clrf	(low ((_I2C_Status| 0+16)))^(0+128)
 11379                           
 11380                           ;i2c_master.c: 202: I2C_MasterClearIrq();
 11381  03DB  318D  25FD  3183   	fcall	i1_I2C_MasterClearIrq
 11382                           
 11383                           ;i2c_master.c: 203: I2C_MasterOpen();
 11384  03DE  318F  27B6         	fcall	i1_I2C_MasterOpen
 11385                           
 11386                           ;i2c_master.c: 204: returnValue = I2C_NOERR;
 11387  03E0  01F2               	clrf	i1I2C_Open@returnValue
 11388  03E1                     i1l335:	
 11389                           
 11390                           ;i2c_master.c: 205: }
 11391                           ;i2c_master.c: 206: return returnValue;
 11392  03E1  0872               	movf	i1I2C_Open@returnValue,w
 11393  03E2  0008               	return
 11394  03E3                     __end_ofi1_I2C_Open:	
 11395                           
 11396                           	psect	text78
 11397  0FB6                     __ptext78:	
 11398 ;; *************** function i1_I2C_MasterOpen *****************
 11399 ;; Defined at:
 11400 ;;		line 543 in file "mcc_generated_files/i2c_master.c"
 11401 ;; Parameters:    Size  Location     Type
 11402 ;;		None
 11403 ;; Auto vars:     Size  Location     Type
 11404 ;;		None
 11405 ;; Return value:  Size  Location     Type
 11406 ;;                  1    wreg      unsigned char 
 11407 ;; Registers used:
 11408 ;;		wreg, status,2
 11409 ;; Tracked objects:
 11410 ;;		On entry : 0/0
 11411 ;;		On exit  : 0/0
 11412 ;;		Unchanged: 0/0
 11413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11417 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11418 ;;Total ram usage:        0 bytes
 11419 ;; Hardware stack levels used:    1
 11420 ;; This function calls:
 11421 ;;		Nothing
 11422 ;; This function is called by:
 11423 ;;		i1_I2C_Open
 11424 ;; This function uses a non-reentrant model
 11425 ;;
 11426                           
 11427                           
 11428                           ;psect for function i1_I2C_MasterOpen
 11429  0FB6                     i1_I2C_MasterOpen:	
 11430                           
 11431                           ;i2c_master.c: 545: if(!SSP1CON1bits.SSPEN)
 11432                           
 11433                           ;incstack = 0
 11434                           ; Regs used in i1_I2C_MasterOpen: [wreg+status,2]
 11435  0FB6  0024               	movlb	4	; select bank4
 11436  0FB7  1A95               	btfsc	21,5	;volatile
 11437  0FB8  0008               	return
 11438                           
 11439                           ;i2c_master.c: 546: {
 11440                           ;i2c_master.c: 547: SSP1STAT = 0x80;
 11441  0FB9  3080               	movlw	128
 11442  0FBA  0094               	movwf	20	;volatile
 11443                           
 11444                           ;i2c_master.c: 548: SSP1CON1 = 0x08;
 11445  0FBB  3008               	movlw	8
 11446  0FBC  0095               	movwf	21	;volatile
 11447                           
 11448                           ;i2c_master.c: 549: SSP1CON2 = 0x00;
 11449  0FBD  0196               	clrf	22	;volatile
 11450                           
 11451                           ;i2c_master.c: 550: SSP1ADD = 0x09;
 11452  0FBE  3009               	movlw	9
 11453  0FBF  0092               	movwf	18	;volatile
 11454                           
 11455                           ;i2c_master.c: 551: SSP1CON1bits.SSPEN = 1;
 11456  0FC0  1695               	bsf	21,5	;volatile
 11457                           
 11458                           ;i2c_master.c: 552: return 1;
 11459                           ;	Return value of i1_I2C_MasterOpen is never used
 11460  0FC1  0008               	return
 11461  0FC2                     __end_ofi1_I2C_MasterOpen:	
 11462                           ;i2c_master.c: 553: }
 11463                           ;i2c_master.c: 554: return 0;
 11464                           ;	Return value of i1_I2C_MasterOpen is never used
 11465                           
 11466                           
 11467                           	psect	text79
 11468  0E68                     __ptext79:	
 11469 ;; *************** function i1_I2C_MasterWrite *****************
 11470 ;; Defined at:
 11471 ;;		line 251 in file "mcc_generated_files/i2c_master.c"
 11472 ;; Parameters:    Size  Location     Type
 11473 ;;		None
 11474 ;; Auto vars:     Size  Location     Type
 11475 ;;		None
 11476 ;; Return value:  Size  Location     Type
 11477 ;;                  1    wreg      enum E92
 11478 ;; Registers used:
 11479 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11480 ;; Tracked objects:
 11481 ;;		On entry : 0/0
 11482 ;;		On exit  : 0/0
 11483 ;;		Unchanged: 0/0
 11484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11489 ;;Total ram usage:        0 bytes
 11490 ;; Hardware stack levels used:    1
 11491 ;; Hardware stack levels required when called:    7
 11492 ;; This function calls:
 11493 ;;		i1_I2C_MasterOperation
 11494 ;; This function is called by:
 11495 ;;		_I2C_Read1ByteRegister
 11496 ;;		i1_I2C_Write1ByteRegister
 11497 ;; This function uses a non-reentrant model
 11498 ;;
 11499                           
 11500                           
 11501                           ;psect for function i1_I2C_MasterWrite
 11502  0E68                     i1_I2C_MasterWrite:	
 11503                           
 11504                           ;i2c_master.c: 253: return I2C_MasterOperation(0);
 11505                           ;	Return value of i1_I2C_MasterWrite is never used
 11506                           
 11507                           ;incstack = 0
 11508 ;; hardware stack exceeded
 11509                           ; Regs used in i1_I2C_MasterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11510  0E68  3000               	movlw	0
 11511  0E69  3186  2653         	fcall	i1_I2C_MasterOperation
 11512  0E6B  0008               	return
 11513  0E6C                     __end_ofi1_I2C_MasterWrite:	
 11514                           
 11515                           	psect	text80
 11516  0653                     __ptext80:	
 11517 ;; *************** function i1_I2C_MasterOperation *****************
 11518 ;; Defined at:
 11519 ;;		line 224 in file "mcc_generated_files/i2c_master.c"
 11520 ;; Parameters:    Size  Location     Type
 11521 ;;  read            1    wreg     unsigned char 
 11522 ;; Auto vars:     Size  Location     Type
 11523 ;;  read            1    3[BANK0 ] unsigned char 
 11524 ;;  I2C_MasterOp    1    4[BANK0 ] enum E92
 11525 ;; Return value:  Size  Location     Type
 11526 ;;                  1    wreg      enum E92
 11527 ;; Registers used:
 11528 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11529 ;; Tracked objects:
 11530 ;;		On entry : 0/0
 11531 ;;		On exit  : 0/0
 11532 ;;		Unchanged: 0/0
 11533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11535 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11536 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11537 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11538 ;;Total ram usage:        3 bytes
 11539 ;; Hardware stack levels used:    1
 11540 ;; Hardware stack levels required when called:    6
 11541 ;; This function calls:
 11542 ;;		i1_I2C_MasterStart
 11543 ;;		i1_I2C_Poller
 11544 ;; This function is called by:
 11545 ;;		i1_I2C_MasterWrite
 11546 ;; This function uses a non-reentrant model
 11547 ;;
 11548                           
 11549                           
 11550                           ;psect for function i1_I2C_MasterOperation
 11551  0653                     i1_I2C_MasterOperation:	
 11552                           
 11553                           ;incstack = 0
 11554 ;; hardware stack exceeded
 11555                           ; Regs used in i1_I2C_MasterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11556                           ;i1I2C_MasterOperation@read stored from wreg
 11557  0653  0020               	movlb	0	; select bank0
 11558  0654  00C0               	movwf	i1I2C_MasterOperation@read
 11559                           
 11560                           ;i2c_master.c: 226: i2c_error_t returnValue = I2C_BUSY;
 11561  0655  01C1               	clrf	i1I2C_MasterOperation@returnValue
 11562  0656  0AC1               	incf	i1I2C_MasterOperation@returnValue,f
 11563                           
 11564                           ;i2c_master.c: 227: if(!I2C_Status.busy)
 11565  0657  0021               	movlb	1	; select bank1
 11566  0658  18BC               	btfsc	(_I2C_Status^(0+128)+28),1
 11567  0659  2E6E               	goto	i1l6145
 11568                           
 11569                           ;i2c_master.c: 228: {
 11570                           ;i2c_master.c: 229: I2C_Status.busy = 1;
 11571  065A  14BC               	bsf	(_I2C_Status^(0+128)+28),1
 11572                           
 11573                           ;i2c_master.c: 230: returnValue = I2C_NOERR;
 11574  065B  0020               	movlb	0	; select bank0
 11575  065C  01C1               	clrf	i1I2C_MasterOperation@returnValue
 11576                           
 11577                           ;i2c_master.c: 232: if(read)
 11578  065D  0840               	movf	i1I2C_MasterOperation@read,w
 11579  065E  1903               	btfsc	3,2
 11580  065F  2E64               	goto	i1l6139
 11581                           
 11582                           ;i2c_master.c: 233: {
 11583                           ;i2c_master.c: 234: I2C_Status.state = I2C_SEND_ADR_READ;
 11584  0660  0021               	movlb	1	; select bank1
 11585  0661  01BA               	clrf	(_I2C_Status^(0+128)+26)
 11586  0662  0ABA               	incf	(_I2C_Status^(0+128)+26),f
 11587                           
 11588                           ;i2c_master.c: 235: }
 11589  0663  2E69               	goto	i1l6141
 11590  0664                     i1l6139:	
 11591                           
 11592                           ;i2c_master.c: 236: else
 11593                           ;i2c_master.c: 237: {
 11594                           ;i2c_master.c: 238: I2C_Status.state = I2C_SEND_ADR_WRITE;
 11595  0664  3002               	movlw	2
 11596  0665  00FD               	movwf	??i1_I2C_MasterOperation
 11597  0666  087D               	movf	??i1_I2C_MasterOperation,w
 11598  0667  0021               	movlb	1	; select bank1
 11599  0668  00BA               	movwf	(_I2C_Status^(0+128)+26)
 11600  0669                     i1l6141:	
 11601                           
 11602                           ;i2c_master.c: 239: }
 11603                           ;i2c_master.c: 240: I2C_MasterStart();
 11604  0669  318E  2606  3186   	fcall	i1_I2C_MasterStart
 11605                           
 11606                           ;i2c_master.c: 241: I2C_Poller();
 11607  066C  318F  2757         	fcall	i1_I2C_Poller
 11608  066E                     i1l6145:	
 11609                           
 11610                           ;i2c_master.c: 242: }
 11611                           ;i2c_master.c: 243: return returnValue;
 11612  066E  0020               	movlb	0	; select bank0
 11613  066F  0841               	movf	i1I2C_MasterOperation@returnValue,w
 11614  0670  0008               	return
 11615  0671                     __end_ofi1_I2C_MasterOperation:	
 11616                           
 11617                           	psect	text81
 11618  0F57                     __ptext81:	
 11619 ;; *************** function i1_I2C_Poller *****************
 11620 ;; Defined at:
 11621 ;;		line 312 in file "mcc_generated_files/i2c_master.c"
 11622 ;; Parameters:    Size  Location     Type
 11623 ;;		None
 11624 ;; Auto vars:     Size  Location     Type
 11625 ;;		None
 11626 ;; Return value:  Size  Location     Type
 11627 ;;                  1    wreg      void 
 11628 ;; Registers used:
 11629 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11630 ;; Tracked objects:
 11631 ;;		On entry : 0/0
 11632 ;;		On exit  : 0/0
 11633 ;;		Unchanged: 0/0
 11634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11639 ;;Total ram usage:        0 bytes
 11640 ;; Hardware stack levels used:    1
 11641 ;; Hardware stack levels required when called:    5
 11642 ;; This function calls:
 11643 ;;		i1_I2C_MasterFsm
 11644 ;;		i1_I2C_MasterWaitForEvent
 11645 ;; This function is called by:
 11646 ;;		i1_I2C_MasterOperation
 11647 ;; This function uses a non-reentrant model
 11648 ;;
 11649                           
 11650                           
 11651                           ;psect for function i1_I2C_Poller
 11652  0F57                     i1_I2C_Poller:	
 11653  0F57                     i1l6035:	
 11654                           ;i2c_master.c: 314: while(I2C_Status.busy)
 11655                           
 11656                           ;incstack = 0
 11657 ;; hardware stack exceeded
 11658                           ; Regs used in i1_I2C_Poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11659                           
 11660  0F57  0021               	movlb	1	; select bank1
 11661  0F58  1CBC               	btfss	(_I2C_Status^(0+128)+28),1
 11662  0F59  0008               	return
 11663                           
 11664                           ;i2c_master.c: 315: {
 11665                           ;i2c_master.c: 316: I2C_MasterWaitForEvent();
 11666  0F5A  318E  2664  318F   	fcall	i1_I2C_MasterWaitForEvent
 11667                           
 11668                           ;i2c_master.c: 317: I2C_MasterFsm();
 11669  0F5D  3185  2533  318F   	fcall	i1_I2C_MasterFsm
 11670  0F60  2F57               	goto	i1l6035
 11671  0F61                     __end_ofi1_I2C_Poller:	
 11672                           
 11673                           	psect	text82
 11674  0E64                     __ptext82:	
 11675 ;; *************** function i1_I2C_MasterWaitForEvent *****************
 11676 ;; Defined at:
 11677 ;;		line 650 in file "mcc_generated_files/i2c_master.c"
 11678 ;; Parameters:    Size  Location     Type
 11679 ;;		None
 11680 ;; Auto vars:     Size  Location     Type
 11681 ;;		None
 11682 ;; Return value:  Size  Location     Type
 11683 ;;                  1    wreg      void 
 11684 ;; Registers used:
 11685 ;;		None
 11686 ;; Tracked objects:
 11687 ;;		On entry : 0/0
 11688 ;;		On exit  : 0/0
 11689 ;;		Unchanged: 0/0
 11690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11695 ;;Total ram usage:        0 bytes
 11696 ;; Hardware stack levels used:    1
 11697 ;; This function calls:
 11698 ;;		Nothing
 11699 ;; This function is called by:
 11700 ;;		i1_I2C_Poller
 11701 ;; This function uses a non-reentrant model
 11702 ;;
 11703                           
 11704                           
 11705                           ;psect for function i1_I2C_MasterWaitForEvent
 11706  0E64                     i1_I2C_MasterWaitForEvent:	
 11707  0E64                     i1l558:	
 11708                           ;incstack = 0
 11709 ;; hardware stack exceeded
 11710                           ; Regs used in i1_I2C_MasterWaitForEvent: []
 11711                           ;i2c_master.c: 652: while(1)
 11712                           
 11713                           
 11714                           ;i2c_master.c: 653: {
 11715                           ;i2c_master.c: 654: if(PIR1bits.SSP1IF)
 11716  0E64  0020               	movlb	0	; select bank0
 11717  0E65  1990               	btfsc	16,3	;volatile
 11718  0E66  0008               	return
 11719  0E67  2E64               	goto	i1l558
 11720  0E68                     __end_ofi1_I2C_MasterWaitForEvent:	
 11721                           ;i2c_master.c: 655: {
 11722                           ;i2c_master.c: 656: break;
 11723                           
 11724                           
 11725                           	psect	text83
 11726  0533                     __ptext83:	
 11727 ;; *************** function i1_I2C_MasterFsm *****************
 11728 ;; Defined at:
 11729 ;;		line 321 in file "mcc_generated_files/i2c_master.c"
 11730 ;; Parameters:    Size  Location     Type
 11731 ;;		None
 11732 ;; Auto vars:     Size  Location     Type
 11733 ;;		None
 11734 ;; Return value:  Size  Location     Type
 11735 ;;                  1    wreg      void 
 11736 ;; Registers used:
 11737 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11738 ;; Tracked objects:
 11739 ;;		On entry : 0/0
 11740 ;;		On exit  : 0/0
 11741 ;;		Unchanged: 0/0
 11742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11745 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11746 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11747 ;;Total ram usage:        3 bytes
 11748 ;; Hardware stack levels used:    1
 11749 ;; Hardware stack levels required when called:    4
 11750 ;; This function calls:
 11751 ;;		i1_I2C_DO_ADDRESS_NACK
 11752 ;;		i1_I2C_DO_IDLE
 11753 ;;		i1_I2C_DO_RCEN
 11754 ;;		i1_I2C_DO_RESET
 11755 ;;		i1_I2C_DO_RX
 11756 ;;		i1_I2C_DO_RX_ACK
 11757 ;;		i1_I2C_DO_RX_NACK_RESTART
 11758 ;;		i1_I2C_DO_RX_NACK_STOP
 11759 ;;		i1_I2C_DO_SEND_ADR_READ
 11760 ;;		i1_I2C_DO_SEND_ADR_WRITE
 11761 ;;		i1_I2C_DO_SEND_RESTART
 11762 ;;		i1_I2C_DO_SEND_RESTART_READ
 11763 ;;		i1_I2C_DO_SEND_RESTART_WRITE
 11764 ;;		i1_I2C_DO_SEND_STOP
 11765 ;;		i1_I2C_DO_TX
 11766 ;;		i1_I2C_DO_TX_EMPTY
 11767 ;;		i1_I2C_MasterClearIrq
 11768 ;;		i1_I2C_MasterIsNack
 11769 ;; This function is called by:
 11770 ;;		i1_I2C_Poller
 11771 ;; This function uses a non-reentrant model
 11772 ;;
 11773                           
 11774                           
 11775                           ;psect for function i1_I2C_MasterFsm
 11776  0533                     i1_I2C_MasterFsm:	
 11777                           
 11778                           ;i2c_master.c: 323: I2C_MasterClearIrq();
 11779                           
 11780                           ;incstack = 0
 11781 ;; hardware stack exceeded
 11782                           ; Regs used in i1_I2C_MasterFsm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11783  0533  318D  25FD  3185   	fcall	i1_I2C_MasterClearIrq
 11784                           
 11785                           ;i2c_master.c: 325: if(I2C_Status.addressNackCheck && I2C_MasterIsNack())
 11786  0536  0021               	movlb	1	; select bank1
 11787  0537  1C3C               	btfss	(_I2C_Status^(0+128)+28),0
 11788  0538  2D45               	goto	i1l6027
 11789  0539  318E  2695  3185   	fcall	i1_I2C_MasterIsNack
 11790  053C  3A00               	xorlw	0
 11791  053D  1903               	skipnz
 11792  053E  2D45               	goto	i1l6027
 11793                           
 11794                           ;i2c_master.c: 326: {
 11795                           ;i2c_master.c: 327: I2C_Status.state = I2C_ADDRESS_NACK;
 11796  053F  300F               	movlw	15
 11797  0540  0020               	movlb	0	; select bank0
 11798  0541  00BD               	movwf	??i1_I2C_MasterFsm
 11799  0542  083D               	movf	??i1_I2C_MasterFsm,w
 11800  0543  0021               	movlb	1	; select bank1
 11801  0544  00BA               	movwf	(_I2C_Status^(0+128)+26)
 11802  0545                     i1l6027:	
 11803                           
 11804                           ;i2c_master.c: 328: }
 11805                           ;i2c_master.c: 329: I2C_Status.state = fsmStateTable[I2C_Status.state]();
 11806  0545  0021               	movlb	1	; select bank1
 11807  0546  083A               	movf	(_I2C_Status^(0+128)+26),w
 11808  0547  0020               	movlb	0	; select bank0
 11809  0548  00BD               	movwf	??i1_I2C_MasterFsm
 11810  0549  01BE               	clrf	??i1_I2C_MasterFsm+1
 11811  054A  35BD               	lslf	??i1_I2C_MasterFsm,f
 11812  054B  0DBE               	rlf	??i1_I2C_MasterFsm+1,f
 11813  054C  3015               	movlw	low (_fsmStateTable| (0+32768))
 11814  054D  073D               	addwf	??i1_I2C_MasterFsm,w
 11815  054E  0084               	movwf	4
 11816  054F  3086               	movlw	high (_fsmStateTable| (0+32768))
 11817  0550  3D3E               	addwfc	??i1_I2C_MasterFsm+1,w
 11818  0551  0085               	movwf	5
 11819  0552  3F01               	moviw [1]fsr0
 11820  0553  008A               	movwf	10
 11821  0554  3F00               	moviw [0]fsr0
 11822  0555  000A               	callw
 11823  0556  3185               	pagesel	$
 11824  0557  0020               	movlb	0	; select bank0
 11825  0558  00BF               	movwf	??i1_I2C_MasterFsm+2
 11826  0559  083F               	movf	??i1_I2C_MasterFsm+2,w
 11827  055A  0021               	movlb	1	; select bank1
 11828  055B  00BA               	movwf	(_I2C_Status^(0+128)+26)
 11829  055C  0008               	return
 11830  055D                     __end_ofi1_I2C_MasterFsm:	
 11831                           
 11832                           	psect	text84
 11833  05F2                     __ptext84:	
 11834 ;; *************** function i1_I2C_DO_ADDRESS_NACK *****************
 11835 ;; Defined at:
 11836 ;;		line 500 in file "mcc_generated_files/i2c_master.c"
 11837 ;; Parameters:    Size  Location     Type
 11838 ;;		None
 11839 ;; Auto vars:     Size  Location     Type
 11840 ;;		None
 11841 ;; Return value:  Size  Location     Type
 11842 ;;                  1    wreg      enum E12103
 11843 ;; Registers used:
 11844 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11845 ;; Tracked objects:
 11846 ;;		On entry : 0/0
 11847 ;;		On exit  : 0/0
 11848 ;;		Unchanged: 0/0
 11849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11852 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11853 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11854 ;;Total ram usage:        1 bytes
 11855 ;; Hardware stack levels used:    1
 11856 ;; Hardware stack levels required when called:    3
 11857 ;; This function calls:
 11858 ;;		Absolute function
 11859 ;;		i1_I2C_CallbackReturnReset
 11860 ;;		i1_I2C_CallbackReturnStop
 11861 ;;		i1_I2C_DO_SEND_RESTART
 11862 ;;		i1_I2C_DO_SEND_STOP
 11863 ;;		i1_rd1RegCompleteHandler
 11864 ;;		i1_rd2RegCompleteHandler
 11865 ;;		i1_rdBlkRegCompleteHandler
 11866 ;;		i1_wr1RegCompleteHandler
 11867 ;;		i1_wr2RegCompleteHandler
 11868 ;; This function is called by:
 11869 ;; This function uses a non-reentrant model
 11870 ;;
 11871                           
 11872                           
 11873                           ;psect for function i1_I2C_DO_ADDRESS_NACK
 11874  05F2                     i1_I2C_DO_ADDRESS_NACK:	
 11875  05F2                     i1l6003:	
 11876                           ;incstack = 0
 11877 ;; hardware stack exceeded
 11878                           ; Regs used in i1_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11879                           
 11880                           
 11881                           ;i2c_master.c: 502: I2C_Status.addressNackCheck = 0;
 11882  05F2  0021               	movlb	1	; select bank1
 11883  05F3  103C               	bcf	(_I2C_Status^(0+128)+28),0
 11884                           
 11885                           ;i2c_master.c: 503: I2C_Status.error = I2C_FAIL;
 11886  05F4  3002               	movlw	2
 11887  05F5  00FA               	movwf	??i1_I2C_DO_ADDRESS_NACK
 11888  05F6  087A               	movf	??i1_I2C_DO_ADDRESS_NACK,w
 11889  05F7  00BB               	movwf	(_I2C_Status^(0+128)+27)
 11890                           
 11891                           ;i2c_master.c: 504: switch(I2C_Status.callbackTable[I2C_ADDR_NACK](I2C_Status.callbackPa
      +                          yload[I2C_ADDR_NACK]))
 11892  05F8  2DFF               	goto	i1l6017
 11893  05F9                     i1l6007:	
 11894                           ;i2c_master.c: 505: {
 11895                           ;i2c_master.c: 506: case I2C_RESTART_READ:
 11896                           
 11897                           
 11898                           ;i2c_master.c: 507: case I2C_RESTART_WRITE:
 11899                           ;i2c_master.c: 508: return I2C_DO_SEND_RESTART();
 11900  05F9  318E  2650         	fcall	i1_I2C_DO_SEND_RESTART
 11901  05FB  0008               	return
 11902  05FC                     i1l6011:	
 11903                           ;i2c_master.c: 509: default:
 11904                           
 11905                           
 11906                           ;i2c_master.c: 510: return I2C_DO_SEND_STOP();
 11907  05FC  318E  2654         	fcall	i1_I2C_DO_SEND_STOP
 11908                           
 11909                           ;i2c_master.c: 511: }
 11910  05FE  0008               	return
 11911  05FF                     i1l6017:	
 11912  05FF  0021               	movlb	1	; select bank1
 11913  0600  082E               	movf	(low ((_I2C_Status| 0+14)))^(0+128),w
 11914  0601  00FA               	movwf	??i1_I2C_DO_ADDRESS_NACK
 11915  0602  087A               	movf	??i1_I2C_DO_ADDRESS_NACK,w
 11916  0603  00F9               	movwf	i1I2C_CallbackReturnReset@funPtr
 11917  0604  3004               	movlw	4
 11918  0605  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
 11919  0606  0086               	movwf	6
 11920  0607  0187               	clrf	7
 11921  0608  3F41               	moviw [1]fsr1
 11922  0609  008A               	movwf	10
 11923  060A  3F40               	moviw [0]fsr1
 11924  060B  000A               	callw
 11925  060C  3185               	pagesel	$
 11926                           
 11927                           ; Switch size 1, requested type "space"
 11928                           ; Number of cases is 2, Range of values is 2 to 3
 11929                           ; switch strategies available:
 11930                           ; Name         Instructions Cycles
 11931                           ; simple_byte            7     4 (average)
 11932                           ; direct_byte           13     9 (fixed)
 11933                           ; jumptable            263     9 (fixed)
 11934                           ;	Chosen strategy is simple_byte
 11935  060D  3A02               	xorlw	2	; case 2
 11936  060E  1903               	skipnz
 11937  060F  2DF9               	goto	i1l6007
 11938  0610  3A01               	xorlw	1	; case 3
 11939  0611  1903               	skipnz
 11940  0612  2DF9               	goto	i1l6007
 11941  0613  2DFC               	goto	i1l6011
 11942  0614  0008               	return
 11943  0615                     __end_ofi1_I2C_DO_ADDRESS_NACK:	
 11944                           
 11945                           	psect	text85
 11946  0E86                     __ptext85:	
 11947 ;; *************** function i1_I2C_DO_RESET *****************
 11948 ;; Defined at:
 11949 ;;		line 494 in file "mcc_generated_files/i2c_master.c"
 11950 ;; Parameters:    Size  Location     Type
 11951 ;;		None
 11952 ;; Auto vars:     Size  Location     Type
 11953 ;;		None
 11954 ;; Return value:  Size  Location     Type
 11955 ;;                  1    wreg      enum E12103
 11956 ;; Registers used:
 11957 ;;		wreg, status,2
 11958 ;; Tracked objects:
 11959 ;;		On entry : 0/0
 11960 ;;		On exit  : 0/0
 11961 ;;		Unchanged: 0/0
 11962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11967 ;;Total ram usage:        0 bytes
 11968 ;; Hardware stack levels used:    1
 11969 ;; This function calls:
 11970 ;;		Nothing
 11971 ;; This function is called by:
 11972 ;; This function uses a non-reentrant model
 11973 ;;
 11974                           
 11975                           
 11976                           ;psect for function i1_I2C_DO_RESET
 11977  0E86                     i1_I2C_DO_RESET:	
 11978  0E86                     i1l2987:	
 11979                           ;incstack = 0
 11980 ;; hardware stack exceeded
 11981                           ; Regs used in i1_I2C_DO_RESET: [wreg+status,2]
 11982                           
 11983                           
 11984                           ;i2c_master.c: 496: I2C_Status.busy = 0;
 11985  0E86  0021               	movlb	1	; select bank1
 11986  0E87  10BC               	bcf	(_I2C_Status^(0+128)+28),1
 11987                           
 11988                           ;i2c_master.c: 497: I2C_Status.error = I2C_NOERR;
 11989  0E88  01BB               	clrf	(_I2C_Status^(0+128)+27)
 11990                           
 11991                           ;i2c_master.c: 498: return I2C_RESET;
 11992  0E89  300E               	movlw	14
 11993  0E8A  0008               	return
 11994  0E8B                     __end_ofi1_I2C_DO_RESET:	
 11995                           
 11996                           	psect	text86
 11997  0E60                     __ptext86:	
 11998 ;; *************** function i1_I2C_DO_RX_NACK_RESTART *****************
 11999 ;; Defined at:
 12000 ;;		line 488 in file "mcc_generated_files/i2c_master.c"
 12001 ;; Parameters:    Size  Location     Type
 12002 ;;		None
 12003 ;; Auto vars:     Size  Location     Type
 12004 ;;		None
 12005 ;; Return value:  Size  Location     Type
 12006 ;;                  1    wreg      enum E12103
 12007 ;; Registers used:
 12008 ;;		wreg, status,2, status,0, pclath, cstack
 12009 ;; Tracked objects:
 12010 ;;		On entry : 0/0
 12011 ;;		On exit  : 0/0
 12012 ;;		Unchanged: 0/0
 12013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12018 ;;Total ram usage:        0 bytes
 12019 ;; Hardware stack levels used:    1
 12020 ;; Hardware stack levels required when called:    1
 12021 ;; This function calls:
 12022 ;;		i1_I2C_MasterSendNack
 12023 ;; This function is called by:
 12024 ;;		i1_I2C_DO_RX
 12025 ;; This function uses a non-reentrant model
 12026 ;;
 12027                           
 12028                           
 12029                           ;psect for function i1_I2C_DO_RX_NACK_RESTART
 12030  0E60                     i1_I2C_DO_RX_NACK_RESTART:	
 12031  0E60                     i1l2837:	
 12032                           ;incstack = 0
 12033 ;; hardware stack exceeded
 12034                           ; Regs used in i1_I2C_DO_RX_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 12035                           
 12036                           
 12037                           ;i2c_master.c: 490: I2C_MasterSendNack();
 12038  0E60  318E  2640         	fcall	i1_I2C_MasterSendNack
 12039                           
 12040                           ;i2c_master.c: 491: return I2C_SEND_RESTART;
 12041  0E62  3009               	movlw	9
 12042  0E63  0008               	return
 12043  0E64                     __end_ofi1_I2C_DO_RX_NACK_RESTART:	
 12044                           
 12045                           	psect	text87
 12046  0E5C                     __ptext87:	
 12047 ;; *************** function i1_I2C_DO_RX_NACK_STOP *****************
 12048 ;; Defined at:
 12049 ;;		line 482 in file "mcc_generated_files/i2c_master.c"
 12050 ;; Parameters:    Size  Location     Type
 12051 ;;		None
 12052 ;; Auto vars:     Size  Location     Type
 12053 ;;		None
 12054 ;; Return value:  Size  Location     Type
 12055 ;;                  1    wreg      enum E12103
 12056 ;; Registers used:
 12057 ;;		wreg, status,2, status,0, pclath, cstack
 12058 ;; Tracked objects:
 12059 ;;		On entry : 0/0
 12060 ;;		On exit  : 0/0
 12061 ;;		Unchanged: 0/0
 12062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12066 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12067 ;;Total ram usage:        0 bytes
 12068 ;; Hardware stack levels used:    1
 12069 ;; Hardware stack levels required when called:    1
 12070 ;; This function calls:
 12071 ;;		i1_I2C_MasterSendNack
 12072 ;; This function is called by:
 12073 ;;		i1_I2C_DO_RX
 12074 ;; This function uses a non-reentrant model
 12075 ;;
 12076                           
 12077                           
 12078                           ;psect for function i1_I2C_DO_RX_NACK_STOP
 12079  0E5C                     i1_I2C_DO_RX_NACK_STOP:	
 12080  0E5C                     i1l2831:	
 12081                           ;incstack = 0
 12082 ;; hardware stack exceeded
 12083                           ; Regs used in i1_I2C_DO_RX_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 12084                           
 12085                           
 12086                           ;i2c_master.c: 484: I2C_MasterSendNack();
 12087  0E5C  318E  2640         	fcall	i1_I2C_MasterSendNack
 12088                           
 12089                           ;i2c_master.c: 485: return I2C_SEND_STOP;
 12090  0E5E  300A               	movlw	10
 12091  0E5F  0008               	return
 12092  0E60                     __end_ofi1_I2C_DO_RX_NACK_STOP:	
 12093                           
 12094                           	psect	text88
 12095  0E58                     __ptext88:	
 12096 ;; *************** function i1_I2C_DO_RX_ACK *****************
 12097 ;; Defined at:
 12098 ;;		line 475 in file "mcc_generated_files/i2c_master.c"
 12099 ;; Parameters:    Size  Location     Type
 12100 ;;		None
 12101 ;; Auto vars:     Size  Location     Type
 12102 ;;		None
 12103 ;; Return value:  Size  Location     Type
 12104 ;;                  1    wreg      enum E12103
 12105 ;; Registers used:
 12106 ;;		wreg, status,2, status,0, pclath, cstack
 12107 ;; Tracked objects:
 12108 ;;		On entry : 0/0
 12109 ;;		On exit  : 0/0
 12110 ;;		Unchanged: 0/0
 12111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12116 ;;Total ram usage:        0 bytes
 12117 ;; Hardware stack levels used:    1
 12118 ;; Hardware stack levels required when called:    1
 12119 ;; This function calls:
 12120 ;;		i1_I2C_MasterSendAck
 12121 ;; This function is called by:
 12122 ;; This function uses a non-reentrant model
 12123 ;;
 12124                           
 12125                           
 12126                           ;psect for function i1_I2C_DO_RX_ACK
 12127  0E58                     i1_I2C_DO_RX_ACK:	
 12128  0E58                     i1l2981:	
 12129                           ;incstack = 0
 12130 ;; hardware stack exceeded
 12131                           ; Regs used in i1_I2C_DO_RX_ACK: [wreg+status,2+status,0+pclath+cstack]
 12132                           
 12133                           
 12134                           ;i2c_master.c: 477: I2C_MasterSendAck();
 12135  0E58  318E  2644         	fcall	i1_I2C_MasterSendAck
 12136                           
 12137                           ;i2c_master.c: 478: return I2C_RCEN;
 12138  0E5A  3005               	movlw	5
 12139  0E5B  0008               	return
 12140  0E5C                     __end_ofi1_I2C_DO_RX_ACK:	
 12141                           
 12142                           	psect	text89
 12143  0E54                     __ptext89:	
 12144 ;; *************** function i1_I2C_DO_SEND_STOP *****************
 12145 ;; Defined at:
 12146 ;;		line 469 in file "mcc_generated_files/i2c_master.c"
 12147 ;; Parameters:    Size  Location     Type
 12148 ;;		None
 12149 ;; Auto vars:     Size  Location     Type
 12150 ;;		None
 12151 ;; Return value:  Size  Location     Type
 12152 ;;                  1    wreg      enum E12103
 12153 ;; Registers used:
 12154 ;;		wreg, status,2, status,0, pclath, cstack
 12155 ;; Tracked objects:
 12156 ;;		On entry : 0/0
 12157 ;;		On exit  : 0/0
 12158 ;;		Unchanged: 0/0
 12159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12164 ;;Total ram usage:        0 bytes
 12165 ;; Hardware stack levels used:    1
 12166 ;; Hardware stack levels required when called:    1
 12167 ;; This function calls:
 12168 ;;		i1_I2C_MasterStop
 12169 ;; This function is called by:
 12170 ;;		i1_I2C_DO_TX
 12171 ;;		i1_I2C_DO_TX_EMPTY
 12172 ;;		i1_I2C_DO_ADDRESS_NACK
 12173 ;; This function uses a non-reentrant model
 12174 ;;
 12175                           
 12176                           
 12177                           ;psect for function i1_I2C_DO_SEND_STOP
 12178  0E54                     i1_I2C_DO_SEND_STOP:	
 12179  0E54                     i1l2825:	
 12180                           ;incstack = 0
 12181 ;; hardware stack exceeded
 12182                           ; Regs used in i1_I2C_DO_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 12183                           
 12184                           
 12185                           ;i2c_master.c: 471: I2C_MasterStop();
 12186  0E54  318E  260C         	fcall	i1_I2C_MasterStop
 12187                           
 12188                           ;i2c_master.c: 472: return I2C_IDLE;
 12189  0E56  3000               	movlw	0
 12190  0E57  0008               	return
 12191  0E58                     __end_ofi1_I2C_DO_SEND_STOP:	
 12192                           
 12193                           	psect	text90
 12194  0E50                     __ptext90:	
 12195 ;; *************** function i1_I2C_DO_SEND_RESTART *****************
 12196 ;; Defined at:
 12197 ;;		line 463 in file "mcc_generated_files/i2c_master.c"
 12198 ;; Parameters:    Size  Location     Type
 12199 ;;		None
 12200 ;; Auto vars:     Size  Location     Type
 12201 ;;		None
 12202 ;; Return value:  Size  Location     Type
 12203 ;;                  1    wreg      enum E12103
 12204 ;; Registers used:
 12205 ;;		wreg, status,2, status,0, pclath, cstack
 12206 ;; Tracked objects:
 12207 ;;		On entry : 0/0
 12208 ;;		On exit  : 0/0
 12209 ;;		Unchanged: 0/0
 12210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12214 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12215 ;;Total ram usage:        0 bytes
 12216 ;; Hardware stack levels used:    1
 12217 ;; Hardware stack levels required when called:    1
 12218 ;; This function calls:
 12219 ;;		i1_I2C_MasterEnableRestart
 12220 ;; This function is called by:
 12221 ;;		i1_I2C_DO_TX_EMPTY
 12222 ;;		i1_I2C_DO_ADDRESS_NACK
 12223 ;; This function uses a non-reentrant model
 12224 ;;
 12225                           
 12226                           
 12227                           ;psect for function i1_I2C_DO_SEND_RESTART
 12228  0E50                     i1_I2C_DO_SEND_RESTART:	
 12229  0E50                     i1l2819:	
 12230                           ;incstack = 0
 12231 ;; hardware stack exceeded
 12232                           ; Regs used in i1_I2C_DO_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 12233                           
 12234                           
 12235                           ;i2c_master.c: 465: I2C_MasterEnableRestart();
 12236  0E50  318E  2609         	fcall	i1_I2C_MasterEnableRestart
 12237                           
 12238                           ;i2c_master.c: 466: return I2C_SEND_ADR_READ;
 12239  0E52  3001               	movlw	1
 12240  0E53  0008               	return
 12241  0E54                     __end_ofi1_I2C_DO_SEND_RESTART:	
 12242                           
 12243                           	psect	text91
 12244  0E4C                     __ptext91:	
 12245 ;; *************** function i1_I2C_DO_SEND_RESTART_WRITE *****************
 12246 ;; Defined at:
 12247 ;;		line 456 in file "mcc_generated_files/i2c_master.c"
 12248 ;; Parameters:    Size  Location     Type
 12249 ;;		None
 12250 ;; Auto vars:     Size  Location     Type
 12251 ;;		None
 12252 ;; Return value:  Size  Location     Type
 12253 ;;                  1    wreg      enum E12103
 12254 ;; Registers used:
 12255 ;;		wreg, status,2, status,0, pclath, cstack
 12256 ;; Tracked objects:
 12257 ;;		On entry : 0/0
 12258 ;;		On exit  : 0/0
 12259 ;;		Unchanged: 0/0
 12260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12264 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12265 ;;Total ram usage:        0 bytes
 12266 ;; Hardware stack levels used:    1
 12267 ;; Hardware stack levels required when called:    1
 12268 ;; This function calls:
 12269 ;;		i1_I2C_MasterEnableRestart
 12270 ;; This function is called by:
 12271 ;;		i1_I2C_DO_TX
 12272 ;; This function uses a non-reentrant model
 12273 ;;
 12274                           
 12275                           
 12276                           ;psect for function i1_I2C_DO_SEND_RESTART_WRITE
 12277  0E4C                     i1_I2C_DO_SEND_RESTART_WRITE:	
 12278  0E4C                     i1l2813:	
 12279                           ;incstack = 0
 12280 ;; hardware stack exceeded
 12281                           ; Regs used in i1_I2C_DO_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 12282                           
 12283                           
 12284                           ;i2c_master.c: 458: I2C_MasterEnableRestart();
 12285  0E4C  318E  2609         	fcall	i1_I2C_MasterEnableRestart
 12286                           
 12287                           ;i2c_master.c: 459: return I2C_SEND_ADR_WRITE;
 12288  0E4E  3002               	movlw	2
 12289  0E4F  0008               	return
 12290  0E50                     __end_ofi1_I2C_DO_SEND_RESTART_WRITE:	
 12291                           
 12292                           	psect	text92
 12293  0E48                     __ptext92:	
 12294 ;; *************** function i1_I2C_DO_SEND_RESTART_READ *****************
 12295 ;; Defined at:
 12296 ;;		line 450 in file "mcc_generated_files/i2c_master.c"
 12297 ;; Parameters:    Size  Location     Type
 12298 ;;		None
 12299 ;; Auto vars:     Size  Location     Type
 12300 ;;		None
 12301 ;; Return value:  Size  Location     Type
 12302 ;;                  1    wreg      enum E12103
 12303 ;; Registers used:
 12304 ;;		wreg, status,2, status,0, pclath, cstack
 12305 ;; Tracked objects:
 12306 ;;		On entry : 0/0
 12307 ;;		On exit  : 0/0
 12308 ;;		Unchanged: 0/0
 12309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12313 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12314 ;;Total ram usage:        0 bytes
 12315 ;; Hardware stack levels used:    1
 12316 ;; Hardware stack levels required when called:    1
 12317 ;; This function calls:
 12318 ;;		i1_I2C_MasterEnableRestart
 12319 ;; This function is called by:
 12320 ;;		i1_I2C_DO_TX
 12321 ;; This function uses a non-reentrant model
 12322 ;;
 12323                           
 12324                           
 12325                           ;psect for function i1_I2C_DO_SEND_RESTART_READ
 12326  0E48                     i1_I2C_DO_SEND_RESTART_READ:	
 12327  0E48                     i1l2807:	
 12328                           ;incstack = 0
 12329 ;; hardware stack exceeded
 12330                           ; Regs used in i1_I2C_DO_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 12331                           
 12332                           
 12333                           ;i2c_master.c: 452: I2C_MasterEnableRestart();
 12334  0E48  318E  2609         	fcall	i1_I2C_MasterEnableRestart
 12335                           
 12336                           ;i2c_master.c: 453: return I2C_SEND_ADR_READ;
 12337  0E4A  3001               	movlw	1
 12338  0E4B  0008               	return
 12339  0E4C                     __end_ofi1_I2C_DO_SEND_RESTART_READ:	
 12340                           
 12341                           	psect	text93
 12342  0E9B                     __ptext93:	
 12343 ;; *************** function i1_I2C_DO_RCEN *****************
 12344 ;; Defined at:
 12345 ;;		line 402 in file "mcc_generated_files/i2c_master.c"
 12346 ;; Parameters:    Size  Location     Type
 12347 ;;		None
 12348 ;; Auto vars:     Size  Location     Type
 12349 ;;		None
 12350 ;; Return value:  Size  Location     Type
 12351 ;;                  1    wreg      enum E12103
 12352 ;; Registers used:
 12353 ;;		wreg, status,2, status,0, pclath, cstack
 12354 ;; Tracked objects:
 12355 ;;		On entry : 0/0
 12356 ;;		On exit  : 0/0
 12357 ;;		Unchanged: 0/0
 12358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12362 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12363 ;;Total ram usage:        0 bytes
 12364 ;; Hardware stack levels used:    1
 12365 ;; Hardware stack levels required when called:    1
 12366 ;; This function calls:
 12367 ;;		i1_I2C_MasterStartRx
 12368 ;; This function is called by:
 12369 ;; This function uses a non-reentrant model
 12370 ;;
 12371                           
 12372                           
 12373                           ;psect for function i1_I2C_DO_RCEN
 12374  0E9B                     i1_I2C_DO_RCEN:	
 12375  0E9B                     i1l2953:	
 12376                           ;incstack = 0
 12377 ;; hardware stack exceeded
 12378                           ; Regs used in i1_I2C_DO_RCEN: [wreg+status,2+status,0+pclath+cstack]
 12379                           
 12380                           
 12381                           ;i2c_master.c: 404: I2C_Status.addressNackCheck = 0;
 12382  0E9B  0021               	movlb	1	; select bank1
 12383  0E9C  103C               	bcf	(_I2C_Status^(0+128)+28),0
 12384                           
 12385                           ;i2c_master.c: 405: I2C_MasterStartRx();
 12386  0E9D  318E  260F         	fcall	i1_I2C_MasterStartRx
 12387                           
 12388                           ;i2c_master.c: 406: return I2C_RX;
 12389  0E9F  3004               	movlw	4
 12390  0EA0  0008               	return
 12391  0EA1                     __end_ofi1_I2C_DO_RCEN:	
 12392                           
 12393                           	psect	text94
 12394  0372                     __ptext94:	
 12395 ;; *************** function i1_I2C_DO_RX *****************
 12396 ;; Defined at:
 12397 ;;		line 378 in file "mcc_generated_files/i2c_master.c"
 12398 ;; Parameters:    Size  Location     Type
 12399 ;;		None
 12400 ;; Auto vars:     Size  Location     Type
 12401 ;;		None
 12402 ;; Return value:  Size  Location     Type
 12403 ;;                  1    wreg      enum E12103
 12404 ;; Registers used:
 12405 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12406 ;; Tracked objects:
 12407 ;;		On entry : 0/0
 12408 ;;		On exit  : 0/0
 12409 ;;		Unchanged: 0/0
 12410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12413 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12414 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12415 ;;Total ram usage:        1 bytes
 12416 ;; Hardware stack levels used:    1
 12417 ;; Hardware stack levels required when called:    3
 12418 ;; This function calls:
 12419 ;;		Absolute function
 12420 ;;		i1_I2C_CallbackReturnReset
 12421 ;;		i1_I2C_CallbackReturnStop
 12422 ;;		i1_I2C_DO_RX_NACK_RESTART
 12423 ;;		i1_I2C_DO_RX_NACK_STOP
 12424 ;;		i1_I2C_MasterGetRxData
 12425 ;;		i1_I2C_MasterSendAck
 12426 ;;		i1_rd1RegCompleteHandler
 12427 ;;		i1_rd2RegCompleteHandler
 12428 ;;		i1_rdBlkRegCompleteHandler
 12429 ;;		i1_wr1RegCompleteHandler
 12430 ;;		i1_wr2RegCompleteHandler
 12431 ;; This function is called by:
 12432 ;; This function uses a non-reentrant model
 12433 ;;
 12434                           
 12435                           
 12436                           ;psect for function i1_I2C_DO_RX
 12437  0372                     i1_I2C_DO_RX:	
 12438  0372                     i1l5957:	
 12439                           ;incstack = 0
 12440 ;; hardware stack exceeded
 12441                           ; Regs used in i1_I2C_DO_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12442                           
 12443                           
 12444                           ;i2c_master.c: 380: *I2C_Status.data_ptr++ = I2C_MasterGetRxData();
 12445  0372  318E  2612  3183   	fcall	i1_I2C_MasterGetRxData
 12446  0375  00FA               	movwf	??i1_I2C_DO_RX
 12447  0376  0021               	movlb	1	; select bank1
 12448  0377  0837               	movf	(low ((_I2C_Status| 0+23)))^(0+128),w
 12449  0378  0086               	movwf	6
 12450  0379  0187               	clrf	7
 12451  037A  087A               	movf	??i1_I2C_DO_RX,w
 12452  037B  0081               	movwf	1
 12453  037C  3001               	movlw	1
 12454  037D  00FA               	movwf	??i1_I2C_DO_RX
 12455  037E  087A               	movf	??i1_I2C_DO_RX,w
 12456  037F  07B7               	addwf	(low ((_I2C_Status| 0+23)))^(0+128),f
 12457                           
 12458                           ;i2c_master.c: 381: if(--I2C_Status.data_length)
 12459  0380  3001               	movlw	1
 12460  0381  02B8               	subwf	(_I2C_Status^(0+128)+24),f
 12461  0382  3000               	movlw	0
 12462  0383  3BB9               	subwfb	((_I2C_Status+1)^(0+128)+24),f
 12463  0384  0838               	movf	(_I2C_Status^(0+128)+24),w
 12464  0385  0439               	iorwf	((_I2C_Status+1)^(0+128)+24),w
 12465  0386  1903               	btfsc	3,2
 12466  0387  2B8C               	goto	i1l417
 12467                           
 12468                           ;i2c_master.c: 382: {
 12469                           ;i2c_master.c: 383: I2C_MasterSendAck();
 12470  0388  318E  2644         	fcall	i1_I2C_MasterSendAck
 12471                           
 12472                           ;i2c_master.c: 384: return I2C_RCEN;
 12473  038A  3005               	movlw	5
 12474                           
 12475                           ;i2c_master.c: 385: }
 12476  038B  0008               	return
 12477  038C                     i1l417:	
 12478                           
 12479                           ;i2c_master.c: 386: else
 12480                           ;i2c_master.c: 387: {
 12481                           ;i2c_master.c: 388: I2C_Status.bufferFree = 1;
 12482  038C  15BC               	bsf	(_I2C_Status^(0+128)+28),3
 12483                           
 12484                           ;i2c_master.c: 389: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
 12485  038D  2B94               	goto	i1l5981
 12486  038E                     i1l5971:	
 12487                           ;i2c_master.c: 390: {
 12488                           ;i2c_master.c: 391: case I2C_RESTART_WRITE:
 12489                           
 12490                           
 12491                           ;i2c_master.c: 392: case I2C_RESTART_READ:
 12492                           ;i2c_master.c: 393: return I2C_DO_RX_NACK_RESTART();
 12493  038E  318E  2660         	fcall	i1_I2C_DO_RX_NACK_RESTART
 12494  0390  0008               	return
 12495  0391                     i1l5975:	
 12496                           ;i2c_master.c: 395: case I2C_CONTINUE:
 12497                           
 12498                           ;i2c_master.c: 394: default:
 12499                           
 12500                           
 12501                           ;i2c_master.c: 396: case I2C_STOP:
 12502                           ;i2c_master.c: 397: return I2C_DO_RX_NACK_STOP();
 12503  0391  318E  265C         	fcall	i1_I2C_DO_RX_NACK_STOP
 12504                           
 12505                           ;i2c_master.c: 398: }
 12506  0393  0008               	return
 12507  0394                     i1l5981:	
 12508  0394  0021               	movlb	1	; select bank1
 12509  0395  082C               	movf	(low ((_I2C_Status| 0+12)))^(0+128),w
 12510  0396  00FA               	movwf	??i1_I2C_DO_RX
 12511  0397  087A               	movf	??i1_I2C_DO_RX,w
 12512  0398  00F9               	movwf	i1I2C_CallbackReturnReset@funPtr
 12513  0399  0821               	movf	(_I2C_Status+1)^(0+128),w
 12514  039A  008A               	movwf	10
 12515  039B  0820               	movf	_I2C_Status^(0+128),w
 12516  039C  000A               	callw
 12517  039D  3183               	pagesel	$
 12518                           
 12519                           ; Switch size 1, requested type "space"
 12520                           ; Number of cases is 4, Range of values is 1 to 4
 12521                           ; switch strategies available:
 12522                           ; Name         Instructions Cycles
 12523                           ; simple_byte           13     7 (average)
 12524                           ; direct_byte           17     9 (fixed)
 12525                           ; jumptable            263     9 (fixed)
 12526                           ;	Chosen strategy is simple_byte
 12527  039E  3A01               	xorlw	1	; case 1
 12528  039F  1903               	skipnz
 12529  03A0  2B91               	goto	i1l5975
 12530  03A1  3A03               	xorlw	3	; case 2
 12531  03A2  1903               	skipnz
 12532  03A3  2B8E               	goto	i1l5971
 12533  03A4  3A01               	xorlw	1	; case 3
 12534  03A5  1903               	skipnz
 12535  03A6  2B8E               	goto	i1l5971
 12536  03A7  3A07               	xorlw	7	; case 4
 12537  03A8  1903               	skipnz
 12538  03A9  2B91               	goto	i1l5975
 12539  03AA  2B91               	goto	i1l5975
 12540  03AB  0008               	return
 12541  03AC                     __end_ofi1_I2C_DO_RX:	
 12542                           
 12543                           	psect	text95
 12544  026B                     __ptext95:	
 12545 ;; *************** function i1_I2C_DO_TX *****************
 12546 ;; Defined at:
 12547 ;;		line 354 in file "mcc_generated_files/i2c_master.c"
 12548 ;; Parameters:    Size  Location     Type
 12549 ;;		None
 12550 ;; Auto vars:     Size  Location     Type
 12551 ;;		None
 12552 ;; Return value:  Size  Location     Type
 12553 ;;                  1    wreg      enum E12103
 12554 ;; Registers used:
 12555 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12556 ;; Tracked objects:
 12557 ;;		On entry : 0/0
 12558 ;;		On exit  : 0/0
 12559 ;;		Unchanged: 0/0
 12560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12562 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12563 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12564 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12565 ;;Total ram usage:        3 bytes
 12566 ;; Hardware stack levels used:    1
 12567 ;; Hardware stack levels required when called:    3
 12568 ;; This function calls:
 12569 ;;		Absolute function
 12570 ;;		i1_I2C_CallbackReturnReset
 12571 ;;		i1_I2C_CallbackReturnStop
 12572 ;;		i1_I2C_DO_SEND_RESTART_READ
 12573 ;;		i1_I2C_DO_SEND_RESTART_WRITE
 12574 ;;		i1_I2C_DO_SEND_STOP
 12575 ;;		i1_I2C_MasterIsNack
 12576 ;;		i1_I2C_MasterSendTxData
 12577 ;;		i1_rd1RegCompleteHandler
 12578 ;;		i1_rd2RegCompleteHandler
 12579 ;;		i1_rdBlkRegCompleteHandler
 12580 ;;		i1_wr1RegCompleteHandler
 12581 ;;		i1_wr2RegCompleteHandler
 12582 ;; This function is called by:
 12583 ;; This function uses a non-reentrant model
 12584 ;;
 12585                           
 12586                           
 12587                           ;psect for function i1_I2C_DO_TX
 12588  026B                     i1_I2C_DO_TX:	
 12589  026B                     i1l5927:	
 12590                           ;incstack = 0
 12591 ;; hardware stack exceeded
 12592                           ; Regs used in i1_I2C_DO_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12593                           
 12594                           
 12595                           ;i2c_master.c: 356: if(I2C_MasterIsNack())
 12596  026B  318E  2695  3182   	fcall	i1_I2C_MasterIsNack
 12597  026E  3A00               	xorlw	0
 12598  026F  1D03               	btfss	3,2
 12599  0270  2A7B               	goto	i1l5945
 12600  0271  2A97               	goto	i1l401
 12601  0272                     i1l5931:	
 12602                           ;i2c_master.c: 359: {
 12603                           ;i2c_master.c: 360: case I2C_RESTART_READ:
 12604                           
 12605                           ;i2c_master.c: 357: {
 12606                           ;i2c_master.c: 358: switch(I2C_Status.callbackTable[I2C_DATA_NACK](I2C_Status.callbackPa
      +                          yload[I2C_DATA_NACK]))
 12607                           
 12608                           
 12609                           ;i2c_master.c: 361: return I2C_DO_SEND_RESTART_READ();
 12610  0272  318E  2648         	fcall	i1_I2C_DO_SEND_RESTART_READ
 12611  0274  0008               	return
 12612  0275                     i1l5935:	
 12613                           ;i2c_master.c: 362: case I2C_RESTART_WRITE:
 12614                           
 12615                           
 12616                           ;i2c_master.c: 363: return I2C_DO_SEND_RESTART_WRITE();
 12617  0275  318E  264C         	fcall	i1_I2C_DO_SEND_RESTART_WRITE
 12618  0277  0008               	return
 12619  0278                     i1l5939:	
 12620                           ;i2c_master.c: 365: case I2C_CONTINUE:
 12621                           
 12622                           ;i2c_master.c: 364: default:
 12623                           
 12624                           
 12625                           ;i2c_master.c: 366: case I2C_STOP:
 12626                           ;i2c_master.c: 367: return I2C_DO_SEND_STOP();
 12627  0278  318E  2654         	fcall	i1_I2C_DO_SEND_STOP
 12628                           
 12629                           ;i2c_master.c: 368: }
 12630  027A  0008               	return
 12631  027B                     i1l5945:	
 12632  027B  0021               	movlb	1	; select bank1
 12633  027C  082F               	movf	(low ((_I2C_Status| 0+15)))^(0+128),w
 12634  027D  00FA               	movwf	??i1_I2C_DO_TX
 12635  027E  087A               	movf	??i1_I2C_DO_TX,w
 12636  027F  00F9               	movwf	i1I2C_CallbackReturnReset@funPtr
 12637  0280  3006               	movlw	6
 12638  0281  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
 12639  0282  0086               	movwf	6
 12640  0283  0187               	clrf	7
 12641  0284  3F41               	moviw [1]fsr1
 12642  0285  008A               	movwf	10
 12643  0286  3F40               	moviw [0]fsr1
 12644  0287  000A               	callw
 12645  0288  3182               	pagesel	$
 12646                           
 12647                           ; Switch size 1, requested type "space"
 12648                           ; Number of cases is 4, Range of values is 1 to 4
 12649                           ; switch strategies available:
 12650                           ; Name         Instructions Cycles
 12651                           ; simple_byte           13     7 (average)
 12652                           ; direct_byte           17     9 (fixed)
 12653                           ; jumptable            263     9 (fixed)
 12654                           ;	Chosen strategy is simple_byte
 12655  0289  3A01               	xorlw	1	; case 1
 12656  028A  1903               	skipnz
 12657  028B  2A78               	goto	i1l5939
 12658  028C  3A03               	xorlw	3	; case 2
 12659  028D  1903               	skipnz
 12660  028E  2A72               	goto	i1l5931
 12661  028F  3A01               	xorlw	1	; case 3
 12662  0290  1903               	skipnz
 12663  0291  2A75               	goto	i1l5935
 12664  0292  3A07               	xorlw	7	; case 4
 12665  0293  1903               	skipnz
 12666  0294  2A78               	goto	i1l5939
 12667  0295  2A78               	goto	i1l5939
 12668                           
 12669                           ;i2c_master.c: 369: }
 12670  0296  0008               	return
 12671  0297                     i1l401:	
 12672                           
 12673                           ;i2c_master.c: 370: else
 12674                           ;i2c_master.c: 371: {
 12675                           ;i2c_master.c: 372: I2C_Status.addressNackCheck = 0;
 12676  0297  0021               	movlb	1	; select bank1
 12677  0298  103C               	bcf	(_I2C_Status^(0+128)+28),0
 12678                           
 12679                           ;i2c_master.c: 373: I2C_MasterSendTxData(*I2C_Status.data_ptr++);
 12680  0299  3017               	movlw	23
 12681  029A  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
 12682  029B  0086               	movwf	6
 12683  029C  0187               	clrf	7
 12684  029D  3F40               	moviw [0]fsr1
 12685  029E  0084               	movwf	4
 12686  029F  0185               	clrf	5
 12687  02A0  0A81               	incf	1,f
 12688  02A1  0800               	movf	0,w
 12689  02A2  318E  267C  3182   	fcall	i1_I2C_MasterSendTxData
 12690                           
 12691                           ;i2c_master.c: 374: return (--I2C_Status.data_length)?I2C_TX:I2C_TX_EMPTY;
 12692  02A5  3001               	movlw	1
 12693  02A6  0021               	movlb	1	; select bank1
 12694  02A7  02B8               	subwf	(_I2C_Status^(0+128)+24),f
 12695  02A8  3000               	movlw	0
 12696  02A9  3BB9               	subwfb	((_I2C_Status+1)^(0+128)+24),f
 12697  02AA  0838               	movf	(_I2C_Status^(0+128)+24),w
 12698  02AB  0439               	iorwf	((_I2C_Status+1)^(0+128)+24),w
 12699  02AC  1D03               	btfss	3,2
 12700  02AD  2AB0               	goto	i1l5953
 12701  02AE  3006               	movlw	6
 12702  02AF  2AB1               	goto	L2
 12703  02B0                     i1l5953:	
 12704  02B0  3003               	movlw	3
 12705  02B1                     L2:	
 12706  02B1  00FB               	movwf	i1_I2C_DO_TX$864
 12707  02B2  3000               	movlw	0
 12708  02B3  00FC               	movwf	i1_I2C_DO_TX$864+1
 12709  02B4  087B               	movf	i1_I2C_DO_TX$864,w
 12710  02B5  0008               	return
 12711  02B6                     __end_ofi1_I2C_DO_TX:	
 12712                           
 12713                           	psect	text96
 12714  0EDD                     __ptext96:	
 12715 ;; *************** function i1_I2C_DO_SEND_ADR_WRITE *****************
 12716 ;; Defined at:
 12717 ;;		line 347 in file "mcc_generated_files/i2c_master.c"
 12718 ;; Parameters:    Size  Location     Type
 12719 ;;		None
 12720 ;; Auto vars:     Size  Location     Type
 12721 ;;		None
 12722 ;; Return value:  Size  Location     Type
 12723 ;;                  1    wreg      enum E12103
 12724 ;; Registers used:
 12725 ;;		wreg, status,2, status,0, pclath, cstack
 12726 ;; Tracked objects:
 12727 ;;		On entry : 0/0
 12728 ;;		On exit  : 0/0
 12729 ;;		Unchanged: 0/0
 12730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12734 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12735 ;;Total ram usage:        0 bytes
 12736 ;; Hardware stack levels used:    1
 12737 ;; Hardware stack levels required when called:    1
 12738 ;; This function calls:
 12739 ;;		i1_I2C_MasterSendTxData
 12740 ;; This function is called by:
 12741 ;; This function uses a non-reentrant model
 12742 ;;
 12743                           
 12744                           
 12745                           ;psect for function i1_I2C_DO_SEND_ADR_WRITE
 12746  0EDD                     i1_I2C_DO_SEND_ADR_WRITE:	
 12747  0EDD                     i1l2889:	
 12748                           ;incstack = 0
 12749 ;; hardware stack exceeded
 12750                           ; Regs used in i1_I2C_DO_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 12751                           
 12752                           
 12753                           ;i2c_master.c: 349: I2C_Status.addressNackCheck = 1;
 12754  0EDD  0021               	movlb	1	; select bank1
 12755  0EDE  143C               	bsf	(_I2C_Status^(0+128)+28),0
 12756                           
 12757                           ;i2c_master.c: 350: I2C_MasterSendTxData(I2C_Status.address << 1);
 12758  0EDF  3536               	lslf	(_I2C_Status^(0+128)+22),w
 12759  0EE0  318E  267C         	fcall	i1_I2C_MasterSendTxData
 12760                           
 12761                           ;i2c_master.c: 351: return I2C_TX;
 12762  0EE2  3003               	movlw	3
 12763  0EE3  0008               	return
 12764  0EE4                     __end_ofi1_I2C_DO_SEND_ADR_WRITE:	
 12765                           
 12766                           	psect	text97
 12767  0EF3                     __ptext97:	
 12768 ;; *************** function i1_I2C_DO_SEND_ADR_READ *****************
 12769 ;; Defined at:
 12770 ;;		line 340 in file "mcc_generated_files/i2c_master.c"
 12771 ;; Parameters:    Size  Location     Type
 12772 ;;		None
 12773 ;; Auto vars:     Size  Location     Type
 12774 ;;		None
 12775 ;; Return value:  Size  Location     Type
 12776 ;;                  1    wreg      enum E12103
 12777 ;; Registers used:
 12778 ;;		wreg, status,2, status,0, pclath, cstack
 12779 ;; Tracked objects:
 12780 ;;		On entry : 0/0
 12781 ;;		On exit  : 0/0
 12782 ;;		Unchanged: 0/0
 12783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12788 ;;Total ram usage:        0 bytes
 12789 ;; Hardware stack levels used:    1
 12790 ;; Hardware stack levels required when called:    1
 12791 ;; This function calls:
 12792 ;;		i1_I2C_MasterSendTxData
 12793 ;; This function is called by:
 12794 ;; This function uses a non-reentrant model
 12795 ;;
 12796                           
 12797                           
 12798                           ;psect for function i1_I2C_DO_SEND_ADR_READ
 12799  0EF3                     i1_I2C_DO_SEND_ADR_READ:	
 12800  0EF3                     i1l2881:	
 12801                           ;incstack = 0
 12802 ;; hardware stack exceeded
 12803                           ; Regs used in i1_I2C_DO_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 12804                           
 12805                           
 12806                           ;i2c_master.c: 342: I2C_Status.addressNackCheck = 1;
 12807  0EF3  0021               	movlb	1	; select bank1
 12808  0EF4  143C               	bsf	(_I2C_Status^(0+128)+28),0
 12809                           
 12810                           ;i2c_master.c: 343: I2C_MasterSendTxData(I2C_Status.address << 1 | 1);
 12811  0EF5  1403               	setc
 12812  0EF6  0D36               	rlf	(_I2C_Status^(0+128)+22),w
 12813  0EF7  318E  267C         	fcall	i1_I2C_MasterSendTxData
 12814                           
 12815                           ;i2c_master.c: 344: return I2C_RCEN;
 12816  0EF9  3005               	movlw	5
 12817  0EFA  0008               	return
 12818  0EFB                     __end_ofi1_I2C_DO_SEND_ADR_READ:	
 12819                           
 12820                           	psect	text98
 12821  0E81                     __ptext98:	
 12822 ;; *************** function i1_I2C_DO_IDLE *****************
 12823 ;; Defined at:
 12824 ;;		line 333 in file "mcc_generated_files/i2c_master.c"
 12825 ;; Parameters:    Size  Location     Type
 12826 ;;		None
 12827 ;; Auto vars:     Size  Location     Type
 12828 ;;		None
 12829 ;; Return value:  Size  Location     Type
 12830 ;;                  1    wreg      enum E12103
 12831 ;; Registers used:
 12832 ;;		wreg, status,2
 12833 ;; Tracked objects:
 12834 ;;		On entry : 0/0
 12835 ;;		On exit  : 0/0
 12836 ;;		Unchanged: 0/0
 12837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12841 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12842 ;;Total ram usage:        0 bytes
 12843 ;; Hardware stack levels used:    1
 12844 ;; This function calls:
 12845 ;;		Nothing
 12846 ;; This function is called by:
 12847 ;; This function uses a non-reentrant model
 12848 ;;
 12849                           
 12850                           
 12851                           ;psect for function i1_I2C_DO_IDLE
 12852  0E81                     i1_I2C_DO_IDLE:	
 12853  0E81                     i1l2873:	
 12854                           ;incstack = 0
 12855 ;; hardware stack exceeded
 12856                           ; Regs used in i1_I2C_DO_IDLE: [wreg+status,2]
 12857                           
 12858                           
 12859                           ;i2c_master.c: 335: I2C_Status.busy = 0;
 12860  0E81  0021               	movlb	1	; select bank1
 12861  0E82  10BC               	bcf	(_I2C_Status^(0+128)+28),1
 12862                           
 12863                           ;i2c_master.c: 336: I2C_Status.error = I2C_NOERR;
 12864  0E83  01BB               	clrf	(_I2C_Status^(0+128)+27)
 12865                           
 12866                           ;i2c_master.c: 337: return I2C_RESET;
 12867  0E84  300E               	movlw	14
 12868  0E85  0008               	return
 12869  0E86                     __end_ofi1_I2C_DO_IDLE:	
 12870                           
 12871                           	psect	text99
 12872  05A9                     __ptext99:	
 12873 ;; *************** function i1_I2C_DO_TX_EMPTY *****************
 12874 ;; Defined at:
 12875 ;;		line 409 in file "mcc_generated_files/i2c_master.c"
 12876 ;; Parameters:    Size  Location     Type
 12877 ;;		None
 12878 ;; Auto vars:     Size  Location     Type
 12879 ;;		None
 12880 ;; Return value:  Size  Location     Type
 12881 ;;                  1    wreg      enum E12103
 12882 ;; Registers used:
 12883 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12884 ;; Tracked objects:
 12885 ;;		On entry : 0/0
 12886 ;;		On exit  : 0/0
 12887 ;;		Unchanged: 0/0
 12888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12891 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12892 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12893 ;;Total ram usage:        1 bytes
 12894 ;; Hardware stack levels used:    1
 12895 ;; Hardware stack levels required when called:    3
 12896 ;; This function calls:
 12897 ;;		Absolute function
 12898 ;;		i1_I2C_CallbackReturnReset
 12899 ;;		i1_I2C_CallbackReturnStop
 12900 ;;		i1_I2C_DO_SEND_RESTART
 12901 ;;		i1_I2C_DO_SEND_STOP
 12902 ;;		i1_I2C_MasterSetIrq
 12903 ;;		i1_rd1RegCompleteHandler
 12904 ;;		i1_rd2RegCompleteHandler
 12905 ;;		i1_rdBlkRegCompleteHandler
 12906 ;;		i1_wr1RegCompleteHandler
 12907 ;;		i1_wr2RegCompleteHandler
 12908 ;; This function is called by:
 12909 ;; This function uses a non-reentrant model
 12910 ;;
 12911                           
 12912                           
 12913                           ;psect for function i1_I2C_DO_TX_EMPTY
 12914  05A9                     i1_I2C_DO_TX_EMPTY:	
 12915  05A9                     i1l5983:	
 12916                           ;incstack = 0
 12917 ;; hardware stack exceeded
 12918                           ; Regs used in i1_I2C_DO_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12919                           
 12920                           
 12921                           ;i2c_master.c: 411: I2C_Status.bufferFree = 1;
 12922  05A9  0021               	movlb	1	; select bank1
 12923  05AA  15BC               	bsf	(_I2C_Status^(0+128)+28),3
 12924                           
 12925                           ;i2c_master.c: 412: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
 12926  05AB  2DB6               	goto	i1l6001
 12927  05AC                     i1l5985:	
 12928                           ;i2c_master.c: 413: {
 12929                           ;i2c_master.c: 414: case I2C_RESTART_READ:
 12930                           
 12931                           
 12932                           ;i2c_master.c: 415: case I2C_RESTART_WRITE:
 12933                           ;i2c_master.c: 416: return I2C_DO_SEND_RESTART();
 12934  05AC  318E  2650         	fcall	i1_I2C_DO_SEND_RESTART
 12935  05AE  0008               	return
 12936  05AF                     i1l5989:	
 12937                           ;i2c_master.c: 417: case I2C_CONTINUE:
 12938                           
 12939                           
 12940                           ;i2c_master.c: 418: I2C_MasterSetIrq();
 12941  05AF  318E  2615         	fcall	i1_I2C_MasterSetIrq
 12942                           
 12943                           ;i2c_master.c: 419: return I2C_TX;
 12944  05B1  3003               	movlw	3
 12945  05B2  0008               	return
 12946  05B3                     i1l5995:	
 12947                           ;i2c_master.c: 421: case I2C_STOP:
 12948                           
 12949                           ;i2c_master.c: 420: default:
 12950                           
 12951                           
 12952                           ;i2c_master.c: 422: return I2C_DO_SEND_STOP();
 12953  05B3  318E  2654         	fcall	i1_I2C_DO_SEND_STOP
 12954                           
 12955                           ;i2c_master.c: 423: }
 12956  05B5  0008               	return
 12957  05B6                     i1l6001:	
 12958  05B6  0021               	movlb	1	; select bank1
 12959  05B7  082C               	movf	(low ((_I2C_Status| 0+12)))^(0+128),w
 12960  05B8  00FA               	movwf	??i1_I2C_DO_TX_EMPTY
 12961  05B9  087A               	movf	??i1_I2C_DO_TX_EMPTY,w
 12962  05BA  00F9               	movwf	i1I2C_CallbackReturnReset@funPtr
 12963  05BB  0821               	movf	(_I2C_Status+1)^(0+128),w
 12964  05BC  008A               	movwf	10
 12965  05BD  0820               	movf	_I2C_Status^(0+128),w
 12966  05BE  000A               	callw
 12967  05BF  3185               	pagesel	$
 12968                           
 12969                           ; Switch size 1, requested type "space"
 12970                           ; Number of cases is 4, Range of values is 1 to 4
 12971                           ; switch strategies available:
 12972                           ; Name         Instructions Cycles
 12973                           ; simple_byte           13     7 (average)
 12974                           ; direct_byte           17     9 (fixed)
 12975                           ; jumptable            263     9 (fixed)
 12976                           ;	Chosen strategy is simple_byte
 12977  05C0  3A01               	xorlw	1	; case 1
 12978  05C1  1903               	skipnz
 12979  05C2  2DB3               	goto	i1l5995
 12980  05C3  3A03               	xorlw	3	; case 2
 12981  05C4  1903               	skipnz
 12982  05C5  2DAC               	goto	i1l5985
 12983  05C6  3A01               	xorlw	1	; case 3
 12984  05C7  1903               	skipnz
 12985  05C8  2DAC               	goto	i1l5985
 12986  05C9  3A07               	xorlw	7	; case 4
 12987  05CA  1903               	skipnz
 12988  05CB  2DAF               	goto	i1l5989
 12989  05CC  2DB3               	goto	i1l5995
 12990  05CD  0008               	return
 12991  05CE                     __end_ofi1_I2C_DO_TX_EMPTY:	
 12992                           
 12993                           	psect	text100
 12994  0E15                     __ptext100:	
 12995 ;; *************** function i1_I2C_MasterSetIrq *****************
 12996 ;; Defined at:
 12997 ;;		line 645 in file "mcc_generated_files/i2c_master.c"
 12998 ;; Parameters:    Size  Location     Type
 12999 ;;		None
 13000 ;; Auto vars:     Size  Location     Type
 13001 ;;		None
 13002 ;; Return value:  Size  Location     Type
 13003 ;;                  1    wreg      void 
 13004 ;; Registers used:
 13005 ;;		None
 13006 ;; Tracked objects:
 13007 ;;		On entry : 0/0
 13008 ;;		On exit  : 0/0
 13009 ;;		Unchanged: 0/0
 13010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13015 ;;Total ram usage:        0 bytes
 13016 ;; Hardware stack levels used:    1
 13017 ;; This function calls:
 13018 ;;		Nothing
 13019 ;; This function is called by:
 13020 ;;		i1_I2C_DO_TX_EMPTY
 13021 ;; This function uses a non-reentrant model
 13022 ;;
 13023                           
 13024                           
 13025                           ;psect for function i1_I2C_MasterSetIrq
 13026  0E15                     i1_I2C_MasterSetIrq:	
 13027                           
 13028                           ;i2c_master.c: 647: PIR1bits.SSP1IF = 1;
 13029                           
 13030                           ;incstack = 0
 13031 ;; hardware stack exceeded
 13032                           ; Regs used in i1_I2C_MasterSetIrq: []
 13033  0E15  0020               	movlb	0	; select bank0
 13034  0E16  1590               	bsf	16,3	;volatile
 13035  0E17  0008               	return
 13036  0E18                     __end_ofi1_I2C_MasterSetIrq:	
 13037                           
 13038                           	psect	text101
 13039  0E95                     __ptext101:	
 13040 ;; *************** function i1_I2C_MasterIsNack *****************
 13041 ;; Defined at:
 13042 ;;		line 598 in file "mcc_generated_files/i2c_master.c"
 13043 ;; Parameters:    Size  Location     Type
 13044 ;;		None
 13045 ;; Auto vars:     Size  Location     Type
 13046 ;;		None
 13047 ;; Return value:  Size  Location     Type
 13048 ;;                  1    wreg      unsigned char 
 13049 ;; Registers used:
 13050 ;;		wreg, status,2, status,0
 13051 ;; Tracked objects:
 13052 ;;		On entry : 0/0
 13053 ;;		On exit  : 0/0
 13054 ;;		Unchanged: 0/0
 13055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13060 ;;Total ram usage:        0 bytes
 13061 ;; Hardware stack levels used:    1
 13062 ;; This function calls:
 13063 ;;		Nothing
 13064 ;; This function is called by:
 13065 ;;		i1_I2C_MasterFsm
 13066 ;;		i1_I2C_DO_TX
 13067 ;; This function uses a non-reentrant model
 13068 ;;
 13069                           
 13070                           
 13071                           ;psect for function i1_I2C_MasterIsNack
 13072  0E95                     i1_I2C_MasterIsNack:	
 13073                           
 13074                           ;i2c_master.c: 600: return SSP1CON2bits.ACKSTAT;
 13075                           
 13076                           ;incstack = 0
 13077 ;; hardware stack exceeded
 13078                           ; Regs used in i1_I2C_MasterIsNack: [wreg+status,2+status,0]
 13079  0E95  0024               	movlb	4	; select bank4
 13080  0E96  0E16               	swapf	22,w	;volatile
 13081  0E97  0C89               	rrf	9,f
 13082  0E98  0C89               	rrf	9,f
 13083  0E99  3901               	andlw	1
 13084  0E9A  0008               	return
 13085  0E9B                     __end_ofi1_I2C_MasterIsNack:	
 13086                           
 13087                           	psect	text102
 13088  0E7C                     __ptext102:	
 13089 ;; *************** function i1_I2C_MasterSendTxData *****************
 13090 ;; Defined at:
 13091 ;;		line 568 in file "mcc_generated_files/i2c_master.c"
 13092 ;; Parameters:    Size  Location     Type
 13093 ;;  data            1    wreg     unsigned char 
 13094 ;; Auto vars:     Size  Location     Type
 13095 ;;  data            1    0[COMMON] unsigned char 
 13096 ;; Return value:  Size  Location     Type
 13097 ;;                  1    wreg      void 
 13098 ;; Registers used:
 13099 ;;		wreg
 13100 ;; Tracked objects:
 13101 ;;		On entry : 0/0
 13102 ;;		On exit  : 0/0
 13103 ;;		Unchanged: 0/0
 13104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13106 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13108 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13109 ;;Total ram usage:        1 bytes
 13110 ;; Hardware stack levels used:    1
 13111 ;; This function calls:
 13112 ;;		Nothing
 13113 ;; This function is called by:
 13114 ;;		i1_I2C_DO_SEND_ADR_READ
 13115 ;;		i1_I2C_DO_SEND_ADR_WRITE
 13116 ;;		i1_I2C_DO_TX
 13117 ;; This function uses a non-reentrant model
 13118 ;;
 13119                           
 13120                           
 13121                           ;psect for function i1_I2C_MasterSendTxData
 13122  0E7C                     i1_I2C_MasterSendTxData:	
 13123                           
 13124                           ;incstack = 0
 13125 ;; hardware stack exceeded
 13126                           ; Regs used in i1_I2C_MasterSendTxData: [wreg]
 13127                           ;i1I2C_MasterSendTxData@data stored from wreg
 13128  0E7C  00F0               	movwf	i1I2C_MasterSendTxData@data
 13129                           
 13130                           ;i2c_master.c: 570: SSP1BUF = data;
 13131  0E7D  0870               	movf	i1I2C_MasterSendTxData@data,w
 13132  0E7E  0024               	movlb	4	; select bank4
 13133  0E7F  0091               	movwf	17	;volatile
 13134  0E80  0008               	return
 13135  0E81                     __end_ofi1_I2C_MasterSendTxData:	
 13136                           
 13137                           	psect	text103
 13138  0E44                     __ptext103:	
 13139 ;; *************** function i1_I2C_MasterSendAck *****************
 13140 ;; Defined at:
 13141 ;;		line 603 in file "mcc_generated_files/i2c_master.c"
 13142 ;; Parameters:    Size  Location     Type
 13143 ;;		None
 13144 ;; Auto vars:     Size  Location     Type
 13145 ;;		None
 13146 ;; Return value:  Size  Location     Type
 13147 ;;                  1    wreg      void 
 13148 ;; Registers used:
 13149 ;;		None
 13150 ;; Tracked objects:
 13151 ;;		On entry : 0/0
 13152 ;;		On exit  : 0/0
 13153 ;;		Unchanged: 0/0
 13154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13159 ;;Total ram usage:        0 bytes
 13160 ;; Hardware stack levels used:    1
 13161 ;; This function calls:
 13162 ;;		Nothing
 13163 ;; This function is called by:
 13164 ;;		i1_I2C_DO_RX
 13165 ;;		i1_I2C_DO_RX_ACK
 13166 ;; This function uses a non-reentrant model
 13167 ;;
 13168                           
 13169                           
 13170                           ;psect for function i1_I2C_MasterSendAck
 13171  0E44                     i1_I2C_MasterSendAck:	
 13172                           
 13173                           ;i2c_master.c: 605: SSP1CON2bits.ACKDT = 0;
 13174                           
 13175                           ;incstack = 0
 13176 ;; hardware stack exceeded
 13177                           ; Regs used in i1_I2C_MasterSendAck: []
 13178  0E44  0024               	movlb	4	; select bank4
 13179  0E45  1296               	bcf	22,5	;volatile
 13180                           
 13181                           ;i2c_master.c: 606: SSP1CON2bits.ACKEN = 1;
 13182  0E46  1616               	bsf	22,4	;volatile
 13183  0E47  0008               	return
 13184  0E48                     __end_ofi1_I2C_MasterSendAck:	
 13185                           
 13186                           	psect	text104
 13187  0E12                     __ptext104:	
 13188 ;; *************** function i1_I2C_MasterGetRxData *****************
 13189 ;; Defined at:
 13190 ;;		line 563 in file "mcc_generated_files/i2c_master.c"
 13191 ;; Parameters:    Size  Location     Type
 13192 ;;		None
 13193 ;; Auto vars:     Size  Location     Type
 13194 ;;		None
 13195 ;; Return value:  Size  Location     Type
 13196 ;;                  1    wreg      unsigned char 
 13197 ;; Registers used:
 13198 ;;		wreg
 13199 ;; Tracked objects:
 13200 ;;		On entry : 0/0
 13201 ;;		On exit  : 0/0
 13202 ;;		Unchanged: 0/0
 13203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13208 ;;Total ram usage:        0 bytes
 13209 ;; Hardware stack levels used:    1
 13210 ;; This function calls:
 13211 ;;		Nothing
 13212 ;; This function is called by:
 13213 ;;		i1_I2C_DO_RX
 13214 ;; This function uses a non-reentrant model
 13215 ;;
 13216                           
 13217                           
 13218                           ;psect for function i1_I2C_MasterGetRxData
 13219  0E12                     i1_I2C_MasterGetRxData:	
 13220                           
 13221                           ;i2c_master.c: 565: return SSP1BUF;
 13222                           
 13223                           ;incstack = 0
 13224 ;; hardware stack exceeded
 13225                           ; Regs used in i1_I2C_MasterGetRxData: [wreg]
 13226  0E12  0024               	movlb	4	; select bank4
 13227  0E13  0811               	movf	17,w	;volatile
 13228  0E14  0008               	return
 13229  0E15                     __end_ofi1_I2C_MasterGetRxData:	
 13230                           
 13231                           	psect	text105
 13232  0E40                     __ptext105:	
 13233 ;; *************** function i1_I2C_MasterSendNack *****************
 13234 ;; Defined at:
 13235 ;;		line 609 in file "mcc_generated_files/i2c_master.c"
 13236 ;; Parameters:    Size  Location     Type
 13237 ;;		None
 13238 ;; Auto vars:     Size  Location     Type
 13239 ;;		None
 13240 ;; Return value:  Size  Location     Type
 13241 ;;                  1    wreg      void 
 13242 ;; Registers used:
 13243 ;;		None
 13244 ;; Tracked objects:
 13245 ;;		On entry : 0/0
 13246 ;;		On exit  : 0/0
 13247 ;;		Unchanged: 0/0
 13248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13253 ;;Total ram usage:        0 bytes
 13254 ;; Hardware stack levels used:    1
 13255 ;; This function calls:
 13256 ;;		Nothing
 13257 ;; This function is called by:
 13258 ;;		i1_I2C_DO_RX_NACK_STOP
 13259 ;;		i1_I2C_DO_RX_NACK_RESTART
 13260 ;; This function uses a non-reentrant model
 13261 ;;
 13262                           
 13263                           
 13264                           ;psect for function i1_I2C_MasterSendNack
 13265  0E40                     i1_I2C_MasterSendNack:	
 13266                           
 13267                           ;i2c_master.c: 611: SSP1CON2bits.ACKDT = 1;
 13268                           
 13269                           ;incstack = 0
 13270 ;; hardware stack exceeded
 13271                           ; Regs used in i1_I2C_MasterSendNack: []
 13272  0E40  0024               	movlb	4	; select bank4
 13273  0E41  1696               	bsf	22,5	;volatile
 13274                           
 13275                           ;i2c_master.c: 612: SSP1CON2bits.ACKEN = 1;
 13276  0E42  1616               	bsf	22,4	;volatile
 13277  0E43  0008               	return
 13278  0E44                     __end_ofi1_I2C_MasterSendNack:	
 13279                           
 13280                           	psect	text106
 13281  0E0F                     __ptext106:	
 13282 ;; *************** function i1_I2C_MasterStartRx *****************
 13283 ;; Defined at:
 13284 ;;		line 583 in file "mcc_generated_files/i2c_master.c"
 13285 ;; Parameters:    Size  Location     Type
 13286 ;;		None
 13287 ;; Auto vars:     Size  Location     Type
 13288 ;;		None
 13289 ;; Return value:  Size  Location     Type
 13290 ;;                  1    wreg      void 
 13291 ;; Registers used:
 13292 ;;		None
 13293 ;; Tracked objects:
 13294 ;;		On entry : 0/0
 13295 ;;		On exit  : 0/0
 13296 ;;		Unchanged: 0/0
 13297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13302 ;;Total ram usage:        0 bytes
 13303 ;; Hardware stack levels used:    1
 13304 ;; This function calls:
 13305 ;;		Nothing
 13306 ;; This function is called by:
 13307 ;;		i1_I2C_DO_RCEN
 13308 ;; This function uses a non-reentrant model
 13309 ;;
 13310                           
 13311                           
 13312                           ;psect for function i1_I2C_MasterStartRx
 13313  0E0F                     i1_I2C_MasterStartRx:	
 13314                           
 13315                           ;i2c_master.c: 585: SSP1CON2bits.RCEN = 1;
 13316                           
 13317                           ;incstack = 0
 13318 ;; hardware stack exceeded
 13319                           ; Regs used in i1_I2C_MasterStartRx: []
 13320  0E0F  0024               	movlb	4	; select bank4
 13321  0E10  1596               	bsf	22,3	;volatile
 13322  0E11  0008               	return
 13323  0E12                     __end_ofi1_I2C_MasterStartRx:	
 13324                           
 13325                           	psect	text107
 13326  0002                     __ptext107:	
 13327 ;; *************** function i1_I2C_CallbackReturnReset *****************
 13328 ;; Defined at:
 13329 ;;		line 525 in file "mcc_generated_files/i2c_master.c"
 13330 ;; Parameters:    Size  Location     Type
 13331 ;;  funPtr          1    9[COMMON] PTR void 
 13332 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 13333 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 13334 ;; Auto vars:     Size  Location     Type
 13335 ;;		None
 13336 ;; Return value:  Size  Location     Type
 13337 ;;                  1    wreg      enum E97
 13338 ;; Registers used:
 13339 ;;		wreg
 13340 ;; Tracked objects:
 13341 ;;		On entry : 0/0
 13342 ;;		On exit  : 0/0
 13343 ;;		Unchanged: 0/0
 13344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13345 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13348 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13349 ;;Total ram usage:        1 bytes
 13350 ;; Hardware stack levels used:    1
 13351 ;; This function calls:
 13352 ;;		Nothing
 13353 ;; This function is called by:
 13354 ;;		i1_I2C_Open
 13355 ;;		i1_I2C_DO_TX
 13356 ;;		i1_I2C_DO_RX
 13357 ;;		i1_I2C_DO_TX_EMPTY
 13358 ;;		i1_I2C_DO_ADDRESS_NACK
 13359 ;;		_I2C_DO_TX
 13360 ;;		_I2C_DO_RX
 13361 ;;		_I2C_DO_TX_EMPTY
 13362 ;;		_I2C_DO_ADDRESS_NACK
 13363 ;;		_I2C_DO_RX_EMPTY
 13364 ;; This function uses a non-reentrant model
 13365 ;;
 13366                           
 13367                           
 13368                           ;psect for function i1_I2C_CallbackReturnReset
 13369  0002                     i1_I2C_CallbackReturnReset:	
 13370  0002                     i1l2847:	
 13371                           ;incstack = 0
 13372 ;; hardware stack exceeded
 13373                           ; Regs used in i1_I2C_CallbackReturnReset: [wreg]
 13374                           
 13375                           
 13376                           ;i2c_master.c: 527: return I2C_RESET_LINK;
 13377  0002  3005               	movlw	5
 13378  0003  0008               	return
 13379  0004                     __end_ofi1_I2C_CallbackReturnReset:	
 13380                           
 13381                           	psect	text108
 13382  0DF5                     __ptext108:	
 13383 ;; *************** function i1_I2C_CallbackReturnStop *****************
 13384 ;; Defined at:
 13385 ;;		line 520 in file "mcc_generated_files/i2c_master.c"
 13386 ;; Parameters:    Size  Location     Type
 13387 ;;  funPtr          1    9[COMMON] PTR void 
 13388 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 13389 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 13390 ;; Auto vars:     Size  Location     Type
 13391 ;;		None
 13392 ;; Return value:  Size  Location     Type
 13393 ;;                  1    wreg      enum E97
 13394 ;; Registers used:
 13395 ;;		wreg
 13396 ;; Tracked objects:
 13397 ;;		On entry : 0/0
 13398 ;;		On exit  : 0/0
 13399 ;;		Unchanged: 0/0
 13400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13401 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13404 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13405 ;;Total ram usage:        1 bytes
 13406 ;; Hardware stack levels used:    1
 13407 ;; This function calls:
 13408 ;;		Nothing
 13409 ;; This function is called by:
 13410 ;;		i1_I2C_Open
 13411 ;;		i1_I2C_SetCallback
 13412 ;;		i1_I2C_DO_TX
 13413 ;;		i1_I2C_DO_RX
 13414 ;;		i1_I2C_DO_TX_EMPTY
 13415 ;;		i1_I2C_DO_ADDRESS_NACK
 13416 ;;		_I2C_DO_TX
 13417 ;;		_I2C_DO_RX
 13418 ;;		_I2C_DO_TX_EMPTY
 13419 ;;		_I2C_DO_ADDRESS_NACK
 13420 ;;		_I2C_DO_RX_EMPTY
 13421 ;; This function uses a non-reentrant model
 13422 ;;
 13423                           
 13424                           
 13425                           ;psect for function i1_I2C_CallbackReturnStop
 13426  0DF5                     i1_I2C_CallbackReturnStop:	
 13427  0DF5                     i1l2843:	
 13428                           ;incstack = 0
 13429 ;; hardware stack exceeded
 13430                           ; Regs used in i1_I2C_CallbackReturnStop: [wreg]
 13431                           
 13432                           
 13433                           ;i2c_master.c: 522: return I2C_STOP;
 13434  0DF5  3001               	movlw	1
 13435  0DF6  0008               	return
 13436  0DF7                     __end_ofi1_I2C_CallbackReturnStop:	
 13437                           
 13438                           	psect	text109
 13439  06C3                     __ptext109:	
 13440 ;; *************** function i1_rdBlkRegCompleteHandler *****************
 13441 ;; Defined at:
 13442 ;;		line 170 in file "mcc_generated_files/examples/i2c_master_example.c"
 13443 ;; Parameters:    Size  Location     Type
 13444 ;;  ptr             1    9[COMMON] PTR void 
 13445 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 13446 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 13447 ;; Auto vars:     Size  Location     Type
 13448 ;;		None
 13449 ;; Return value:  Size  Location     Type
 13450 ;;                  1    wreg      enum E97
 13451 ;; Registers used:
 13452 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13453 ;; Tracked objects:
 13454 ;;		On entry : 0/0
 13455 ;;		On exit  : 0/0
 13456 ;;		Unchanged: 0/0
 13457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13458 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13461 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13462 ;;Total ram usage:        1 bytes
 13463 ;; Hardware stack levels used:    1
 13464 ;; Hardware stack levels required when called:    2
 13465 ;; This function calls:
 13466 ;;		i1_I2C_SetBuffer
 13467 ;;		i1_I2C_SetDataCompleteCallback
 13468 ;; This function is called by:
 13469 ;; This function uses a non-reentrant model
 13470 ;;
 13471                           
 13472                           
 13473                           ;psect for function i1_rdBlkRegCompleteHandler
 13474  06C3                     i1_rdBlkRegCompleteHandler:	
 13475  06C3                     i1l2801:	
 13476                           ;incstack = 0
 13477 ;; hardware stack exceeded
 13478                           ; Regs used in i1_rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 13479                           
 13480                           
 13481                           ;i2c_master_example.c: 172: I2C_SetBuffer(((i2c_buffer_t *)ptr)->data,((i2c_buffer_t*)pt
      +                          r)->len);
 13482  06C3  0879               	movf	i1rdBlkRegCompleteHandler@ptr,w
 13483  06C4  0086               	movwf	6
 13484  06C5  0187               	clrf	7
 13485  06C6  3F40               	moviw [0]fsr1
 13486  06C7  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 13487  06C8  3F41               	moviw [1]fsr1
 13488  06C9  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 13489  06CA  0879               	movf	i1rdBlkRegCompleteHandler@ptr,w
 13490  06CB  3E02               	addlw	2
 13491  06CC  0086               	movwf	6
 13492  06CD  0187               	clrf	7
 13493  06CE  0801               	movf	1,w
 13494  06CF  3187  27F2  3186   	fcall	i1_I2C_SetBuffer
 13495                           
 13496                           ;i2c_master_example.c: 173: I2C_SetDataCompleteCallback((0),(0));
 13497  06D2  3000               	movlw	0
 13498  06D3  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 13499  06D4  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 13500  06D5  01F7               	clrf	i1I2C_SetDataCompleteCallback@ptr
 13501  06D6  318F  27AA         	fcall	i1_I2C_SetDataCompleteCallback
 13502                           
 13503                           ;i2c_master_example.c: 174: return I2C_RESTART_READ;
 13504  06D8  3002               	movlw	2
 13505  06D9  0008               	return
 13506  06DA                     __end_ofi1_rdBlkRegCompleteHandler:	
 13507                           
 13508                           	psect	text110
 13509  07B2                     __ptext110:	
 13510 ;; *************** function i1_wr1RegCompleteHandler *****************
 13511 ;; Defined at:
 13512 ;;		line 156 in file "mcc_generated_files/examples/i2c_master_example.c"
 13513 ;; Parameters:    Size  Location     Type
 13514 ;;  ptr             1    9[COMMON] PTR void 
 13515 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 13516 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 13517 ;; Auto vars:     Size  Location     Type
 13518 ;;		None
 13519 ;; Return value:  Size  Location     Type
 13520 ;;                  1    wreg      enum E97
 13521 ;; Registers used:
 13522 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13523 ;; Tracked objects:
 13524 ;;		On entry : 0/0
 13525 ;;		On exit  : 0/0
 13526 ;;		Unchanged: 0/0
 13527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13528 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13531 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13532 ;;Total ram usage:        1 bytes
 13533 ;; Hardware stack levels used:    1
 13534 ;; Hardware stack levels required when called:    2
 13535 ;; This function calls:
 13536 ;;		i1_I2C_SetBuffer
 13537 ;;		i1_I2C_SetDataCompleteCallback
 13538 ;; This function is called by:
 13539 ;;		i1_I2C_Write1ByteRegister
 13540 ;;		i1_I2C_DO_TX
 13541 ;;		i1_I2C_DO_RX
 13542 ;;		i1_I2C_DO_TX_EMPTY
 13543 ;;		i1_I2C_DO_ADDRESS_NACK
 13544 ;;		_I2C_DO_TX
 13545 ;;		_I2C_DO_RX
 13546 ;;		_I2C_DO_TX_EMPTY
 13547 ;;		_I2C_DO_ADDRESS_NACK
 13548 ;;		_I2C_DO_RX_EMPTY
 13549 ;; This function uses a non-reentrant model
 13550 ;;
 13551                           
 13552                           
 13553                           ;psect for function i1_wr1RegCompleteHandler
 13554  07B2                     i1_wr1RegCompleteHandler:	
 13555  07B2                     i1l2785:	
 13556                           ;incstack = 0
 13557 ;; hardware stack exceeded
 13558                           ; Regs used in i1_wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13559                           
 13560                           
 13561                           ;i2c_master_example.c: 158: I2C_SetBuffer(ptr,1);
 13562  07B2  3001               	movlw	1
 13563  07B3  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 13564  07B4  3000               	movlw	0
 13565  07B5  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 13566  07B6  0879               	movf	i1wr1RegCompleteHandler@ptr,w
 13567  07B7  3187  27F2  3187   	fcall	i1_I2C_SetBuffer
 13568                           
 13569                           ;i2c_master_example.c: 159: I2C_SetDataCompleteCallback((0),(0));
 13570  07BA  3000               	movlw	0
 13571  07BB  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 13572  07BC  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 13573  07BD  01F7               	clrf	i1I2C_SetDataCompleteCallback@ptr
 13574  07BE  318F  27AA         	fcall	i1_I2C_SetDataCompleteCallback
 13575                           
 13576                           ;i2c_master_example.c: 160: return I2C_CONTINUE;
 13577  07C0  3004               	movlw	4
 13578  07C1  0008               	return
 13579  07C2                     __end_ofi1_wr1RegCompleteHandler:	
 13580                           
 13581                           	psect	text111
 13582  07C2                     __ptext111:	
 13583 ;; *************** function i1_rd2RegCompleteHandler *****************
 13584 ;; Defined at:
 13585 ;;		line 149 in file "mcc_generated_files/examples/i2c_master_example.c"
 13586 ;; Parameters:    Size  Location     Type
 13587 ;;  ptr             1    9[COMMON] PTR void 
 13588 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 13589 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 13590 ;; Auto vars:     Size  Location     Type
 13591 ;;		None
 13592 ;; Return value:  Size  Location     Type
 13593 ;;                  1    wreg      enum E97
 13594 ;; Registers used:
 13595 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13596 ;; Tracked objects:
 13597 ;;		On entry : 0/0
 13598 ;;		On exit  : 0/0
 13599 ;;		Unchanged: 0/0
 13600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13601 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13604 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13605 ;;Total ram usage:        1 bytes
 13606 ;; Hardware stack levels used:    1
 13607 ;; Hardware stack levels required when called:    2
 13608 ;; This function calls:
 13609 ;;		i1_I2C_SetBuffer
 13610 ;;		i1_I2C_SetDataCompleteCallback
 13611 ;; This function is called by:
 13612 ;; This function uses a non-reentrant model
 13613 ;;
 13614                           
 13615                           
 13616                           ;psect for function i1_rd2RegCompleteHandler
 13617  07C2                     i1_rd2RegCompleteHandler:	
 13618  07C2                     i1l2777:	
 13619                           ;incstack = 0
 13620 ;; hardware stack exceeded
 13621                           ; Regs used in i1_rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13622                           
 13623                           
 13624                           ;i2c_master_example.c: 151: I2C_SetBuffer(ptr,2);
 13625  07C2  3002               	movlw	2
 13626  07C3  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 13627  07C4  3000               	movlw	0
 13628  07C5  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 13629  07C6  0879               	movf	i1rd2RegCompleteHandler@ptr,w
 13630  07C7  3187  27F2  3187   	fcall	i1_I2C_SetBuffer
 13631                           
 13632                           ;i2c_master_example.c: 152: I2C_SetDataCompleteCallback((0),(0));
 13633  07CA  3000               	movlw	0
 13634  07CB  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 13635  07CC  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 13636  07CD  01F7               	clrf	i1I2C_SetDataCompleteCallback@ptr
 13637  07CE  318F  27AA         	fcall	i1_I2C_SetDataCompleteCallback
 13638                           
 13639                           ;i2c_master_example.c: 153: return I2C_RESTART_READ;
 13640  07D0  3002               	movlw	2
 13641  07D1  0008               	return
 13642  07D2                     __end_ofi1_rd2RegCompleteHandler:	
 13643                           
 13644                           	psect	text112
 13645  07D2                     __ptext112:	
 13646 ;; *************** function i1_rd1RegCompleteHandler *****************
 13647 ;; Defined at:
 13648 ;;		line 142 in file "mcc_generated_files/examples/i2c_master_example.c"
 13649 ;; Parameters:    Size  Location     Type
 13650 ;;  ptr             1    9[COMMON] PTR void 
 13651 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 13652 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 13653 ;; Auto vars:     Size  Location     Type
 13654 ;;		None
 13655 ;; Return value:  Size  Location     Type
 13656 ;;                  1    wreg      enum E97
 13657 ;; Registers used:
 13658 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13659 ;; Tracked objects:
 13660 ;;		On entry : 0/0
 13661 ;;		On exit  : 0/0
 13662 ;;		Unchanged: 0/0
 13663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13664 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13667 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13668 ;;Total ram usage:        1 bytes
 13669 ;; Hardware stack levels used:    1
 13670 ;; Hardware stack levels required when called:    2
 13671 ;; This function calls:
 13672 ;;		i1_I2C_SetBuffer
 13673 ;;		i1_I2C_SetDataCompleteCallback
 13674 ;; This function is called by:
 13675 ;;		_I2C_Read1ByteRegister
 13676 ;;		i1_I2C_DO_TX
 13677 ;;		i1_I2C_DO_RX
 13678 ;;		i1_I2C_DO_TX_EMPTY
 13679 ;;		i1_I2C_DO_ADDRESS_NACK
 13680 ;;		_I2C_DO_TX
 13681 ;;		_I2C_DO_RX
 13682 ;;		_I2C_DO_TX_EMPTY
 13683 ;;		_I2C_DO_ADDRESS_NACK
 13684 ;;		_I2C_DO_RX_EMPTY
 13685 ;; This function uses a non-reentrant model
 13686 ;;
 13687                           
 13688                           
 13689                           ;psect for function i1_rd1RegCompleteHandler
 13690  07D2                     i1_rd1RegCompleteHandler:	
 13691  07D2                     i1l2769:	
 13692                           ;incstack = 0
 13693 ;; hardware stack exceeded
 13694                           ; Regs used in i1_rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13695                           
 13696                           
 13697                           ;i2c_master_example.c: 144: I2C_SetBuffer(ptr,1);
 13698  07D2  3001               	movlw	1
 13699  07D3  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 13700  07D4  3000               	movlw	0
 13701  07D5  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 13702  07D6  0879               	movf	i1rd1RegCompleteHandler@ptr,w
 13703  07D7  3187  27F2  3187   	fcall	i1_I2C_SetBuffer
 13704                           
 13705                           ;i2c_master_example.c: 145: I2C_SetDataCompleteCallback((0),(0));
 13706  07DA  3000               	movlw	0
 13707  07DB  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 13708  07DC  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 13709  07DD  01F7               	clrf	i1I2C_SetDataCompleteCallback@ptr
 13710  07DE  318F  27AA         	fcall	i1_I2C_SetDataCompleteCallback
 13711                           
 13712                           ;i2c_master_example.c: 146: return I2C_RESTART_READ;
 13713  07E0  3002               	movlw	2
 13714  07E1  0008               	return
 13715  07E2                     __end_ofi1_rd1RegCompleteHandler:	
 13716                           
 13717                           	psect	text113
 13718  07E2                     __ptext113:	
 13719 ;; *************** function i1_wr2RegCompleteHandler *****************
 13720 ;; Defined at:
 13721 ;;		line 163 in file "mcc_generated_files/examples/i2c_master_example.c"
 13722 ;; Parameters:    Size  Location     Type
 13723 ;;  ptr             1    9[COMMON] PTR void 
 13724 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 13725 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 13726 ;; Auto vars:     Size  Location     Type
 13727 ;;		None
 13728 ;; Return value:  Size  Location     Type
 13729 ;;                  1    wreg      enum E97
 13730 ;; Registers used:
 13731 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13732 ;; Tracked objects:
 13733 ;;		On entry : 0/0
 13734 ;;		On exit  : 0/0
 13735 ;;		Unchanged: 0/0
 13736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13737 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13740 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13741 ;;Total ram usage:        1 bytes
 13742 ;; Hardware stack levels used:    1
 13743 ;; Hardware stack levels required when called:    2
 13744 ;; This function calls:
 13745 ;;		i1_I2C_SetBuffer
 13746 ;;		i1_I2C_SetDataCompleteCallback
 13747 ;; This function is called by:
 13748 ;; This function uses a non-reentrant model
 13749 ;;
 13750                           
 13751                           
 13752                           ;psect for function i1_wr2RegCompleteHandler
 13753  07E2                     i1_wr2RegCompleteHandler:	
 13754  07E2                     i1l2793:	
 13755                           ;incstack = 0
 13756 ;; hardware stack exceeded
 13757                           ; Regs used in i1_wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13758                           
 13759                           
 13760                           ;i2c_master_example.c: 165: I2C_SetBuffer(ptr,2);
 13761  07E2  3002               	movlw	2
 13762  07E3  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 13763  07E4  3000               	movlw	0
 13764  07E5  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 13765  07E6  0879               	movf	i1wr2RegCompleteHandler@ptr,w
 13766  07E7  3187  27F2  3187   	fcall	i1_I2C_SetBuffer
 13767                           
 13768                           ;i2c_master_example.c: 166: I2C_SetDataCompleteCallback((0),(0));
 13769  07EA  3000               	movlw	0
 13770  07EB  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 13771  07EC  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 13772  07ED  01F7               	clrf	i1I2C_SetDataCompleteCallback@ptr
 13773  07EE  318F  27AA         	fcall	i1_I2C_SetDataCompleteCallback
 13774                           
 13775                           ;i2c_master_example.c: 167: return I2C_CONTINUE;
 13776  07F0  3004               	movlw	4
 13777  07F1  0008               	return
 13778  07F2                     __end_ofi1_wr2RegCompleteHandler:	
 13779                           
 13780                           	psect	text114
 13781  0FAA                     __ptext114:	
 13782 ;; *************** function i1_I2C_SetDataCompleteCallback *****************
 13783 ;; Defined at:
 13784 ;;		line 273 in file "mcc_generated_files/i2c_master.c"
 13785 ;; Parameters:    Size  Location     Type
 13786 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
 13787 ;;		 -> i1_wr1RegCompleteHandler(1), i1_rd1RegCompleteHandler(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), 
 13788 ;;		 -> wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), Absolute function(1), rd1RegCompleteHandler(1), 
 13789 ;;  ptr             1    7[COMMON] PTR void 
 13790 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 13791 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 13792 ;; Auto vars:     Size  Location     Type
 13793 ;;		None
 13794 ;; Return value:  Size  Location     Type
 13795 ;;                  1    wreg      void 
 13796 ;; Registers used:
 13797 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13798 ;; Tracked objects:
 13799 ;;		On entry : 0/0
 13800 ;;		On exit  : 0/0
 13801 ;;		Unchanged: 0/0
 13802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13803 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13805 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13806 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13807 ;;Total ram usage:        4 bytes
 13808 ;; Hardware stack levels used:    1
 13809 ;; Hardware stack levels required when called:    1
 13810 ;; This function calls:
 13811 ;;		i1_I2C_SetCallback
 13812 ;; This function is called by:
 13813 ;;		_I2C_Read1ByteRegister
 13814 ;;		i1_I2C_Write1ByteRegister
 13815 ;;		i1_rd1RegCompleteHandler
 13816 ;;		i1_rd2RegCompleteHandler
 13817 ;;		i1_wr1RegCompleteHandler
 13818 ;;		i1_wr2RegCompleteHandler
 13819 ;;		i1_rdBlkRegCompleteHandler
 13820 ;; This function uses a non-reentrant model
 13821 ;;
 13822                           
 13823                           
 13824                           ;psect for function i1_I2C_SetDataCompleteCallback
 13825  0FAA                     i1_I2C_SetDataCompleteCallback:	
 13826                           
 13827                           ;i2c_master.c: 275: I2C_SetCallback(I2C_DATA_COMPLETE, cb, ptr);
 13828                           
 13829                           ;incstack = 0
 13830                           ; Regs used in i1_I2C_SetDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclat
      +                          h+cstack]
 13831  0FAA  0876               	movf	i1I2C_SetDataCompleteCallback@cb+1,w
 13832  0FAB  00F1               	movwf	i1I2C_SetCallback@cb+1
 13833  0FAC  0875               	movf	i1I2C_SetDataCompleteCallback@cb,w
 13834  0FAD  00F0               	movwf	i1I2C_SetCallback@cb
 13835  0FAE  0877               	movf	i1I2C_SetDataCompleteCallback@ptr,w
 13836  0FAF  00F8               	movwf	??i1_I2C_SetDataCompleteCallback
 13837  0FB0  0878               	movf	??i1_I2C_SetDataCompleteCallback,w
 13838  0FB1  00F2               	movwf	i1I2C_SetCallback@ptr
 13839  0FB2  3000               	movlw	0
 13840  0FB3  3185  25CE         	fcall	i1_I2C_SetCallback
 13841  0FB5  0008               	return
 13842  0FB6                     __end_ofi1_I2C_SetDataCompleteCallback:	
 13843                           
 13844                           	psect	text115
 13845  05CE                     __ptext115:	
 13846 ;; *************** function i1_I2C_SetCallback *****************
 13847 ;; Defined at:
 13848 ;;		line 298 in file "mcc_generated_files/i2c_master.c"
 13849 ;; Parameters:    Size  Location     Type
 13850 ;;  idx             1    wreg     enum E12121
 13851 ;;  cb              2    0[COMMON] PTR FTN(PTR void ,)enum 
 13852 ;;		 -> i1_wr1RegCompleteHandler(1), i1_rd1RegCompleteHandler(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), 
 13853 ;;		 -> wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), Absolute function(1), rd1RegCompleteHandler(1), 
 13854 ;;  ptr             1    2[COMMON] PTR void 
 13855 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 13856 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 13857 ;; Auto vars:     Size  Location     Type
 13858 ;;  idx             1    4[COMMON] enum E12121
 13859 ;; Return value:  Size  Location     Type
 13860 ;;                  1    wreg      void 
 13861 ;; Registers used:
 13862 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13863 ;; Tracked objects:
 13864 ;;		On entry : 0/0
 13865 ;;		On exit  : 0/0
 13866 ;;		Unchanged: 0/0
 13867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13868 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13869 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13870 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13871 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13872 ;;Total ram usage:        5 bytes
 13873 ;; Hardware stack levels used:    1
 13874 ;; This function calls:
 13875 ;;		Nothing
 13876 ;; This function is called by:
 13877 ;;		i1_I2C_SetDataCompleteCallback
 13878 ;;		i1_I2C_SetAddressNackCallback
 13879 ;; This function uses a non-reentrant model
 13880 ;;
 13881                           
 13882                           
 13883                           ;psect for function i1_I2C_SetCallback
 13884  05CE                     i1_I2C_SetCallback:	
 13885                           
 13886                           ;incstack = 0
 13887                           ; Regs used in i1_I2C_SetCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
 13888                           ;i1I2C_SetCallback@idx stored from wreg
 13889  05CE  00F4               	movwf	i1I2C_SetCallback@idx
 13890                           
 13891                           ;i2c_master.c: 300: if(cb)
 13892  05CF  0870               	movf	i1I2C_SetCallback@cb,w
 13893  05D0  0471               	iorwf	i1I2C_SetCallback@cb+1,w
 13894  05D1  1903               	btfsc	3,2
 13895  05D2  2DE4               	goto	i1l2753
 13896                           
 13897                           ;i2c_master.c: 301: {
 13898                           ;i2c_master.c: 302: I2C_Status.callbackTable[idx] = cb;
 13899  05D3  3574               	lslf	i1I2C_SetCallback@idx,w
 13900  05D4  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
 13901  05D5  0086               	movwf	6
 13902  05D6  0187               	clrf	7
 13903  05D7  0870               	movf	i1I2C_SetCallback@cb,w
 13904  05D8  3FC0               	movwi [0]fsr1
 13905  05D9  0871               	movf	i1I2C_SetCallback@cb+1,w
 13906  05DA  3FC1               	movwi [1]fsr1
 13907                           
 13908                           ;i2c_master.c: 303: I2C_Status.callbackPayload[idx] = ptr;
 13909  05DB  0872               	movf	i1I2C_SetCallback@ptr,w
 13910  05DC  00F3               	movwf	??i1_I2C_SetCallback
 13911  05DD  0874               	movf	i1I2C_SetCallback@idx,w
 13912  05DE  3EAC               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
 13913  05DF  0086               	movwf	6
 13914  05E0  0187               	clrf	7
 13915  05E1  0873               	movf	??i1_I2C_SetCallback,w
 13916  05E2  0081               	movwf	1
 13917                           
 13918                           ;i2c_master.c: 304: }
 13919  05E3  0008               	return
 13920  05E4                     i1l2753:	
 13921                           
 13922                           ;i2c_master.c: 305: else
 13923                           ;i2c_master.c: 306: {
 13924                           ;i2c_master.c: 307: I2C_Status.callbackTable[idx] = I2C_CallbackReturnStop;
 13925  05E4  3574               	lslf	i1I2C_SetCallback@idx,w
 13926  05E5  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
 13927  05E6  0086               	movwf	6
 13928  05E7  0187               	clrf	7
 13929  05E8  30A1               	movlw	low _I2C_CallbackReturnStop
 13930  05E9  3FC0               	movwi [0]fsr1
 13931  05EA  300E               	movlw	high _I2C_CallbackReturnStop
 13932  05EB  3FC1               	movwi [1]fsr1
 13933                           
 13934                           ;i2c_master.c: 308: I2C_Status.callbackPayload[idx] = (0);
 13935  05EC  0874               	movf	i1I2C_SetCallback@idx,w
 13936  05ED  3EAC               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
 13937  05EE  0086               	movwf	6
 13938  05EF  0187               	clrf	7
 13939  05F0  0181               	clrf	1
 13940  05F1  0008               	return
 13941  05F2                     __end_ofi1_I2C_SetCallback:	
 13942                           
 13943                           	psect	text116
 13944  07F2                     __ptext116:	
 13945 ;; *************** function i1_I2C_SetBuffer *****************
 13946 ;; Defined at:
 13947 ;;		line 263 in file "mcc_generated_files/i2c_master.c"
 13948 ;; Parameters:    Size  Location     Type
 13949 ;;  buffer          1    wreg     PTR void 
 13950 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
 13951 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
 13952 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
 13953 ;;  bufferSize      2    0[COMMON] unsigned int 
 13954 ;; Auto vars:     Size  Location     Type
 13955 ;;  buffer          1    3[COMMON] PTR void 
 13956 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
 13957 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
 13958 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
 13959 ;; Return value:  Size  Location     Type
 13960 ;;                  1    wreg      void 
 13961 ;; Registers used:
 13962 ;;		wreg
 13963 ;; Tracked objects:
 13964 ;;		On entry : 0/0
 13965 ;;		On exit  : 0/0
 13966 ;;		Unchanged: 0/0
 13967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13968 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13969 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13970 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13971 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13972 ;;Total ram usage:        4 bytes
 13973 ;; Hardware stack levels used:    1
 13974 ;; This function calls:
 13975 ;;		Nothing
 13976 ;; This function is called by:
 13977 ;;		_I2C_Read1ByteRegister
 13978 ;;		i1_I2C_Write1ByteRegister
 13979 ;;		i1_rd1RegCompleteHandler
 13980 ;;		i1_rd2RegCompleteHandler
 13981 ;;		i1_wr1RegCompleteHandler
 13982 ;;		i1_wr2RegCompleteHandler
 13983 ;;		i1_rdBlkRegCompleteHandler
 13984 ;; This function uses a non-reentrant model
 13985 ;;
 13986                           
 13987                           
 13988                           ;psect for function i1_I2C_SetBuffer
 13989  07F2                     i1_I2C_SetBuffer:	
 13990                           
 13991                           ;incstack = 0
 13992                           ; Regs used in i1_I2C_SetBuffer: [wreg]
 13993                           ;i1I2C_SetBuffer@buffer stored from wreg
 13994  07F2  00F3               	movwf	i1I2C_SetBuffer@buffer
 13995                           
 13996                           ;i2c_master.c: 265: if(I2C_Status.bufferFree)
 13997  07F3  0021               	movlb	1	; select bank1
 13998  07F4  1DBC               	btfss	(_I2C_Status^(0+128)+28),3
 13999  07F5  0008               	return
 14000                           
 14001                           ;i2c_master.c: 266: {
 14002                           ;i2c_master.c: 267: I2C_Status.data_ptr = buffer;
 14003  07F6  0873               	movf	i1I2C_SetBuffer@buffer,w
 14004  07F7  00F2               	movwf	??i1_I2C_SetBuffer
 14005  07F8  0872               	movf	??i1_I2C_SetBuffer,w
 14006  07F9  00B7               	movwf	(low ((_I2C_Status| 0+23)))^(0+128)
 14007                           
 14008                           ;i2c_master.c: 268: I2C_Status.data_length = bufferSize;
 14009  07FA  0871               	movf	i1I2C_SetBuffer@bufferSize+1,w
 14010  07FB  00B9               	movwf	((_I2C_Status+1)^(0+128)+24)
 14011  07FC  0870               	movf	i1I2C_SetBuffer@bufferSize,w
 14012  07FD  00B8               	movwf	(_I2C_Status^(0+128)+24)
 14013                           
 14014                           ;i2c_master.c: 269: I2C_Status.bufferFree = 0;
 14015  07FE  11BC               	bcf	(_I2C_Status^(0+128)+28),3
 14016  07FF  0008               	return
 14017  0800                     __end_ofi1_I2C_SetBuffer:	
 14018                           
 14019                           	psect	text117
 14020  0E0C                     __ptext117:	
 14021 ;; *************** function i1_I2C_MasterStop *****************
 14022 ;; Defined at:
 14023 ;;		line 593 in file "mcc_generated_files/i2c_master.c"
 14024 ;; Parameters:    Size  Location     Type
 14025 ;;		None
 14026 ;; Auto vars:     Size  Location     Type
 14027 ;;		None
 14028 ;; Return value:  Size  Location     Type
 14029 ;;                  1    wreg      void 
 14030 ;; Registers used:
 14031 ;;		None
 14032 ;; Tracked objects:
 14033 ;;		On entry : 0/0
 14034 ;;		On exit  : 0/0
 14035 ;;		Unchanged: 0/0
 14036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14041 ;;Total ram usage:        0 bytes
 14042 ;; Hardware stack levels used:    1
 14043 ;; This function calls:
 14044 ;;		Nothing
 14045 ;; This function is called by:
 14046 ;;		i1_I2C_DO_SEND_STOP
 14047 ;; This function uses a non-reentrant model
 14048 ;;
 14049                           
 14050                           
 14051                           ;psect for function i1_I2C_MasterStop
 14052  0E0C                     i1_I2C_MasterStop:	
 14053                           
 14054                           ;i2c_master.c: 595: SSP1CON2bits.PEN = 1;
 14055                           
 14056                           ;incstack = 0
 14057 ;; hardware stack exceeded
 14058                           ; Regs used in i1_I2C_MasterStop: []
 14059  0E0C  0024               	movlb	4	; select bank4
 14060  0E0D  1516               	bsf	22,2	;volatile
 14061  0E0E  0008               	return
 14062  0E0F                     __end_ofi1_I2C_MasterStop:	
 14063                           
 14064                           	psect	text118
 14065  0E09                     __ptext118:	
 14066 ;; *************** function i1_I2C_MasterEnableRestart *****************
 14067 ;; Defined at:
 14068 ;;		line 573 in file "mcc_generated_files/i2c_master.c"
 14069 ;; Parameters:    Size  Location     Type
 14070 ;;		None
 14071 ;; Auto vars:     Size  Location     Type
 14072 ;;		None
 14073 ;; Return value:  Size  Location     Type
 14074 ;;                  1    wreg      void 
 14075 ;; Registers used:
 14076 ;;		None
 14077 ;; Tracked objects:
 14078 ;;		On entry : 0/0
 14079 ;;		On exit  : 0/0
 14080 ;;		Unchanged: 0/0
 14081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14086 ;;Total ram usage:        0 bytes
 14087 ;; Hardware stack levels used:    1
 14088 ;; This function calls:
 14089 ;;		Nothing
 14090 ;; This function is called by:
 14091 ;;		i1_I2C_DO_SEND_RESTART_READ
 14092 ;;		i1_I2C_DO_SEND_RESTART_WRITE
 14093 ;;		i1_I2C_DO_SEND_RESTART
 14094 ;; This function uses a non-reentrant model
 14095 ;;
 14096                           
 14097                           
 14098                           ;psect for function i1_I2C_MasterEnableRestart
 14099  0E09                     i1_I2C_MasterEnableRestart:	
 14100                           
 14101                           ;i2c_master.c: 575: SSP1CON2bits.RSEN = 1;
 14102                           
 14103                           ;incstack = 0
 14104 ;; hardware stack exceeded
 14105                           ; Regs used in i1_I2C_MasterEnableRestart: []
 14106  0E09  0024               	movlb	4	; select bank4
 14107  0E0A  1496               	bsf	22,1	;volatile
 14108  0E0B  0008               	return
 14109  0E0C                     __end_ofi1_I2C_MasterEnableRestart:	
 14110                           
 14111                           	psect	text119
 14112  0E06                     __ptext119:	
 14113 ;; *************** function i1_I2C_MasterStart *****************
 14114 ;; Defined at:
 14115 ;;		line 588 in file "mcc_generated_files/i2c_master.c"
 14116 ;; Parameters:    Size  Location     Type
 14117 ;;		None
 14118 ;; Auto vars:     Size  Location     Type
 14119 ;;		None
 14120 ;; Return value:  Size  Location     Type
 14121 ;;                  1    wreg      void 
 14122 ;; Registers used:
 14123 ;;		None
 14124 ;; Tracked objects:
 14125 ;;		On entry : 0/0
 14126 ;;		On exit  : 0/0
 14127 ;;		Unchanged: 0/0
 14128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14133 ;;Total ram usage:        0 bytes
 14134 ;; Hardware stack levels used:    1
 14135 ;; This function calls:
 14136 ;;		Nothing
 14137 ;; This function is called by:
 14138 ;;		i1_I2C_MasterOperation
 14139 ;; This function uses a non-reentrant model
 14140 ;;
 14141                           
 14142                           
 14143                           ;psect for function i1_I2C_MasterStart
 14144  0E06                     i1_I2C_MasterStart:	
 14145                           
 14146                           ;i2c_master.c: 590: SSP1CON2bits.SEN = 1;
 14147                           
 14148                           ;incstack = 0
 14149 ;; hardware stack exceeded
 14150                           ; Regs used in i1_I2C_MasterStart: []
 14151  0E06  0024               	movlb	4	; select bank4
 14152  0E07  1416               	bsf	22,0	;volatile
 14153  0E08  0008               	return
 14154  0E09                     __end_ofi1_I2C_MasterStart:	
 14155                           
 14156                           	psect	text120
 14157  06AA                     __ptext120:	
 14158 ;; *************** function i1_I2C_Close *****************
 14159 ;; Defined at:
 14160 ;;		line 209 in file "mcc_generated_files/i2c_master.c"
 14161 ;; Parameters:    Size  Location     Type
 14162 ;;		None
 14163 ;; Auto vars:     Size  Location     Type
 14164 ;;  I2C_Close       1    1[COMMON] enum E92
 14165 ;; Return value:  Size  Location     Type
 14166 ;;                  1    wreg      enum E92
 14167 ;; Registers used:
 14168 ;;		wreg, status,2, status,0, pclath, cstack
 14169 ;; Tracked objects:
 14170 ;;		On entry : 0/0
 14171 ;;		On exit  : 0/0
 14172 ;;		Unchanged: 0/0
 14173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14175 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14176 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14177 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14178 ;;Total ram usage:        2 bytes
 14179 ;; Hardware stack levels used:    1
 14180 ;; Hardware stack levels required when called:    1
 14181 ;; This function calls:
 14182 ;;		i1_I2C_MasterClearIrq
 14183 ;;		i1_I2C_MasterClose
 14184 ;;		i1_I2C_MasterDisableIrq
 14185 ;; This function is called by:
 14186 ;;		_I2C_Read1ByteRegister
 14187 ;;		i1_I2C_Write1ByteRegister
 14188 ;; This function uses a non-reentrant model
 14189 ;;
 14190                           
 14191                           
 14192                           ;psect for function i1_I2C_Close
 14193  06AA                     i1_I2C_Close:	
 14194                           
 14195                           ;i2c_master.c: 211: i2c_error_t returnValue = I2C_BUSY;
 14196                           
 14197                           ;incstack = 0
 14198                           ; Regs used in i1_I2C_Close: [wreg+status,2+status,0+pclath+cstack]
 14199  06AA  01F1               	clrf	i1I2C_Close@returnValue
 14200  06AB  0AF1               	incf	i1I2C_Close@returnValue,f
 14201                           
 14202                           ;i2c_master.c: 212: if(!I2C_Status.busy)
 14203  06AC  0021               	movlb	1	; select bank1
 14204  06AD  18BC               	btfsc	(_I2C_Status^(0+128)+28),1
 14205  06AE  2EC1               	goto	i1l3381
 14206                           
 14207                           ;i2c_master.c: 213: {
 14208                           ;i2c_master.c: 214: I2C_Status.inUse = 0;
 14209  06AF  113C               	bcf	(_I2C_Status^(0+128)+28),2
 14210                           
 14211                           ;i2c_master.c: 215: I2C_Status.address = 0xff;
 14212  06B0  30FF               	movlw	255
 14213  06B1  00F0               	movwf	??i1_I2C_Close
 14214  06B2  0870               	movf	??i1_I2C_Close,w
 14215  06B3  00B6               	movwf	(_I2C_Status^(0+128)+22)
 14216                           
 14217                           ;i2c_master.c: 216: I2C_MasterClearIrq();
 14218  06B4  318D  25FD  3186   	fcall	i1_I2C_MasterClearIrq
 14219                           
 14220                           ;i2c_master.c: 217: I2C_MasterDisableIrq();
 14221  06B7  318E  2603  3186   	fcall	i1_I2C_MasterDisableIrq
 14222                           
 14223                           ;i2c_master.c: 218: I2C_MasterClose();
 14224  06BA  318E  2600         	fcall	i1_I2C_MasterClose
 14225                           
 14226                           ;i2c_master.c: 219: returnValue = I2C_Status.error;
 14227  06BC  0021               	movlb	1	; select bank1
 14228  06BD  083B               	movf	(_I2C_Status^(0+128)+27),w
 14229  06BE  00F0               	movwf	??i1_I2C_Close
 14230  06BF  0870               	movf	??i1_I2C_Close,w
 14231  06C0  00F1               	movwf	i1I2C_Close@returnValue
 14232  06C1                     i1l3381:	
 14233                           
 14234                           ;i2c_master.c: 220: }
 14235                           ;i2c_master.c: 221: return returnValue;
 14236  06C1  0871               	movf	i1I2C_Close@returnValue,w
 14237  06C2  0008               	return
 14238  06C3                     __end_ofi1_I2C_Close:	
 14239                           
 14240                           	psect	text121
 14241  0E03                     __ptext121:	
 14242 ;; *************** function i1_I2C_MasterDisableIrq *****************
 14243 ;; Defined at:
 14244 ;;		line 635 in file "mcc_generated_files/i2c_master.c"
 14245 ;; Parameters:    Size  Location     Type
 14246 ;;		None
 14247 ;; Auto vars:     Size  Location     Type
 14248 ;;		None
 14249 ;; Return value:  Size  Location     Type
 14250 ;;                  1    wreg      void 
 14251 ;; Registers used:
 14252 ;;		None
 14253 ;; Tracked objects:
 14254 ;;		On entry : 0/0
 14255 ;;		On exit  : 0/0
 14256 ;;		Unchanged: 0/0
 14257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14262 ;;Total ram usage:        0 bytes
 14263 ;; Hardware stack levels used:    1
 14264 ;; This function calls:
 14265 ;;		Nothing
 14266 ;; This function is called by:
 14267 ;;		i1_I2C_Close
 14268 ;; This function uses a non-reentrant model
 14269 ;;
 14270                           
 14271                           
 14272                           ;psect for function i1_I2C_MasterDisableIrq
 14273  0E03                     i1_I2C_MasterDisableIrq:	
 14274                           
 14275                           ;i2c_master.c: 637: PIE1bits.SSP1IE = 0;
 14276                           
 14277                           ;incstack = 0
 14278                           ; Regs used in i1_I2C_MasterDisableIrq: []
 14279  0E03  0021               	movlb	1	; select bank1
 14280  0E04  1190               	bcf	16,3	;volatile
 14281  0E05  0008               	return
 14282  0E06                     __end_ofi1_I2C_MasterDisableIrq:	
 14283                           
 14284                           	psect	text122
 14285  0E00                     __ptext122:	
 14286 ;; *************** function i1_I2C_MasterClose *****************
 14287 ;; Defined at:
 14288 ;;		line 557 in file "mcc_generated_files/i2c_master.c"
 14289 ;; Parameters:    Size  Location     Type
 14290 ;;		None
 14291 ;; Auto vars:     Size  Location     Type
 14292 ;;		None
 14293 ;; Return value:  Size  Location     Type
 14294 ;;                  1    wreg      void 
 14295 ;; Registers used:
 14296 ;;		None
 14297 ;; Tracked objects:
 14298 ;;		On entry : 0/0
 14299 ;;		On exit  : 0/0
 14300 ;;		Unchanged: 0/0
 14301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14305 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14306 ;;Total ram usage:        0 bytes
 14307 ;; Hardware stack levels used:    1
 14308 ;; This function calls:
 14309 ;;		Nothing
 14310 ;; This function is called by:
 14311 ;;		i1_I2C_Close
 14312 ;; This function uses a non-reentrant model
 14313 ;;
 14314                           
 14315                           
 14316                           ;psect for function i1_I2C_MasterClose
 14317  0E00                     i1_I2C_MasterClose:	
 14318                           
 14319                           ;i2c_master.c: 560: SSP1CON1bits.SSPEN = 0;
 14320                           
 14321                           ;incstack = 0
 14322                           ; Regs used in i1_I2C_MasterClose: []
 14323  0E00  0024               	movlb	4	; select bank4
 14324  0E01  1295               	bcf	21,5	;volatile
 14325  0E02  0008               	return
 14326  0E03                     __end_ofi1_I2C_MasterClose:	
 14327                           
 14328                           	psect	text123
 14329  0DFD                     __ptext123:	
 14330 ;; *************** function i1_I2C_MasterClearIrq *****************
 14331 ;; Defined at:
 14332 ;;		line 640 in file "mcc_generated_files/i2c_master.c"
 14333 ;; Parameters:    Size  Location     Type
 14334 ;;		None
 14335 ;; Auto vars:     Size  Location     Type
 14336 ;;		None
 14337 ;; Return value:  Size  Location     Type
 14338 ;;                  1    wreg      void 
 14339 ;; Registers used:
 14340 ;;		None
 14341 ;; Tracked objects:
 14342 ;;		On entry : 0/0
 14343 ;;		On exit  : 0/0
 14344 ;;		Unchanged: 0/0
 14345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14350 ;;Total ram usage:        0 bytes
 14351 ;; Hardware stack levels used:    1
 14352 ;; This function calls:
 14353 ;;		Nothing
 14354 ;; This function is called by:
 14355 ;;		i1_I2C_Open
 14356 ;;		i1_I2C_Close
 14357 ;;		i1_I2C_MasterFsm
 14358 ;; This function uses a non-reentrant model
 14359 ;;
 14360                           
 14361                           
 14362                           ;psect for function i1_I2C_MasterClearIrq
 14363  0DFD                     i1_I2C_MasterClearIrq:	
 14364                           
 14365                           ;i2c_master.c: 642: PIR1bits.SSP1IF = 0;
 14366                           
 14367                           ;incstack = 0
 14368                           ; Regs used in i1_I2C_MasterClearIrq: []
 14369  0DFD  0020               	movlb	0	; select bank0
 14370  0DFE  1190               	bcf	16,3	;volatile
 14371  0DFF  0008               	return
 14372  0E00                     __end_ofi1_I2C_MasterClearIrq:	
 14373                           
 14374                           	psect	text124
 14375  03E3                     __ptext124:	
 14376 ;; *************** function _EUSART_Receive_ISR *****************
 14377 ;; Defined at:
 14378 ;;		line 173 in file "mcc_generated_files/eusart.c"
 14379 ;; Parameters:    Size  Location     Type
 14380 ;;		None
 14381 ;; Auto vars:     Size  Location     Type
 14382 ;;		None
 14383 ;; Return value:  Size  Location     Type
 14384 ;;                  1    wreg      void 
 14385 ;; Registers used:
 14386 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14387 ;; Tracked objects:
 14388 ;;		On entry : 0/0
 14389 ;;		On exit  : 0/0
 14390 ;;		Unchanged: 0/0
 14391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14396 ;;Total ram usage:        0 bytes
 14397 ;; Hardware stack levels used:    1
 14398 ;; Hardware stack levels required when called:    2
 14399 ;; This function calls:
 14400 ;;		Absolute function
 14401 ;;		_EUSART_DefaultErrorHandler
 14402 ;;		_EUSART_DefaultFramingErrorHandler
 14403 ;;		_EUSART_DefaultOverrunErrorHandler
 14404 ;;		_EUSART_RxDataHandler
 14405 ;; This function is called by:
 14406 ;;		_EUSART_Initialize
 14407 ;;		_INTERRUPT_InterruptManager
 14408 ;; This function uses a non-reentrant model
 14409 ;;
 14410                           
 14411                           
 14412                           ;psect for function _EUSART_Receive_ISR
 14413  03E3                     _EUSART_Receive_ISR:	
 14414                           
 14415                           ;eusart.c: 176: eusartRxStatusBuffer[eusartRxHead].status = 0;
 14416                           
 14417                           ;incstack = 0
 14418                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14419  03E3  0020               	movlb	0	; select bank0
 14420  03E4  083C               	movf	_eusartRxHead,w	;volatile
 14421  03E5  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14422  03E6  0086               	movwf	6
 14423  03E7  0187               	clrf	7
 14424  03E8  0181               	clrf	1
 14425                           
 14426                           ;eusart.c: 178: if(RC1STAbits.FERR){
 14427  03E9  0023               	movlb	3	; select bank3
 14428  03EA  1D1D               	btfss	29,2	;volatile
 14429  03EB  2BF7               	goto	i1l6327
 14430                           
 14431                           ;eusart.c: 179: eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 14432  03EC  0020               	movlb	0	; select bank0
 14433  03ED  083C               	movf	_eusartRxHead,w	;volatile
 14434  03EE  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14435  03EF  0086               	movwf	6
 14436  03F0  0187               	clrf	7
 14437  03F1  1481               	bsf	1,1
 14438                           
 14439                           ;eusart.c: 180: EUSART_FramingErrorHandler();
 14440  03F2  085C               	movf	_EUSART_FramingErrorHandler+1,w
 14441  03F3  008A               	movwf	10
 14442  03F4  085B               	movf	_EUSART_FramingErrorHandler,w
 14443  03F5  000A               	callw
 14444  03F6  3183               	pagesel	$
 14445  03F7                     i1l6327:	
 14446                           
 14447                           ;eusart.c: 181: }
 14448                           ;eusart.c: 183: if(RC1STAbits.OERR){
 14449  03F7  0023               	movlb	3	; select bank3
 14450  03F8  1C9D               	btfss	29,1	;volatile
 14451  03F9  2C05               	goto	i1l6333
 14452                           
 14453                           ;eusart.c: 184: eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 14454  03FA  0020               	movlb	0	; select bank0
 14455  03FB  083C               	movf	_eusartRxHead,w	;volatile
 14456  03FC  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14457  03FD  0086               	movwf	6
 14458  03FE  0187               	clrf	7
 14459  03FF  1501               	bsf	1,2
 14460                           
 14461                           ;eusart.c: 185: EUSART_OverrunErrorHandler();
 14462  0400  085A               	movf	_EUSART_OverrunErrorHandler+1,w
 14463  0401  008A               	movwf	10
 14464  0402  0859               	movf	_EUSART_OverrunErrorHandler,w
 14465  0403  000A               	callw
 14466  0404  3183               	pagesel	$
 14467  0405                     i1l6333:	
 14468                           
 14469                           ;eusart.c: 186: }
 14470                           ;eusart.c: 188: if(eusartRxStatusBuffer[eusartRxHead].status){
 14471  0405  0020               	movlb	0	; select bank0
 14472  0406  083C               	movf	_eusartRxHead,w	;volatile
 14473  0407  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14474  0408  0086               	movwf	6
 14475  0409  0187               	clrf	7
 14476  040A  0801               	movf	1,w
 14477  040B  1903               	btfsc	3,2
 14478  040C  2C14               	goto	i1l6337
 14479                           
 14480                           ;eusart.c: 189: EUSART_ErrorHandler();
 14481  040D  0021               	movlb	1	; select bank1
 14482  040E  084B               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
 14483  040F  008A               	movwf	10
 14484  0410  084A               	movf	_EUSART_ErrorHandler^(0+128),w
 14485  0411  000A               	callw
 14486  0412  3183               	pagesel	$
 14487                           
 14488                           ;eusart.c: 190: } else {
 14489  0413  0008               	return
 14490  0414                     i1l6337:	
 14491                           
 14492                           ;eusart.c: 191: EUSART_RxDataHandler();
 14493  0414  3186  26DA         	fcall	_EUSART_RxDataHandler
 14494  0416  0008               	return
 14495  0417                     __end_of_EUSART_Receive_ISR:	
 14496                           
 14497                           	psect	text125
 14498  0059                     __ptext125:	
 14499 ;; *************** function _MyUART_ISR *****************
 14500 ;; Defined at:
 14501 ;;		line 106 in file "main.c"
 14502 ;; Parameters:    Size  Location     Type
 14503 ;;		None
 14504 ;; Auto vars:     Size  Location     Type
 14505 ;;  c               1    5[COMMON] unsigned char 
 14506 ;; Return value:  Size  Location     Type
 14507 ;;                  1    wreg      void 
 14508 ;; Registers used:
 14509 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14510 ;; Tracked objects:
 14511 ;;		On entry : 0/0
 14512 ;;		On exit  : 0/0
 14513 ;;		Unchanged: 0/0
 14514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14516 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14517 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14518 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14519 ;;Total ram usage:        5 bytes
 14520 ;; Hardware stack levels used:    1
 14521 ;; Hardware stack levels required when called:    1
 14522 ;; This function calls:
 14523 ;;		_EUSART_Write
 14524 ;; This function is called by:
 14525 ;;		_main
 14526 ;;		_INTERRUPT_InterruptManager
 14527 ;; This function uses a non-reentrant model
 14528 ;;
 14529                           
 14530                           
 14531                           ;psect for function _MyUART_ISR
 14532  0059                     _MyUART_ISR:	
 14533                           
 14534                           ;main.c: 107: unsigned char c = RC1REG;
 14535                           
 14536                           ;incstack = 0
 14537                           ; Regs used in _MyUART_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14538  0059  0023               	movlb	3	; select bank3
 14539  005A  0819               	movf	25,w	;volatile
 14540  005B  00F1               	movwf	??_MyUART_ISR
 14541  005C  0871               	movf	??_MyUART_ISR,w
 14542  005D  00F5               	movwf	MyUART_ISR@c
 14543                           
 14544                           ;main.c: 108: if(c) {
 14545  005E  0875               	movf	MyUART_ISR@c,w
 14546  005F  1903               	btfsc	3,2
 14547  0060  0008               	return
 14548  0061  28FE               	goto	i1l3845
 14549  0062                     i1l3795:	
 14550                           ;main.c: 110: case S_Idle:
 14551                           
 14552                           ;main.c: 109: switch(PosUart) {
 14553                           
 14554                           
 14555                           ;main.c: 111: if(c == 'V' || c == 'A' || c == 'P' || c == 'L') {
 14556  0062  3056               	movlw	86
 14557  0063  0675               	xorwf	MyUART_ISR@c,w
 14558  0064  1903               	btfsc	3,2
 14559  0065  2872               	goto	i1l3803
 14560  0066  3041               	movlw	65
 14561  0067  0675               	xorwf	MyUART_ISR@c,w
 14562  0068  1903               	btfsc	3,2
 14563  0069  2872               	goto	i1l3803
 14564  006A  3050               	movlw	80
 14565  006B  0675               	xorwf	MyUART_ISR@c,w
 14566  006C  1903               	btfsc	3,2
 14567  006D  2872               	goto	i1l3803
 14568  006E  304C               	movlw	76
 14569  006F  0675               	xorwf	MyUART_ISR@c,w
 14570  0070  1D03               	btfss	3,2
 14571  0071  0008               	return
 14572  0072                     i1l3803:	
 14573                           
 14574                           ;main.c: 112: Type = c;
 14575  0072  0875               	movf	MyUART_ISR@c,w
 14576  0073  00F1               	movwf	??_MyUART_ISR
 14577  0074  0871               	movf	??_MyUART_ISR,w
 14578  0075  0020               	movlb	0	; select bank0
 14579  0076  00B6               	movwf	_Type
 14580                           
 14581                           ;main.c: 113: PosUart = S_Data;
 14582  0077  01B1               	clrf	_PosUart
 14583  0078  0AB1               	incf	_PosUart,f
 14584                           
 14585                           ;main.c: 114: }
 14586                           ;main.c: 115: break;
 14587  0079  0008               	return
 14588  007A                     i1l3807:	
 14589                           ;main.c: 116: case S_Data:
 14590                           
 14591                           
 14592                           ;main.c: 117: Data = c;
 14593  007A  0875               	movf	MyUART_ISR@c,w
 14594  007B  00F1               	movwf	??_MyUART_ISR
 14595  007C  0871               	movf	??_MyUART_ISR,w
 14596  007D  00B7               	movwf	_Data
 14597                           
 14598                           ;main.c: 118: PosUart = S_Check;
 14599  007E  3002               	movlw	2
 14600  007F  00F1               	movwf	??_MyUART_ISR
 14601  0080  0871               	movf	??_MyUART_ISR,w
 14602  0081  00B1               	movwf	_PosUart
 14603                           
 14604                           ;main.c: 119: break;
 14605  0082  0008               	return
 14606  0083                     i1l3809:	
 14607                           ;main.c: 120: case S_Check:
 14608                           
 14609                           
 14610                           ;main.c: 121: if((Type+Data)%256 == c) {
 14611  0083  0836               	movf	_Type,w
 14612  0084  0737               	addwf	_Data,w
 14613  0085  00F1               	movwf	??_MyUART_ISR
 14614  0086  01F2               	clrf	??_MyUART_ISR+1
 14615  0087  0DF2               	rlf	??_MyUART_ISR+1,f
 14616  0088  30FF               	movlw	255
 14617  0089  0571               	andwf	??_MyUART_ISR,w
 14618  008A  00F3               	movwf	??_MyUART_ISR+2
 14619  008B  3000               	movlw	0
 14620  008C  0572               	andwf	??_MyUART_ISR+1,w
 14621  008D  00F4               	movwf	??_MyUART_ISR+3
 14622  008E  0875               	movf	MyUART_ISR@c,w
 14623  008F  0673               	xorwf	??_MyUART_ISR+2,w
 14624  0090  0474               	iorwf	??_MyUART_ISR+3,w
 14625  0091  1D03               	skipz
 14626  0092  28EE               	goto	i1l3837
 14627                           
 14628                           ;main.c: 122: Validation = 4;
 14629  0093  3004               	movlw	4
 14630  0094  00F1               	movwf	??_MyUART_ISR
 14631  0095  0871               	movf	??_MyUART_ISR,w
 14632  0096  00E1               	movwf	_Validation
 14633                           
 14634                           ;main.c: 123: if(Type == 'V') {
 14635  0097  3056               	movlw	86
 14636  0098  0636               	xorwf	_Type,w
 14637  0099  1D03               	btfss	3,2
 14638  009A  28A0               	goto	i1l3817
 14639                           
 14640                           ;main.c: 124: Vitesse = Data;
 14641  009B  0837               	movf	_Data,w
 14642  009C  00F1               	movwf	??_MyUART_ISR
 14643  009D  0871               	movf	??_MyUART_ISR,w
 14644  009E  00B3               	movwf	_Vitesse
 14645                           
 14646                           ;main.c: 125: } else if(Type == 'A') {
 14647  009F  28F9               	goto	i1l3839
 14648  00A0                     i1l3817:	
 14649  00A0  3041               	movlw	65
 14650  00A1  0636               	xorwf	_Type,w
 14651  00A2  1D03               	btfss	3,2
 14652  00A3  28A9               	goto	i1l3821
 14653                           
 14654                           ;main.c: 126: Angle = Data;
 14655  00A4  0837               	movf	_Data,w
 14656  00A5  00F1               	movwf	??_MyUART_ISR
 14657  00A6  0871               	movf	??_MyUART_ISR,w
 14658  00A7  00E0               	movwf	_Angle
 14659                           
 14660                           ;main.c: 127: } else if(Type == 'P') {
 14661  00A8  28F9               	goto	i1l3839
 14662  00A9                     i1l3821:	
 14663  00A9  3050               	movlw	80
 14664  00AA  0636               	xorwf	_Type,w
 14665  00AB  1D03               	btfss	3,2
 14666  00AC  28B7               	goto	i1l3825
 14667                           
 14668                           ;main.c: 128: EUSART_Write('P');
 14669  00AD  3050               	movlw	80
 14670  00AE  318E  26EB  3180   	fcall	_EUSART_Write
 14671                           
 14672                           ;main.c: 129: EUSART_Write('+');
 14673  00B1  302B               	movlw	43
 14674  00B2  318E  26EB  3180   	fcall	_EUSART_Write
 14675                           
 14676                           ;main.c: 130: EUSART_Write('{');
 14677  00B5  307B               	movlw	123
 14678  00B6  28F7               	goto	L3
 14679  00B7                     i1l3825:	
 14680                           ;main.c: 131: } else if(Type == 'L') {
 14681                           
 14682  00B7  304C               	movlw	76
 14683  00B8  0020               	movlb	0	; select bank0
 14684  00B9  0636               	xorwf	_Type,w
 14685  00BA  1D03               	btfss	3,2
 14686  00BB  28E4               	goto	i1l3835
 14687                           
 14688                           ;main.c: 132: StateLeds++;
 14689  00BC  3001               	movlw	1
 14690  00BD  00F1               	movwf	??_MyUART_ISR
 14691  00BE  0871               	movf	??_MyUART_ISR,w
 14692  00BF  07B0               	addwf	_StateLeds,f
 14693                           
 14694                           ;main.c: 133: switch(StateLeds) {
 14695  00C0  28D5               	goto	i1l3833
 14696  00C1                     i1l957:	
 14697                           ;main.c: 135: do { LATCbits.LATC6 = 0; } while(0);
 14698                           
 14699                           ;main.c: 134: case S_leds_off:
 14700                           
 14701  00C1  0022               	movlb	2	; select bank2
 14702  00C2  130E               	bcf	14,6	;volatile
 14703  00C3  28C6               	goto	i1l965
 14704  00C4                     i1l963:	
 14705                           ;main.c: 139: do { LATCbits.LATC6 = 1; } while(0);
 14706                           
 14707                           ;main.c: 138: case S_led_r:
 14708                           
 14709                           ;main.c: 137: break;
 14710                           
 14711                           ;main.c: 136: do { LATCbits.LATC7 = 0; } while(0);
 14712                           
 14713  00C4  0022               	movlb	2	; select bank2
 14714  00C5  170E               	bsf	14,6	;volatile
 14715  00C6                     i1l965:	
 14716                           ;main.c: 140: do { LATCbits.LATC7 = 0; } while(0);
 14717                           
 14718  00C6  138E               	bcf	14,7	;volatile
 14719                           
 14720                           ;main.c: 141: break;
 14721  00C7  28F9               	goto	i1l3839
 14722  00C8                     i1l968:	
 14723                           ;main.c: 143: do { LATCbits.LATC6 = 0; } while(0);
 14724                           
 14725                           ;main.c: 142: case S_led_l:
 14726                           
 14727  00C8  0022               	movlb	2	; select bank2
 14728  00C9  130E               	bcf	14,6	;volatile
 14729  00CA  28CD               	goto	i1l975
 14730  00CB                     i1l973:	
 14731                           ;main.c: 147: do { LATCbits.LATC6 = 1; } while(0);
 14732                           
 14733                           ;main.c: 146: case S_leds_on:
 14734                           
 14735                           ;main.c: 145: break;
 14736                           
 14737                           ;main.c: 144: do { LATCbits.LATC7 = 1; } while(0);
 14738                           
 14739  00CB  0022               	movlb	2	; select bank2
 14740  00CC  170E               	bsf	14,6	;volatile
 14741  00CD                     i1l975:	
 14742                           ;main.c: 148: do { LATCbits.LATC7 = 1; } while(0);
 14743                           
 14744  00CD  178E               	bsf	14,7	;volatile
 14745                           
 14746                           ;main.c: 149: break;
 14747  00CE  28F9               	goto	i1l3839
 14748  00CF                     i1l978:	
 14749                           ;main.c: 151: do { LATCbits.LATC6 = 0; } while(0);
 14750                           
 14751                           ;main.c: 150: default:
 14752                           
 14753  00CF  0022               	movlb	2	; select bank2
 14754  00D0  130E               	bcf	14,6	;volatile
 14755                           
 14756                           ;main.c: 152: do { LATCbits.LATC7 = 0; } while(0);
 14757  00D1  138E               	bcf	14,7	;volatile
 14758                           
 14759                           ;main.c: 153: StateLeds = S_leds_off;
 14760  00D2  0020               	movlb	0	; select bank0
 14761  00D3  01B0               	clrf	_StateLeds
 14762                           
 14763                           ;main.c: 155: }
 14764                           
 14765                           ;main.c: 154: break;
 14766  00D4  28F9               	goto	i1l3839
 14767  00D5                     i1l3833:	
 14768  00D5  0830               	movf	_StateLeds,w
 14769                           
 14770                           ; Switch size 1, requested type "space"
 14771                           ; Number of cases is 4, Range of values is 0 to 3
 14772                           ; switch strategies available:
 14773                           ; Name         Instructions Cycles
 14774                           ; simple_byte           13     7 (average)
 14775                           ; direct_byte           14     6 (fixed)
 14776                           ; jumptable            260     6 (fixed)
 14777                           ;	Chosen strategy is simple_byte
 14778  00D6  3A00               	xorlw	0	; case 0
 14779  00D7  1903               	skipnz
 14780  00D8  28C1               	goto	i1l957
 14781  00D9  3A01               	xorlw	1	; case 1
 14782  00DA  1903               	skipnz
 14783  00DB  28C4               	goto	i1l963
 14784  00DC  3A03               	xorlw	3	; case 2
 14785  00DD  1903               	skipnz
 14786  00DE  28C8               	goto	i1l968
 14787  00DF  3A01               	xorlw	1	; case 3
 14788  00E0  1903               	skipnz
 14789  00E1  28CB               	goto	i1l973
 14790  00E2  28CF               	goto	i1l978
 14791                           
 14792                           ;main.c: 156: } else {
 14793  00E3  28F9               	goto	i1l3839
 14794  00E4                     i1l3835:	
 14795                           
 14796                           ;main.c: 157: EUSART_Write('$');
 14797  00E4  3024               	movlw	36
 14798  00E5  318E  26EB  3180   	fcall	_EUSART_Write
 14799                           
 14800                           ;main.c: 158: EUSART_Write('M');
 14801  00E8  304D               	movlw	77
 14802  00E9  318E  26EB  3180   	fcall	_EUSART_Write
 14803                           
 14804                           ;main.c: 159: EUSART_Write('q');
 14805  00EC  3071               	movlw	113
 14806  00ED  28F7               	goto	L3
 14807  00EE                     i1l3837:	
 14808                           ;main.c: 160: }
 14809                           ;main.c: 161: } else {
 14810                           
 14811                           
 14812                           ;main.c: 162: EUSART_Write('$');
 14813  00EE  3024               	movlw	36
 14814  00EF  318E  26EB  3180   	fcall	_EUSART_Write
 14815                           
 14816                           ;main.c: 163: EUSART_Write('C');
 14817  00F2  3043               	movlw	67
 14818  00F3  318E  26EB  3180   	fcall	_EUSART_Write
 14819                           
 14820                           ;main.c: 164: EUSART_Write('g');
 14821  00F6  3067               	movlw	103
 14822  00F7                     L3:	
 14823  00F7  318E  26EB         	fcall	_EUSART_Write
 14824  00F9                     i1l3839:	
 14825                           
 14826                           ;main.c: 165: }
 14827                           ;main.c: 166: PosUart = S_Idle;
 14828  00F9  0020               	movlb	0	; select bank0
 14829  00FA  01B1               	clrf	_PosUart
 14830                           
 14831                           ;main.c: 167: break;
 14832  00FB  0008               	return
 14833  00FC                     i1l3841:	
 14834                           ;main.c: 168: default:
 14835                           
 14836                           
 14837                           ;main.c: 169: PosUart = S_Idle;
 14838  00FC  01B1               	clrf	_PosUart
 14839                           
 14840                           ;main.c: 171: }
 14841                           
 14842                           ;main.c: 170: break;
 14843  00FD  0008               	return
 14844  00FE                     i1l3845:	
 14845  00FE  0020               	movlb	0	; select bank0
 14846  00FF  0831               	movf	_PosUart,w
 14847                           
 14848                           ; Switch size 1, requested type "space"
 14849                           ; Number of cases is 3, Range of values is 0 to 2
 14850                           ; switch strategies available:
 14851                           ; Name         Instructions Cycles
 14852                           ; simple_byte           10     6 (average)
 14853                           ; direct_byte           12     6 (fixed)
 14854                           ; jumptable            260     6 (fixed)
 14855                           ;	Chosen strategy is simple_byte
 14856  0100  3A00               	xorlw	0	; case 0
 14857  0101  1903               	skipnz
 14858  0102  2862               	goto	i1l3795
 14859  0103  3A01               	xorlw	1	; case 1
 14860  0104  1903               	skipnz
 14861  0105  287A               	goto	i1l3807
 14862  0106  3A03               	xorlw	3	; case 2
 14863  0107  1903               	skipnz
 14864  0108  2883               	goto	i1l3809
 14865  0109  28FC               	goto	i1l3841
 14866  010A  0008               	return
 14867  010B                     __end_of_MyUART_ISR:	
 14868                           
 14869                           	psect	text126
 14870  0EEB                     __ptext126:	
 14871 ;; *************** function _EUSART_Write *****************
 14872 ;; Defined at:
 14873 ;;		line 162 in file "mcc_generated_files/eusart.c"
 14874 ;; Parameters:    Size  Location     Type
 14875 ;;  txData          1    wreg     unsigned char 
 14876 ;; Auto vars:     Size  Location     Type
 14877 ;;  txData          1    0[COMMON] unsigned char 
 14878 ;; Return value:  Size  Location     Type
 14879 ;;                  1    wreg      void 
 14880 ;; Registers used:
 14881 ;;		wreg
 14882 ;; Tracked objects:
 14883 ;;		On entry : 0/0
 14884 ;;		On exit  : 0/0
 14885 ;;		Unchanged: 0/0
 14886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14888 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14890 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14891 ;;Total ram usage:        1 bytes
 14892 ;; Hardware stack levels used:    1
 14893 ;; This function calls:
 14894 ;;		Nothing
 14895 ;; This function is called by:
 14896 ;;		_MyTimer2ISR
 14897 ;;		_MyUART_ISR
 14898 ;; This function uses a non-reentrant model
 14899 ;;
 14900                           
 14901                           
 14902                           ;psect for function _EUSART_Write
 14903  0EEB                     _EUSART_Write:	
 14904                           
 14905                           ;incstack = 0
 14906                           ; Regs used in _EUSART_Write: [wreg]
 14907                           ;EUSART_Write@txData stored from wreg
 14908  0EEB  00F0               	movwf	EUSART_Write@txData
 14909  0EEC                     i1l649:	
 14910                           ;eusart.c: 165: {
 14911                           
 14912                           ;eusart.c: 164: while(0 == PIR1bits.TXIF)
 14913                           
 14914  0EEC  0020               	movlb	0	; select bank0
 14915  0EED  1E10               	btfss	16,4	;volatile
 14916  0EEE  2EEC               	goto	i1l649
 14917                           
 14918                           ;eusart.c: 166: }
 14919                           ;eusart.c: 168: TX1REG = txData;
 14920  0EEF  0870               	movf	EUSART_Write@txData,w
 14921  0EF0  0023               	movlb	3	; select bank3
 14922  0EF1  009A               	movwf	26	;volatile
 14923  0EF2  0008               	return
 14924  0EF3                     __end_of_EUSART_Write:	
 14925                           
 14926                           	psect	text127
 14927  0F33                     __ptext127:	
 14928 ;; *************** function _MATHACC_PID_ISR *****************
 14929 ;; Defined at:
 14930 ;;		line 152 in file "mcc_generated_files/mathacc.c"
 14931 ;; Parameters:    Size  Location     Type
 14932 ;;		None
 14933 ;; Auto vars:     Size  Location     Type
 14934 ;;		None
 14935 ;; Return value:  Size  Location     Type
 14936 ;;                  1    wreg      void 
 14937 ;; Registers used:
 14938 ;;		wreg
 14939 ;; Tracked objects:
 14940 ;;		On entry : 0/0
 14941 ;;		On exit  : 0/0
 14942 ;;		Unchanged: 0/0
 14943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14946 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14947 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14948 ;;Total ram usage:        1 bytes
 14949 ;; Hardware stack levels used:    1
 14950 ;; This function calls:
 14951 ;;		Nothing
 14952 ;; This function is called by:
 14953 ;;		_INTERRUPT_InterruptManager
 14954 ;; This function uses a non-reentrant model
 14955 ;;
 14956                           
 14957                           
 14958                           ;psect for function _MATHACC_PID_ISR
 14959  0F33                     _MATHACC_PID_ISR:	
 14960                           
 14961                           ;mathacc.c: 154: PIR5bits.PID1DIF = 0;
 14962                           
 14963                           ;incstack = 0
 14964                           ; Regs used in _MATHACC_PID_ISR: [wreg]
 14965  0F33  0020               	movlb	0	; select bank0
 14966  0F34  1014               	bcf	20,0	;volatile
 14967                           
 14968                           ;mathacc.c: 155: Pos = PID1OUTHL;
 14969  0F35  002B               	movlb	11	; select bank11
 14970  0F36  0818               	movf	24,w	;volatile
 14971  0F37  00F0               	movwf	??_MATHACC_PID_ISR
 14972  0F38  0870               	movf	??_MATHACC_PID_ISR,w
 14973  0F39  0020               	movlb	0	; select bank0
 14974  0F3A  00B8               	movwf	_Pos
 14975  0F3B  0008               	return
 14976  0F3C                     __end_of_MATHACC_PID_ISR:	
 14977                           
 14978                           	psect	text128
 14979  0DFA                     __ptext128:	
 14980 ;; *************** function _MATHACC_Error_ISR *****************
 14981 ;; Defined at:
 14982 ;;		line 145 in file "mcc_generated_files/mathacc.c"
 14983 ;; Parameters:    Size  Location     Type
 14984 ;;		None
 14985 ;; Auto vars:     Size  Location     Type
 14986 ;;		None
 14987 ;; Return value:  Size  Location     Type
 14988 ;;                  1    wreg      void 
 14989 ;; Registers used:
 14990 ;;		None
 14991 ;; Tracked objects:
 14992 ;;		On entry : 0/0
 14993 ;;		On exit  : 0/0
 14994 ;;		Unchanged: 0/0
 14995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15000 ;;Total ram usage:        0 bytes
 15001 ;; Hardware stack levels used:    1
 15002 ;; This function calls:
 15003 ;;		Nothing
 15004 ;; This function is called by:
 15005 ;;		_INTERRUPT_InterruptManager
 15006 ;; This function uses a non-reentrant model
 15007 ;;
 15008                           
 15009                           
 15010                           ;psect for function _MATHACC_Error_ISR
 15011  0DFA                     _MATHACC_Error_ISR:	
 15012                           
 15013                           ;mathacc.c: 147: PIR5bits.PID1EIF = 0;
 15014                           
 15015                           ;incstack = 0
 15016                           ; Regs used in _MATHACC_Error_ISR: []
 15017  0DFA  0020               	movlb	0	; select bank0
 15018  0DFB  1094               	bcf	20,1	;volatile
 15019  0DFC  0008               	return
 15020  0DFD                     __end_of_MATHACC_Error_ISR:	
 15021                           
 15022                           	psect	text129
 15023  0E3C                     __ptext129:	
 15024 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 15025 ;; Defined at:
 15026 ;;		line 209 in file "mcc_generated_files/eusart.c"
 15027 ;; Parameters:    Size  Location     Type
 15028 ;;		None
 15029 ;; Auto vars:     Size  Location     Type
 15030 ;;		None
 15031 ;; Return value:  Size  Location     Type
 15032 ;;                  1    wreg      void 
 15033 ;; Registers used:
 15034 ;;		None
 15035 ;; Tracked objects:
 15036 ;;		On entry : 0/0
 15037 ;;		On exit  : 0/0
 15038 ;;		Unchanged: 0/0
 15039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15043 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15044 ;;Total ram usage:        0 bytes
 15045 ;; Hardware stack levels used:    1
 15046 ;; This function calls:
 15047 ;;		Nothing
 15048 ;; This function is called by:
 15049 ;;		_EUSART_Initialize
 15050 ;;		_EUSART_Receive_ISR
 15051 ;; This function uses a non-reentrant model
 15052 ;;
 15053                           
 15054                           
 15055                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 15056  0E3C                     _EUSART_DefaultOverrunErrorHandler:	
 15057                           
 15058                           ;eusart.c: 212: RC1STAbits.CREN = 0;
 15059                           
 15060                           ;incstack = 0
 15061                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 15062  0E3C  0023               	movlb	3	; select bank3
 15063  0E3D  121D               	bcf	29,4	;volatile
 15064                           
 15065                           ;eusart.c: 213: RC1STAbits.CREN = 1;
 15066  0E3E  161D               	bsf	29,4	;volatile
 15067  0E3F  0008               	return
 15068  0E40                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 15069                           
 15070                           	psect	text130
 15071  0DF3                     __ptext130:	
 15072 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 15073 ;; Defined at:
 15074 ;;		line 207 in file "mcc_generated_files/eusart.c"
 15075 ;; Parameters:    Size  Location     Type
 15076 ;;		None
 15077 ;; Auto vars:     Size  Location     Type
 15078 ;;		None
 15079 ;; Return value:  Size  Location     Type
 15080 ;;                  1    wreg      void 
 15081 ;; Registers used:
 15082 ;;		None
 15083 ;; Tracked objects:
 15084 ;;		On entry : 0/0
 15085 ;;		On exit  : 0/0
 15086 ;;		Unchanged: 0/0
 15087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15092 ;;Total ram usage:        0 bytes
 15093 ;; Hardware stack levels used:    1
 15094 ;; This function calls:
 15095 ;;		Nothing
 15096 ;; This function is called by:
 15097 ;;		_EUSART_Initialize
 15098 ;;		_EUSART_Receive_ISR
 15099 ;; This function uses a non-reentrant model
 15100 ;;
 15101                           
 15102                           
 15103                           ;psect for function _EUSART_DefaultFramingErrorHandler
 15104  0DF3                     _EUSART_DefaultFramingErrorHandler:	
 15105                           
 15106                           ;incstack = 0
 15107                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 15108  0DF3  0008               	return
 15109  0DF4                     __end_of_EUSART_DefaultFramingErrorHandler:	
 15110                           
 15111                           	psect	text131
 15112  0DF7                     __ptext131:	
 15113 ;; *************** function _EUSART_DefaultErrorHandler *****************
 15114 ;; Defined at:
 15115 ;;		line 217 in file "mcc_generated_files/eusart.c"
 15116 ;; Parameters:    Size  Location     Type
 15117 ;;		None
 15118 ;; Auto vars:     Size  Location     Type
 15119 ;;		None
 15120 ;; Return value:  Size  Location     Type
 15121 ;;                  1    wreg      void 
 15122 ;; Registers used:
 15123 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15124 ;; Tracked objects:
 15125 ;;		On entry : 0/0
 15126 ;;		On exit  : 0/0
 15127 ;;		Unchanged: 0/0
 15128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15133 ;;Total ram usage:        0 bytes
 15134 ;; Hardware stack levels used:    1
 15135 ;; Hardware stack levels required when called:    1
 15136 ;; This function calls:
 15137 ;;		_EUSART_RxDataHandler
 15138 ;; This function is called by:
 15139 ;;		_EUSART_Initialize
 15140 ;;		_EUSART_Receive_ISR
 15141 ;; This function uses a non-reentrant model
 15142 ;;
 15143                           
 15144                           
 15145                           ;psect for function _EUSART_DefaultErrorHandler
 15146  0DF7                     _EUSART_DefaultErrorHandler:	
 15147                           
 15148                           ;eusart.c: 218: EUSART_RxDataHandler();
 15149                           
 15150                           ;incstack = 0
 15151                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15152  0DF7  3186  26DA         	fcall	_EUSART_RxDataHandler
 15153  0DF9  0008               	return
 15154  0DFA                     __end_of_EUSART_DefaultErrorHandler:	
 15155                           
 15156                           	psect	text132
 15157  06DA                     __ptext132:	
 15158 ;; *************** function _EUSART_RxDataHandler *****************
 15159 ;; Defined at:
 15160 ;;		line 197 in file "mcc_generated_files/eusart.c"
 15161 ;; Parameters:    Size  Location     Type
 15162 ;;		None
 15163 ;; Auto vars:     Size  Location     Type
 15164 ;;		None
 15165 ;; Return value:  Size  Location     Type
 15166 ;;                  1    wreg      void 
 15167 ;; Registers used:
 15168 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15169 ;; Tracked objects:
 15170 ;;		On entry : 0/0
 15171 ;;		On exit  : 0/0
 15172 ;;		Unchanged: 0/0
 15173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15176 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15177 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15178 ;;Total ram usage:        1 bytes
 15179 ;; Hardware stack levels used:    1
 15180 ;; This function calls:
 15181 ;;		Nothing
 15182 ;; This function is called by:
 15183 ;;		_EUSART_Receive_ISR
 15184 ;;		_EUSART_DefaultErrorHandler
 15185 ;; This function uses a non-reentrant model
 15186 ;;
 15187                           
 15188                           
 15189                           ;psect for function _EUSART_RxDataHandler
 15190  06DA                     _EUSART_RxDataHandler:	
 15191                           
 15192                           ;eusart.c: 199: eusartRxBuffer[eusartRxHead++] = RC1REG;
 15193                           
 15194                           ;incstack = 0
 15195                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 15196  06DA  0023               	movlb	3	; select bank3
 15197  06DB  0819               	movf	25,w	;volatile
 15198  06DC  00F0               	movwf	??_EUSART_RxDataHandler
 15199  06DD  0020               	movlb	0	; select bank0
 15200  06DE  083C               	movf	_eusartRxHead,w
 15201  06DF  3E28               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 15202  06E0  0086               	movwf	6
 15203  06E1  0187               	clrf	7
 15204  06E2  0870               	movf	??_EUSART_RxDataHandler,w
 15205  06E3  0081               	movwf	1
 15206  06E4  3001               	movlw	1
 15207  06E5  00F0               	movwf	??_EUSART_RxDataHandler
 15208  06E6  0870               	movf	??_EUSART_RxDataHandler,w
 15209  06E7  07BC               	addwf	_eusartRxHead,f	;volatile
 15210                           
 15211                           ;eusart.c: 200: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 15212  06E8  3008               	movlw	8
 15213  06E9  023C               	subwf	_eusartRxHead,w	;volatile
 15214  06EA  1803               	btfsc	3,0
 15215                           
 15216                           ;eusart.c: 201: {
 15217                           ;eusart.c: 202: eusartRxHead = 0;
 15218  06EB  01BC               	clrf	_eusartRxHead	;volatile
 15219                           
 15220                           ;eusart.c: 203: }
 15221                           ;eusart.c: 204: eusartRxCount++;
 15222  06EC  3001               	movlw	1
 15223  06ED  00F0               	movwf	??_EUSART_RxDataHandler
 15224  06EE  0870               	movf	??_EUSART_RxDataHandler,w
 15225  06EF  07BA               	addwf	_eusartRxCount,f	;volatile
 15226  06F0  0008               	return
 15227  06F1                     __end_of_EUSART_RxDataHandler:	
 15228  007E                     btemp	set	126	;btemp
 15229  007E                     int$flags	set	126
 15230  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    32
    Data        3
    BSS         58
    Persistent  10
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     26      66
    BANK1            80     13      44
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    I2C_Read1ByteRegister@returnValue.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Read2ByteRegister@returnValue.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Write1ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Write2ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    I2C_DO_TX$2091$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_DO_RX$2097$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_DO_TX_EMPTY$2103$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_DO_RX_EMPTY$2109$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_DO_TX_EMPTY$2108	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_DO_TX_EMPTY$2103	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_DO_RX$2102	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_DO_RX$2097	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_DO_TX$2096	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_DO_TX$2091	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_MasterFsm$2090	const PTR FTN()enum E12103 size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    I2C_CallbackReturnStop@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_CallbackReturnReset@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    Absolute function$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    S513$0$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyTimer2ISR(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyTimer2ISR(), TMR2_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyUART_ISR(), EUSART_Receive_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), Absolute function(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), Absolute function(), 

    I2C_SetCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_SetCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> i1_wr1RegCompleteHandler(), i1_rd1RegCompleteHandler(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_SetAddressNackCallback@ptr	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    I2C_SetAddressNackCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> Absolute function(), 

    I2C_SetDataCompleteCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_SetDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> i1_wr1RegCompleteHandler(), i1_rd1RegCompleteHandler(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_SetBuffer@buffer	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(BANK1[1]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(BANK0[1]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    S513$data_ptr	PTR unsigned char  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(BANK1[1]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(BANK0[1]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_Status.data_ptr	PTR unsigned char  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(BANK1[1]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(BANK0[1]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    S513$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_Status.callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    S513$callbackTable	PTR FTN(PTR void ,)enum E97[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_Status.callbackTable	PTR FTN(PTR void ,)enum E97[6] size(2) Largest target is 1
		 -> i1_I2C_CallbackReturnReset(), i1_I2C_CallbackReturnStop(), i1_wr1RegCompleteHandler(), i1_rd1RegCompleteHandler(), 
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    fsmStateTable	const PTR FTN()enum E12103[16] size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyUART_ISR(), EUSART_Receive_ISR(), Absolute function(), 

    rdBlkRegCompleteHandler@ptr.data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    wr2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    wr1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    rd2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    rd1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    S85$data	PTR unsigned char  size(1) Largest target is 0

    bufferBlock.data	PTR unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    i1_I2C_SetAddressNackCallback->i1_I2C_SetCallback
    i1_I2C_MasterWrite->i1_I2C_MasterOperation
    i1_I2C_MasterFsm->i1_I2C_DO_TX
    i1_I2C_DO_TX_EMPTY->i1_I2C_CallbackReturnReset
    i1_I2C_DO_TX_EMPTY->i1_I2C_CallbackReturnStop
    i1_I2C_DO_TX_EMPTY->i1_rd1RegCompleteHandler
    i1_I2C_DO_TX_EMPTY->i1_rd2RegCompleteHandler
    i1_I2C_DO_TX_EMPTY->i1_rdBlkRegCompleteHandler
    i1_I2C_DO_TX_EMPTY->i1_wr1RegCompleteHandler
    i1_I2C_DO_TX_EMPTY->i1_wr2RegCompleteHandler
    i1_I2C_DO_TX->i1_I2C_CallbackReturnReset
    i1_I2C_DO_TX->i1_I2C_CallbackReturnStop
    i1_I2C_DO_TX->i1_rd1RegCompleteHandler
    i1_I2C_DO_TX->i1_rd2RegCompleteHandler
    i1_I2C_DO_TX->i1_rdBlkRegCompleteHandler
    i1_I2C_DO_TX->i1_wr1RegCompleteHandler
    i1_I2C_DO_TX->i1_wr2RegCompleteHandler
    i1_I2C_DO_RX->i1_I2C_CallbackReturnReset
    i1_I2C_DO_RX->i1_I2C_CallbackReturnStop
    i1_I2C_DO_RX->i1_rd1RegCompleteHandler
    i1_I2C_DO_RX->i1_rd2RegCompleteHandler
    i1_I2C_DO_RX->i1_rdBlkRegCompleteHandler
    i1_I2C_DO_RX->i1_wr1RegCompleteHandler
    i1_I2C_DO_RX->i1_wr2RegCompleteHandler
    i1_I2C_DO_ADDRESS_NACK->i1_I2C_CallbackReturnReset
    i1_I2C_DO_ADDRESS_NACK->i1_I2C_CallbackReturnStop
    i1_I2C_DO_ADDRESS_NACK->i1_rd1RegCompleteHandler
    i1_I2C_DO_ADDRESS_NACK->i1_rd2RegCompleteHandler
    i1_I2C_DO_ADDRESS_NACK->i1_rdBlkRegCompleteHandler
    i1_I2C_DO_ADDRESS_NACK->i1_wr1RegCompleteHandler
    i1_I2C_DO_ADDRESS_NACK->i1_wr2RegCompleteHandler
    i1_wr2RegCompleteHandler->i1_I2C_SetDataCompleteCallback
    i1_wr1RegCompleteHandler->i1_I2C_SetDataCompleteCallback
    i1_rdBlkRegCompleteHandler->i1_I2C_SetDataCompleteCallback
    i1_rd2RegCompleteHandler->i1_I2C_SetDataCompleteCallback
    i1_rd1RegCompleteHandler->i1_I2C_SetDataCompleteCallback
    i1_I2C_SetDataCompleteCallback->i1_I2C_SetCallback
    _MyUART_ISR->_EUSART_Write
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _TMR2_WriteTimer->_TMR2_Counter8BitSet
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _I2C_SetAddressNackCallback->_I2C_SetCallback
    _I2C_MasterWrite->_I2C_MasterOperation
    _I2C_MasterFsm->_I2C_DO_ADDRESS_NACK
    _I2C_MasterFsm->_I2C_DO_RX
    _I2C_MasterFsm->_I2C_DO_TX
    _I2C_MasterFsm->_I2C_DO_TX_EMPTY
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnReset
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnStop
    _I2C_DO_TX_EMPTY->_rd1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rd2RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rdBlkRegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr2RegCompleteHandler
    _I2C_DO_TX->_I2C_CallbackReturnReset
    _I2C_DO_TX->_I2C_CallbackReturnStop
    _I2C_DO_TX->_rd1RegCompleteHandler
    _I2C_DO_TX->_rd2RegCompleteHandler
    _I2C_DO_TX->_rdBlkRegCompleteHandler
    _I2C_DO_TX->_wr1RegCompleteHandler
    _I2C_DO_TX->_wr2RegCompleteHandler
    _I2C_DO_SEND_ADR_WRITE->_I2C_MasterSendTxData
    _I2C_DO_RX->_I2C_CallbackReturnReset
    _I2C_DO_RX->_I2C_CallbackReturnStop
    _I2C_DO_RX->_rd1RegCompleteHandler
    _I2C_DO_RX->_rd2RegCompleteHandler
    _I2C_DO_RX->_rdBlkRegCompleteHandler
    _I2C_DO_RX->_wr1RegCompleteHandler
    _I2C_DO_RX->_wr2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnReset
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnStop
    _I2C_DO_ADDRESS_NACK->_rd1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rd2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rdBlkRegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr2RegCompleteHandler
    _wr2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _wr1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rdBlkRegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _I2C_SetDataCompleteCallback->_I2C_SetCallback

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _TMR2_CallBack->_MyTimer2ISR
    _MyTimer2ISR->_I2C_Read1ByteRegister
    _MyTimer2ISR->i1_I2C_Write1ByteRegister
    i1_I2C_MasterWrite->i1_I2C_MasterOperation
    i1_I2C_Poller->i1_I2C_MasterFsm

Critical Paths under _main in BANK1

    _main->_I2C_Write1ByteRegister
    _I2C_MasterWrite->_I2C_MasterOperation
    _I2C_Poller->_I2C_MasterFsm
    _I2C_MasterFsm->_I2C_DO_TX

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  100571
                                             11 BANK1      2     2      0
       _EUSART_SetRxInterruptHandler
             _I2C_Write1ByteRegister
                  _SYSTEM_Initialize
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
                    _TMR2_WriteTimer
 ---------------------------------------------------------------------------------
 (1) _TMR2_WriteTimer                                      1     1      0      44
                                             15 BANK0      1     1      0
                _TMR2_Counter8BitSet
 ---------------------------------------------------------------------------------
 (2) _TMR2_Counter8BitSet                                  1     1      0      22
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
                         _TMR2_Start
 ---------------------------------------------------------------------------------
 (2) _TMR2_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     642
                  _EUSART_Initialize
                     _I2C_Initialize
                 _MATHACC_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM3_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     174
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR2_SetInterruptHandler                             2     0      2     174
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MATHACC_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     468
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     174
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _I2C_Write1ByteRegister                               4     2      2   99537
                                              7 BANK1      4     2      2
                          _I2C_Close
                    _I2C_MasterWrite
                           _I2C_Open
         _I2C_SetAddressNackCallback
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (2) _I2C_SetAddressNackCallback                           4     1      3    2189
                                             19 BANK0      4     1      3
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (2) _I2C_Open                                             3     3      0      68
                                             14 BANK0      3     3      0
                 _I2C_MasterClearIrq
                     _I2C_MasterOpen
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterOpen                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_MasterWrite                                      0     0      0   91367
                _I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterOperation                                  3     3      0   91367
                                             25 BANK0      1     1      0
                                              5 BANK1      2     2      0
                    _I2C_MasterStart
                         _I2C_Poller
 ---------------------------------------------------------------------------------
 (4) _I2C_Poller                                           0     0      0   91197
                      _I2C_MasterFsm
             _I2C_MasterWaitForEvent
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterWaitForEvent                               0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterFsm                                        3     3      0   91197
                                              2 BANK1      3     3      0
                _I2C_DO_ADDRESS_NACK *
                        _I2C_DO_IDLE *
                        _I2C_DO_RCEN *
                       _I2C_DO_RESET *
                          _I2C_DO_RX *
                      _I2C_DO_RX_ACK *
             _I2C_DO_RX_NACK_RESTART *
                _I2C_DO_RX_NACK_STOP *
               _I2C_DO_SEND_ADR_READ *
              _I2C_DO_SEND_ADR_WRITE *
                _I2C_DO_SEND_RESTART *
           _I2C_DO_SEND_RESTART_READ *
          _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_DO_SEND_STOP *
                          _I2C_DO_TX *
                    _I2C_DO_TX_EMPTY *
                 _I2C_MasterClearIrq
                   _I2C_MasterIsNack
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_TX_EMPTY                                      1     1      0   22751
                                             24 BANK0      1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
                   _I2C_MasterSetIrq
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterSetIrq                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_TX                                            3     3      0   22882
                                             24 BANK0      1     1      0
                                              0 BANK1      2     2      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
           _I2C_DO_SEND_RESTART_READ
          _I2C_DO_SEND_RESTART_WRITE
                   _I2C_DO_SEND_STOP
                   _I2C_MasterIsNack
               _I2C_MasterSendTxData
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterIsNack                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_SEND_RESTART_WRITE                            0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_SEND_RESTART_READ                             0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_SEND_ADR_WRITE                                0     0      0      31
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_SEND_ADR_READ                                 0     0      0      31
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterSendTxData                                 1     1      0      31
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RX_ACK                                        0     0      0       0
                  _I2C_MasterSendAck
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RX                                            1     1      0   22751
                                             24 BANK0      1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
             _I2C_DO_RX_NACK_RESTART
                _I2C_DO_RX_NACK_STOP
                _I2C_MasterGetRxData
                  _I2C_MasterSendAck
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterSendAck                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterGetRxData                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RX_NACK_STOP                                  0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RX_NACK_RESTART                               0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterSendNack                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RESET                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RCEN                                          0     0      0       0
                  _I2C_MasterStartRx
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterStartRx                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_ADDRESS_NACK                                  1     1      0   22751
                                             24 BANK0      1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _wr2RegCompleteHandler                                1     0      1    4479
                                             23 BANK0      1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _wr1RegCompleteHandler                                1     0      1    4479
                                             23 BANK0      1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _rdBlkRegCompleteHandler                              1     0      1    4510
                                             23 BANK0      1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _rd2RegCompleteHandler                                1     0      1    4479
                                             23 BANK0      1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _rd1RegCompleteHandler                                1     0      1    4519
                                             23 BANK0      1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (2) _I2C_SetDataCompleteCallback                          4     1      3    2909
                                             19 BANK0      4     1      3
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (3) _I2C_SetCallback                                      5     2      3    1117
                                             14 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (2) _I2C_SetBuffer                                        4     2      2    1539
                                             14 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_SEND_STOP                                     0     0      0       0
                     _I2C_MasterStop
 ---------------------------------------------------------------------------------
 (8) _I2C_MasterStop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_SEND_RESTART                                  0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (8) _I2C_MasterEnableRestart                              0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_CallbackReturnStop                               1     0      1       0
                                             23 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (7) _I2C_CallbackReturnReset                              1     0      1     285
                                             23 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (20) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (4) _I2C_MasterStart                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Close                                            2     2      0      37
                                             14 BANK0      2     2      0
                 _I2C_MasterClearIrq
                    _I2C_MasterClose
               _I2C_MasterDisableIrq
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterDisableIrq                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterClose                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterClearIrq                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 20
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                          1     1      0   42948
                                             13 BANK0      1     1      0
                   Absolute function *
                 _EUSART_Receive_ISR *
                  _MATHACC_Error_ISR
                    _MATHACC_PID_ISR
                         _MyUART_ISR *
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (11) _TMR2_ISR                                            0     0      0   42749
                      _TMR2_CallBack
 ---------------------------------------------------------------------------------
 (12) _TMR2_CallBack                                       0     0      0   42749
                   Absolute function *
                        _MyTimer2ISR *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (13) _TMR2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _MyTimer2ISR                                         4     4      0   42749
                                              9 BANK0      4     4      0
                       _EUSART_Write
              _I2C_Read1ByteRegister
              _MATHACC_PIDController
                 _PWM3_LoadDutyValue
           i1_I2C_Write1ByteRegister
 ---------------------------------------------------------------------------------
 (14) i1_I2C_Write1ByteRegister                            4     2      2   21142
                                              5 BANK0      4     2      2
                        i1_I2C_Close
                  i1_I2C_MasterWrite
                         i1_I2C_Open
       i1_I2C_SetAddressNackCallback
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) _PWM3_LoadDutyValue                                  4     2      2     196
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (14) _MATHACC_PIDController                               4     0      4     240
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (14) _I2C_Read1ByteRegister                               4     3      1   21149
                                              5 BANK0      4     3      1
                        i1_I2C_Close
                  i1_I2C_MasterWrite
                         i1_I2C_Open
       i1_I2C_SetAddressNackCallback
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (15) i1_I2C_SetAddressNackCallback                        4     1      3     406
                                              5 COMMON     4     1      3
                  i1_I2C_SetCallback
 ---------------------------------------------------------------------------------
 (15) i1_I2C_Open                                          3     3      0      46
                                              0 COMMON     3     3      0
               i1_I2C_MasterClearIrq
                   i1_I2C_MasterOpen
 ---------------------------------------------------------------------------------
 (16) i1_I2C_MasterOpen                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i1_I2C_MasterWrite                                   0     0      0   19120
              i1_I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (16) i1_I2C_MasterOperation                               3     3      0   19120
                                             13 COMMON     1     1      0
                                              3 BANK0      2     2      0
                  i1_I2C_MasterStart
                       i1_I2C_Poller
 ---------------------------------------------------------------------------------
 (17) i1_I2C_Poller                                        0     0      0   18950
                    i1_I2C_MasterFsm
           i1_I2C_MasterWaitForEvent
 ---------------------------------------------------------------------------------
 (18) i1_I2C_MasterWaitForEvent                            0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i1_I2C_MasterFsm                                     3     3      0   18950
                                              0 BANK0      3     3      0
              i1_I2C_DO_ADDRESS_NACK *
                      i1_I2C_DO_IDLE *
                      i1_I2C_DO_RCEN *
                     i1_I2C_DO_RESET *
                        i1_I2C_DO_RX *
                    i1_I2C_DO_RX_ACK *
           i1_I2C_DO_RX_NACK_RESTART *
              i1_I2C_DO_RX_NACK_STOP *
             i1_I2C_DO_SEND_ADR_READ *
            i1_I2C_DO_SEND_ADR_WRITE *
              i1_I2C_DO_SEND_RESTART *
         i1_I2C_DO_SEND_RESTART_READ *
        i1_I2C_DO_SEND_RESTART_WRITE *
                 i1_I2C_DO_SEND_STOP *
                        i1_I2C_DO_TX *
                  i1_I2C_DO_TX_EMPTY *
               i1_I2C_MasterClearIrq
                 i1_I2C_MasterIsNack
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_TX_EMPTY                                   1     1      0    4696
                                             10 COMMON     1     1      0
                   Absolute function *
          i1_I2C_CallbackReturnReset *
           i1_I2C_CallbackReturnStop *
              i1_I2C_DO_SEND_RESTART
                 i1_I2C_DO_SEND_STOP
                 i1_I2C_MasterSetIrq
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (20) i1_I2C_MasterSetIrq                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_TX                                         3     3      0    4818
                                             10 COMMON     3     3      0
                   Absolute function *
          i1_I2C_CallbackReturnReset *
           i1_I2C_CallbackReturnStop *
         i1_I2C_DO_SEND_RESTART_READ
        i1_I2C_DO_SEND_RESTART_WRITE
                 i1_I2C_DO_SEND_STOP
                 i1_I2C_MasterIsNack
             i1_I2C_MasterSendTxData
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (19) i1_I2C_MasterIsNack                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (20) i1_I2C_DO_SEND_RESTART_WRITE                         0     0      0       0
          i1_I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (20) i1_I2C_DO_SEND_RESTART_READ                          0     0      0       0
          i1_I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_SEND_ADR_WRITE                             0     0      0      22
             i1_I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_SEND_ADR_READ                              0     0      0      22
             i1_I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (20) i1_I2C_MasterSendTxData                              1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_RX_ACK                                     0     0      0       0
                i1_I2C_MasterSendAck
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_RX                                         1     1      0    4696
                                             10 COMMON     1     1      0
                   Absolute function *
          i1_I2C_CallbackReturnReset *
           i1_I2C_CallbackReturnStop *
           i1_I2C_DO_RX_NACK_RESTART
              i1_I2C_DO_RX_NACK_STOP
              i1_I2C_MasterGetRxData
                i1_I2C_MasterSendAck
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (20) i1_I2C_MasterSendAck                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (20) i1_I2C_MasterGetRxData                               0     0      0       0
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_RX_NACK_STOP                               0     0      0       0
               i1_I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_RX_NACK_RESTART                            0     0      0       0
               i1_I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (20) i1_I2C_MasterSendNack                                0     0      0       0
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_RESET                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_RCEN                                       0     0      0       0
                i1_I2C_MasterStartRx
 ---------------------------------------------------------------------------------
 (20) i1_I2C_MasterStartRx                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_ADDRESS_NACK                               1     1      0    4696
                                             10 COMMON     1     1      0
                   Absolute function *
          i1_I2C_CallbackReturnReset *
           i1_I2C_CallbackReturnStop *
              i1_I2C_DO_SEND_RESTART
                 i1_I2C_DO_SEND_STOP
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (20) i1_wr2RegCompleteHandler                             1     0      1     914
                                              9 COMMON     1     0      1
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (20) i1_wr1RegCompleteHandler                             1     0      1     914
                                              9 COMMON     1     0      1
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (20) i1_rdBlkRegCompleteHandler                           1     0      1     936
                                              9 COMMON     1     0      1
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (20) i1_rd2RegCompleteHandler                             1     0      1     914
                                              9 COMMON     1     0      1
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (20) i1_rd1RegCompleteHandler                             1     0      1     914
                                              9 COMMON     1     0      1
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (15) i1_I2C_SetDataCompleteCallback                       4     1      3     666
                                              5 COMMON     4     1      3
                  i1_I2C_SetCallback
 ---------------------------------------------------------------------------------
 (16) i1_I2C_SetCallback                                   5     2      3     258
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (15) i1_I2C_SetBuffer                                     4     2      2     226
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (20) i1_I2C_DO_SEND_STOP                                  0     0      0       0
                   i1_I2C_MasterStop
 ---------------------------------------------------------------------------------
 (21) i1_I2C_MasterStop                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (20) i1_I2C_DO_SEND_RESTART                               0     0      0       0
          i1_I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (21) i1_I2C_MasterEnableRestart                           0     0      0       0
 ---------------------------------------------------------------------------------
 (20) i1_I2C_CallbackReturnStop                            1     0      1       0
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (20) i1_I2C_CallbackReturnReset                           1     0      1     104
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (17) i1_I2C_MasterStart                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i1_I2C_Close                                         2     2      0      24
                                              0 COMMON     2     2      0
               i1_I2C_MasterClearIrq
                  i1_I2C_MasterClose
             i1_I2C_MasterDisableIrq
 ---------------------------------------------------------------------------------
 (16) i1_I2C_MasterDisableIrq                              0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i1_I2C_MasterClose                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i1_I2C_MasterClearIrq                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _MyUART_ISR                                          5     5      0     199
                                              1 COMMON     5     5      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (14) _EUSART_Write                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _MATHACC_PID_ISR                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _MATHACC_Error_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (12) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (12) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (20) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 21
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_SetRxInterruptHandler
   _I2C_Write1ByteRegister
     _I2C_Close
       _I2C_MasterClearIrq
       _I2C_MasterClose
       _I2C_MasterDisableIrq
     _I2C_MasterWrite
       _I2C_MasterOperation
         _I2C_MasterStart
         _I2C_Poller
           _I2C_MasterFsm
             _I2C_DO_ADDRESS_NACK *
               Absolute function(Fake) *
               _I2C_CallbackReturnReset *
               _I2C_CallbackReturnStop *
               _I2C_DO_SEND_RESTART *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_STOP *
                 _I2C_MasterStop
               _rd1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rd2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rdBlkRegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
             _I2C_DO_IDLE *
             _I2C_DO_RCEN *
               _I2C_MasterStartRx
             _I2C_DO_RESET *
             _I2C_DO_RX *
               Absolute function(Fake) *
               _I2C_CallbackReturnReset *
               _I2C_CallbackReturnStop *
               _I2C_DO_RX_NACK_RESTART *
                 _I2C_MasterSendNack
               _I2C_DO_RX_NACK_STOP *
                 _I2C_MasterSendNack
               _I2C_MasterGetRxData *
               _I2C_MasterSendAck *
               _rd1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rd2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rdBlkRegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
             _I2C_DO_RX_ACK *
               _I2C_MasterSendAck
             _I2C_DO_RX_NACK_RESTART *
               _I2C_MasterSendNack
             _I2C_DO_RX_NACK_STOP *
               _I2C_MasterSendNack
             _I2C_DO_SEND_ADR_READ *
               _I2C_MasterSendTxData
             _I2C_DO_SEND_ADR_WRITE *
               _I2C_MasterSendTxData
             _I2C_DO_SEND_RESTART *
               _I2C_MasterEnableRestart
             _I2C_DO_SEND_RESTART_READ *
               _I2C_MasterEnableRestart
             _I2C_DO_SEND_RESTART_WRITE *
               _I2C_MasterEnableRestart
             _I2C_DO_SEND_STOP *
               _I2C_MasterStop
             _I2C_DO_TX *
               Absolute function(Fake) *
               _I2C_CallbackReturnReset *
               _I2C_CallbackReturnStop *
               _I2C_DO_SEND_RESTART_READ *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_RESTART_WRITE *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_STOP *
                 _I2C_MasterStop
               _I2C_MasterIsNack *
               _I2C_MasterSendTxData *
               _rd1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rd2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rdBlkRegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
             _I2C_DO_TX_EMPTY *
               Absolute function(Fake) *
               _I2C_CallbackReturnReset *
               _I2C_CallbackReturnStop *
               _I2C_DO_SEND_RESTART *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_STOP *
                 _I2C_MasterStop
               _I2C_MasterSetIrq *
               _rd1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rd2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rdBlkRegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
             _I2C_MasterClearIrq *
             _I2C_MasterIsNack *
           _I2C_MasterWaitForEvent
     _I2C_Open
       _I2C_MasterClearIrq
       _I2C_MasterOpen
     _I2C_SetAddressNackCallback
       _I2C_SetCallback
     _I2C_SetBuffer
     _I2C_SetDataCompleteCallback
       _I2C_SetCallback
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
     _I2C_Initialize
     _MATHACC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM3_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
   _TMR2_SetInterruptHandler
   _TMR2_StartTimer
     _TMR2_Start
   _TMR2_WriteTimer
     _TMR2_Counter8BitSet

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _MATHACC_Error_ISR *
   _MATHACC_PID_ISR *
   _MyUART_ISR *
     _EUSART_Write
   _TMR2_ISR *
     _TMR2_CallBack
       Absolute function(Fake) *
       _MyTimer2ISR *
         _EUSART_Write
         _I2C_Read1ByteRegister
           i1_I2C_Close
             i1_I2C_MasterClearIrq
             i1_I2C_MasterClose
             i1_I2C_MasterDisableIrq
           i1_I2C_MasterWrite
             i1_I2C_MasterOperation
               i1_I2C_MasterStart
               i1_I2C_Poller
                 i1_I2C_MasterFsm
                   i1_I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     i1_I2C_CallbackReturnReset *
                     i1_I2C_CallbackReturnStop *
                     i1_I2C_DO_SEND_RESTART *
                       i1_I2C_MasterEnableRestart
                     i1_I2C_DO_SEND_STOP *
                       i1_I2C_MasterStop
                     i1_rd1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rd2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rdBlkRegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                   i1_I2C_DO_IDLE *
                   i1_I2C_DO_RCEN *
                     i1_I2C_MasterStartRx
                   i1_I2C_DO_RESET *
                   i1_I2C_DO_RX *
                     Absolute function(Fake) *
                     i1_I2C_CallbackReturnReset *
                     i1_I2C_CallbackReturnStop *
                     i1_I2C_DO_RX_NACK_RESTART *
                       i1_I2C_MasterSendNack
                     i1_I2C_DO_RX_NACK_STOP *
                       i1_I2C_MasterSendNack
                     i1_I2C_MasterGetRxData *
                     i1_I2C_MasterSendAck *
                     i1_rd1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rd2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rdBlkRegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                   i1_I2C_DO_RX_ACK *
                     i1_I2C_MasterSendAck
                   i1_I2C_DO_RX_NACK_RESTART *
                     i1_I2C_MasterSendNack
                   i1_I2C_DO_RX_NACK_STOP *
                     i1_I2C_MasterSendNack
                   i1_I2C_DO_SEND_ADR_READ *
                     i1_I2C_MasterSendTxData
                   i1_I2C_DO_SEND_ADR_WRITE *
                     i1_I2C_MasterSendTxData
                   i1_I2C_DO_SEND_RESTART *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_RESTART_READ *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_RESTART_WRITE *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_STOP *
                     i1_I2C_MasterStop
                   i1_I2C_DO_TX *
                     Absolute function(Fake) *
                     i1_I2C_CallbackReturnReset *
                     i1_I2C_CallbackReturnStop *
                     i1_I2C_DO_SEND_RESTART_READ *
                       i1_I2C_MasterEnableRestart
                     i1_I2C_DO_SEND_RESTART_WRITE *
                       i1_I2C_MasterEnableRestart
                     i1_I2C_DO_SEND_STOP *
                       i1_I2C_MasterStop
                     i1_I2C_MasterIsNack *
                     i1_I2C_MasterSendTxData *
                     i1_rd1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rd2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rdBlkRegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                   i1_I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     i1_I2C_CallbackReturnReset *
                     i1_I2C_CallbackReturnStop *
                     i1_I2C_DO_SEND_RESTART *
                       i1_I2C_MasterEnableRestart
                     i1_I2C_DO_SEND_STOP *
                       i1_I2C_MasterStop
                     i1_I2C_MasterSetIrq *
                     i1_rd1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rd2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rdBlkRegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                   i1_I2C_MasterClearIrq *
                   i1_I2C_MasterIsNack *
                 i1_I2C_MasterWaitForEvent
           i1_I2C_Open
             i1_I2C_MasterClearIrq
             i1_I2C_MasterOpen
           i1_I2C_SetAddressNackCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
           i1_I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
         _MATHACC_PIDController
         _PWM3_LoadDutyValue
         i1_I2C_Write1ByteRegister
           i1_I2C_Close
             i1_I2C_MasterClearIrq
             i1_I2C_MasterClose
             i1_I2C_MasterDisableIrq
           i1_I2C_MasterWrite
             i1_I2C_MasterOperation
               i1_I2C_MasterStart
               i1_I2C_Poller
                 i1_I2C_MasterFsm
                   i1_I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     i1_I2C_CallbackReturnReset *
                     i1_I2C_CallbackReturnStop *
                     i1_I2C_DO_SEND_RESTART *
                       i1_I2C_MasterEnableRestart
                     i1_I2C_DO_SEND_STOP *
                       i1_I2C_MasterStop
                     i1_rd1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rd2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rdBlkRegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                   i1_I2C_DO_IDLE *
                   i1_I2C_DO_RCEN *
                     i1_I2C_MasterStartRx
                   i1_I2C_DO_RESET *
                   i1_I2C_DO_RX *
                     Absolute function(Fake) *
                     i1_I2C_CallbackReturnReset *
                     i1_I2C_CallbackReturnStop *
                     i1_I2C_DO_RX_NACK_RESTART *
                       i1_I2C_MasterSendNack
                     i1_I2C_DO_RX_NACK_STOP *
                       i1_I2C_MasterSendNack
                     i1_I2C_MasterGetRxData *
                     i1_I2C_MasterSendAck *
                     i1_rd1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rd2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rdBlkRegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                   i1_I2C_DO_RX_ACK *
                     i1_I2C_MasterSendAck
                   i1_I2C_DO_RX_NACK_RESTART *
                     i1_I2C_MasterSendNack
                   i1_I2C_DO_RX_NACK_STOP *
                     i1_I2C_MasterSendNack
                   i1_I2C_DO_SEND_ADR_READ *
                     i1_I2C_MasterSendTxData
                   i1_I2C_DO_SEND_ADR_WRITE *
                     i1_I2C_MasterSendTxData
                   i1_I2C_DO_SEND_RESTART *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_RESTART_READ *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_RESTART_WRITE *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_STOP *
                     i1_I2C_MasterStop
                   i1_I2C_DO_TX *
                     Absolute function(Fake) *
                     i1_I2C_CallbackReturnReset *
                     i1_I2C_CallbackReturnStop *
                     i1_I2C_DO_SEND_RESTART_READ *
                       i1_I2C_MasterEnableRestart
                     i1_I2C_DO_SEND_RESTART_WRITE *
                       i1_I2C_MasterEnableRestart
                     i1_I2C_DO_SEND_STOP *
                       i1_I2C_MasterStop
                     i1_I2C_MasterIsNack *
                     i1_I2C_MasterSendTxData *
                     i1_rd1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rd2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rdBlkRegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                   i1_I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     i1_I2C_CallbackReturnReset *
                     i1_I2C_CallbackReturnStop *
                     i1_I2C_DO_SEND_RESTART *
                       i1_I2C_MasterEnableRestart
                     i1_I2C_DO_SEND_STOP *
                       i1_I2C_MasterStop
                     i1_I2C_MasterSetIrq *
                     i1_rd1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rd2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rdBlkRegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                   i1_I2C_MasterClearIrq *
                   i1_I2C_MasterIsNack *
                 i1_I2C_MasterWaitForEvent
           i1_I2C_Open
             i1_I2C_MasterClearIrq
             i1_I2C_MasterOpen
           i1_I2C_SetAddressNackCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
           i1_I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
       _TMR2_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1A      42       5       82.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      D      2C       7       55.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      7C      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      7C      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Apr 06 13:28:08 2020

                ?_EUSART_SetRxInterruptHandler 004B                         ??_I2C_DO_SEND_ADR_READ 004B  
                                  MyUART_ISR@c 0075                    __size_of_I2C_MasterSendNack 0004  
                           __size_of_I2C_Close 001E               __end_of_TMR2_SetInterruptHandler 0ED1  
                                            _G 0034                        ??_I2C_DO_SEND_ADR_WRITE 004C  
                                  __CFG_CP$OFF 0000                            __size_of_I2C_Poller 000A  
                        ??_I2C_DO_SEND_RESTART 004B                                    ?i1_I2C_Open 0070  
                                  __CFG_LVP$ON 0000                   __size_of_I2C_MasterOperation 001C  
                __size_of_I2C_MasterSendTxData 0006                                            l401 024C  
                                          l335 0334                                            l417 02D7  
                                          l558 0E74                                            _PR2 001B  
                                          _Pos 0038                         ??_EUSART_RxDataHandler 0070  
                       _I2C_MasterWaitForEvent 0E74                 ?_EUSART_SetFramingErrorHandler 004B  
                     ?i1_rd2RegCompleteHandler 0079                                _TMR2_Initialize 0774  
                                 __CFG_BORV$LO 0000                                            wreg 0009  
                                 ?i1_I2C_DO_RX 0070                                   ?i1_I2C_DO_TX 0070  
                                 __CFG_IESO$ON 0000                          _I2C_DO_RCEN$intlevel0 0F6F  
                 ??_I2C_SetAddressNackCallback 0053                       ?i1_wr2RegCompleteHandler 0079  
                                 ?i1_I2C_Close 0070                         _I2C_Write1ByteRegister 044A  
                  ??i1_I2C_MasterEnableRestart 0070                       ??_I2C_CallbackReturnStop 0055  
                                 _I2C_DO_RESET 0F45                                   __CFG_ZCD$OFF 0000  
                      ??_rd2RegCompleteHandler 0055                                           l4031 059B  
                                         l4205 0F17                                           l4231 0F0F  
                                         l4223 0F27                                           l4217 0F2F  
                                         l4243 0EAB                                           l4173 0737  
                                         l4149 0721                                           l4157 070B  
                                         l4165 06F5                                           l4181 0675  
                                         l4239 0EA5                                           l6111 04EF  
                                         l6105 04EC                                           l4257 0F40  
                                         l4265 0FD2                                           l4273 0F98  
                                         l6041 0226                                           l4337 0F6F  
                                         l4193 0EFF                                           l6121 0519  
                                         l6113 050D                                           l4371 0F49  
                                         l6045 0229                                           l6037 021F  
                                         l4365 0F1F                                           l6117 0516  
                                         l6213 069C                                           l6301 044C  
                                         l4607 0650                                           l6063 0265  
                                         l6055 022F                                           l4199 0F07  
                                         l6127 051C                                           l6215 06A2  
                                         l6311 0476                                           l6049 022C  
                                         l6081 02D9                        ??i1_I2C_MasterGetRxData 0070  
                                         l6091 02DF                                           l6067 02BA  
                                         l6219 06A7                                           l6093 04E2  
                                         l6085 02DC                                           l6157 056E  
                                         l6095 04E5                                           l6099 04E8  
                                         l6187 0F75                                           l6471 01F3  
                                         l6473 0201                                           l6465 0215  
                                         l6475 020C                                           l6467 01E5  
               __size_ofi1_I2C_DO_SEND_RESTART 0004                                           _LATA 010C  
                                         _LATB 010D                                           _LATC 010E  
                                         _T2PR 001B                                           u4310 01F1  
                                         u4330 020A                  __end_ofi1_I2C_DO_SEND_RESTART 0E54  
                                         u4357 01F9                                           u4367 0210  
                                         _TMR2 001A                                           _WPUA 020C  
                                         _WPUB 020D                                           _WPUC 020E  
                                         _Data 0037                        ??_wr2RegCompleteHandler 0055  
                                 __CFG_WRT$OFF 0000                                  __CFG_FCMEN$ON 0000  
                                         _Type 0036                                           _main 01AB  
                     ?_I2C_CallbackReturnReset 0054                                           fsr0h 0005  
                                         fsr1h 0007                                           indf0 0000  
                                         fsr0l 0004                                           indf1 0001  
                                         fsr1l 0006                               __end_of_I2C_Open 0337  
                                i1_I2C_DO_IDLE 0E81                                           btemp 007E  
                                i1_I2C_DO_RCEN 0E9B                 __end_ofi1_I2C_DO_SEND_ADR_READ 0EFB  
                                __CFG_BOREN$ON 0000                                           start 0038  
                 i1I2C_Write1ByteRegister@data 0043                                  __CFG_MCLRE$ON 0000  
                          _TMR2_Counter8BitSet 0E90               __size_of_rdBlkRegCompleteHandler 001D  
                _I2C_DO_RX_NACK_STOP$intlevel0 0F27                    __size_of_MATHACC_Initialize 0014  
                      ??i1_I2C_DO_ADDRESS_NACK 007A                                  _I2C_DO_TX$864 00BD  
                             ?_I2C_MasterClose 0070                                  ?i1_I2C_Poller 0070  
                                __CFG_PLLEN$ON 0000                                  ?_EUSART_Write 0070  
          __size_of_I2C_SetAddressNackCallback 000D                 __size_of_OSCILLATOR_Initialize 0007  
                             ?_I2C_MasterStart 0070                                  _I2C_DO_RX_ACK 0F1B  
                             ?_I2C_MasterWrite 0070                  __end_of_OSCILLATOR_Initialize 0EEB  
              ??i1_I2C_SetDataCompleteCallback 0078                          i1I2C_Open@returnValue 0072  
                                        ?_main 0070                                  __CFG_WDTE$OFF 0000  
                        _I2C_Read1ByteRegister 047D                                          _T2CON 001C  
                     ??i1_I2C_MasterDisableIrq 0070                                          _T2HLT 001D  
                                        i1l130 002B                                          _T2TMR 001A  
                                        i1l126 0017                                          i1l135 0033  
                                        i1l128 0021                                          i1l401 0297  
                                        _T2RST 001F                    __end_ofi1_I2C_MasterSendAck 0E48  
                                        i1l335 03E1                                          i1l417 038C  
                                        i1l558 0E64                                          i1l649 0EEC  
                                        i1l963 00C4                                          i1l973 00CB  
                                        i1l965 00C6                                          i1l957 00C1  
                                        i1l975 00CD                                          i1l968 00C8  
                                        i1l978 00CF                   __size_of_I2C_DO_RX_NACK_STOP 0008  
                            ??_I2C_DO_TX_EMPTY 0055                                          _TRISA 008C  
                                        _TRISB 008D                                          _TRISC 008E  
                                        _RXPPS 0E24                                          _Angle 0060  
                  __end_ofi1_I2C_MasterStartRx 0E12                           ?_TMR2_Counter8BitSet 0070  
                            __end_of_I2C_DO_RX 02F9                              __end_of_I2C_DO_TX 026B  
                             __end_of_TMR2_ISR 0E90                        ??i1_I2C_MasterOperation 007D  
                                  ?_TMR2_Start 0070                              __end_of_I2C_Close 0653  
                       __size_of_I2C_MasterFsm 0027                 I2C_MasterOperation@returnValue 00C3  
                                   _MyUART_ISR 0059                              ??i1_I2C_MasterFsm 003D  
                      _I2C_MasterEnableRestart 0E24                            _I2C_DO_RX$intlevel0 02BA  
                      __end_of_PWM3_Initialize 0FAA             _I2C_DO_SEND_RESTART_READ$intlevel0 0EFF  
                               i1_I2C_DO_RESET 0E86                                          pclath 000A  
                             ?_I2C_SetCallback 004B                __end_ofi1_I2C_DO_SEND_ADR_WRITE 0EE4  
                 I2C_SetAddressNackCallback@cb 0050                                 ?i1_I2C_DO_IDLE 0070  
                               ?i1_I2C_DO_RCEN 0070                                          status 0003  
                                        wtemp0 007E                              ?_I2C_DO_SEND_STOP 0070  
                   __size_ofi1_I2C_DO_TX_EMPTY 0025                         __size_of_I2C_SetBuffer 0015  
                              _TMR2_StartTimer 0E36                     MATHACC_PIDController@input 0072  
                            ??i1_I2C_SetBuffer 0072                            __size_ofi1_I2C_Open 0037  
                           ??_I2C_DO_SEND_STOP 004B                                  _fsmStateTable 0615  
                              __initialization 003A                                  ??_MyTimer2ISR 0046  
                    i1_I2C_MasterEnableRestart 0E09                                   __end_of_main 021B  
            __size_of_I2C_DO_SEND_RESTART_READ 0008                      ?_I2C_DO_SEND_RESTART_READ 0070  
                               ??i1_I2C_Poller 007D                                 ??_EUSART_Write 0070  
                               ?_I2C_DO_RX_ACK 0070                        __end_of_TMR2_Initialize 0789  
                               __CFG_LPBOR$OFF 0000                    ?_INTERRUPT_InterruptManager 0070  
              __end_ofi1_rd2RegCompleteHandler 07D2                 ??_EUSART_SetRxInterruptHandler 004D  
                     _TMR2_SetInterruptHandler 0ECB                                         ??_main 00C8  
                 __end_ofi1_I2C_MasterClearIrq 0E00                              ?_I2C_MasterIsNack 0070  
              __end_ofi1_wr2RegCompleteHandler 07F2                        ??_MATHACC_PIDController 0074  
                              _TMR2_WriteTimer 0ED1               __end_ofi1_I2C_DO_RX_NACK_RESTART 0E64  
                            ?_I2C_MasterSetIrq 0070                             ??_I2C_MasterIsNack 004B  
                         i1I2C_SetCallback@idx 0074                           i1I2C_SetCallback@ptr 0072  
                     __size_of_MATHACC_PID_ISR 0009                          ??_TMR2_Counter8BitSet 004B  
                           ??_I2C_MasterSetIrq 004B      __end_of_EUSART_DefaultFramingErrorHandler 0DF4  
   __size_of_EUSART_DefaultFramingErrorHandler 0001            ??_EUSART_DefaultFramingErrorHandler 0070  
           ?_EUSART_DefaultFramingErrorHandler 0070              _EUSART_DefaultFramingErrorHandler 0DF3  
                       __end_ofi1_I2C_DO_RESET 0E8B                     _EUSART_OverrunErrorHandler 0059  
                      ??i1_I2C_DO_RX_NACK_STOP 0070                __end_of_I2C_CallbackReturnReset 0EAD  
              __size_of_I2C_CallbackReturnStop 0006                  I2C_SetDataCompleteCallback@cb 0050  
                MATHACC_PIDController@setpoint 0070                                         _ANSELA 018C  
                                       _ANSELB 018D                                         _ANSELC 018E  
                                       _BORCON 0116                                   ??_I2C_Poller 0056  
                                       _RC1REG 0199                                         _RA2PPS 0E92  
                                       _RC1STA 019D                                         _RB4PPS 0E9C  
                                       _RB6PPS 0E9E                                         _RB7PPS 0E9F  
                                       _ODCONA 028C                                         _ODCONB 028D  
                                       _ODCONC 028E                            _I2C_DO_TX$intlevel0 021F  
                                       i1l2801 06C3                                         i1l6001 05B6  
                                       i1l6011 05FC                                         i1l6003 05F2  
                                       i1l3381 06C1                                         i1l2813 0E4C  
                                       i1l2807 0E48                                         i1l2831 0E5C  
                                       i1l6007 05F9                                         i1l2753 05E4  
                                       i1l2825 0E54                                         i1l6017 05FF  
                                       i1l6201 04D7                                         i1l3803 0072  
                                       i1l2843 0DF5                                         i1l2819 0E50  
                                       i1l6027 0545                                         i1l6035 0F57  
                                       i1l3821 00A9                                         i1l2837 0E60  
                                       i1l6141 0669                                         u123_25 0758  
                                       i1l3807 007A                                         i1l2847 0002  
                                       i1l3841 00FC                                         i1l3833 00D5  
                                       i1l3825 00B7                                         i1l3817 00A0  
                                       i1l3809 0083                                         i1l2793 07E2  
                                       i1l2769 07D2                                         i1l2777 07C2  
                                       i1l2785 07B2                                         i1l2873 0E81  
                                       i1l2881 0EF3                                         i1l2953 0E9B  
                                       i1l6145 066E                                         i1l6233 013E  
                                       i1l3835 00E4                                         i1l6139 0664  
                                       i1l6251 0170                                         i1l3837 00EE  
                                       i1l3845 00FE                                         i1l6333 0405  
                                       i1l2981 0E58                                         i1l6165 0480  
                                       i1l6245 0165                                         i1l6261 0190  
                                       i1l3839 00F9                                         i1l6327 03F7  
                                       i1l6175 04A6                                         i1l6191 04B1  
                                       i1l6255 017C                                         i1l6337 0414  
                                       i1l2889 0EDD                                         i1l3795 0062  
                                       i1l2987 0E86                                         i1l6267 01A2  
                                       i1l6259 0186                                         i1l5931 0272  
                                       i1l5935 0275                                         i1l5927 026B  
                                       i1l5953 02B0                                         i1l5945 027B  
                                       i1l5939 0278                                         i1l5971 038E  
                                       i1l5981 0394                                         i1l5957 0372  
                                       i1l5983 05A9                                         i1l5975 0391  
                                       i1l5985 05AC                                         _INLVLA 038C  
                                       _INLVLB 038D                                         i1l5995 05B3  
                                       _INLVLC 038E                                         i1l5989 05AF  
                 __end_ofi1_I2C_MasterSendNack 0E44                    __size_ofi1_I2C_DO_SEND_STOP 0004  
                                       _OSCCON 0099                                         u395_25 0113  
                                       u396_25 0142                        i1_rd1RegCompleteHandler 07D2  
                     ??i1_I2C_MasterSendTxData 0070                                         _SPBRGH 019C  
                                       _SPBRGL 019B                         _I2C_DO_RESET$intlevel0 0F49  
                                       _TX1REG 019A                                         _TX1STA 019E  
                      i1_wr1RegCompleteHandler 07B2                _I2C_DO_SEND_ADR_WRITE$intlevel0 0F98  
                                       _CptBat 0035                    ??i1_rdBlkRegCompleteHandler 007A  
                                   _Validation 0061                                 __CFG_PWRTE$OFF 0000  
                          _I2C_MasterGetRxData 0E2D             __size_ofi1_I2C_CallbackReturnReset 0002  
                   ?i1_I2C_CallbackReturnReset 0079                     _I2C_DO_SEND_STOP$intlevel0 0F17  
                  __size_of_PWM3_LoadDutyValue 0016                                  _I2C_MasterFsm 055D  
                               __CFG_STVREN$ON 0000                            __size_of_TMR2_Start 0003  
                            ?i1_I2C_MasterOpen 0070                              I2C_SetCallback@cb 004B  
                            ?i1_I2C_MasterStop 0070                    __size_ofi1_I2C_MasterIsNack 0006  
                       ?_I2C_Read1ByteRegister 0042                        __size_of_I2C_MasterOpen 000C  
                      __size_of_I2C_MasterStop 0003                        __size_of_I2C_Initialize 000A  
                                _I2C_SetBuffer 0789                            __end_of_MyTimer2ISR 01AB  
                           __end_of_I2C_Poller 0F7F                             ??i1_I2C_MasterOpen 0070  
                  __size_ofi1_I2C_MasterSetIrq 0003                   __end_of_I2C_MasterDisableIrq 0E21  
                              i1_I2C_DO_TX$864 007B                             ??i1_I2C_MasterStop 0070  
              __size_ofi1_I2C_MasterDisableIrq 0003                 _I2C_DO_SEND_ADR_READ$intlevel0 0FD2  
                          _I2C_DO_ADDRESS_NACK 0509                           ?_I2C_MasterGetRxData 0070  
                                    ?_I2C_Open 0070             __end_of_I2C_SetAddressNackCallback 1000  
                   _I2C_SetAddressNackCallback 0FF3                                i1_I2C_DO_RX_ACK 0E58  
        __end_ofi1_I2C_SetDataCompleteCallback 0FB6         __size_ofi1_I2C_SetDataCompleteCallback 000C  
                i1_I2C_SetDataCompleteCallback 0FAA                      ??_I2C_MasterEnableRestart 004B  
                   ??i1_I2C_CallbackReturnStop 007A                                ?i1_I2C_DO_RESET 0070  
                      __end_of_TMR2_StartTimer 0E39       TMR2_SetInterruptHandler@InterruptHandler 004B  
                         __size_ofi1_I2C_DO_RX 003A                           __size_ofi1_I2C_DO_TX 004B  
                                  ?_MyUART_ISR 0070                                ??i1_I2C_DO_IDLE 0070  
                              ??i1_I2C_DO_RCEN 0070                           __size_ofi1_I2C_Close 0019  
                             ?_PWM3_Initialize 0070                              _SYSTEM_Initialize 075F  
                      __end_of__initialization 0055                  _I2C_DO_ADDRESS_NACK$intlevel0 050D  
                        __end_of_TMR2_CallBack 0F94                            _I2C_MasterOperation 068E  
                           ?_SYSTEM_Initialize 0070                           ?_I2C_DO_ADDRESS_NACK 0070  
            _rdBlkRegCompleteHandler$intlevel0 0675                        _rdBlkRegCompleteHandler 0671  
                               __pcstackCOMMON 0070                                 ?_I2C_MasterFsm 0070  
            __end_ofi1_I2C_CallbackReturnReset 0004                                ??_I2C_DO_RX_ACK 004B  
                                 __pidataBANK0 0E39                         _I2C_CallbackReturnStop 0EA1  
                          ??_SYSTEM_Initialize 004D                                      ?_TMR2_ISR 0070  
                      __end_of_TMR2_WriteTimer 0ED7                               ?_TMR2_Initialize 0070  
                               ?_I2C_SetBuffer 004B                        ?_I2C_MasterWaitForEvent 0070  
               __size_of_I2C_DO_SEND_ADR_WRITE 000B             __size_of_I2C_DO_SEND_RESTART_WRITE 0008  
                __end_of_I2C_DO_SEND_ADR_WRITE 0F9F                                   ??i1_I2C_Open 0070  
                 ?i1_I2C_DO_SEND_RESTART_WRITE 0070                     ?_I2C_DO_SEND_RESTART_WRITE 0070  
                         ?_I2C_MasterOperation 0070                      i1_rdBlkRegCompleteHandler 06C3  
             __size_ofi1_I2C_DO_SEND_ADR_WRITE 0007                          ??_I2C_MasterGetRxData 004B  
                      ?_I2C_Write1ByteRegister 00C4                                 _OPTION_REGbits 0095  
                                   ??_I2C_Open 004B                           _eusartRxStatusBuffer 0020  
                   __end_of_I2C_MasterClearIrq 0E1B                ??_EUSART_SetOverrunErrorHandler 004D  
                     i1_I2C_DO_RX_NACK_RESTART 0E60                      __end_of_SYSTEM_Initialize 0774  
                    ??i1_rd1RegCompleteHandler 007A                         i1I2C_Close@returnValue 0071  
                            _I2C_MasterSendAck 0E70                                     __pbssBANK0 0020  
                                   __pbssBANK1 00A0                           __end_ofi1_I2C_Poller 0F61  
                    ??i1_wr1RegCompleteHandler 007A                           __end_of_EUSART_Write 0EF3  
                            ??_MATHACC_PID_ISR 0070                                  ??_I2C_DO_IDLE 004B  
               __size_of_rd2RegCompleteHandler 0016                 __size_ofi1_I2C_MasterGetRxData 0003  
                                ??_I2C_DO_RCEN 004B                 i1I2C_CallbackReturnStop@funPtr 0079  
                __end_of_rd2RegCompleteHandler 071D                   __end_of_I2C_MasterSendTxData 0EB3  
                __end_ofi1_I2C_MasterGetRxData 0E15                             ?_I2C_MasterSendAck 0070  
                            _I2C_MasterStartRx 0E2A                __size_ofi1_I2C_MasterSendTxData 0005  
               __size_of_wr2RegCompleteHandler 0016                          ??_I2C_DO_ADDRESS_NACK 0055  
                       i1_I2C_MasterDisableIrq 0E03                i1I2C_SetDataCompleteCallback@cb 0075  
             __size_ofi1_rd2RegCompleteHandler 0010                  __end_of_wr2RegCompleteHandler 0749  
                  __size_of_EUSART_Receive_ISR 0034                            _I2C_DO_RX_NACK_STOP 0F23  
                         i1_I2C_MasterClearIrq 0DFD                          _rd1RegCompleteHandler 071D  
                           ?_I2C_MasterStartRx 0070                             __end_ofi1_I2C_Open 03E3  
                   __end_of_I2C_MasterSendNack 0E70               __size_ofi1_wr2RegCompleteHandler 0010  
                        _wr1RegCompleteHandler 06F1                _rd1RegCompleteHandler$intlevel0 0721  
              _wr1RegCompleteHandler$intlevel0 06F5                                     __pmaintext 01AB  
                          ??_I2C_MasterSendAck 004B                       rd1RegCompleteHandler@ptr 0054  
                  __end_of_I2C_DO_SEND_RESTART 0F13                                    _MyTimer2ISR 010B  
                              _I2C_DO_TX_EMPTY 04DE                            I2C_SetBuffer@buffer 004E  
                              __CFG_PPS1WAY$ON 0000                                     ??_TMR2_ISR 007E  
                            _MATHACC_Error_ISR 0DFA                                     __pintentry 0004  
               __end_of_I2C_MasterWaitForEvent 0E78                            ??_I2C_MasterStartRx 004B  
                __size_of_I2C_DO_SEND_ADR_READ 000C                            __size_of_MyUART_ISR 00B2  
               __size_ofi1_I2C_DO_ADDRESS_NACK 0023               __size_of_I2C_CallbackReturnReset 0006  
                      __end_ofi1_I2C_DO_RX_ACK 0E5C                        _I2C_DO_RX_ACK$intlevel0 0F1F  
                __end_ofi1_I2C_DO_ADDRESS_NACK 0615                   ??_EUSART_DefaultErrorHandler 0071  
                        ??_I2C_MasterOperation 0056                             ?_MATHACC_Error_ISR 0070  
               I2C_SetDataCompleteCallback@ptr 0052                 __end_of_I2C_Write1ByteRegister 047D  
                         i1_I2C_MasterSendNack 0E40                                i1_I2C_MasterFsm 0533  
            __size_ofi1_I2C_MasterWaitForEvent 0004                       ??_I2C_DO_RX_NACK_RESTART 004B  
                    ?i1_I2C_MasterWaitForEvent 0070              __end_of_I2C_DO_SEND_RESTART_WRITE 0F0B  
                         ?_I2C_DO_RX_NACK_STOP 0070                                  _eusartRxCount 003A  
                                      _PID1K1H 0591                                        _PID1K2H 0593  
                                      _PID1K1L 0590                                        _PID1K3H 0595  
                                      _PID1K2L 0592                                        _PID1K3L 0594  
                                      _PID1CON 0614                                        _PID1INH 058F  
                                      _PID1INL 058E                                        _PID1Z1H 059C  
                                      _PID1Z2H 060D                                        _PID1Z1L 059B  
                                      _PID1Z2L 060C                                        _PID1Z1U 059D  
                                      _PID1Z2U 060E                  ??i1_I2C_DO_SEND_RESTART_WRITE 0070  
                              __CFG_WDTCCS$SWC 0000              __size_ofi1_I2C_Write1ByteRegister 002F  
                          ??_MATHACC_Error_ISR 0070                      ?i1_I2C_Write1ByteRegister 0042  
                __size_of_EUSART_RxDataHandler 0017                                i1_I2C_SetBuffer 07F2  
                    __end_of_I2C_MasterSendAck 0E74                                        _OSCTUNE 0098  
                                      _PWM3DCH 0618                                        _PWM3DCL 0617  
                                      _PWM3CON 0619                                        _SSP1ADD 0212  
                                      _SLRCONA 030C                                        _SLRCONB 030D  
                                      _SLRCONC 030E                                        _SSP1BUF 0211  
                                 ??_TMR2_Start 004B                       ??_EUSART_SetErrorHandler 004D  
                             ?_TMR2_StartTimer 0070            _I2C_DO_SEND_RESTART_WRITE$intlevel0 0F07  
               __size_ofi1_I2C_MasterOperation 001E                  __end_ofi1_I2C_MasterOperation 0671  
                    __end_of_I2C_MasterStartRx 0E2D                           I2C_Close@returnValue 004C  
                 ?_I2C_SetDataCompleteCallback 0050                 ?i1_I2C_SetDataCompleteCallback 0075  
                                    _I2C_DO_RX 02B6                                      _I2C_DO_TX 021B  
             __end_of_I2C_DO_SEND_RESTART_READ 0F03                     i1rd1RegCompleteHandler@ptr 0079  
                 ??i1_I2C_DO_SEND_RESTART_READ 0070                   I2C_Read1ByteRegister@address 0044  
                                    _I2C_Close 0635                          i1_I2C_DO_SEND_RESTART 0E50  
                    ??_rdBlkRegCompleteHandler 0055                          ?i1_I2C_MasterClearIrq 0070  
                         _I2C_MasterDisableIrq 0E1E                                ??_I2C_MasterFsm 00BF  
          __size_of_EUSART_DefaultErrorHandler 0003                     __end_of_MATHACC_Initialize 07B2  
                   ??_TMR2_SetInterruptHandler 004D                                        _PosUart 0031  
                          __end_of_I2C_DO_IDLE 0F45                      __end_of_MATHACC_Error_ISR 0DFD  
                          __end_of_I2C_DO_RCEN 0F75                                        _Vitesse 0033  
                              ??_I2C_SetBuffer 004D                               ?_TMR2_WriteTimer 0070  
                      I2C_SetBuffer@bufferSize 004B                             __end_of_TMR2_Start 0E36  
                               _I2C_MasterOpen 0FDA                                 _I2C_MasterStop 0E27  
                               _I2C_Initialize 0F7F                              i1_I2C_MasterClose 0E00  
                        ?i1_I2C_MasterSendNack 0070                      __size_of_I2C_DO_SEND_STOP 0008  
                       i1_I2C_MasterSendTxData 0E7C                                        __ptext1 0ED1  
                                      __ptext2 0E90                                        __ptext3 0E36  
                                      __ptext4 0E33                                        __ptext5 075F  
                                      __ptext6 0774                                        __ptext7 0ECB  
                                      __ptext8 0F9F                                        __ptext9 0337  
                            i1I2C_Open@address 0071                          ??_I2C_DO_RX_NACK_STOP 004B  
                            i1_I2C_MasterStart 0E06                              i1_I2C_MasterWrite 0E68  
         __end_ofi1_I2C_SetAddressNackCallback 0FCE          __size_ofi1_I2C_SetAddressNackCallback 000C  
                 i1_I2C_SetAddressNackCallback 0FC2                             ?i1_I2C_MasterClose 0070  
                        _OSCILLATOR_Initialize 0EE4                                      _T2CONbits 001C  
               __size_of_MATHACC_PIDController 000A                             ?i1_I2C_MasterStart 0070  
          __size_ofi1_I2C_DO_SEND_RESTART_READ 0004                             I2C_SetCallback@idx 004F  
                __end_of_MATHACC_PIDController 0F6B                       __size_of_I2C_MasterClose 0003  
                           ?i1_I2C_MasterWrite 0070                       ??_PIN_MANAGER_Initialize 004B  
                I2C_CallbackReturnReset@funPtr 0054                                      _T2HLTbits 001D  
                           I2C_SetCallback@ptr 004D                       wr1RegCompleteHandler@ptr 0054  
                    I2C_Write1ByteRegister@reg 00C4                       __size_of_I2C_MasterStart 0003  
                    i1I2C_SetBuffer@bufferSize 0070                       __size_of_I2C_MasterWrite 0004  
                                    _PID1OUTHH 0599                                      _PID1OUTHL 0598  
                                    _PID1OUTLH 0597                                      _PID1OUTLL 0596  
                   __size_of_SYSTEM_Initialize 0015                            ??i1_I2C_MasterClose 0070  
                                      clrloop0 0ED8               _I2C_CallbackReturnStop$intlevel0 0EA5  
                 __size_ofi1_I2C_MasterSendAck 0004                           end_of_initialization 0055  
                          ??i1_I2C_MasterStart 0070                                      _T2RSTbits 001F  
               __size_ofi1_I2C_DO_RX_NACK_STOP 0004                            ??i1_I2C_MasterWrite 007E  
                                   ?_I2C_DO_RX 0070                                     ?_I2C_DO_TX 0070  
                __end_ofi1_I2C_DO_RX_NACK_STOP 0E60          __end_of_EUSART_SetOverrunErrorHandler 0EC5  
       __size_of_EUSART_SetOverrunErrorHandler 0006                  _EUSART_SetOverrunErrorHandler 0EBF  
                    __size_of_I2C_MasterIsNack 0006                   __size_ofi1_I2C_MasterStartRx 0003  
                                   ?_I2C_Close 0070                         ?_rd1RegCompleteHandler 0054  
                            i1_I2C_SetCallback 05CE           __size_ofi1_I2C_DO_SEND_RESTART_WRITE 0004  
                      __end_of_I2C_DO_TX_EMPTY 0509                      __size_of_I2C_MasterSetIrq 0003  
                        ?_I2C_MasterDisableIrq 0070                              _EUSART_Initialize 0417  
                       ?_wr1RegCompleteHandler 0054                             ?i1_I2C_SetCallback 0070  
                           ?_EUSART_Initialize 0070                                    _StateToggle 0032  
                     __size_of_I2C_SetCallback 0025                    ??i1_I2C_CallbackReturnReset 007A  
                      __end_ofi1_I2C_MasterFsm 055D                        ??_I2C_Read1ByteRegister 0043  
                       __end_of_I2C_MasterOpen 0FE6                         __end_of_I2C_MasterStop 0E2A  
                       __end_of_I2C_Initialize 0F89                      __end_ofi1_I2C_MasterClose 0E03  
                          ??i1_I2C_SetCallback 0073                      __end_ofi1_I2C_MasterStart 0E09  
                   i1wr1RegCompleteHandler@ptr 0079                      __end_ofi1_I2C_MasterWrite 0E6C  
                             ?i1_I2C_DO_RX_ACK 0070                    __end_of_TMR2_Counter8BitSet 0E95  
                          ??_EUSART_Initialize 004D                        __end_ofi1_I2C_SetBuffer 0800  
                      i1_I2C_DO_SEND_ADR_WRITE 0EDD                                      _PORTAbits 000C  
               i1I2C_SetAddressNackCallback@cb 0075                __end_of_rdBlkRegCompleteHandler 068E  
                         _I2C_MasterSendTxData 0EAD                               ??i1_I2C_DO_RESET 0070  
                                    _SSPDATPPS 0E21                __size_of_I2C_DO_RX_NACK_RESTART 0008  
                                    _SSPCLKPPS 0E20                               __CFG_FOSC$INTOSC 0000  
                _I2C_DO_SEND_RESTART$intlevel0 0F0F                    ?_I2C_SetAddressNackCallback 0050  
                ?i1_I2C_SetAddressNackCallback 0075                          __size_ofi1_I2C_Poller 000A  
                        __size_of_EUSART_Write 0008                     __size_of_I2C_MasterSendAck 0004  
                            __size_of_I2C_Open 003E                     __end_ofi1_I2C_DO_SEND_STOP 0E58  
                     ??i1_I2C_DO_SEND_ADR_READ 0070                                   ??_MyUART_ISR 0071  
              __size_of_EUSART_SetErrorHandler 0009                      __size_ofi1_I2C_MasterOpen 000C  
                   __size_of_I2C_MasterStartRx 0003             __size_ofi1_rdBlkRegCompleteHandler 0017  
                    __size_ofi1_I2C_MasterStop 0003                      __end_ofi1_I2C_SetCallback 05F2  
                      TMR2_WriteTimer@timerVal 004C                         ?i1_I2C_DO_SEND_RESTART 0070  
                       ??i1_I2C_MasterClearIrq 0070                      __end_of_EUSART_Initialize 044A  
                      i1_rd2RegCompleteHandler 07C2                                    _I2C_DO_IDLE 0F3C  
                                  _I2C_DO_RCEN 0F6B                     rdBlkRegCompleteHandler@ptr 0054  
                I2C_Write1ByteRegister@address 00C7                        i1_wr2RegCompleteHandler 07E2  
                      ?_I2C_CallbackReturnStop 0054                     __end_of_PWM3_LoadDutyValue 075F  
                     _I2C_DO_SEND_RESTART_READ 0EFB                    i1I2C_Write1ByteRegister@reg 0042  
                   __size_of_MATHACC_Error_ISR 0003                   I2C_CallbackReturnStop@funPtr 0054  
                              ?_I2C_MasterOpen 0070                     __end_ofi1_I2C_MasterIsNack 0E9B  
                              ?_I2C_MasterStop 0070                                ?_I2C_Initialize 0070  
         __end_of_TMR2_DefaultInterruptHandler 0DF5          __size_of_TMR2_DefaultInterruptHandler 0001  
                 _TMR2_DefaultInterruptHandler 0DF4                        _I2C_CallbackReturnReset 0EA7  
                     I2C_Read1ByteRegister@reg 0042             __end_of_EUSART_DefaultErrorHandler 0DFA  
                   _EUSART_DefaultErrorHandler 0DF7                         ??i1_I2C_MasterSendNack 0070  
                   __end_ofi1_I2C_MasterSetIrq 0E18           __size_of_I2C_SetDataCompleteCallback 000D  
                                 i1_I2C_Poller 0F57                                   _EUSART_Write 0EEB  
                            __size_of_TMR2_ISR 0005                             __end_of_MyUART_ISR 010B  
                   ??i1_I2C_DO_RX_NACK_RESTART 0070                          ?_I2C_MasterSendTxData 0070  
                       ?_OSCILLATOR_Initialize 0070                    ??_I2C_DO_SEND_RESTART_WRITE 004B  
                              _MATHACC_PID_ISR 0F33                                  ??i1_I2C_DO_RX 007A  
                                ??i1_I2C_DO_TX 007A                            start_initialization 003A  
                    i1_I2C_CallbackReturnReset 0002                __size_of_PIN_MANAGER_Initialize 003B  
                                ??i1_I2C_Close 0070                                  ?_I2C_DO_RESET 0070  
 EUSART_SetRxInterruptHandler@interruptHandler 004B             __end_ofi1_I2C_DO_SEND_RESTART_READ 0E4C  
                   i1_I2C_DO_SEND_RESTART_READ 0E48                        ?i1_I2C_MasterDisableIrq 0070  
                                  ??_I2C_DO_RX 0055                                    ??_I2C_DO_TX 0055  
                          i1I2C_SetCallback@cb 0070                              ??_I2C_MasterClose 004B  
                        __end_ofi1_I2C_DO_IDLE 0E86                         ??_I2C_MasterDisableIrq 004B  
                        __end_ofi1_I2C_DO_RCEN 0EA1                                    ??_I2C_Close 004B  
                            ??_I2C_MasterStart 004B                              ??_I2C_MasterWrite 0057  
               __end_of_I2C_CallbackReturnStop 0EA7                         _I2C_DO_RX_NACK_RESTART 0F2B  
                             ?_I2C_DO_TX_EMPTY 0070                             _I2C_MasterClearIrq 0E18  
             __end_ofi1_I2C_MasterWaitForEvent 0E68                 ?_EUSART_SetOverrunErrorHandler 004B  
            __size_ofi1_I2C_CallbackReturnStop 0002                       __size_of_PWM3_Initialize 000B  
                    ?i1_I2C_CallbackReturnStop 0079                     _EUSART_FramingErrorHandler 005B  
                                 ?_MyTimer2ISR 0070                         _EUSART_SetErrorHandler 0F4E  
                             ?i1_I2C_MasterFsm 0070               __end_ofi1_I2C_Write1ByteRegister 04DE  
                                  _CCPTMRSbits 029E                     __size_ofi1_I2C_MasterClose 0003  
                    ??i1_I2C_DO_SEND_ADR_WRITE 0070                            ?_I2C_MasterClearIrq 0070  
                  __end_of_I2C_MasterGetRxData 0E30                                    __pdataBANK0 005F  
                        __end_of_I2C_DO_RX_ACK 0F23                     __size_ofi1_I2C_MasterStart 0003  
                   __size_ofi1_I2C_MasterWrite 0004                                      _StateLeds 0030  
                ?_TMR2_DefaultInterruptHandler 0070                               _I2C_DO_SEND_STOP 0F13  
                            ??_I2C_SetCallback 004E                               ?i1_I2C_SetBuffer 0070  
                          I2C_Open@returnValue 004D                             _I2C_MasterSendNack 0E6C  
                     ?_I2C_MasterEnableRestart 0070                         __size_of_TMR2_CallBack 000B  
                        _I2C_DO_SEND_ADR_WRITE 0F94                                      ___latbits 0002  
                                __pcstackBANK0 003D                                  __pcstackBANK1 00BD  
                               ??_I2C_DO_RESET 004B                       __size_of_TMR2_Initialize 0015  
                          ?_I2C_MasterSendNack 0070                 __end_ofi1_I2C_MasterDisableIrq 0E06  
                 __end_of_I2C_DO_SEND_ADR_READ 0FDA                           ??_I2C_MasterClearIrq 004B  
                  __end_of_I2C_DO_ADDRESS_NACK 0533                      ??i1_rd2RegCompleteHandler 007A  
              __size_ofi1_I2C_DO_SEND_ADR_READ 0008                 ??i1_I2C_SetAddressNackCallback 0078  
                   __size_ofi1_I2C_SetCallback 0024                            __end_ofi1_I2C_DO_RX 03AC  
                    ??i1_wr2RegCompleteHandler 007A                            __end_ofi1_I2C_DO_TX 02B6  
             i1I2C_SetDataCompleteCallback@ptr 0077                     __end_of_EUSART_Receive_ISR 0417  
                             _I2C_MasterIsNack 0EB3                     __size_of_EUSART_Initialize 0033  
                    _I2C_DO_SEND_RESTART_WRITE 0F03                            __end_ofi1_I2C_Close 06C3  
             _EUSART_RxDefaultInterruptHandler 005D                               _I2C_MasterSetIrq 0E30  
                                    __pnvBANK0 0057                                      __pnvBANK1 00CA  
                        _rd2RegCompleteHandler 0707                          i1_I2C_MasterGetRxData 0E12  
                        __end_of_fsmStateTable 0635                   __end_of_EUSART_RxDataHandler 06F1  
                       _PIN_MANAGER_Initialize 0337                          _wr2RegCompleteHandler 0733  
                    ??_I2C_CallbackReturnReset 0055                    __end_of_I2C_MasterOperation 06AA  
                         ??_I2C_MasterSendNack 004B                i1I2C_Write1ByteRegister@address 0045  
                     rd2RegCompleteHandler@ptr 0054                        ?i1_I2C_MasterSendTxData 0070  
                                    __ptext100 0E15                                      __ptext101 0E95  
                                    __ptext110 07B2                                      __ptext102 0E7C  
                                    __ptext111 07C2                                      __ptext103 0E44  
                                    __ptext120 06AA                                      __ptext112 07D2  
                                    __ptext104 0E12                                      __ptext121 0E03  
                                    __ptext113 07E2                                      __ptext105 0E40  
                                    __ptext130 0DF3                                      __ptext122 0E00  
                                    __ptext114 0FAA                                      __ptext106 0E0F  
                                    __ptext131 0DF7                                      __ptext123 0DFD  
                                    __ptext115 05CE                                      __ptext107 0002  
                                    __ptext132 06DA                                      __ptext124 03E3  
                                    __ptext116 07F2                                      __ptext108 0DF5  
                                    __ptext125 0059                                      __ptext117 0E0C  
                                    __ptext109 06C3                                      __ptext126 0EEB  
                                    __ptext118 0E09                                      __ptext127 0F33  
                                    __ptext119 0E06                                      __ptext128 0DFA  
                                    __ptext129 0E3C                        __end_of_MATHACC_PID_ISR 0F3C  
                          i1_I2C_MasterSendAck 0E44                                   _eusartRxHead 003C  
                                 _eusartRxTail 003B                         ??_I2C_MasterSendTxData 004B  
                 ??_INTERRUPT_InterruptManager 004A                            i1_I2C_MasterStartRx 0E0F  
                 __size_of_I2C_DO_SEND_RESTART 0008                                       _BAUD1CON 019F  
                           _MATHACC_Initialize 079E                          i1_I2C_DO_ADDRESS_NACK 05F2  
                      I2C_MasterOperation@read 00C2                                       _I2C_Open 02F9  
                     ?i1_rd1RegCompleteHandler 0079                       ?i1_wr1RegCompleteHandler 0079  
                          ?_MATHACC_Initialize 0070                           ?i1_I2C_MasterSendAck 0070  
                                     _T2CLKCON 001E                        ??_rd1RegCompleteHandler 0055  
                             i1_I2C_MasterOpen 0FB6                               i1_I2C_MasterStop 0E0C  
                               _eusartRxBuffer 0028                   i1rdBlkRegCompleteHandler@ptr 0079  
                      ??_wr1RegCompleteHandler 0055                           ?i1_I2C_MasterStartRx 0070  
                   i1rd2RegCompleteHandler@ptr 0079                                       _PID1SETH 058D  
                                     _PID1SETL 058C                      i1I2C_MasterOperation@read 0040  
                        i1_I2C_MasterOperation 0653                                       _PID1OUTU 059A  
                                     _LATAbits 010C         EUSART_SetErrorHandler@interruptHandler 004B  
                                     _LATCbits 010E                                      clear_ram0 0ED7  
                                _TMR2_CallBack 0F89                                       _PIE1bits 0090  
                                     _PIE5bits 0094                              _eusartRxLastError 0039  
                     __size_of_TMR2_StartTimer 0003            __size_of_INTERRUPT_InterruptManager 0034  
                                     _PIR1bits 0010                ??_EUSART_SetFramingErrorHandler 004D  
                                     _PIR2bits 0011                                       _PIR5bits 0014  
               __end_ofi1_I2C_MasterSendTxData 0E81                          __end_of_I2C_MasterFsm 0584  
                         ??_MATHACC_Initialize 004B                    __end_of_I2C_DO_RX_NACK_STOP 0F2B  
                         __CFG_WDTCPS$WDTCPS1F 0000                                       _SSP1CON1 0215  
                                     _SSP1CON2 0216      __end_of_EUSART_DefaultOverrunErrorHandler 0E40  
   __size_of_EUSART_DefaultOverrunErrorHandler 0004            ??_EUSART_DefaultOverrunErrorHandler 0070  
           ?_EUSART_DefaultOverrunErrorHandler 0070              _EUSART_DefaultOverrunErrorHandler 0E3C  
                       i1_I2C_DO_SEND_ADR_READ 0EF3                                       _TMR2_ISR 0E8B  
              __end_of_I2C_MasterEnableRestart 0E27                                       _SSP1STAT 0214  
                     i1_I2C_MasterWaitForEvent 0E64                 __size_of_I2C_Read1ByteRegister 0032  
                __end_of_I2C_Read1ByteRegister 04AF                          __end_of_I2C_SetBuffer 079E  
          __end_ofi1_I2C_DO_SEND_RESTART_WRITE 0E50                    i1_I2C_DO_SEND_RESTART_WRITE 0E4C  
                            ??_PWM3_Initialize 004B                       i1_I2C_Write1ByteRegister 04AF  
                       ?_I2C_DO_SEND_ADR_WRITE 0070                       I2C_MasterSendTxData@data 004B  
               ??_TMR2_DefaultInterruptHandler 0070              __size_of_TMR2_SetInterruptHandler 0006  
                     __size_of_TMR2_WriteTimer 0006                                    i1_I2C_DO_RX 0372  
                                  i1_I2C_DO_TX 026B                      ?_TMR2_SetInterruptHandler 004B  
           __size_ofi1_I2C_MasterEnableRestart 0003                       wr2RegCompleteHandler@ptr 0054  
                   ?i1_I2C_MasterEnableRestart 0070                                    i1_I2C_Close 06AA  
                      ??i1_I2C_DO_SEND_RESTART 0070                          ??i1_I2C_MasterSendAck 0070  
                        _MATHACC_PIDController 0F61                     ??_I2C_DO_SEND_RESTART_READ 004B  
                     ?_rdBlkRegCompleteHandler 0054                                     _I2C_Poller 0F75  
                        ??i1_I2C_MasterStartRx 0070                                     _I2C_Status 00A0  
                                 ?_I2C_DO_IDLE 0070                                   ?_I2C_DO_RCEN 0070  
                            ??_TMR2_Initialize 004D                         ?_rd2RegCompleteHandler 0054  
                               ?_TMR2_CallBack 0070                         ?i1_I2C_MasterGetRxData 0070  
                        i1_I2C_DO_RX_NACK_STOP 0E5C                               ??_I2C_MasterOpen 004B  
                    _I2C_DO_TX_EMPTY$intlevel0 04E2                         ?_wr2RegCompleteHandler 0054  
                             ??_I2C_MasterStop 004B                       ??_I2C_MasterWaitForEvent 004B  
                             ??_I2C_Initialize 004B                _wr2RegCompleteHandler$intlevel0 0737  
              _rd2RegCompleteHandler$intlevel0 070B                             i1_I2C_DO_SEND_STOP 0E54  
                        i1I2C_SetBuffer@buffer 0073                           __end_of_I2C_DO_RESET 0F4E  
                     ??_I2C_Write1ByteRegister 00C6                     i1I2C_MasterSendTxData@data 0070  
                                     _StateBat 005F                        ??_OSCILLATOR_Initialize 004B  
                          _EUSART_ErrorHandler 00CA                               ?_MATHACC_PID_ISR 0070  
                         _I2C_DO_SEND_ADR_READ 0FCE                           __size_of_MyTimer2ISR 00A0  
                  ?_EUSART_DefaultErrorHandler 0070               i1I2C_MasterOperation@returnValue 0041  
              __end_ofi1_rd1RegCompleteHandler 07E2                     i1wr2RegCompleteHandler@ptr 0079  
                          ?i1_I2C_DO_SEND_STOP 0070              _I2C_CallbackReturnReset$intlevel0 0EAB  
                       ?i1_I2C_DO_ADDRESS_NACK 0070               I2C_Read1ByteRegister@returnValue 0045  
              __end_ofi1_wr1RegCompleteHandler 07C2                             _PWM3_LoadDutyValue 0749  
                              _I2C_MasterClose 0E1B                  I2C_SetAddressNackCallback@ptr 0052  
                              I2C_Open@address 004C                                _I2C_MasterStart 0E21  
                              _I2C_MasterWrite 0E78                             i1_I2C_MasterIsNack 0E95  
                         _EUSART_RxDataHandler 06DA                   __size_of_TMR2_Counter8BitSet 0005  
                     __size_ofi1_I2C_DO_RX_ACK 0004                                       __ptext10 0EE4  
                                     __ptext11 079E                                       __ptext20 02F9  
                                     __ptext12 0F7F                                       __ptext21 0FDA  
                                     __ptext13 0417                                       __ptext30 0F23  
                                     __ptext22 0E78                                       __ptext14 0EC5  
                                     __ptext31 0F1B                                       __ptext23 068E  
                                     __ptext15 0EBF                                       __ptext40 0FCE  
                                     __ptext32 0F13                                       __ptext24 0F75  
                                     __ptext16 0EB9                                       __ptext41 0F3C  
                                     __ptext33 0F0B                                       __ptext25 0E74  
                                     __ptext17 0F4E                                       __ptext50 0EA7  
                                     __ptext42 04DE                                       __ptext34 0F03  
                                     __ptext26 055D                                       __ptext18 044A  
                                     __ptext51 0EA1                                       __ptext43 0E30  
                                     __ptext35 0EFB                                       __ptext27 0509  
                                     __ptext19 0FF3                                       __ptext60 0E27  
                                     __ptext52 0671                                       __ptext44 0EB3  
                                     __ptext36 0F6B                                       __ptext28 0F45  
                                     __ptext61 0E24                                       __ptext53 06F1  
                                     __ptext45 0EAD                                       __ptext37 02B6  
                                     __ptext29 0F2B                                       __ptext70 010B  
                                     __ptext62 0E21                                       __ptext54 0707  
                                     __ptext46 0E70                                       __ptext38 021B  
                                     __ptext71 0DF4                                       __ptext63 0635  
                                     __ptext55 071D                                       __ptext47 0E2D  
                                     __ptext39 0F94                                       __ptext80 0653  
                                     __ptext72 04AF                                       __ptext64 0E1E  
                                     __ptext56 0733                                       __ptext48 0E6C  
                                     __ptext81 0F57                                       __ptext73 0749  
                                     __ptext65 0E1B                                       __ptext57 0FE6  
                                     __ptext49 0E2A                                       __ptext90 0E50  
                                     __ptext82 0E64                                       __ptext74 0F61  
                                     __ptext66 0E18                                       __ptext58 0584  
                          ?_PWM3_LoadDutyValue 0070                                       __ptext91 0E4C  
                                     __ptext83 0533                                       __ptext75 047D  
                                     __ptext59 0789                                       __ptext92 0E48  
                                     __ptext84 05F2                                       __ptext76 0FC2  
                                     __ptext68 0E8B                                       __ptext93 0E9B  
                                     __ptext85 0E86                                       __ptext77 03AC  
                                     __ptext69 0F89                                       __ptext94 0372  
                                     __ptext86 0E60                                       __ptext78 0FB6  
                                     __ptext95 026B                                       __ptext87 0E5C  
                                     __ptext79 0E68                                       __ptext96 0EDD  
                                     __ptext88 0E58                                       __ptext97 0EF3  
                                     __ptext89 0E54                                       __ptext98 0E81  
                                     __ptext99 05A9                             i1_I2C_MasterSetIrq 0E15  
                                 _SSP1CON1bits 0215                                   _SSP1CON2bits 0216  
            __end_ofi1_I2C_MasterEnableRestart 0E0C               __end_ofi1_I2C_CallbackReturnStop 0DF7  
          __end_of_I2C_SetDataCompleteCallback 0FF3                    _I2C_SetDataCompleteCallback 0FE6  
                      ?_I2C_DO_RX_NACK_RESTART 0070                    ?i1_I2C_DO_SEND_RESTART_READ 0070  
                       ?i1_I2C_MasterOperation 0070                           ??i1_I2C_DO_SEND_STOP 0070  
                          ?i1_I2C_MasterIsNack 0070                       __end_of_I2C_DO_SEND_STOP 0F1B  
                                __size_of_main 0070                            ?i1_I2C_MasterSetIrq 0070  
                __size_ofi1_I2C_MasterClearIrq 0003               _I2C_DO_RX_NACK_RESTART$intlevel0 0F2F  
                         __CFG_WDTCWS$WDTCWSSW 0000                        ?_EUSART_SetErrorHandler 004B  
                              _I2C_SetCallback 0584                  ??_I2C_SetDataCompleteCallback 0053  
                                   _RC1STAbits 019D                     I2C_Write1ByteRegister@data 00C5  
EUSART_SetOverrunErrorHandler@interruptHandler 004B                           ??_PWM3_LoadDutyValue 0072  
                                     int$flags 007E                          ?_I2C_DO_SEND_ADR_READ 0070  
                            ??_TMR2_StartTimer 004B             __end_of_INTERRUPT_InterruptManager 0038  
                   _INTERRUPT_InterruptManager 0004          __end_of_EUSART_SetFramingErrorHandler 0EBF  
       __size_of_EUSART_SetFramingErrorHandler 0006                  _EUSART_SetFramingErrorHandler 0EB9  
                                 _SSP1STATbits 0214                           ??i1_I2C_MasterIsNack 0070  
                     __end_of_I2C_MasterIsNack 0EB9                  __size_ofi1_I2C_MasterSendNack 0004  
                         ??i1_I2C_MasterSetIrq 0070                                     i1_I2C_Open 03AC  
                     __end_of_I2C_MasterSetIrq 0E33                                     _INTCONbits 000B  
                        ?_EUSART_RxDataHandler 0070                         ?_MATHACC_PIDController 0070  
               __end_of_I2C_DO_RX_NACK_RESTART 0F33                    TMR2_Counter8BitSet@timerVal 004B  
                                     intlevel1 0000                                    ?_I2C_Poller 0070  
                              ??_TMR2_CallBack 007E                              ??_TMR2_WriteTimer 004C  
                      __size_ofi1_I2C_DO_RESET 0005               __size_of_I2C_MasterEnableRestart 0003  
            __size_ofi1_I2C_DO_RX_NACK_RESTART 0004                         ?i1_I2C_DO_RX_NACK_STOP 0070  
                    ?i1_I2C_DO_RX_NACK_RESTART 0070                        ?_PIN_MANAGER_Initialize 0070  
               __end_of_EUSART_SetErrorHandler 0F57                              __CFG_CLKOUTEN$OFF 0000  
                          _I2C_DO_SEND_RESTART 0F0B                     ?i1_rdBlkRegCompleteHandler 0079  
                __size_of_I2C_MasterDisableIrq 0003                              i1_I2C_DO_TX_EMPTY 05A9  
         __end_of_EUSART_SetRxInterruptHandler 0ECB          __size_of_EUSART_SetRxInterruptHandler 0006  
                 _EUSART_SetRxInterruptHandler 0EC5                __size_of_I2C_MasterWaitForEvent 0004  
                           ?i1_I2C_DO_TX_EMPTY 0070                __size_of_I2C_Write1ByteRegister 0033  
                           _EUSART_Receive_ISR 03E3  EUSART_SetFramingErrorHandler@interruptHandler 004B  
                      __end_of_I2C_MasterClose 0E1E                       __size_of_I2C_DO_TX_EMPTY 002B  
                     __end_ofi1_I2C_MasterOpen 0FC2                    PWM3_LoadDutyValue@dutyValue 0070  
                     __end_ofi1_I2C_MasterStop 0E0F                        __end_of_I2C_MasterStart 0E24  
                      __end_of_I2C_MasterWrite 0E7C                                  __pstringtext1 0615  
                          ??i1_I2C_DO_TX_EMPTY 007A                           ?_I2C_DO_SEND_RESTART 0070  
                       __size_ofi1_I2C_DO_IDLE 0005                            ?_EUSART_Receive_ISR 0070  
                       __size_ofi1_I2C_DO_RCEN 0006                       __size_ofi1_I2C_MasterFsm 002A  
                 __size_of_I2C_MasterGetRxData 0003                          _I2C_DO_IDLE$intlevel0 0F40  
                                   _TX1STAbits 019E                       __size_ofi1_I2C_SetBuffer 000E  
                                   _TMR2_Start 0E33                i1I2C_SetAddressNackCallback@ptr 0077  
                  __size_of_I2C_MasterClearIrq 0003                             EUSART_Write@txData 0070  
                      __end_of_I2C_SetCallback 05A9                 __end_of_PIN_MANAGER_Initialize 0372  
               __size_of_rd1RegCompleteHandler 0016                  __end_of_rd1RegCompleteHandler 0733  
                       __size_of_I2C_DO_RX_ACK 0008                              ??i1_I2C_DO_RX_ACK 0070  
                    __end_ofi1_I2C_DO_TX_EMPTY 05CE                 __size_of_wr1RegCompleteHandler 0016  
              i1I2C_CallbackReturnReset@funPtr 0079                           ??_EUSART_Receive_ISR 0071  
                     i1_I2C_CallbackReturnStop 0DF5                          __size_of_I2C_DO_RESET 0009  
             __size_ofi1_rd1RegCompleteHandler 0010                  __end_of_wr1RegCompleteHandler 0707  
                   ??i1_I2C_MasterWaitForEvent 0070                          _TMR2_InterruptHandler 0057  
                 __size_of_I2C_DO_ADDRESS_NACK 002A                           __size_of_I2C_DO_IDLE 0009  
                         __size_of_I2C_DO_RCEN 000A              __end_ofi1_rdBlkRegCompleteHandler 06DA  
                              _PWM3_Initialize 0F9F               __size_ofi1_wr1RegCompleteHandler 0010  
                     ?i1_I2C_DO_SEND_ADR_WRITE 0070                        ?i1_I2C_DO_SEND_ADR_READ 0070  
                           __size_of_I2C_DO_RX 0043                             __size_of_I2C_DO_TX 0050  
                   ??i1_I2C_Write1ByteRegister 0044  
