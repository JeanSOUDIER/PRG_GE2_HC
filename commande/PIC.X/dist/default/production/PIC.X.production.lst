

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Mar 30 18:33:32 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	text36,local,class=CODE,merge=1,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,delta=2
    58                           	psect	text43,local,class=CODE,merge=1,delta=2
    59                           	psect	text44,local,class=CODE,merge=1,delta=2
    60                           	psect	text45,local,class=CODE,merge=1,delta=2
    61                           	psect	text46,local,class=CODE,merge=1,delta=2
    62                           	psect	text47,local,class=CODE,merge=1,delta=2
    63                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text55,local,class=CODE,merge=1,delta=2
    71                           	psect	text56,local,class=CODE,merge=1,delta=2
    72                           	psect	text57,local,class=CODE,merge=1,delta=2
    73                           	psect	text58,local,class=CODE,merge=1,delta=2
    74                           	psect	text59,local,class=CODE,merge=1,delta=2
    75                           	psect	text60,local,class=CODE,merge=1,delta=2
    76                           	psect	text61,local,class=CODE,merge=1,delta=2
    77                           	psect	text62,local,class=CODE,merge=1,delta=2
    78                           	psect	text63,local,class=CODE,merge=1,delta=2
    79                           	psect	text64,local,class=CODE,merge=1,delta=2
    80                           	psect	text65,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text66,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text67,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text68,local,class=CODE,merge=1,delta=2
    84                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    87                           	psect	text72,local,class=CODE,merge=1,delta=2
    88                           	psect	text73,local,class=CODE,merge=1,delta=2
    89                           	psect	text74,local,class=CODE,merge=1,delta=2
    90                           	psect	text75,local,class=CODE,merge=1,delta=2
    91                           	psect	text76,local,class=CODE,merge=1,delta=2
    92                           	psect	text77,local,class=CODE,merge=1,delta=2
    93                           	psect	text78,local,class=CODE,merge=1,delta=2
    94                           	dabs	1,0x7E,2
    95  0000                     
    96                           ; Version 1.45
    97                           ; Generated 16/11/2017 GMT
    98                           ; 
    99                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   100                           ; All rights reserved.
   101                           ; 
   102                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   103                           ; 
   104                           ; Redistribution and use in source and binary forms, with or without modification, are
   105                           ; permitted provided that the following conditions are met:
   106                           ; 
   107                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   108                           ;        conditions and the following disclaimer.
   109                           ; 
   110                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   111                           ;        of conditions and the following disclaimer in the documentation and/or other
   112                           ;        materials provided with the distribution.
   113                           ; 
   114                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   115                           ;        software without specific prior written permission.
   116                           ; 
   117                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   118                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   119                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   120                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   121                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   122                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   123                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   124                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   125                           ; 
   126                           ; 
   127                           ; Code-generator required, PIC16F1619 Definitions
   128                           ; 
   129                           ; SFR Addresses
   130  0000                     	;# 
   131  0001                     	;# 
   132  0002                     	;# 
   133  0003                     	;# 
   134  0004                     	;# 
   135  0005                     	;# 
   136  0006                     	;# 
   137  0007                     	;# 
   138  0008                     	;# 
   139  0009                     	;# 
   140  000A                     	;# 
   141  000B                     	;# 
   142  000C                     	;# 
   143  000D                     	;# 
   144  000E                     	;# 
   145  0010                     	;# 
   146  0011                     	;# 
   147  0012                     	;# 
   148  0013                     	;# 
   149  0014                     	;# 
   150  0015                     	;# 
   151  0016                     	;# 
   152  0016                     	;# 
   153  0017                     	;# 
   154  0018                     	;# 
   155  0019                     	;# 
   156  001A                     	;# 
   157  001A                     	;# 
   158  001B                     	;# 
   159  001B                     	;# 
   160  001C                     	;# 
   161  001D                     	;# 
   162  001E                     	;# 
   163  001F                     	;# 
   164  008C                     	;# 
   165  008D                     	;# 
   166  008E                     	;# 
   167  0090                     	;# 
   168  0091                     	;# 
   169  0092                     	;# 
   170  0093                     	;# 
   171  0094                     	;# 
   172  0095                     	;# 
   173  0096                     	;# 
   174  0098                     	;# 
   175  0099                     	;# 
   176  009A                     	;# 
   177  009B                     	;# 
   178  009B                     	;# 
   179  009C                     	;# 
   180  009D                     	;# 
   181  009E                     	;# 
   182  009F                     	;# 
   183  010C                     	;# 
   184  010D                     	;# 
   185  010E                     	;# 
   186  0111                     	;# 
   187  0112                     	;# 
   188  0113                     	;# 
   189  0114                     	;# 
   190  0115                     	;# 
   191  0116                     	;# 
   192  0117                     	;# 
   193  0118                     	;# 
   194  0119                     	;# 
   195  011C                     	;# 
   196  018C                     	;# 
   197  018D                     	;# 
   198  018E                     	;# 
   199  0191                     	;# 
   200  0191                     	;# 
   201  0192                     	;# 
   202  0193                     	;# 
   203  0193                     	;# 
   204  0194                     	;# 
   205  0195                     	;# 
   206  0196                     	;# 
   207  0197                     	;# 
   208  0199                     	;# 
   209  0199                     	;# 
   210  0199                     	;# 
   211  019A                     	;# 
   212  019A                     	;# 
   213  019A                     	;# 
   214  019B                     	;# 
   215  019B                     	;# 
   216  019B                     	;# 
   217  019B                     	;# 
   218  019B                     	;# 
   219  019C                     	;# 
   220  019C                     	;# 
   221  019C                     	;# 
   222  019D                     	;# 
   223  019D                     	;# 
   224  019D                     	;# 
   225  019E                     	;# 
   226  019E                     	;# 
   227  019E                     	;# 
   228  019F                     	;# 
   229  019F                     	;# 
   230  019F                     	;# 
   231  019F                     	;# 
   232  019F                     	;# 
   233  020C                     	;# 
   234  020D                     	;# 
   235  020E                     	;# 
   236  0211                     	;# 
   237  0211                     	;# 
   238  0212                     	;# 
   239  0212                     	;# 
   240  0213                     	;# 
   241  0213                     	;# 
   242  0214                     	;# 
   243  0214                     	;# 
   244  0215                     	;# 
   245  0215                     	;# 
   246  0215                     	;# 
   247  0215                     	;# 
   248  0216                     	;# 
   249  0216                     	;# 
   250  0217                     	;# 
   251  0217                     	;# 
   252  028C                     	;# 
   253  028D                     	;# 
   254  028E                     	;# 
   255  0291                     	;# 
   256  0291                     	;# 
   257  0292                     	;# 
   258  0293                     	;# 
   259  0294                     	;# 
   260  0298                     	;# 
   261  0298                     	;# 
   262  0299                     	;# 
   263  029A                     	;# 
   264  029B                     	;# 
   265  029E                     	;# 
   266  030C                     	;# 
   267  030D                     	;# 
   268  030E                     	;# 
   269  038C                     	;# 
   270  038D                     	;# 
   271  038E                     	;# 
   272  0391                     	;# 
   273  0392                     	;# 
   274  0393                     	;# 
   275  0394                     	;# 
   276  0395                     	;# 
   277  0396                     	;# 
   278  0397                     	;# 
   279  0398                     	;# 
   280  0399                     	;# 
   281  040E                     	;# 
   282  0413                     	;# 
   283  0413                     	;# 
   284  0414                     	;# 
   285  0414                     	;# 
   286  0415                     	;# 
   287  0416                     	;# 
   288  0417                     	;# 
   289  0418                     	;# 
   290  041A                     	;# 
   291  041A                     	;# 
   292  041B                     	;# 
   293  041B                     	;# 
   294  041C                     	;# 
   295  041D                     	;# 
   296  041E                     	;# 
   297  041F                     	;# 
   298  0493                     	;# 
   299  0494                     	;# 
   300  0495                     	;# 
   301  0496                     	;# 
   302  049A                     	;# 
   303  049B                     	;# 
   304  049C                     	;# 
   305  049D                     	;# 
   306  058C                     	;# 
   307  058C                     	;# 
   308  058D                     	;# 
   309  058E                     	;# 
   310  058E                     	;# 
   311  058F                     	;# 
   312  0590                     	;# 
   313  0590                     	;# 
   314  0591                     	;# 
   315  0592                     	;# 
   316  0592                     	;# 
   317  0593                     	;# 
   318  0594                     	;# 
   319  0594                     	;# 
   320  0595                     	;# 
   321  0596                     	;# 
   322  0596                     	;# 
   323  0597                     	;# 
   324  0598                     	;# 
   325  0599                     	;# 
   326  059A                     	;# 
   327  059B                     	;# 
   328  059B                     	;# 
   329  059C                     	;# 
   330  059D                     	;# 
   331  060C                     	;# 
   332  060C                     	;# 
   333  060D                     	;# 
   334  060E                     	;# 
   335  060F                     	;# 
   336  060F                     	;# 
   337  0610                     	;# 
   338  0611                     	;# 
   339  0612                     	;# 
   340  0613                     	;# 
   341  0614                     	;# 
   342  0617                     	;# 
   343  0618                     	;# 
   344  0619                     	;# 
   345  061A                     	;# 
   346  061B                     	;# 
   347  061C                     	;# 
   348  0691                     	;# 
   349  0692                     	;# 
   350  0693                     	;# 
   351  0694                     	;# 
   352  0695                     	;# 
   353  0696                     	;# 
   354  0697                     	;# 
   355  0699                     	;# 
   356  069A                     	;# 
   357  0711                     	;# 
   358  0712                     	;# 
   359  0713                     	;# 
   360  0714                     	;# 
   361  0715                     	;# 
   362  0718                     	;# 
   363  0718                     	;# 
   364  0719                     	;# 
   365  071A                     	;# 
   366  071A                     	;# 
   367  071B                     	;# 
   368  071C                     	;# 
   369  071D                     	;# 
   370  0791                     	;# 
   371  0791                     	;# 
   372  0792                     	;# 
   373  0793                     	;# 
   374  0793                     	;# 
   375  0794                     	;# 
   376  0795                     	;# 
   377  0795                     	;# 
   378  0796                     	;# 
   379  0797                     	;# 
   380  0797                     	;# 
   381  0798                     	;# 
   382  0799                     	;# 
   383  079A                     	;# 
   384  080C                     	;# 
   385  080C                     	;# 
   386  080D                     	;# 
   387  080E                     	;# 
   388  080E                     	;# 
   389  080F                     	;# 
   390  0810                     	;# 
   391  0810                     	;# 
   392  0811                     	;# 
   393  0812                     	;# 
   394  0812                     	;# 
   395  0813                     	;# 
   396  0814                     	;# 
   397  0815                     	;# 
   398  0816                     	;# 
   399  0817                     	;# 
   400  0818                     	;# 
   401  0819                     	;# 
   402  081A                     	;# 
   403  081A                     	;# 
   404  081B                     	;# 
   405  081C                     	;# 
   406  081C                     	;# 
   407  081D                     	;# 
   408  088C                     	;# 
   409  088D                     	;# 
   410  088E                     	;# 
   411  088F                     	;# 
   412  088F                     	;# 
   413  0890                     	;# 
   414  0891                     	;# 
   415  0892                     	;# 
   416  0893                     	;# 
   417  0893                     	;# 
   418  0894                     	;# 
   419  0895                     	;# 
   420  0896                     	;# 
   421  0897                     	;# 
   422  0897                     	;# 
   423  0898                     	;# 
   424  0899                     	;# 
   425  0D8C                     	;# 
   426  0D8C                     	;# 
   427  0D8D                     	;# 
   428  0D8E                     	;# 
   429  0D8F                     	;# 
   430  0D8F                     	;# 
   431  0D90                     	;# 
   432  0D91                     	;# 
   433  0D92                     	;# 
   434  0D92                     	;# 
   435  0D93                     	;# 
   436  0D94                     	;# 
   437  0D95                     	;# 
   438  0D95                     	;# 
   439  0D96                     	;# 
   440  0D97                     	;# 
   441  0D98                     	;# 
   442  0D99                     	;# 
   443  0D9A                     	;# 
   444  0D9B                     	;# 
   445  0D9C                     	;# 
   446  0D9D                     	;# 
   447  0D9E                     	;# 
   448  0D9E                     	;# 
   449  0D9F                     	;# 
   450  0DA0                     	;# 
   451  0DA1                     	;# 
   452  0DA1                     	;# 
   453  0DA2                     	;# 
   454  0DA3                     	;# 
   455  0DA4                     	;# 
   456  0DA4                     	;# 
   457  0DA5                     	;# 
   458  0DA6                     	;# 
   459  0DA7                     	;# 
   460  0DA7                     	;# 
   461  0DA8                     	;# 
   462  0DA9                     	;# 
   463  0DAA                     	;# 
   464  0DAB                     	;# 
   465  0DAC                     	;# 
   466  0DAD                     	;# 
   467  0DAE                     	;# 
   468  0DAF                     	;# 
   469  0E0F                     	;# 
   470  0E10                     	;# 
   471  0E11                     	;# 
   472  0E12                     	;# 
   473  0E13                     	;# 
   474  0E14                     	;# 
   475  0E15                     	;# 
   476  0E16                     	;# 
   477  0E17                     	;# 
   478  0E18                     	;# 
   479  0E19                     	;# 
   480  0E1A                     	;# 
   481  0E1B                     	;# 
   482  0E1C                     	;# 
   483  0E1D                     	;# 
   484  0E1E                     	;# 
   485  0E1F                     	;# 
   486  0E20                     	;# 
   487  0E21                     	;# 
   488  0E22                     	;# 
   489  0E23                     	;# 
   490  0E24                     	;# 
   491  0E25                     	;# 
   492  0E26                     	;# 
   493  0E27                     	;# 
   494  0E28                     	;# 
   495  0E29                     	;# 
   496  0E2A                     	;# 
   497  0E2B                     	;# 
   498  0E2C                     	;# 
   499  0E2D                     	;# 
   500  0E2E                     	;# 
   501  0E90                     	;# 
   502  0E91                     	;# 
   503  0E92                     	;# 
   504  0E94                     	;# 
   505  0E95                     	;# 
   506  0E9C                     	;# 
   507  0E9D                     	;# 
   508  0E9E                     	;# 
   509  0E9F                     	;# 
   510  0EA0                     	;# 
   511  0EA1                     	;# 
   512  0EA2                     	;# 
   513  0EA3                     	;# 
   514  0EA4                     	;# 
   515  0EA5                     	;# 
   516  0EA6                     	;# 
   517  0EA7                     	;# 
   518  0F0F                     	;# 
   519  0F10                     	;# 
   520  0F11                     	;# 
   521  0F12                     	;# 
   522  0F13                     	;# 
   523  0F14                     	;# 
   524  0F15                     	;# 
   525  0F16                     	;# 
   526  0F17                     	;# 
   527  0F18                     	;# 
   528  0F19                     	;# 
   529  0F1A                     	;# 
   530  0F1B                     	;# 
   531  0F1C                     	;# 
   532  0F1D                     	;# 
   533  0F1E                     	;# 
   534  0F1F                     	;# 
   535  0F20                     	;# 
   536  0F21                     	;# 
   537  0F22                     	;# 
   538  0F23                     	;# 
   539  0F24                     	;# 
   540  0F25                     	;# 
   541  0F26                     	;# 
   542  0F27                     	;# 
   543  0F28                     	;# 
   544  0F29                     	;# 
   545  0F2A                     	;# 
   546  0F2B                     	;# 
   547  0F2C                     	;# 
   548  0F2D                     	;# 
   549  0F2E                     	;# 
   550  0F2F                     	;# 
   551  0F30                     	;# 
   552  0F31                     	;# 
   553  0F32                     	;# 
   554  0F33                     	;# 
   555  0F34                     	;# 
   556  0F35                     	;# 
   557  0F36                     	;# 
   558  0F37                     	;# 
   559  0FE4                     	;# 
   560  0FE5                     	;# 
   561  0FE6                     	;# 
   562  0FE7                     	;# 
   563  0FE8                     	;# 
   564  0FE9                     	;# 
   565  0FEA                     	;# 
   566  0FEB                     	;# 
   567  0FED                     	;# 
   568  0FEE                     	;# 
   569  0FEF                     	;# 
   570  0000                     	;# 
   571  0001                     	;# 
   572  0002                     	;# 
   573  0003                     	;# 
   574  0004                     	;# 
   575  0005                     	;# 
   576  0006                     	;# 
   577  0007                     	;# 
   578  0008                     	;# 
   579  0009                     	;# 
   580  000A                     	;# 
   581  000B                     	;# 
   582  000C                     	;# 
   583  000D                     	;# 
   584  000E                     	;# 
   585  0010                     	;# 
   586  0011                     	;# 
   587  0012                     	;# 
   588  0013                     	;# 
   589  0014                     	;# 
   590  0015                     	;# 
   591  0016                     	;# 
   592  0016                     	;# 
   593  0017                     	;# 
   594  0018                     	;# 
   595  0019                     	;# 
   596  001A                     	;# 
   597  001A                     	;# 
   598  001B                     	;# 
   599  001B                     	;# 
   600  001C                     	;# 
   601  001D                     	;# 
   602  001E                     	;# 
   603  001F                     	;# 
   604  008C                     	;# 
   605  008D                     	;# 
   606  008E                     	;# 
   607  0090                     	;# 
   608  0091                     	;# 
   609  0092                     	;# 
   610  0093                     	;# 
   611  0094                     	;# 
   612  0095                     	;# 
   613  0096                     	;# 
   614  0098                     	;# 
   615  0099                     	;# 
   616  009A                     	;# 
   617  009B                     	;# 
   618  009B                     	;# 
   619  009C                     	;# 
   620  009D                     	;# 
   621  009E                     	;# 
   622  009F                     	;# 
   623  010C                     	;# 
   624  010D                     	;# 
   625  010E                     	;# 
   626  0111                     	;# 
   627  0112                     	;# 
   628  0113                     	;# 
   629  0114                     	;# 
   630  0115                     	;# 
   631  0116                     	;# 
   632  0117                     	;# 
   633  0118                     	;# 
   634  0119                     	;# 
   635  011C                     	;# 
   636  018C                     	;# 
   637  018D                     	;# 
   638  018E                     	;# 
   639  0191                     	;# 
   640  0191                     	;# 
   641  0192                     	;# 
   642  0193                     	;# 
   643  0193                     	;# 
   644  0194                     	;# 
   645  0195                     	;# 
   646  0196                     	;# 
   647  0197                     	;# 
   648  0199                     	;# 
   649  0199                     	;# 
   650  0199                     	;# 
   651  019A                     	;# 
   652  019A                     	;# 
   653  019A                     	;# 
   654  019B                     	;# 
   655  019B                     	;# 
   656  019B                     	;# 
   657  019B                     	;# 
   658  019B                     	;# 
   659  019C                     	;# 
   660  019C                     	;# 
   661  019C                     	;# 
   662  019D                     	;# 
   663  019D                     	;# 
   664  019D                     	;# 
   665  019E                     	;# 
   666  019E                     	;# 
   667  019E                     	;# 
   668  019F                     	;# 
   669  019F                     	;# 
   670  019F                     	;# 
   671  019F                     	;# 
   672  019F                     	;# 
   673  020C                     	;# 
   674  020D                     	;# 
   675  020E                     	;# 
   676  0211                     	;# 
   677  0211                     	;# 
   678  0212                     	;# 
   679  0212                     	;# 
   680  0213                     	;# 
   681  0213                     	;# 
   682  0214                     	;# 
   683  0214                     	;# 
   684  0215                     	;# 
   685  0215                     	;# 
   686  0215                     	;# 
   687  0215                     	;# 
   688  0216                     	;# 
   689  0216                     	;# 
   690  0217                     	;# 
   691  0217                     	;# 
   692  028C                     	;# 
   693  028D                     	;# 
   694  028E                     	;# 
   695  0291                     	;# 
   696  0291                     	;# 
   697  0292                     	;# 
   698  0293                     	;# 
   699  0294                     	;# 
   700  0298                     	;# 
   701  0298                     	;# 
   702  0299                     	;# 
   703  029A                     	;# 
   704  029B                     	;# 
   705  029E                     	;# 
   706  030C                     	;# 
   707  030D                     	;# 
   708  030E                     	;# 
   709  038C                     	;# 
   710  038D                     	;# 
   711  038E                     	;# 
   712  0391                     	;# 
   713  0392                     	;# 
   714  0393                     	;# 
   715  0394                     	;# 
   716  0395                     	;# 
   717  0396                     	;# 
   718  0397                     	;# 
   719  0398                     	;# 
   720  0399                     	;# 
   721  040E                     	;# 
   722  0413                     	;# 
   723  0413                     	;# 
   724  0414                     	;# 
   725  0414                     	;# 
   726  0415                     	;# 
   727  0416                     	;# 
   728  0417                     	;# 
   729  0418                     	;# 
   730  041A                     	;# 
   731  041A                     	;# 
   732  041B                     	;# 
   733  041B                     	;# 
   734  041C                     	;# 
   735  041D                     	;# 
   736  041E                     	;# 
   737  041F                     	;# 
   738  0493                     	;# 
   739  0494                     	;# 
   740  0495                     	;# 
   741  0496                     	;# 
   742  049A                     	;# 
   743  049B                     	;# 
   744  049C                     	;# 
   745  049D                     	;# 
   746  058C                     	;# 
   747  058C                     	;# 
   748  058D                     	;# 
   749  058E                     	;# 
   750  058E                     	;# 
   751  058F                     	;# 
   752  0590                     	;# 
   753  0590                     	;# 
   754  0591                     	;# 
   755  0592                     	;# 
   756  0592                     	;# 
   757  0593                     	;# 
   758  0594                     	;# 
   759  0594                     	;# 
   760  0595                     	;# 
   761  0596                     	;# 
   762  0596                     	;# 
   763  0597                     	;# 
   764  0598                     	;# 
   765  0599                     	;# 
   766  059A                     	;# 
   767  059B                     	;# 
   768  059B                     	;# 
   769  059C                     	;# 
   770  059D                     	;# 
   771  060C                     	;# 
   772  060C                     	;# 
   773  060D                     	;# 
   774  060E                     	;# 
   775  060F                     	;# 
   776  060F                     	;# 
   777  0610                     	;# 
   778  0611                     	;# 
   779  0612                     	;# 
   780  0613                     	;# 
   781  0614                     	;# 
   782  0617                     	;# 
   783  0618                     	;# 
   784  0619                     	;# 
   785  061A                     	;# 
   786  061B                     	;# 
   787  061C                     	;# 
   788  0691                     	;# 
   789  0692                     	;# 
   790  0693                     	;# 
   791  0694                     	;# 
   792  0695                     	;# 
   793  0696                     	;# 
   794  0697                     	;# 
   795  0699                     	;# 
   796  069A                     	;# 
   797  0711                     	;# 
   798  0712                     	;# 
   799  0713                     	;# 
   800  0714                     	;# 
   801  0715                     	;# 
   802  0718                     	;# 
   803  0718                     	;# 
   804  0719                     	;# 
   805  071A                     	;# 
   806  071A                     	;# 
   807  071B                     	;# 
   808  071C                     	;# 
   809  071D                     	;# 
   810  0791                     	;# 
   811  0791                     	;# 
   812  0792                     	;# 
   813  0793                     	;# 
   814  0793                     	;# 
   815  0794                     	;# 
   816  0795                     	;# 
   817  0795                     	;# 
   818  0796                     	;# 
   819  0797                     	;# 
   820  0797                     	;# 
   821  0798                     	;# 
   822  0799                     	;# 
   823  079A                     	;# 
   824  080C                     	;# 
   825  080C                     	;# 
   826  080D                     	;# 
   827  080E                     	;# 
   828  080E                     	;# 
   829  080F                     	;# 
   830  0810                     	;# 
   831  0810                     	;# 
   832  0811                     	;# 
   833  0812                     	;# 
   834  0812                     	;# 
   835  0813                     	;# 
   836  0814                     	;# 
   837  0815                     	;# 
   838  0816                     	;# 
   839  0817                     	;# 
   840  0818                     	;# 
   841  0819                     	;# 
   842  081A                     	;# 
   843  081A                     	;# 
   844  081B                     	;# 
   845  081C                     	;# 
   846  081C                     	;# 
   847  081D                     	;# 
   848  088C                     	;# 
   849  088D                     	;# 
   850  088E                     	;# 
   851  088F                     	;# 
   852  088F                     	;# 
   853  0890                     	;# 
   854  0891                     	;# 
   855  0892                     	;# 
   856  0893                     	;# 
   857  0893                     	;# 
   858  0894                     	;# 
   859  0895                     	;# 
   860  0896                     	;# 
   861  0897                     	;# 
   862  0897                     	;# 
   863  0898                     	;# 
   864  0899                     	;# 
   865  0D8C                     	;# 
   866  0D8C                     	;# 
   867  0D8D                     	;# 
   868  0D8E                     	;# 
   869  0D8F                     	;# 
   870  0D8F                     	;# 
   871  0D90                     	;# 
   872  0D91                     	;# 
   873  0D92                     	;# 
   874  0D92                     	;# 
   875  0D93                     	;# 
   876  0D94                     	;# 
   877  0D95                     	;# 
   878  0D95                     	;# 
   879  0D96                     	;# 
   880  0D97                     	;# 
   881  0D98                     	;# 
   882  0D99                     	;# 
   883  0D9A                     	;# 
   884  0D9B                     	;# 
   885  0D9C                     	;# 
   886  0D9D                     	;# 
   887  0D9E                     	;# 
   888  0D9E                     	;# 
   889  0D9F                     	;# 
   890  0DA0                     	;# 
   891  0DA1                     	;# 
   892  0DA1                     	;# 
   893  0DA2                     	;# 
   894  0DA3                     	;# 
   895  0DA4                     	;# 
   896  0DA4                     	;# 
   897  0DA5                     	;# 
   898  0DA6                     	;# 
   899  0DA7                     	;# 
   900  0DA7                     	;# 
   901  0DA8                     	;# 
   902  0DA9                     	;# 
   903  0DAA                     	;# 
   904  0DAB                     	;# 
   905  0DAC                     	;# 
   906  0DAD                     	;# 
   907  0DAE                     	;# 
   908  0DAF                     	;# 
   909  0E0F                     	;# 
   910  0E10                     	;# 
   911  0E11                     	;# 
   912  0E12                     	;# 
   913  0E13                     	;# 
   914  0E14                     	;# 
   915  0E15                     	;# 
   916  0E16                     	;# 
   917  0E17                     	;# 
   918  0E18                     	;# 
   919  0E19                     	;# 
   920  0E1A                     	;# 
   921  0E1B                     	;# 
   922  0E1C                     	;# 
   923  0E1D                     	;# 
   924  0E1E                     	;# 
   925  0E1F                     	;# 
   926  0E20                     	;# 
   927  0E21                     	;# 
   928  0E22                     	;# 
   929  0E23                     	;# 
   930  0E24                     	;# 
   931  0E25                     	;# 
   932  0E26                     	;# 
   933  0E27                     	;# 
   934  0E28                     	;# 
   935  0E29                     	;# 
   936  0E2A                     	;# 
   937  0E2B                     	;# 
   938  0E2C                     	;# 
   939  0E2D                     	;# 
   940  0E2E                     	;# 
   941  0E90                     	;# 
   942  0E91                     	;# 
   943  0E92                     	;# 
   944  0E94                     	;# 
   945  0E95                     	;# 
   946  0E9C                     	;# 
   947  0E9D                     	;# 
   948  0E9E                     	;# 
   949  0E9F                     	;# 
   950  0EA0                     	;# 
   951  0EA1                     	;# 
   952  0EA2                     	;# 
   953  0EA3                     	;# 
   954  0EA4                     	;# 
   955  0EA5                     	;# 
   956  0EA6                     	;# 
   957  0EA7                     	;# 
   958  0F0F                     	;# 
   959  0F10                     	;# 
   960  0F11                     	;# 
   961  0F12                     	;# 
   962  0F13                     	;# 
   963  0F14                     	;# 
   964  0F15                     	;# 
   965  0F16                     	;# 
   966  0F17                     	;# 
   967  0F18                     	;# 
   968  0F19                     	;# 
   969  0F1A                     	;# 
   970  0F1B                     	;# 
   971  0F1C                     	;# 
   972  0F1D                     	;# 
   973  0F1E                     	;# 
   974  0F1F                     	;# 
   975  0F20                     	;# 
   976  0F21                     	;# 
   977  0F22                     	;# 
   978  0F23                     	;# 
   979  0F24                     	;# 
   980  0F25                     	;# 
   981  0F26                     	;# 
   982  0F27                     	;# 
   983  0F28                     	;# 
   984  0F29                     	;# 
   985  0F2A                     	;# 
   986  0F2B                     	;# 
   987  0F2C                     	;# 
   988  0F2D                     	;# 
   989  0F2E                     	;# 
   990  0F2F                     	;# 
   991  0F30                     	;# 
   992  0F31                     	;# 
   993  0F32                     	;# 
   994  0F33                     	;# 
   995  0F34                     	;# 
   996  0F35                     	;# 
   997  0F36                     	;# 
   998  0F37                     	;# 
   999  0FE4                     	;# 
  1000  0FE5                     	;# 
  1001  0FE6                     	;# 
  1002  0FE7                     	;# 
  1003  0FE8                     	;# 
  1004  0FE9                     	;# 
  1005  0FEA                     	;# 
  1006  0FEB                     	;# 
  1007  0FED                     	;# 
  1008  0FEE                     	;# 
  1009  0FEF                     	;# 
  1010  0000                     	;# 
  1011  0001                     	;# 
  1012  0002                     	;# 
  1013  0003                     	;# 
  1014  0004                     	;# 
  1015  0005                     	;# 
  1016  0006                     	;# 
  1017  0007                     	;# 
  1018  0008                     	;# 
  1019  0009                     	;# 
  1020  000A                     	;# 
  1021  000B                     	;# 
  1022  000C                     	;# 
  1023  000D                     	;# 
  1024  000E                     	;# 
  1025  0010                     	;# 
  1026  0011                     	;# 
  1027  0012                     	;# 
  1028  0013                     	;# 
  1029  0014                     	;# 
  1030  0015                     	;# 
  1031  0016                     	;# 
  1032  0016                     	;# 
  1033  0017                     	;# 
  1034  0018                     	;# 
  1035  0019                     	;# 
  1036  001A                     	;# 
  1037  001A                     	;# 
  1038  001B                     	;# 
  1039  001B                     	;# 
  1040  001C                     	;# 
  1041  001D                     	;# 
  1042  001E                     	;# 
  1043  001F                     	;# 
  1044  008C                     	;# 
  1045  008D                     	;# 
  1046  008E                     	;# 
  1047  0090                     	;# 
  1048  0091                     	;# 
  1049  0092                     	;# 
  1050  0093                     	;# 
  1051  0094                     	;# 
  1052  0095                     	;# 
  1053  0096                     	;# 
  1054  0098                     	;# 
  1055  0099                     	;# 
  1056  009A                     	;# 
  1057  009B                     	;# 
  1058  009B                     	;# 
  1059  009C                     	;# 
  1060  009D                     	;# 
  1061  009E                     	;# 
  1062  009F                     	;# 
  1063  010C                     	;# 
  1064  010D                     	;# 
  1065  010E                     	;# 
  1066  0111                     	;# 
  1067  0112                     	;# 
  1068  0113                     	;# 
  1069  0114                     	;# 
  1070  0115                     	;# 
  1071  0116                     	;# 
  1072  0117                     	;# 
  1073  0118                     	;# 
  1074  0119                     	;# 
  1075  011C                     	;# 
  1076  018C                     	;# 
  1077  018D                     	;# 
  1078  018E                     	;# 
  1079  0191                     	;# 
  1080  0191                     	;# 
  1081  0192                     	;# 
  1082  0193                     	;# 
  1083  0193                     	;# 
  1084  0194                     	;# 
  1085  0195                     	;# 
  1086  0196                     	;# 
  1087  0197                     	;# 
  1088  0199                     	;# 
  1089  0199                     	;# 
  1090  0199                     	;# 
  1091  019A                     	;# 
  1092  019A                     	;# 
  1093  019A                     	;# 
  1094  019B                     	;# 
  1095  019B                     	;# 
  1096  019B                     	;# 
  1097  019B                     	;# 
  1098  019B                     	;# 
  1099  019C                     	;# 
  1100  019C                     	;# 
  1101  019C                     	;# 
  1102  019D                     	;# 
  1103  019D                     	;# 
  1104  019D                     	;# 
  1105  019E                     	;# 
  1106  019E                     	;# 
  1107  019E                     	;# 
  1108  019F                     	;# 
  1109  019F                     	;# 
  1110  019F                     	;# 
  1111  019F                     	;# 
  1112  019F                     	;# 
  1113  020C                     	;# 
  1114  020D                     	;# 
  1115  020E                     	;# 
  1116  0211                     	;# 
  1117  0211                     	;# 
  1118  0212                     	;# 
  1119  0212                     	;# 
  1120  0213                     	;# 
  1121  0213                     	;# 
  1122  0214                     	;# 
  1123  0214                     	;# 
  1124  0215                     	;# 
  1125  0215                     	;# 
  1126  0215                     	;# 
  1127  0215                     	;# 
  1128  0216                     	;# 
  1129  0216                     	;# 
  1130  0217                     	;# 
  1131  0217                     	;# 
  1132  028C                     	;# 
  1133  028D                     	;# 
  1134  028E                     	;# 
  1135  0291                     	;# 
  1136  0291                     	;# 
  1137  0292                     	;# 
  1138  0293                     	;# 
  1139  0294                     	;# 
  1140  0298                     	;# 
  1141  0298                     	;# 
  1142  0299                     	;# 
  1143  029A                     	;# 
  1144  029B                     	;# 
  1145  029E                     	;# 
  1146  030C                     	;# 
  1147  030D                     	;# 
  1148  030E                     	;# 
  1149  038C                     	;# 
  1150  038D                     	;# 
  1151  038E                     	;# 
  1152  0391                     	;# 
  1153  0392                     	;# 
  1154  0393                     	;# 
  1155  0394                     	;# 
  1156  0395                     	;# 
  1157  0396                     	;# 
  1158  0397                     	;# 
  1159  0398                     	;# 
  1160  0399                     	;# 
  1161  040E                     	;# 
  1162  0413                     	;# 
  1163  0413                     	;# 
  1164  0414                     	;# 
  1165  0414                     	;# 
  1166  0415                     	;# 
  1167  0416                     	;# 
  1168  0417                     	;# 
  1169  0418                     	;# 
  1170  041A                     	;# 
  1171  041A                     	;# 
  1172  041B                     	;# 
  1173  041B                     	;# 
  1174  041C                     	;# 
  1175  041D                     	;# 
  1176  041E                     	;# 
  1177  041F                     	;# 
  1178  0493                     	;# 
  1179  0494                     	;# 
  1180  0495                     	;# 
  1181  0496                     	;# 
  1182  049A                     	;# 
  1183  049B                     	;# 
  1184  049C                     	;# 
  1185  049D                     	;# 
  1186  058C                     	;# 
  1187  058C                     	;# 
  1188  058D                     	;# 
  1189  058E                     	;# 
  1190  058E                     	;# 
  1191  058F                     	;# 
  1192  0590                     	;# 
  1193  0590                     	;# 
  1194  0591                     	;# 
  1195  0592                     	;# 
  1196  0592                     	;# 
  1197  0593                     	;# 
  1198  0594                     	;# 
  1199  0594                     	;# 
  1200  0595                     	;# 
  1201  0596                     	;# 
  1202  0596                     	;# 
  1203  0597                     	;# 
  1204  0598                     	;# 
  1205  0599                     	;# 
  1206  059A                     	;# 
  1207  059B                     	;# 
  1208  059B                     	;# 
  1209  059C                     	;# 
  1210  059D                     	;# 
  1211  060C                     	;# 
  1212  060C                     	;# 
  1213  060D                     	;# 
  1214  060E                     	;# 
  1215  060F                     	;# 
  1216  060F                     	;# 
  1217  0610                     	;# 
  1218  0611                     	;# 
  1219  0612                     	;# 
  1220  0613                     	;# 
  1221  0614                     	;# 
  1222  0617                     	;# 
  1223  0618                     	;# 
  1224  0619                     	;# 
  1225  061A                     	;# 
  1226  061B                     	;# 
  1227  061C                     	;# 
  1228  0691                     	;# 
  1229  0692                     	;# 
  1230  0693                     	;# 
  1231  0694                     	;# 
  1232  0695                     	;# 
  1233  0696                     	;# 
  1234  0697                     	;# 
  1235  0699                     	;# 
  1236  069A                     	;# 
  1237  0711                     	;# 
  1238  0712                     	;# 
  1239  0713                     	;# 
  1240  0714                     	;# 
  1241  0715                     	;# 
  1242  0718                     	;# 
  1243  0718                     	;# 
  1244  0719                     	;# 
  1245  071A                     	;# 
  1246  071A                     	;# 
  1247  071B                     	;# 
  1248  071C                     	;# 
  1249  071D                     	;# 
  1250  0791                     	;# 
  1251  0791                     	;# 
  1252  0792                     	;# 
  1253  0793                     	;# 
  1254  0793                     	;# 
  1255  0794                     	;# 
  1256  0795                     	;# 
  1257  0795                     	;# 
  1258  0796                     	;# 
  1259  0797                     	;# 
  1260  0797                     	;# 
  1261  0798                     	;# 
  1262  0799                     	;# 
  1263  079A                     	;# 
  1264  080C                     	;# 
  1265  080C                     	;# 
  1266  080D                     	;# 
  1267  080E                     	;# 
  1268  080E                     	;# 
  1269  080F                     	;# 
  1270  0810                     	;# 
  1271  0810                     	;# 
  1272  0811                     	;# 
  1273  0812                     	;# 
  1274  0812                     	;# 
  1275  0813                     	;# 
  1276  0814                     	;# 
  1277  0815                     	;# 
  1278  0816                     	;# 
  1279  0817                     	;# 
  1280  0818                     	;# 
  1281  0819                     	;# 
  1282  081A                     	;# 
  1283  081A                     	;# 
  1284  081B                     	;# 
  1285  081C                     	;# 
  1286  081C                     	;# 
  1287  081D                     	;# 
  1288  088C                     	;# 
  1289  088D                     	;# 
  1290  088E                     	;# 
  1291  088F                     	;# 
  1292  088F                     	;# 
  1293  0890                     	;# 
  1294  0891                     	;# 
  1295  0892                     	;# 
  1296  0893                     	;# 
  1297  0893                     	;# 
  1298  0894                     	;# 
  1299  0895                     	;# 
  1300  0896                     	;# 
  1301  0897                     	;# 
  1302  0897                     	;# 
  1303  0898                     	;# 
  1304  0899                     	;# 
  1305  0D8C                     	;# 
  1306  0D8C                     	;# 
  1307  0D8D                     	;# 
  1308  0D8E                     	;# 
  1309  0D8F                     	;# 
  1310  0D8F                     	;# 
  1311  0D90                     	;# 
  1312  0D91                     	;# 
  1313  0D92                     	;# 
  1314  0D92                     	;# 
  1315  0D93                     	;# 
  1316  0D94                     	;# 
  1317  0D95                     	;# 
  1318  0D95                     	;# 
  1319  0D96                     	;# 
  1320  0D97                     	;# 
  1321  0D98                     	;# 
  1322  0D99                     	;# 
  1323  0D9A                     	;# 
  1324  0D9B                     	;# 
  1325  0D9C                     	;# 
  1326  0D9D                     	;# 
  1327  0D9E                     	;# 
  1328  0D9E                     	;# 
  1329  0D9F                     	;# 
  1330  0DA0                     	;# 
  1331  0DA1                     	;# 
  1332  0DA1                     	;# 
  1333  0DA2                     	;# 
  1334  0DA3                     	;# 
  1335  0DA4                     	;# 
  1336  0DA4                     	;# 
  1337  0DA5                     	;# 
  1338  0DA6                     	;# 
  1339  0DA7                     	;# 
  1340  0DA7                     	;# 
  1341  0DA8                     	;# 
  1342  0DA9                     	;# 
  1343  0DAA                     	;# 
  1344  0DAB                     	;# 
  1345  0DAC                     	;# 
  1346  0DAD                     	;# 
  1347  0DAE                     	;# 
  1348  0DAF                     	;# 
  1349  0E0F                     	;# 
  1350  0E10                     	;# 
  1351  0E11                     	;# 
  1352  0E12                     	;# 
  1353  0E13                     	;# 
  1354  0E14                     	;# 
  1355  0E15                     	;# 
  1356  0E16                     	;# 
  1357  0E17                     	;# 
  1358  0E18                     	;# 
  1359  0E19                     	;# 
  1360  0E1A                     	;# 
  1361  0E1B                     	;# 
  1362  0E1C                     	;# 
  1363  0E1D                     	;# 
  1364  0E1E                     	;# 
  1365  0E1F                     	;# 
  1366  0E20                     	;# 
  1367  0E21                     	;# 
  1368  0E22                     	;# 
  1369  0E23                     	;# 
  1370  0E24                     	;# 
  1371  0E25                     	;# 
  1372  0E26                     	;# 
  1373  0E27                     	;# 
  1374  0E28                     	;# 
  1375  0E29                     	;# 
  1376  0E2A                     	;# 
  1377  0E2B                     	;# 
  1378  0E2C                     	;# 
  1379  0E2D                     	;# 
  1380  0E2E                     	;# 
  1381  0E90                     	;# 
  1382  0E91                     	;# 
  1383  0E92                     	;# 
  1384  0E94                     	;# 
  1385  0E95                     	;# 
  1386  0E9C                     	;# 
  1387  0E9D                     	;# 
  1388  0E9E                     	;# 
  1389  0E9F                     	;# 
  1390  0EA0                     	;# 
  1391  0EA1                     	;# 
  1392  0EA2                     	;# 
  1393  0EA3                     	;# 
  1394  0EA4                     	;# 
  1395  0EA5                     	;# 
  1396  0EA6                     	;# 
  1397  0EA7                     	;# 
  1398  0F0F                     	;# 
  1399  0F10                     	;# 
  1400  0F11                     	;# 
  1401  0F12                     	;# 
  1402  0F13                     	;# 
  1403  0F14                     	;# 
  1404  0F15                     	;# 
  1405  0F16                     	;# 
  1406  0F17                     	;# 
  1407  0F18                     	;# 
  1408  0F19                     	;# 
  1409  0F1A                     	;# 
  1410  0F1B                     	;# 
  1411  0F1C                     	;# 
  1412  0F1D                     	;# 
  1413  0F1E                     	;# 
  1414  0F1F                     	;# 
  1415  0F20                     	;# 
  1416  0F21                     	;# 
  1417  0F22                     	;# 
  1418  0F23                     	;# 
  1419  0F24                     	;# 
  1420  0F25                     	;# 
  1421  0F26                     	;# 
  1422  0F27                     	;# 
  1423  0F28                     	;# 
  1424  0F29                     	;# 
  1425  0F2A                     	;# 
  1426  0F2B                     	;# 
  1427  0F2C                     	;# 
  1428  0F2D                     	;# 
  1429  0F2E                     	;# 
  1430  0F2F                     	;# 
  1431  0F30                     	;# 
  1432  0F31                     	;# 
  1433  0F32                     	;# 
  1434  0F33                     	;# 
  1435  0F34                     	;# 
  1436  0F35                     	;# 
  1437  0F36                     	;# 
  1438  0F37                     	;# 
  1439  0FE4                     	;# 
  1440  0FE5                     	;# 
  1441  0FE6                     	;# 
  1442  0FE7                     	;# 
  1443  0FE8                     	;# 
  1444  0FE9                     	;# 
  1445  0FEA                     	;# 
  1446  0FEB                     	;# 
  1447  0FED                     	;# 
  1448  0FEE                     	;# 
  1449  0FEF                     	;# 
  1450  0000                     	;# 
  1451  0001                     	;# 
  1452  0002                     	;# 
  1453  0003                     	;# 
  1454  0004                     	;# 
  1455  0005                     	;# 
  1456  0006                     	;# 
  1457  0007                     	;# 
  1458  0008                     	;# 
  1459  0009                     	;# 
  1460  000A                     	;# 
  1461  000B                     	;# 
  1462  000C                     	;# 
  1463  000D                     	;# 
  1464  000E                     	;# 
  1465  0010                     	;# 
  1466  0011                     	;# 
  1467  0012                     	;# 
  1468  0013                     	;# 
  1469  0014                     	;# 
  1470  0015                     	;# 
  1471  0016                     	;# 
  1472  0016                     	;# 
  1473  0017                     	;# 
  1474  0018                     	;# 
  1475  0019                     	;# 
  1476  001A                     	;# 
  1477  001A                     	;# 
  1478  001B                     	;# 
  1479  001B                     	;# 
  1480  001C                     	;# 
  1481  001D                     	;# 
  1482  001E                     	;# 
  1483  001F                     	;# 
  1484  008C                     	;# 
  1485  008D                     	;# 
  1486  008E                     	;# 
  1487  0090                     	;# 
  1488  0091                     	;# 
  1489  0092                     	;# 
  1490  0093                     	;# 
  1491  0094                     	;# 
  1492  0095                     	;# 
  1493  0096                     	;# 
  1494  0098                     	;# 
  1495  0099                     	;# 
  1496  009A                     	;# 
  1497  009B                     	;# 
  1498  009B                     	;# 
  1499  009C                     	;# 
  1500  009D                     	;# 
  1501  009E                     	;# 
  1502  009F                     	;# 
  1503  010C                     	;# 
  1504  010D                     	;# 
  1505  010E                     	;# 
  1506  0111                     	;# 
  1507  0112                     	;# 
  1508  0113                     	;# 
  1509  0114                     	;# 
  1510  0115                     	;# 
  1511  0116                     	;# 
  1512  0117                     	;# 
  1513  0118                     	;# 
  1514  0119                     	;# 
  1515  011C                     	;# 
  1516  018C                     	;# 
  1517  018D                     	;# 
  1518  018E                     	;# 
  1519  0191                     	;# 
  1520  0191                     	;# 
  1521  0192                     	;# 
  1522  0193                     	;# 
  1523  0193                     	;# 
  1524  0194                     	;# 
  1525  0195                     	;# 
  1526  0196                     	;# 
  1527  0197                     	;# 
  1528  0199                     	;# 
  1529  0199                     	;# 
  1530  0199                     	;# 
  1531  019A                     	;# 
  1532  019A                     	;# 
  1533  019A                     	;# 
  1534  019B                     	;# 
  1535  019B                     	;# 
  1536  019B                     	;# 
  1537  019B                     	;# 
  1538  019B                     	;# 
  1539  019C                     	;# 
  1540  019C                     	;# 
  1541  019C                     	;# 
  1542  019D                     	;# 
  1543  019D                     	;# 
  1544  019D                     	;# 
  1545  019E                     	;# 
  1546  019E                     	;# 
  1547  019E                     	;# 
  1548  019F                     	;# 
  1549  019F                     	;# 
  1550  019F                     	;# 
  1551  019F                     	;# 
  1552  019F                     	;# 
  1553  020C                     	;# 
  1554  020D                     	;# 
  1555  020E                     	;# 
  1556  0211                     	;# 
  1557  0211                     	;# 
  1558  0212                     	;# 
  1559  0212                     	;# 
  1560  0213                     	;# 
  1561  0213                     	;# 
  1562  0214                     	;# 
  1563  0214                     	;# 
  1564  0215                     	;# 
  1565  0215                     	;# 
  1566  0215                     	;# 
  1567  0215                     	;# 
  1568  0216                     	;# 
  1569  0216                     	;# 
  1570  0217                     	;# 
  1571  0217                     	;# 
  1572  028C                     	;# 
  1573  028D                     	;# 
  1574  028E                     	;# 
  1575  0291                     	;# 
  1576  0291                     	;# 
  1577  0292                     	;# 
  1578  0293                     	;# 
  1579  0294                     	;# 
  1580  0298                     	;# 
  1581  0298                     	;# 
  1582  0299                     	;# 
  1583  029A                     	;# 
  1584  029B                     	;# 
  1585  029E                     	;# 
  1586  030C                     	;# 
  1587  030D                     	;# 
  1588  030E                     	;# 
  1589  038C                     	;# 
  1590  038D                     	;# 
  1591  038E                     	;# 
  1592  0391                     	;# 
  1593  0392                     	;# 
  1594  0393                     	;# 
  1595  0394                     	;# 
  1596  0395                     	;# 
  1597  0396                     	;# 
  1598  0397                     	;# 
  1599  0398                     	;# 
  1600  0399                     	;# 
  1601  040E                     	;# 
  1602  0413                     	;# 
  1603  0413                     	;# 
  1604  0414                     	;# 
  1605  0414                     	;# 
  1606  0415                     	;# 
  1607  0416                     	;# 
  1608  0417                     	;# 
  1609  0418                     	;# 
  1610  041A                     	;# 
  1611  041A                     	;# 
  1612  041B                     	;# 
  1613  041B                     	;# 
  1614  041C                     	;# 
  1615  041D                     	;# 
  1616  041E                     	;# 
  1617  041F                     	;# 
  1618  0493                     	;# 
  1619  0494                     	;# 
  1620  0495                     	;# 
  1621  0496                     	;# 
  1622  049A                     	;# 
  1623  049B                     	;# 
  1624  049C                     	;# 
  1625  049D                     	;# 
  1626  058C                     	;# 
  1627  058C                     	;# 
  1628  058D                     	;# 
  1629  058E                     	;# 
  1630  058E                     	;# 
  1631  058F                     	;# 
  1632  0590                     	;# 
  1633  0590                     	;# 
  1634  0591                     	;# 
  1635  0592                     	;# 
  1636  0592                     	;# 
  1637  0593                     	;# 
  1638  0594                     	;# 
  1639  0594                     	;# 
  1640  0595                     	;# 
  1641  0596                     	;# 
  1642  0596                     	;# 
  1643  0597                     	;# 
  1644  0598                     	;# 
  1645  0599                     	;# 
  1646  059A                     	;# 
  1647  059B                     	;# 
  1648  059B                     	;# 
  1649  059C                     	;# 
  1650  059D                     	;# 
  1651  060C                     	;# 
  1652  060C                     	;# 
  1653  060D                     	;# 
  1654  060E                     	;# 
  1655  060F                     	;# 
  1656  060F                     	;# 
  1657  0610                     	;# 
  1658  0611                     	;# 
  1659  0612                     	;# 
  1660  0613                     	;# 
  1661  0614                     	;# 
  1662  0617                     	;# 
  1663  0618                     	;# 
  1664  0619                     	;# 
  1665  061A                     	;# 
  1666  061B                     	;# 
  1667  061C                     	;# 
  1668  0691                     	;# 
  1669  0692                     	;# 
  1670  0693                     	;# 
  1671  0694                     	;# 
  1672  0695                     	;# 
  1673  0696                     	;# 
  1674  0697                     	;# 
  1675  0699                     	;# 
  1676  069A                     	;# 
  1677  0711                     	;# 
  1678  0712                     	;# 
  1679  0713                     	;# 
  1680  0714                     	;# 
  1681  0715                     	;# 
  1682  0718                     	;# 
  1683  0718                     	;# 
  1684  0719                     	;# 
  1685  071A                     	;# 
  1686  071A                     	;# 
  1687  071B                     	;# 
  1688  071C                     	;# 
  1689  071D                     	;# 
  1690  0791                     	;# 
  1691  0791                     	;# 
  1692  0792                     	;# 
  1693  0793                     	;# 
  1694  0793                     	;# 
  1695  0794                     	;# 
  1696  0795                     	;# 
  1697  0795                     	;# 
  1698  0796                     	;# 
  1699  0797                     	;# 
  1700  0797                     	;# 
  1701  0798                     	;# 
  1702  0799                     	;# 
  1703  079A                     	;# 
  1704  080C                     	;# 
  1705  080C                     	;# 
  1706  080D                     	;# 
  1707  080E                     	;# 
  1708  080E                     	;# 
  1709  080F                     	;# 
  1710  0810                     	;# 
  1711  0810                     	;# 
  1712  0811                     	;# 
  1713  0812                     	;# 
  1714  0812                     	;# 
  1715  0813                     	;# 
  1716  0814                     	;# 
  1717  0815                     	;# 
  1718  0816                     	;# 
  1719  0817                     	;# 
  1720  0818                     	;# 
  1721  0819                     	;# 
  1722  081A                     	;# 
  1723  081A                     	;# 
  1724  081B                     	;# 
  1725  081C                     	;# 
  1726  081C                     	;# 
  1727  081D                     	;# 
  1728  088C                     	;# 
  1729  088D                     	;# 
  1730  088E                     	;# 
  1731  088F                     	;# 
  1732  088F                     	;# 
  1733  0890                     	;# 
  1734  0891                     	;# 
  1735  0892                     	;# 
  1736  0893                     	;# 
  1737  0893                     	;# 
  1738  0894                     	;# 
  1739  0895                     	;# 
  1740  0896                     	;# 
  1741  0897                     	;# 
  1742  0897                     	;# 
  1743  0898                     	;# 
  1744  0899                     	;# 
  1745  0D8C                     	;# 
  1746  0D8C                     	;# 
  1747  0D8D                     	;# 
  1748  0D8E                     	;# 
  1749  0D8F                     	;# 
  1750  0D8F                     	;# 
  1751  0D90                     	;# 
  1752  0D91                     	;# 
  1753  0D92                     	;# 
  1754  0D92                     	;# 
  1755  0D93                     	;# 
  1756  0D94                     	;# 
  1757  0D95                     	;# 
  1758  0D95                     	;# 
  1759  0D96                     	;# 
  1760  0D97                     	;# 
  1761  0D98                     	;# 
  1762  0D99                     	;# 
  1763  0D9A                     	;# 
  1764  0D9B                     	;# 
  1765  0D9C                     	;# 
  1766  0D9D                     	;# 
  1767  0D9E                     	;# 
  1768  0D9E                     	;# 
  1769  0D9F                     	;# 
  1770  0DA0                     	;# 
  1771  0DA1                     	;# 
  1772  0DA1                     	;# 
  1773  0DA2                     	;# 
  1774  0DA3                     	;# 
  1775  0DA4                     	;# 
  1776  0DA4                     	;# 
  1777  0DA5                     	;# 
  1778  0DA6                     	;# 
  1779  0DA7                     	;# 
  1780  0DA7                     	;# 
  1781  0DA8                     	;# 
  1782  0DA9                     	;# 
  1783  0DAA                     	;# 
  1784  0DAB                     	;# 
  1785  0DAC                     	;# 
  1786  0DAD                     	;# 
  1787  0DAE                     	;# 
  1788  0DAF                     	;# 
  1789  0E0F                     	;# 
  1790  0E10                     	;# 
  1791  0E11                     	;# 
  1792  0E12                     	;# 
  1793  0E13                     	;# 
  1794  0E14                     	;# 
  1795  0E15                     	;# 
  1796  0E16                     	;# 
  1797  0E17                     	;# 
  1798  0E18                     	;# 
  1799  0E19                     	;# 
  1800  0E1A                     	;# 
  1801  0E1B                     	;# 
  1802  0E1C                     	;# 
  1803  0E1D                     	;# 
  1804  0E1E                     	;# 
  1805  0E1F                     	;# 
  1806  0E20                     	;# 
  1807  0E21                     	;# 
  1808  0E22                     	;# 
  1809  0E23                     	;# 
  1810  0E24                     	;# 
  1811  0E25                     	;# 
  1812  0E26                     	;# 
  1813  0E27                     	;# 
  1814  0E28                     	;# 
  1815  0E29                     	;# 
  1816  0E2A                     	;# 
  1817  0E2B                     	;# 
  1818  0E2C                     	;# 
  1819  0E2D                     	;# 
  1820  0E2E                     	;# 
  1821  0E90                     	;# 
  1822  0E91                     	;# 
  1823  0E92                     	;# 
  1824  0E94                     	;# 
  1825  0E95                     	;# 
  1826  0E9C                     	;# 
  1827  0E9D                     	;# 
  1828  0E9E                     	;# 
  1829  0E9F                     	;# 
  1830  0EA0                     	;# 
  1831  0EA1                     	;# 
  1832  0EA2                     	;# 
  1833  0EA3                     	;# 
  1834  0EA4                     	;# 
  1835  0EA5                     	;# 
  1836  0EA6                     	;# 
  1837  0EA7                     	;# 
  1838  0F0F                     	;# 
  1839  0F10                     	;# 
  1840  0F11                     	;# 
  1841  0F12                     	;# 
  1842  0F13                     	;# 
  1843  0F14                     	;# 
  1844  0F15                     	;# 
  1845  0F16                     	;# 
  1846  0F17                     	;# 
  1847  0F18                     	;# 
  1848  0F19                     	;# 
  1849  0F1A                     	;# 
  1850  0F1B                     	;# 
  1851  0F1C                     	;# 
  1852  0F1D                     	;# 
  1853  0F1E                     	;# 
  1854  0F1F                     	;# 
  1855  0F20                     	;# 
  1856  0F21                     	;# 
  1857  0F22                     	;# 
  1858  0F23                     	;# 
  1859  0F24                     	;# 
  1860  0F25                     	;# 
  1861  0F26                     	;# 
  1862  0F27                     	;# 
  1863  0F28                     	;# 
  1864  0F29                     	;# 
  1865  0F2A                     	;# 
  1866  0F2B                     	;# 
  1867  0F2C                     	;# 
  1868  0F2D                     	;# 
  1869  0F2E                     	;# 
  1870  0F2F                     	;# 
  1871  0F30                     	;# 
  1872  0F31                     	;# 
  1873  0F32                     	;# 
  1874  0F33                     	;# 
  1875  0F34                     	;# 
  1876  0F35                     	;# 
  1877  0F36                     	;# 
  1878  0F37                     	;# 
  1879  0FE4                     	;# 
  1880  0FE5                     	;# 
  1881  0FE6                     	;# 
  1882  0FE7                     	;# 
  1883  0FE8                     	;# 
  1884  0FE9                     	;# 
  1885  0FEA                     	;# 
  1886  0FEB                     	;# 
  1887  0FED                     	;# 
  1888  0FEE                     	;# 
  1889  0FEF                     	;# 
  1890  0000                     	;# 
  1891  0001                     	;# 
  1892  0002                     	;# 
  1893  0003                     	;# 
  1894  0004                     	;# 
  1895  0005                     	;# 
  1896  0006                     	;# 
  1897  0007                     	;# 
  1898  0008                     	;# 
  1899  0009                     	;# 
  1900  000A                     	;# 
  1901  000B                     	;# 
  1902  000C                     	;# 
  1903  000D                     	;# 
  1904  000E                     	;# 
  1905  0010                     	;# 
  1906  0011                     	;# 
  1907  0012                     	;# 
  1908  0013                     	;# 
  1909  0014                     	;# 
  1910  0015                     	;# 
  1911  0016                     	;# 
  1912  0016                     	;# 
  1913  0017                     	;# 
  1914  0018                     	;# 
  1915  0019                     	;# 
  1916  001A                     	;# 
  1917  001A                     	;# 
  1918  001B                     	;# 
  1919  001B                     	;# 
  1920  001C                     	;# 
  1921  001D                     	;# 
  1922  001E                     	;# 
  1923  001F                     	;# 
  1924  008C                     	;# 
  1925  008D                     	;# 
  1926  008E                     	;# 
  1927  0090                     	;# 
  1928  0091                     	;# 
  1929  0092                     	;# 
  1930  0093                     	;# 
  1931  0094                     	;# 
  1932  0095                     	;# 
  1933  0096                     	;# 
  1934  0098                     	;# 
  1935  0099                     	;# 
  1936  009A                     	;# 
  1937  009B                     	;# 
  1938  009B                     	;# 
  1939  009C                     	;# 
  1940  009D                     	;# 
  1941  009E                     	;# 
  1942  009F                     	;# 
  1943  010C                     	;# 
  1944  010D                     	;# 
  1945  010E                     	;# 
  1946  0111                     	;# 
  1947  0112                     	;# 
  1948  0113                     	;# 
  1949  0114                     	;# 
  1950  0115                     	;# 
  1951  0116                     	;# 
  1952  0117                     	;# 
  1953  0118                     	;# 
  1954  0119                     	;# 
  1955  011C                     	;# 
  1956  018C                     	;# 
  1957  018D                     	;# 
  1958  018E                     	;# 
  1959  0191                     	;# 
  1960  0191                     	;# 
  1961  0192                     	;# 
  1962  0193                     	;# 
  1963  0193                     	;# 
  1964  0194                     	;# 
  1965  0195                     	;# 
  1966  0196                     	;# 
  1967  0197                     	;# 
  1968  0199                     	;# 
  1969  0199                     	;# 
  1970  0199                     	;# 
  1971  019A                     	;# 
  1972  019A                     	;# 
  1973  019A                     	;# 
  1974  019B                     	;# 
  1975  019B                     	;# 
  1976  019B                     	;# 
  1977  019B                     	;# 
  1978  019B                     	;# 
  1979  019C                     	;# 
  1980  019C                     	;# 
  1981  019C                     	;# 
  1982  019D                     	;# 
  1983  019D                     	;# 
  1984  019D                     	;# 
  1985  019E                     	;# 
  1986  019E                     	;# 
  1987  019E                     	;# 
  1988  019F                     	;# 
  1989  019F                     	;# 
  1990  019F                     	;# 
  1991  019F                     	;# 
  1992  019F                     	;# 
  1993  020C                     	;# 
  1994  020D                     	;# 
  1995  020E                     	;# 
  1996  0211                     	;# 
  1997  0211                     	;# 
  1998  0212                     	;# 
  1999  0212                     	;# 
  2000  0213                     	;# 
  2001  0213                     	;# 
  2002  0214                     	;# 
  2003  0214                     	;# 
  2004  0215                     	;# 
  2005  0215                     	;# 
  2006  0215                     	;# 
  2007  0215                     	;# 
  2008  0216                     	;# 
  2009  0216                     	;# 
  2010  0217                     	;# 
  2011  0217                     	;# 
  2012  028C                     	;# 
  2013  028D                     	;# 
  2014  028E                     	;# 
  2015  0291                     	;# 
  2016  0291                     	;# 
  2017  0292                     	;# 
  2018  0293                     	;# 
  2019  0294                     	;# 
  2020  0298                     	;# 
  2021  0298                     	;# 
  2022  0299                     	;# 
  2023  029A                     	;# 
  2024  029B                     	;# 
  2025  029E                     	;# 
  2026  030C                     	;# 
  2027  030D                     	;# 
  2028  030E                     	;# 
  2029  038C                     	;# 
  2030  038D                     	;# 
  2031  038E                     	;# 
  2032  0391                     	;# 
  2033  0392                     	;# 
  2034  0393                     	;# 
  2035  0394                     	;# 
  2036  0395                     	;# 
  2037  0396                     	;# 
  2038  0397                     	;# 
  2039  0398                     	;# 
  2040  0399                     	;# 
  2041  040E                     	;# 
  2042  0413                     	;# 
  2043  0413                     	;# 
  2044  0414                     	;# 
  2045  0414                     	;# 
  2046  0415                     	;# 
  2047  0416                     	;# 
  2048  0417                     	;# 
  2049  0418                     	;# 
  2050  041A                     	;# 
  2051  041A                     	;# 
  2052  041B                     	;# 
  2053  041B                     	;# 
  2054  041C                     	;# 
  2055  041D                     	;# 
  2056  041E                     	;# 
  2057  041F                     	;# 
  2058  0493                     	;# 
  2059  0494                     	;# 
  2060  0495                     	;# 
  2061  0496                     	;# 
  2062  049A                     	;# 
  2063  049B                     	;# 
  2064  049C                     	;# 
  2065  049D                     	;# 
  2066  058C                     	;# 
  2067  058C                     	;# 
  2068  058D                     	;# 
  2069  058E                     	;# 
  2070  058E                     	;# 
  2071  058F                     	;# 
  2072  0590                     	;# 
  2073  0590                     	;# 
  2074  0591                     	;# 
  2075  0592                     	;# 
  2076  0592                     	;# 
  2077  0593                     	;# 
  2078  0594                     	;# 
  2079  0594                     	;# 
  2080  0595                     	;# 
  2081  0596                     	;# 
  2082  0596                     	;# 
  2083  0597                     	;# 
  2084  0598                     	;# 
  2085  0599                     	;# 
  2086  059A                     	;# 
  2087  059B                     	;# 
  2088  059B                     	;# 
  2089  059C                     	;# 
  2090  059D                     	;# 
  2091  060C                     	;# 
  2092  060C                     	;# 
  2093  060D                     	;# 
  2094  060E                     	;# 
  2095  060F                     	;# 
  2096  060F                     	;# 
  2097  0610                     	;# 
  2098  0611                     	;# 
  2099  0612                     	;# 
  2100  0613                     	;# 
  2101  0614                     	;# 
  2102  0617                     	;# 
  2103  0618                     	;# 
  2104  0619                     	;# 
  2105  061A                     	;# 
  2106  061B                     	;# 
  2107  061C                     	;# 
  2108  0691                     	;# 
  2109  0692                     	;# 
  2110  0693                     	;# 
  2111  0694                     	;# 
  2112  0695                     	;# 
  2113  0696                     	;# 
  2114  0697                     	;# 
  2115  0699                     	;# 
  2116  069A                     	;# 
  2117  0711                     	;# 
  2118  0712                     	;# 
  2119  0713                     	;# 
  2120  0714                     	;# 
  2121  0715                     	;# 
  2122  0718                     	;# 
  2123  0718                     	;# 
  2124  0719                     	;# 
  2125  071A                     	;# 
  2126  071A                     	;# 
  2127  071B                     	;# 
  2128  071C                     	;# 
  2129  071D                     	;# 
  2130  0791                     	;# 
  2131  0791                     	;# 
  2132  0792                     	;# 
  2133  0793                     	;# 
  2134  0793                     	;# 
  2135  0794                     	;# 
  2136  0795                     	;# 
  2137  0795                     	;# 
  2138  0796                     	;# 
  2139  0797                     	;# 
  2140  0797                     	;# 
  2141  0798                     	;# 
  2142  0799                     	;# 
  2143  079A                     	;# 
  2144  080C                     	;# 
  2145  080C                     	;# 
  2146  080D                     	;# 
  2147  080E                     	;# 
  2148  080E                     	;# 
  2149  080F                     	;# 
  2150  0810                     	;# 
  2151  0810                     	;# 
  2152  0811                     	;# 
  2153  0812                     	;# 
  2154  0812                     	;# 
  2155  0813                     	;# 
  2156  0814                     	;# 
  2157  0815                     	;# 
  2158  0816                     	;# 
  2159  0817                     	;# 
  2160  0818                     	;# 
  2161  0819                     	;# 
  2162  081A                     	;# 
  2163  081A                     	;# 
  2164  081B                     	;# 
  2165  081C                     	;# 
  2166  081C                     	;# 
  2167  081D                     	;# 
  2168  088C                     	;# 
  2169  088D                     	;# 
  2170  088E                     	;# 
  2171  088F                     	;# 
  2172  088F                     	;# 
  2173  0890                     	;# 
  2174  0891                     	;# 
  2175  0892                     	;# 
  2176  0893                     	;# 
  2177  0893                     	;# 
  2178  0894                     	;# 
  2179  0895                     	;# 
  2180  0896                     	;# 
  2181  0897                     	;# 
  2182  0897                     	;# 
  2183  0898                     	;# 
  2184  0899                     	;# 
  2185  0D8C                     	;# 
  2186  0D8C                     	;# 
  2187  0D8D                     	;# 
  2188  0D8E                     	;# 
  2189  0D8F                     	;# 
  2190  0D8F                     	;# 
  2191  0D90                     	;# 
  2192  0D91                     	;# 
  2193  0D92                     	;# 
  2194  0D92                     	;# 
  2195  0D93                     	;# 
  2196  0D94                     	;# 
  2197  0D95                     	;# 
  2198  0D95                     	;# 
  2199  0D96                     	;# 
  2200  0D97                     	;# 
  2201  0D98                     	;# 
  2202  0D99                     	;# 
  2203  0D9A                     	;# 
  2204  0D9B                     	;# 
  2205  0D9C                     	;# 
  2206  0D9D                     	;# 
  2207  0D9E                     	;# 
  2208  0D9E                     	;# 
  2209  0D9F                     	;# 
  2210  0DA0                     	;# 
  2211  0DA1                     	;# 
  2212  0DA1                     	;# 
  2213  0DA2                     	;# 
  2214  0DA3                     	;# 
  2215  0DA4                     	;# 
  2216  0DA4                     	;# 
  2217  0DA5                     	;# 
  2218  0DA6                     	;# 
  2219  0DA7                     	;# 
  2220  0DA7                     	;# 
  2221  0DA8                     	;# 
  2222  0DA9                     	;# 
  2223  0DAA                     	;# 
  2224  0DAB                     	;# 
  2225  0DAC                     	;# 
  2226  0DAD                     	;# 
  2227  0DAE                     	;# 
  2228  0DAF                     	;# 
  2229  0E0F                     	;# 
  2230  0E10                     	;# 
  2231  0E11                     	;# 
  2232  0E12                     	;# 
  2233  0E13                     	;# 
  2234  0E14                     	;# 
  2235  0E15                     	;# 
  2236  0E16                     	;# 
  2237  0E17                     	;# 
  2238  0E18                     	;# 
  2239  0E19                     	;# 
  2240  0E1A                     	;# 
  2241  0E1B                     	;# 
  2242  0E1C                     	;# 
  2243  0E1D                     	;# 
  2244  0E1E                     	;# 
  2245  0E1F                     	;# 
  2246  0E20                     	;# 
  2247  0E21                     	;# 
  2248  0E22                     	;# 
  2249  0E23                     	;# 
  2250  0E24                     	;# 
  2251  0E25                     	;# 
  2252  0E26                     	;# 
  2253  0E27                     	;# 
  2254  0E28                     	;# 
  2255  0E29                     	;# 
  2256  0E2A                     	;# 
  2257  0E2B                     	;# 
  2258  0E2C                     	;# 
  2259  0E2D                     	;# 
  2260  0E2E                     	;# 
  2261  0E90                     	;# 
  2262  0E91                     	;# 
  2263  0E92                     	;# 
  2264  0E94                     	;# 
  2265  0E95                     	;# 
  2266  0E9C                     	;# 
  2267  0E9D                     	;# 
  2268  0E9E                     	;# 
  2269  0E9F                     	;# 
  2270  0EA0                     	;# 
  2271  0EA1                     	;# 
  2272  0EA2                     	;# 
  2273  0EA3                     	;# 
  2274  0EA4                     	;# 
  2275  0EA5                     	;# 
  2276  0EA6                     	;# 
  2277  0EA7                     	;# 
  2278  0F0F                     	;# 
  2279  0F10                     	;# 
  2280  0F11                     	;# 
  2281  0F12                     	;# 
  2282  0F13                     	;# 
  2283  0F14                     	;# 
  2284  0F15                     	;# 
  2285  0F16                     	;# 
  2286  0F17                     	;# 
  2287  0F18                     	;# 
  2288  0F19                     	;# 
  2289  0F1A                     	;# 
  2290  0F1B                     	;# 
  2291  0F1C                     	;# 
  2292  0F1D                     	;# 
  2293  0F1E                     	;# 
  2294  0F1F                     	;# 
  2295  0F20                     	;# 
  2296  0F21                     	;# 
  2297  0F22                     	;# 
  2298  0F23                     	;# 
  2299  0F24                     	;# 
  2300  0F25                     	;# 
  2301  0F26                     	;# 
  2302  0F27                     	;# 
  2303  0F28                     	;# 
  2304  0F29                     	;# 
  2305  0F2A                     	;# 
  2306  0F2B                     	;# 
  2307  0F2C                     	;# 
  2308  0F2D                     	;# 
  2309  0F2E                     	;# 
  2310  0F2F                     	;# 
  2311  0F30                     	;# 
  2312  0F31                     	;# 
  2313  0F32                     	;# 
  2314  0F33                     	;# 
  2315  0F34                     	;# 
  2316  0F35                     	;# 
  2317  0F36                     	;# 
  2318  0F37                     	;# 
  2319  0FE4                     	;# 
  2320  0FE5                     	;# 
  2321  0FE6                     	;# 
  2322  0FE7                     	;# 
  2323  0FE8                     	;# 
  2324  0FE9                     	;# 
  2325  0FEA                     	;# 
  2326  0FEB                     	;# 
  2327  0FED                     	;# 
  2328  0FEE                     	;# 
  2329  0FEF                     	;# 
  2330  0000                     	;# 
  2331  0001                     	;# 
  2332  0002                     	;# 
  2333  0003                     	;# 
  2334  0004                     	;# 
  2335  0005                     	;# 
  2336  0006                     	;# 
  2337  0007                     	;# 
  2338  0008                     	;# 
  2339  0009                     	;# 
  2340  000A                     	;# 
  2341  000B                     	;# 
  2342  000C                     	;# 
  2343  000D                     	;# 
  2344  000E                     	;# 
  2345  0010                     	;# 
  2346  0011                     	;# 
  2347  0012                     	;# 
  2348  0013                     	;# 
  2349  0014                     	;# 
  2350  0015                     	;# 
  2351  0016                     	;# 
  2352  0016                     	;# 
  2353  0017                     	;# 
  2354  0018                     	;# 
  2355  0019                     	;# 
  2356  001A                     	;# 
  2357  001A                     	;# 
  2358  001B                     	;# 
  2359  001B                     	;# 
  2360  001C                     	;# 
  2361  001D                     	;# 
  2362  001E                     	;# 
  2363  001F                     	;# 
  2364  008C                     	;# 
  2365  008D                     	;# 
  2366  008E                     	;# 
  2367  0090                     	;# 
  2368  0091                     	;# 
  2369  0092                     	;# 
  2370  0093                     	;# 
  2371  0094                     	;# 
  2372  0095                     	;# 
  2373  0096                     	;# 
  2374  0098                     	;# 
  2375  0099                     	;# 
  2376  009A                     	;# 
  2377  009B                     	;# 
  2378  009B                     	;# 
  2379  009C                     	;# 
  2380  009D                     	;# 
  2381  009E                     	;# 
  2382  009F                     	;# 
  2383  010C                     	;# 
  2384  010D                     	;# 
  2385  010E                     	;# 
  2386  0111                     	;# 
  2387  0112                     	;# 
  2388  0113                     	;# 
  2389  0114                     	;# 
  2390  0115                     	;# 
  2391  0116                     	;# 
  2392  0117                     	;# 
  2393  0118                     	;# 
  2394  0119                     	;# 
  2395  011C                     	;# 
  2396  018C                     	;# 
  2397  018D                     	;# 
  2398  018E                     	;# 
  2399  0191                     	;# 
  2400  0191                     	;# 
  2401  0192                     	;# 
  2402  0193                     	;# 
  2403  0193                     	;# 
  2404  0194                     	;# 
  2405  0195                     	;# 
  2406  0196                     	;# 
  2407  0197                     	;# 
  2408  0199                     	;# 
  2409  0199                     	;# 
  2410  0199                     	;# 
  2411  019A                     	;# 
  2412  019A                     	;# 
  2413  019A                     	;# 
  2414  019B                     	;# 
  2415  019B                     	;# 
  2416  019B                     	;# 
  2417  019B                     	;# 
  2418  019B                     	;# 
  2419  019C                     	;# 
  2420  019C                     	;# 
  2421  019C                     	;# 
  2422  019D                     	;# 
  2423  019D                     	;# 
  2424  019D                     	;# 
  2425  019E                     	;# 
  2426  019E                     	;# 
  2427  019E                     	;# 
  2428  019F                     	;# 
  2429  019F                     	;# 
  2430  019F                     	;# 
  2431  019F                     	;# 
  2432  019F                     	;# 
  2433  020C                     	;# 
  2434  020D                     	;# 
  2435  020E                     	;# 
  2436  0211                     	;# 
  2437  0211                     	;# 
  2438  0212                     	;# 
  2439  0212                     	;# 
  2440  0213                     	;# 
  2441  0213                     	;# 
  2442  0214                     	;# 
  2443  0214                     	;# 
  2444  0215                     	;# 
  2445  0215                     	;# 
  2446  0215                     	;# 
  2447  0215                     	;# 
  2448  0216                     	;# 
  2449  0216                     	;# 
  2450  0217                     	;# 
  2451  0217                     	;# 
  2452  028C                     	;# 
  2453  028D                     	;# 
  2454  028E                     	;# 
  2455  0291                     	;# 
  2456  0291                     	;# 
  2457  0292                     	;# 
  2458  0293                     	;# 
  2459  0294                     	;# 
  2460  0298                     	;# 
  2461  0298                     	;# 
  2462  0299                     	;# 
  2463  029A                     	;# 
  2464  029B                     	;# 
  2465  029E                     	;# 
  2466  030C                     	;# 
  2467  030D                     	;# 
  2468  030E                     	;# 
  2469  038C                     	;# 
  2470  038D                     	;# 
  2471  038E                     	;# 
  2472  0391                     	;# 
  2473  0392                     	;# 
  2474  0393                     	;# 
  2475  0394                     	;# 
  2476  0395                     	;# 
  2477  0396                     	;# 
  2478  0397                     	;# 
  2479  0398                     	;# 
  2480  0399                     	;# 
  2481  040E                     	;# 
  2482  0413                     	;# 
  2483  0413                     	;# 
  2484  0414                     	;# 
  2485  0414                     	;# 
  2486  0415                     	;# 
  2487  0416                     	;# 
  2488  0417                     	;# 
  2489  0418                     	;# 
  2490  041A                     	;# 
  2491  041A                     	;# 
  2492  041B                     	;# 
  2493  041B                     	;# 
  2494  041C                     	;# 
  2495  041D                     	;# 
  2496  041E                     	;# 
  2497  041F                     	;# 
  2498  0493                     	;# 
  2499  0494                     	;# 
  2500  0495                     	;# 
  2501  0496                     	;# 
  2502  049A                     	;# 
  2503  049B                     	;# 
  2504  049C                     	;# 
  2505  049D                     	;# 
  2506  058C                     	;# 
  2507  058C                     	;# 
  2508  058D                     	;# 
  2509  058E                     	;# 
  2510  058E                     	;# 
  2511  058F                     	;# 
  2512  0590                     	;# 
  2513  0590                     	;# 
  2514  0591                     	;# 
  2515  0592                     	;# 
  2516  0592                     	;# 
  2517  0593                     	;# 
  2518  0594                     	;# 
  2519  0594                     	;# 
  2520  0595                     	;# 
  2521  0596                     	;# 
  2522  0596                     	;# 
  2523  0597                     	;# 
  2524  0598                     	;# 
  2525  0599                     	;# 
  2526  059A                     	;# 
  2527  059B                     	;# 
  2528  059B                     	;# 
  2529  059C                     	;# 
  2530  059D                     	;# 
  2531  060C                     	;# 
  2532  060C                     	;# 
  2533  060D                     	;# 
  2534  060E                     	;# 
  2535  060F                     	;# 
  2536  060F                     	;# 
  2537  0610                     	;# 
  2538  0611                     	;# 
  2539  0612                     	;# 
  2540  0613                     	;# 
  2541  0614                     	;# 
  2542  0617                     	;# 
  2543  0618                     	;# 
  2544  0619                     	;# 
  2545  061A                     	;# 
  2546  061B                     	;# 
  2547  061C                     	;# 
  2548  0691                     	;# 
  2549  0692                     	;# 
  2550  0693                     	;# 
  2551  0694                     	;# 
  2552  0695                     	;# 
  2553  0696                     	;# 
  2554  0697                     	;# 
  2555  0699                     	;# 
  2556  069A                     	;# 
  2557  0711                     	;# 
  2558  0712                     	;# 
  2559  0713                     	;# 
  2560  0714                     	;# 
  2561  0715                     	;# 
  2562  0718                     	;# 
  2563  0718                     	;# 
  2564  0719                     	;# 
  2565  071A                     	;# 
  2566  071A                     	;# 
  2567  071B                     	;# 
  2568  071C                     	;# 
  2569  071D                     	;# 
  2570  0791                     	;# 
  2571  0791                     	;# 
  2572  0792                     	;# 
  2573  0793                     	;# 
  2574  0793                     	;# 
  2575  0794                     	;# 
  2576  0795                     	;# 
  2577  0795                     	;# 
  2578  0796                     	;# 
  2579  0797                     	;# 
  2580  0797                     	;# 
  2581  0798                     	;# 
  2582  0799                     	;# 
  2583  079A                     	;# 
  2584  080C                     	;# 
  2585  080C                     	;# 
  2586  080D                     	;# 
  2587  080E                     	;# 
  2588  080E                     	;# 
  2589  080F                     	;# 
  2590  0810                     	;# 
  2591  0810                     	;# 
  2592  0811                     	;# 
  2593  0812                     	;# 
  2594  0812                     	;# 
  2595  0813                     	;# 
  2596  0814                     	;# 
  2597  0815                     	;# 
  2598  0816                     	;# 
  2599  0817                     	;# 
  2600  0818                     	;# 
  2601  0819                     	;# 
  2602  081A                     	;# 
  2603  081A                     	;# 
  2604  081B                     	;# 
  2605  081C                     	;# 
  2606  081C                     	;# 
  2607  081D                     	;# 
  2608  088C                     	;# 
  2609  088D                     	;# 
  2610  088E                     	;# 
  2611  088F                     	;# 
  2612  088F                     	;# 
  2613  0890                     	;# 
  2614  0891                     	;# 
  2615  0892                     	;# 
  2616  0893                     	;# 
  2617  0893                     	;# 
  2618  0894                     	;# 
  2619  0895                     	;# 
  2620  0896                     	;# 
  2621  0897                     	;# 
  2622  0897                     	;# 
  2623  0898                     	;# 
  2624  0899                     	;# 
  2625  0D8C                     	;# 
  2626  0D8C                     	;# 
  2627  0D8D                     	;# 
  2628  0D8E                     	;# 
  2629  0D8F                     	;# 
  2630  0D8F                     	;# 
  2631  0D90                     	;# 
  2632  0D91                     	;# 
  2633  0D92                     	;# 
  2634  0D92                     	;# 
  2635  0D93                     	;# 
  2636  0D94                     	;# 
  2637  0D95                     	;# 
  2638  0D95                     	;# 
  2639  0D96                     	;# 
  2640  0D97                     	;# 
  2641  0D98                     	;# 
  2642  0D99                     	;# 
  2643  0D9A                     	;# 
  2644  0D9B                     	;# 
  2645  0D9C                     	;# 
  2646  0D9D                     	;# 
  2647  0D9E                     	;# 
  2648  0D9E                     	;# 
  2649  0D9F                     	;# 
  2650  0DA0                     	;# 
  2651  0DA1                     	;# 
  2652  0DA1                     	;# 
  2653  0DA2                     	;# 
  2654  0DA3                     	;# 
  2655  0DA4                     	;# 
  2656  0DA4                     	;# 
  2657  0DA5                     	;# 
  2658  0DA6                     	;# 
  2659  0DA7                     	;# 
  2660  0DA7                     	;# 
  2661  0DA8                     	;# 
  2662  0DA9                     	;# 
  2663  0DAA                     	;# 
  2664  0DAB                     	;# 
  2665  0DAC                     	;# 
  2666  0DAD                     	;# 
  2667  0DAE                     	;# 
  2668  0DAF                     	;# 
  2669  0E0F                     	;# 
  2670  0E10                     	;# 
  2671  0E11                     	;# 
  2672  0E12                     	;# 
  2673  0E13                     	;# 
  2674  0E14                     	;# 
  2675  0E15                     	;# 
  2676  0E16                     	;# 
  2677  0E17                     	;# 
  2678  0E18                     	;# 
  2679  0E19                     	;# 
  2680  0E1A                     	;# 
  2681  0E1B                     	;# 
  2682  0E1C                     	;# 
  2683  0E1D                     	;# 
  2684  0E1E                     	;# 
  2685  0E1F                     	;# 
  2686  0E20                     	;# 
  2687  0E21                     	;# 
  2688  0E22                     	;# 
  2689  0E23                     	;# 
  2690  0E24                     	;# 
  2691  0E25                     	;# 
  2692  0E26                     	;# 
  2693  0E27                     	;# 
  2694  0E28                     	;# 
  2695  0E29                     	;# 
  2696  0E2A                     	;# 
  2697  0E2B                     	;# 
  2698  0E2C                     	;# 
  2699  0E2D                     	;# 
  2700  0E2E                     	;# 
  2701  0E90                     	;# 
  2702  0E91                     	;# 
  2703  0E92                     	;# 
  2704  0E94                     	;# 
  2705  0E95                     	;# 
  2706  0E9C                     	;# 
  2707  0E9D                     	;# 
  2708  0E9E                     	;# 
  2709  0E9F                     	;# 
  2710  0EA0                     	;# 
  2711  0EA1                     	;# 
  2712  0EA2                     	;# 
  2713  0EA3                     	;# 
  2714  0EA4                     	;# 
  2715  0EA5                     	;# 
  2716  0EA6                     	;# 
  2717  0EA7                     	;# 
  2718  0F0F                     	;# 
  2719  0F10                     	;# 
  2720  0F11                     	;# 
  2721  0F12                     	;# 
  2722  0F13                     	;# 
  2723  0F14                     	;# 
  2724  0F15                     	;# 
  2725  0F16                     	;# 
  2726  0F17                     	;# 
  2727  0F18                     	;# 
  2728  0F19                     	;# 
  2729  0F1A                     	;# 
  2730  0F1B                     	;# 
  2731  0F1C                     	;# 
  2732  0F1D                     	;# 
  2733  0F1E                     	;# 
  2734  0F1F                     	;# 
  2735  0F20                     	;# 
  2736  0F21                     	;# 
  2737  0F22                     	;# 
  2738  0F23                     	;# 
  2739  0F24                     	;# 
  2740  0F25                     	;# 
  2741  0F26                     	;# 
  2742  0F27                     	;# 
  2743  0F28                     	;# 
  2744  0F29                     	;# 
  2745  0F2A                     	;# 
  2746  0F2B                     	;# 
  2747  0F2C                     	;# 
  2748  0F2D                     	;# 
  2749  0F2E                     	;# 
  2750  0F2F                     	;# 
  2751  0F30                     	;# 
  2752  0F31                     	;# 
  2753  0F32                     	;# 
  2754  0F33                     	;# 
  2755  0F34                     	;# 
  2756  0F35                     	;# 
  2757  0F36                     	;# 
  2758  0F37                     	;# 
  2759  0FE4                     	;# 
  2760  0FE5                     	;# 
  2761  0FE6                     	;# 
  2762  0FE7                     	;# 
  2763  0FE8                     	;# 
  2764  0FE9                     	;# 
  2765  0FEA                     	;# 
  2766  0FEB                     	;# 
  2767  0FED                     	;# 
  2768  0FEE                     	;# 
  2769  0FEF                     	;# 
  2770  0000                     	;# 
  2771  0001                     	;# 
  2772  0002                     	;# 
  2773  0003                     	;# 
  2774  0004                     	;# 
  2775  0005                     	;# 
  2776  0006                     	;# 
  2777  0007                     	;# 
  2778  0008                     	;# 
  2779  0009                     	;# 
  2780  000A                     	;# 
  2781  000B                     	;# 
  2782  000C                     	;# 
  2783  000D                     	;# 
  2784  000E                     	;# 
  2785  0010                     	;# 
  2786  0011                     	;# 
  2787  0012                     	;# 
  2788  0013                     	;# 
  2789  0014                     	;# 
  2790  0015                     	;# 
  2791  0016                     	;# 
  2792  0016                     	;# 
  2793  0017                     	;# 
  2794  0018                     	;# 
  2795  0019                     	;# 
  2796  001A                     	;# 
  2797  001A                     	;# 
  2798  001B                     	;# 
  2799  001B                     	;# 
  2800  001C                     	;# 
  2801  001D                     	;# 
  2802  001E                     	;# 
  2803  001F                     	;# 
  2804  008C                     	;# 
  2805  008D                     	;# 
  2806  008E                     	;# 
  2807  0090                     	;# 
  2808  0091                     	;# 
  2809  0092                     	;# 
  2810  0093                     	;# 
  2811  0094                     	;# 
  2812  0095                     	;# 
  2813  0096                     	;# 
  2814  0098                     	;# 
  2815  0099                     	;# 
  2816  009A                     	;# 
  2817  009B                     	;# 
  2818  009B                     	;# 
  2819  009C                     	;# 
  2820  009D                     	;# 
  2821  009E                     	;# 
  2822  009F                     	;# 
  2823  010C                     	;# 
  2824  010D                     	;# 
  2825  010E                     	;# 
  2826  0111                     	;# 
  2827  0112                     	;# 
  2828  0113                     	;# 
  2829  0114                     	;# 
  2830  0115                     	;# 
  2831  0116                     	;# 
  2832  0117                     	;# 
  2833  0118                     	;# 
  2834  0119                     	;# 
  2835  011C                     	;# 
  2836  018C                     	;# 
  2837  018D                     	;# 
  2838  018E                     	;# 
  2839  0191                     	;# 
  2840  0191                     	;# 
  2841  0192                     	;# 
  2842  0193                     	;# 
  2843  0193                     	;# 
  2844  0194                     	;# 
  2845  0195                     	;# 
  2846  0196                     	;# 
  2847  0197                     	;# 
  2848  0199                     	;# 
  2849  0199                     	;# 
  2850  0199                     	;# 
  2851  019A                     	;# 
  2852  019A                     	;# 
  2853  019A                     	;# 
  2854  019B                     	;# 
  2855  019B                     	;# 
  2856  019B                     	;# 
  2857  019B                     	;# 
  2858  019B                     	;# 
  2859  019C                     	;# 
  2860  019C                     	;# 
  2861  019C                     	;# 
  2862  019D                     	;# 
  2863  019D                     	;# 
  2864  019D                     	;# 
  2865  019E                     	;# 
  2866  019E                     	;# 
  2867  019E                     	;# 
  2868  019F                     	;# 
  2869  019F                     	;# 
  2870  019F                     	;# 
  2871  019F                     	;# 
  2872  019F                     	;# 
  2873  020C                     	;# 
  2874  020D                     	;# 
  2875  020E                     	;# 
  2876  0211                     	;# 
  2877  0211                     	;# 
  2878  0212                     	;# 
  2879  0212                     	;# 
  2880  0213                     	;# 
  2881  0213                     	;# 
  2882  0214                     	;# 
  2883  0214                     	;# 
  2884  0215                     	;# 
  2885  0215                     	;# 
  2886  0215                     	;# 
  2887  0215                     	;# 
  2888  0216                     	;# 
  2889  0216                     	;# 
  2890  0217                     	;# 
  2891  0217                     	;# 
  2892  028C                     	;# 
  2893  028D                     	;# 
  2894  028E                     	;# 
  2895  0291                     	;# 
  2896  0291                     	;# 
  2897  0292                     	;# 
  2898  0293                     	;# 
  2899  0294                     	;# 
  2900  0298                     	;# 
  2901  0298                     	;# 
  2902  0299                     	;# 
  2903  029A                     	;# 
  2904  029B                     	;# 
  2905  029E                     	;# 
  2906  030C                     	;# 
  2907  030D                     	;# 
  2908  030E                     	;# 
  2909  038C                     	;# 
  2910  038D                     	;# 
  2911  038E                     	;# 
  2912  0391                     	;# 
  2913  0392                     	;# 
  2914  0393                     	;# 
  2915  0394                     	;# 
  2916  0395                     	;# 
  2917  0396                     	;# 
  2918  0397                     	;# 
  2919  0398                     	;# 
  2920  0399                     	;# 
  2921  040E                     	;# 
  2922  0413                     	;# 
  2923  0413                     	;# 
  2924  0414                     	;# 
  2925  0414                     	;# 
  2926  0415                     	;# 
  2927  0416                     	;# 
  2928  0417                     	;# 
  2929  0418                     	;# 
  2930  041A                     	;# 
  2931  041A                     	;# 
  2932  041B                     	;# 
  2933  041B                     	;# 
  2934  041C                     	;# 
  2935  041D                     	;# 
  2936  041E                     	;# 
  2937  041F                     	;# 
  2938  0493                     	;# 
  2939  0494                     	;# 
  2940  0495                     	;# 
  2941  0496                     	;# 
  2942  049A                     	;# 
  2943  049B                     	;# 
  2944  049C                     	;# 
  2945  049D                     	;# 
  2946  058C                     	;# 
  2947  058C                     	;# 
  2948  058D                     	;# 
  2949  058E                     	;# 
  2950  058E                     	;# 
  2951  058F                     	;# 
  2952  0590                     	;# 
  2953  0590                     	;# 
  2954  0591                     	;# 
  2955  0592                     	;# 
  2956  0592                     	;# 
  2957  0593                     	;# 
  2958  0594                     	;# 
  2959  0594                     	;# 
  2960  0595                     	;# 
  2961  0596                     	;# 
  2962  0596                     	;# 
  2963  0597                     	;# 
  2964  0598                     	;# 
  2965  0599                     	;# 
  2966  059A                     	;# 
  2967  059B                     	;# 
  2968  059B                     	;# 
  2969  059C                     	;# 
  2970  059D                     	;# 
  2971  060C                     	;# 
  2972  060C                     	;# 
  2973  060D                     	;# 
  2974  060E                     	;# 
  2975  060F                     	;# 
  2976  060F                     	;# 
  2977  0610                     	;# 
  2978  0611                     	;# 
  2979  0612                     	;# 
  2980  0613                     	;# 
  2981  0614                     	;# 
  2982  0617                     	;# 
  2983  0618                     	;# 
  2984  0619                     	;# 
  2985  061A                     	;# 
  2986  061B                     	;# 
  2987  061C                     	;# 
  2988  0691                     	;# 
  2989  0692                     	;# 
  2990  0693                     	;# 
  2991  0694                     	;# 
  2992  0695                     	;# 
  2993  0696                     	;# 
  2994  0697                     	;# 
  2995  0699                     	;# 
  2996  069A                     	;# 
  2997  0711                     	;# 
  2998  0712                     	;# 
  2999  0713                     	;# 
  3000  0714                     	;# 
  3001  0715                     	;# 
  3002  0718                     	;# 
  3003  0718                     	;# 
  3004  0719                     	;# 
  3005  071A                     	;# 
  3006  071A                     	;# 
  3007  071B                     	;# 
  3008  071C                     	;# 
  3009  071D                     	;# 
  3010  0791                     	;# 
  3011  0791                     	;# 
  3012  0792                     	;# 
  3013  0793                     	;# 
  3014  0793                     	;# 
  3015  0794                     	;# 
  3016  0795                     	;# 
  3017  0795                     	;# 
  3018  0796                     	;# 
  3019  0797                     	;# 
  3020  0797                     	;# 
  3021  0798                     	;# 
  3022  0799                     	;# 
  3023  079A                     	;# 
  3024  080C                     	;# 
  3025  080C                     	;# 
  3026  080D                     	;# 
  3027  080E                     	;# 
  3028  080E                     	;# 
  3029  080F                     	;# 
  3030  0810                     	;# 
  3031  0810                     	;# 
  3032  0811                     	;# 
  3033  0812                     	;# 
  3034  0812                     	;# 
  3035  0813                     	;# 
  3036  0814                     	;# 
  3037  0815                     	;# 
  3038  0816                     	;# 
  3039  0817                     	;# 
  3040  0818                     	;# 
  3041  0819                     	;# 
  3042  081A                     	;# 
  3043  081A                     	;# 
  3044  081B                     	;# 
  3045  081C                     	;# 
  3046  081C                     	;# 
  3047  081D                     	;# 
  3048  088C                     	;# 
  3049  088D                     	;# 
  3050  088E                     	;# 
  3051  088F                     	;# 
  3052  088F                     	;# 
  3053  0890                     	;# 
  3054  0891                     	;# 
  3055  0892                     	;# 
  3056  0893                     	;# 
  3057  0893                     	;# 
  3058  0894                     	;# 
  3059  0895                     	;# 
  3060  0896                     	;# 
  3061  0897                     	;# 
  3062  0897                     	;# 
  3063  0898                     	;# 
  3064  0899                     	;# 
  3065  0D8C                     	;# 
  3066  0D8C                     	;# 
  3067  0D8D                     	;# 
  3068  0D8E                     	;# 
  3069  0D8F                     	;# 
  3070  0D8F                     	;# 
  3071  0D90                     	;# 
  3072  0D91                     	;# 
  3073  0D92                     	;# 
  3074  0D92                     	;# 
  3075  0D93                     	;# 
  3076  0D94                     	;# 
  3077  0D95                     	;# 
  3078  0D95                     	;# 
  3079  0D96                     	;# 
  3080  0D97                     	;# 
  3081  0D98                     	;# 
  3082  0D99                     	;# 
  3083  0D9A                     	;# 
  3084  0D9B                     	;# 
  3085  0D9C                     	;# 
  3086  0D9D                     	;# 
  3087  0D9E                     	;# 
  3088  0D9E                     	;# 
  3089  0D9F                     	;# 
  3090  0DA0                     	;# 
  3091  0DA1                     	;# 
  3092  0DA1                     	;# 
  3093  0DA2                     	;# 
  3094  0DA3                     	;# 
  3095  0DA4                     	;# 
  3096  0DA4                     	;# 
  3097  0DA5                     	;# 
  3098  0DA6                     	;# 
  3099  0DA7                     	;# 
  3100  0DA7                     	;# 
  3101  0DA8                     	;# 
  3102  0DA9                     	;# 
  3103  0DAA                     	;# 
  3104  0DAB                     	;# 
  3105  0DAC                     	;# 
  3106  0DAD                     	;# 
  3107  0DAE                     	;# 
  3108  0DAF                     	;# 
  3109  0E0F                     	;# 
  3110  0E10                     	;# 
  3111  0E11                     	;# 
  3112  0E12                     	;# 
  3113  0E13                     	;# 
  3114  0E14                     	;# 
  3115  0E15                     	;# 
  3116  0E16                     	;# 
  3117  0E17                     	;# 
  3118  0E18                     	;# 
  3119  0E19                     	;# 
  3120  0E1A                     	;# 
  3121  0E1B                     	;# 
  3122  0E1C                     	;# 
  3123  0E1D                     	;# 
  3124  0E1E                     	;# 
  3125  0E1F                     	;# 
  3126  0E20                     	;# 
  3127  0E21                     	;# 
  3128  0E22                     	;# 
  3129  0E23                     	;# 
  3130  0E24                     	;# 
  3131  0E25                     	;# 
  3132  0E26                     	;# 
  3133  0E27                     	;# 
  3134  0E28                     	;# 
  3135  0E29                     	;# 
  3136  0E2A                     	;# 
  3137  0E2B                     	;# 
  3138  0E2C                     	;# 
  3139  0E2D                     	;# 
  3140  0E2E                     	;# 
  3141  0E90                     	;# 
  3142  0E91                     	;# 
  3143  0E92                     	;# 
  3144  0E94                     	;# 
  3145  0E95                     	;# 
  3146  0E9C                     	;# 
  3147  0E9D                     	;# 
  3148  0E9E                     	;# 
  3149  0E9F                     	;# 
  3150  0EA0                     	;# 
  3151  0EA1                     	;# 
  3152  0EA2                     	;# 
  3153  0EA3                     	;# 
  3154  0EA4                     	;# 
  3155  0EA5                     	;# 
  3156  0EA6                     	;# 
  3157  0EA7                     	;# 
  3158  0F0F                     	;# 
  3159  0F10                     	;# 
  3160  0F11                     	;# 
  3161  0F12                     	;# 
  3162  0F13                     	;# 
  3163  0F14                     	;# 
  3164  0F15                     	;# 
  3165  0F16                     	;# 
  3166  0F17                     	;# 
  3167  0F18                     	;# 
  3168  0F19                     	;# 
  3169  0F1A                     	;# 
  3170  0F1B                     	;# 
  3171  0F1C                     	;# 
  3172  0F1D                     	;# 
  3173  0F1E                     	;# 
  3174  0F1F                     	;# 
  3175  0F20                     	;# 
  3176  0F21                     	;# 
  3177  0F22                     	;# 
  3178  0F23                     	;# 
  3179  0F24                     	;# 
  3180  0F25                     	;# 
  3181  0F26                     	;# 
  3182  0F27                     	;# 
  3183  0F28                     	;# 
  3184  0F29                     	;# 
  3185  0F2A                     	;# 
  3186  0F2B                     	;# 
  3187  0F2C                     	;# 
  3188  0F2D                     	;# 
  3189  0F2E                     	;# 
  3190  0F2F                     	;# 
  3191  0F30                     	;# 
  3192  0F31                     	;# 
  3193  0F32                     	;# 
  3194  0F33                     	;# 
  3195  0F34                     	;# 
  3196  0F35                     	;# 
  3197  0F36                     	;# 
  3198  0F37                     	;# 
  3199  0FE4                     	;# 
  3200  0FE5                     	;# 
  3201  0FE6                     	;# 
  3202  0FE7                     	;# 
  3203  0FE8                     	;# 
  3204  0FE9                     	;# 
  3205  0FEA                     	;# 
  3206  0FEB                     	;# 
  3207  0FED                     	;# 
  3208  0FEE                     	;# 
  3209  0FEF                     	;# 
  3210  0000                     	;# 
  3211  0001                     	;# 
  3212  0002                     	;# 
  3213  0003                     	;# 
  3214  0004                     	;# 
  3215  0005                     	;# 
  3216  0006                     	;# 
  3217  0007                     	;# 
  3218  0008                     	;# 
  3219  0009                     	;# 
  3220  000A                     	;# 
  3221  000B                     	;# 
  3222  000C                     	;# 
  3223  000D                     	;# 
  3224  000E                     	;# 
  3225  0010                     	;# 
  3226  0011                     	;# 
  3227  0012                     	;# 
  3228  0013                     	;# 
  3229  0014                     	;# 
  3230  0015                     	;# 
  3231  0016                     	;# 
  3232  0016                     	;# 
  3233  0017                     	;# 
  3234  0018                     	;# 
  3235  0019                     	;# 
  3236  001A                     	;# 
  3237  001A                     	;# 
  3238  001B                     	;# 
  3239  001B                     	;# 
  3240  001C                     	;# 
  3241  001D                     	;# 
  3242  001E                     	;# 
  3243  001F                     	;# 
  3244  008C                     	;# 
  3245  008D                     	;# 
  3246  008E                     	;# 
  3247  0090                     	;# 
  3248  0091                     	;# 
  3249  0092                     	;# 
  3250  0093                     	;# 
  3251  0094                     	;# 
  3252  0095                     	;# 
  3253  0096                     	;# 
  3254  0098                     	;# 
  3255  0099                     	;# 
  3256  009A                     	;# 
  3257  009B                     	;# 
  3258  009B                     	;# 
  3259  009C                     	;# 
  3260  009D                     	;# 
  3261  009E                     	;# 
  3262  009F                     	;# 
  3263  010C                     	;# 
  3264  010D                     	;# 
  3265  010E                     	;# 
  3266  0111                     	;# 
  3267  0112                     	;# 
  3268  0113                     	;# 
  3269  0114                     	;# 
  3270  0115                     	;# 
  3271  0116                     	;# 
  3272  0117                     	;# 
  3273  0118                     	;# 
  3274  0119                     	;# 
  3275  011C                     	;# 
  3276  018C                     	;# 
  3277  018D                     	;# 
  3278  018E                     	;# 
  3279  0191                     	;# 
  3280  0191                     	;# 
  3281  0192                     	;# 
  3282  0193                     	;# 
  3283  0193                     	;# 
  3284  0194                     	;# 
  3285  0195                     	;# 
  3286  0196                     	;# 
  3287  0197                     	;# 
  3288  0199                     	;# 
  3289  0199                     	;# 
  3290  0199                     	;# 
  3291  019A                     	;# 
  3292  019A                     	;# 
  3293  019A                     	;# 
  3294  019B                     	;# 
  3295  019B                     	;# 
  3296  019B                     	;# 
  3297  019B                     	;# 
  3298  019B                     	;# 
  3299  019C                     	;# 
  3300  019C                     	;# 
  3301  019C                     	;# 
  3302  019D                     	;# 
  3303  019D                     	;# 
  3304  019D                     	;# 
  3305  019E                     	;# 
  3306  019E                     	;# 
  3307  019E                     	;# 
  3308  019F                     	;# 
  3309  019F                     	;# 
  3310  019F                     	;# 
  3311  019F                     	;# 
  3312  019F                     	;# 
  3313  020C                     	;# 
  3314  020D                     	;# 
  3315  020E                     	;# 
  3316  0211                     	;# 
  3317  0211                     	;# 
  3318  0212                     	;# 
  3319  0212                     	;# 
  3320  0213                     	;# 
  3321  0213                     	;# 
  3322  0214                     	;# 
  3323  0214                     	;# 
  3324  0215                     	;# 
  3325  0215                     	;# 
  3326  0215                     	;# 
  3327  0215                     	;# 
  3328  0216                     	;# 
  3329  0216                     	;# 
  3330  0217                     	;# 
  3331  0217                     	;# 
  3332  028C                     	;# 
  3333  028D                     	;# 
  3334  028E                     	;# 
  3335  0291                     	;# 
  3336  0291                     	;# 
  3337  0292                     	;# 
  3338  0293                     	;# 
  3339  0294                     	;# 
  3340  0298                     	;# 
  3341  0298                     	;# 
  3342  0299                     	;# 
  3343  029A                     	;# 
  3344  029B                     	;# 
  3345  029E                     	;# 
  3346  030C                     	;# 
  3347  030D                     	;# 
  3348  030E                     	;# 
  3349  038C                     	;# 
  3350  038D                     	;# 
  3351  038E                     	;# 
  3352  0391                     	;# 
  3353  0392                     	;# 
  3354  0393                     	;# 
  3355  0394                     	;# 
  3356  0395                     	;# 
  3357  0396                     	;# 
  3358  0397                     	;# 
  3359  0398                     	;# 
  3360  0399                     	;# 
  3361  040E                     	;# 
  3362  0413                     	;# 
  3363  0413                     	;# 
  3364  0414                     	;# 
  3365  0414                     	;# 
  3366  0415                     	;# 
  3367  0416                     	;# 
  3368  0417                     	;# 
  3369  0418                     	;# 
  3370  041A                     	;# 
  3371  041A                     	;# 
  3372  041B                     	;# 
  3373  041B                     	;# 
  3374  041C                     	;# 
  3375  041D                     	;# 
  3376  041E                     	;# 
  3377  041F                     	;# 
  3378  0493                     	;# 
  3379  0494                     	;# 
  3380  0495                     	;# 
  3381  0496                     	;# 
  3382  049A                     	;# 
  3383  049B                     	;# 
  3384  049C                     	;# 
  3385  049D                     	;# 
  3386  058C                     	;# 
  3387  058C                     	;# 
  3388  058D                     	;# 
  3389  058E                     	;# 
  3390  058E                     	;# 
  3391  058F                     	;# 
  3392  0590                     	;# 
  3393  0590                     	;# 
  3394  0591                     	;# 
  3395  0592                     	;# 
  3396  0592                     	;# 
  3397  0593                     	;# 
  3398  0594                     	;# 
  3399  0594                     	;# 
  3400  0595                     	;# 
  3401  0596                     	;# 
  3402  0596                     	;# 
  3403  0597                     	;# 
  3404  0598                     	;# 
  3405  0599                     	;# 
  3406  059A                     	;# 
  3407  059B                     	;# 
  3408  059B                     	;# 
  3409  059C                     	;# 
  3410  059D                     	;# 
  3411  060C                     	;# 
  3412  060C                     	;# 
  3413  060D                     	;# 
  3414  060E                     	;# 
  3415  060F                     	;# 
  3416  060F                     	;# 
  3417  0610                     	;# 
  3418  0611                     	;# 
  3419  0612                     	;# 
  3420  0613                     	;# 
  3421  0614                     	;# 
  3422  0617                     	;# 
  3423  0618                     	;# 
  3424  0619                     	;# 
  3425  061A                     	;# 
  3426  061B                     	;# 
  3427  061C                     	;# 
  3428  0691                     	;# 
  3429  0692                     	;# 
  3430  0693                     	;# 
  3431  0694                     	;# 
  3432  0695                     	;# 
  3433  0696                     	;# 
  3434  0697                     	;# 
  3435  0699                     	;# 
  3436  069A                     	;# 
  3437  0711                     	;# 
  3438  0712                     	;# 
  3439  0713                     	;# 
  3440  0714                     	;# 
  3441  0715                     	;# 
  3442  0718                     	;# 
  3443  0718                     	;# 
  3444  0719                     	;# 
  3445  071A                     	;# 
  3446  071A                     	;# 
  3447  071B                     	;# 
  3448  071C                     	;# 
  3449  071D                     	;# 
  3450  0791                     	;# 
  3451  0791                     	;# 
  3452  0792                     	;# 
  3453  0793                     	;# 
  3454  0793                     	;# 
  3455  0794                     	;# 
  3456  0795                     	;# 
  3457  0795                     	;# 
  3458  0796                     	;# 
  3459  0797                     	;# 
  3460  0797                     	;# 
  3461  0798                     	;# 
  3462  0799                     	;# 
  3463  079A                     	;# 
  3464  080C                     	;# 
  3465  080C                     	;# 
  3466  080D                     	;# 
  3467  080E                     	;# 
  3468  080E                     	;# 
  3469  080F                     	;# 
  3470  0810                     	;# 
  3471  0810                     	;# 
  3472  0811                     	;# 
  3473  0812                     	;# 
  3474  0812                     	;# 
  3475  0813                     	;# 
  3476  0814                     	;# 
  3477  0815                     	;# 
  3478  0816                     	;# 
  3479  0817                     	;# 
  3480  0818                     	;# 
  3481  0819                     	;# 
  3482  081A                     	;# 
  3483  081A                     	;# 
  3484  081B                     	;# 
  3485  081C                     	;# 
  3486  081C                     	;# 
  3487  081D                     	;# 
  3488  088C                     	;# 
  3489  088D                     	;# 
  3490  088E                     	;# 
  3491  088F                     	;# 
  3492  088F                     	;# 
  3493  0890                     	;# 
  3494  0891                     	;# 
  3495  0892                     	;# 
  3496  0893                     	;# 
  3497  0893                     	;# 
  3498  0894                     	;# 
  3499  0895                     	;# 
  3500  0896                     	;# 
  3501  0897                     	;# 
  3502  0897                     	;# 
  3503  0898                     	;# 
  3504  0899                     	;# 
  3505  0D8C                     	;# 
  3506  0D8C                     	;# 
  3507  0D8D                     	;# 
  3508  0D8E                     	;# 
  3509  0D8F                     	;# 
  3510  0D8F                     	;# 
  3511  0D90                     	;# 
  3512  0D91                     	;# 
  3513  0D92                     	;# 
  3514  0D92                     	;# 
  3515  0D93                     	;# 
  3516  0D94                     	;# 
  3517  0D95                     	;# 
  3518  0D95                     	;# 
  3519  0D96                     	;# 
  3520  0D97                     	;# 
  3521  0D98                     	;# 
  3522  0D99                     	;# 
  3523  0D9A                     	;# 
  3524  0D9B                     	;# 
  3525  0D9C                     	;# 
  3526  0D9D                     	;# 
  3527  0D9E                     	;# 
  3528  0D9E                     	;# 
  3529  0D9F                     	;# 
  3530  0DA0                     	;# 
  3531  0DA1                     	;# 
  3532  0DA1                     	;# 
  3533  0DA2                     	;# 
  3534  0DA3                     	;# 
  3535  0DA4                     	;# 
  3536  0DA4                     	;# 
  3537  0DA5                     	;# 
  3538  0DA6                     	;# 
  3539  0DA7                     	;# 
  3540  0DA7                     	;# 
  3541  0DA8                     	;# 
  3542  0DA9                     	;# 
  3543  0DAA                     	;# 
  3544  0DAB                     	;# 
  3545  0DAC                     	;# 
  3546  0DAD                     	;# 
  3547  0DAE                     	;# 
  3548  0DAF                     	;# 
  3549  0E0F                     	;# 
  3550  0E10                     	;# 
  3551  0E11                     	;# 
  3552  0E12                     	;# 
  3553  0E13                     	;# 
  3554  0E14                     	;# 
  3555  0E15                     	;# 
  3556  0E16                     	;# 
  3557  0E17                     	;# 
  3558  0E18                     	;# 
  3559  0E19                     	;# 
  3560  0E1A                     	;# 
  3561  0E1B                     	;# 
  3562  0E1C                     	;# 
  3563  0E1D                     	;# 
  3564  0E1E                     	;# 
  3565  0E1F                     	;# 
  3566  0E20                     	;# 
  3567  0E21                     	;# 
  3568  0E22                     	;# 
  3569  0E23                     	;# 
  3570  0E24                     	;# 
  3571  0E25                     	;# 
  3572  0E26                     	;# 
  3573  0E27                     	;# 
  3574  0E28                     	;# 
  3575  0E29                     	;# 
  3576  0E2A                     	;# 
  3577  0E2B                     	;# 
  3578  0E2C                     	;# 
  3579  0E2D                     	;# 
  3580  0E2E                     	;# 
  3581  0E90                     	;# 
  3582  0E91                     	;# 
  3583  0E92                     	;# 
  3584  0E94                     	;# 
  3585  0E95                     	;# 
  3586  0E9C                     	;# 
  3587  0E9D                     	;# 
  3588  0E9E                     	;# 
  3589  0E9F                     	;# 
  3590  0EA0                     	;# 
  3591  0EA1                     	;# 
  3592  0EA2                     	;# 
  3593  0EA3                     	;# 
  3594  0EA4                     	;# 
  3595  0EA5                     	;# 
  3596  0EA6                     	;# 
  3597  0EA7                     	;# 
  3598  0F0F                     	;# 
  3599  0F10                     	;# 
  3600  0F11                     	;# 
  3601  0F12                     	;# 
  3602  0F13                     	;# 
  3603  0F14                     	;# 
  3604  0F15                     	;# 
  3605  0F16                     	;# 
  3606  0F17                     	;# 
  3607  0F18                     	;# 
  3608  0F19                     	;# 
  3609  0F1A                     	;# 
  3610  0F1B                     	;# 
  3611  0F1C                     	;# 
  3612  0F1D                     	;# 
  3613  0F1E                     	;# 
  3614  0F1F                     	;# 
  3615  0F20                     	;# 
  3616  0F21                     	;# 
  3617  0F22                     	;# 
  3618  0F23                     	;# 
  3619  0F24                     	;# 
  3620  0F25                     	;# 
  3621  0F26                     	;# 
  3622  0F27                     	;# 
  3623  0F28                     	;# 
  3624  0F29                     	;# 
  3625  0F2A                     	;# 
  3626  0F2B                     	;# 
  3627  0F2C                     	;# 
  3628  0F2D                     	;# 
  3629  0F2E                     	;# 
  3630  0F2F                     	;# 
  3631  0F30                     	;# 
  3632  0F31                     	;# 
  3633  0F32                     	;# 
  3634  0F33                     	;# 
  3635  0F34                     	;# 
  3636  0F35                     	;# 
  3637  0F36                     	;# 
  3638  0F37                     	;# 
  3639  0FE4                     	;# 
  3640  0FE5                     	;# 
  3641  0FE6                     	;# 
  3642  0FE7                     	;# 
  3643  0FE8                     	;# 
  3644  0FE9                     	;# 
  3645  0FEA                     	;# 
  3646  0FEB                     	;# 
  3647  0FED                     	;# 
  3648  0FEE                     	;# 
  3649  0FEF                     	;# 
  3650                           
  3651                           	psect	idataBANK0
  3652  05D2                     __pidataBANK0:	
  3653                           
  3654                           ;initializer for _StateBat
  3655  05D2  3401               	retlw	1
  3656                           
  3657                           ;initializer for _Angle
  3658  05D3  342D               	retlw	45
  3659                           
  3660                           ;initializer for _Validation
  3661  05D4  3404               	retlw	4
  3662                           
  3663                           	psect	stringtext1
  3664  03D2                     __pstringtext1:	
  3665  03D2                     _fsmStateTable:	
  3666  03D2  3498               	retlw	low _I2C_DO_IDLE
  3667  03D3  3405               	retlw	high _I2C_DO_IDLE
  3668  03D4  3446               	retlw	low _I2C_DO_SEND_ADR_READ
  3669  03D5  3405               	retlw	high _I2C_DO_SEND_ADR_READ
  3670  03D6  345D               	retlw	low _I2C_DO_SEND_ADR_WRITE
  3671  03D7  3405               	retlw	high _I2C_DO_SEND_ADR_WRITE
  3672  03D8  34B2               	retlw	low _I2C_DO_TX
  3673  03D9  3401               	retlw	high _I2C_DO_TX
  3674  03DA  3438               	retlw	low _I2C_DO_RX
  3675  03DB  3402               	retlw	high _I2C_DO_RX
  3676  03DC  3482               	retlw	low _I2C_DO_RCEN
  3677  03DD  3405               	retlw	high _I2C_DO_RCEN
  3678  03DE  3466               	retlw	low _I2C_DO_TX_EMPTY
  3679  03DF  3403               	retlw	high _I2C_DO_TX_EMPTY
  3680  03E0  34C2               	retlw	low _I2C_DO_SEND_RESTART_READ
  3681  03E1  3405               	retlw	high _I2C_DO_SEND_RESTART_READ
  3682  03E2  34BE               	retlw	low _I2C_DO_SEND_RESTART_WRITE
  3683  03E3  3405               	retlw	high _I2C_DO_SEND_RESTART_WRITE
  3684  03E4  34BA               	retlw	low _I2C_DO_SEND_RESTART
  3685  03E5  3405               	retlw	high _I2C_DO_SEND_RESTART
  3686  03E6  34B6               	retlw	low _I2C_DO_SEND_STOP
  3687  03E7  3405               	retlw	high _I2C_DO_SEND_STOP
  3688  03E8  34B2               	retlw	low _I2C_DO_RX_ACK
  3689  03E9  3405               	retlw	high _I2C_DO_RX_ACK
  3690  03EA  34AE               	retlw	low _I2C_DO_RX_NACK_STOP
  3691  03EB  3405               	retlw	high _I2C_DO_RX_NACK_STOP
  3692  03EC  34AA               	retlw	low _I2C_DO_RX_NACK_RESTART
  3693  03ED  3405               	retlw	high _I2C_DO_RX_NACK_RESTART
  3694  03EE  3493               	retlw	low _I2C_DO_RESET
  3695  03EF  3405               	retlw	high _I2C_DO_RESET
  3696  03F0  34AF               	retlw	low _I2C_DO_ADDRESS_NACK
  3697  03F1  3403               	retlw	high _I2C_DO_ADDRESS_NACK
  3698  03F2                     __end_of_fsmStateTable:	
  3699                           
  3700                           	psect	nvBANK0
  3701  0063                     __pnvBANK0:	
  3702  0063                     _TMR2_InterruptHandler:	
  3703  0063                     	ds	2
  3704  0065                     _EUSART_FramingErrorHandler:	
  3705  0065                     	ds	2
  3706  0067                     _EUSART_RxDefaultInterruptHandler:	
  3707  0067                     	ds	2
  3708                           
  3709                           	psect	nvBANK1
  3710  00A0                     __pnvBANK1:	
  3711  00A0                     _EUSART_ErrorHandler:	
  3712  00A0                     	ds	2
  3713  00A2                     _EUSART_OverrunErrorHandler:	
  3714  00A2                     	ds	2
  3715  000C                     _PORTAbits	set	12
  3716  001B                     _PR2	set	27
  3717  001A                     _TMR2	set	26
  3718  001C                     _T2CONbits	set	28
  3719  001F                     _T2RSTbits	set	31
  3720  001D                     _T2HLTbits	set	29
  3721  001C                     _T2CON	set	28
  3722  001A                     _T2TMR	set	26
  3723  001B                     _T2PR	set	27
  3724  001F                     _T2RST	set	31
  3725  001D                     _T2HLT	set	29
  3726  001E                     _T2CLKCON	set	30
  3727  0011                     _PIR2bits	set	17
  3728  0010                     _PIR1bits	set	16
  3729  000B                     _INTCONbits	set	11
  3730  0095                     _OPTION_REGbits	set	149
  3731  008E                     _TRISC	set	142
  3732  008D                     _TRISB	set	141
  3733  008C                     _TRISA	set	140
  3734  0098                     _OSCTUNE	set	152
  3735  0099                     _OSCCON	set	153
  3736  0090                     _PIE1bits	set	144
  3737  010C                     _LATAbits	set	268
  3738  010E                     _LATCbits	set	270
  3739  010E                     _LATC	set	270
  3740  010D                     _LATB	set	269
  3741  010C                     _LATA	set	268
  3742  0116                     _BORCON	set	278
  3743  0199                     _RC1REG	set	409
  3744  019D                     _RC1STAbits	set	413
  3745  019A                     _TX1REG	set	410
  3746  019E                     _TX1STAbits	set	414
  3747  019C                     _SPBRGH	set	412
  3748  019B                     _SPBRGL	set	411
  3749  019E                     _TX1STA	set	414
  3750  019D                     _RC1STA	set	413
  3751  019F                     _BAUD1CON	set	415
  3752  018C                     _ANSELA	set	396
  3753  018D                     _ANSELB	set	397
  3754  018E                     _ANSELC	set	398
  3755  0214                     _SSP1STATbits	set	532
  3756  0216                     _SSP1CON2bits	set	534
  3757  0211                     _SSP1BUF	set	529
  3758  0215                     _SSP1CON1bits	set	533
  3759  0212                     _SSP1ADD	set	530
  3760  0216                     _SSP1CON2	set	534
  3761  0215                     _SSP1CON1	set	533
  3762  0214                     _SSP1STAT	set	532
  3763  020E                     _WPUC	set	526
  3764  020C                     _WPUA	set	524
  3765  020D                     _WPUB	set	525
  3766  029E                     _CCPTMRSbits	set	670
  3767  028E                     _ODCONC	set	654
  3768  028D                     _ODCONB	set	653
  3769  028C                     _ODCONA	set	652
  3770  030E                     _SLRCONC	set	782
  3771  030D                     _SLRCONB	set	781
  3772  030C                     _SLRCONA	set	780
  3773  038E                     _INLVLC	set	910
  3774  038D                     _INLVLB	set	909
  3775  038C                     _INLVLA	set	908
  3776  0617                     _PWM3DCL	set	1559
  3777  0618                     _PWM3DCH	set	1560
  3778  0619                     _PWM3CON	set	1561
  3779  0E20                     _SSPCLKPPS	set	3616
  3780  0E21                     _SSPDATPPS	set	3617
  3781  0E24                     _RXPPS	set	3620
  3782  0E92                     _RA2PPS	set	3730
  3783  0E9C                     _RB4PPS	set	3740
  3784  0E9F                     _RB7PPS	set	3743
  3785  0E9E                     _RB6PPS	set	3742
  3786                           
  3787                           ; #config settings
  3788  0000                     
  3789                           	psect	cinit
  3790  0026                     start_initialization:	
  3791  0026                     __initialization:	
  3792                           
  3793                           ; Initialize objects allocated to BANK0
  3794  0026  3185  25D2  3180   	fcall	__pidataBANK0	;fetch initializer
  3795  0029  00E9               	movwf	__pdataBANK0& (0+127)
  3796  002A  3185  25D3  3180   	fcall	__pidataBANK0+1	;fetch initializer
  3797  002D  00EA               	movwf	(__pdataBANK0+1)& (0+127)
  3798  002E  3185  25D4  3180   	fcall	__pidataBANK0+2	;fetch initializer
  3799  0031  00EB               	movwf	(__pdataBANK0+2)& (0+127)
  3800                           
  3801                           ; Clear objects allocated to BANK0
  3802  0032  3020               	movlw	low __pbssBANK0
  3803  0033  0084               	movwf	4
  3804  0034  3000               	movlw	high __pbssBANK0
  3805  0035  0085               	movwf	5
  3806  0036  3038               	movlw	56
  3807  0037  3185  2564         	fcall	clear_ram0
  3808  0039                     end_of_initialization:	
  3809                           ;End of C runtime variable initialization code
  3810                           
  3811  0039                     __end_of__initialization:	
  3812  0039  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3813  003A  0020               	movlb	0
  3814  003B  3181  295C         	ljmp	_main	;jump to C main() function
  3815                           
  3816                           	psect	bssBANK0
  3817  0020                     __pbssBANK0:	
  3818  0020                     _I2C_Status:	
  3819  0020                     	ds	29
  3820  003D                     _eusartRxStatusBuffer:	
  3821  003D                     	ds	8
  3822  0045                     _eusartRxBuffer:	
  3823  0045                     	ds	8
  3824  004D                     _StateLeds:	
  3825  004D                     	ds	1
  3826  004E                     _PosUart:	
  3827  004E                     	ds	1
  3828  004F                     _Vitesse:	
  3829  004F                     	ds	1
  3830  0050                     _G:	
  3831  0050                     	ds	1
  3832  0051                     _CptBat:	
  3833  0051                     	ds	1
  3834  0052                     _Type:	
  3835  0052                     	ds	1
  3836  0053                     _Data:	
  3837  0053                     	ds	1
  3838  0054                     _eusartRxLastError:	
  3839  0054                     	ds	1
  3840  0055                     _eusartRxCount:	
  3841  0055                     	ds	1
  3842  0056                     _eusartRxTail:	
  3843  0056                     	ds	1
  3844  0057                     _eusartRxHead:	
  3845  0057                     	ds	1
  3846                           
  3847                           	psect	dataBANK0
  3848  0069                     __pdataBANK0:	
  3849  0069                     _StateBat:	
  3850  0069                     	ds	1
  3851  006A                     _Angle:	
  3852  006A                     	ds	1
  3853  006B                     _Validation:	
  3854  006B                     	ds	1
  3855                           
  3856                           	psect	clrtext
  3857  0564                     clear_ram0:	
  3858                           ;	Called with FSR0 containing the base address, and
  3859                           ;	WREG with the size to clear
  3860                           
  3861  0564  0064               	clrwdt	;clear the watchdog before getting into this loop
  3862  0565                     clrloop0:	
  3863  0565  0180               	clrf	0	;clear RAM location pointed to by FSR
  3864  0566  3101               	addfsr 0,1
  3865  0567  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3866  0568  2D65               	goto	clrloop0	;have we reached the end yet?
  3867  0569  3400               	retlw	0	;all done for this memory range, return
  3868                           
  3869                           	psect	cstackBANK1
  3870  00A4                     __pcstackBANK1:	
  3871  00A4                     ??_I2C_Initialize:	
  3872  00A4                     ??_PIN_MANAGER_Initialize:	
  3873                           ; 1 bytes @ 0x0
  3874                           
  3875  00A4                     ??_OSCILLATOR_Initialize:	
  3876                           ; 1 bytes @ 0x0
  3877                           
  3878  00A4                     ??_PWM3_Initialize:	
  3879                           ; 1 bytes @ 0x0
  3880                           
  3881  00A4                     ?_EUSART_SetRxInterruptHandler:	
  3882                           ; 1 bytes @ 0x0
  3883                           
  3884  00A4                     ?_EUSART_SetFramingErrorHandler:	
  3885                           ; 1 bytes @ 0x0
  3886                           
  3887  00A4                     ?_EUSART_SetOverrunErrorHandler:	
  3888                           ; 1 bytes @ 0x0
  3889                           
  3890  00A4                     ?_EUSART_SetErrorHandler:	
  3891                           ; 1 bytes @ 0x0
  3892                           
  3893  00A4                     ?_TMR2_SetInterruptHandler:	
  3894                           ; 1 bytes @ 0x0
  3895                           
  3896  00A4                     ??_TMR2_Start:	
  3897                           ; 1 bytes @ 0x0
  3898                           
  3899  00A4                     ??_TMR2_StartTimer:	
  3900                           ; 1 bytes @ 0x0
  3901                           
  3902  00A4                     ??_TMR2_Counter8BitSet:	
  3903                           ; 1 bytes @ 0x0
  3904                           
  3905  00A4                     TMR2_Counter8BitSet@timerVal:	
  3906                           ; 1 bytes @ 0x0
  3907                           
  3908  00A4                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3909                           ; 1 bytes @ 0x0
  3910                           
  3911  00A4                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3912                           ; 2 bytes @ 0x0
  3913                           
  3914  00A4                     EUSART_SetErrorHandler@interruptHandler:	
  3915                           ; 2 bytes @ 0x0
  3916                           
  3917  00A4                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3918                           ; 2 bytes @ 0x0
  3919                           
  3920  00A4                     TMR2_SetInterruptHandler@InterruptHandler:	
  3921                           ; 2 bytes @ 0x0
  3922                           
  3923                           
  3924                           ; 2 bytes @ 0x0
  3925  00A4                     	ds	1
  3926  00A5                     ??_TMR2_WriteTimer:	
  3927  00A5                     TMR2_WriteTimer@timerVal:	
  3928                           ; 1 bytes @ 0x1
  3929                           
  3930                           
  3931                           ; 1 bytes @ 0x1
  3932  00A5                     	ds	1
  3933  00A6                     ??_TMR2_Initialize:	
  3934  00A6                     ??_EUSART_Initialize:	
  3935                           ; 1 bytes @ 0x2
  3936                           
  3937  00A6                     ??_EUSART_SetRxInterruptHandler:	
  3938                           ; 1 bytes @ 0x2
  3939                           
  3940  00A6                     ??_EUSART_SetFramingErrorHandler:	
  3941                           ; 1 bytes @ 0x2
  3942                           
  3943  00A6                     ??_EUSART_SetOverrunErrorHandler:	
  3944                           ; 1 bytes @ 0x2
  3945                           
  3946  00A6                     ??_EUSART_SetErrorHandler:	
  3947                           ; 1 bytes @ 0x2
  3948                           
  3949  00A6                     ??_TMR2_SetInterruptHandler:	
  3950                           ; 1 bytes @ 0x2
  3951                           
  3952  00A6                     ??_SYSTEM_Initialize:	
  3953                           ; 1 bytes @ 0x2
  3954                           
  3955  00A6                     ??_main:	
  3956                           ; 1 bytes @ 0x2
  3957                           
  3958                           
  3959                           ; 1 bytes @ 0x2
  3960  00A6                     	ds	2
  3961                           
  3962                           	psect	cstackCOMMON
  3963  0070                     __pcstackCOMMON:	
  3964  0070                     ?_I2C_Open:	
  3965  0070                     ??_I2C_Open:	
  3966                           ; 1 bytes @ 0x0
  3967                           
  3968  0070                     ?_I2C_SetBuffer:	
  3969                           ; 1 bytes @ 0x0
  3970                           
  3971  0070                     ?_I2C_MasterWrite:	
  3972                           ; 1 bytes @ 0x0
  3973                           
  3974  0070                     ?_I2C_Close:	
  3975                           ; 1 bytes @ 0x0
  3976                           
  3977  0070                     ??_I2C_Close:	
  3978                           ; 1 bytes @ 0x0
  3979                           
  3980  0070                     ?_TMR2_ISR:	
  3981                           ; 1 bytes @ 0x0
  3982                           
  3983  0070                     ?_I2C_Initialize:	
  3984                           ; 1 bytes @ 0x0
  3985                           
  3986  0070                     ?_PIN_MANAGER_Initialize:	
  3987                           ; 1 bytes @ 0x0
  3988                           
  3989  0070                     ?_OSCILLATOR_Initialize:	
  3990                           ; 1 bytes @ 0x0
  3991                           
  3992  0070                     ?_PWM3_Initialize:	
  3993                           ; 1 bytes @ 0x0
  3994                           
  3995  0070                     ?_TMR2_Initialize:	
  3996                           ; 1 bytes @ 0x0
  3997                           
  3998  0070                     ?_EUSART_Initialize:	
  3999                           ; 1 bytes @ 0x0
  4000                           
  4001  0070                     ?_I2C_DO_IDLE:	
  4002                           ; 1 bytes @ 0x0
  4003                           
  4004  0070                     ??_I2C_DO_IDLE:	
  4005                           ; 1 bytes @ 0x0
  4006                           
  4007  0070                     ?_I2C_DO_SEND_ADR_READ:	
  4008                           ; 1 bytes @ 0x0
  4009                           
  4010  0070                     ??_I2C_DO_SEND_ADR_READ:	
  4011                           ; 1 bytes @ 0x0
  4012                           
  4013  0070                     ?_I2C_DO_SEND_ADR_WRITE:	
  4014                           ; 1 bytes @ 0x0
  4015                           
  4016  0070                     ?_I2C_DO_TX:	
  4017                           ; 1 bytes @ 0x0
  4018                           
  4019  0070                     ?_I2C_DO_RX:	
  4020                           ; 1 bytes @ 0x0
  4021                           
  4022  0070                     ?_I2C_DO_RCEN:	
  4023                           ; 1 bytes @ 0x0
  4024                           
  4025  0070                     ??_I2C_DO_RCEN:	
  4026                           ; 1 bytes @ 0x0
  4027                           
  4028  0070                     ?_I2C_DO_TX_EMPTY:	
  4029                           ; 1 bytes @ 0x0
  4030                           
  4031  0070                     ?_I2C_DO_SEND_RESTART_READ:	
  4032                           ; 1 bytes @ 0x0
  4033                           
  4034  0070                     ??_I2C_DO_SEND_RESTART_READ:	
  4035                           ; 1 bytes @ 0x0
  4036                           
  4037  0070                     ?_I2C_DO_SEND_RESTART_WRITE:	
  4038                           ; 1 bytes @ 0x0
  4039                           
  4040  0070                     ??_I2C_DO_SEND_RESTART_WRITE:	
  4041                           ; 1 bytes @ 0x0
  4042                           
  4043  0070                     ?_I2C_DO_SEND_RESTART:	
  4044                           ; 1 bytes @ 0x0
  4045                           
  4046  0070                     ??_I2C_DO_SEND_RESTART:	
  4047                           ; 1 bytes @ 0x0
  4048                           
  4049  0070                     ?_I2C_DO_SEND_STOP:	
  4050                           ; 1 bytes @ 0x0
  4051                           
  4052  0070                     ??_I2C_DO_SEND_STOP:	
  4053                           ; 1 bytes @ 0x0
  4054                           
  4055  0070                     ?_I2C_DO_RX_ACK:	
  4056                           ; 1 bytes @ 0x0
  4057                           
  4058  0070                     ??_I2C_DO_RX_ACK:	
  4059                           ; 1 bytes @ 0x0
  4060                           
  4061  0070                     ?_I2C_DO_RX_NACK_STOP:	
  4062                           ; 1 bytes @ 0x0
  4063                           
  4064  0070                     ??_I2C_DO_RX_NACK_STOP:	
  4065                           ; 1 bytes @ 0x0
  4066                           
  4067  0070                     ?_I2C_DO_RX_NACK_RESTART:	
  4068                           ; 1 bytes @ 0x0
  4069                           
  4070  0070                     ??_I2C_DO_RX_NACK_RESTART:	
  4071                           ; 1 bytes @ 0x0
  4072                           
  4073  0070                     ?_I2C_DO_RESET:	
  4074                           ; 1 bytes @ 0x0
  4075                           
  4076  0070                     ??_I2C_DO_RESET:	
  4077                           ; 1 bytes @ 0x0
  4078                           
  4079  0070                     ?_I2C_DO_ADDRESS_NACK:	
  4080                           ; 1 bytes @ 0x0
  4081                           
  4082  0070                     ?_I2C_MasterClearIrq:	
  4083                           ; 1 bytes @ 0x0
  4084                           
  4085  0070                     ??_I2C_MasterClearIrq:	
  4086                           ; 1 bytes @ 0x0
  4087                           
  4088  0070                     ?_I2C_MasterOpen:	
  4089                           ; 1 bytes @ 0x0
  4090                           
  4091  0070                     ??_I2C_MasterOpen:	
  4092                           ; 1 bytes @ 0x0
  4093                           
  4094  0070                     ?_I2C_MasterDisableIrq:	
  4095                           ; 1 bytes @ 0x0
  4096                           
  4097  0070                     ??_I2C_MasterDisableIrq:	
  4098                           ; 1 bytes @ 0x0
  4099                           
  4100  0070                     ?_I2C_MasterClose:	
  4101                           ; 1 bytes @ 0x0
  4102                           
  4103  0070                     ??_I2C_MasterClose:	
  4104                           ; 1 bytes @ 0x0
  4105                           
  4106  0070                     ?_I2C_MasterStart:	
  4107                           ; 1 bytes @ 0x0
  4108                           
  4109  0070                     ??_I2C_MasterStart:	
  4110                           ; 1 bytes @ 0x0
  4111                           
  4112  0070                     ?_I2C_Poller:	
  4113                           ; 1 bytes @ 0x0
  4114                           
  4115  0070                     ?_I2C_SetCallback:	
  4116                           ; 1 bytes @ 0x0
  4117                           
  4118  0070                     ?_I2C_MasterWaitForEvent:	
  4119                           ; 1 bytes @ 0x0
  4120                           
  4121  0070                     ??_I2C_MasterWaitForEvent:	
  4122                           ; 1 bytes @ 0x0
  4123                           
  4124  0070                     ?_I2C_MasterFsm:	
  4125                           ; 1 bytes @ 0x0
  4126                           
  4127  0070                     ?_I2C_MasterIsNack:	
  4128                           ; 1 bytes @ 0x0
  4129                           
  4130  0070                     ??_I2C_MasterIsNack:	
  4131                           ; 1 bytes @ 0x0
  4132                           
  4133  0070                     ?_I2C_MasterSendTxData:	
  4134                           ; 1 bytes @ 0x0
  4135                           
  4136  0070                     ??_I2C_MasterSendTxData:	
  4137                           ; 1 bytes @ 0x0
  4138                           
  4139  0070                     ?_I2C_MasterGetRxData:	
  4140                           ; 1 bytes @ 0x0
  4141                           
  4142  0070                     ??_I2C_MasterGetRxData:	
  4143                           ; 1 bytes @ 0x0
  4144                           
  4145  0070                     ?_I2C_MasterSendAck:	
  4146                           ; 1 bytes @ 0x0
  4147                           
  4148  0070                     ??_I2C_MasterSendAck:	
  4149                           ; 1 bytes @ 0x0
  4150                           
  4151  0070                     ?_I2C_MasterStartRx:	
  4152                           ; 1 bytes @ 0x0
  4153                           
  4154  0070                     ??_I2C_MasterStartRx:	
  4155                           ; 1 bytes @ 0x0
  4156                           
  4157  0070                     ?_I2C_MasterSetIrq:	
  4158                           ; 1 bytes @ 0x0
  4159                           
  4160  0070                     ??_I2C_MasterSetIrq:	
  4161                           ; 1 bytes @ 0x0
  4162                           
  4163  0070                     ?_I2C_MasterEnableRestart:	
  4164                           ; 1 bytes @ 0x0
  4165                           
  4166  0070                     ??_I2C_MasterEnableRestart:	
  4167                           ; 1 bytes @ 0x0
  4168                           
  4169  0070                     ?_I2C_MasterStop:	
  4170                           ; 1 bytes @ 0x0
  4171                           
  4172  0070                     ??_I2C_MasterStop:	
  4173                           ; 1 bytes @ 0x0
  4174                           
  4175  0070                     ?_I2C_MasterSendNack:	
  4176                           ; 1 bytes @ 0x0
  4177                           
  4178  0070                     ??_I2C_MasterSendNack:	
  4179                           ; 1 bytes @ 0x0
  4180                           
  4181  0070                     ?_EUSART_Receive_ISR:	
  4182                           ; 1 bytes @ 0x0
  4183                           
  4184  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  4185                           ; 1 bytes @ 0x0
  4186                           
  4187  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  4188                           ; 1 bytes @ 0x0
  4189                           
  4190  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  4191                           ; 1 bytes @ 0x0
  4192                           
  4193  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  4194                           ; 1 bytes @ 0x0
  4195                           
  4196  0070                     ?_EUSART_DefaultErrorHandler:	
  4197                           ; 1 bytes @ 0x0
  4198                           
  4199  0070                     ?_EUSART_RxDataHandler:	
  4200                           ; 1 bytes @ 0x0
  4201                           
  4202  0070                     ??_EUSART_RxDataHandler:	
  4203                           ; 1 bytes @ 0x0
  4204                           
  4205  0070                     ?_TMR2_DefaultInterruptHandler:	
  4206                           ; 1 bytes @ 0x0
  4207                           
  4208  0070                     ??_TMR2_DefaultInterruptHandler:	
  4209                           ; 1 bytes @ 0x0
  4210                           
  4211  0070                     ?_TMR2_CallBack:	
  4212                           ; 1 bytes @ 0x0
  4213                           
  4214  0070                     ?_INTERRUPT_InterruptManager:	
  4215                           ; 1 bytes @ 0x0
  4216                           
  4217  0070                     ?_SYSTEM_Initialize:	
  4218                           ; 1 bytes @ 0x0
  4219                           
  4220  0070                     ?_I2C_MasterOperation:	
  4221                           ; 1 bytes @ 0x0
  4222                           
  4223  0070                     ?_EUSART_Write:	
  4224                           ; 1 bytes @ 0x0
  4225                           
  4226  0070                     ??_EUSART_Write:	
  4227                           ; 1 bytes @ 0x0
  4228                           
  4229  0070                     ?_PWM3_LoadDutyValue:	
  4230                           ; 1 bytes @ 0x0
  4231                           
  4232  0070                     ?_TMR2_Start:	
  4233                           ; 1 bytes @ 0x0
  4234                           
  4235  0070                     ?_TMR2_StartTimer:	
  4236                           ; 1 bytes @ 0x0
  4237                           
  4238  0070                     ?_TMR2_Counter8BitSet:	
  4239                           ; 1 bytes @ 0x0
  4240                           
  4241  0070                     ?_TMR2_WriteTimer:	
  4242                           ; 1 bytes @ 0x0
  4243                           
  4244  0070                     ?_MyTimer2ISR:	
  4245                           ; 1 bytes @ 0x0
  4246                           
  4247  0070                     ?_MyUART_ISR:	
  4248                           ; 1 bytes @ 0x0
  4249                           
  4250  0070                     ?_main:	
  4251                           ; 1 bytes @ 0x0
  4252                           
  4253  0070                     I2C_MasterSendTxData@data:	
  4254                           ; 1 bytes @ 0x0
  4255                           
  4256  0070                     EUSART_Write@txData:	
  4257                           ; 1 bytes @ 0x0
  4258                           
  4259  0070                     I2C_SetBuffer@bufferSize:	
  4260                           ; 1 bytes @ 0x0
  4261                           
  4262  0070                     I2C_SetCallback@cb:	
  4263                           ; 2 bytes @ 0x0
  4264                           
  4265  0070                     PWM3_LoadDutyValue@dutyValue:	
  4266                           ; 2 bytes @ 0x0
  4267                           
  4268                           
  4269                           ; 2 bytes @ 0x0
  4270  0070                     	ds	1
  4271  0071                     ??_I2C_DO_SEND_ADR_WRITE:	
  4272  0071                     ??_EUSART_Receive_ISR:	
  4273                           ; 1 bytes @ 0x1
  4274                           
  4275  0071                     ??_EUSART_DefaultErrorHandler:	
  4276                           ; 1 bytes @ 0x1
  4277                           
  4278  0071                     ??_MyUART_ISR:	
  4279                           ; 1 bytes @ 0x1
  4280                           
  4281  0071                     I2C_Open@address:	
  4282                           ; 1 bytes @ 0x1
  4283                           
  4284  0071                     I2C_Close@returnValue:	
  4285                           ; 1 bytes @ 0x1
  4286                           
  4287                           
  4288                           ; 1 bytes @ 0x1
  4289  0071                     	ds	1
  4290  0072                     ??_I2C_SetBuffer:	
  4291  0072                     ??_PWM3_LoadDutyValue:	
  4292                           ; 1 bytes @ 0x2
  4293                           
  4294  0072                     I2C_Open@returnValue:	
  4295                           ; 1 bytes @ 0x2
  4296                           
  4297  0072                     I2C_SetCallback@ptr:	
  4298                           ; 1 bytes @ 0x2
  4299                           
  4300                           
  4301                           ; 1 bytes @ 0x2
  4302  0072                     	ds	1
  4303  0073                     ??_I2C_SetCallback:	
  4304  0073                     I2C_SetBuffer@buffer:	
  4305                           ; 1 bytes @ 0x3
  4306                           
  4307                           
  4308                           ; 1 bytes @ 0x3
  4309  0073                     	ds	1
  4310  0074                     I2C_SetCallback@idx:	
  4311                           
  4312                           ; 1 bytes @ 0x4
  4313  0074                     	ds	1
  4314  0075                     ?_I2C_SetDataCompleteCallback:	
  4315  0075                     ?_I2C_SetAddressNackCallback:	
  4316                           ; 1 bytes @ 0x5
  4317                           
  4318  0075                     MyUART_ISR@c:	
  4319                           ; 1 bytes @ 0x5
  4320                           
  4321  0075                     I2C_SetDataCompleteCallback@cb:	
  4322                           ; 1 bytes @ 0x5
  4323                           
  4324  0075                     I2C_SetAddressNackCallback@cb:	
  4325                           ; 2 bytes @ 0x5
  4326                           
  4327                           
  4328                           ; 2 bytes @ 0x5
  4329  0075                     	ds	2
  4330  0077                     I2C_SetDataCompleteCallback@ptr:	
  4331  0077                     I2C_SetAddressNackCallback@ptr:	
  4332                           ; 1 bytes @ 0x7
  4333                           
  4334                           
  4335                           ; 1 bytes @ 0x7
  4336  0077                     	ds	1
  4337  0078                     ??_I2C_SetDataCompleteCallback:	
  4338  0078                     ??_I2C_SetAddressNackCallback:	
  4339                           ; 1 bytes @ 0x8
  4340                           
  4341                           
  4342                           ; 1 bytes @ 0x8
  4343  0078                     	ds	1
  4344  0079                     ?_rd1RegCompleteHandler:	
  4345  0079                     ?_rd2RegCompleteHandler:	
  4346                           ; 1 bytes @ 0x9
  4347                           
  4348  0079                     ?_wr1RegCompleteHandler:	
  4349                           ; 1 bytes @ 0x9
  4350                           
  4351  0079                     ?_wr2RegCompleteHandler:	
  4352                           ; 1 bytes @ 0x9
  4353                           
  4354  0079                     ?_rdBlkRegCompleteHandler:	
  4355                           ; 1 bytes @ 0x9
  4356                           
  4357  0079                     ?_I2C_CallbackReturnStop:	
  4358                           ; 1 bytes @ 0x9
  4359                           
  4360  0079                     ?_I2C_CallbackReturnReset:	
  4361                           ; 1 bytes @ 0x9
  4362                           
  4363  0079                     rd1RegCompleteHandler@ptr:	
  4364                           ; 1 bytes @ 0x9
  4365                           
  4366  0079                     rd2RegCompleteHandler@ptr:	
  4367                           ; 1 bytes @ 0x9
  4368                           
  4369  0079                     wr1RegCompleteHandler@ptr:	
  4370                           ; 1 bytes @ 0x9
  4371                           
  4372  0079                     wr2RegCompleteHandler@ptr:	
  4373                           ; 1 bytes @ 0x9
  4374                           
  4375  0079                     rdBlkRegCompleteHandler@ptr:	
  4376                           ; 1 bytes @ 0x9
  4377                           
  4378  0079                     I2C_CallbackReturnStop@funPtr:	
  4379                           ; 1 bytes @ 0x9
  4380                           
  4381  0079                     I2C_CallbackReturnReset@funPtr:	
  4382                           ; 1 bytes @ 0x9
  4383                           
  4384                           
  4385                           ; 1 bytes @ 0x9
  4386  0079                     	ds	1
  4387  007A                     ??_rd1RegCompleteHandler:	
  4388  007A                     ??_rd2RegCompleteHandler:	
  4389                           ; 1 bytes @ 0xA
  4390                           
  4391  007A                     ??_wr1RegCompleteHandler:	
  4392                           ; 1 bytes @ 0xA
  4393                           
  4394  007A                     ??_wr2RegCompleteHandler:	
  4395                           ; 1 bytes @ 0xA
  4396                           
  4397  007A                     ??_rdBlkRegCompleteHandler:	
  4398                           ; 1 bytes @ 0xA
  4399                           
  4400  007A                     ??_I2C_DO_TX:	
  4401                           ; 1 bytes @ 0xA
  4402                           
  4403  007A                     ??_I2C_DO_RX:	
  4404                           ; 1 bytes @ 0xA
  4405                           
  4406  007A                     ??_I2C_DO_TX_EMPTY:	
  4407                           ; 1 bytes @ 0xA
  4408                           
  4409  007A                     ??_I2C_DO_ADDRESS_NACK:	
  4410                           ; 1 bytes @ 0xA
  4411                           
  4412  007A                     ??_I2C_CallbackReturnStop:	
  4413                           ; 1 bytes @ 0xA
  4414                           
  4415  007A                     ??_I2C_CallbackReturnReset:	
  4416                           ; 1 bytes @ 0xA
  4417                           
  4418                           
  4419                           ; 1 bytes @ 0xA
  4420  007A                     	ds	1
  4421  007B                     _I2C_DO_TX$794:	
  4422                           
  4423                           ; 2 bytes @ 0xB
  4424  007B                     	ds	2
  4425  007D                     ??_I2C_Poller:	
  4426  007D                     ??_I2C_MasterOperation:	
  4427                           ; 1 bytes @ 0xD
  4428                           
  4429                           
  4430                           ; 1 bytes @ 0xD
  4431  007D                     	ds	1
  4432  007E                     ??_I2C_MasterWrite:	
  4433  007E                     ??_TMR2_ISR:	
  4434                           ; 1 bytes @ 0xE
  4435                           
  4436  007E                     ??_TMR2_CallBack:	
  4437                           ; 1 bytes @ 0xE
  4438                           
  4439                           
  4440                           	psect	cstackBANK0
  4441  0058                     __pcstackBANK0:	
  4442                           ; 1 bytes @ 0xE
  4443                           
  4444  0058                     ??_I2C_MasterFsm:	
  4445                           
  4446                           ; 1 bytes @ 0x0
  4447  0058                     	ds	3
  4448  005B                     I2C_MasterOperation@read:	
  4449                           
  4450                           ; 1 bytes @ 0x3
  4451  005B                     	ds	1
  4452  005C                     I2C_MasterOperation@returnValue:	
  4453                           
  4454                           ; 1 bytes @ 0x4
  4455  005C                     	ds	1
  4456  005D                     ?_I2C_Write1ByteRegister:	
  4457  005D                     I2C_Write1ByteRegister@reg:	
  4458                           ; 1 bytes @ 0x5
  4459                           
  4460                           
  4461                           ; 1 bytes @ 0x5
  4462  005D                     	ds	1
  4463  005E                     I2C_Write1ByteRegister@data:	
  4464                           
  4465                           ; 1 bytes @ 0x6
  4466  005E                     	ds	1
  4467  005F                     ??_I2C_Write1ByteRegister:	
  4468                           
  4469                           ; 1 bytes @ 0x7
  4470  005F                     	ds	1
  4471  0060                     I2C_Write1ByteRegister@address:	
  4472                           
  4473                           ; 1 bytes @ 0x8
  4474  0060                     	ds	1
  4475  0061                     ??_MyTimer2ISR:	
  4476                           
  4477                           ; 1 bytes @ 0x9
  4478  0061                     	ds	1
  4479  0062                     ??_INTERRUPT_InterruptManager:	
  4480                           
  4481                           ; 1 bytes @ 0xA
  4482  0062                     	ds	1
  4483                           
  4484                           	psect	maintext
  4485  015C                     __pmaintext:	
  4486 ;;
  4487 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4488 ;;
  4489 ;; *************** function _main *****************
  4490 ;; Defined at:
  4491 ;;		line 168 in file "main.c"
  4492 ;; Parameters:    Size  Location     Type
  4493 ;;		None
  4494 ;; Auto vars:     Size  Location     Type
  4495 ;;		None
  4496 ;; Return value:  Size  Location     Type
  4497 ;;                  1    wreg      void 
  4498 ;; Registers used:
  4499 ;;		wreg, status,2, status,0, pclath, cstack
  4500 ;; Tracked objects:
  4501 ;;		On entry : B1F/0
  4502 ;;		On exit  : 0/0
  4503 ;;		Unchanged: 0/0
  4504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4507 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4508 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4509 ;;Total ram usage:        2 bytes
  4510 ;; Hardware stack levels required when called:   16
  4511 ;; This function calls:
  4512 ;;		_EUSART_SetRxInterruptHandler
  4513 ;;		_SYSTEM_Initialize
  4514 ;;		_TMR2_SetInterruptHandler
  4515 ;;		_TMR2_StartTimer
  4516 ;;		_TMR2_WriteTimer
  4517 ;; This function is called by:
  4518 ;;		Startup code after reset
  4519 ;; This function uses a non-reentrant model
  4520 ;;
  4521                           
  4522                           
  4523                           ;psect for function _main
  4524  015C                     _main:	
  4525                           
  4526                           ;main.c: 169: SYSTEM_Initialize();
  4527                           
  4528                           ;incstack = 0
  4529                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
  4530  015C  3184  247D  3181   	fcall	_SYSTEM_Initialize
  4531                           
  4532                           ;main.c: 171: do { LATCbits.LATC5 = 1; } while(0);
  4533  015F  0022               	movlb	2	; select bank2
  4534  0160  168E               	bsf	14,5	;volatile
  4535                           
  4536                           ;main.c: 172: do { LATAbits.LATA5 = 1; } while(0);
  4537  0161  168C               	bsf	12,5	;volatile
  4538                           
  4539                           ;main.c: 179: TMR2_SetInterruptHandler(MyTimer2ISR);
  4540  0162  30EF               	movlw	low _MyTimer2ISR
  4541  0163  0021               	movlb	1	; select bank1
  4542  0164  00A4               	movwf	TMR2_SetInterruptHandler@InterruptHandler^(0+128)
  4543  0165  3000               	movlw	high _MyTimer2ISR
  4544  0166  00A5               	movwf	(TMR2_SetInterruptHandler@InterruptHandler^(0+128)+1)
  4545  0167  3185  252B  3181   	fcall	_TMR2_SetInterruptHandler
  4546                           
  4547                           ;main.c: 180: TMR2_WriteTimer(255);
  4548  016A  30FF               	movlw	255
  4549  016B  3185  256A  3181   	fcall	_TMR2_WriteTimer
  4550                           
  4551                           ;main.c: 181: TMR2_StartTimer();
  4552  016E  3185  25D5  3181   	fcall	_TMR2_StartTimer
  4553                           
  4554                           ;main.c: 183: EUSART_SetRxInterruptHandler(MyUART_ISR);
  4555  0171  303D               	movlw	low _MyUART_ISR
  4556  0172  0021               	movlb	1	; select bank1
  4557  0173  00A4               	movwf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128)
  4558  0174  3000               	movlw	high _MyUART_ISR
  4559  0175  00A5               	movwf	(EUSART_SetRxInterruptHandler@interruptHandler^(0+128)+1)
  4560  0176  3185  2534  3181   	fcall	_EUSART_SetRxInterruptHandler
  4561                           
  4562                           ;main.c: 185: (INTCONbits.PEIE = 1);
  4563  0179  170B               	bsf	11,6	;volatile
  4564                           
  4565                           ;main.c: 186: (INTCONbits.GIE = 1);
  4566  017A  178B               	bsf	11,7	;volatile
  4567  017B  29AC               	goto	l3141
  4568  017C                     l3143:	
  4569                           
  4570                           ;main.c: 190: if(Validation) {
  4571  017C  086B               	movf	_Validation,w
  4572  017D  1903               	btfsc	3,2
  4573  017E  2998               	goto	l3149
  4574                           
  4575                           ;main.c: 191: do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  4576  017F  1003               	clrc
  4577  0180  0022               	movlb	2	; select bank2
  4578  0181  1E8C               	btfss	12,5	;volatile
  4579  0182  1403               	setc
  4580  0183  1C03               	btfss	3,0
  4581  0184  2988               	goto	u1370
  4582  0185  0022               	movlb	2	; select bank2
  4583  0186  168C               	bsf	12,5	;volatile
  4584  0187  298A               	goto	l3147
  4585  0188                     u1370:	
  4586  0188  0022               	movlb	2	; select bank2
  4587  0189  128C               	bcf	12,5	;volatile
  4588  018A                     l3147:	
  4589                           
  4590                           ;main.c: 192: _delay((unsigned long)((500)*(4000000/4000.0)));
  4591  018A  3003               	movlw	3
  4592  018B  0021               	movlb	1	; select bank1
  4593  018C  00A7               	movwf	(??_main^(0+128)+1)
  4594  018D  308A               	movlw	138
  4595  018E  00A6               	movwf	??_main^(0+128)
  4596  018F  3055               	movlw	85
  4597  0190                     u1417:	
  4598  0190  0B89               	decfsz	9,f
  4599  0191  2990               	goto	u1417
  4600  0192  0BA6               	decfsz	??_main^(0+128),f
  4601  0193  2990               	goto	u1417
  4602  0194  0BA7               	decfsz	(??_main^(0+128)+1),f
  4603  0195  2990               	goto	u1417
  4604  0196  3200               	nop2
  4605                           
  4606                           ;main.c: 193: } else {
  4607  0197  29AC               	goto	l3141
  4608  0198                     l3149:	
  4609                           ;main.c: 194: do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  4610                           
  4611  0198  1003               	clrc
  4612  0199  0022               	movlb	2	; select bank2
  4613  019A  1E8C               	btfss	12,5	;volatile
  4614  019B  1403               	setc
  4615  019C  1C03               	btfss	3,0
  4616  019D  29A1               	goto	u1390
  4617  019E  0022               	movlb	2	; select bank2
  4618  019F  168C               	bsf	12,5	;volatile
  4619  01A0  29A3               	goto	l3151
  4620  01A1                     u1390:	
  4621  01A1  0022               	movlb	2	; select bank2
  4622  01A2  128C               	bcf	12,5	;volatile
  4623  01A3                     l3151:	
  4624                           
  4625                           ;main.c: 195: _delay((unsigned long)((100)*(4000000/4000.0)));
  4626  01A3  3082               	movlw	130
  4627  01A4  0021               	movlb	1	; select bank1
  4628  01A5  00A6               	movwf	??_main^(0+128)
  4629  01A6  30DD               	movlw	221
  4630  01A7                     u1427:	
  4631  01A7  0B89               	decfsz	9,f
  4632  01A8  29A7               	goto	u1427
  4633  01A9  0BA6               	decfsz	??_main^(0+128),f
  4634  01AA  29A7               	goto	u1427
  4635  01AB  3200               	nop2
  4636  01AC                     l3141:	
  4637                           ;main.c: 188: while (1) {
  4638                           
  4639                           ;main.c: 196: }
  4640                           ;main.c: 197: } else {
  4641                           
  4642                           
  4643                           ;main.c: 189: if(PORTAbits.RA4) {
  4644  01AC  0020               	movlb	0	; select bank0
  4645  01AD  1A0C               	btfsc	12,4	;volatile
  4646  01AE  297C               	goto	l3143
  4647                           
  4648                           ;main.c: 198: do { LATAbits.LATA5 = 1; } while(0);
  4649  01AF  0022               	movlb	2	; select bank2
  4650  01B0  168C               	bsf	12,5	;volatile
  4651  01B1  29AC               	goto	l3141
  4652  01B2                     __end_of_main:	
  4653                           
  4654                           	psect	text1
  4655  056A                     __ptext1:	
  4656 ;; *************** function _TMR2_WriteTimer *****************
  4657 ;; Defined at:
  4658 ;;		line 150 in file "mcc_generated_files/tmr2.c"
  4659 ;; Parameters:    Size  Location     Type
  4660 ;;  timerVal        1    wreg     unsigned char 
  4661 ;; Auto vars:     Size  Location     Type
  4662 ;;  timerVal        1    1[BANK1 ] unsigned char 
  4663 ;; Return value:  Size  Location     Type
  4664 ;;                  1    wreg      void 
  4665 ;; Registers used:
  4666 ;;		wreg, status,2, status,0, pclath, cstack
  4667 ;; Tracked objects:
  4668 ;;		On entry : 0/0
  4669 ;;		On exit  : 0/0
  4670 ;;		Unchanged: 0/0
  4671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4673 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4675 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4676 ;;Total ram usage:        1 bytes
  4677 ;; Hardware stack levels used:    1
  4678 ;; Hardware stack levels required when called:   14
  4679 ;; This function calls:
  4680 ;;		_TMR2_Counter8BitSet
  4681 ;; This function is called by:
  4682 ;;		_main
  4683 ;; This function uses a non-reentrant model
  4684 ;;
  4685                           
  4686                           
  4687                           ;psect for function _TMR2_WriteTimer
  4688  056A                     _TMR2_WriteTimer:	
  4689                           
  4690                           ;incstack = 0
  4691                           ; Regs used in _TMR2_WriteTimer: [wreg+status,2+status,0+pclath+cstack]
  4692                           ;TMR2_WriteTimer@timerVal stored from wreg
  4693  056A  0021               	movlb	1	; select bank1
  4694  056B  00A5               	movwf	TMR2_WriteTimer@timerVal^(0+128)
  4695                           
  4696                           ;tmr2.c: 152: TMR2_Counter8BitSet(timerVal);
  4697  056C  0825               	movf	TMR2_WriteTimer@timerVal^(0+128),w
  4698  056D  3185  2570         	fcall	_TMR2_Counter8BitSet
  4699  056F  0008               	return
  4700  0570                     __end_of_TMR2_WriteTimer:	
  4701                           
  4702                           	psect	text2
  4703  0570                     __ptext2:	
  4704 ;; *************** function _TMR2_Counter8BitSet *****************
  4705 ;; Defined at:
  4706 ;;		line 144 in file "mcc_generated_files/tmr2.c"
  4707 ;; Parameters:    Size  Location     Type
  4708 ;;  timerVal        1    wreg     unsigned char 
  4709 ;; Auto vars:     Size  Location     Type
  4710 ;;  timerVal        1    0[BANK1 ] unsigned char 
  4711 ;; Return value:  Size  Location     Type
  4712 ;;                  1    wreg      void 
  4713 ;; Registers used:
  4714 ;;		wreg
  4715 ;; Tracked objects:
  4716 ;;		On entry : 0/0
  4717 ;;		On exit  : 0/0
  4718 ;;		Unchanged: 0/0
  4719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4721 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4723 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4724 ;;Total ram usage:        1 bytes
  4725 ;; Hardware stack levels used:    1
  4726 ;; Hardware stack levels required when called:   13
  4727 ;; This function calls:
  4728 ;;		Nothing
  4729 ;; This function is called by:
  4730 ;;		_TMR2_WriteTimer
  4731 ;; This function uses a non-reentrant model
  4732 ;;
  4733                           
  4734                           
  4735                           ;psect for function _TMR2_Counter8BitSet
  4736  0570                     _TMR2_Counter8BitSet:	
  4737                           
  4738                           ;incstack = 0
  4739                           ; Regs used in _TMR2_Counter8BitSet: [wreg]
  4740                           ;TMR2_Counter8BitSet@timerVal stored from wreg
  4741  0570  0021               	movlb	1	; select bank1
  4742  0571  00A4               	movwf	TMR2_Counter8BitSet@timerVal^(0+128)
  4743                           
  4744                           ;tmr2.c: 147: TMR2 = timerVal;
  4745  0572  0824               	movf	TMR2_Counter8BitSet@timerVal^(0+128),w
  4746  0573  0020               	movlb	0	; select bank0
  4747  0574  009A               	movwf	26	;volatile
  4748  0575  0008               	return
  4749  0576                     __end_of_TMR2_Counter8BitSet:	
  4750                           
  4751                           	psect	text3
  4752  05D5                     __ptext3:	
  4753 ;; *************** function _TMR2_StartTimer *****************
  4754 ;; Defined at:
  4755 ;;		line 114 in file "mcc_generated_files/tmr2.c"
  4756 ;; Parameters:    Size  Location     Type
  4757 ;;		None
  4758 ;; Auto vars:     Size  Location     Type
  4759 ;;		None
  4760 ;; Return value:  Size  Location     Type
  4761 ;;                  1    wreg      void 
  4762 ;; Registers used:
  4763 ;;		status,2, status,0, pclath, cstack
  4764 ;; Tracked objects:
  4765 ;;		On entry : 0/0
  4766 ;;		On exit  : 0/0
  4767 ;;		Unchanged: 0/0
  4768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4773 ;;Total ram usage:        0 bytes
  4774 ;; Hardware stack levels used:    1
  4775 ;; Hardware stack levels required when called:   14
  4776 ;; This function calls:
  4777 ;;		_TMR2_Start
  4778 ;; This function is called by:
  4779 ;;		_main
  4780 ;; This function uses a non-reentrant model
  4781 ;;
  4782                           
  4783                           
  4784                           ;psect for function _TMR2_StartTimer
  4785  05D5                     _TMR2_StartTimer:	
  4786                           
  4787                           ;tmr2.c: 116: TMR2_Start();
  4788                           
  4789                           ;incstack = 0
  4790                           ; Regs used in _TMR2_StartTimer: [status,2+status,0+pclath+cstack]
  4791  05D5  3185  25D8         	fcall	_TMR2_Start
  4792  05D7  0008               	return
  4793  05D8                     __end_of_TMR2_StartTimer:	
  4794                           
  4795                           	psect	text4
  4796  05D8                     __ptext4:	
  4797 ;; *************** function _TMR2_Start *****************
  4798 ;; Defined at:
  4799 ;;		line 108 in file "mcc_generated_files/tmr2.c"
  4800 ;; Parameters:    Size  Location     Type
  4801 ;;		None
  4802 ;; Auto vars:     Size  Location     Type
  4803 ;;		None
  4804 ;; Return value:  Size  Location     Type
  4805 ;;                  1    wreg      void 
  4806 ;; Registers used:
  4807 ;;		None
  4808 ;; Tracked objects:
  4809 ;;		On entry : 0/0
  4810 ;;		On exit  : 0/0
  4811 ;;		Unchanged: 0/0
  4812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4817 ;;Total ram usage:        0 bytes
  4818 ;; Hardware stack levels used:    1
  4819 ;; Hardware stack levels required when called:   13
  4820 ;; This function calls:
  4821 ;;		Nothing
  4822 ;; This function is called by:
  4823 ;;		_TMR2_StartTimer
  4824 ;; This function uses a non-reentrant model
  4825 ;;
  4826                           
  4827                           
  4828                           ;psect for function _TMR2_Start
  4829  05D8                     _TMR2_Start:	
  4830                           
  4831                           ;tmr2.c: 111: T2CONbits.TMR2ON = 1;
  4832                           
  4833                           ;incstack = 0
  4834                           ; Regs used in _TMR2_Start: []
  4835  05D8  0020               	movlb	0	; select bank0
  4836  05D9  179C               	bsf	28,7	;volatile
  4837  05DA  0008               	return
  4838  05DB                     __end_of_TMR2_Start:	
  4839                           
  4840                           	psect	text5
  4841  047D                     __ptext5:	
  4842 ;; *************** function _SYSTEM_Initialize *****************
  4843 ;; Defined at:
  4844 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4845 ;; Parameters:    Size  Location     Type
  4846 ;;		None
  4847 ;; Auto vars:     Size  Location     Type
  4848 ;;		None
  4849 ;; Return value:  Size  Location     Type
  4850 ;;                  1    wreg      void 
  4851 ;; Registers used:
  4852 ;;		wreg, status,2, status,0, pclath, cstack
  4853 ;; Tracked objects:
  4854 ;;		On entry : 0/0
  4855 ;;		On exit  : 0/0
  4856 ;;		Unchanged: 0/0
  4857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4862 ;;Total ram usage:        0 bytes
  4863 ;; Hardware stack levels used:    1
  4864 ;; Hardware stack levels required when called:   15
  4865 ;; This function calls:
  4866 ;;		_EUSART_Initialize
  4867 ;;		_I2C_Initialize
  4868 ;;		_OSCILLATOR_Initialize
  4869 ;;		_PIN_MANAGER_Initialize
  4870 ;;		_PWM3_Initialize
  4871 ;;		_TMR2_Initialize
  4872 ;; This function is called by:
  4873 ;;		_main
  4874 ;; This function uses a non-reentrant model
  4875 ;;
  4876                           
  4877                           
  4878                           ;psect for function _SYSTEM_Initialize
  4879  047D                     _SYSTEM_Initialize:	
  4880                           
  4881                           ;mcc.c: 52: I2C_Initialize();
  4882                           
  4883                           ;incstack = 0
  4884                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4885  047D  3185  2517  3184   	fcall	_I2C_Initialize
  4886                           
  4887                           ;mcc.c: 53: PIN_MANAGER_Initialize();
  4888  0480  3181  21FD  3184   	fcall	_PIN_MANAGER_Initialize
  4889                           
  4890                           ;mcc.c: 54: OSCILLATOR_Initialize();
  4891  0483  3185  2556  3184   	fcall	_OSCILLATOR_Initialize
  4892                           
  4893                           ;mcc.c: 55: PWM3_Initialize();
  4894  0486  3185  2501  3184   	fcall	_PWM3_Initialize
  4895                           
  4896                           ;mcc.c: 56: TMR2_Initialize();
  4897  0489  3184  2469  3184   	fcall	_TMR2_Initialize
  4898                           
  4899                           ;mcc.c: 57: EUSART_Initialize();
  4900  048C  3182  22DE         	fcall	_EUSART_Initialize
  4901  048E  0008               	return
  4902  048F                     __end_of_SYSTEM_Initialize:	
  4903                           
  4904                           	psect	text6
  4905  0469                     __ptext6:	
  4906 ;; *************** function _TMR2_Initialize *****************
  4907 ;; Defined at:
  4908 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  4909 ;; Parameters:    Size  Location     Type
  4910 ;;		None
  4911 ;; Auto vars:     Size  Location     Type
  4912 ;;		None
  4913 ;; Return value:  Size  Location     Type
  4914 ;;                  1    wreg      void 
  4915 ;; Registers used:
  4916 ;;		wreg, status,2, status,0, pclath, cstack
  4917 ;; Tracked objects:
  4918 ;;		On entry : 0/0
  4919 ;;		On exit  : 0/0
  4920 ;;		Unchanged: 0/0
  4921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4926 ;;Total ram usage:        0 bytes
  4927 ;; Hardware stack levels used:    1
  4928 ;; Hardware stack levels required when called:   14
  4929 ;; This function calls:
  4930 ;;		_TMR2_SetInterruptHandler
  4931 ;; This function is called by:
  4932 ;;		_SYSTEM_Initialize
  4933 ;; This function uses a non-reentrant model
  4934 ;;
  4935                           
  4936                           
  4937                           ;psect for function _TMR2_Initialize
  4938  0469                     _TMR2_Initialize:	
  4939                           
  4940                           ;tmr2.c: 69: T2CLKCON = 0x00;
  4941                           
  4942                           ;incstack = 0
  4943                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4944  0469  0020               	movlb	0	; select bank0
  4945  046A  019E               	clrf	30	;volatile
  4946                           
  4947                           ;tmr2.c: 72: T2HLT = 0x00;
  4948  046B  019D               	clrf	29	;volatile
  4949                           
  4950                           ;tmr2.c: 75: T2RST = 0x00;
  4951  046C  019F               	clrf	31	;volatile
  4952                           
  4953                           ;tmr2.c: 78: T2PR = 0x9B;
  4954  046D  309B               	movlw	155
  4955  046E  009B               	movwf	27	;volatile
  4956                           
  4957                           ;tmr2.c: 81: T2TMR = 0x00;
  4958  046F  019A               	clrf	26	;volatile
  4959                           
  4960                           ;tmr2.c: 84: PIR1bits.TMR2IF = 0;
  4961  0470  1090               	bcf	16,1	;volatile
  4962                           
  4963                           ;tmr2.c: 87: PIE1bits.TMR2IE = 1;
  4964  0471  0021               	movlb	1	; select bank1
  4965  0472  1490               	bsf	16,1	;volatile
  4966                           
  4967                           ;tmr2.c: 90: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
  4968  0473  30FD               	movlw	low _TMR2_DefaultInterruptHandler
  4969  0474  00A4               	movwf	TMR2_SetInterruptHandler@InterruptHandler^(0+128)
  4970  0475  3005               	movlw	high _TMR2_DefaultInterruptHandler
  4971  0476  00A5               	movwf	(TMR2_SetInterruptHandler@InterruptHandler^(0+128)+1)
  4972  0477  3185  252B         	fcall	_TMR2_SetInterruptHandler
  4973                           
  4974                           ;tmr2.c: 93: T2CON = 0xF0;
  4975  0479  30F0               	movlw	240
  4976  047A  0020               	movlb	0	; select bank0
  4977  047B  009C               	movwf	28	;volatile
  4978  047C  0008               	return
  4979  047D                     __end_of_TMR2_Initialize:	
  4980                           
  4981                           	psect	text7
  4982  052B                     __ptext7:	
  4983 ;; *************** function _TMR2_SetInterruptHandler *****************
  4984 ;; Defined at:
  4985 ;;		line 186 in file "mcc_generated_files/tmr2.c"
  4986 ;; Parameters:    Size  Location     Type
  4987 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  4988 ;;		 -> MyTimer2ISR(1), TMR2_DefaultInterruptHandler(1), 
  4989 ;; Auto vars:     Size  Location     Type
  4990 ;;		None
  4991 ;; Return value:  Size  Location     Type
  4992 ;;                  1    wreg      void 
  4993 ;; Registers used:
  4994 ;;		wreg
  4995 ;; Tracked objects:
  4996 ;;		On entry : 0/0
  4997 ;;		On exit  : 0/0
  4998 ;;		Unchanged: 0/0
  4999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5000 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5003 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5004 ;;Total ram usage:        2 bytes
  5005 ;; Hardware stack levels used:    1
  5006 ;; Hardware stack levels required when called:   13
  5007 ;; This function calls:
  5008 ;;		Nothing
  5009 ;; This function is called by:
  5010 ;;		_TMR2_Initialize
  5011 ;;		_main
  5012 ;; This function uses a non-reentrant model
  5013 ;;
  5014                           
  5015                           
  5016                           ;psect for function _TMR2_SetInterruptHandler
  5017  052B                     _TMR2_SetInterruptHandler:	
  5018                           
  5019                           ;tmr2.c: 187: TMR2_InterruptHandler = InterruptHandler;
  5020                           
  5021                           ;incstack = 0
  5022                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  5023  052B  0021               	movlb	1	; select bank1
  5024  052C  0825               	movf	(TMR2_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5025  052D  0020               	movlb	0	; select bank0
  5026  052E  00E4               	movwf	_TMR2_InterruptHandler+1
  5027  052F  0021               	movlb	1	; select bank1
  5028  0530  0824               	movf	TMR2_SetInterruptHandler@InterruptHandler^(0+128),w
  5029  0531  0020               	movlb	0	; select bank0
  5030  0532  00E3               	movwf	_TMR2_InterruptHandler
  5031  0533  0008               	return
  5032  0534                     __end_of_TMR2_SetInterruptHandler:	
  5033                           
  5034                           	psect	text8
  5035  0501                     __ptext8:	
  5036 ;; *************** function _PWM3_Initialize *****************
  5037 ;; Defined at:
  5038 ;;		line 58 in file "mcc_generated_files/pwm3.c"
  5039 ;; Parameters:    Size  Location     Type
  5040 ;;		None
  5041 ;; Auto vars:     Size  Location     Type
  5042 ;;		None
  5043 ;; Return value:  Size  Location     Type
  5044 ;;                  1    wreg      void 
  5045 ;; Registers used:
  5046 ;;		wreg, status,2, status,0
  5047 ;; Tracked objects:
  5048 ;;		On entry : 0/0
  5049 ;;		On exit  : 0/0
  5050 ;;		Unchanged: 0/0
  5051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5056 ;;Total ram usage:        0 bytes
  5057 ;; Hardware stack levels used:    1
  5058 ;; Hardware stack levels required when called:   13
  5059 ;; This function calls:
  5060 ;;		Nothing
  5061 ;; This function is called by:
  5062 ;;		_SYSTEM_Initialize
  5063 ;; This function uses a non-reentrant model
  5064 ;;
  5065                           
  5066                           
  5067                           ;psect for function _PWM3_Initialize
  5068  0501                     _PWM3_Initialize:	
  5069                           
  5070                           ;pwm3.c: 62: PWM3CON = 0x80;
  5071                           
  5072                           ;incstack = 0
  5073                           ; Regs used in _PWM3_Initialize: [wreg+status,2+status,0]
  5074  0501  3080               	movlw	128
  5075  0502  002C               	movlb	12	; select bank12
  5076  0503  0099               	movwf	25	;volatile
  5077                           
  5078                           ;pwm3.c: 65: PWM3DCH = 0x0F;
  5079  0504  300F               	movlw	15
  5080  0505  0098               	movwf	24	;volatile
  5081                           
  5082                           ;pwm3.c: 68: PWM3DCL = 0x40;
  5083  0506  3040               	movlw	64
  5084  0507  0097               	movwf	23	;volatile
  5085                           
  5086                           ;pwm3.c: 71: CCPTMRSbits.P3TSEL = 0;
  5087  0508  30CF               	movlw	-49
  5088  0509  0025               	movlb	5	; select bank5
  5089  050A  059E               	andwf	30,f	;volatile
  5090  050B  0008               	return
  5091  050C                     __end_of_PWM3_Initialize:	
  5092                           
  5093                           	psect	text9
  5094  01FD                     __ptext9:	
  5095 ;; *************** function _PIN_MANAGER_Initialize *****************
  5096 ;; Defined at:
  5097 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  5098 ;; Parameters:    Size  Location     Type
  5099 ;;		None
  5100 ;; Auto vars:     Size  Location     Type
  5101 ;;		None
  5102 ;; Return value:  Size  Location     Type
  5103 ;;                  1    wreg      void 
  5104 ;; Registers used:
  5105 ;;		wreg, status,2
  5106 ;; Tracked objects:
  5107 ;;		On entry : 0/0
  5108 ;;		On exit  : 0/0
  5109 ;;		Unchanged: 0/0
  5110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5115 ;;Total ram usage:        0 bytes
  5116 ;; Hardware stack levels used:    1
  5117 ;; Hardware stack levels required when called:   13
  5118 ;; This function calls:
  5119 ;;		Nothing
  5120 ;; This function is called by:
  5121 ;;		_SYSTEM_Initialize
  5122 ;; This function uses a non-reentrant model
  5123 ;;
  5124                           
  5125                           
  5126                           ;psect for function _PIN_MANAGER_Initialize
  5127  01FD                     _PIN_MANAGER_Initialize:	
  5128                           
  5129                           ;pin_manager.c: 60: LATA = 0x00;
  5130                           
  5131                           ;incstack = 0
  5132                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  5133  01FD  0022               	movlb	2	; select bank2
  5134  01FE  018C               	clrf	12	;volatile
  5135                           
  5136                           ;pin_manager.c: 61: LATB = 0x00;
  5137  01FF  018D               	clrf	13	;volatile
  5138                           
  5139                           ;pin_manager.c: 62: LATC = 0x00;
  5140  0200  018E               	clrf	14	;volatile
  5141                           
  5142                           ;pin_manager.c: 67: TRISA = 0x13;
  5143  0201  3013               	movlw	19
  5144  0202  0021               	movlb	1	; select bank1
  5145  0203  008C               	movwf	12	;volatile
  5146                           
  5147                           ;pin_manager.c: 68: TRISB = 0x70;
  5148  0204  3070               	movlw	112
  5149  0205  008D               	movwf	13	;volatile
  5150                           
  5151                           ;pin_manager.c: 69: TRISC = 0x1F;
  5152  0206  301F               	movlw	31
  5153  0207  008E               	movwf	14	;volatile
  5154                           
  5155                           ;pin_manager.c: 74: ANSELC = 0x0E;
  5156  0208  300E               	movlw	14
  5157  0209  0023               	movlb	3	; select bank3
  5158  020A  008E               	movwf	14	;volatile
  5159                           
  5160                           ;pin_manager.c: 75: ANSELB = 0x00;
  5161  020B  018D               	clrf	13	;volatile
  5162                           
  5163                           ;pin_manager.c: 76: ANSELA = 0x01;
  5164  020C  3001               	movlw	1
  5165  020D  008C               	movwf	12	;volatile
  5166                           
  5167                           ;pin_manager.c: 81: WPUB = 0x00;
  5168  020E  0024               	movlb	4	; select bank4
  5169  020F  018D               	clrf	13	;volatile
  5170                           
  5171                           ;pin_manager.c: 82: WPUA = 0x00;
  5172  0210  018C               	clrf	12	;volatile
  5173                           
  5174                           ;pin_manager.c: 83: WPUC = 0x00;
  5175  0211  018E               	clrf	14	;volatile
  5176                           
  5177                           ;pin_manager.c: 84: OPTION_REGbits.nWPUEN = 1;
  5178  0212  0021               	movlb	1	; select bank1
  5179  0213  1795               	bsf	21,7	;volatile
  5180                           
  5181                           ;pin_manager.c: 89: ODCONA = 0x00;
  5182  0214  0025               	movlb	5	; select bank5
  5183  0215  018C               	clrf	12	;volatile
  5184                           
  5185                           ;pin_manager.c: 90: ODCONB = 0x00;
  5186  0216  018D               	clrf	13	;volatile
  5187                           
  5188                           ;pin_manager.c: 91: ODCONC = 0x00;
  5189  0217  018E               	clrf	14	;volatile
  5190                           
  5191                           ;pin_manager.c: 96: SLRCONA = 0x37;
  5192  0218  3037               	movlw	55
  5193  0219  0026               	movlb	6	; select bank6
  5194  021A  008C               	movwf	12	;volatile
  5195                           
  5196                           ;pin_manager.c: 97: SLRCONB = 0xF0;
  5197  021B  30F0               	movlw	240
  5198  021C  008D               	movwf	13	;volatile
  5199                           
  5200                           ;pin_manager.c: 98: SLRCONC = 0xFF;
  5201  021D  30FF               	movlw	255
  5202  021E  008E               	movwf	14	;volatile
  5203                           
  5204                           ;pin_manager.c: 103: INLVLA = 0x3F;
  5205  021F  303F               	movlw	63
  5206  0220  0027               	movlb	7	; select bank7
  5207  0221  008C               	movwf	12	;volatile
  5208                           
  5209                           ;pin_manager.c: 104: INLVLB = 0xF0;
  5210  0222  30F0               	movlw	240
  5211  0223  008D               	movwf	13	;volatile
  5212                           
  5213                           ;pin_manager.c: 105: INLVLC = 0xFF;
  5214  0224  30FF               	movlw	255
  5215  0225  008E               	movwf	14	;volatile
  5216                           
  5217                           ;pin_manager.c: 114: RXPPS = 0x0D;
  5218  0226  300D               	movlw	13
  5219  0227  003C               	movlb	28	; select bank28
  5220  0228  00A4               	movwf	36	;volatile
  5221                           
  5222                           ;pin_manager.c: 115: SSPDATPPS = 0x0C;
  5223  0229  300C               	movlw	12
  5224  022A  00A1               	movwf	33	;volatile
  5225                           
  5226                           ;pin_manager.c: 116: RB6PPS = 0x10;
  5227  022B  3010               	movlw	16
  5228  022C  003D               	movlb	29	; select bank29
  5229  022D  009E               	movwf	30	;volatile
  5230                           
  5231                           ;pin_manager.c: 117: RB7PPS = 0x12;
  5232  022E  3012               	movlw	18
  5233  022F  009F               	movwf	31	;volatile
  5234                           
  5235                           ;pin_manager.c: 118: RB4PPS = 0x11;
  5236  0230  3011               	movlw	17
  5237  0231  009C               	movwf	28	;volatile
  5238                           
  5239                           ;pin_manager.c: 119: RA2PPS = 0x0E;
  5240  0232  300E               	movlw	14
  5241  0233  0092               	movwf	18	;volatile
  5242                           
  5243                           ;pin_manager.c: 120: SSPCLKPPS = 0x0E;
  5244  0234  300E               	movlw	14
  5245  0235  003C               	movlb	28	; select bank28
  5246  0236  00A0               	movwf	32	;volatile
  5247  0237  0008               	return
  5248  0238                     __end_of_PIN_MANAGER_Initialize:	
  5249                           
  5250                           	psect	text10
  5251  0556                     __ptext10:	
  5252 ;; *************** function _OSCILLATOR_Initialize *****************
  5253 ;; Defined at:
  5254 ;;		line 60 in file "mcc_generated_files/mcc.c"
  5255 ;; Parameters:    Size  Location     Type
  5256 ;;		None
  5257 ;; Auto vars:     Size  Location     Type
  5258 ;;		None
  5259 ;; Return value:  Size  Location     Type
  5260 ;;                  1    wreg      void 
  5261 ;; Registers used:
  5262 ;;		wreg, status,2
  5263 ;; Tracked objects:
  5264 ;;		On entry : 0/0
  5265 ;;		On exit  : 0/0
  5266 ;;		Unchanged: 0/0
  5267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5271 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5272 ;;Total ram usage:        0 bytes
  5273 ;; Hardware stack levels used:    1
  5274 ;; Hardware stack levels required when called:   13
  5275 ;; This function calls:
  5276 ;;		Nothing
  5277 ;; This function is called by:
  5278 ;;		_SYSTEM_Initialize
  5279 ;; This function uses a non-reentrant model
  5280 ;;
  5281                           
  5282                           
  5283                           ;psect for function _OSCILLATOR_Initialize
  5284  0556                     _OSCILLATOR_Initialize:	
  5285                           
  5286                           ;mcc.c: 63: OSCCON = 0x6A;
  5287                           
  5288                           ;incstack = 0
  5289                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5290  0556  306A               	movlw	106
  5291  0557  0021               	movlb	1	; select bank1
  5292  0558  0099               	movwf	25	;volatile
  5293                           
  5294                           ;mcc.c: 65: OSCTUNE = 0x00;
  5295  0559  0198               	clrf	24	;volatile
  5296                           
  5297                           ;mcc.c: 67: BORCON = 0x00;
  5298  055A  0022               	movlb	2	; select bank2
  5299  055B  0196               	clrf	22	;volatile
  5300  055C  0008               	return
  5301  055D                     __end_of_OSCILLATOR_Initialize:	
  5302                           
  5303                           	psect	text11
  5304  0517                     __ptext11:	
  5305 ;; *************** function _I2C_Initialize *****************
  5306 ;; Defined at:
  5307 ;;		line 167 in file "mcc_generated_files/i2c_master.c"
  5308 ;; Parameters:    Size  Location     Type
  5309 ;;		None
  5310 ;; Auto vars:     Size  Location     Type
  5311 ;;		None
  5312 ;; Return value:  Size  Location     Type
  5313 ;;                  1    wreg      void 
  5314 ;; Registers used:
  5315 ;;		wreg, status,2
  5316 ;; Tracked objects:
  5317 ;;		On entry : 0/0
  5318 ;;		On exit  : 0/0
  5319 ;;		Unchanged: 0/0
  5320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5324 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5325 ;;Total ram usage:        0 bytes
  5326 ;; Hardware stack levels used:    1
  5327 ;; Hardware stack levels required when called:   13
  5328 ;; This function calls:
  5329 ;;		Nothing
  5330 ;; This function is called by:
  5331 ;;		_SYSTEM_Initialize
  5332 ;; This function uses a non-reentrant model
  5333 ;;
  5334                           
  5335                           
  5336                           ;psect for function _I2C_Initialize
  5337  0517                     _I2C_Initialize:	
  5338                           
  5339                           ;i2c_master.c: 169: SSP1STAT = 0x80;
  5340                           
  5341                           ;incstack = 0
  5342                           ; Regs used in _I2C_Initialize: [wreg+status,2]
  5343  0517  3080               	movlw	128
  5344  0518  0024               	movlb	4	; select bank4
  5345  0519  0094               	movwf	20	;volatile
  5346                           
  5347                           ;i2c_master.c: 170: SSP1CON1 = 0x08;
  5348  051A  3008               	movlw	8
  5349  051B  0095               	movwf	21	;volatile
  5350                           
  5351                           ;i2c_master.c: 171: SSP1CON2 = 0x00;
  5352  051C  0196               	clrf	22	;volatile
  5353                           
  5354                           ;i2c_master.c: 172: SSP1ADD = 0x09;
  5355  051D  3009               	movlw	9
  5356  051E  0092               	movwf	18	;volatile
  5357                           
  5358                           ;i2c_master.c: 173: SSP1CON1bits.SSPEN = 0;
  5359  051F  1295               	bcf	21,5	;volatile
  5360  0520  0008               	return
  5361  0521                     __end_of_I2C_Initialize:	
  5362                           
  5363                           	psect	text12
  5364  02DE                     __ptext12:	
  5365 ;; *************** function _EUSART_Initialize *****************
  5366 ;; Defined at:
  5367 ;;		line 83 in file "mcc_generated_files/eusart.c"
  5368 ;; Parameters:    Size  Location     Type
  5369 ;;		None
  5370 ;; Auto vars:     Size  Location     Type
  5371 ;;		None
  5372 ;; Return value:  Size  Location     Type
  5373 ;;                  1    wreg      void 
  5374 ;; Registers used:
  5375 ;;		wreg, status,2, status,0, pclath, cstack
  5376 ;; Tracked objects:
  5377 ;;		On entry : 0/0
  5378 ;;		On exit  : 0/0
  5379 ;;		Unchanged: 0/0
  5380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5385 ;;Total ram usage:        0 bytes
  5386 ;; Hardware stack levels used:    1
  5387 ;; Hardware stack levels required when called:   14
  5388 ;; This function calls:
  5389 ;;		_EUSART_SetErrorHandler
  5390 ;;		_EUSART_SetFramingErrorHandler
  5391 ;;		_EUSART_SetOverrunErrorHandler
  5392 ;;		_EUSART_SetRxInterruptHandler
  5393 ;; This function is called by:
  5394 ;;		_SYSTEM_Initialize
  5395 ;; This function uses a non-reentrant model
  5396 ;;
  5397                           
  5398                           
  5399                           ;psect for function _EUSART_Initialize
  5400  02DE                     _EUSART_Initialize:	
  5401                           
  5402                           ;eusart.c: 86: PIE1bits.RCIE = 0;
  5403                           
  5404                           ;incstack = 0
  5405                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5406  02DE  0021               	movlb	1	; select bank1
  5407  02DF  1290               	bcf	16,5	;volatile
  5408                           
  5409                           ;eusart.c: 87: EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  5410  02E0  30A9               	movlw	low _EUSART_Receive_ISR
  5411  02E1  00A4               	movwf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128)
  5412  02E2  3002               	movlw	high _EUSART_Receive_ISR
  5413  02E3  00A5               	movwf	(EUSART_SetRxInterruptHandler@interruptHandler^(0+128)+1)
  5414  02E4  3185  2534  3182   	fcall	_EUSART_SetRxInterruptHandler
  5415                           
  5416                           ;eusart.c: 91: BAUD1CON = 0x09;
  5417  02E7  3009               	movlw	9
  5418  02E8  0023               	movlb	3	; select bank3
  5419  02E9  009F               	movwf	31	;volatile
  5420                           
  5421                           ;eusart.c: 94: RC1STA = 0x90;
  5422  02EA  3090               	movlw	144
  5423  02EB  009D               	movwf	29	;volatile
  5424                           
  5425                           ;eusart.c: 97: TX1STA = 0x24;
  5426  02EC  3024               	movlw	36
  5427  02ED  009E               	movwf	30	;volatile
  5428                           
  5429                           ;eusart.c: 100: SPBRGL = 0x67;
  5430  02EE  3067               	movlw	103
  5431  02EF  009B               	movwf	27	;volatile
  5432                           
  5433                           ;eusart.c: 103: SPBRGH = 0x00;
  5434  02F0  019C               	clrf	28	;volatile
  5435                           
  5436                           ;eusart.c: 106: EUSART_SetFramingErrorHandler(EUSART_DefaultFramingErrorHandler);
  5437  02F1  30FE               	movlw	low _EUSART_DefaultFramingErrorHandler
  5438  02F2  0021               	movlb	1	; select bank1
  5439  02F3  00A4               	movwf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128)
  5440  02F4  3005               	movlw	high _EUSART_DefaultFramingErrorHandler
  5441  02F5  00A5               	movwf	(EUSART_SetFramingErrorHandler@interruptHandler^(0+128)+1)
  5442  02F6  3185  253D  3182   	fcall	_EUSART_SetFramingErrorHandler
  5443                           
  5444                           ;eusart.c: 107: EUSART_SetOverrunErrorHandler(EUSART_DefaultOverrunErrorHandler);
  5445  02F9  30CE               	movlw	low _EUSART_DefaultOverrunErrorHandler
  5446  02FA  0021               	movlb	1	; select bank1
  5447  02FB  00A4               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)
  5448  02FC  3005               	movlw	high _EUSART_DefaultOverrunErrorHandler
  5449  02FD  00A5               	movwf	(EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)+1)
  5450  02FE  3185  2576  3182   	fcall	_EUSART_SetOverrunErrorHandler
  5451                           
  5452                           ;eusart.c: 108: EUSART_SetErrorHandler(EUSART_DefaultErrorHandler);
  5453  0301  30F6               	movlw	low _EUSART_DefaultErrorHandler
  5454  0302  0021               	movlb	1	; select bank1
  5455  0303  00A4               	movwf	EUSART_SetErrorHandler@interruptHandler^(0+128)
  5456  0304  3005               	movlw	high _EUSART_DefaultErrorHandler
  5457  0305  00A5               	movwf	(EUSART_SetErrorHandler@interruptHandler^(0+128)+1)
  5458  0306  3185  257C         	fcall	_EUSART_SetErrorHandler
  5459                           
  5460                           ;eusart.c: 110: eusartRxLastError.status = 0;
  5461  0308  0020               	movlb	0	; select bank0
  5462  0309  01D4               	clrf	_eusartRxLastError	;volatile
  5463                           
  5464                           ;eusart.c: 113: eusartRxHead = 0;
  5465  030A  01D7               	clrf	_eusartRxHead	;volatile
  5466                           
  5467                           ;eusart.c: 114: eusartRxTail = 0;
  5468  030B  01D6               	clrf	_eusartRxTail	;volatile
  5469                           
  5470                           ;eusart.c: 115: eusartRxCount = 0;
  5471  030C  01D5               	clrf	_eusartRxCount	;volatile
  5472                           
  5473                           ;eusart.c: 118: PIE1bits.RCIE = 1;
  5474  030D  0021               	movlb	1	; select bank1
  5475  030E  1690               	bsf	16,5	;volatile
  5476  030F  0008               	return
  5477  0310                     __end_of_EUSART_Initialize:	
  5478                           
  5479                           	psect	text13
  5480  0534                     __ptext13:	
  5481 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  5482 ;; Defined at:
  5483 ;;		line 234 in file "mcc_generated_files/eusart.c"
  5484 ;; Parameters:    Size  Location     Type
  5485 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5486 ;;		 -> MyUART_ISR(1), EUSART_Receive_ISR(1), 
  5487 ;; Auto vars:     Size  Location     Type
  5488 ;;		None
  5489 ;; Return value:  Size  Location     Type
  5490 ;;                  1    wreg      void 
  5491 ;; Registers used:
  5492 ;;		wreg
  5493 ;; Tracked objects:
  5494 ;;		On entry : 0/0
  5495 ;;		On exit  : 0/0
  5496 ;;		Unchanged: 0/0
  5497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5498 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5501 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5502 ;;Total ram usage:        2 bytes
  5503 ;; Hardware stack levels used:    1
  5504 ;; Hardware stack levels required when called:   13
  5505 ;; This function calls:
  5506 ;;		Nothing
  5507 ;; This function is called by:
  5508 ;;		_EUSART_Initialize
  5509 ;;		_main
  5510 ;; This function uses a non-reentrant model
  5511 ;;
  5512                           
  5513                           
  5514                           ;psect for function _EUSART_SetRxInterruptHandler
  5515  0534                     _EUSART_SetRxInterruptHandler:	
  5516                           
  5517                           ;eusart.c: 235: EUSART_RxDefaultInterruptHandler = interruptHandler;
  5518                           
  5519                           ;incstack = 0
  5520                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  5521  0534  0021               	movlb	1	; select bank1
  5522  0535  0825               	movf	(EUSART_SetRxInterruptHandler@interruptHandler+1)^(0+128),w
  5523  0536  0020               	movlb	0	; select bank0
  5524  0537  00E8               	movwf	_EUSART_RxDefaultInterruptHandler+1
  5525  0538  0021               	movlb	1	; select bank1
  5526  0539  0824               	movf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128),w
  5527  053A  0020               	movlb	0	; select bank0
  5528  053B  00E7               	movwf	_EUSART_RxDefaultInterruptHandler
  5529  053C  0008               	return
  5530  053D                     __end_of_EUSART_SetRxInterruptHandler:	
  5531                           
  5532                           	psect	text14
  5533  0576                     __ptext14:	
  5534 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  5535 ;; Defined at:
  5536 ;;		line 225 in file "mcc_generated_files/eusart.c"
  5537 ;; Parameters:    Size  Location     Type
  5538 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5539 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  5540 ;; Auto vars:     Size  Location     Type
  5541 ;;		None
  5542 ;; Return value:  Size  Location     Type
  5543 ;;                  1    wreg      void 
  5544 ;; Registers used:
  5545 ;;		wreg
  5546 ;; Tracked objects:
  5547 ;;		On entry : 0/0
  5548 ;;		On exit  : 0/0
  5549 ;;		Unchanged: 0/0
  5550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5551 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5554 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5555 ;;Total ram usage:        2 bytes
  5556 ;; Hardware stack levels used:    1
  5557 ;; Hardware stack levels required when called:   13
  5558 ;; This function calls:
  5559 ;;		Nothing
  5560 ;; This function is called by:
  5561 ;;		_EUSART_Initialize
  5562 ;; This function uses a non-reentrant model
  5563 ;;
  5564                           
  5565                           
  5566                           ;psect for function _EUSART_SetOverrunErrorHandler
  5567  0576                     _EUSART_SetOverrunErrorHandler:	
  5568                           
  5569                           ;eusart.c: 226: EUSART_OverrunErrorHandler = interruptHandler;
  5570                           
  5571                           ;incstack = 0
  5572                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  5573  0576  0021               	movlb	1	; select bank1
  5574  0577  0825               	movf	(EUSART_SetOverrunErrorHandler@interruptHandler+1)^(0+128),w
  5575  0578  00A3               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  5576  0579  0824               	movf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128),w
  5577  057A  00A2               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  5578  057B  0008               	return
  5579  057C                     __end_of_EUSART_SetOverrunErrorHandler:	
  5580                           
  5581                           	psect	text15
  5582  053D                     __ptext15:	
  5583 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  5584 ;; Defined at:
  5585 ;;		line 221 in file "mcc_generated_files/eusart.c"
  5586 ;; Parameters:    Size  Location     Type
  5587 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5588 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  5589 ;; Auto vars:     Size  Location     Type
  5590 ;;		None
  5591 ;; Return value:  Size  Location     Type
  5592 ;;                  1    wreg      void 
  5593 ;; Registers used:
  5594 ;;		wreg
  5595 ;; Tracked objects:
  5596 ;;		On entry : 0/0
  5597 ;;		On exit  : 0/0
  5598 ;;		Unchanged: 0/0
  5599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5600 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5603 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5604 ;;Total ram usage:        2 bytes
  5605 ;; Hardware stack levels used:    1
  5606 ;; Hardware stack levels required when called:   13
  5607 ;; This function calls:
  5608 ;;		Nothing
  5609 ;; This function is called by:
  5610 ;;		_EUSART_Initialize
  5611 ;; This function uses a non-reentrant model
  5612 ;;
  5613                           
  5614                           
  5615                           ;psect for function _EUSART_SetFramingErrorHandler
  5616  053D                     _EUSART_SetFramingErrorHandler:	
  5617                           
  5618                           ;eusart.c: 222: EUSART_FramingErrorHandler = interruptHandler;
  5619                           
  5620                           ;incstack = 0
  5621                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  5622  053D  0021               	movlb	1	; select bank1
  5623  053E  0825               	movf	(EUSART_SetFramingErrorHandler@interruptHandler+1)^(0+128),w
  5624  053F  0020               	movlb	0	; select bank0
  5625  0540  00E6               	movwf	_EUSART_FramingErrorHandler+1
  5626  0541  0021               	movlb	1	; select bank1
  5627  0542  0824               	movf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128),w
  5628  0543  0020               	movlb	0	; select bank0
  5629  0544  00E5               	movwf	_EUSART_FramingErrorHandler
  5630  0545  0008               	return
  5631  0546                     __end_of_EUSART_SetFramingErrorHandler:	
  5632                           
  5633                           	psect	text16
  5634  057C                     __ptext16:	
  5635 ;; *************** function _EUSART_SetErrorHandler *****************
  5636 ;; Defined at:
  5637 ;;		line 229 in file "mcc_generated_files/eusart.c"
  5638 ;; Parameters:    Size  Location     Type
  5639 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5640 ;;		 -> EUSART_DefaultErrorHandler(1), 
  5641 ;; Auto vars:     Size  Location     Type
  5642 ;;		None
  5643 ;; Return value:  Size  Location     Type
  5644 ;;                  1    wreg      void 
  5645 ;; Registers used:
  5646 ;;		wreg
  5647 ;; Tracked objects:
  5648 ;;		On entry : 0/0
  5649 ;;		On exit  : 0/0
  5650 ;;		Unchanged: 0/0
  5651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5652 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5655 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5656 ;;Total ram usage:        2 bytes
  5657 ;; Hardware stack levels used:    1
  5658 ;; Hardware stack levels required when called:   13
  5659 ;; This function calls:
  5660 ;;		Nothing
  5661 ;; This function is called by:
  5662 ;;		_EUSART_Initialize
  5663 ;; This function uses a non-reentrant model
  5664 ;;
  5665                           
  5666                           
  5667                           ;psect for function _EUSART_SetErrorHandler
  5668  057C                     _EUSART_SetErrorHandler:	
  5669                           
  5670                           ;eusart.c: 230: EUSART_ErrorHandler = interruptHandler;
  5671                           
  5672                           ;incstack = 0
  5673                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  5674  057C  0021               	movlb	1	; select bank1
  5675  057D  0825               	movf	(EUSART_SetErrorHandler@interruptHandler+1)^(0+128),w
  5676  057E  00A1               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  5677  057F  0824               	movf	EUSART_SetErrorHandler@interruptHandler^(0+128),w
  5678  0580  00A0               	movwf	_EUSART_ErrorHandler^(0+128)
  5679  0581  0008               	return
  5680  0582                     __end_of_EUSART_SetErrorHandler:	
  5681                           
  5682                           	psect	intentry
  5683  0004                     __pintentry:	
  5684 ;; *************** function _INTERRUPT_InterruptManager *****************
  5685 ;; Defined at:
  5686 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5687 ;; Parameters:    Size  Location     Type
  5688 ;;		None
  5689 ;; Auto vars:     Size  Location     Type
  5690 ;;		None
  5691 ;; Return value:  Size  Location     Type
  5692 ;;                  1    wreg      void 
  5693 ;; Registers used:
  5694 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5695 ;; Tracked objects:
  5696 ;;		On entry : 0/0
  5697 ;;		On exit  : 0/0
  5698 ;;		Unchanged: 0/0
  5699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5702 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5703 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5704 ;;Total ram usage:        1 bytes
  5705 ;; Hardware stack levels used:    1
  5706 ;; Hardware stack levels required when called:   12
  5707 ;; This function calls:
  5708 ;;		Absolute function
  5709 ;;		_EUSART_Receive_ISR
  5710 ;;		_MyUART_ISR
  5711 ;;		_TMR2_ISR
  5712 ;; This function is called by:
  5713 ;;		Interrupt level 1
  5714 ;; This function uses a non-reentrant model
  5715 ;;
  5716                           
  5717  0004                     _INTERRUPT_InterruptManager:	
  5718                           
  5719                           ;incstack = 0
  5720  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  5721                           
  5722                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5723  0005  3180               	pagesel	$
  5724  0006  0020               	movlb	0	; select bank0
  5725  0007  087F               	movf	127,w
  5726  0008  00E2               	movwf	??_INTERRUPT_InterruptManager
  5727                           
  5728                           ;interrupt_manager.c: 55: if(INTCONbits.PEIE == 1)
  5729  0009  1F0B               	btfss	11,6	;volatile
  5730  000A  281F               	goto	i1l123
  5731                           
  5732                           ;interrupt_manager.c: 56: {
  5733                           ;interrupt_manager.c: 57: if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
  5734  000B  0021               	movlb	1	; select bank1
  5735  000C  1E90               	btfss	16,5	;volatile
  5736  000D  2817               	goto	i1l118
  5737  000E  0020               	movlb	0	; select bank0
  5738  000F  1E90               	btfss	16,5	;volatile
  5739  0010  2817               	goto	i1l118
  5740                           
  5741                           ;interrupt_manager.c: 58: {
  5742                           ;interrupt_manager.c: 59: EUSART_RxDefaultInterruptHandler();
  5743  0011  0868               	movf	_EUSART_RxDefaultInterruptHandler+1,w
  5744  0012  008A               	movwf	10
  5745  0013  0867               	movf	_EUSART_RxDefaultInterruptHandler,w
  5746  0014  000A               	callw
  5747  0015  3180               	pagesel	$
  5748                           
  5749                           ;interrupt_manager.c: 60: }
  5750  0016  281F               	goto	i1l123
  5751  0017                     i1l118:	
  5752                           
  5753                           ;interrupt_manager.c: 61: else if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
  5754  0017  0021               	movlb	1	; select bank1
  5755  0018  1C90               	btfss	16,1	;volatile
  5756  0019  281F               	goto	i1l123
  5757  001A  0020               	movlb	0	; select bank0
  5758  001B  1C90               	btfss	16,1	;volatile
  5759  001C  281F               	goto	i1l123
  5760                           
  5761                           ;interrupt_manager.c: 62: {
  5762                           ;interrupt_manager.c: 63: TMR2_ISR();
  5763  001D  3185  258E         	fcall	_TMR2_ISR
  5764  001F                     i1l123:	
  5765                           ;interrupt_manager.c: 70: else
  5766                           ;interrupt_manager.c: 71: {
  5767                           
  5768                           ;interrupt_manager.c: 68: }
  5769                           ;interrupt_manager.c: 69: }
  5770                           
  5771                           ;interrupt_manager.c: 65: else
  5772                           ;interrupt_manager.c: 66: {
  5773                           
  5774                           ;interrupt_manager.c: 64: }
  5775                           
  5776  001F  0020               	movlb	0	; select bank0
  5777  0020  0862               	movf	??_INTERRUPT_InterruptManager,w
  5778  0021  00FF               	movwf	127
  5779  0022  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  5780  0023  0009               	retfie
  5781  0024                     __end_of_INTERRUPT_InterruptManager:	
  5782                           
  5783                           	psect	text18
  5784  058E                     __ptext18:	
  5785 ;; *************** function _TMR2_ISR *****************
  5786 ;; Defined at:
  5787 ;;		line 165 in file "mcc_generated_files/tmr2.c"
  5788 ;; Parameters:    Size  Location     Type
  5789 ;;		None
  5790 ;; Auto vars:     Size  Location     Type
  5791 ;;		None
  5792 ;; Return value:  Size  Location     Type
  5793 ;;                  1    wreg      void 
  5794 ;; Registers used:
  5795 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5796 ;; Tracked objects:
  5797 ;;		On entry : 0/0
  5798 ;;		On exit  : 0/0
  5799 ;;		Unchanged: 0/0
  5800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5804 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5805 ;;Total ram usage:        0 bytes
  5806 ;; Hardware stack levels used:    1
  5807 ;; Hardware stack levels required when called:   11
  5808 ;; This function calls:
  5809 ;;		_TMR2_CallBack
  5810 ;; This function is called by:
  5811 ;;		_INTERRUPT_InterruptManager
  5812 ;; This function uses a non-reentrant model
  5813 ;;
  5814                           
  5815                           
  5816                           ;psect for function _TMR2_ISR
  5817  058E                     _TMR2_ISR:	
  5818                           
  5819                           ;tmr2.c: 169: PIR1bits.TMR2IF = 0;
  5820                           
  5821                           ;incstack = 0
  5822                           ; Regs used in _TMR2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5823  058E  0020               	movlb	0	; select bank0
  5824  058F  1090               	bcf	16,1	;volatile
  5825                           
  5826                           ;tmr2.c: 173: TMR2_CallBack();
  5827  0590  3185  250C         	fcall	_TMR2_CallBack
  5828  0592  0008               	return
  5829  0593                     __end_of_TMR2_ISR:	
  5830                           
  5831                           	psect	text19
  5832  050C                     __ptext19:	
  5833 ;; *************** function _TMR2_CallBack *****************
  5834 ;; Defined at:
  5835 ;;		line 176 in file "mcc_generated_files/tmr2.c"
  5836 ;; Parameters:    Size  Location     Type
  5837 ;;		None
  5838 ;; Auto vars:     Size  Location     Type
  5839 ;;		None
  5840 ;; Return value:  Size  Location     Type
  5841 ;;                  1    wreg      void 
  5842 ;; Registers used:
  5843 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5844 ;; Tracked objects:
  5845 ;;		On entry : 0/0
  5846 ;;		On exit  : 0/0
  5847 ;;		Unchanged: 0/0
  5848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5852 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5853 ;;Total ram usage:        0 bytes
  5854 ;; Hardware stack levels used:    1
  5855 ;; Hardware stack levels required when called:   10
  5856 ;; This function calls:
  5857 ;;		Absolute function
  5858 ;;		_MyTimer2ISR
  5859 ;;		_TMR2_DefaultInterruptHandler
  5860 ;; This function is called by:
  5861 ;;		_TMR2_ISR
  5862 ;; This function uses a non-reentrant model
  5863 ;;
  5864                           
  5865                           
  5866                           ;psect for function _TMR2_CallBack
  5867  050C                     _TMR2_CallBack:	
  5868                           
  5869                           ;tmr2.c: 180: if(TMR2_InterruptHandler)
  5870                           
  5871                           ;incstack = 0
  5872                           ; Regs used in _TMR2_CallBack: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5873  050C  0020               	movlb	0	; select bank0
  5874  050D  0863               	movf	_TMR2_InterruptHandler,w
  5875  050E  0464               	iorwf	_TMR2_InterruptHandler+1,w
  5876  050F  1903               	btfsc	3,2
  5877  0510  0008               	return
  5878                           
  5879                           ;tmr2.c: 181: {
  5880                           ;tmr2.c: 182: TMR2_InterruptHandler();
  5881  0511  0864               	movf	_TMR2_InterruptHandler+1,w
  5882  0512  008A               	movwf	10
  5883  0513  0863               	movf	_TMR2_InterruptHandler,w
  5884  0514  000A               	callw
  5885  0515  3185               	pagesel	$
  5886  0516  0008               	return
  5887  0517                     __end_of_TMR2_CallBack:	
  5888                           
  5889                           	psect	text20
  5890  00EF                     __ptext20:	
  5891 ;; *************** function _MyTimer2ISR *****************
  5892 ;; Defined at:
  5893 ;;		line 58 in file "main.c"
  5894 ;; Parameters:    Size  Location     Type
  5895 ;;		None
  5896 ;; Auto vars:     Size  Location     Type
  5897 ;;		None
  5898 ;; Return value:  Size  Location     Type
  5899 ;;                  1    wreg      void 
  5900 ;; Registers used:
  5901 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5902 ;; Tracked objects:
  5903 ;;		On entry : 0/0
  5904 ;;		On exit  : 0/0
  5905 ;;		Unchanged: 0/0
  5906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5909 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5910 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5911 ;;Total ram usage:        1 bytes
  5912 ;; Hardware stack levels used:    1
  5913 ;; Hardware stack levels required when called:    9
  5914 ;; This function calls:
  5915 ;;		_EUSART_Write
  5916 ;;		_I2C_Write1ByteRegister
  5917 ;;		_PWM3_LoadDutyValue
  5918 ;; This function is called by:
  5919 ;;		_main
  5920 ;;		_TMR2_CallBack
  5921 ;; This function uses a non-reentrant model
  5922 ;;
  5923                           
  5924                           
  5925                           ;psect for function _MyTimer2ISR
  5926  00EF                     _MyTimer2ISR:	
  5927                           
  5928                           ;main.c: 62: PWM3_LoadDutyValue(((Angle)>>3)+50);
  5929                           
  5930                           ;incstack = 0
  5931                           ; Regs used in _MyTimer2ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5932  00EF  0020               	movlb	0	; select bank0
  5933  00F0  086A               	movf	_Angle,w
  5934  00F1  00E1               	movwf	??_MyTimer2ISR
  5935  00F2  3003               	movlw	3
  5936  00F3                     u88_25:	
  5937  00F3  36E1               	lsrf	??_MyTimer2ISR,f
  5938  00F4  0B89               	decfsz	9,f
  5939  00F5  28F3               	goto	u88_25
  5940  00F6  0861               	movf	??_MyTimer2ISR,w
  5941  00F7  3E32               	addlw	50
  5942  00F8  00F0               	movwf	PWM3_LoadDutyValue@dutyValue
  5943  00F9  3000               	movlw	0
  5944  00FA  1803               	skipnc
  5945  00FB  3001               	movlw	1
  5946  00FC  00F1               	movwf	PWM3_LoadDutyValue@dutyValue+1
  5947  00FD  3184  2453  3180   	fcall	_PWM3_LoadDutyValue
  5948                           
  5949                           ;main.c: 63: if(PORTAbits.RA4) {
  5950  0100  0020               	movlb	0	; select bank0
  5951  0101  1E0C               	btfss	12,4	;volatile
  5952  0102  2941               	goto	i1l2615
  5953                           
  5954                           ;main.c: 64: CptBat = 0;
  5955  0103  01D1               	clrf	_CptBat
  5956                           
  5957                           ;main.c: 65: if(StateBat == S_bat_low) {
  5958  0104  0869               	movf	_StateBat,w
  5959  0105  1D03               	btfss	3,2
  5960  0106  2916               	goto	i1l2599
  5961                           
  5962                           ;main.c: 66: EUSART_Write('B');
  5963  0107  3042               	movlw	66
  5964  0108  3185  254E  3180   	fcall	_EUSART_Write
  5965                           
  5966                           ;main.c: 67: EUSART_Write('1');
  5967  010B  3031               	movlw	49
  5968  010C  3185  254E  3180   	fcall	_EUSART_Write
  5969                           
  5970                           ;main.c: 68: EUSART_Write('s');
  5971  010F  3073               	movlw	115
  5972  0110  3185  254E  3180   	fcall	_EUSART_Write
  5973                           
  5974                           ;main.c: 69: StateBat = S_bat_high;
  5975  0113  0020               	movlb	0	; select bank0
  5976  0114  01E9               	clrf	_StateBat
  5977  0115  0AE9               	incf	_StateBat,f
  5978  0116                     i1l2599:	
  5979                           
  5980                           ;main.c: 70: }
  5981                           ;main.c: 71: if(Validation) {
  5982  0116  086B               	movf	_Validation,w
  5983  0117  1903               	btfsc	3,2
  5984  0118  292D               	goto	i1l2609
  5985                           
  5986                           ;main.c: 73: if(Vitesse > 100) {Vitesse = 100;}
  5987  0119  3065               	movlw	101
  5988  011A  024F               	subwf	_Vitesse,w
  5989  011B  1C03               	skipc
  5990  011C  2921               	goto	i1l2605
  5991  011D  3064               	movlw	100
  5992  011E  00E1               	movwf	??_MyTimer2ISR
  5993  011F  0861               	movf	??_MyTimer2ISR,w
  5994  0120  00CF               	movwf	_Vitesse
  5995  0121                     i1l2605:	
  5996                           
  5997                           ;main.c: 74: I2C_Write1ByteRegister(0x40, Vitesse, 0);
  5998  0121  084F               	movf	_Vitesse,w
  5999  0122  00E1               	movwf	??_MyTimer2ISR
  6000  0123  0861               	movf	??_MyTimer2ISR,w
  6001  0124  00DD               	movwf	I2C_Write1ByteRegister@reg
  6002  0125  01DE               	clrf	I2C_Write1ByteRegister@data
  6003  0126  3040               	movlw	64
  6004  0127  3183  2310         	fcall	_I2C_Write1ByteRegister
  6005                           
  6006                           ;main.c: 76: Validation--;
  6007  0129  3001               	movlw	1
  6008  012A  0020               	movlb	0	; select bank0
  6009  012B  02EB               	subwf	_Validation,f
  6010                           
  6011                           ;main.c: 77: } else {
  6012  012C  0008               	return
  6013  012D                     i1l2609:	
  6014                           
  6015                           ;main.c: 78: CptBat++;
  6016  012D  3001               	movlw	1
  6017  012E  00E1               	movwf	??_MyTimer2ISR
  6018  012F  0861               	movf	??_MyTimer2ISR,w
  6019  0130  07D1               	addwf	_CptBat,f
  6020                           
  6021                           ;main.c: 79: if(CptBat > 100) {
  6022  0131  3065               	movlw	101
  6023  0132  0251               	subwf	_CptBat,w
  6024  0133  1C03               	skipc
  6025  0134  2937               	goto	i1l2613
  6026                           
  6027                           ;main.c: 80: do { LATCbits.LATC5 = 0; } while(0);
  6028  0135  0022               	movlb	2	; select bank2
  6029  0136  128E               	bcf	14,5	;volatile
  6030  0137                     i1l2613:	
  6031                           
  6032                           ;main.c: 81: }
  6033                           ;main.c: 83: I2C_Write1ByteRegister(0x40, 101, 0);
  6034  0137  3065               	movlw	101
  6035  0138  0020               	movlb	0	; select bank0
  6036  0139  00E1               	movwf	??_MyTimer2ISR
  6037  013A  0861               	movf	??_MyTimer2ISR,w
  6038  013B  00DD               	movwf	I2C_Write1ByteRegister@reg
  6039  013C  01DE               	clrf	I2C_Write1ByteRegister@data
  6040  013D  3040               	movlw	64
  6041  013E  3183  2310         	fcall	_I2C_Write1ByteRegister
  6042                           
  6043                           ;main.c: 85: }
  6044                           ;main.c: 86: } else {
  6045  0140  0008               	return
  6046  0141                     i1l2615:	
  6047                           
  6048                           ;main.c: 87: if(StateBat == S_bat_high) {
  6049  0141  0020               	movlb	0	; select bank0
  6050  0142  0369               	decf	_StateBat,w
  6051  0143  1D03               	btfss	3,2
  6052  0144  2953               	goto	i1l2621
  6053                           
  6054                           ;main.c: 88: EUSART_Write('B');
  6055  0145  3042               	movlw	66
  6056  0146  3185  254E  3180   	fcall	_EUSART_Write
  6057                           
  6058                           ;main.c: 89: EUSART_Write('0');
  6059  0149  3030               	movlw	48
  6060  014A  3185  254E  3180   	fcall	_EUSART_Write
  6061                           
  6062                           ;main.c: 90: EUSART_Write('r');
  6063  014D  3072               	movlw	114
  6064  014E  3185  254E  3180   	fcall	_EUSART_Write
  6065                           
  6066                           ;main.c: 91: StateBat = S_bat_low;
  6067  0151  0020               	movlb	0	; select bank0
  6068  0152  01E9               	clrf	_StateBat
  6069  0153                     i1l2621:	
  6070                           
  6071                           ;main.c: 92: }
  6072                           ;main.c: 94: I2C_Write1ByteRegister(0x40, 101, 0);
  6073  0153  3065               	movlw	101
  6074  0154  00E1               	movwf	??_MyTimer2ISR
  6075  0155  0861               	movf	??_MyTimer2ISR,w
  6076  0156  00DD               	movwf	I2C_Write1ByteRegister@reg
  6077  0157  01DE               	clrf	I2C_Write1ByteRegister@data
  6078  0158  3040               	movlw	64
  6079  0159  3183  2310         	fcall	_I2C_Write1ByteRegister
  6080  015B  0008               	return
  6081  015C                     __end_of_MyTimer2ISR:	
  6082                           
  6083                           	psect	text21
  6084  05FD                     __ptext21:	
  6085 ;; *************** function _TMR2_DefaultInterruptHandler *****************
  6086 ;; Defined at:
  6087 ;;		line 190 in file "mcc_generated_files/tmr2.c"
  6088 ;; Parameters:    Size  Location     Type
  6089 ;;		None
  6090 ;; Auto vars:     Size  Location     Type
  6091 ;;		None
  6092 ;; Return value:  Size  Location     Type
  6093 ;;                  1    wreg      void 
  6094 ;; Registers used:
  6095 ;;		None
  6096 ;; Tracked objects:
  6097 ;;		On entry : 0/0
  6098 ;;		On exit  : 0/0
  6099 ;;		Unchanged: 0/0
  6100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6105 ;;Total ram usage:        0 bytes
  6106 ;; Hardware stack levels used:    1
  6107 ;; This function calls:
  6108 ;;		Nothing
  6109 ;; This function is called by:
  6110 ;;		_TMR2_Initialize
  6111 ;;		_TMR2_CallBack
  6112 ;; This function uses a non-reentrant model
  6113 ;;
  6114                           
  6115                           
  6116                           ;psect for function _TMR2_DefaultInterruptHandler
  6117  05FD                     _TMR2_DefaultInterruptHandler:	
  6118                           
  6119                           ;incstack = 0
  6120                           ; Regs used in _TMR2_DefaultInterruptHandler: []
  6121  05FD  0008               	return
  6122  05FE                     __end_of_TMR2_DefaultInterruptHandler:	
  6123                           
  6124                           	psect	text22
  6125  0453                     __ptext22:	
  6126 ;; *************** function _PWM3_LoadDutyValue *****************
  6127 ;; Defined at:
  6128 ;;		line 74 in file "mcc_generated_files/pwm3.c"
  6129 ;; Parameters:    Size  Location     Type
  6130 ;;  dutyValue       2    0[COMMON] unsigned int 
  6131 ;; Auto vars:     Size  Location     Type
  6132 ;;		None
  6133 ;; Return value:  Size  Location     Type
  6134 ;;                  1    wreg      void 
  6135 ;; Registers used:
  6136 ;;		wreg, status,2, status,0
  6137 ;; Tracked objects:
  6138 ;;		On entry : 0/0
  6139 ;;		On exit  : 0/0
  6140 ;;		Unchanged: 0/0
  6141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6142 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6144 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6145 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6146 ;;Total ram usage:        4 bytes
  6147 ;; Hardware stack levels used:    1
  6148 ;; This function calls:
  6149 ;;		Nothing
  6150 ;; This function is called by:
  6151 ;;		_MyTimer2ISR
  6152 ;; This function uses a non-reentrant model
  6153 ;;
  6154                           
  6155                           
  6156                           ;psect for function _PWM3_LoadDutyValue
  6157  0453                     _PWM3_LoadDutyValue:	
  6158                           
  6159                           ;pwm3.c: 77: PWM3DCH = (dutyValue & 0x03FC)>>2;
  6160                           
  6161                           ;incstack = 0
  6162                           ; Regs used in _PWM3_LoadDutyValue: [wreg+status,2+status,0]
  6163  0453  0871               	movf	PWM3_LoadDutyValue@dutyValue+1,w
  6164  0454  00F3               	movwf	??_PWM3_LoadDutyValue+1
  6165  0455  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
  6166  0456  00F2               	movwf	??_PWM3_LoadDutyValue
  6167  0457  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
  6168  0458  0CF2               	rrf	??_PWM3_LoadDutyValue,f
  6169  0459  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
  6170  045A  0CF2               	rrf	??_PWM3_LoadDutyValue,f
  6171  045B  0872               	movf	??_PWM3_LoadDutyValue,w
  6172  045C  002C               	movlb	12	; select bank12
  6173  045D  0098               	movwf	24	;volatile
  6174                           
  6175                           ;pwm3.c: 80: PWM3DCL = (dutyValue & 0x0003)<<6;
  6176  045E  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
  6177  045F  3903               	andlw	3
  6178  0460  00F2               	movwf	??_PWM3_LoadDutyValue
  6179  0461  3005               	movlw	5
  6180  0462                     u86_25:	
  6181  0462  35F2               	lslf	??_PWM3_LoadDutyValue,f
  6182  0463  3EFF               	addlw	-1
  6183  0464  1D03               	skipz
  6184  0465  2C62               	goto	u86_25
  6185  0466  3572               	lslf	??_PWM3_LoadDutyValue,w
  6186  0467  0097               	movwf	23	;volatile
  6187  0468  0008               	return
  6188  0469                     __end_of_PWM3_LoadDutyValue:	
  6189                           
  6190                           	psect	text23
  6191  0310                     __ptext23:	
  6192 ;; *************** function _I2C_Write1ByteRegister *****************
  6193 ;; Defined at:
  6194 ;;		line 91 in file "mcc_generated_files/examples/i2c_master_example.c"
  6195 ;; Parameters:    Size  Location     Type
  6196 ;;  address         1    wreg     unsigned char 
  6197 ;;  reg             1    5[BANK0 ] unsigned char 
  6198 ;;  data            1    6[BANK0 ] unsigned char 
  6199 ;; Auto vars:     Size  Location     Type
  6200 ;;  address         1    8[BANK0 ] unsigned char 
  6201 ;; Return value:  Size  Location     Type
  6202 ;;                  1    wreg      void 
  6203 ;; Registers used:
  6204 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6205 ;; Tracked objects:
  6206 ;;		On entry : 0/0
  6207 ;;		On exit  : 0/0
  6208 ;;		Unchanged: 0/0
  6209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6210 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6211 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6212 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6213 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6214 ;;Total ram usage:        4 bytes
  6215 ;; Hardware stack levels used:    1
  6216 ;; Hardware stack levels required when called:    8
  6217 ;; This function calls:
  6218 ;;		_I2C_Close
  6219 ;;		_I2C_MasterWrite
  6220 ;;		_I2C_Open
  6221 ;;		_I2C_SetAddressNackCallback
  6222 ;;		_I2C_SetBuffer
  6223 ;;		_I2C_SetDataCompleteCallback
  6224 ;; This function is called by:
  6225 ;;		_MyTimer2ISR
  6226 ;; This function uses a non-reentrant model
  6227 ;;
  6228                           
  6229                           
  6230                           ;psect for function _I2C_Write1ByteRegister
  6231  0310                     _I2C_Write1ByteRegister:	
  6232                           
  6233                           ;incstack = 0
  6234                           ; Regs used in _I2C_Write1ByteRegister: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6235                           ;I2C_Write1ByteRegister@address stored from wreg
  6236  0310  0020               	movlb	0	; select bank0
  6237  0311  00E0               	movwf	I2C_Write1ByteRegister@address
  6238  0312                     i1l2549:	
  6239                           ;i2c_master_example.c: 93: while(!I2C_Open(address));
  6240                           
  6241  0312  0020               	movlb	0	; select bank0
  6242  0313  0860               	movf	I2C_Write1ByteRegister@address,w
  6243  0314  3182  2272  3183   	fcall	_I2C_Open
  6244  0317  3A00               	xorlw	0
  6245  0318  1903               	skipnz
  6246  0319  2B12               	goto	i1l2549
  6247                           
  6248                           ;i2c_master_example.c: 94: I2C_SetDataCompleteCallback(wr1RegCompleteHandler,&data);
  6249  031A  308F               	movlw	low _wr1RegCompleteHandler
  6250  031B  00F5               	movwf	I2C_SetDataCompleteCallback@cb
  6251  031C  3004               	movlw	high _wr1RegCompleteHandler
  6252  031D  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
  6253  031E  305E               	movlw	(low (I2C_Write1ByteRegister@data| 0))& (0+255)
  6254  031F  0020               	movlb	0	; select bank0
  6255  0320  00DF               	movwf	??_I2C_Write1ByteRegister
  6256  0321  085F               	movf	??_I2C_Write1ByteRegister,w
  6257  0322  00F7               	movwf	I2C_SetDataCompleteCallback@ptr
  6258  0323  3184  24F5  3183   	fcall	_I2C_SetDataCompleteCallback
  6259                           
  6260                           ;i2c_master_example.c: 95: I2C_SetBuffer(&reg,1);
  6261  0326  3001               	movlw	1
  6262  0327  00F0               	movwf	I2C_SetBuffer@bufferSize
  6263  0328  3000               	movlw	0
  6264  0329  00F1               	movwf	I2C_SetBuffer@bufferSize+1
  6265  032A  305D               	movlw	(low (I2C_Write1ByteRegister@reg| 0))& (0+255)
  6266  032B  3184  24CF  3183   	fcall	_I2C_SetBuffer
  6267                           
  6268                           ;i2c_master_example.c: 96: I2C_SetAddressNackCallback((0),(0));
  6269  032E  3000               	movlw	0
  6270  032F  00F5               	movwf	I2C_SetAddressNackCallback@cb
  6271  0330  00F6               	movwf	I2C_SetAddressNackCallback@cb+1
  6272  0331  01F7               	clrf	I2C_SetAddressNackCallback@ptr
  6273  0332  3184  24DD  3183   	fcall	_I2C_SetAddressNackCallback
  6274                           
  6275                           ;i2c_master_example.c: 97: I2C_MasterWrite();
  6276  0335  3185  25A2  3183   	fcall	_I2C_MasterWrite
  6277  0338                     i1l2559:	
  6278                           ;i2c_master_example.c: 98: while(I2C_BUSY == I2C_Close());
  6279                           
  6280  0338  3184  240C  3183   	fcall	_I2C_Close
  6281  033B  3A01               	xorlw	1
  6282  033C  1D03               	btfss	3,2
  6283  033D  0008               	return
  6284  033E  2B38               	goto	i1l2559
  6285  033F                     __end_of_I2C_Write1ByteRegister:	
  6286                           
  6287                           	psect	text24
  6288  04DD                     __ptext24:	
  6289 ;; *************** function _I2C_SetAddressNackCallback *****************
  6290 ;; Defined at:
  6291 ;;		line 283 in file "mcc_generated_files/i2c_master.c"
  6292 ;; Parameters:    Size  Location     Type
  6293 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
  6294 ;;		 -> Absolute function(1), 
  6295 ;;  ptr             1    7[COMMON] PTR void 
  6296 ;;		 -> NULL(0), 
  6297 ;; Auto vars:     Size  Location     Type
  6298 ;;		None
  6299 ;; Return value:  Size  Location     Type
  6300 ;;                  1    wreg      void 
  6301 ;; Registers used:
  6302 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6303 ;; Tracked objects:
  6304 ;;		On entry : 0/0
  6305 ;;		On exit  : 0/0
  6306 ;;		Unchanged: 0/0
  6307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6308 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6310 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6311 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6312 ;;Total ram usage:        4 bytes
  6313 ;; Hardware stack levels used:    1
  6314 ;; Hardware stack levels required when called:    1
  6315 ;; This function calls:
  6316 ;;		_I2C_SetCallback
  6317 ;; This function is called by:
  6318 ;;		_I2C_Write1ByteRegister
  6319 ;;		_I2C_Read1ByteRegister
  6320 ;;		_I2C_Read2ByteRegister
  6321 ;;		_I2C_Write2ByteRegister
  6322 ;;		_I2C_WriteNBytes
  6323 ;;		_I2C_ReadDataBlock
  6324 ;; This function uses a non-reentrant model
  6325 ;;
  6326                           
  6327                           
  6328                           ;psect for function _I2C_SetAddressNackCallback
  6329  04DD                     _I2C_SetAddressNackCallback:	
  6330                           
  6331                           ;i2c_master.c: 285: I2C_SetCallback(I2C_ADDR_NACK, cb, ptr);
  6332                           
  6333                           ;incstack = 0
  6334                           ; Regs used in _I2C_SetAddressNackCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6335  04DD  0876               	movf	I2C_SetAddressNackCallback@cb+1,w
  6336  04DE  00F1               	movwf	I2C_SetCallback@cb+1
  6337  04DF  0875               	movf	I2C_SetAddressNackCallback@cb,w
  6338  04E0  00F0               	movwf	I2C_SetCallback@cb
  6339  04E1  0877               	movf	I2C_SetAddressNackCallback@ptr,w
  6340  04E2  00F8               	movwf	??_I2C_SetAddressNackCallback
  6341  04E3  0878               	movf	??_I2C_SetAddressNackCallback,w
  6342  04E4  00F2               	movwf	I2C_SetCallback@ptr
  6343  04E5  3002               	movlw	2
  6344  04E6  3183  238B         	fcall	_I2C_SetCallback
  6345  04E8  0008               	return
  6346  04E9                     __end_of_I2C_SetAddressNackCallback:	
  6347                           
  6348                           	psect	text25
  6349  0272                     __ptext25:	
  6350 ;; *************** function _I2C_Open *****************
  6351 ;; Defined at:
  6352 ;;		line 176 in file "mcc_generated_files/i2c_master.c"
  6353 ;; Parameters:    Size  Location     Type
  6354 ;;  address         1    wreg     unsigned char 
  6355 ;; Auto vars:     Size  Location     Type
  6356 ;;  address         1    1[COMMON] unsigned char 
  6357 ;;  returnValue     1    2[COMMON] enum E92
  6358 ;; Return value:  Size  Location     Type
  6359 ;;                  1    wreg      enum E92
  6360 ;; Registers used:
  6361 ;;		wreg, status,2, status,0, pclath, cstack
  6362 ;; Tracked objects:
  6363 ;;		On entry : 0/0
  6364 ;;		On exit  : 0/0
  6365 ;;		Unchanged: 0/0
  6366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6368 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6369 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6370 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6371 ;;Total ram usage:        3 bytes
  6372 ;; Hardware stack levels used:    1
  6373 ;; Hardware stack levels required when called:    1
  6374 ;; This function calls:
  6375 ;;		_I2C_MasterClearIrq
  6376 ;;		_I2C_MasterOpen
  6377 ;; This function is called by:
  6378 ;;		_I2C_Write1ByteRegister
  6379 ;;		_I2C_Read1ByteRegister
  6380 ;;		_I2C_Read2ByteRegister
  6381 ;;		_I2C_Write2ByteRegister
  6382 ;;		_I2C_WriteNBytes
  6383 ;;		_I2C_ReadNBytes
  6384 ;;		_I2C_ReadDataBlock
  6385 ;; This function uses a non-reentrant model
  6386 ;;
  6387                           
  6388                           
  6389                           ;psect for function _I2C_Open
  6390  0272                     _I2C_Open:	
  6391                           
  6392                           ;incstack = 0
  6393                           ; Regs used in _I2C_Open: [wreg+status,2+status,0+pclath+cstack]
  6394                           ;I2C_Open@address stored from wreg
  6395  0272  00F1               	movwf	I2C_Open@address
  6396                           
  6397                           ;i2c_master.c: 178: i2c_error_t returnValue = I2C_BUSY;
  6398  0273  01F2               	clrf	I2C_Open@returnValue
  6399  0274  0AF2               	incf	I2C_Open@returnValue,f
  6400                           
  6401                           ;i2c_master.c: 180: if(!I2C_Status.inUse)
  6402  0275  0020               	movlb	0	; select bank0
  6403  0276  193C               	btfsc	_I2C_Status+28,2
  6404  0277  2AA7               	goto	i1l321
  6405                           
  6406                           ;i2c_master.c: 181: {
  6407                           ;i2c_master.c: 182: I2C_Status.address = address;
  6408  0278  0871               	movf	I2C_Open@address,w
  6409  0279  00F0               	movwf	??_I2C_Open
  6410  027A  0870               	movf	??_I2C_Open,w
  6411  027B  00B6               	movwf	_I2C_Status+22
  6412                           
  6413                           ;i2c_master.c: 183: I2C_Status.busy = 0;
  6414  027C  10BC               	bcf	_I2C_Status+28,1
  6415                           
  6416                           ;i2c_master.c: 184: I2C_Status.inUse = 1;
  6417  027D  153C               	bsf	_I2C_Status+28,2
  6418                           
  6419                           ;i2c_master.c: 185: I2C_Status.addressNackCheck = 0;
  6420  027E  103C               	bcf	_I2C_Status+28,0
  6421                           
  6422                           ;i2c_master.c: 186: I2C_Status.state = I2C_RESET;
  6423  027F  300E               	movlw	14
  6424  0280  00F0               	movwf	??_I2C_Open
  6425  0281  0870               	movf	??_I2C_Open,w
  6426  0282  00BA               	movwf	_I2C_Status+26
  6427                           
  6428                           ;i2c_master.c: 187: I2C_Status.time_out_value = 500;
  6429  0283  30F4               	movlw	244
  6430  0284  00B4               	movwf	_I2C_Status+20
  6431  0285  3001               	movlw	1
  6432  0286  00B5               	movwf	_I2C_Status+21
  6433                           
  6434                           ;i2c_master.c: 188: I2C_Status.bufferFree = 1;
  6435  0287  15BC               	bsf	_I2C_Status+28,3
  6436                           
  6437                           ;i2c_master.c: 191: I2C_Status.callbackTable[I2C_DATA_COMPLETE]=I2C_CallbackReturnStop;
  6438  0288  30FB               	movlw	low _I2C_CallbackReturnStop
  6439  0289  00A0               	movwf	_I2C_Status
  6440  028A  3005               	movlw	high _I2C_CallbackReturnStop
  6441  028B  00A1               	movwf	_I2C_Status+1
  6442                           
  6443                           ;i2c_master.c: 192: I2C_Status.callbackPayload[I2C_DATA_COMPLETE] = (0);
  6444  028C  01AC               	clrf	low ((_I2C_Status| 0+12))
  6445                           
  6446                           ;i2c_master.c: 193: I2C_Status.callbackTable[I2C_WRITE_COLLISION]=I2C_CallbackReturnStop
      +                          ;
  6447  028D  30FB               	movlw	low _I2C_CallbackReturnStop
  6448  028E  00A2               	movwf	low ((_I2C_Status| 0+2))
  6449  028F  3005               	movlw	high _I2C_CallbackReturnStop
  6450  0290  00A3               	movwf	(low ((_I2C_Status| 0+2))+1)
  6451                           
  6452                           ;i2c_master.c: 194: I2C_Status.callbackPayload[I2C_WRITE_COLLISION] = (0);
  6453  0291  01AD               	clrf	low ((_I2C_Status| 0+13))
  6454                           
  6455                           ;i2c_master.c: 195: I2C_Status.callbackTable[I2C_ADDR_NACK]=I2C_CallbackReturnStop;
  6456  0292  30FB               	movlw	low _I2C_CallbackReturnStop
  6457  0293  00A4               	movwf	low ((_I2C_Status| 0+4))
  6458  0294  3005               	movlw	high _I2C_CallbackReturnStop
  6459  0295  00A5               	movwf	(low ((_I2C_Status| 0+4))+1)
  6460                           
  6461                           ;i2c_master.c: 196: I2C_Status.callbackPayload[I2C_ADDR_NACK] = (0);
  6462  0296  01AE               	clrf	low ((_I2C_Status| 0+14))
  6463                           
  6464                           ;i2c_master.c: 197: I2C_Status.callbackTable[I2C_DATA_NACK]=I2C_CallbackReturnStop;
  6465  0297  30FB               	movlw	low _I2C_CallbackReturnStop
  6466  0298  00A6               	movwf	low ((_I2C_Status| 0+6))
  6467  0299  3005               	movlw	high _I2C_CallbackReturnStop
  6468  029A  00A7               	movwf	(low ((_I2C_Status| 0+6))+1)
  6469                           
  6470                           ;i2c_master.c: 198: I2C_Status.callbackPayload[I2C_DATA_NACK] = (0);
  6471  029B  01AF               	clrf	low ((_I2C_Status| 0+15))
  6472                           
  6473                           ;i2c_master.c: 199: I2C_Status.callbackTable[I2C_TIMEOUT]=I2C_CallbackReturnReset;
  6474  029C  30F9               	movlw	low _I2C_CallbackReturnReset
  6475  029D  00A8               	movwf	low ((_I2C_Status| 0+8))
  6476  029E  3005               	movlw	high _I2C_CallbackReturnReset
  6477  029F  00A9               	movwf	(low ((_I2C_Status| 0+8))+1)
  6478                           
  6479                           ;i2c_master.c: 200: I2C_Status.callbackPayload[I2C_TIMEOUT] = (0);
  6480  02A0  01B0               	clrf	low ((_I2C_Status| 0+16))
  6481                           
  6482                           ;i2c_master.c: 202: I2C_MasterClearIrq();
  6483  02A1  3185  25F3  3182   	fcall	_I2C_MasterClearIrq
  6484                           
  6485                           ;i2c_master.c: 203: I2C_MasterOpen();
  6486  02A4  3184  24E9         	fcall	_I2C_MasterOpen
  6487                           
  6488                           ;i2c_master.c: 204: returnValue = I2C_NOERR;
  6489  02A6  01F2               	clrf	I2C_Open@returnValue
  6490  02A7                     i1l321:	
  6491                           
  6492                           ;i2c_master.c: 205: }
  6493                           ;i2c_master.c: 206: return returnValue;
  6494  02A7  0872               	movf	I2C_Open@returnValue,w
  6495  02A8  0008               	return
  6496  02A9                     __end_of_I2C_Open:	
  6497                           
  6498                           	psect	text26
  6499  04E9                     __ptext26:	
  6500 ;; *************** function _I2C_MasterOpen *****************
  6501 ;; Defined at:
  6502 ;;		line 543 in file "mcc_generated_files/i2c_master.c"
  6503 ;; Parameters:    Size  Location     Type
  6504 ;;		None
  6505 ;; Auto vars:     Size  Location     Type
  6506 ;;		None
  6507 ;; Return value:  Size  Location     Type
  6508 ;;                  1    wreg      unsigned char 
  6509 ;; Registers used:
  6510 ;;		wreg, status,2
  6511 ;; Tracked objects:
  6512 ;;		On entry : 0/0
  6513 ;;		On exit  : 0/0
  6514 ;;		Unchanged: 0/0
  6515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6520 ;;Total ram usage:        0 bytes
  6521 ;; Hardware stack levels used:    1
  6522 ;; This function calls:
  6523 ;;		Nothing
  6524 ;; This function is called by:
  6525 ;;		_I2C_Open
  6526 ;; This function uses a non-reentrant model
  6527 ;;
  6528                           
  6529                           
  6530                           ;psect for function _I2C_MasterOpen
  6531  04E9                     _I2C_MasterOpen:	
  6532                           
  6533                           ;i2c_master.c: 545: if(!SSP1CON1bits.SSPEN)
  6534                           
  6535                           ;incstack = 0
  6536                           ; Regs used in _I2C_MasterOpen: [wreg+status,2]
  6537  04E9  0024               	movlb	4	; select bank4
  6538  04EA  1A95               	btfsc	21,5	;volatile
  6539  04EB  0008               	return
  6540                           
  6541                           ;i2c_master.c: 546: {
  6542                           ;i2c_master.c: 547: SSP1STAT = 0x80;
  6543  04EC  3080               	movlw	128
  6544  04ED  0094               	movwf	20	;volatile
  6545                           
  6546                           ;i2c_master.c: 548: SSP1CON1 = 0x08;
  6547  04EE  3008               	movlw	8
  6548  04EF  0095               	movwf	21	;volatile
  6549                           
  6550                           ;i2c_master.c: 549: SSP1CON2 = 0x00;
  6551  04F0  0196               	clrf	22	;volatile
  6552                           
  6553                           ;i2c_master.c: 550: SSP1ADD = 0x09;
  6554  04F1  3009               	movlw	9
  6555  04F2  0092               	movwf	18	;volatile
  6556                           
  6557                           ;i2c_master.c: 551: SSP1CON1bits.SSPEN = 1;
  6558  04F3  1695               	bsf	21,5	;volatile
  6559                           
  6560                           ;i2c_master.c: 552: return 1;
  6561                           ;	Return value of _I2C_MasterOpen is never used
  6562  04F4  0008               	return
  6563  04F5                     __end_of_I2C_MasterOpen:	
  6564                           ;i2c_master.c: 553: }
  6565                           ;i2c_master.c: 554: return 0;
  6566                           ;	Return value of _I2C_MasterOpen is never used
  6567                           
  6568                           
  6569                           	psect	text27
  6570  05A2                     __ptext27:	
  6571 ;; *************** function _I2C_MasterWrite *****************
  6572 ;; Defined at:
  6573 ;;		line 251 in file "mcc_generated_files/i2c_master.c"
  6574 ;; Parameters:    Size  Location     Type
  6575 ;;		None
  6576 ;; Auto vars:     Size  Location     Type
  6577 ;;		None
  6578 ;; Return value:  Size  Location     Type
  6579 ;;                  1    wreg      enum E92
  6580 ;; Registers used:
  6581 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6582 ;; Tracked objects:
  6583 ;;		On entry : 0/0
  6584 ;;		On exit  : 0/0
  6585 ;;		Unchanged: 0/0
  6586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6591 ;;Total ram usage:        0 bytes
  6592 ;; Hardware stack levels used:    1
  6593 ;; Hardware stack levels required when called:    7
  6594 ;; This function calls:
  6595 ;;		_I2C_MasterOperation
  6596 ;; This function is called by:
  6597 ;;		_I2C_Write1ByteRegister
  6598 ;;		_I2C_Read1ByteRegister
  6599 ;;		_I2C_Read2ByteRegister
  6600 ;;		_I2C_Write2ByteRegister
  6601 ;;		_I2C_WriteNBytes
  6602 ;;		_I2C_ReadDataBlock
  6603 ;; This function uses a non-reentrant model
  6604 ;;
  6605                           
  6606                           
  6607                           ;psect for function _I2C_MasterWrite
  6608  05A2                     _I2C_MasterWrite:	
  6609                           
  6610                           ;i2c_master.c: 253: return I2C_MasterOperation(0);
  6611                           ;	Return value of _I2C_MasterWrite is never used
  6612                           
  6613                           ;incstack = 0
  6614                           ; Regs used in _I2C_MasterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6615  05A2  3000               	movlw	0
  6616  05A3  3183  23F2         	fcall	_I2C_MasterOperation
  6617  05A5  0008               	return
  6618  05A6                     __end_of_I2C_MasterWrite:	
  6619                           
  6620                           	psect	text28
  6621  03F2                     __ptext28:	
  6622 ;; *************** function _I2C_MasterOperation *****************
  6623 ;; Defined at:
  6624 ;;		line 224 in file "mcc_generated_files/i2c_master.c"
  6625 ;; Parameters:    Size  Location     Type
  6626 ;;  read            1    wreg     unsigned char 
  6627 ;; Auto vars:     Size  Location     Type
  6628 ;;  read            1    3[BANK0 ] unsigned char 
  6629 ;;  returnValue     1    4[BANK0 ] enum E92
  6630 ;; Return value:  Size  Location     Type
  6631 ;;                  1    wreg      enum E92
  6632 ;; Registers used:
  6633 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6634 ;; Tracked objects:
  6635 ;;		On entry : 0/0
  6636 ;;		On exit  : 0/0
  6637 ;;		Unchanged: 0/0
  6638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6640 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6641 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6642 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6643 ;;Total ram usage:        3 bytes
  6644 ;; Hardware stack levels used:    1
  6645 ;; Hardware stack levels required when called:    6
  6646 ;; This function calls:
  6647 ;;		_I2C_MasterStart
  6648 ;;		_I2C_Poller
  6649 ;; This function is called by:
  6650 ;;		_I2C_MasterWrite
  6651 ;;		_I2C_MasterRead
  6652 ;; This function uses a non-reentrant model
  6653 ;;
  6654                           
  6655                           
  6656                           ;psect for function _I2C_MasterOperation
  6657  03F2                     _I2C_MasterOperation:	
  6658                           
  6659                           ;incstack = 0
  6660                           ; Regs used in _I2C_MasterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6661                           ;I2C_MasterOperation@read stored from wreg
  6662  03F2  0020               	movlb	0	; select bank0
  6663  03F3  00DB               	movwf	I2C_MasterOperation@read
  6664                           
  6665                           ;i2c_master.c: 226: i2c_error_t returnValue = I2C_BUSY;
  6666  03F4  01DC               	clrf	I2C_MasterOperation@returnValue
  6667  03F5  0ADC               	incf	I2C_MasterOperation@returnValue,f
  6668                           
  6669                           ;i2c_master.c: 227: if(!I2C_Status.busy)
  6670  03F6  18BC               	btfsc	_I2C_Status+28,1
  6671  03F7  2C09               	goto	i1l2487
  6672                           
  6673                           ;i2c_master.c: 228: {
  6674                           ;i2c_master.c: 229: I2C_Status.busy = 1;
  6675  03F8  14BC               	bsf	_I2C_Status+28,1
  6676                           
  6677                           ;i2c_master.c: 230: returnValue = I2C_NOERR;
  6678  03F9  01DC               	clrf	I2C_MasterOperation@returnValue
  6679                           
  6680                           ;i2c_master.c: 232: if(read)
  6681  03FA  085B               	movf	I2C_MasterOperation@read,w
  6682  03FB  1903               	btfsc	3,2
  6683  03FC  2C00               	goto	i1l2481
  6684                           
  6685                           ;i2c_master.c: 233: {
  6686                           ;i2c_master.c: 234: I2C_Status.state = I2C_SEND_ADR_READ;
  6687  03FD  01BA               	clrf	_I2C_Status+26
  6688  03FE  0ABA               	incf	_I2C_Status+26,f
  6689                           
  6690                           ;i2c_master.c: 235: }
  6691  03FF  2C04               	goto	i1l2483
  6692  0400                     i1l2481:	
  6693                           
  6694                           ;i2c_master.c: 236: else
  6695                           ;i2c_master.c: 237: {
  6696                           ;i2c_master.c: 238: I2C_Status.state = I2C_SEND_ADR_WRITE;
  6697  0400  3002               	movlw	2
  6698  0401  00FD               	movwf	??_I2C_MasterOperation
  6699  0402  087D               	movf	??_I2C_MasterOperation,w
  6700  0403  00BA               	movwf	_I2C_Status+26
  6701  0404                     i1l2483:	
  6702                           
  6703                           ;i2c_master.c: 239: }
  6704                           ;i2c_master.c: 240: I2C_MasterStart();
  6705  0404  3185  25EA  3183   	fcall	_I2C_MasterStart
  6706                           
  6707                           ;i2c_master.c: 241: I2C_Poller();
  6708  0407  3185  2521         	fcall	_I2C_Poller
  6709  0409                     i1l2487:	
  6710                           
  6711                           ;i2c_master.c: 242: }
  6712                           ;i2c_master.c: 243: return returnValue;
  6713  0409  0020               	movlb	0	; select bank0
  6714  040A  085C               	movf	I2C_MasterOperation@returnValue,w
  6715  040B  0008               	return
  6716  040C                     __end_of_I2C_MasterOperation:	
  6717                           
  6718                           	psect	text29
  6719  0521                     __ptext29:	
  6720 ;; *************** function _I2C_Poller *****************
  6721 ;; Defined at:
  6722 ;;		line 312 in file "mcc_generated_files/i2c_master.c"
  6723 ;; Parameters:    Size  Location     Type
  6724 ;;		None
  6725 ;; Auto vars:     Size  Location     Type
  6726 ;;		None
  6727 ;; Return value:  Size  Location     Type
  6728 ;;                  1    wreg      void 
  6729 ;; Registers used:
  6730 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6731 ;; Tracked objects:
  6732 ;;		On entry : 0/0
  6733 ;;		On exit  : 0/0
  6734 ;;		Unchanged: 0/0
  6735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6740 ;;Total ram usage:        0 bytes
  6741 ;; Hardware stack levels used:    1
  6742 ;; Hardware stack levels required when called:    5
  6743 ;; This function calls:
  6744 ;;		_I2C_MasterFsm
  6745 ;;		_I2C_MasterWaitForEvent
  6746 ;; This function is called by:
  6747 ;;		_I2C_MasterOperation
  6748 ;; This function uses a non-reentrant model
  6749 ;;
  6750                           
  6751                           
  6752                           ;psect for function _I2C_Poller
  6753  0521                     _I2C_Poller:	
  6754  0521                     i1l2453:	
  6755                           ;i2c_master.c: 314: while(I2C_Status.busy)
  6756                           
  6757                           ;incstack = 0
  6758                           ; Regs used in _I2C_Poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6759                           
  6760  0521  0020               	movlb	0	; select bank0
  6761  0522  1CBC               	btfss	_I2C_Status+28,1
  6762  0523  0008               	return
  6763                           
  6764                           ;i2c_master.c: 315: {
  6765                           ;i2c_master.c: 316: I2C_MasterWaitForEvent();
  6766  0524  3185  25A6  3185   	fcall	_I2C_MasterWaitForEvent
  6767                           
  6768                           ;i2c_master.c: 317: I2C_MasterFsm();
  6769  0527  3183  233F  3185   	fcall	_I2C_MasterFsm
  6770  052A  2D21               	goto	i1l2453
  6771  052B                     __end_of_I2C_Poller:	
  6772                           
  6773                           	psect	text30
  6774  05A6                     __ptext30:	
  6775 ;; *************** function _I2C_MasterWaitForEvent *****************
  6776 ;; Defined at:
  6777 ;;		line 650 in file "mcc_generated_files/i2c_master.c"
  6778 ;; Parameters:    Size  Location     Type
  6779 ;;		None
  6780 ;; Auto vars:     Size  Location     Type
  6781 ;;		None
  6782 ;; Return value:  Size  Location     Type
  6783 ;;                  1    wreg      void 
  6784 ;; Registers used:
  6785 ;;		None
  6786 ;; Tracked objects:
  6787 ;;		On entry : 0/0
  6788 ;;		On exit  : 0/0
  6789 ;;		Unchanged: 0/0
  6790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6794 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6795 ;;Total ram usage:        0 bytes
  6796 ;; Hardware stack levels used:    1
  6797 ;; This function calls:
  6798 ;;		Nothing
  6799 ;; This function is called by:
  6800 ;;		_I2C_Poller
  6801 ;; This function uses a non-reentrant model
  6802 ;;
  6803                           
  6804                           
  6805                           ;psect for function _I2C_MasterWaitForEvent
  6806  05A6                     _I2C_MasterWaitForEvent:	
  6807  05A6                     i1l544:	
  6808                           ;incstack = 0
  6809                           ; Regs used in _I2C_MasterWaitForEvent: []
  6810                           ;i2c_master.c: 652: while(1)
  6811                           
  6812                           
  6813                           ;i2c_master.c: 653: {
  6814                           ;i2c_master.c: 654: if(PIR1bits.SSP1IF)
  6815  05A6  0020               	movlb	0	; select bank0
  6816  05A7  1990               	btfsc	16,3	;volatile
  6817  05A8  0008               	return
  6818  05A9  2DA6               	goto	i1l544
  6819  05AA                     __end_of_I2C_MasterWaitForEvent:	
  6820                           ;i2c_master.c: 655: {
  6821                           ;i2c_master.c: 656: break;
  6822                           
  6823                           
  6824                           	psect	text31
  6825  033F                     __ptext31:	
  6826 ;; *************** function _I2C_MasterFsm *****************
  6827 ;; Defined at:
  6828 ;;		line 321 in file "mcc_generated_files/i2c_master.c"
  6829 ;; Parameters:    Size  Location     Type
  6830 ;;		None
  6831 ;; Auto vars:     Size  Location     Type
  6832 ;;		None
  6833 ;; Return value:  Size  Location     Type
  6834 ;;                  1    wreg      void 
  6835 ;; Registers used:
  6836 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6837 ;; Tracked objects:
  6838 ;;		On entry : 0/0
  6839 ;;		On exit  : 0/0
  6840 ;;		Unchanged: 0/0
  6841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6844 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6845 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6846 ;;Total ram usage:        3 bytes
  6847 ;; Hardware stack levels used:    1
  6848 ;; Hardware stack levels required when called:    4
  6849 ;; This function calls:
  6850 ;;		_I2C_DO_ADDRESS_NACK
  6851 ;;		_I2C_DO_IDLE
  6852 ;;		_I2C_DO_RCEN
  6853 ;;		_I2C_DO_RESET
  6854 ;;		_I2C_DO_RX
  6855 ;;		_I2C_DO_RX_ACK
  6856 ;;		_I2C_DO_RX_NACK_RESTART
  6857 ;;		_I2C_DO_RX_NACK_STOP
  6858 ;;		_I2C_DO_SEND_ADR_READ
  6859 ;;		_I2C_DO_SEND_ADR_WRITE
  6860 ;;		_I2C_DO_SEND_RESTART
  6861 ;;		_I2C_DO_SEND_RESTART_READ
  6862 ;;		_I2C_DO_SEND_RESTART_WRITE
  6863 ;;		_I2C_DO_SEND_STOP
  6864 ;;		_I2C_DO_TX
  6865 ;;		_I2C_DO_TX_EMPTY
  6866 ;;		_I2C_MasterClearIrq
  6867 ;;		_I2C_MasterIsNack
  6868 ;; This function is called by:
  6869 ;;		_I2C_Poller
  6870 ;; This function uses a non-reentrant model
  6871 ;;
  6872                           
  6873                           
  6874                           ;psect for function _I2C_MasterFsm
  6875  033F                     _I2C_MasterFsm:	
  6876                           
  6877                           ;i2c_master.c: 323: I2C_MasterClearIrq();
  6878                           
  6879                           ;incstack = 0
  6880                           ; Regs used in _I2C_MasterFsm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6881  033F  3185  25F3  3183   	fcall	_I2C_MasterClearIrq
  6882                           
  6883                           ;i2c_master.c: 325: if(I2C_Status.addressNackCheck && I2C_MasterIsNack())
  6884  0342  0020               	movlb	0	; select bank0
  6885  0343  1C3C               	btfss	_I2C_Status+28,0
  6886  0344  2B50               	goto	i1l2443
  6887  0345  3185  2588  3183   	fcall	_I2C_MasterIsNack
  6888  0348  3A00               	xorlw	0
  6889  0349  1903               	skipnz
  6890  034A  2B50               	goto	i1l2443
  6891                           
  6892                           ;i2c_master.c: 326: {
  6893                           ;i2c_master.c: 327: I2C_Status.state = I2C_ADDRESS_NACK;
  6894  034B  300F               	movlw	15
  6895  034C  0020               	movlb	0	; select bank0
  6896  034D  00D8               	movwf	??_I2C_MasterFsm
  6897  034E  0858               	movf	??_I2C_MasterFsm,w
  6898  034F  00BA               	movwf	_I2C_Status+26
  6899  0350                     i1l2443:	
  6900                           
  6901                           ;i2c_master.c: 328: }
  6902                           ;i2c_master.c: 329: I2C_Status.state = fsmStateTable[I2C_Status.state]();
  6903  0350  0020               	movlb	0	; select bank0
  6904  0351  083A               	movf	_I2C_Status+26,w
  6905  0352  00D8               	movwf	??_I2C_MasterFsm
  6906  0353  01D9               	clrf	??_I2C_MasterFsm+1
  6907  0354  35D8               	lslf	??_I2C_MasterFsm,f
  6908  0355  0DD9               	rlf	??_I2C_MasterFsm+1,f
  6909  0356  30D2               	movlw	low (_fsmStateTable| (0+32768))
  6910  0357  0758               	addwf	??_I2C_MasterFsm,w
  6911  0358  0084               	movwf	4
  6912  0359  3083               	movlw	high (_fsmStateTable| (0+32768))
  6913  035A  3D59               	addwfc	??_I2C_MasterFsm+1,w
  6914  035B  0085               	movwf	5
  6915  035C  3F01               	moviw [1]fsr0
  6916  035D  008A               	movwf	10
  6917  035E  3F00               	moviw [0]fsr0
  6918  035F  000A               	callw
  6919  0360  3183               	pagesel	$
  6920  0361  0020               	movlb	0	; select bank0
  6921  0362  00DA               	movwf	??_I2C_MasterFsm+2
  6922  0363  085A               	movf	??_I2C_MasterFsm+2,w
  6923  0364  00BA               	movwf	_I2C_Status+26
  6924  0365  0008               	return
  6925  0366                     __end_of_I2C_MasterFsm:	
  6926                           
  6927                           	psect	text32
  6928  03AF                     __ptext32:	
  6929 ;; *************** function _I2C_DO_ADDRESS_NACK *****************
  6930 ;; Defined at:
  6931 ;;		line 500 in file "mcc_generated_files/i2c_master.c"
  6932 ;; Parameters:    Size  Location     Type
  6933 ;;		None
  6934 ;; Auto vars:     Size  Location     Type
  6935 ;;		None
  6936 ;; Return value:  Size  Location     Type
  6937 ;;                  1    wreg      enum E12103
  6938 ;; Registers used:
  6939 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6940 ;; Tracked objects:
  6941 ;;		On entry : 0/0
  6942 ;;		On exit  : 0/0
  6943 ;;		Unchanged: 0/0
  6944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6947 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6948 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6949 ;;Total ram usage:        1 bytes
  6950 ;; Hardware stack levels used:    1
  6951 ;; Hardware stack levels required when called:    3
  6952 ;; This function calls:
  6953 ;;		Absolute function
  6954 ;;		_I2C_CallbackReturnReset
  6955 ;;		_I2C_CallbackReturnStop
  6956 ;;		_I2C_DO_SEND_RESTART
  6957 ;;		_I2C_DO_SEND_STOP
  6958 ;;		_rd1RegCompleteHandler
  6959 ;;		_rd2RegCompleteHandler
  6960 ;;		_rdBlkRegCompleteHandler
  6961 ;;		_wr1RegCompleteHandler
  6962 ;;		_wr2RegCompleteHandler
  6963 ;; This function is called by:
  6964 ;;		_I2C_MasterFsm
  6965 ;; This function uses a non-reentrant model
  6966 ;;
  6967                           
  6968                           
  6969                           ;psect for function _I2C_DO_ADDRESS_NACK
  6970  03AF                     _I2C_DO_ADDRESS_NACK:	
  6971                           
  6972                           ;i2c_master.c: 502: I2C_Status.addressNackCheck = 0;
  6973                           
  6974                           ;incstack = 0
  6975                           ; Regs used in _I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6976  03AF  0020               	movlb	0	; select bank0
  6977  03B0  103C               	bcf	_I2C_Status+28,0
  6978                           
  6979                           ;i2c_master.c: 503: I2C_Status.error = I2C_FAIL;
  6980  03B1  3002               	movlw	2
  6981  03B2  00FA               	movwf	??_I2C_DO_ADDRESS_NACK
  6982  03B3  087A               	movf	??_I2C_DO_ADDRESS_NACK,w
  6983  03B4  00BB               	movwf	_I2C_Status+27
  6984                           
  6985                           ;i2c_master.c: 504: switch(I2C_Status.callbackTable[I2C_ADDR_NACK](I2C_Status.callbackPa
      +                          yload[I2C_ADDR_NACK]))
  6986  03B5  2BBC               	goto	i1l2431
  6987  03B6                     i1l2421:	
  6988                           ;i2c_master.c: 505: {
  6989                           ;i2c_master.c: 506: case I2C_RESTART_READ:
  6990                           
  6991                           
  6992                           ;i2c_master.c: 507: case I2C_RESTART_WRITE:
  6993                           ;i2c_master.c: 508: return I2C_DO_SEND_RESTART();
  6994  03B6  3185  25BA         	fcall	_I2C_DO_SEND_RESTART
  6995  03B8  0008               	return
  6996  03B9                     i1l2425:	
  6997                           ;i2c_master.c: 509: default:
  6998                           
  6999                           
  7000                           ;i2c_master.c: 510: return I2C_DO_SEND_STOP();
  7001  03B9  3185  25B6         	fcall	_I2C_DO_SEND_STOP
  7002                           
  7003                           ;i2c_master.c: 511: }
  7004  03BB  0008               	return
  7005  03BC                     i1l2431:	
  7006  03BC  0020               	movlb	0	; select bank0
  7007  03BD  082E               	movf	low ((_I2C_Status| 0+14)),w
  7008  03BE  00FA               	movwf	??_I2C_DO_ADDRESS_NACK
  7009  03BF  087A               	movf	??_I2C_DO_ADDRESS_NACK,w
  7010  03C0  00F9               	movwf	I2C_CallbackReturnReset@funPtr
  7011  03C1  3004               	movlw	4
  7012  03C2  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
  7013  03C3  0086               	movwf	6
  7014  03C4  0187               	clrf	7
  7015  03C5  3F41               	moviw [1]fsr1
  7016  03C6  008A               	movwf	10
  7017  03C7  3F40               	moviw [0]fsr1
  7018  03C8  000A               	callw
  7019  03C9  3183               	pagesel	$
  7020                           
  7021                           ; Switch size 1, requested type "space"
  7022                           ; Number of cases is 2, Range of values is 2 to 3
  7023                           ; switch strategies available:
  7024                           ; Name         Instructions Cycles
  7025                           ; simple_byte            7     4 (average)
  7026                           ; direct_byte           13     9 (fixed)
  7027                           ; jumptable            263     9 (fixed)
  7028                           ;	Chosen strategy is simple_byte
  7029  03CA  3A02               	xorlw	2	; case 2
  7030  03CB  1903               	skipnz
  7031  03CC  2BB6               	goto	i1l2421
  7032  03CD  3A01               	xorlw	1	; case 3
  7033  03CE  1903               	skipnz
  7034  03CF  2BB6               	goto	i1l2421
  7035  03D0  2BB9               	goto	i1l2425
  7036  03D1  0008               	return
  7037  03D2                     __end_of_I2C_DO_ADDRESS_NACK:	
  7038                           
  7039                           	psect	text33
  7040  0593                     __ptext33:	
  7041 ;; *************** function _I2C_DO_RESET *****************
  7042 ;; Defined at:
  7043 ;;		line 494 in file "mcc_generated_files/i2c_master.c"
  7044 ;; Parameters:    Size  Location     Type
  7045 ;;		None
  7046 ;; Auto vars:     Size  Location     Type
  7047 ;;		None
  7048 ;; Return value:  Size  Location     Type
  7049 ;;                  1    wreg      enum E12103
  7050 ;; Registers used:
  7051 ;;		wreg, status,2
  7052 ;; Tracked objects:
  7053 ;;		On entry : 0/0
  7054 ;;		On exit  : 0/0
  7055 ;;		Unchanged: 0/0
  7056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7061 ;;Total ram usage:        0 bytes
  7062 ;; Hardware stack levels used:    1
  7063 ;; This function calls:
  7064 ;;		Nothing
  7065 ;; This function is called by:
  7066 ;;		_I2C_MasterFsm
  7067 ;; This function uses a non-reentrant model
  7068 ;;
  7069                           
  7070                           
  7071                           ;psect for function _I2C_DO_RESET
  7072  0593                     _I2C_DO_RESET:	
  7073                           
  7074                           ;i2c_master.c: 496: I2C_Status.busy = 0;
  7075                           
  7076                           ;incstack = 0
  7077                           ; Regs used in _I2C_DO_RESET: [wreg+status,2]
  7078  0593  0020               	movlb	0	; select bank0
  7079  0594  10BC               	bcf	_I2C_Status+28,1
  7080                           
  7081                           ;i2c_master.c: 497: I2C_Status.error = I2C_NOERR;
  7082  0595  01BB               	clrf	_I2C_Status+27
  7083                           
  7084                           ;i2c_master.c: 498: return I2C_RESET;
  7085  0596  300E               	movlw	14
  7086  0597  0008               	return
  7087  0598                     __end_of_I2C_DO_RESET:	
  7088                           
  7089                           	psect	text34
  7090  05AA                     __ptext34:	
  7091 ;; *************** function _I2C_DO_RX_NACK_RESTART *****************
  7092 ;; Defined at:
  7093 ;;		line 488 in file "mcc_generated_files/i2c_master.c"
  7094 ;; Parameters:    Size  Location     Type
  7095 ;;		None
  7096 ;; Auto vars:     Size  Location     Type
  7097 ;;		None
  7098 ;; Return value:  Size  Location     Type
  7099 ;;                  1    wreg      enum E12103
  7100 ;; Registers used:
  7101 ;;		wreg, status,2, status,0, pclath, cstack
  7102 ;; Tracked objects:
  7103 ;;		On entry : 0/0
  7104 ;;		On exit  : 0/0
  7105 ;;		Unchanged: 0/0
  7106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7111 ;;Total ram usage:        0 bytes
  7112 ;; Hardware stack levels used:    1
  7113 ;; Hardware stack levels required when called:    1
  7114 ;; This function calls:
  7115 ;;		_I2C_MasterSendNack
  7116 ;; This function is called by:
  7117 ;;		_I2C_DO_RX
  7118 ;;		_I2C_MasterFsm
  7119 ;; This function uses a non-reentrant model
  7120 ;;
  7121                           
  7122                           
  7123                           ;psect for function _I2C_DO_RX_NACK_RESTART
  7124  05AA                     _I2C_DO_RX_NACK_RESTART:	
  7125                           
  7126                           ;i2c_master.c: 490: I2C_MasterSendNack();
  7127                           
  7128                           ;incstack = 0
  7129                           ; Regs used in _I2C_DO_RX_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  7130  05AA  3185  25CA         	fcall	_I2C_MasterSendNack
  7131                           
  7132                           ;i2c_master.c: 491: return I2C_SEND_RESTART;
  7133  05AC  3009               	movlw	9
  7134  05AD  0008               	return
  7135  05AE                     __end_of_I2C_DO_RX_NACK_RESTART:	
  7136                           
  7137                           	psect	text35
  7138  05AE                     __ptext35:	
  7139 ;; *************** function _I2C_DO_RX_NACK_STOP *****************
  7140 ;; Defined at:
  7141 ;;		line 482 in file "mcc_generated_files/i2c_master.c"
  7142 ;; Parameters:    Size  Location     Type
  7143 ;;		None
  7144 ;; Auto vars:     Size  Location     Type
  7145 ;;		None
  7146 ;; Return value:  Size  Location     Type
  7147 ;;                  1    wreg      enum E12103
  7148 ;; Registers used:
  7149 ;;		wreg, status,2, status,0, pclath, cstack
  7150 ;; Tracked objects:
  7151 ;;		On entry : 0/0
  7152 ;;		On exit  : 0/0
  7153 ;;		Unchanged: 0/0
  7154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7159 ;;Total ram usage:        0 bytes
  7160 ;; Hardware stack levels used:    1
  7161 ;; Hardware stack levels required when called:    1
  7162 ;; This function calls:
  7163 ;;		_I2C_MasterSendNack
  7164 ;; This function is called by:
  7165 ;;		_I2C_DO_RX
  7166 ;;		_I2C_MasterFsm
  7167 ;; This function uses a non-reentrant model
  7168 ;;
  7169                           
  7170                           
  7171                           ;psect for function _I2C_DO_RX_NACK_STOP
  7172  05AE                     _I2C_DO_RX_NACK_STOP:	
  7173                           
  7174                           ;i2c_master.c: 484: I2C_MasterSendNack();
  7175                           
  7176                           ;incstack = 0
  7177                           ; Regs used in _I2C_DO_RX_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  7178  05AE  3185  25CA         	fcall	_I2C_MasterSendNack
  7179                           
  7180                           ;i2c_master.c: 485: return I2C_SEND_STOP;
  7181  05B0  300A               	movlw	10
  7182  05B1  0008               	return
  7183  05B2                     __end_of_I2C_DO_RX_NACK_STOP:	
  7184                           
  7185                           	psect	text36
  7186  05B2                     __ptext36:	
  7187 ;; *************** function _I2C_DO_RX_ACK *****************
  7188 ;; Defined at:
  7189 ;;		line 475 in file "mcc_generated_files/i2c_master.c"
  7190 ;; Parameters:    Size  Location     Type
  7191 ;;		None
  7192 ;; Auto vars:     Size  Location     Type
  7193 ;;		None
  7194 ;; Return value:  Size  Location     Type
  7195 ;;                  1    wreg      enum E12103
  7196 ;; Registers used:
  7197 ;;		wreg, status,2, status,0, pclath, cstack
  7198 ;; Tracked objects:
  7199 ;;		On entry : 0/0
  7200 ;;		On exit  : 0/0
  7201 ;;		Unchanged: 0/0
  7202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7207 ;;Total ram usage:        0 bytes
  7208 ;; Hardware stack levels used:    1
  7209 ;; Hardware stack levels required when called:    1
  7210 ;; This function calls:
  7211 ;;		_I2C_MasterSendAck
  7212 ;; This function is called by:
  7213 ;;		_I2C_MasterFsm
  7214 ;; This function uses a non-reentrant model
  7215 ;;
  7216                           
  7217                           
  7218                           ;psect for function _I2C_DO_RX_ACK
  7219  05B2                     _I2C_DO_RX_ACK:	
  7220                           
  7221                           ;i2c_master.c: 477: I2C_MasterSendAck();
  7222                           
  7223                           ;incstack = 0
  7224                           ; Regs used in _I2C_DO_RX_ACK: [wreg+status,2+status,0+pclath+cstack]
  7225  05B2  3185  25C6         	fcall	_I2C_MasterSendAck
  7226                           
  7227                           ;i2c_master.c: 478: return I2C_RCEN;
  7228  05B4  3005               	movlw	5
  7229  05B5  0008               	return
  7230  05B6                     __end_of_I2C_DO_RX_ACK:	
  7231                           
  7232                           	psect	text37
  7233  05B6                     __ptext37:	
  7234 ;; *************** function _I2C_DO_SEND_STOP *****************
  7235 ;; Defined at:
  7236 ;;		line 469 in file "mcc_generated_files/i2c_master.c"
  7237 ;; Parameters:    Size  Location     Type
  7238 ;;		None
  7239 ;; Auto vars:     Size  Location     Type
  7240 ;;		None
  7241 ;; Return value:  Size  Location     Type
  7242 ;;                  1    wreg      enum E12103
  7243 ;; Registers used:
  7244 ;;		wreg, status,2, status,0, pclath, cstack
  7245 ;; Tracked objects:
  7246 ;;		On entry : 0/0
  7247 ;;		On exit  : 0/0
  7248 ;;		Unchanged: 0/0
  7249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7253 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7254 ;;Total ram usage:        0 bytes
  7255 ;; Hardware stack levels used:    1
  7256 ;; Hardware stack levels required when called:    1
  7257 ;; This function calls:
  7258 ;;		_I2C_MasterStop
  7259 ;; This function is called by:
  7260 ;;		_I2C_DO_TX
  7261 ;;		_I2C_DO_TX_EMPTY
  7262 ;;		_I2C_DO_ADDRESS_NACK
  7263 ;;		_I2C_MasterFsm
  7264 ;; This function uses a non-reentrant model
  7265 ;;
  7266                           
  7267                           
  7268                           ;psect for function _I2C_DO_SEND_STOP
  7269  05B6                     _I2C_DO_SEND_STOP:	
  7270                           
  7271                           ;i2c_master.c: 471: I2C_MasterStop();
  7272                           
  7273                           ;incstack = 0
  7274                           ; Regs used in _I2C_DO_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
  7275  05B6  3185  25E4         	fcall	_I2C_MasterStop
  7276                           
  7277                           ;i2c_master.c: 472: return I2C_IDLE;
  7278  05B8  3000               	movlw	0
  7279  05B9  0008               	return
  7280  05BA                     __end_of_I2C_DO_SEND_STOP:	
  7281                           
  7282                           	psect	text38
  7283  05BA                     __ptext38:	
  7284 ;; *************** function _I2C_DO_SEND_RESTART *****************
  7285 ;; Defined at:
  7286 ;;		line 463 in file "mcc_generated_files/i2c_master.c"
  7287 ;; Parameters:    Size  Location     Type
  7288 ;;		None
  7289 ;; Auto vars:     Size  Location     Type
  7290 ;;		None
  7291 ;; Return value:  Size  Location     Type
  7292 ;;                  1    wreg      enum E12103
  7293 ;; Registers used:
  7294 ;;		wreg, status,2, status,0, pclath, cstack
  7295 ;; Tracked objects:
  7296 ;;		On entry : 0/0
  7297 ;;		On exit  : 0/0
  7298 ;;		Unchanged: 0/0
  7299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7304 ;;Total ram usage:        0 bytes
  7305 ;; Hardware stack levels used:    1
  7306 ;; Hardware stack levels required when called:    1
  7307 ;; This function calls:
  7308 ;;		_I2C_MasterEnableRestart
  7309 ;; This function is called by:
  7310 ;;		_I2C_DO_TX_EMPTY
  7311 ;;		_I2C_DO_ADDRESS_NACK
  7312 ;;		_I2C_MasterFsm
  7313 ;; This function uses a non-reentrant model
  7314 ;;
  7315                           
  7316                           
  7317                           ;psect for function _I2C_DO_SEND_RESTART
  7318  05BA                     _I2C_DO_SEND_RESTART:	
  7319                           
  7320                           ;i2c_master.c: 465: I2C_MasterEnableRestart();
  7321                           
  7322                           ;incstack = 0
  7323                           ; Regs used in _I2C_DO_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
  7324  05BA  3185  25E7         	fcall	_I2C_MasterEnableRestart
  7325                           
  7326                           ;i2c_master.c: 466: return I2C_SEND_ADR_READ;
  7327  05BC  3001               	movlw	1
  7328  05BD  0008               	return
  7329  05BE                     __end_of_I2C_DO_SEND_RESTART:	
  7330                           
  7331                           	psect	text39
  7332  05BE                     __ptext39:	
  7333 ;; *************** function _I2C_DO_SEND_RESTART_WRITE *****************
  7334 ;; Defined at:
  7335 ;;		line 456 in file "mcc_generated_files/i2c_master.c"
  7336 ;; Parameters:    Size  Location     Type
  7337 ;;		None
  7338 ;; Auto vars:     Size  Location     Type
  7339 ;;		None
  7340 ;; Return value:  Size  Location     Type
  7341 ;;                  1    wreg      enum E12103
  7342 ;; Registers used:
  7343 ;;		wreg, status,2, status,0, pclath, cstack
  7344 ;; Tracked objects:
  7345 ;;		On entry : 0/0
  7346 ;;		On exit  : 0/0
  7347 ;;		Unchanged: 0/0
  7348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7353 ;;Total ram usage:        0 bytes
  7354 ;; Hardware stack levels used:    1
  7355 ;; Hardware stack levels required when called:    1
  7356 ;; This function calls:
  7357 ;;		_I2C_MasterEnableRestart
  7358 ;; This function is called by:
  7359 ;;		_I2C_DO_TX
  7360 ;;		_I2C_MasterFsm
  7361 ;; This function uses a non-reentrant model
  7362 ;;
  7363                           
  7364                           
  7365                           ;psect for function _I2C_DO_SEND_RESTART_WRITE
  7366  05BE                     _I2C_DO_SEND_RESTART_WRITE:	
  7367                           
  7368                           ;i2c_master.c: 458: I2C_MasterEnableRestart();
  7369                           
  7370                           ;incstack = 0
  7371                           ; Regs used in _I2C_DO_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
  7372  05BE  3185  25E7         	fcall	_I2C_MasterEnableRestart
  7373                           
  7374                           ;i2c_master.c: 459: return I2C_SEND_ADR_WRITE;
  7375  05C0  3002               	movlw	2
  7376  05C1  0008               	return
  7377  05C2                     __end_of_I2C_DO_SEND_RESTART_WRITE:	
  7378                           
  7379                           	psect	text40
  7380  05C2                     __ptext40:	
  7381 ;; *************** function _I2C_DO_SEND_RESTART_READ *****************
  7382 ;; Defined at:
  7383 ;;		line 450 in file "mcc_generated_files/i2c_master.c"
  7384 ;; Parameters:    Size  Location     Type
  7385 ;;		None
  7386 ;; Auto vars:     Size  Location     Type
  7387 ;;		None
  7388 ;; Return value:  Size  Location     Type
  7389 ;;                  1    wreg      enum E12103
  7390 ;; Registers used:
  7391 ;;		wreg, status,2, status,0, pclath, cstack
  7392 ;; Tracked objects:
  7393 ;;		On entry : 0/0
  7394 ;;		On exit  : 0/0
  7395 ;;		Unchanged: 0/0
  7396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7401 ;;Total ram usage:        0 bytes
  7402 ;; Hardware stack levels used:    1
  7403 ;; Hardware stack levels required when called:    1
  7404 ;; This function calls:
  7405 ;;		_I2C_MasterEnableRestart
  7406 ;; This function is called by:
  7407 ;;		_I2C_DO_TX
  7408 ;;		_I2C_MasterFsm
  7409 ;; This function uses a non-reentrant model
  7410 ;;
  7411                           
  7412                           
  7413                           ;psect for function _I2C_DO_SEND_RESTART_READ
  7414  05C2                     _I2C_DO_SEND_RESTART_READ:	
  7415                           
  7416                           ;i2c_master.c: 452: I2C_MasterEnableRestart();
  7417                           
  7418                           ;incstack = 0
  7419                           ; Regs used in _I2C_DO_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
  7420  05C2  3185  25E7         	fcall	_I2C_MasterEnableRestart
  7421                           
  7422                           ;i2c_master.c: 453: return I2C_SEND_ADR_READ;
  7423  05C4  3001               	movlw	1
  7424  05C5  0008               	return
  7425  05C6                     __end_of_I2C_DO_SEND_RESTART_READ:	
  7426                           
  7427                           	psect	text41
  7428  0582                     __ptext41:	
  7429 ;; *************** function _I2C_DO_RCEN *****************
  7430 ;; Defined at:
  7431 ;;		line 402 in file "mcc_generated_files/i2c_master.c"
  7432 ;; Parameters:    Size  Location     Type
  7433 ;;		None
  7434 ;; Auto vars:     Size  Location     Type
  7435 ;;		None
  7436 ;; Return value:  Size  Location     Type
  7437 ;;                  1    wreg      enum E12103
  7438 ;; Registers used:
  7439 ;;		wreg, status,2, status,0, pclath, cstack
  7440 ;; Tracked objects:
  7441 ;;		On entry : 0/0
  7442 ;;		On exit  : 0/0
  7443 ;;		Unchanged: 0/0
  7444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7449 ;;Total ram usage:        0 bytes
  7450 ;; Hardware stack levels used:    1
  7451 ;; Hardware stack levels required when called:    1
  7452 ;; This function calls:
  7453 ;;		_I2C_MasterStartRx
  7454 ;; This function is called by:
  7455 ;;		_I2C_MasterFsm
  7456 ;; This function uses a non-reentrant model
  7457 ;;
  7458                           
  7459                           
  7460                           ;psect for function _I2C_DO_RCEN
  7461  0582                     _I2C_DO_RCEN:	
  7462                           
  7463                           ;i2c_master.c: 404: I2C_Status.addressNackCheck = 0;
  7464                           
  7465                           ;incstack = 0
  7466                           ; Regs used in _I2C_DO_RCEN: [wreg+status,2+status,0+pclath+cstack]
  7467  0582  0020               	movlb	0	; select bank0
  7468  0583  103C               	bcf	_I2C_Status+28,0
  7469                           
  7470                           ;i2c_master.c: 405: I2C_MasterStartRx();
  7471  0584  3185  25E1         	fcall	_I2C_MasterStartRx
  7472                           
  7473                           ;i2c_master.c: 406: return I2C_RX;
  7474  0586  3004               	movlw	4
  7475  0587  0008               	return
  7476  0588                     __end_of_I2C_DO_RCEN:	
  7477                           
  7478                           	psect	text42
  7479  0238                     __ptext42:	
  7480 ;; *************** function _I2C_DO_RX *****************
  7481 ;; Defined at:
  7482 ;;		line 378 in file "mcc_generated_files/i2c_master.c"
  7483 ;; Parameters:    Size  Location     Type
  7484 ;;		None
  7485 ;; Auto vars:     Size  Location     Type
  7486 ;;		None
  7487 ;; Return value:  Size  Location     Type
  7488 ;;                  1    wreg      enum E12103
  7489 ;; Registers used:
  7490 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7491 ;; Tracked objects:
  7492 ;;		On entry : 0/0
  7493 ;;		On exit  : 0/0
  7494 ;;		Unchanged: 0/0
  7495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7498 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7499 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7500 ;;Total ram usage:        1 bytes
  7501 ;; Hardware stack levels used:    1
  7502 ;; Hardware stack levels required when called:    3
  7503 ;; This function calls:
  7504 ;;		Absolute function
  7505 ;;		_I2C_CallbackReturnReset
  7506 ;;		_I2C_CallbackReturnStop
  7507 ;;		_I2C_DO_RX_NACK_RESTART
  7508 ;;		_I2C_DO_RX_NACK_STOP
  7509 ;;		_I2C_MasterGetRxData
  7510 ;;		_I2C_MasterSendAck
  7511 ;;		_rd1RegCompleteHandler
  7512 ;;		_rd2RegCompleteHandler
  7513 ;;		_rdBlkRegCompleteHandler
  7514 ;;		_wr1RegCompleteHandler
  7515 ;;		_wr2RegCompleteHandler
  7516 ;; This function is called by:
  7517 ;;		_I2C_MasterFsm
  7518 ;; This function uses a non-reentrant model
  7519 ;;
  7520                           
  7521                           
  7522                           ;psect for function _I2C_DO_RX
  7523  0238                     _I2C_DO_RX:	
  7524                           
  7525                           ;i2c_master.c: 380: *I2C_Status.data_ptr++ = I2C_MasterGetRxData();
  7526                           
  7527                           ;incstack = 0
  7528                           ; Regs used in _I2C_DO_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7529  0238  3185  25DE  3182   	fcall	_I2C_MasterGetRxData
  7530  023B  00FA               	movwf	??_I2C_DO_RX
  7531  023C  0020               	movlb	0	; select bank0
  7532  023D  0837               	movf	low ((_I2C_Status| 0+23)),w
  7533  023E  0086               	movwf	6
  7534  023F  0187               	clrf	7
  7535  0240  087A               	movf	??_I2C_DO_RX,w
  7536  0241  0081               	movwf	1
  7537  0242  3001               	movlw	1
  7538  0243  00FA               	movwf	??_I2C_DO_RX
  7539  0244  087A               	movf	??_I2C_DO_RX,w
  7540  0245  07B7               	addwf	low ((_I2C_Status| 0+23)),f
  7541                           
  7542                           ;i2c_master.c: 381: if(--I2C_Status.data_length)
  7543  0246  3001               	movlw	1
  7544  0247  02B8               	subwf	_I2C_Status+24,f
  7545  0248  3000               	movlw	0
  7546  0249  3BB9               	subwfb	_I2C_Status+25,f
  7547  024A  0838               	movf	_I2C_Status+24,w
  7548  024B  0439               	iorwf	_I2C_Status+25,w
  7549  024C  1903               	btfsc	3,2
  7550  024D  2A52               	goto	i1l403
  7551                           
  7552                           ;i2c_master.c: 382: {
  7553                           ;i2c_master.c: 383: I2C_MasterSendAck();
  7554  024E  3185  25C6         	fcall	_I2C_MasterSendAck
  7555                           
  7556                           ;i2c_master.c: 384: return I2C_RCEN;
  7557  0250  3005               	movlw	5
  7558                           
  7559                           ;i2c_master.c: 385: }
  7560  0251  0008               	return
  7561  0252                     i1l403:	
  7562                           
  7563                           ;i2c_master.c: 386: else
  7564                           ;i2c_master.c: 387: {
  7565                           ;i2c_master.c: 388: I2C_Status.bufferFree = 1;
  7566  0252  15BC               	bsf	_I2C_Status+28,3
  7567                           
  7568                           ;i2c_master.c: 389: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
  7569  0253  2A5A               	goto	i1l2373
  7570  0254                     i1l2363:	
  7571                           ;i2c_master.c: 390: {
  7572                           ;i2c_master.c: 391: case I2C_RESTART_WRITE:
  7573                           
  7574                           
  7575                           ;i2c_master.c: 392: case I2C_RESTART_READ:
  7576                           ;i2c_master.c: 393: return I2C_DO_RX_NACK_RESTART();
  7577  0254  3185  25AA         	fcall	_I2C_DO_RX_NACK_RESTART
  7578  0256  0008               	return
  7579  0257                     i1l2367:	
  7580                           ;i2c_master.c: 395: case I2C_CONTINUE:
  7581                           
  7582                           ;i2c_master.c: 394: default:
  7583                           
  7584                           
  7585                           ;i2c_master.c: 396: case I2C_STOP:
  7586                           ;i2c_master.c: 397: return I2C_DO_RX_NACK_STOP();
  7587  0257  3185  25AE         	fcall	_I2C_DO_RX_NACK_STOP
  7588                           
  7589                           ;i2c_master.c: 398: }
  7590  0259  0008               	return
  7591  025A                     i1l2373:	
  7592  025A  0020               	movlb	0	; select bank0
  7593  025B  082C               	movf	low ((_I2C_Status| 0+12)),w
  7594  025C  00FA               	movwf	??_I2C_DO_RX
  7595  025D  087A               	movf	??_I2C_DO_RX,w
  7596  025E  00F9               	movwf	I2C_CallbackReturnReset@funPtr
  7597  025F  0821               	movf	_I2C_Status+1,w
  7598  0260  008A               	movwf	10
  7599  0261  0820               	movf	_I2C_Status,w
  7600  0262  000A               	callw
  7601  0263  3182               	pagesel	$
  7602                           
  7603                           ; Switch size 1, requested type "space"
  7604                           ; Number of cases is 4, Range of values is 1 to 4
  7605                           ; switch strategies available:
  7606                           ; Name         Instructions Cycles
  7607                           ; simple_byte           13     7 (average)
  7608                           ; direct_byte           17     9 (fixed)
  7609                           ; jumptable            263     9 (fixed)
  7610                           ;	Chosen strategy is simple_byte
  7611  0264  3A01               	xorlw	1	; case 1
  7612  0265  1903               	skipnz
  7613  0266  2A57               	goto	i1l2367
  7614  0267  3A03               	xorlw	3	; case 2
  7615  0268  1903               	skipnz
  7616  0269  2A54               	goto	i1l2363
  7617  026A  3A01               	xorlw	1	; case 3
  7618  026B  1903               	skipnz
  7619  026C  2A54               	goto	i1l2363
  7620  026D  3A07               	xorlw	7	; case 4
  7621  026E  1903               	skipnz
  7622  026F  2A57               	goto	i1l2367
  7623  0270  2A57               	goto	i1l2367
  7624  0271  0008               	return
  7625  0272                     __end_of_I2C_DO_RX:	
  7626                           
  7627                           	psect	text43
  7628  01B2                     __ptext43:	
  7629 ;; *************** function _I2C_DO_TX *****************
  7630 ;; Defined at:
  7631 ;;		line 354 in file "mcc_generated_files/i2c_master.c"
  7632 ;; Parameters:    Size  Location     Type
  7633 ;;		None
  7634 ;; Auto vars:     Size  Location     Type
  7635 ;;		None
  7636 ;; Return value:  Size  Location     Type
  7637 ;;                  1    wreg      enum E12103
  7638 ;; Registers used:
  7639 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7640 ;; Tracked objects:
  7641 ;;		On entry : 0/0
  7642 ;;		On exit  : 0/0
  7643 ;;		Unchanged: 0/0
  7644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7646 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7647 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7648 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7649 ;;Total ram usage:        3 bytes
  7650 ;; Hardware stack levels used:    1
  7651 ;; Hardware stack levels required when called:    3
  7652 ;; This function calls:
  7653 ;;		Absolute function
  7654 ;;		_I2C_CallbackReturnReset
  7655 ;;		_I2C_CallbackReturnStop
  7656 ;;		_I2C_DO_SEND_RESTART_READ
  7657 ;;		_I2C_DO_SEND_RESTART_WRITE
  7658 ;;		_I2C_DO_SEND_STOP
  7659 ;;		_I2C_MasterIsNack
  7660 ;;		_I2C_MasterSendTxData
  7661 ;;		_rd1RegCompleteHandler
  7662 ;;		_rd2RegCompleteHandler
  7663 ;;		_rdBlkRegCompleteHandler
  7664 ;;		_wr1RegCompleteHandler
  7665 ;;		_wr2RegCompleteHandler
  7666 ;; This function is called by:
  7667 ;;		_I2C_MasterFsm
  7668 ;; This function uses a non-reentrant model
  7669 ;;
  7670                           
  7671                           
  7672                           ;psect for function _I2C_DO_TX
  7673  01B2                     _I2C_DO_TX:	
  7674                           
  7675                           ;i2c_master.c: 356: if(I2C_MasterIsNack())
  7676                           
  7677                           ;incstack = 0
  7678                           ; Regs used in _I2C_DO_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7679  01B2  3185  2588  3181   	fcall	_I2C_MasterIsNack
  7680  01B5  3A00               	xorlw	0
  7681  01B6  1D03               	btfss	3,2
  7682  01B7  29C2               	goto	i1l2337
  7683  01B8  29DE               	goto	i1l387
  7684  01B9                     i1l2323:	
  7685                           ;i2c_master.c: 359: {
  7686                           ;i2c_master.c: 360: case I2C_RESTART_READ:
  7687                           
  7688                           ;i2c_master.c: 357: {
  7689                           ;i2c_master.c: 358: switch(I2C_Status.callbackTable[I2C_DATA_NACK](I2C_Status.callbackPa
      +                          yload[I2C_DATA_NACK]))
  7690                           
  7691                           
  7692                           ;i2c_master.c: 361: return I2C_DO_SEND_RESTART_READ();
  7693  01B9  3185  25C2         	fcall	_I2C_DO_SEND_RESTART_READ
  7694  01BB  0008               	return
  7695  01BC                     i1l2327:	
  7696                           ;i2c_master.c: 362: case I2C_RESTART_WRITE:
  7697                           
  7698                           
  7699                           ;i2c_master.c: 363: return I2C_DO_SEND_RESTART_WRITE();
  7700  01BC  3185  25BE         	fcall	_I2C_DO_SEND_RESTART_WRITE
  7701  01BE  0008               	return
  7702  01BF                     i1l2331:	
  7703                           ;i2c_master.c: 365: case I2C_CONTINUE:
  7704                           
  7705                           ;i2c_master.c: 364: default:
  7706                           
  7707                           
  7708                           ;i2c_master.c: 366: case I2C_STOP:
  7709                           ;i2c_master.c: 367: return I2C_DO_SEND_STOP();
  7710  01BF  3185  25B6         	fcall	_I2C_DO_SEND_STOP
  7711                           
  7712                           ;i2c_master.c: 368: }
  7713  01C1  0008               	return
  7714  01C2                     i1l2337:	
  7715  01C2  0020               	movlb	0	; select bank0
  7716  01C3  082F               	movf	low ((_I2C_Status| 0+15)),w
  7717  01C4  00FA               	movwf	??_I2C_DO_TX
  7718  01C5  087A               	movf	??_I2C_DO_TX,w
  7719  01C6  00F9               	movwf	I2C_CallbackReturnReset@funPtr
  7720  01C7  3006               	movlw	6
  7721  01C8  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
  7722  01C9  0086               	movwf	6
  7723  01CA  0187               	clrf	7
  7724  01CB  3F41               	moviw [1]fsr1
  7725  01CC  008A               	movwf	10
  7726  01CD  3F40               	moviw [0]fsr1
  7727  01CE  000A               	callw
  7728  01CF  3181               	pagesel	$
  7729                           
  7730                           ; Switch size 1, requested type "space"
  7731                           ; Number of cases is 4, Range of values is 1 to 4
  7732                           ; switch strategies available:
  7733                           ; Name         Instructions Cycles
  7734                           ; simple_byte           13     7 (average)
  7735                           ; direct_byte           17     9 (fixed)
  7736                           ; jumptable            263     9 (fixed)
  7737                           ;	Chosen strategy is simple_byte
  7738  01D0  3A01               	xorlw	1	; case 1
  7739  01D1  1903               	skipnz
  7740  01D2  29BF               	goto	i1l2331
  7741  01D3  3A03               	xorlw	3	; case 2
  7742  01D4  1903               	skipnz
  7743  01D5  29B9               	goto	i1l2323
  7744  01D6  3A01               	xorlw	1	; case 3
  7745  01D7  1903               	skipnz
  7746  01D8  29BC               	goto	i1l2327
  7747  01D9  3A07               	xorlw	7	; case 4
  7748  01DA  1903               	skipnz
  7749  01DB  29BF               	goto	i1l2331
  7750  01DC  29BF               	goto	i1l2331
  7751                           
  7752                           ;i2c_master.c: 369: }
  7753  01DD  0008               	return
  7754  01DE                     i1l387:	
  7755                           
  7756                           ;i2c_master.c: 370: else
  7757                           ;i2c_master.c: 371: {
  7758                           ;i2c_master.c: 372: I2C_Status.addressNackCheck = 0;
  7759  01DE  0020               	movlb	0	; select bank0
  7760  01DF  103C               	bcf	_I2C_Status+28,0
  7761                           
  7762                           ;i2c_master.c: 373: I2C_MasterSendTxData(*I2C_Status.data_ptr++);
  7763  01E0  3017               	movlw	23
  7764  01E1  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
  7765  01E2  0086               	movwf	6
  7766  01E3  0187               	clrf	7
  7767  01E4  3F40               	moviw [0]fsr1
  7768  01E5  0084               	movwf	4
  7769  01E6  0185               	clrf	5
  7770  01E7  0A81               	incf	1,f
  7771  01E8  0800               	movf	0,w
  7772  01E9  3185  259D  3181   	fcall	_I2C_MasterSendTxData
  7773                           
  7774                           ;i2c_master.c: 374: return (--I2C_Status.data_length)?I2C_TX:I2C_TX_EMPTY;
  7775  01EC  3001               	movlw	1
  7776  01ED  0020               	movlb	0	; select bank0
  7777  01EE  02B8               	subwf	_I2C_Status+24,f
  7778  01EF  3000               	movlw	0
  7779  01F0  3BB9               	subwfb	_I2C_Status+25,f
  7780  01F1  0838               	movf	_I2C_Status+24,w
  7781  01F2  0439               	iorwf	_I2C_Status+25,w
  7782  01F3  1D03               	btfss	3,2
  7783  01F4  29F7               	goto	i1l2345
  7784  01F5  3006               	movlw	6
  7785  01F6  29F8               	goto	L1
  7786  01F7                     i1l2345:	
  7787  01F7  3003               	movlw	3
  7788  01F8                     L1:	
  7789  01F8  00FB               	movwf	_I2C_DO_TX$794
  7790  01F9  3000               	movlw	0
  7791  01FA  00FC               	movwf	_I2C_DO_TX$794+1
  7792  01FB  087B               	movf	_I2C_DO_TX$794,w
  7793  01FC  0008               	return
  7794  01FD                     __end_of_I2C_DO_TX:	
  7795                           
  7796                           	psect	text44
  7797  055D                     __ptext44:	
  7798 ;; *************** function _I2C_DO_SEND_ADR_WRITE *****************
  7799 ;; Defined at:
  7800 ;;		line 347 in file "mcc_generated_files/i2c_master.c"
  7801 ;; Parameters:    Size  Location     Type
  7802 ;;		None
  7803 ;; Auto vars:     Size  Location     Type
  7804 ;;		None
  7805 ;; Return value:  Size  Location     Type
  7806 ;;                  1    wreg      enum E12103
  7807 ;; Registers used:
  7808 ;;		wreg, status,2, status,0, pclath, cstack
  7809 ;; Tracked objects:
  7810 ;;		On entry : 0/0
  7811 ;;		On exit  : 0/0
  7812 ;;		Unchanged: 0/0
  7813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7817 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7818 ;;Total ram usage:        0 bytes
  7819 ;; Hardware stack levels used:    1
  7820 ;; Hardware stack levels required when called:    1
  7821 ;; This function calls:
  7822 ;;		_I2C_MasterSendTxData
  7823 ;; This function is called by:
  7824 ;;		_I2C_MasterFsm
  7825 ;; This function uses a non-reentrant model
  7826 ;;
  7827                           
  7828                           
  7829                           ;psect for function _I2C_DO_SEND_ADR_WRITE
  7830  055D                     _I2C_DO_SEND_ADR_WRITE:	
  7831                           
  7832                           ;i2c_master.c: 349: I2C_Status.addressNackCheck = 1;
  7833                           
  7834                           ;incstack = 0
  7835                           ; Regs used in _I2C_DO_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
  7836  055D  0020               	movlb	0	; select bank0
  7837  055E  143C               	bsf	_I2C_Status+28,0
  7838                           
  7839                           ;i2c_master.c: 350: I2C_MasterSendTxData(I2C_Status.address << 1);
  7840  055F  3536               	lslf	_I2C_Status+22,w
  7841  0560  3185  259D         	fcall	_I2C_MasterSendTxData
  7842                           
  7843                           ;i2c_master.c: 351: return I2C_TX;
  7844  0562  3003               	movlw	3
  7845  0563  0008               	return
  7846  0564                     __end_of_I2C_DO_SEND_ADR_WRITE:	
  7847                           
  7848                           	psect	text45
  7849  0546                     __ptext45:	
  7850 ;; *************** function _I2C_DO_SEND_ADR_READ *****************
  7851 ;; Defined at:
  7852 ;;		line 340 in file "mcc_generated_files/i2c_master.c"
  7853 ;; Parameters:    Size  Location     Type
  7854 ;;		None
  7855 ;; Auto vars:     Size  Location     Type
  7856 ;;		None
  7857 ;; Return value:  Size  Location     Type
  7858 ;;                  1    wreg      enum E12103
  7859 ;; Registers used:
  7860 ;;		wreg, status,2, status,0, pclath, cstack
  7861 ;; Tracked objects:
  7862 ;;		On entry : 0/0
  7863 ;;		On exit  : 0/0
  7864 ;;		Unchanged: 0/0
  7865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7870 ;;Total ram usage:        0 bytes
  7871 ;; Hardware stack levels used:    1
  7872 ;; Hardware stack levels required when called:    1
  7873 ;; This function calls:
  7874 ;;		_I2C_MasterSendTxData
  7875 ;; This function is called by:
  7876 ;;		_I2C_MasterFsm
  7877 ;; This function uses a non-reentrant model
  7878 ;;
  7879                           
  7880                           
  7881                           ;psect for function _I2C_DO_SEND_ADR_READ
  7882  0546                     _I2C_DO_SEND_ADR_READ:	
  7883                           
  7884                           ;i2c_master.c: 342: I2C_Status.addressNackCheck = 1;
  7885                           
  7886                           ;incstack = 0
  7887                           ; Regs used in _I2C_DO_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
  7888  0546  0020               	movlb	0	; select bank0
  7889  0547  143C               	bsf	_I2C_Status+28,0
  7890                           
  7891                           ;i2c_master.c: 343: I2C_MasterSendTxData(I2C_Status.address << 1 | 1);
  7892  0548  1403               	setc
  7893  0549  0D36               	rlf	_I2C_Status+22,w
  7894  054A  3185  259D         	fcall	_I2C_MasterSendTxData
  7895                           
  7896                           ;i2c_master.c: 344: return I2C_RCEN;
  7897  054C  3005               	movlw	5
  7898  054D  0008               	return
  7899  054E                     __end_of_I2C_DO_SEND_ADR_READ:	
  7900                           
  7901                           	psect	text46
  7902  0598                     __ptext46:	
  7903 ;; *************** function _I2C_DO_IDLE *****************
  7904 ;; Defined at:
  7905 ;;		line 333 in file "mcc_generated_files/i2c_master.c"
  7906 ;; Parameters:    Size  Location     Type
  7907 ;;		None
  7908 ;; Auto vars:     Size  Location     Type
  7909 ;;		None
  7910 ;; Return value:  Size  Location     Type
  7911 ;;                  1    wreg      enum E12103
  7912 ;; Registers used:
  7913 ;;		wreg, status,2
  7914 ;; Tracked objects:
  7915 ;;		On entry : 0/0
  7916 ;;		On exit  : 0/0
  7917 ;;		Unchanged: 0/0
  7918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7922 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7923 ;;Total ram usage:        0 bytes
  7924 ;; Hardware stack levels used:    1
  7925 ;; This function calls:
  7926 ;;		Nothing
  7927 ;; This function is called by:
  7928 ;;		_I2C_MasterFsm
  7929 ;; This function uses a non-reentrant model
  7930 ;;
  7931                           
  7932                           
  7933                           ;psect for function _I2C_DO_IDLE
  7934  0598                     _I2C_DO_IDLE:	
  7935                           
  7936                           ;i2c_master.c: 335: I2C_Status.busy = 0;
  7937                           
  7938                           ;incstack = 0
  7939                           ; Regs used in _I2C_DO_IDLE: [wreg+status,2]
  7940  0598  0020               	movlb	0	; select bank0
  7941  0599  10BC               	bcf	_I2C_Status+28,1
  7942                           
  7943                           ;i2c_master.c: 336: I2C_Status.error = I2C_NOERR;
  7944  059A  01BB               	clrf	_I2C_Status+27
  7945                           
  7946                           ;i2c_master.c: 337: return I2C_RESET;
  7947  059B  300E               	movlw	14
  7948  059C  0008               	return
  7949  059D                     __end_of_I2C_DO_IDLE:	
  7950                           
  7951                           	psect	text47
  7952  0366                     __ptext47:	
  7953 ;; *************** function _I2C_DO_TX_EMPTY *****************
  7954 ;; Defined at:
  7955 ;;		line 409 in file "mcc_generated_files/i2c_master.c"
  7956 ;; Parameters:    Size  Location     Type
  7957 ;;		None
  7958 ;; Auto vars:     Size  Location     Type
  7959 ;;		None
  7960 ;; Return value:  Size  Location     Type
  7961 ;;                  1    wreg      enum E12103
  7962 ;; Registers used:
  7963 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7964 ;; Tracked objects:
  7965 ;;		On entry : 0/0
  7966 ;;		On exit  : 0/0
  7967 ;;		Unchanged: 0/0
  7968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7971 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7972 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7973 ;;Total ram usage:        1 bytes
  7974 ;; Hardware stack levels used:    1
  7975 ;; Hardware stack levels required when called:    3
  7976 ;; This function calls:
  7977 ;;		Absolute function
  7978 ;;		_I2C_CallbackReturnReset
  7979 ;;		_I2C_CallbackReturnStop
  7980 ;;		_I2C_DO_SEND_RESTART
  7981 ;;		_I2C_DO_SEND_STOP
  7982 ;;		_I2C_MasterSetIrq
  7983 ;;		_rd1RegCompleteHandler
  7984 ;;		_rd2RegCompleteHandler
  7985 ;;		_rdBlkRegCompleteHandler
  7986 ;;		_wr1RegCompleteHandler
  7987 ;;		_wr2RegCompleteHandler
  7988 ;; This function is called by:
  7989 ;;		_I2C_MasterFsm
  7990 ;; This function uses a non-reentrant model
  7991 ;;
  7992                           
  7993                           
  7994                           ;psect for function _I2C_DO_TX_EMPTY
  7995  0366                     _I2C_DO_TX_EMPTY:	
  7996                           
  7997                           ;i2c_master.c: 411: I2C_Status.bufferFree = 1;
  7998                           
  7999                           ;incstack = 0
  8000                           ; Regs used in _I2C_DO_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8001  0366  0020               	movlb	0	; select bank0
  8002  0367  15BC               	bsf	_I2C_Status+28,3
  8003                           
  8004                           ;i2c_master.c: 412: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
  8005  0368  2B73               	goto	i1l2401
  8006  0369                     i1l2385:	
  8007                           ;i2c_master.c: 413: {
  8008                           ;i2c_master.c: 414: case I2C_RESTART_READ:
  8009                           
  8010                           
  8011                           ;i2c_master.c: 415: case I2C_RESTART_WRITE:
  8012                           ;i2c_master.c: 416: return I2C_DO_SEND_RESTART();
  8013  0369  3185  25BA         	fcall	_I2C_DO_SEND_RESTART
  8014  036B  0008               	return
  8015  036C                     i1l2389:	
  8016                           ;i2c_master.c: 417: case I2C_CONTINUE:
  8017                           
  8018                           
  8019                           ;i2c_master.c: 418: I2C_MasterSetIrq();
  8020  036C  3185  25DB         	fcall	_I2C_MasterSetIrq
  8021                           
  8022                           ;i2c_master.c: 419: return I2C_TX;
  8023  036E  3003               	movlw	3
  8024  036F  0008               	return
  8025  0370                     i1l2395:	
  8026                           ;i2c_master.c: 421: case I2C_STOP:
  8027                           
  8028                           ;i2c_master.c: 420: default:
  8029                           
  8030                           
  8031                           ;i2c_master.c: 422: return I2C_DO_SEND_STOP();
  8032  0370  3185  25B6         	fcall	_I2C_DO_SEND_STOP
  8033                           
  8034                           ;i2c_master.c: 423: }
  8035  0372  0008               	return
  8036  0373                     i1l2401:	
  8037  0373  0020               	movlb	0	; select bank0
  8038  0374  082C               	movf	low ((_I2C_Status| 0+12)),w
  8039  0375  00FA               	movwf	??_I2C_DO_TX_EMPTY
  8040  0376  087A               	movf	??_I2C_DO_TX_EMPTY,w
  8041  0377  00F9               	movwf	I2C_CallbackReturnReset@funPtr
  8042  0378  0821               	movf	_I2C_Status+1,w
  8043  0379  008A               	movwf	10
  8044  037A  0820               	movf	_I2C_Status,w
  8045  037B  000A               	callw
  8046  037C  3183               	pagesel	$
  8047                           
  8048                           ; Switch size 1, requested type "space"
  8049                           ; Number of cases is 4, Range of values is 1 to 4
  8050                           ; switch strategies available:
  8051                           ; Name         Instructions Cycles
  8052                           ; simple_byte           13     7 (average)
  8053                           ; direct_byte           17     9 (fixed)
  8054                           ; jumptable            263     9 (fixed)
  8055                           ;	Chosen strategy is simple_byte
  8056  037D  3A01               	xorlw	1	; case 1
  8057  037E  1903               	skipnz
  8058  037F  2B70               	goto	i1l2395
  8059  0380  3A03               	xorlw	3	; case 2
  8060  0381  1903               	skipnz
  8061  0382  2B69               	goto	i1l2385
  8062  0383  3A01               	xorlw	1	; case 3
  8063  0384  1903               	skipnz
  8064  0385  2B69               	goto	i1l2385
  8065  0386  3A07               	xorlw	7	; case 4
  8066  0387  1903               	skipnz
  8067  0388  2B6C               	goto	i1l2389
  8068  0389  2B70               	goto	i1l2395
  8069  038A  0008               	return
  8070  038B                     __end_of_I2C_DO_TX_EMPTY:	
  8071                           
  8072                           	psect	text48
  8073  05DB                     __ptext48:	
  8074 ;; *************** function _I2C_MasterSetIrq *****************
  8075 ;; Defined at:
  8076 ;;		line 645 in file "mcc_generated_files/i2c_master.c"
  8077 ;; Parameters:    Size  Location     Type
  8078 ;;		None
  8079 ;; Auto vars:     Size  Location     Type
  8080 ;;		None
  8081 ;; Return value:  Size  Location     Type
  8082 ;;                  1    wreg      void 
  8083 ;; Registers used:
  8084 ;;		None
  8085 ;; Tracked objects:
  8086 ;;		On entry : 0/0
  8087 ;;		On exit  : 0/0
  8088 ;;		Unchanged: 0/0
  8089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8093 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8094 ;;Total ram usage:        0 bytes
  8095 ;; Hardware stack levels used:    1
  8096 ;; This function calls:
  8097 ;;		Nothing
  8098 ;; This function is called by:
  8099 ;;		_I2C_DO_TX_EMPTY
  8100 ;; This function uses a non-reentrant model
  8101 ;;
  8102                           
  8103                           
  8104                           ;psect for function _I2C_MasterSetIrq
  8105  05DB                     _I2C_MasterSetIrq:	
  8106                           
  8107                           ;i2c_master.c: 647: PIR1bits.SSP1IF = 1;
  8108                           
  8109                           ;incstack = 0
  8110                           ; Regs used in _I2C_MasterSetIrq: []
  8111  05DB  0020               	movlb	0	; select bank0
  8112  05DC  1590               	bsf	16,3	;volatile
  8113  05DD  0008               	return
  8114  05DE                     __end_of_I2C_MasterSetIrq:	
  8115                           
  8116                           	psect	text49
  8117  0588                     __ptext49:	
  8118 ;; *************** function _I2C_MasterIsNack *****************
  8119 ;; Defined at:
  8120 ;;		line 598 in file "mcc_generated_files/i2c_master.c"
  8121 ;; Parameters:    Size  Location     Type
  8122 ;;		None
  8123 ;; Auto vars:     Size  Location     Type
  8124 ;;		None
  8125 ;; Return value:  Size  Location     Type
  8126 ;;                  1    wreg      unsigned char 
  8127 ;; Registers used:
  8128 ;;		wreg, status,2, status,0
  8129 ;; Tracked objects:
  8130 ;;		On entry : 0/0
  8131 ;;		On exit  : 0/0
  8132 ;;		Unchanged: 0/0
  8133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8137 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8138 ;;Total ram usage:        0 bytes
  8139 ;; Hardware stack levels used:    1
  8140 ;; This function calls:
  8141 ;;		Nothing
  8142 ;; This function is called by:
  8143 ;;		_I2C_MasterFsm
  8144 ;;		_I2C_DO_TX
  8145 ;; This function uses a non-reentrant model
  8146 ;;
  8147                           
  8148                           
  8149                           ;psect for function _I2C_MasterIsNack
  8150  0588                     _I2C_MasterIsNack:	
  8151                           
  8152                           ;i2c_master.c: 600: return SSP1CON2bits.ACKSTAT;
  8153                           
  8154                           ;incstack = 0
  8155                           ; Regs used in _I2C_MasterIsNack: [wreg+status,2+status,0]
  8156  0588  0024               	movlb	4	; select bank4
  8157  0589  0E16               	swapf	22,w	;volatile
  8158  058A  0C89               	rrf	9,f
  8159  058B  0C89               	rrf	9,f
  8160  058C  3901               	andlw	1
  8161  058D  0008               	return
  8162  058E                     __end_of_I2C_MasterIsNack:	
  8163                           
  8164                           	psect	text50
  8165  059D                     __ptext50:	
  8166 ;; *************** function _I2C_MasterSendTxData *****************
  8167 ;; Defined at:
  8168 ;;		line 568 in file "mcc_generated_files/i2c_master.c"
  8169 ;; Parameters:    Size  Location     Type
  8170 ;;  data            1    wreg     unsigned char 
  8171 ;; Auto vars:     Size  Location     Type
  8172 ;;  data            1    0[COMMON] unsigned char 
  8173 ;; Return value:  Size  Location     Type
  8174 ;;                  1    wreg      void 
  8175 ;; Registers used:
  8176 ;;		wreg
  8177 ;; Tracked objects:
  8178 ;;		On entry : 0/0
  8179 ;;		On exit  : 0/0
  8180 ;;		Unchanged: 0/0
  8181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8183 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8185 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8186 ;;Total ram usage:        1 bytes
  8187 ;; Hardware stack levels used:    1
  8188 ;; This function calls:
  8189 ;;		Nothing
  8190 ;; This function is called by:
  8191 ;;		_I2C_DO_SEND_ADR_READ
  8192 ;;		_I2C_DO_SEND_ADR_WRITE
  8193 ;;		_I2C_DO_TX
  8194 ;; This function uses a non-reentrant model
  8195 ;;
  8196                           
  8197                           
  8198                           ;psect for function _I2C_MasterSendTxData
  8199  059D                     _I2C_MasterSendTxData:	
  8200                           
  8201                           ;incstack = 0
  8202                           ; Regs used in _I2C_MasterSendTxData: [wreg]
  8203                           ;I2C_MasterSendTxData@data stored from wreg
  8204  059D  00F0               	movwf	I2C_MasterSendTxData@data
  8205                           
  8206                           ;i2c_master.c: 570: SSP1BUF = data;
  8207  059E  0870               	movf	I2C_MasterSendTxData@data,w
  8208  059F  0024               	movlb	4	; select bank4
  8209  05A0  0091               	movwf	17	;volatile
  8210  05A1  0008               	return
  8211  05A2                     __end_of_I2C_MasterSendTxData:	
  8212                           
  8213                           	psect	text51
  8214  05C6                     __ptext51:	
  8215 ;; *************** function _I2C_MasterSendAck *****************
  8216 ;; Defined at:
  8217 ;;		line 603 in file "mcc_generated_files/i2c_master.c"
  8218 ;; Parameters:    Size  Location     Type
  8219 ;;		None
  8220 ;; Auto vars:     Size  Location     Type
  8221 ;;		None
  8222 ;; Return value:  Size  Location     Type
  8223 ;;                  1    wreg      void 
  8224 ;; Registers used:
  8225 ;;		None
  8226 ;; Tracked objects:
  8227 ;;		On entry : 0/0
  8228 ;;		On exit  : 0/0
  8229 ;;		Unchanged: 0/0
  8230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8234 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8235 ;;Total ram usage:        0 bytes
  8236 ;; Hardware stack levels used:    1
  8237 ;; This function calls:
  8238 ;;		Nothing
  8239 ;; This function is called by:
  8240 ;;		_I2C_DO_RX
  8241 ;;		_I2C_DO_RX_ACK
  8242 ;; This function uses a non-reentrant model
  8243 ;;
  8244                           
  8245                           
  8246                           ;psect for function _I2C_MasterSendAck
  8247  05C6                     _I2C_MasterSendAck:	
  8248                           
  8249                           ;i2c_master.c: 605: SSP1CON2bits.ACKDT = 0;
  8250                           
  8251                           ;incstack = 0
  8252                           ; Regs used in _I2C_MasterSendAck: []
  8253  05C6  0024               	movlb	4	; select bank4
  8254  05C7  1296               	bcf	22,5	;volatile
  8255                           
  8256                           ;i2c_master.c: 606: SSP1CON2bits.ACKEN = 1;
  8257  05C8  1616               	bsf	22,4	;volatile
  8258  05C9  0008               	return
  8259  05CA                     __end_of_I2C_MasterSendAck:	
  8260                           
  8261                           	psect	text52
  8262  05DE                     __ptext52:	
  8263 ;; *************** function _I2C_MasterGetRxData *****************
  8264 ;; Defined at:
  8265 ;;		line 563 in file "mcc_generated_files/i2c_master.c"
  8266 ;; Parameters:    Size  Location     Type
  8267 ;;		None
  8268 ;; Auto vars:     Size  Location     Type
  8269 ;;		None
  8270 ;; Return value:  Size  Location     Type
  8271 ;;                  1    wreg      unsigned char 
  8272 ;; Registers used:
  8273 ;;		wreg
  8274 ;; Tracked objects:
  8275 ;;		On entry : 0/0
  8276 ;;		On exit  : 0/0
  8277 ;;		Unchanged: 0/0
  8278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8282 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8283 ;;Total ram usage:        0 bytes
  8284 ;; Hardware stack levels used:    1
  8285 ;; This function calls:
  8286 ;;		Nothing
  8287 ;; This function is called by:
  8288 ;;		_I2C_DO_RX
  8289 ;; This function uses a non-reentrant model
  8290 ;;
  8291                           
  8292                           
  8293                           ;psect for function _I2C_MasterGetRxData
  8294  05DE                     _I2C_MasterGetRxData:	
  8295                           
  8296                           ;i2c_master.c: 565: return SSP1BUF;
  8297                           
  8298                           ;incstack = 0
  8299                           ; Regs used in _I2C_MasterGetRxData: [wreg]
  8300  05DE  0024               	movlb	4	; select bank4
  8301  05DF  0811               	movf	17,w	;volatile
  8302  05E0  0008               	return
  8303  05E1                     __end_of_I2C_MasterGetRxData:	
  8304                           
  8305                           	psect	text53
  8306  05CA                     __ptext53:	
  8307 ;; *************** function _I2C_MasterSendNack *****************
  8308 ;; Defined at:
  8309 ;;		line 609 in file "mcc_generated_files/i2c_master.c"
  8310 ;; Parameters:    Size  Location     Type
  8311 ;;		None
  8312 ;; Auto vars:     Size  Location     Type
  8313 ;;		None
  8314 ;; Return value:  Size  Location     Type
  8315 ;;                  1    wreg      void 
  8316 ;; Registers used:
  8317 ;;		None
  8318 ;; Tracked objects:
  8319 ;;		On entry : 0/0
  8320 ;;		On exit  : 0/0
  8321 ;;		Unchanged: 0/0
  8322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8327 ;;Total ram usage:        0 bytes
  8328 ;; Hardware stack levels used:    1
  8329 ;; This function calls:
  8330 ;;		Nothing
  8331 ;; This function is called by:
  8332 ;;		_I2C_DO_RX_NACK_STOP
  8333 ;;		_I2C_DO_RX_NACK_RESTART
  8334 ;; This function uses a non-reentrant model
  8335 ;;
  8336                           
  8337                           
  8338                           ;psect for function _I2C_MasterSendNack
  8339  05CA                     _I2C_MasterSendNack:	
  8340                           
  8341                           ;i2c_master.c: 611: SSP1CON2bits.ACKDT = 1;
  8342                           
  8343                           ;incstack = 0
  8344                           ; Regs used in _I2C_MasterSendNack: []
  8345  05CA  0024               	movlb	4	; select bank4
  8346  05CB  1696               	bsf	22,5	;volatile
  8347                           
  8348                           ;i2c_master.c: 612: SSP1CON2bits.ACKEN = 1;
  8349  05CC  1616               	bsf	22,4	;volatile
  8350  05CD  0008               	return
  8351  05CE                     __end_of_I2C_MasterSendNack:	
  8352                           
  8353                           	psect	text54
  8354  05E1                     __ptext54:	
  8355 ;; *************** function _I2C_MasterStartRx *****************
  8356 ;; Defined at:
  8357 ;;		line 583 in file "mcc_generated_files/i2c_master.c"
  8358 ;; Parameters:    Size  Location     Type
  8359 ;;		None
  8360 ;; Auto vars:     Size  Location     Type
  8361 ;;		None
  8362 ;; Return value:  Size  Location     Type
  8363 ;;                  1    wreg      void 
  8364 ;; Registers used:
  8365 ;;		None
  8366 ;; Tracked objects:
  8367 ;;		On entry : 0/0
  8368 ;;		On exit  : 0/0
  8369 ;;		Unchanged: 0/0
  8370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8375 ;;Total ram usage:        0 bytes
  8376 ;; Hardware stack levels used:    1
  8377 ;; This function calls:
  8378 ;;		Nothing
  8379 ;; This function is called by:
  8380 ;;		_I2C_DO_RCEN
  8381 ;; This function uses a non-reentrant model
  8382 ;;
  8383                           
  8384                           
  8385                           ;psect for function _I2C_MasterStartRx
  8386  05E1                     _I2C_MasterStartRx:	
  8387                           
  8388                           ;i2c_master.c: 585: SSP1CON2bits.RCEN = 1;
  8389                           
  8390                           ;incstack = 0
  8391                           ; Regs used in _I2C_MasterStartRx: []
  8392  05E1  0024               	movlb	4	; select bank4
  8393  05E2  1596               	bsf	22,3	;volatile
  8394  05E3  0008               	return
  8395  05E4                     __end_of_I2C_MasterStartRx:	
  8396                           
  8397                           	psect	text55
  8398  05F9                     __ptext55:	
  8399 ;; *************** function _I2C_CallbackReturnReset *****************
  8400 ;; Defined at:
  8401 ;;		line 525 in file "mcc_generated_files/i2c_master.c"
  8402 ;; Parameters:    Size  Location     Type
  8403 ;;  funPtr          1    9[COMMON] PTR void 
  8404 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8405 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8406 ;; Auto vars:     Size  Location     Type
  8407 ;;		None
  8408 ;; Return value:  Size  Location     Type
  8409 ;;                  1    wreg      enum E97
  8410 ;; Registers used:
  8411 ;;		wreg
  8412 ;; Tracked objects:
  8413 ;;		On entry : 0/0
  8414 ;;		On exit  : 0/0
  8415 ;;		Unchanged: 0/0
  8416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8417 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8420 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8421 ;;Total ram usage:        1 bytes
  8422 ;; Hardware stack levels used:    1
  8423 ;; This function calls:
  8424 ;;		Nothing
  8425 ;; This function is called by:
  8426 ;;		_I2C_Open
  8427 ;;		_I2C_DO_TX
  8428 ;;		_I2C_DO_RX
  8429 ;;		_I2C_DO_TX_EMPTY
  8430 ;;		_I2C_DO_ADDRESS_NACK
  8431 ;;		_I2C_DO_RX_EMPTY
  8432 ;; This function uses a non-reentrant model
  8433 ;;
  8434                           
  8435                           
  8436                           ;psect for function _I2C_CallbackReturnReset
  8437  05F9                     _I2C_CallbackReturnReset:	
  8438                           
  8439                           ;i2c_master.c: 527: return I2C_RESET_LINK;
  8440                           
  8441                           ;incstack = 0
  8442                           ; Regs used in _I2C_CallbackReturnReset: [wreg]
  8443  05F9  3005               	movlw	5
  8444  05FA  0008               	return
  8445  05FB                     __end_of_I2C_CallbackReturnReset:	
  8446                           
  8447                           	psect	text56
  8448  05FB                     __ptext56:	
  8449 ;; *************** function _I2C_CallbackReturnStop *****************
  8450 ;; Defined at:
  8451 ;;		line 520 in file "mcc_generated_files/i2c_master.c"
  8452 ;; Parameters:    Size  Location     Type
  8453 ;;  funPtr          1    9[COMMON] PTR void 
  8454 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8455 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8456 ;; Auto vars:     Size  Location     Type
  8457 ;;		None
  8458 ;; Return value:  Size  Location     Type
  8459 ;;                  1    wreg      enum E97
  8460 ;; Registers used:
  8461 ;;		wreg
  8462 ;; Tracked objects:
  8463 ;;		On entry : 0/0
  8464 ;;		On exit  : 0/0
  8465 ;;		Unchanged: 0/0
  8466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8467 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8470 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8471 ;;Total ram usage:        1 bytes
  8472 ;; Hardware stack levels used:    1
  8473 ;; This function calls:
  8474 ;;		Nothing
  8475 ;; This function is called by:
  8476 ;;		_I2C_Open
  8477 ;;		_I2C_SetCallback
  8478 ;;		_I2C_DO_TX
  8479 ;;		_I2C_DO_RX
  8480 ;;		_I2C_DO_TX_EMPTY
  8481 ;;		_I2C_DO_ADDRESS_NACK
  8482 ;;		_I2C_DO_RX_EMPTY
  8483 ;; This function uses a non-reentrant model
  8484 ;;
  8485                           
  8486                           
  8487                           ;psect for function _I2C_CallbackReturnStop
  8488  05FB                     _I2C_CallbackReturnStop:	
  8489                           
  8490                           ;i2c_master.c: 522: return I2C_STOP;
  8491                           
  8492                           ;incstack = 0
  8493                           ; Regs used in _I2C_CallbackReturnStop: [wreg]
  8494  05FB  3001               	movlw	1
  8495  05FC  0008               	return
  8496  05FD                     __end_of_I2C_CallbackReturnStop:	
  8497                           
  8498                           	psect	text57
  8499  0425                     __ptext57:	
  8500 ;; *************** function _rdBlkRegCompleteHandler *****************
  8501 ;; Defined at:
  8502 ;;		line 170 in file "mcc_generated_files/examples/i2c_master_example.c"
  8503 ;; Parameters:    Size  Location     Type
  8504 ;;  ptr             1    9[COMMON] PTR void 
  8505 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8506 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8507 ;; Auto vars:     Size  Location     Type
  8508 ;;		None
  8509 ;; Return value:  Size  Location     Type
  8510 ;;                  1    wreg      enum E97
  8511 ;; Registers used:
  8512 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8513 ;; Tracked objects:
  8514 ;;		On entry : 0/0
  8515 ;;		On exit  : 0/0
  8516 ;;		Unchanged: 0/0
  8517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8518 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8521 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8522 ;;Total ram usage:        1 bytes
  8523 ;; Hardware stack levels used:    1
  8524 ;; Hardware stack levels required when called:    2
  8525 ;; This function calls:
  8526 ;;		_I2C_SetBuffer
  8527 ;;		_I2C_SetDataCompleteCallback
  8528 ;; This function is called by:
  8529 ;;		_I2C_ReadDataBlock
  8530 ;;		_I2C_DO_TX
  8531 ;;		_I2C_DO_RX
  8532 ;;		_I2C_DO_TX_EMPTY
  8533 ;;		_I2C_DO_ADDRESS_NACK
  8534 ;;		_I2C_DO_RX_EMPTY
  8535 ;; This function uses a non-reentrant model
  8536 ;;
  8537                           
  8538                           
  8539                           ;psect for function _rdBlkRegCompleteHandler
  8540  0425                     _rdBlkRegCompleteHandler:	
  8541                           
  8542                           ;i2c_master_example.c: 172: I2C_SetBuffer(((i2c_buffer_t *)ptr)->data,((i2c_buffer_t*)pt
      +                          r)->len);
  8543                           
  8544                           ;incstack = 0
  8545                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  8546  0425  0879               	movf	rdBlkRegCompleteHandler@ptr,w
  8547  0426  0086               	movwf	6
  8548  0427  0187               	clrf	7
  8549  0428  3F40               	moviw [0]fsr1
  8550  0429  00F0               	movwf	I2C_SetBuffer@bufferSize
  8551  042A  3F41               	moviw [1]fsr1
  8552  042B  00F1               	movwf	I2C_SetBuffer@bufferSize+1
  8553  042C  0879               	movf	rdBlkRegCompleteHandler@ptr,w
  8554  042D  3E02               	addlw	2
  8555  042E  0086               	movwf	6
  8556  042F  0187               	clrf	7
  8557  0430  0801               	movf	1,w
  8558  0431  3184  24CF  3184   	fcall	_I2C_SetBuffer
  8559                           
  8560                           ;i2c_master_example.c: 173: I2C_SetDataCompleteCallback((0),(0));
  8561  0434  3000               	movlw	0
  8562  0435  00F5               	movwf	I2C_SetDataCompleteCallback@cb
  8563  0436  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
  8564  0437  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
  8565  0438  3184  24F5         	fcall	_I2C_SetDataCompleteCallback
  8566                           
  8567                           ;i2c_master_example.c: 174: return I2C_RESTART_READ;
  8568  043A  3002               	movlw	2
  8569  043B  0008               	return
  8570  043C                     __end_of_rdBlkRegCompleteHandler:	
  8571                           
  8572                           	psect	text58
  8573  048F                     __ptext58:	
  8574 ;; *************** function _wr1RegCompleteHandler *****************
  8575 ;; Defined at:
  8576 ;;		line 156 in file "mcc_generated_files/examples/i2c_master_example.c"
  8577 ;; Parameters:    Size  Location     Type
  8578 ;;  ptr             1    9[COMMON] PTR void 
  8579 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8580 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8581 ;; Auto vars:     Size  Location     Type
  8582 ;;		None
  8583 ;; Return value:  Size  Location     Type
  8584 ;;                  1    wreg      enum E97
  8585 ;; Registers used:
  8586 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8587 ;; Tracked objects:
  8588 ;;		On entry : 0/0
  8589 ;;		On exit  : 0/0
  8590 ;;		Unchanged: 0/0
  8591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8592 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8595 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8596 ;;Total ram usage:        1 bytes
  8597 ;; Hardware stack levels used:    1
  8598 ;; Hardware stack levels required when called:    2
  8599 ;; This function calls:
  8600 ;;		_I2C_SetBuffer
  8601 ;;		_I2C_SetDataCompleteCallback
  8602 ;; This function is called by:
  8603 ;;		_I2C_Write1ByteRegister
  8604 ;;		_I2C_DO_TX
  8605 ;;		_I2C_DO_RX
  8606 ;;		_I2C_DO_TX_EMPTY
  8607 ;;		_I2C_DO_ADDRESS_NACK
  8608 ;;		_I2C_DO_RX_EMPTY
  8609 ;; This function uses a non-reentrant model
  8610 ;;
  8611                           
  8612                           
  8613                           ;psect for function _wr1RegCompleteHandler
  8614  048F                     _wr1RegCompleteHandler:	
  8615                           
  8616                           ;i2c_master_example.c: 158: I2C_SetBuffer(ptr,1);
  8617                           
  8618                           ;incstack = 0
  8619                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8620  048F  3001               	movlw	1
  8621  0490  00F0               	movwf	I2C_SetBuffer@bufferSize
  8622  0491  3000               	movlw	0
  8623  0492  00F1               	movwf	I2C_SetBuffer@bufferSize+1
  8624  0493  0879               	movf	wr1RegCompleteHandler@ptr,w
  8625  0494  3184  24CF  3184   	fcall	_I2C_SetBuffer
  8626                           
  8627                           ;i2c_master_example.c: 159: I2C_SetDataCompleteCallback((0),(0));
  8628  0497  3000               	movlw	0
  8629  0498  00F5               	movwf	I2C_SetDataCompleteCallback@cb
  8630  0499  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
  8631  049A  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
  8632  049B  3184  24F5         	fcall	_I2C_SetDataCompleteCallback
  8633                           
  8634                           ;i2c_master_example.c: 160: return I2C_CONTINUE;
  8635  049D  3004               	movlw	4
  8636  049E  0008               	return
  8637  049F                     __end_of_wr1RegCompleteHandler:	
  8638                           
  8639                           	psect	text59
  8640  049F                     __ptext59:	
  8641 ;; *************** function _rd2RegCompleteHandler *****************
  8642 ;; Defined at:
  8643 ;;		line 149 in file "mcc_generated_files/examples/i2c_master_example.c"
  8644 ;; Parameters:    Size  Location     Type
  8645 ;;  ptr             1    9[COMMON] PTR void 
  8646 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8647 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8648 ;; Auto vars:     Size  Location     Type
  8649 ;;		None
  8650 ;; Return value:  Size  Location     Type
  8651 ;;                  1    wreg      enum E97
  8652 ;; Registers used:
  8653 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8654 ;; Tracked objects:
  8655 ;;		On entry : 0/0
  8656 ;;		On exit  : 0/0
  8657 ;;		Unchanged: 0/0
  8658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8659 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8662 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8663 ;;Total ram usage:        1 bytes
  8664 ;; Hardware stack levels used:    1
  8665 ;; Hardware stack levels required when called:    2
  8666 ;; This function calls:
  8667 ;;		_I2C_SetBuffer
  8668 ;;		_I2C_SetDataCompleteCallback
  8669 ;; This function is called by:
  8670 ;;		_I2C_Read2ByteRegister
  8671 ;;		_I2C_DO_TX
  8672 ;;		_I2C_DO_RX
  8673 ;;		_I2C_DO_TX_EMPTY
  8674 ;;		_I2C_DO_ADDRESS_NACK
  8675 ;;		_I2C_DO_RX_EMPTY
  8676 ;; This function uses a non-reentrant model
  8677 ;;
  8678                           
  8679                           
  8680                           ;psect for function _rd2RegCompleteHandler
  8681  049F                     _rd2RegCompleteHandler:	
  8682                           
  8683                           ;i2c_master_example.c: 151: I2C_SetBuffer(ptr,2);
  8684                           
  8685                           ;incstack = 0
  8686                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8687  049F  3002               	movlw	2
  8688  04A0  00F0               	movwf	I2C_SetBuffer@bufferSize
  8689  04A1  3000               	movlw	0
  8690  04A2  00F1               	movwf	I2C_SetBuffer@bufferSize+1
  8691  04A3  0879               	movf	rd2RegCompleteHandler@ptr,w
  8692  04A4  3184  24CF  3184   	fcall	_I2C_SetBuffer
  8693                           
  8694                           ;i2c_master_example.c: 152: I2C_SetDataCompleteCallback((0),(0));
  8695  04A7  3000               	movlw	0
  8696  04A8  00F5               	movwf	I2C_SetDataCompleteCallback@cb
  8697  04A9  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
  8698  04AA  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
  8699  04AB  3184  24F5         	fcall	_I2C_SetDataCompleteCallback
  8700                           
  8701                           ;i2c_master_example.c: 153: return I2C_RESTART_READ;
  8702  04AD  3002               	movlw	2
  8703  04AE  0008               	return
  8704  04AF                     __end_of_rd2RegCompleteHandler:	
  8705                           
  8706                           	psect	text60
  8707  04AF                     __ptext60:	
  8708 ;; *************** function _rd1RegCompleteHandler *****************
  8709 ;; Defined at:
  8710 ;;		line 142 in file "mcc_generated_files/examples/i2c_master_example.c"
  8711 ;; Parameters:    Size  Location     Type
  8712 ;;  ptr             1    9[COMMON] PTR void 
  8713 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8714 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8715 ;; Auto vars:     Size  Location     Type
  8716 ;;		None
  8717 ;; Return value:  Size  Location     Type
  8718 ;;                  1    wreg      enum E97
  8719 ;; Registers used:
  8720 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8721 ;; Tracked objects:
  8722 ;;		On entry : 0/0
  8723 ;;		On exit  : 0/0
  8724 ;;		Unchanged: 0/0
  8725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8726 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8729 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8730 ;;Total ram usage:        1 bytes
  8731 ;; Hardware stack levels used:    1
  8732 ;; Hardware stack levels required when called:    2
  8733 ;; This function calls:
  8734 ;;		_I2C_SetBuffer
  8735 ;;		_I2C_SetDataCompleteCallback
  8736 ;; This function is called by:
  8737 ;;		_I2C_Read1ByteRegister
  8738 ;;		_I2C_DO_TX
  8739 ;;		_I2C_DO_RX
  8740 ;;		_I2C_DO_TX_EMPTY
  8741 ;;		_I2C_DO_ADDRESS_NACK
  8742 ;;		_I2C_DO_RX_EMPTY
  8743 ;; This function uses a non-reentrant model
  8744 ;;
  8745                           
  8746                           
  8747                           ;psect for function _rd1RegCompleteHandler
  8748  04AF                     _rd1RegCompleteHandler:	
  8749                           
  8750                           ;i2c_master_example.c: 144: I2C_SetBuffer(ptr,1);
  8751                           
  8752                           ;incstack = 0
  8753                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8754  04AF  3001               	movlw	1
  8755  04B0  00F0               	movwf	I2C_SetBuffer@bufferSize
  8756  04B1  3000               	movlw	0
  8757  04B2  00F1               	movwf	I2C_SetBuffer@bufferSize+1
  8758  04B3  0879               	movf	rd1RegCompleteHandler@ptr,w
  8759  04B4  3184  24CF  3184   	fcall	_I2C_SetBuffer
  8760                           
  8761                           ;i2c_master_example.c: 145: I2C_SetDataCompleteCallback((0),(0));
  8762  04B7  3000               	movlw	0
  8763  04B8  00F5               	movwf	I2C_SetDataCompleteCallback@cb
  8764  04B9  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
  8765  04BA  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
  8766  04BB  3184  24F5         	fcall	_I2C_SetDataCompleteCallback
  8767                           
  8768                           ;i2c_master_example.c: 146: return I2C_RESTART_READ;
  8769  04BD  3002               	movlw	2
  8770  04BE  0008               	return
  8771  04BF                     __end_of_rd1RegCompleteHandler:	
  8772                           
  8773                           	psect	text61
  8774  04BF                     __ptext61:	
  8775 ;; *************** function _wr2RegCompleteHandler *****************
  8776 ;; Defined at:
  8777 ;;		line 163 in file "mcc_generated_files/examples/i2c_master_example.c"
  8778 ;; Parameters:    Size  Location     Type
  8779 ;;  ptr             1    9[COMMON] PTR void 
  8780 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8781 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8782 ;; Auto vars:     Size  Location     Type
  8783 ;;		None
  8784 ;; Return value:  Size  Location     Type
  8785 ;;                  1    wreg      enum E97
  8786 ;; Registers used:
  8787 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8788 ;; Tracked objects:
  8789 ;;		On entry : 0/0
  8790 ;;		On exit  : 0/0
  8791 ;;		Unchanged: 0/0
  8792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8793 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8796 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8797 ;;Total ram usage:        1 bytes
  8798 ;; Hardware stack levels used:    1
  8799 ;; Hardware stack levels required when called:    2
  8800 ;; This function calls:
  8801 ;;		_I2C_SetBuffer
  8802 ;;		_I2C_SetDataCompleteCallback
  8803 ;; This function is called by:
  8804 ;;		_I2C_Write2ByteRegister
  8805 ;;		_I2C_DO_TX
  8806 ;;		_I2C_DO_RX
  8807 ;;		_I2C_DO_TX_EMPTY
  8808 ;;		_I2C_DO_ADDRESS_NACK
  8809 ;;		_I2C_DO_RX_EMPTY
  8810 ;; This function uses a non-reentrant model
  8811 ;;
  8812                           
  8813                           
  8814                           ;psect for function _wr2RegCompleteHandler
  8815  04BF                     _wr2RegCompleteHandler:	
  8816                           
  8817                           ;i2c_master_example.c: 165: I2C_SetBuffer(ptr,2);
  8818                           
  8819                           ;incstack = 0
  8820                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8821  04BF  3002               	movlw	2
  8822  04C0  00F0               	movwf	I2C_SetBuffer@bufferSize
  8823  04C1  3000               	movlw	0
  8824  04C2  00F1               	movwf	I2C_SetBuffer@bufferSize+1
  8825  04C3  0879               	movf	wr2RegCompleteHandler@ptr,w
  8826  04C4  3184  24CF  3184   	fcall	_I2C_SetBuffer
  8827                           
  8828                           ;i2c_master_example.c: 166: I2C_SetDataCompleteCallback((0),(0));
  8829  04C7  3000               	movlw	0
  8830  04C8  00F5               	movwf	I2C_SetDataCompleteCallback@cb
  8831  04C9  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
  8832  04CA  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
  8833  04CB  3184  24F5         	fcall	_I2C_SetDataCompleteCallback
  8834                           
  8835                           ;i2c_master_example.c: 167: return I2C_CONTINUE;
  8836  04CD  3004               	movlw	4
  8837  04CE  0008               	return
  8838  04CF                     __end_of_wr2RegCompleteHandler:	
  8839                           
  8840                           	psect	text62
  8841  04F5                     __ptext62:	
  8842 ;; *************** function _I2C_SetDataCompleteCallback *****************
  8843 ;; Defined at:
  8844 ;;		line 273 in file "mcc_generated_files/i2c_master.c"
  8845 ;; Parameters:    Size  Location     Type
  8846 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
  8847 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), 
  8848 ;;		 -> Absolute function(1), rd1RegCompleteHandler(1), 
  8849 ;;  ptr             1    7[COMMON] PTR void 
  8850 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8851 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8852 ;; Auto vars:     Size  Location     Type
  8853 ;;		None
  8854 ;; Return value:  Size  Location     Type
  8855 ;;                  1    wreg      void 
  8856 ;; Registers used:
  8857 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8858 ;; Tracked objects:
  8859 ;;		On entry : 0/0
  8860 ;;		On exit  : 0/0
  8861 ;;		Unchanged: 0/0
  8862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8863 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8865 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8866 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8867 ;;Total ram usage:        4 bytes
  8868 ;; Hardware stack levels used:    1
  8869 ;; Hardware stack levels required when called:    1
  8870 ;; This function calls:
  8871 ;;		_I2C_SetCallback
  8872 ;; This function is called by:
  8873 ;;		_I2C_Write1ByteRegister
  8874 ;;		_rd1RegCompleteHandler
  8875 ;;		_rd2RegCompleteHandler
  8876 ;;		_wr1RegCompleteHandler
  8877 ;;		_wr2RegCompleteHandler
  8878 ;;		_rdBlkRegCompleteHandler
  8879 ;;		_I2C_Read1ByteRegister
  8880 ;;		_I2C_Read2ByteRegister
  8881 ;;		_I2C_Write2ByteRegister
  8882 ;;		_I2C_ReadDataBlock
  8883 ;; This function uses a non-reentrant model
  8884 ;;
  8885                           
  8886                           
  8887                           ;psect for function _I2C_SetDataCompleteCallback
  8888  04F5                     _I2C_SetDataCompleteCallback:	
  8889                           
  8890                           ;i2c_master.c: 275: I2C_SetCallback(I2C_DATA_COMPLETE, cb, ptr);
  8891                           
  8892                           ;incstack = 0
  8893                           ; Regs used in _I2C_SetDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  8894  04F5  0876               	movf	I2C_SetDataCompleteCallback@cb+1,w
  8895  04F6  00F1               	movwf	I2C_SetCallback@cb+1
  8896  04F7  0875               	movf	I2C_SetDataCompleteCallback@cb,w
  8897  04F8  00F0               	movwf	I2C_SetCallback@cb
  8898  04F9  0877               	movf	I2C_SetDataCompleteCallback@ptr,w
  8899  04FA  00F8               	movwf	??_I2C_SetDataCompleteCallback
  8900  04FB  0878               	movf	??_I2C_SetDataCompleteCallback,w
  8901  04FC  00F2               	movwf	I2C_SetCallback@ptr
  8902  04FD  3000               	movlw	0
  8903  04FE  3183  238B         	fcall	_I2C_SetCallback
  8904  0500  0008               	return
  8905  0501                     __end_of_I2C_SetDataCompleteCallback:	
  8906                           
  8907                           	psect	text63
  8908  038B                     __ptext63:	
  8909 ;; *************** function _I2C_SetCallback *****************
  8910 ;; Defined at:
  8911 ;;		line 298 in file "mcc_generated_files/i2c_master.c"
  8912 ;; Parameters:    Size  Location     Type
  8913 ;;  idx             1    wreg     enum E12121
  8914 ;;  cb              2    0[COMMON] PTR FTN(PTR void ,)enum 
  8915 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), 
  8916 ;;		 -> Absolute function(1), rd1RegCompleteHandler(1), 
  8917 ;;  ptr             1    2[COMMON] PTR void 
  8918 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8919 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8920 ;; Auto vars:     Size  Location     Type
  8921 ;;  idx             1    4[COMMON] enum E12121
  8922 ;; Return value:  Size  Location     Type
  8923 ;;                  1    wreg      void 
  8924 ;; Registers used:
  8925 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8926 ;; Tracked objects:
  8927 ;;		On entry : 0/0
  8928 ;;		On exit  : 0/0
  8929 ;;		Unchanged: 0/0
  8930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8931 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8932 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8933 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8934 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8935 ;;Total ram usage:        5 bytes
  8936 ;; Hardware stack levels used:    1
  8937 ;; This function calls:
  8938 ;;		Nothing
  8939 ;; This function is called by:
  8940 ;;		_I2C_SetDataCompleteCallback
  8941 ;;		_I2C_SetAddressNackCallback
  8942 ;;		_I2C_SetWriteCollisionCallback
  8943 ;;		_I2C_SetDataNackCallback
  8944 ;;		_I2C_SetTimeoutCallback
  8945 ;; This function uses a non-reentrant model
  8946 ;;
  8947                           
  8948                           
  8949                           ;psect for function _I2C_SetCallback
  8950  038B                     _I2C_SetCallback:	
  8951                           
  8952                           ;incstack = 0
  8953                           ; Regs used in _I2C_SetCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
  8954                           ;I2C_SetCallback@idx stored from wreg
  8955  038B  00F4               	movwf	I2C_SetCallback@idx
  8956                           
  8957                           ;i2c_master.c: 300: if(cb)
  8958  038C  0870               	movf	I2C_SetCallback@cb,w
  8959  038D  0471               	iorwf	I2C_SetCallback@cb+1,w
  8960  038E  1903               	btfsc	3,2
  8961  038F  2BA1               	goto	i1l2179
  8962                           
  8963                           ;i2c_master.c: 301: {
  8964                           ;i2c_master.c: 302: I2C_Status.callbackTable[idx] = cb;
  8965  0390  3574               	lslf	I2C_SetCallback@idx,w
  8966  0391  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
  8967  0392  0086               	movwf	6
  8968  0393  0187               	clrf	7
  8969  0394  0870               	movf	I2C_SetCallback@cb,w
  8970  0395  3FC0               	movwi [0]fsr1
  8971  0396  0871               	movf	I2C_SetCallback@cb+1,w
  8972  0397  3FC1               	movwi [1]fsr1
  8973                           
  8974                           ;i2c_master.c: 303: I2C_Status.callbackPayload[idx] = ptr;
  8975  0398  0872               	movf	I2C_SetCallback@ptr,w
  8976  0399  00F3               	movwf	??_I2C_SetCallback
  8977  039A  0874               	movf	I2C_SetCallback@idx,w
  8978  039B  3E2C               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
  8979  039C  0086               	movwf	6
  8980  039D  0187               	clrf	7
  8981  039E  0873               	movf	??_I2C_SetCallback,w
  8982  039F  0081               	movwf	1
  8983                           
  8984                           ;i2c_master.c: 304: }
  8985  03A0  0008               	return
  8986  03A1                     i1l2179:	
  8987                           
  8988                           ;i2c_master.c: 305: else
  8989                           ;i2c_master.c: 306: {
  8990                           ;i2c_master.c: 307: I2C_Status.callbackTable[idx] = I2C_CallbackReturnStop;
  8991  03A1  3574               	lslf	I2C_SetCallback@idx,w
  8992  03A2  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
  8993  03A3  0086               	movwf	6
  8994  03A4  0187               	clrf	7
  8995  03A5  30FB               	movlw	low _I2C_CallbackReturnStop
  8996  03A6  3FC0               	movwi [0]fsr1
  8997  03A7  3005               	movlw	high _I2C_CallbackReturnStop
  8998  03A8  3FC1               	movwi [1]fsr1
  8999                           
  9000                           ;i2c_master.c: 308: I2C_Status.callbackPayload[idx] = (0);
  9001  03A9  0874               	movf	I2C_SetCallback@idx,w
  9002  03AA  3E2C               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
  9003  03AB  0086               	movwf	6
  9004  03AC  0187               	clrf	7
  9005  03AD  0181               	clrf	1
  9006  03AE  0008               	return
  9007  03AF                     __end_of_I2C_SetCallback:	
  9008                           
  9009                           	psect	text64
  9010  04CF                     __ptext64:	
  9011 ;; *************** function _I2C_SetBuffer *****************
  9012 ;; Defined at:
  9013 ;;		line 263 in file "mcc_generated_files/i2c_master.c"
  9014 ;; Parameters:    Size  Location     Type
  9015 ;;  buffer          1    wreg     PTR void 
  9016 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
  9017 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
  9018 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
  9019 ;;  bufferSize      2    0[COMMON] unsigned int 
  9020 ;; Auto vars:     Size  Location     Type
  9021 ;;  buffer          1    3[COMMON] PTR void 
  9022 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
  9023 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
  9024 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
  9025 ;; Return value:  Size  Location     Type
  9026 ;;                  1    wreg      void 
  9027 ;; Registers used:
  9028 ;;		wreg
  9029 ;; Tracked objects:
  9030 ;;		On entry : 0/0
  9031 ;;		On exit  : 0/0
  9032 ;;		Unchanged: 0/0
  9033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9034 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9035 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9036 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9037 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9038 ;;Total ram usage:        4 bytes
  9039 ;; Hardware stack levels used:    1
  9040 ;; This function calls:
  9041 ;;		Nothing
  9042 ;; This function is called by:
  9043 ;;		_I2C_Write1ByteRegister
  9044 ;;		_rd1RegCompleteHandler
  9045 ;;		_rd2RegCompleteHandler
  9046 ;;		_wr1RegCompleteHandler
  9047 ;;		_wr2RegCompleteHandler
  9048 ;;		_rdBlkRegCompleteHandler
  9049 ;;		_I2C_Read1ByteRegister
  9050 ;;		_I2C_Read2ByteRegister
  9051 ;;		_I2C_Write2ByteRegister
  9052 ;;		_I2C_WriteNBytes
  9053 ;;		_I2C_ReadNBytes
  9054 ;;		_I2C_ReadDataBlock
  9055 ;; This function uses a non-reentrant model
  9056 ;;
  9057                           
  9058                           
  9059                           ;psect for function _I2C_SetBuffer
  9060  04CF                     _I2C_SetBuffer:	
  9061                           
  9062                           ;incstack = 0
  9063                           ; Regs used in _I2C_SetBuffer: [wreg]
  9064                           ;I2C_SetBuffer@buffer stored from wreg
  9065  04CF  00F3               	movwf	I2C_SetBuffer@buffer
  9066                           
  9067                           ;i2c_master.c: 265: if(I2C_Status.bufferFree)
  9068  04D0  0020               	movlb	0	; select bank0
  9069  04D1  1DBC               	btfss	_I2C_Status+28,3
  9070  04D2  0008               	return
  9071                           
  9072                           ;i2c_master.c: 266: {
  9073                           ;i2c_master.c: 267: I2C_Status.data_ptr = buffer;
  9074  04D3  0873               	movf	I2C_SetBuffer@buffer,w
  9075  04D4  00F2               	movwf	??_I2C_SetBuffer
  9076  04D5  0872               	movf	??_I2C_SetBuffer,w
  9077  04D6  00B7               	movwf	low ((_I2C_Status| 0+23))
  9078                           
  9079                           ;i2c_master.c: 268: I2C_Status.data_length = bufferSize;
  9080  04D7  0871               	movf	I2C_SetBuffer@bufferSize+1,w
  9081  04D8  00B9               	movwf	_I2C_Status+25
  9082  04D9  0870               	movf	I2C_SetBuffer@bufferSize,w
  9083  04DA  00B8               	movwf	_I2C_Status+24
  9084                           
  9085                           ;i2c_master.c: 269: I2C_Status.bufferFree = 0;
  9086  04DB  11BC               	bcf	_I2C_Status+28,3
  9087  04DC  0008               	return
  9088  04DD                     __end_of_I2C_SetBuffer:	
  9089                           
  9090                           	psect	text65
  9091  05E4                     __ptext65:	
  9092 ;; *************** function _I2C_MasterStop *****************
  9093 ;; Defined at:
  9094 ;;		line 593 in file "mcc_generated_files/i2c_master.c"
  9095 ;; Parameters:    Size  Location     Type
  9096 ;;		None
  9097 ;; Auto vars:     Size  Location     Type
  9098 ;;		None
  9099 ;; Return value:  Size  Location     Type
  9100 ;;                  1    wreg      void 
  9101 ;; Registers used:
  9102 ;;		None
  9103 ;; Tracked objects:
  9104 ;;		On entry : 0/0
  9105 ;;		On exit  : 0/0
  9106 ;;		Unchanged: 0/0
  9107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9112 ;;Total ram usage:        0 bytes
  9113 ;; Hardware stack levels used:    1
  9114 ;; This function calls:
  9115 ;;		Nothing
  9116 ;; This function is called by:
  9117 ;;		_I2C_DO_SEND_STOP
  9118 ;; This function uses a non-reentrant model
  9119 ;;
  9120                           
  9121                           
  9122                           ;psect for function _I2C_MasterStop
  9123  05E4                     _I2C_MasterStop:	
  9124                           
  9125                           ;i2c_master.c: 595: SSP1CON2bits.PEN = 1;
  9126                           
  9127                           ;incstack = 0
  9128                           ; Regs used in _I2C_MasterStop: []
  9129  05E4  0024               	movlb	4	; select bank4
  9130  05E5  1516               	bsf	22,2	;volatile
  9131  05E6  0008               	return
  9132  05E7                     __end_of_I2C_MasterStop:	
  9133                           
  9134                           	psect	text66
  9135  05E7                     __ptext66:	
  9136 ;; *************** function _I2C_MasterEnableRestart *****************
  9137 ;; Defined at:
  9138 ;;		line 573 in file "mcc_generated_files/i2c_master.c"
  9139 ;; Parameters:    Size  Location     Type
  9140 ;;		None
  9141 ;; Auto vars:     Size  Location     Type
  9142 ;;		None
  9143 ;; Return value:  Size  Location     Type
  9144 ;;                  1    wreg      void 
  9145 ;; Registers used:
  9146 ;;		None
  9147 ;; Tracked objects:
  9148 ;;		On entry : 0/0
  9149 ;;		On exit  : 0/0
  9150 ;;		Unchanged: 0/0
  9151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9155 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9156 ;;Total ram usage:        0 bytes
  9157 ;; Hardware stack levels used:    1
  9158 ;; This function calls:
  9159 ;;		Nothing
  9160 ;; This function is called by:
  9161 ;;		_I2C_DO_SEND_RESTART_READ
  9162 ;;		_I2C_DO_SEND_RESTART_WRITE
  9163 ;;		_I2C_DO_SEND_RESTART
  9164 ;;		_I2C_DO_RX_EMPTY
  9165 ;; This function uses a non-reentrant model
  9166 ;;
  9167                           
  9168                           
  9169                           ;psect for function _I2C_MasterEnableRestart
  9170  05E7                     _I2C_MasterEnableRestart:	
  9171                           
  9172                           ;i2c_master.c: 575: SSP1CON2bits.RSEN = 1;
  9173                           
  9174                           ;incstack = 0
  9175                           ; Regs used in _I2C_MasterEnableRestart: []
  9176  05E7  0024               	movlb	4	; select bank4
  9177  05E8  1496               	bsf	22,1	;volatile
  9178  05E9  0008               	return
  9179  05EA                     __end_of_I2C_MasterEnableRestart:	
  9180                           
  9181                           	psect	text67
  9182  05EA                     __ptext67:	
  9183 ;; *************** function _I2C_MasterStart *****************
  9184 ;; Defined at:
  9185 ;;		line 588 in file "mcc_generated_files/i2c_master.c"
  9186 ;; Parameters:    Size  Location     Type
  9187 ;;		None
  9188 ;; Auto vars:     Size  Location     Type
  9189 ;;		None
  9190 ;; Return value:  Size  Location     Type
  9191 ;;                  1    wreg      void 
  9192 ;; Registers used:
  9193 ;;		None
  9194 ;; Tracked objects:
  9195 ;;		On entry : 0/0
  9196 ;;		On exit  : 0/0
  9197 ;;		Unchanged: 0/0
  9198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9203 ;;Total ram usage:        0 bytes
  9204 ;; Hardware stack levels used:    1
  9205 ;; This function calls:
  9206 ;;		Nothing
  9207 ;; This function is called by:
  9208 ;;		_I2C_MasterOperation
  9209 ;; This function uses a non-reentrant model
  9210 ;;
  9211                           
  9212                           
  9213                           ;psect for function _I2C_MasterStart
  9214  05EA                     _I2C_MasterStart:	
  9215                           
  9216                           ;i2c_master.c: 590: SSP1CON2bits.SEN = 1;
  9217                           
  9218                           ;incstack = 0
  9219                           ; Regs used in _I2C_MasterStart: []
  9220  05EA  0024               	movlb	4	; select bank4
  9221  05EB  1416               	bsf	22,0	;volatile
  9222  05EC  0008               	return
  9223  05ED                     __end_of_I2C_MasterStart:	
  9224                           
  9225                           	psect	text68
  9226  040C                     __ptext68:	
  9227 ;; *************** function _I2C_Close *****************
  9228 ;; Defined at:
  9229 ;;		line 209 in file "mcc_generated_files/i2c_master.c"
  9230 ;; Parameters:    Size  Location     Type
  9231 ;;		None
  9232 ;; Auto vars:     Size  Location     Type
  9233 ;;  returnValue     1    1[COMMON] enum E92
  9234 ;; Return value:  Size  Location     Type
  9235 ;;                  1    wreg      enum E92
  9236 ;; Registers used:
  9237 ;;		wreg, status,2, status,0, pclath, cstack
  9238 ;; Tracked objects:
  9239 ;;		On entry : 0/0
  9240 ;;		On exit  : 0/0
  9241 ;;		Unchanged: 0/0
  9242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9244 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9245 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9246 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9247 ;;Total ram usage:        2 bytes
  9248 ;; Hardware stack levels used:    1
  9249 ;; Hardware stack levels required when called:    1
  9250 ;; This function calls:
  9251 ;;		_I2C_MasterClearIrq
  9252 ;;		_I2C_MasterClose
  9253 ;;		_I2C_MasterDisableIrq
  9254 ;; This function is called by:
  9255 ;;		_I2C_Write1ByteRegister
  9256 ;;		_I2C_Read1ByteRegister
  9257 ;;		_I2C_Read2ByteRegister
  9258 ;;		_I2C_Write2ByteRegister
  9259 ;;		_I2C_WriteNBytes
  9260 ;;		_I2C_ReadNBytes
  9261 ;;		_I2C_ReadDataBlock
  9262 ;; This function uses a non-reentrant model
  9263 ;;
  9264                           
  9265                           
  9266                           ;psect for function _I2C_Close
  9267  040C                     _I2C_Close:	
  9268                           
  9269                           ;i2c_master.c: 211: i2c_error_t returnValue = I2C_BUSY;
  9270                           
  9271                           ;incstack = 0
  9272                           ; Regs used in _I2C_Close: [wreg+status,2+status,0+pclath+cstack]
  9273  040C  01F1               	clrf	I2C_Close@returnValue
  9274  040D  0AF1               	incf	I2C_Close@returnValue,f
  9275                           
  9276                           ;i2c_master.c: 212: if(!I2C_Status.busy)
  9277  040E  0020               	movlb	0	; select bank0
  9278  040F  18BC               	btfsc	_I2C_Status+28,1
  9279  0410  2C23               	goto	i1l2543
  9280                           
  9281                           ;i2c_master.c: 213: {
  9282                           ;i2c_master.c: 214: I2C_Status.inUse = 0;
  9283  0411  113C               	bcf	_I2C_Status+28,2
  9284                           
  9285                           ;i2c_master.c: 215: I2C_Status.address = 0xff;
  9286  0412  30FF               	movlw	255
  9287  0413  00F0               	movwf	??_I2C_Close
  9288  0414  0870               	movf	??_I2C_Close,w
  9289  0415  00B6               	movwf	_I2C_Status+22
  9290                           
  9291                           ;i2c_master.c: 216: I2C_MasterClearIrq();
  9292  0416  3185  25F3  3184   	fcall	_I2C_MasterClearIrq
  9293                           
  9294                           ;i2c_master.c: 217: I2C_MasterDisableIrq();
  9295  0419  3185  25ED  3184   	fcall	_I2C_MasterDisableIrq
  9296                           
  9297                           ;i2c_master.c: 218: I2C_MasterClose();
  9298  041C  3185  25F0         	fcall	_I2C_MasterClose
  9299                           
  9300                           ;i2c_master.c: 219: returnValue = I2C_Status.error;
  9301  041E  0020               	movlb	0	; select bank0
  9302  041F  083B               	movf	_I2C_Status+27,w
  9303  0420  00F0               	movwf	??_I2C_Close
  9304  0421  0870               	movf	??_I2C_Close,w
  9305  0422  00F1               	movwf	I2C_Close@returnValue
  9306  0423                     i1l2543:	
  9307                           
  9308                           ;i2c_master.c: 220: }
  9309                           ;i2c_master.c: 221: return returnValue;
  9310  0423  0871               	movf	I2C_Close@returnValue,w
  9311  0424  0008               	return
  9312  0425                     __end_of_I2C_Close:	
  9313                           
  9314                           	psect	text69
  9315  05ED                     __ptext69:	
  9316 ;; *************** function _I2C_MasterDisableIrq *****************
  9317 ;; Defined at:
  9318 ;;		line 635 in file "mcc_generated_files/i2c_master.c"
  9319 ;; Parameters:    Size  Location     Type
  9320 ;;		None
  9321 ;; Auto vars:     Size  Location     Type
  9322 ;;		None
  9323 ;; Return value:  Size  Location     Type
  9324 ;;                  1    wreg      void 
  9325 ;; Registers used:
  9326 ;;		None
  9327 ;; Tracked objects:
  9328 ;;		On entry : 0/0
  9329 ;;		On exit  : 0/0
  9330 ;;		Unchanged: 0/0
  9331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9335 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9336 ;;Total ram usage:        0 bytes
  9337 ;; Hardware stack levels used:    1
  9338 ;; This function calls:
  9339 ;;		Nothing
  9340 ;; This function is called by:
  9341 ;;		_I2C_Close
  9342 ;;		_I2C_SetTimeOut
  9343 ;; This function uses a non-reentrant model
  9344 ;;
  9345                           
  9346                           
  9347                           ;psect for function _I2C_MasterDisableIrq
  9348  05ED                     _I2C_MasterDisableIrq:	
  9349                           
  9350                           ;i2c_master.c: 637: PIE1bits.SSP1IE = 0;
  9351                           
  9352                           ;incstack = 0
  9353                           ; Regs used in _I2C_MasterDisableIrq: []
  9354  05ED  0021               	movlb	1	; select bank1
  9355  05EE  1190               	bcf	16,3	;volatile
  9356  05EF  0008               	return
  9357  05F0                     __end_of_I2C_MasterDisableIrq:	
  9358                           
  9359                           	psect	text70
  9360  05F0                     __ptext70:	
  9361 ;; *************** function _I2C_MasterClose *****************
  9362 ;; Defined at:
  9363 ;;		line 557 in file "mcc_generated_files/i2c_master.c"
  9364 ;; Parameters:    Size  Location     Type
  9365 ;;		None
  9366 ;; Auto vars:     Size  Location     Type
  9367 ;;		None
  9368 ;; Return value:  Size  Location     Type
  9369 ;;                  1    wreg      void 
  9370 ;; Registers used:
  9371 ;;		None
  9372 ;; Tracked objects:
  9373 ;;		On entry : 0/0
  9374 ;;		On exit  : 0/0
  9375 ;;		Unchanged: 0/0
  9376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9380 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9381 ;;Total ram usage:        0 bytes
  9382 ;; Hardware stack levels used:    1
  9383 ;; This function calls:
  9384 ;;		Nothing
  9385 ;; This function is called by:
  9386 ;;		_I2C_Close
  9387 ;; This function uses a non-reentrant model
  9388 ;;
  9389                           
  9390                           
  9391                           ;psect for function _I2C_MasterClose
  9392  05F0                     _I2C_MasterClose:	
  9393                           
  9394                           ;i2c_master.c: 560: SSP1CON1bits.SSPEN = 0;
  9395                           
  9396                           ;incstack = 0
  9397                           ; Regs used in _I2C_MasterClose: []
  9398  05F0  0024               	movlb	4	; select bank4
  9399  05F1  1295               	bcf	21,5	;volatile
  9400  05F2  0008               	return
  9401  05F3                     __end_of_I2C_MasterClose:	
  9402                           
  9403                           	psect	text71
  9404  05F3                     __ptext71:	
  9405 ;; *************** function _I2C_MasterClearIrq *****************
  9406 ;; Defined at:
  9407 ;;		line 640 in file "mcc_generated_files/i2c_master.c"
  9408 ;; Parameters:    Size  Location     Type
  9409 ;;		None
  9410 ;; Auto vars:     Size  Location     Type
  9411 ;;		None
  9412 ;; Return value:  Size  Location     Type
  9413 ;;                  1    wreg      void 
  9414 ;; Registers used:
  9415 ;;		None
  9416 ;; Tracked objects:
  9417 ;;		On entry : 0/0
  9418 ;;		On exit  : 0/0
  9419 ;;		Unchanged: 0/0
  9420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9424 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9425 ;;Total ram usage:        0 bytes
  9426 ;; Hardware stack levels used:    1
  9427 ;; This function calls:
  9428 ;;		Nothing
  9429 ;; This function is called by:
  9430 ;;		_I2C_Open
  9431 ;;		_I2C_Close
  9432 ;;		_I2C_MasterFsm
  9433 ;; This function uses a non-reentrant model
  9434 ;;
  9435                           
  9436                           
  9437                           ;psect for function _I2C_MasterClearIrq
  9438  05F3                     _I2C_MasterClearIrq:	
  9439                           
  9440                           ;i2c_master.c: 642: PIR1bits.SSP1IF = 0;
  9441                           
  9442                           ;incstack = 0
  9443                           ; Regs used in _I2C_MasterClearIrq: []
  9444  05F3  0020               	movlb	0	; select bank0
  9445  05F4  1190               	bcf	16,3	;volatile
  9446  05F5  0008               	return
  9447  05F6                     __end_of_I2C_MasterClearIrq:	
  9448                           
  9449                           	psect	text72
  9450  02A9                     __ptext72:	
  9451 ;; *************** function _EUSART_Receive_ISR *****************
  9452 ;; Defined at:
  9453 ;;		line 173 in file "mcc_generated_files/eusart.c"
  9454 ;; Parameters:    Size  Location     Type
  9455 ;;		None
  9456 ;; Auto vars:     Size  Location     Type
  9457 ;;		None
  9458 ;; Return value:  Size  Location     Type
  9459 ;;                  1    wreg      void 
  9460 ;; Registers used:
  9461 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9462 ;; Tracked objects:
  9463 ;;		On entry : 0/0
  9464 ;;		On exit  : 0/0
  9465 ;;		Unchanged: 0/0
  9466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9470 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9471 ;;Total ram usage:        0 bytes
  9472 ;; Hardware stack levels used:    1
  9473 ;; Hardware stack levels required when called:    2
  9474 ;; This function calls:
  9475 ;;		Absolute function
  9476 ;;		_EUSART_DefaultErrorHandler
  9477 ;;		_EUSART_DefaultFramingErrorHandler
  9478 ;;		_EUSART_DefaultOverrunErrorHandler
  9479 ;;		_EUSART_RxDataHandler
  9480 ;; This function is called by:
  9481 ;;		_EUSART_Initialize
  9482 ;;		_INTERRUPT_InterruptManager
  9483 ;; This function uses a non-reentrant model
  9484 ;;
  9485                           
  9486                           
  9487                           ;psect for function _EUSART_Receive_ISR
  9488  02A9                     _EUSART_Receive_ISR:	
  9489                           
  9490                           ;eusart.c: 176: eusartRxStatusBuffer[eusartRxHead].status = 0;
  9491                           
  9492                           ;incstack = 0
  9493                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9494  02A9  0020               	movlb	0	; select bank0
  9495  02AA  0857               	movf	_eusartRxHead,w	;volatile
  9496  02AB  3E3D               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  9497  02AC  0086               	movwf	6
  9498  02AD  0187               	clrf	7
  9499  02AE  0181               	clrf	1
  9500                           
  9501                           ;eusart.c: 178: if(RC1STAbits.FERR){
  9502  02AF  0023               	movlb	3	; select bank3
  9503  02B0  1D1D               	btfss	29,2	;volatile
  9504  02B1  2ABD               	goto	i1l2755
  9505                           
  9506                           ;eusart.c: 179: eusartRxStatusBuffer[eusartRxHead].ferr = 1;
  9507  02B2  0020               	movlb	0	; select bank0
  9508  02B3  0857               	movf	_eusartRxHead,w	;volatile
  9509  02B4  3E3D               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  9510  02B5  0086               	movwf	6
  9511  02B6  0187               	clrf	7
  9512  02B7  1481               	bsf	1,1
  9513                           
  9514                           ;eusart.c: 180: EUSART_FramingErrorHandler();
  9515  02B8  0866               	movf	_EUSART_FramingErrorHandler+1,w
  9516  02B9  008A               	movwf	10
  9517  02BA  0865               	movf	_EUSART_FramingErrorHandler,w
  9518  02BB  000A               	callw
  9519  02BC  3182               	pagesel	$
  9520  02BD                     i1l2755:	
  9521                           
  9522                           ;eusart.c: 181: }
  9523                           ;eusart.c: 183: if(RC1STAbits.OERR){
  9524  02BD  0023               	movlb	3	; select bank3
  9525  02BE  1C9D               	btfss	29,1	;volatile
  9526  02BF  2ACC               	goto	i1l2761
  9527                           
  9528                           ;eusart.c: 184: eusartRxStatusBuffer[eusartRxHead].oerr = 1;
  9529  02C0  0020               	movlb	0	; select bank0
  9530  02C1  0857               	movf	_eusartRxHead,w	;volatile
  9531  02C2  3E3D               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  9532  02C3  0086               	movwf	6
  9533  02C4  0187               	clrf	7
  9534  02C5  1501               	bsf	1,2
  9535                           
  9536                           ;eusart.c: 185: EUSART_OverrunErrorHandler();
  9537  02C6  0021               	movlb	1	; select bank1
  9538  02C7  0823               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
  9539  02C8  008A               	movwf	10
  9540  02C9  0822               	movf	_EUSART_OverrunErrorHandler^(0+128),w
  9541  02CA  000A               	callw
  9542  02CB  3182               	pagesel	$
  9543  02CC                     i1l2761:	
  9544                           
  9545                           ;eusart.c: 186: }
  9546                           ;eusart.c: 188: if(eusartRxStatusBuffer[eusartRxHead].status){
  9547  02CC  0020               	movlb	0	; select bank0
  9548  02CD  0857               	movf	_eusartRxHead,w	;volatile
  9549  02CE  3E3D               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  9550  02CF  0086               	movwf	6
  9551  02D0  0187               	clrf	7
  9552  02D1  0801               	movf	1,w
  9553  02D2  1903               	btfsc	3,2
  9554  02D3  2ADB               	goto	i1l2765
  9555                           
  9556                           ;eusart.c: 189: EUSART_ErrorHandler();
  9557  02D4  0021               	movlb	1	; select bank1
  9558  02D5  0821               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
  9559  02D6  008A               	movwf	10
  9560  02D7  0820               	movf	_EUSART_ErrorHandler^(0+128),w
  9561  02D8  000A               	callw
  9562  02D9  3182               	pagesel	$
  9563                           
  9564                           ;eusart.c: 190: } else {
  9565  02DA  0008               	return
  9566  02DB                     i1l2765:	
  9567                           
  9568                           ;eusart.c: 191: EUSART_RxDataHandler();
  9569  02DB  3184  243C         	fcall	_EUSART_RxDataHandler
  9570  02DD  0008               	return
  9571  02DE                     __end_of_EUSART_Receive_ISR:	
  9572                           
  9573                           	psect	text73
  9574  003D                     __ptext73:	
  9575 ;; *************** function _MyUART_ISR *****************
  9576 ;; Defined at:
  9577 ;;		line 99 in file "main.c"
  9578 ;; Parameters:    Size  Location     Type
  9579 ;;		None
  9580 ;; Auto vars:     Size  Location     Type
  9581 ;;  c               1    5[COMMON] unsigned char 
  9582 ;; Return value:  Size  Location     Type
  9583 ;;                  1    wreg      void 
  9584 ;; Registers used:
  9585 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9586 ;; Tracked objects:
  9587 ;;		On entry : 0/0
  9588 ;;		On exit  : 0/0
  9589 ;;		Unchanged: 0/0
  9590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9592 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9593 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9594 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9595 ;;Total ram usage:        5 bytes
  9596 ;; Hardware stack levels used:    1
  9597 ;; Hardware stack levels required when called:    1
  9598 ;; This function calls:
  9599 ;;		_EUSART_Write
  9600 ;; This function is called by:
  9601 ;;		_main
  9602 ;;		_INTERRUPT_InterruptManager
  9603 ;; This function uses a non-reentrant model
  9604 ;;
  9605                           
  9606                           
  9607                           ;psect for function _MyUART_ISR
  9608  003D                     _MyUART_ISR:	
  9609                           
  9610                           ;main.c: 100: unsigned char c = RC1REG;
  9611                           
  9612                           ;incstack = 0
  9613                           ; Regs used in _MyUART_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9614  003D  0023               	movlb	3	; select bank3
  9615  003E  0819               	movf	25,w	;volatile
  9616  003F  00F1               	movwf	??_MyUART_ISR
  9617  0040  0871               	movf	??_MyUART_ISR,w
  9618  0041  00F5               	movwf	MyUART_ISR@c
  9619                           
  9620                           ;main.c: 101: if(c) {
  9621  0042  0875               	movf	MyUART_ISR@c,w
  9622  0043  1903               	btfsc	3,2
  9623  0044  0008               	return
  9624  0045  28E2               	goto	i1l2827
  9625  0046                     i1l2777:	
  9626                           ;main.c: 103: case S_Idle:
  9627                           
  9628                           ;main.c: 102: switch(PosUart) {
  9629                           
  9630                           
  9631                           ;main.c: 104: if(c == 'V' || c == 'A' || c == 'P' || c == 'L') {
  9632  0046  3056               	movlw	86
  9633  0047  0675               	xorwf	MyUART_ISR@c,w
  9634  0048  1903               	btfsc	3,2
  9635  0049  2856               	goto	i1l2785
  9636  004A  3041               	movlw	65
  9637  004B  0675               	xorwf	MyUART_ISR@c,w
  9638  004C  1903               	btfsc	3,2
  9639  004D  2856               	goto	i1l2785
  9640  004E  3050               	movlw	80
  9641  004F  0675               	xorwf	MyUART_ISR@c,w
  9642  0050  1903               	btfsc	3,2
  9643  0051  2856               	goto	i1l2785
  9644  0052  304C               	movlw	76
  9645  0053  0675               	xorwf	MyUART_ISR@c,w
  9646  0054  1D03               	btfss	3,2
  9647  0055  0008               	return
  9648  0056                     i1l2785:	
  9649                           
  9650                           ;main.c: 105: Type = c;
  9651  0056  0875               	movf	MyUART_ISR@c,w
  9652  0057  00F1               	movwf	??_MyUART_ISR
  9653  0058  0871               	movf	??_MyUART_ISR,w
  9654  0059  0020               	movlb	0	; select bank0
  9655  005A  00D2               	movwf	_Type
  9656                           
  9657                           ;main.c: 106: PosUart = S_Data;
  9658  005B  01CE               	clrf	_PosUart
  9659  005C  0ACE               	incf	_PosUart,f
  9660                           
  9661                           ;main.c: 107: }
  9662                           ;main.c: 108: break;
  9663  005D  0008               	return
  9664  005E                     i1l2789:	
  9665                           ;main.c: 109: case S_Data:
  9666                           
  9667                           
  9668                           ;main.c: 110: Data = c;
  9669  005E  0875               	movf	MyUART_ISR@c,w
  9670  005F  00F1               	movwf	??_MyUART_ISR
  9671  0060  0871               	movf	??_MyUART_ISR,w
  9672  0061  00D3               	movwf	_Data
  9673                           
  9674                           ;main.c: 111: PosUart = S_Check;
  9675  0062  3002               	movlw	2
  9676  0063  00F1               	movwf	??_MyUART_ISR
  9677  0064  0871               	movf	??_MyUART_ISR,w
  9678  0065  00CE               	movwf	_PosUart
  9679                           
  9680                           ;main.c: 112: break;
  9681  0066  0008               	return
  9682  0067                     i1l2791:	
  9683                           ;main.c: 113: case S_Check:
  9684                           
  9685                           
  9686                           ;main.c: 114: if((Type+Data)%256 == c) {
  9687  0067  0852               	movf	_Type,w
  9688  0068  0753               	addwf	_Data,w
  9689  0069  00F1               	movwf	??_MyUART_ISR
  9690  006A  01F2               	clrf	??_MyUART_ISR+1
  9691  006B  0DF2               	rlf	??_MyUART_ISR+1,f
  9692  006C  30FF               	movlw	255
  9693  006D  0571               	andwf	??_MyUART_ISR,w
  9694  006E  00F3               	movwf	??_MyUART_ISR+2
  9695  006F  3000               	movlw	0
  9696  0070  0572               	andwf	??_MyUART_ISR+1,w
  9697  0071  00F4               	movwf	??_MyUART_ISR+3
  9698  0072  0875               	movf	MyUART_ISR@c,w
  9699  0073  0673               	xorwf	??_MyUART_ISR+2,w
  9700  0074  0474               	iorwf	??_MyUART_ISR+3,w
  9701  0075  1D03               	skipz
  9702  0076  28D2               	goto	i1l2819
  9703                           
  9704                           ;main.c: 115: Validation = 4;
  9705  0077  3004               	movlw	4
  9706  0078  00F1               	movwf	??_MyUART_ISR
  9707  0079  0871               	movf	??_MyUART_ISR,w
  9708  007A  00EB               	movwf	_Validation
  9709                           
  9710                           ;main.c: 116: if(Type == 'V') {
  9711  007B  3056               	movlw	86
  9712  007C  0652               	xorwf	_Type,w
  9713  007D  1D03               	btfss	3,2
  9714  007E  2884               	goto	i1l2799
  9715                           
  9716                           ;main.c: 117: Vitesse = Data;
  9717  007F  0853               	movf	_Data,w
  9718  0080  00F1               	movwf	??_MyUART_ISR
  9719  0081  0871               	movf	??_MyUART_ISR,w
  9720  0082  00CF               	movwf	_Vitesse
  9721                           
  9722                           ;main.c: 118: } else if(Type == 'A') {
  9723  0083  28DD               	goto	i1l2821
  9724  0084                     i1l2799:	
  9725  0084  3041               	movlw	65
  9726  0085  0652               	xorwf	_Type,w
  9727  0086  1D03               	btfss	3,2
  9728  0087  288D               	goto	i1l2803
  9729                           
  9730                           ;main.c: 119: Angle = Data;
  9731  0088  0853               	movf	_Data,w
  9732  0089  00F1               	movwf	??_MyUART_ISR
  9733  008A  0871               	movf	??_MyUART_ISR,w
  9734  008B  00EA               	movwf	_Angle
  9735                           
  9736                           ;main.c: 120: } else if(Type == 'P') {
  9737  008C  28DD               	goto	i1l2821
  9738  008D                     i1l2803:	
  9739  008D  3050               	movlw	80
  9740  008E  0652               	xorwf	_Type,w
  9741  008F  1D03               	btfss	3,2
  9742  0090  289B               	goto	i1l2807
  9743                           
  9744                           ;main.c: 121: EUSART_Write('P');
  9745  0091  3050               	movlw	80
  9746  0092  3185  254E  3180   	fcall	_EUSART_Write
  9747                           
  9748                           ;main.c: 122: EUSART_Write('+');
  9749  0095  302B               	movlw	43
  9750  0096  3185  254E  3180   	fcall	_EUSART_Write
  9751                           
  9752                           ;main.c: 123: EUSART_Write('{');
  9753  0099  307B               	movlw	123
  9754  009A  28DB               	goto	L2
  9755  009B                     i1l2807:	
  9756                           ;main.c: 124: } else if(Type == 'L') {
  9757                           
  9758  009B  304C               	movlw	76
  9759  009C  0020               	movlb	0	; select bank0
  9760  009D  0652               	xorwf	_Type,w
  9761  009E  1D03               	btfss	3,2
  9762  009F  28C8               	goto	i1l2817
  9763                           
  9764                           ;main.c: 125: StateLeds++;
  9765  00A0  3001               	movlw	1
  9766  00A1  00F1               	movwf	??_MyUART_ISR
  9767  00A2  0871               	movf	??_MyUART_ISR,w
  9768  00A3  07CD               	addwf	_StateLeds,f
  9769                           
  9770                           ;main.c: 126: switch(StateLeds) {
  9771  00A4  28B9               	goto	i1l2815
  9772  00A5                     i1l853:	
  9773                           ;main.c: 128: do { LATCbits.LATC6 = 0; } while(0);
  9774                           
  9775                           ;main.c: 127: case S_leds_off:
  9776                           
  9777  00A5  0022               	movlb	2	; select bank2
  9778  00A6  130E               	bcf	14,6	;volatile
  9779  00A7  28AA               	goto	i1l861
  9780  00A8                     i1l859:	
  9781                           ;main.c: 132: do { LATCbits.LATC6 = 1; } while(0);
  9782                           
  9783                           ;main.c: 131: case S_led_r:
  9784                           
  9785                           ;main.c: 130: break;
  9786                           
  9787                           ;main.c: 129: do { LATCbits.LATC7 = 0; } while(0);
  9788                           
  9789  00A8  0022               	movlb	2	; select bank2
  9790  00A9  170E               	bsf	14,6	;volatile
  9791  00AA                     i1l861:	
  9792                           ;main.c: 133: do { LATCbits.LATC7 = 0; } while(0);
  9793                           
  9794  00AA  138E               	bcf	14,7	;volatile
  9795                           
  9796                           ;main.c: 134: break;
  9797  00AB  28DD               	goto	i1l2821
  9798  00AC                     i1l864:	
  9799                           ;main.c: 136: do { LATCbits.LATC6 = 0; } while(0);
  9800                           
  9801                           ;main.c: 135: case S_led_l:
  9802                           
  9803  00AC  0022               	movlb	2	; select bank2
  9804  00AD  130E               	bcf	14,6	;volatile
  9805  00AE  28B1               	goto	i1l871
  9806  00AF                     i1l869:	
  9807                           ;main.c: 140: do { LATCbits.LATC6 = 1; } while(0);
  9808                           
  9809                           ;main.c: 139: case S_leds_on:
  9810                           
  9811                           ;main.c: 138: break;
  9812                           
  9813                           ;main.c: 137: do { LATCbits.LATC7 = 1; } while(0);
  9814                           
  9815  00AF  0022               	movlb	2	; select bank2
  9816  00B0  170E               	bsf	14,6	;volatile
  9817  00B1                     i1l871:	
  9818                           ;main.c: 141: do { LATCbits.LATC7 = 1; } while(0);
  9819                           
  9820  00B1  178E               	bsf	14,7	;volatile
  9821                           
  9822                           ;main.c: 142: break;
  9823  00B2  28DD               	goto	i1l2821
  9824  00B3                     i1l874:	
  9825                           ;main.c: 144: do { LATCbits.LATC6 = 0; } while(0);
  9826                           
  9827                           ;main.c: 143: default:
  9828                           
  9829  00B3  0022               	movlb	2	; select bank2
  9830  00B4  130E               	bcf	14,6	;volatile
  9831                           
  9832                           ;main.c: 145: do { LATCbits.LATC7 = 0; } while(0);
  9833  00B5  138E               	bcf	14,7	;volatile
  9834                           
  9835                           ;main.c: 146: StateLeds = S_leds_off;
  9836  00B6  0020               	movlb	0	; select bank0
  9837  00B7  01CD               	clrf	_StateLeds
  9838                           
  9839                           ;main.c: 148: }
  9840                           
  9841                           ;main.c: 147: break;
  9842  00B8  28DD               	goto	i1l2821
  9843  00B9                     i1l2815:	
  9844  00B9  084D               	movf	_StateLeds,w
  9845                           
  9846                           ; Switch size 1, requested type "space"
  9847                           ; Number of cases is 4, Range of values is 0 to 3
  9848                           ; switch strategies available:
  9849                           ; Name         Instructions Cycles
  9850                           ; simple_byte           13     7 (average)
  9851                           ; direct_byte           14     6 (fixed)
  9852                           ; jumptable            260     6 (fixed)
  9853                           ;	Chosen strategy is simple_byte
  9854  00BA  3A00               	xorlw	0	; case 0
  9855  00BB  1903               	skipnz
  9856  00BC  28A5               	goto	i1l853
  9857  00BD  3A01               	xorlw	1	; case 1
  9858  00BE  1903               	skipnz
  9859  00BF  28A8               	goto	i1l859
  9860  00C0  3A03               	xorlw	3	; case 2
  9861  00C1  1903               	skipnz
  9862  00C2  28AC               	goto	i1l864
  9863  00C3  3A01               	xorlw	1	; case 3
  9864  00C4  1903               	skipnz
  9865  00C5  28AF               	goto	i1l869
  9866  00C6  28B3               	goto	i1l874
  9867                           
  9868                           ;main.c: 149: } else {
  9869  00C7  28DD               	goto	i1l2821
  9870  00C8                     i1l2817:	
  9871                           
  9872                           ;main.c: 150: EUSART_Write('$');
  9873  00C8  3024               	movlw	36
  9874  00C9  3185  254E  3180   	fcall	_EUSART_Write
  9875                           
  9876                           ;main.c: 151: EUSART_Write('M');
  9877  00CC  304D               	movlw	77
  9878  00CD  3185  254E  3180   	fcall	_EUSART_Write
  9879                           
  9880                           ;main.c: 152: EUSART_Write('q');
  9881  00D0  3071               	movlw	113
  9882  00D1  28DB               	goto	L2
  9883  00D2                     i1l2819:	
  9884                           ;main.c: 153: }
  9885                           ;main.c: 154: } else {
  9886                           
  9887                           
  9888                           ;main.c: 155: EUSART_Write('$');
  9889  00D2  3024               	movlw	36
  9890  00D3  3185  254E  3180   	fcall	_EUSART_Write
  9891                           
  9892                           ;main.c: 156: EUSART_Write('C');
  9893  00D6  3043               	movlw	67
  9894  00D7  3185  254E  3180   	fcall	_EUSART_Write
  9895                           
  9896                           ;main.c: 157: EUSART_Write('g');
  9897  00DA  3067               	movlw	103
  9898  00DB                     L2:	
  9899  00DB  3185  254E         	fcall	_EUSART_Write
  9900  00DD                     i1l2821:	
  9901                           
  9902                           ;main.c: 158: }
  9903                           ;main.c: 159: PosUart = S_Idle;
  9904  00DD  0020               	movlb	0	; select bank0
  9905  00DE  01CE               	clrf	_PosUart
  9906                           
  9907                           ;main.c: 160: break;
  9908  00DF  0008               	return
  9909  00E0                     i1l2823:	
  9910                           ;main.c: 161: default:
  9911                           
  9912                           
  9913                           ;main.c: 162: PosUart = S_Idle;
  9914  00E0  01CE               	clrf	_PosUart
  9915                           
  9916                           ;main.c: 164: }
  9917                           
  9918                           ;main.c: 163: break;
  9919  00E1  0008               	return
  9920  00E2                     i1l2827:	
  9921  00E2  0020               	movlb	0	; select bank0
  9922  00E3  084E               	movf	_PosUart,w
  9923                           
  9924                           ; Switch size 1, requested type "space"
  9925                           ; Number of cases is 3, Range of values is 0 to 2
  9926                           ; switch strategies available:
  9927                           ; Name         Instructions Cycles
  9928                           ; simple_byte           10     6 (average)
  9929                           ; direct_byte           12     6 (fixed)
  9930                           ; jumptable            260     6 (fixed)
  9931                           ;	Chosen strategy is simple_byte
  9932  00E4  3A00               	xorlw	0	; case 0
  9933  00E5  1903               	skipnz
  9934  00E6  2846               	goto	i1l2777
  9935  00E7  3A01               	xorlw	1	; case 1
  9936  00E8  1903               	skipnz
  9937  00E9  285E               	goto	i1l2789
  9938  00EA  3A03               	xorlw	3	; case 2
  9939  00EB  1903               	skipnz
  9940  00EC  2867               	goto	i1l2791
  9941  00ED  28E0               	goto	i1l2823
  9942  00EE  0008               	return
  9943  00EF                     __end_of_MyUART_ISR:	
  9944                           
  9945                           	psect	text74
  9946  054E                     __ptext74:	
  9947 ;; *************** function _EUSART_Write *****************
  9948 ;; Defined at:
  9949 ;;		line 162 in file "mcc_generated_files/eusart.c"
  9950 ;; Parameters:    Size  Location     Type
  9951 ;;  txData          1    wreg     unsigned char 
  9952 ;; Auto vars:     Size  Location     Type
  9953 ;;  txData          1    0[COMMON] unsigned char 
  9954 ;; Return value:  Size  Location     Type
  9955 ;;                  1    wreg      void 
  9956 ;; Registers used:
  9957 ;;		wreg
  9958 ;; Tracked objects:
  9959 ;;		On entry : 0/0
  9960 ;;		On exit  : 0/0
  9961 ;;		Unchanged: 0/0
  9962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9964 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9966 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9967 ;;Total ram usage:        1 bytes
  9968 ;; Hardware stack levels used:    1
  9969 ;; This function calls:
  9970 ;;		Nothing
  9971 ;; This function is called by:
  9972 ;;		_MyTimer2ISR
  9973 ;;		_MyUART_ISR
  9974 ;; This function uses a non-reentrant model
  9975 ;;
  9976                           
  9977                           
  9978                           ;psect for function _EUSART_Write
  9979  054E                     _EUSART_Write:	
  9980                           
  9981                           ;incstack = 0
  9982                           ; Regs used in _EUSART_Write: [wreg]
  9983                           ;EUSART_Write@txData stored from wreg
  9984  054E  00F0               	movwf	EUSART_Write@txData
  9985  054F                     i1l635:	
  9986                           ;eusart.c: 165: {
  9987                           
  9988                           ;eusart.c: 164: while(0 == PIR1bits.TXIF)
  9989                           
  9990  054F  0020               	movlb	0	; select bank0
  9991  0550  1E10               	btfss	16,4	;volatile
  9992  0551  2D4F               	goto	i1l635
  9993                           
  9994                           ;eusart.c: 166: }
  9995                           ;eusart.c: 168: TX1REG = txData;
  9996  0552  0870               	movf	EUSART_Write@txData,w
  9997  0553  0023               	movlb	3	; select bank3
  9998  0554  009A               	movwf	26	;volatile
  9999  0555  0008               	return
 10000  0556                     __end_of_EUSART_Write:	
 10001                           
 10002                           	psect	text75
 10003  05CE                     __ptext75:	
 10004 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 10005 ;; Defined at:
 10006 ;;		line 209 in file "mcc_generated_files/eusart.c"
 10007 ;; Parameters:    Size  Location     Type
 10008 ;;		None
 10009 ;; Auto vars:     Size  Location     Type
 10010 ;;		None
 10011 ;; Return value:  Size  Location     Type
 10012 ;;                  1    wreg      void 
 10013 ;; Registers used:
 10014 ;;		None
 10015 ;; Tracked objects:
 10016 ;;		On entry : 0/0
 10017 ;;		On exit  : 0/0
 10018 ;;		Unchanged: 0/0
 10019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10023 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10024 ;;Total ram usage:        0 bytes
 10025 ;; Hardware stack levels used:    1
 10026 ;; This function calls:
 10027 ;;		Nothing
 10028 ;; This function is called by:
 10029 ;;		_EUSART_Initialize
 10030 ;;		_EUSART_Receive_ISR
 10031 ;; This function uses a non-reentrant model
 10032 ;;
 10033                           
 10034                           
 10035                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 10036  05CE                     _EUSART_DefaultOverrunErrorHandler:	
 10037                           
 10038                           ;eusart.c: 212: RC1STAbits.CREN = 0;
 10039                           
 10040                           ;incstack = 0
 10041                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 10042  05CE  0023               	movlb	3	; select bank3
 10043  05CF  121D               	bcf	29,4	;volatile
 10044                           
 10045                           ;eusart.c: 213: RC1STAbits.CREN = 1;
 10046  05D0  161D               	bsf	29,4	;volatile
 10047  05D1  0008               	return
 10048  05D2                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 10049                           
 10050                           	psect	text76
 10051  05FE                     __ptext76:	
 10052 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 10053 ;; Defined at:
 10054 ;;		line 207 in file "mcc_generated_files/eusart.c"
 10055 ;; Parameters:    Size  Location     Type
 10056 ;;		None
 10057 ;; Auto vars:     Size  Location     Type
 10058 ;;		None
 10059 ;; Return value:  Size  Location     Type
 10060 ;;                  1    wreg      void 
 10061 ;; Registers used:
 10062 ;;		None
 10063 ;; Tracked objects:
 10064 ;;		On entry : 0/0
 10065 ;;		On exit  : 0/0
 10066 ;;		Unchanged: 0/0
 10067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10072 ;;Total ram usage:        0 bytes
 10073 ;; Hardware stack levels used:    1
 10074 ;; This function calls:
 10075 ;;		Nothing
 10076 ;; This function is called by:
 10077 ;;		_EUSART_Initialize
 10078 ;;		_EUSART_Receive_ISR
 10079 ;; This function uses a non-reentrant model
 10080 ;;
 10081                           
 10082                           
 10083                           ;psect for function _EUSART_DefaultFramingErrorHandler
 10084  05FE                     _EUSART_DefaultFramingErrorHandler:	
 10085                           
 10086                           ;incstack = 0
 10087                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 10088  05FE  0008               	return
 10089  05FF                     __end_of_EUSART_DefaultFramingErrorHandler:	
 10090                           
 10091                           	psect	text77
 10092  05F6                     __ptext77:	
 10093 ;; *************** function _EUSART_DefaultErrorHandler *****************
 10094 ;; Defined at:
 10095 ;;		line 217 in file "mcc_generated_files/eusart.c"
 10096 ;; Parameters:    Size  Location     Type
 10097 ;;		None
 10098 ;; Auto vars:     Size  Location     Type
 10099 ;;		None
 10100 ;; Return value:  Size  Location     Type
 10101 ;;                  1    wreg      void 
 10102 ;; Registers used:
 10103 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10104 ;; Tracked objects:
 10105 ;;		On entry : 0/0
 10106 ;;		On exit  : 0/0
 10107 ;;		Unchanged: 0/0
 10108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10113 ;;Total ram usage:        0 bytes
 10114 ;; Hardware stack levels used:    1
 10115 ;; Hardware stack levels required when called:    1
 10116 ;; This function calls:
 10117 ;;		_EUSART_RxDataHandler
 10118 ;; This function is called by:
 10119 ;;		_EUSART_Initialize
 10120 ;;		_EUSART_Receive_ISR
 10121 ;; This function uses a non-reentrant model
 10122 ;;
 10123                           
 10124                           
 10125                           ;psect for function _EUSART_DefaultErrorHandler
 10126  05F6                     _EUSART_DefaultErrorHandler:	
 10127                           
 10128                           ;eusart.c: 218: EUSART_RxDataHandler();
 10129                           
 10130                           ;incstack = 0
 10131                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10132  05F6  3184  243C         	fcall	_EUSART_RxDataHandler
 10133  05F8  0008               	return
 10134  05F9                     __end_of_EUSART_DefaultErrorHandler:	
 10135                           
 10136                           	psect	text78
 10137  043C                     __ptext78:	
 10138 ;; *************** function _EUSART_RxDataHandler *****************
 10139 ;; Defined at:
 10140 ;;		line 197 in file "mcc_generated_files/eusart.c"
 10141 ;; Parameters:    Size  Location     Type
 10142 ;;		None
 10143 ;; Auto vars:     Size  Location     Type
 10144 ;;		None
 10145 ;; Return value:  Size  Location     Type
 10146 ;;                  1    wreg      void 
 10147 ;; Registers used:
 10148 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10149 ;; Tracked objects:
 10150 ;;		On entry : 0/0
 10151 ;;		On exit  : 0/0
 10152 ;;		Unchanged: 0/0
 10153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10156 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10157 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10158 ;;Total ram usage:        1 bytes
 10159 ;; Hardware stack levels used:    1
 10160 ;; This function calls:
 10161 ;;		Nothing
 10162 ;; This function is called by:
 10163 ;;		_EUSART_Receive_ISR
 10164 ;;		_EUSART_DefaultErrorHandler
 10165 ;; This function uses a non-reentrant model
 10166 ;;
 10167                           
 10168                           
 10169                           ;psect for function _EUSART_RxDataHandler
 10170  043C                     _EUSART_RxDataHandler:	
 10171                           
 10172                           ;eusart.c: 199: eusartRxBuffer[eusartRxHead++] = RC1REG;
 10173                           
 10174                           ;incstack = 0
 10175                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 10176  043C  0023               	movlb	3	; select bank3
 10177  043D  0819               	movf	25,w	;volatile
 10178  043E  00F0               	movwf	??_EUSART_RxDataHandler
 10179  043F  0020               	movlb	0	; select bank0
 10180  0440  0857               	movf	_eusartRxHead,w
 10181  0441  3E45               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 10182  0442  0086               	movwf	6
 10183  0443  0187               	clrf	7
 10184  0444  0870               	movf	??_EUSART_RxDataHandler,w
 10185  0445  0081               	movwf	1
 10186  0446  3001               	movlw	1
 10187  0447  00F0               	movwf	??_EUSART_RxDataHandler
 10188  0448  0870               	movf	??_EUSART_RxDataHandler,w
 10189  0449  07D7               	addwf	_eusartRxHead,f	;volatile
 10190                           
 10191                           ;eusart.c: 200: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 10192  044A  3008               	movlw	8
 10193  044B  0257               	subwf	_eusartRxHead,w	;volatile
 10194  044C  1803               	btfsc	3,0
 10195                           
 10196                           ;eusart.c: 201: {
 10197                           ;eusart.c: 202: eusartRxHead = 0;
 10198  044D  01D7               	clrf	_eusartRxHead	;volatile
 10199                           
 10200                           ;eusart.c: 203: }
 10201                           ;eusart.c: 204: eusartRxCount++;
 10202  044E  3001               	movlw	1
 10203  044F  00F0               	movwf	??_EUSART_RxDataHandler
 10204  0450  0870               	movf	??_EUSART_RxDataHandler,w
 10205  0451  07D5               	addwf	_eusartRxCount,f	;volatile
 10206  0452  0008               	return
 10207  0453                     __end_of_EUSART_RxDataHandler:	
 10208  007E                     btemp	set	126	;btemp
 10209  007E                     int$flags	set	126
 10210  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    32
    Data        3
    BSS         56
    Persistent  10
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     11      76
    BANK1            80      4       8
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    I2C_Read1ByteRegister@returnValue.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Read2ByteRegister@returnValue.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Write1ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Write2ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    I2C_DO_TX$1916$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_RX$1922$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX_EMPTY$1928$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_RX_EMPTY$1934$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX_EMPTY$1933	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX_EMPTY$1928	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_DO_RX$1927	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_RX$1922	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_DO_TX$1921	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX$1916	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_MasterFsm$1915	const PTR FTN()enum E12103 size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    I2C_CallbackReturnStop@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_CallbackReturnReset@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    Absolute function$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S443$0$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyTimer2ISR(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyTimer2ISR(), TMR2_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyUART_ISR(), EUSART_Receive_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), Absolute function(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), Absolute function(), 

    I2C_SetCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_SetCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> Absolute function(), rd1RegCompleteHandler(), 

    I2C_SetAddressNackCallback@ptr	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    I2C_SetAddressNackCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> Absolute function(), 

    I2C_SetDataCompleteCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_SetDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> Absolute function(), rd1RegCompleteHandler(), 

    I2C_SetBuffer@buffer	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(BANK0[1]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S443$data_ptr	PTR unsigned char  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(BANK0[1]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_Status.data_ptr	PTR unsigned char  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(BANK0[1]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S443$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_Status.callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S443$callbackTable	PTR FTN(PTR void ,)enum E97[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_Status.callbackTable	PTR FTN(PTR void ,)enum E97[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    fsmStateTable	const PTR FTN()enum E12103[16] size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyUART_ISR(), EUSART_Receive_ISR(), Absolute function(), 

    rdBlkRegCompleteHandler@ptr.data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    wr2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    wr1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    rd2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    rd1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S85$data	PTR unsigned char  size(1) Largest target is 0

    bufferBlock.data	PTR unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _I2C_SetAddressNackCallback->_I2C_SetCallback
    _I2C_MasterWrite->_I2C_MasterOperation
    _I2C_MasterFsm->_I2C_DO_TX
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnReset
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnStop
    _I2C_DO_TX_EMPTY->_rd1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rd2RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rdBlkRegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr2RegCompleteHandler
    _I2C_DO_TX->_I2C_CallbackReturnReset
    _I2C_DO_TX->_I2C_CallbackReturnStop
    _I2C_DO_TX->_rd1RegCompleteHandler
    _I2C_DO_TX->_rd2RegCompleteHandler
    _I2C_DO_TX->_rdBlkRegCompleteHandler
    _I2C_DO_TX->_wr1RegCompleteHandler
    _I2C_DO_TX->_wr2RegCompleteHandler
    _I2C_DO_SEND_ADR_WRITE->_I2C_MasterSendTxData
    _I2C_DO_RX->_I2C_CallbackReturnReset
    _I2C_DO_RX->_I2C_CallbackReturnStop
    _I2C_DO_RX->_rd1RegCompleteHandler
    _I2C_DO_RX->_rd2RegCompleteHandler
    _I2C_DO_RX->_rdBlkRegCompleteHandler
    _I2C_DO_RX->_wr1RegCompleteHandler
    _I2C_DO_RX->_wr2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnReset
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnStop
    _I2C_DO_ADDRESS_NACK->_rd1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rd2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rdBlkRegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr2RegCompleteHandler
    _wr2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _wr1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rdBlkRegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _I2C_SetDataCompleteCallback->_I2C_SetCallback
    _MyUART_ISR->_EUSART_Write
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _TMR2_CallBack->_MyTimer2ISR
    _MyTimer2ISR->_I2C_Write1ByteRegister
    _I2C_MasterWrite->_I2C_MasterOperation
    _I2C_Poller->_I2C_MasterFsm

Critical Paths under _main in BANK1

    _main->_EUSART_SetRxInterruptHandler
    _main->_TMR2_SetInterruptHandler
    _main->_TMR2_WriteTimer
    _TMR2_WriteTimer->_TMR2_Counter8BitSet
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1269
                                              2 BANK1      2     2      0
       _EUSART_SetRxInterruptHandler
                  _SYSTEM_Initialize
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
                    _TMR2_WriteTimer
 ---------------------------------------------------------------------------------
 (1) _TMR2_WriteTimer                                      1     1      0      62
                                              1 BANK1      1     1      0
                _TMR2_Counter8BitSet
 ---------------------------------------------------------------------------------
 (2) _TMR2_Counter8BitSet                                  1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
                         _TMR2_Start
 ---------------------------------------------------------------------------------
 (2) _TMR2_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     785
                  _EUSART_Initialize
                     _I2C_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM3_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     211
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR2_SetInterruptHandler                             2     0      2     211
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     574
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     211
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     121
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     121
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     121
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           1     1      0   84965
                                             10 BANK0      1     1      0
                   Absolute function *
                 _EUSART_Receive_ISR *
                         _MyUART_ISR *
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR2_ISR                                             0     0      0   84766
                      _TMR2_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR2_CallBack                                        0     0      0   84766
                   Absolute function *
                        _MyTimer2ISR *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _TMR2_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _MyTimer2ISR                                          1     1      0   84766
                                              9 BANK0      1     1      0
                       _EUSART_Write
             _I2C_Write1ByteRegister
                 _PWM3_LoadDutyValue
 ---------------------------------------------------------------------------------
 (8) _PWM3_LoadDutyValue                                   4     2      2     120
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (8) _I2C_Write1ByteRegister                               4     2      2   84624
                                              5 BANK0      4     2      2
                          _I2C_Close
                    _I2C_MasterWrite
                           _I2C_Open
         _I2C_SetAddressNackCallback
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _I2C_SetAddressNackCallback                           4     1      3    1870
                                              5 COMMON     4     1      3
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (9) _I2C_Open                                             3     3      0      46
                                              0 COMMON     3     3      0
                 _I2C_MasterClearIrq
                     _I2C_MasterOpen
 ---------------------------------------------------------------------------------
 (10) _I2C_MasterOpen                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterWrite                                      0     0      0   78324
                _I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (10) _I2C_MasterOperation                                 3     3      0   78324
                                             13 COMMON     1     1      0
                                              3 BANK0      2     2      0
                    _I2C_MasterStart
                         _I2C_Poller
 ---------------------------------------------------------------------------------
 (11) _I2C_Poller                                          0     0      0   78278
                      _I2C_MasterFsm
             _I2C_MasterWaitForEvent
 ---------------------------------------------------------------------------------
 (12) _I2C_MasterWaitForEvent                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_MasterFsm                                       3     3      0   78278
                                              0 BANK0      3     3      0
                _I2C_DO_ADDRESS_NACK *
                        _I2C_DO_IDLE *
                        _I2C_DO_RCEN *
                       _I2C_DO_RESET *
                          _I2C_DO_RX *
                      _I2C_DO_RX_ACK *
             _I2C_DO_RX_NACK_RESTART *
                _I2C_DO_RX_NACK_STOP *
               _I2C_DO_SEND_ADR_READ *
              _I2C_DO_SEND_ADR_WRITE *
                _I2C_DO_SEND_RESTART *
           _I2C_DO_SEND_RESTART_READ *
          _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_DO_SEND_STOP *
                          _I2C_DO_TX *
                    _I2C_DO_TX_EMPTY *
                 _I2C_MasterClearIrq
                   _I2C_MasterIsNack
 ---------------------------------------------------------------------------------
 (13) _I2C_DO_TX_EMPTY                                     1     1      0   19547
                                             10 COMMON     1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
                   _I2C_MasterSetIrq
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (14) _I2C_MasterSetIrq                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _I2C_DO_TX                                           3     3      0   19593
                                             10 COMMON     3     3      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
           _I2C_DO_SEND_RESTART_READ
          _I2C_DO_SEND_RESTART_WRITE
                   _I2C_DO_SEND_STOP
                   _I2C_MasterIsNack
               _I2C_MasterSendTxData
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (13) _I2C_MasterIsNack                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _I2C_DO_SEND_RESTART_WRITE                           0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (14) _I2C_DO_SEND_RESTART_READ                            0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (13) _I2C_DO_SEND_ADR_WRITE                               0     0      0      22
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (13) _I2C_DO_SEND_ADR_READ                                0     0      0      22
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (14) _I2C_MasterSendTxData                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) _I2C_DO_RX_ACK                                       0     0      0       0
                  _I2C_MasterSendAck
 ---------------------------------------------------------------------------------
 (13) _I2C_DO_RX                                           1     1      0   19547
                                             10 COMMON     1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
             _I2C_DO_RX_NACK_RESTART
                _I2C_DO_RX_NACK_STOP
                _I2C_MasterGetRxData
                  _I2C_MasterSendAck
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (14) _I2C_MasterSendAck                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _I2C_MasterGetRxData                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _I2C_DO_RX_NACK_STOP                                 0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (13) _I2C_DO_RX_NACK_RESTART                              0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (14) _I2C_MasterSendNack                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _I2C_DO_RESET                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _I2C_DO_RCEN                                         0     0      0       0
                  _I2C_MasterStartRx
 ---------------------------------------------------------------------------------
 (14) _I2C_MasterStartRx                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _I2C_DO_IDLE                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _I2C_DO_ADDRESS_NACK                                 1     1      0   19547
                                             10 COMMON     1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (14) _wr2RegCompleteHandler                               1     0      1    3852
                                              9 COMMON     1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) _wr1RegCompleteHandler                               1     0      1    3852
                                              9 COMMON     1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) _rdBlkRegCompleteHandler                             1     0      1    3874
                                              9 COMMON     1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) _rd2RegCompleteHandler                               1     0      1    3852
                                              9 COMMON     1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) _rd1RegCompleteHandler                               1     0      1    3852
                                              9 COMMON     1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _I2C_SetDataCompleteCallback                          4     1      3    2478
                                              5 COMMON     4     1      3
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (10) _I2C_SetCallback                                     5     2      3     914
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (9) _I2C_SetBuffer                                        4     2      2    1352
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (14) _I2C_DO_SEND_STOP                                    0     0      0       0
                     _I2C_MasterStop
 ---------------------------------------------------------------------------------
 (15) _I2C_MasterStop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _I2C_DO_SEND_RESTART                                 0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (15) _I2C_MasterEnableRestart                             0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _I2C_CallbackReturnStop                              1     0      1       0
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (14) _I2C_CallbackReturnReset                             1     0      1     265
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _I2C_MasterStart                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C_Close                                            2     2      0      24
                                              0 COMMON     2     2      0
                 _I2C_MasterClearIrq
                    _I2C_MasterClose
               _I2C_MasterDisableIrq
 ---------------------------------------------------------------------------------
 (10) _I2C_MasterDisableIrq                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _I2C_MasterClose                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _I2C_MasterClearIrq                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _MyUART_ISR                                           5     5      0     199
                                              1 COMMON     5     5      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (8) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Receive_ISR                                   0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (6) _EUSART_DefaultOverrunErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_DefaultFramingErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_DefaultErrorHandler                           0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (6) _EUSART_RxDataHandler                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_SetRxInterruptHandler
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
     _I2C_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM3_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
   _TMR2_SetInterruptHandler
   _TMR2_StartTimer
     _TMR2_Start
   _TMR2_WriteTimer
     _TMR2_Counter8BitSet

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _MyUART_ISR *
     _EUSART_Write
   _TMR2_ISR *
     _TMR2_CallBack
       Absolute function(Fake) *
       _MyTimer2ISR *
         _EUSART_Write
         _I2C_Write1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
         _PWM3_LoadDutyValue
       _TMR2_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      B      4C       5       95.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      4       8       7       10.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      62      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      62      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Mar 30 18:33:32 2020

                ?_EUSART_SetRxInterruptHandler 00A4                         ??_I2C_DO_SEND_ADR_READ 0070  
                                  MyUART_ISR@c 0075                    __size_of_I2C_MasterSendNack 0004  
                           __size_of_I2C_Close 0019               __end_of_TMR2_SetInterruptHandler 0534  
                                            _G 0050                        ??_I2C_DO_SEND_ADR_WRITE 0071  
                                  __CFG_CP$OFF 0000                            __size_of_I2C_Poller 000A  
                        ??_I2C_DO_SEND_RESTART 0070                                    __CFG_LVP$ON 0000  
                 __size_of_I2C_MasterOperation 001A                  __size_of_I2C_MasterSendTxData 0005  
                                          _PR2 001B                         ??_EUSART_RxDataHandler 0070  
                       _I2C_MasterWaitForEvent 05A6                 ?_EUSART_SetFramingErrorHandler 00A4  
                              _TMR2_Initialize 0469                                   __CFG_BORV$LO 0000  
                                          wreg 0009                                   __CFG_IESO$ON 0000  
                 ??_I2C_SetAddressNackCallback 0078                         _I2C_Write1ByteRegister 0310  
                     ??_I2C_CallbackReturnStop 007A                                   _I2C_DO_RESET 0593  
                                 __CFG_ZCD$OFF 0000                        ??_rd2RegCompleteHandler 007A  
                                         l3141 01AC                                           l3151 01A3  
                                         l3143 017C                                           l3147 018A  
                                         l3149 0198                                           _LATA 010C  
                                         _LATB 010D                                           _LATC 010E  
                                         u1417 0190                                           u1370 0188  
                                         u1427 01A7                                           u1390 01A1  
                                         _T2PR 001B                                           _TMR2 001A  
                                         _WPUA 020C                                           _WPUB 020D  
                                         _WPUC 020E                                           _Data 0053  
                      ??_wr2RegCompleteHandler 007A                                   __CFG_WRT$OFF 0000  
                                __CFG_FCMEN$ON 0000                                           _Type 0052  
                                         _main 015C                       ?_I2C_CallbackReturnReset 0079  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                             __end_of_I2C_Open 02A9                                           btemp 007E  
                                __CFG_BOREN$ON 0000                                           start 0024  
                                __CFG_MCLRE$ON 0000                            _TMR2_Counter8BitSet 0570  
             __size_of_rdBlkRegCompleteHandler 0017                                  _I2C_DO_TX$794 007B  
                             ?_I2C_MasterClose 0070                                  __CFG_PLLEN$ON 0000  
                                ?_EUSART_Write 0070            __size_of_I2C_SetAddressNackCallback 000C  
               __size_of_OSCILLATOR_Initialize 0007                               ?_I2C_MasterStart 0070  
                                _I2C_DO_RX_ACK 05B2                               ?_I2C_MasterWrite 0070  
                __end_of_OSCILLATOR_Initialize 055D                                          ?_main 0070  
                                __CFG_WDTE$OFF 0000                                          _T2CON 001C  
                                        _T2HLT 001D                                          i1l123 001F  
                                        _T2TMR 001A                                          i1l118 0017  
                                        i1l321 02A7                                          _T2RST 001F  
                                        i1l403 0252                                          i1l544 05A6  
                                        i1l635 054F                                          i1l387 01DE  
                                        i1l861 00AA                                          i1l853 00A5  
                                        i1l871 00B1                                          i1l864 00AC  
                                        i1l874 00B3                                          i1l859 00A8  
                                        i1l869 00AF                   __size_of_I2C_DO_RX_NACK_STOP 0004  
                            ??_I2C_DO_TX_EMPTY 007A                                          _TRISA 008C  
                                        _TRISB 008D                                          _TRISC 008E  
                                        u86_25 0462                                          _RXPPS 0E24  
                                        u88_25 00F3                                          _Angle 006A  
                         ?_TMR2_Counter8BitSet 0070                              __end_of_I2C_DO_RX 0272  
                            __end_of_I2C_DO_TX 01FD                               __end_of_TMR2_ISR 0593  
                                  ?_TMR2_Start 0070                              __end_of_I2C_Close 0425  
                       __size_of_I2C_MasterFsm 0027                 I2C_MasterOperation@returnValue 005C  
                                   _MyUART_ISR 003D                        _I2C_MasterEnableRestart 05E7  
                      __end_of_PWM3_Initialize 050C                                          pclath 000A  
                             ?_I2C_SetCallback 0070                   I2C_SetAddressNackCallback@cb 0075  
                                        status 0003                                          wtemp0 007E  
                            ?_I2C_DO_SEND_STOP 0070                         __size_of_I2C_SetBuffer 000E  
                              _TMR2_StartTimer 05D5                             ??_I2C_DO_SEND_STOP 0070  
                                _fsmStateTable 03D2                                __initialization 0026  
                                ??_MyTimer2ISR 0061                                   __end_of_main 01B2  
            __size_of_I2C_DO_SEND_RESTART_READ 0004                      ?_I2C_DO_SEND_RESTART_READ 0070  
                               ??_EUSART_Write 0070                                 ?_I2C_DO_RX_ACK 0070  
                      __end_of_TMR2_Initialize 047D                                 __CFG_LPBOR$OFF 0000  
                  ?_INTERRUPT_InterruptManager 0070                 ??_EUSART_SetRxInterruptHandler 00A6  
                     _TMR2_SetInterruptHandler 052B                                         ??_main 00A6  
                            ?_I2C_MasterIsNack 0070                                _TMR2_WriteTimer 056A  
                            ?_I2C_MasterSetIrq 0070                             ??_I2C_MasterIsNack 0070  
                        ??_TMR2_Counter8BitSet 00A4                             ??_I2C_MasterSetIrq 0070  
    __end_of_EUSART_DefaultFramingErrorHandler 05FF     __size_of_EUSART_DefaultFramingErrorHandler 0001  
          ??_EUSART_DefaultFramingErrorHandler 0070             ?_EUSART_DefaultFramingErrorHandler 0070  
            _EUSART_DefaultFramingErrorHandler 05FE                     _EUSART_OverrunErrorHandler 00A2  
              __end_of_I2C_CallbackReturnReset 05FB                __size_of_I2C_CallbackReturnStop 0002  
                I2C_SetDataCompleteCallback@cb 0075                                         _ANSELA 018C  
                                       _ANSELB 018D                                         _ANSELC 018E  
                                       _BORCON 0116                                   ??_I2C_Poller 007D  
                                       _RC1REG 0199                                         _RA2PPS 0E92  
                                       _RC1STA 019D                                         _RB4PPS 0E9C  
                                       _RB6PPS 0E9E                                         _RB7PPS 0E9F  
                                       i1l2401 0373                                         _ODCONA 028C  
                                       _ODCONB 028D                                         i1l2331 01BF  
                                       i1l2323 01B9                                         _ODCONC 028E  
                                       i1l2421 03B6                                         i1l2327 01BC  
                                       i1l2431 03BC                                         i1l2345 01F7  
                                       i1l2337 01C2                                         i1l2425 03B9  
                                       i1l2179 03A1                                         i1l2363 0254  
                                       i1l2443 0350                                         i1l2373 025A  
                                       i1l2453 0521                                         i1l2621 0153  
                                       i1l2613 0137                                         i1l2605 0121  
                                       i1l2543 0423                                         i1l2367 0257  
                                       i1l2615 0141                                         i1l2385 0369  
                                       i1l2481 0400                                         i1l2609 012D  
                                       i1l2803 008D                                         i1l2395 0370  
                                       i1l2483 0404                                         i1l2821 00DD  
                                       i1l2389 036C                                         i1l2549 0312  
                                       i1l2823 00E0                                         i1l2815 00B9  
                                       i1l2807 009B                                         i1l2487 0409  
                                       i1l2559 0338                                         i1l2817 00C8  
                                       i1l2761 02CC                                         i1l2819 00D2  
                                       i1l2827 00E2                                         i1l2755 02BD  
                                       i1l2765 02DB                                         i1l2791 0067  
                                       i1l2599 0116                                         i1l2785 0056  
                                       i1l2777 0046                                         i1l2789 005E  
                                       i1l2799 0084                                         _INLVLA 038C  
                                       _INLVLB 038D                                         _INLVLC 038E  
                                       _OSCCON 0099                                         _SPBRGH 019C  
                                       _SPBRGL 019B                                         _TX1REG 019A  
                                       _TX1STA 019E                                         _CptBat 0051  
                                   _Validation 006B                                 __CFG_PWRTE$OFF 0000  
                          _I2C_MasterGetRxData 05DE                    __size_of_PWM3_LoadDutyValue 0016  
                                _I2C_MasterFsm 033F                                 __CFG_STVREN$ON 0000  
                          __size_of_TMR2_Start 0003                              I2C_SetCallback@cb 0070  
                      __size_of_I2C_MasterOpen 000C                        __size_of_I2C_MasterStop 0003  
                      __size_of_I2C_Initialize 000A                                  _I2C_SetBuffer 04CF  
                          __end_of_MyTimer2ISR 015C                             __end_of_I2C_Poller 052B  
                 __end_of_I2C_MasterDisableIrq 05F0                            _I2C_DO_ADDRESS_NACK 03AF  
                         ?_I2C_MasterGetRxData 0070                                      ?_I2C_Open 0070  
           __end_of_I2C_SetAddressNackCallback 04E9                     _I2C_SetAddressNackCallback 04DD  
                    ??_I2C_MasterEnableRestart 0070                        __end_of_TMR2_StartTimer 05D8  
     TMR2_SetInterruptHandler@InterruptHandler 00A4                                    ?_MyUART_ISR 0070  
                             ?_PWM3_Initialize 0070                              _SYSTEM_Initialize 047D  
                      __end_of__initialization 0039                          __end_of_TMR2_CallBack 0517  
                          _I2C_MasterOperation 03F2                             ?_SYSTEM_Initialize 0070  
                         ?_I2C_DO_ADDRESS_NACK 0070                        _rdBlkRegCompleteHandler 0425  
                               __pcstackCOMMON 0070                                 ?_I2C_MasterFsm 0070  
                              ??_I2C_DO_RX_ACK 0070                                   __pidataBANK0 05D2  
                       _I2C_CallbackReturnStop 05FB                            ??_SYSTEM_Initialize 00A6  
                                    ?_TMR2_ISR 0070                        __end_of_TMR2_WriteTimer 0570  
                             ?_TMR2_Initialize 0070                                 ?_I2C_SetBuffer 0070  
                      ?_I2C_MasterWaitForEvent 0070                 __size_of_I2C_DO_SEND_ADR_WRITE 0007  
           __size_of_I2C_DO_SEND_RESTART_WRITE 0004                  __end_of_I2C_DO_SEND_ADR_WRITE 0564  
                   ?_I2C_DO_SEND_RESTART_WRITE 0070                           ?_I2C_MasterOperation 0070  
                        ??_I2C_MasterGetRxData 0070                        ?_I2C_Write1ByteRegister 005D  
                               _OPTION_REGbits 0095                                     ??_I2C_Open 0070  
                         _eusartRxStatusBuffer 003D                     __end_of_I2C_MasterClearIrq 05F6  
              ??_EUSART_SetOverrunErrorHandler 00A6                      __end_of_SYSTEM_Initialize 048F  
                            _I2C_MasterSendAck 05C6                                     __pbssBANK0 0020  
                         __end_of_EUSART_Write 0556                                  ??_I2C_DO_IDLE 0070  
               __size_of_rd2RegCompleteHandler 0010                                  ??_I2C_DO_RCEN 0070  
                __end_of_rd2RegCompleteHandler 04AF                   __end_of_I2C_MasterSendTxData 05A2  
                           ?_I2C_MasterSendAck 0070                              _I2C_MasterStartRx 05E1  
               __size_of_wr2RegCompleteHandler 0010                          ??_I2C_DO_ADDRESS_NACK 007A  
                __end_of_wr2RegCompleteHandler 04CF                    __size_of_EUSART_Receive_ISR 0035  
                          _I2C_DO_RX_NACK_STOP 05AE                          _rd1RegCompleteHandler 04AF  
                           ?_I2C_MasterStartRx 0070                     __end_of_I2C_MasterSendNack 05CE  
                        _wr1RegCompleteHandler 048F                                     __pmaintext 015C  
                          ??_I2C_MasterSendAck 0070                       rd1RegCompleteHandler@ptr 0079  
                  __end_of_I2C_DO_SEND_RESTART 05BE                                    _MyTimer2ISR 00EF  
                              _I2C_DO_TX_EMPTY 0366                            I2C_SetBuffer@buffer 0073  
                              __CFG_PPS1WAY$ON 0000                                     ??_TMR2_ISR 007E  
                                   __pintentry 0004                 __end_of_I2C_MasterWaitForEvent 05AA  
                          ??_I2C_MasterStartRx 0070                  __size_of_I2C_DO_SEND_ADR_READ 0008  
                          __size_of_MyUART_ISR 00B2               __size_of_I2C_CallbackReturnReset 0002  
                 ??_EUSART_DefaultErrorHandler 0071                          ??_I2C_MasterOperation 007D  
               I2C_SetDataCompleteCallback@ptr 0077                 __end_of_I2C_Write1ByteRegister 033F  
                     ??_I2C_DO_RX_NACK_RESTART 0070              __end_of_I2C_DO_SEND_RESTART_WRITE 05C2  
                         ?_I2C_DO_RX_NACK_STOP 0070                                  _eusartRxCount 0055  
                              __CFG_WDTCCS$SWC 0000                  __size_of_EUSART_RxDataHandler 0017  
                    __end_of_I2C_MasterSendAck 05CA                                        _OSCTUNE 0098  
                                      _PWM3DCH 0618                                        _PWM3DCL 0617  
                                      _PWM3CON 0619                                        _SSP1ADD 0212  
                                      _SLRCONA 030C                                        _SLRCONB 030D  
                                      _SLRCONC 030E                                        _SSP1BUF 0211  
                                 ??_TMR2_Start 00A4                       ??_EUSART_SetErrorHandler 00A6  
                             ?_TMR2_StartTimer 0070                      __end_of_I2C_MasterStartRx 05E4  
                         I2C_Close@returnValue 0071                   ?_I2C_SetDataCompleteCallback 0075  
                                    _I2C_DO_RX 0238                                      _I2C_DO_TX 01B2  
             __end_of_I2C_DO_SEND_RESTART_READ 05C6                                      _I2C_Close 040C  
                    ??_rdBlkRegCompleteHandler 007A                           _I2C_MasterDisableIrq 05ED  
                              ??_I2C_MasterFsm 0058            __size_of_EUSART_DefaultErrorHandler 0003  
                   ??_TMR2_SetInterruptHandler 00A6                                        _PosUart 004E  
                          __end_of_I2C_DO_IDLE 059D                            __end_of_I2C_DO_RCEN 0588  
                                      _Vitesse 004F                                ??_I2C_SetBuffer 0072  
                             ?_TMR2_WriteTimer 0070                        I2C_SetBuffer@bufferSize 0070  
                           __end_of_TMR2_Start 05DB                                 _I2C_MasterOpen 04E9  
                               _I2C_MasterStop 05E4                                 _I2C_Initialize 0517  
                    __size_of_I2C_DO_SEND_STOP 0004                                        __ptext1 056A  
                                      __ptext2 0570                                        __ptext3 05D5  
                                      __ptext4 05D8                                        __ptext5 047D  
                                      __ptext6 0469                                        __ptext7 052B  
                                      __ptext8 0501                                        __ptext9 01FD  
                        ??_I2C_DO_RX_NACK_STOP 0070                          _OSCILLATOR_Initialize 0556  
                                    _T2CONbits 001C                             I2C_SetCallback@idx 0074  
                     __size_of_I2C_MasterClose 0003                       ??_PIN_MANAGER_Initialize 00A4  
                I2C_CallbackReturnReset@funPtr 0079                                      _T2HLTbits 001D  
                           I2C_SetCallback@ptr 0072                       wr1RegCompleteHandler@ptr 0079  
                    I2C_Write1ByteRegister@reg 005D                       __size_of_I2C_MasterStart 0003  
                     __size_of_I2C_MasterWrite 0004                     __size_of_SYSTEM_Initialize 0012  
                                      clrloop0 0565                           end_of_initialization 0039  
                                    _T2RSTbits 001F                                     ?_I2C_DO_RX 0070  
                                   ?_I2C_DO_TX 0070          __end_of_EUSART_SetOverrunErrorHandler 057C  
       __size_of_EUSART_SetOverrunErrorHandler 0006                  _EUSART_SetOverrunErrorHandler 0576  
                    __size_of_I2C_MasterIsNack 0006                                     ?_I2C_Close 0070  
                       ?_rd1RegCompleteHandler 0079                        __end_of_I2C_DO_TX_EMPTY 038B  
                    __size_of_I2C_MasterSetIrq 0003                          ?_I2C_MasterDisableIrq 0070  
                            _EUSART_Initialize 02DE                         ?_wr1RegCompleteHandler 0079  
                           ?_EUSART_Initialize 0070                       __size_of_I2C_SetCallback 0024  
                       __end_of_I2C_MasterOpen 04F5                         __end_of_I2C_MasterStop 05E7  
                       __end_of_I2C_Initialize 0521                    __end_of_TMR2_Counter8BitSet 0576  
                          ??_EUSART_Initialize 00A6                                      _PORTAbits 000C  
              __end_of_rdBlkRegCompleteHandler 043C                           _I2C_MasterSendTxData 059D  
                                    _SSPDATPPS 0E21                __size_of_I2C_DO_RX_NACK_RESTART 0004  
                                    _SSPCLKPPS 0E20                               __CFG_FOSC$INTOSC 0000  
                  ?_I2C_SetAddressNackCallback 0075                          __size_of_EUSART_Write 0008  
                   __size_of_I2C_MasterSendAck 0004                              __size_of_I2C_Open 0037  
                                 ??_MyUART_ISR 0071                __size_of_EUSART_SetErrorHandler 0006  
                   __size_of_I2C_MasterStartRx 0003                        TMR2_WriteTimer@timerVal 00A5  
                    __end_of_EUSART_Initialize 0310                                    _I2C_DO_IDLE 0598  
                                  _I2C_DO_RCEN 0582                     rdBlkRegCompleteHandler@ptr 0079  
                I2C_Write1ByteRegister@address 0060                        ?_I2C_CallbackReturnStop 0079  
                   __end_of_PWM3_LoadDutyValue 0469                       _I2C_DO_SEND_RESTART_READ 05C2  
                 I2C_CallbackReturnStop@funPtr 0079                                ?_I2C_MasterOpen 0070  
                              ?_I2C_MasterStop 0070                                ?_I2C_Initialize 0070  
         __end_of_TMR2_DefaultInterruptHandler 05FE          __size_of_TMR2_DefaultInterruptHandler 0001  
                 _TMR2_DefaultInterruptHandler 05FD                        _I2C_CallbackReturnReset 05F9  
           __end_of_EUSART_DefaultErrorHandler 05F9                     _EUSART_DefaultErrorHandler 05F6  
         __size_of_I2C_SetDataCompleteCallback 000C                                   _EUSART_Write 054E  
                            __size_of_TMR2_ISR 0005                             __end_of_MyUART_ISR 00EF  
                        ?_I2C_MasterSendTxData 0070                         ?_OSCILLATOR_Initialize 0070  
                  ??_I2C_DO_SEND_RESTART_WRITE 0070                            start_initialization 0026  
              __size_of_PIN_MANAGER_Initialize 003B                                  ?_I2C_DO_RESET 0070  
 EUSART_SetRxInterruptHandler@interruptHandler 00A4                                    ??_I2C_DO_RX 007A  
                                  ??_I2C_DO_TX 007A                              ??_I2C_MasterClose 0070  
                       ??_I2C_MasterDisableIrq 0070                                    ??_I2C_Close 0070  
                            ??_I2C_MasterStart 0070                              ??_I2C_MasterWrite 007E  
               __end_of_I2C_CallbackReturnStop 05FD                         _I2C_DO_RX_NACK_RESTART 05AA  
                             ?_I2C_DO_TX_EMPTY 0070                             _I2C_MasterClearIrq 05F3  
               ?_EUSART_SetOverrunErrorHandler 00A4                       __size_of_PWM3_Initialize 000B  
                   _EUSART_FramingErrorHandler 0065                                   ?_MyTimer2ISR 0070  
                       _EUSART_SetErrorHandler 057C                                    _CCPTMRSbits 029E  
                          ?_I2C_MasterClearIrq 0070                    __end_of_I2C_MasterGetRxData 05E1  
                                  __pdataBANK0 0069                          __end_of_I2C_DO_RX_ACK 05B6  
                                    _StateLeds 004D                  ?_TMR2_DefaultInterruptHandler 0070  
                             _I2C_DO_SEND_STOP 05B6                              ??_I2C_SetCallback 0073  
                          I2C_Open@returnValue 0072                             _I2C_MasterSendNack 05CA  
                     ?_I2C_MasterEnableRestart 0070                         __size_of_TMR2_CallBack 000B  
                        _I2C_DO_SEND_ADR_WRITE 055D                                      ___latbits 0002  
                                __pcstackBANK0 0058                                  __pcstackBANK1 00A4  
                               ??_I2C_DO_RESET 0070                       __size_of_TMR2_Initialize 0014  
                          ?_I2C_MasterSendNack 0070                   __end_of_I2C_DO_SEND_ADR_READ 054E  
                         ??_I2C_MasterClearIrq 0070                    __end_of_I2C_DO_ADDRESS_NACK 03D2  
                   __end_of_EUSART_Receive_ISR 02DE                               _I2C_MasterIsNack 0588  
                   __size_of_EUSART_Initialize 0032                      _I2C_DO_SEND_RESTART_WRITE 05BE  
             _EUSART_RxDefaultInterruptHandler 0067                               _I2C_MasterSetIrq 05DB  
                                    __pnvBANK0 0063                                      __pnvBANK1 00A0  
                        _rd2RegCompleteHandler 049F                          __end_of_fsmStateTable 03F2  
                 __end_of_EUSART_RxDataHandler 0453                         _PIN_MANAGER_Initialize 01FD  
                        _wr2RegCompleteHandler 04BF                      ??_I2C_CallbackReturnReset 007A  
                  __end_of_I2C_MasterOperation 040C                           ??_I2C_MasterSendNack 0070  
                     rd2RegCompleteHandler@ptr 0079                                   _eusartRxHead 0057  
                                 _eusartRxTail 0056                         ??_I2C_MasterSendTxData 0070  
                 ??_INTERRUPT_InterruptManager 0062                   __size_of_I2C_DO_SEND_RESTART 0004  
                                     _BAUD1CON 019F                        I2C_MasterOperation@read 005B  
                                     _I2C_Open 0272                                       _T2CLKCON 001E  
                      ??_rd1RegCompleteHandler 007A                                 _eusartRxBuffer 0045  
                      ??_wr1RegCompleteHandler 007A                                       _LATAbits 010C  
       EUSART_SetErrorHandler@interruptHandler 00A4                                       _LATCbits 010E  
                                    clear_ram0 0564                                  _TMR2_CallBack 050C  
                                     _PIE1bits 0090                              _eusartRxLastError 0054  
                     __size_of_TMR2_StartTimer 0003            __size_of_INTERRUPT_InterruptManager 0020  
                                     _PIR1bits 0010                ??_EUSART_SetFramingErrorHandler 00A6  
                                     _PIR2bits 0011                          __end_of_I2C_MasterFsm 0366  
                  __end_of_I2C_DO_RX_NACK_STOP 05B2                           __CFG_WDTCPS$WDTCPS1F 0000  
                                     _SSP1CON1 0215                                       _SSP1CON2 0216  
    __end_of_EUSART_DefaultOverrunErrorHandler 05D2     __size_of_EUSART_DefaultOverrunErrorHandler 0004  
          ??_EUSART_DefaultOverrunErrorHandler 0070             ?_EUSART_DefaultOverrunErrorHandler 0070  
            _EUSART_DefaultOverrunErrorHandler 05CE                                       _TMR2_ISR 058E  
              __end_of_I2C_MasterEnableRestart 05EA                                       _SSP1STAT 0214  
                        __end_of_I2C_SetBuffer 04DD                              ??_PWM3_Initialize 00A4  
                       ?_I2C_DO_SEND_ADR_WRITE 0070                       I2C_MasterSendTxData@data 0070  
               ??_TMR2_DefaultInterruptHandler 0070              __size_of_TMR2_SetInterruptHandler 0009  
                     __size_of_TMR2_WriteTimer 0006                      ?_TMR2_SetInterruptHandler 00A4  
                     wr2RegCompleteHandler@ptr 0079                     ??_I2C_DO_SEND_RESTART_READ 0070  
                     ?_rdBlkRegCompleteHandler 0079                                     _I2C_Poller 0521  
                                   _I2C_Status 0020                                   ?_I2C_DO_IDLE 0070  
                                 ?_I2C_DO_RCEN 0070                              ??_TMR2_Initialize 00A6  
                       ?_rd2RegCompleteHandler 0079                                 ?_TMR2_CallBack 0070  
                             ??_I2C_MasterOpen 0070                         ?_wr2RegCompleteHandler 0079  
                             ??_I2C_MasterStop 0070                       ??_I2C_MasterWaitForEvent 0070  
                             ??_I2C_Initialize 00A4                           __end_of_I2C_DO_RESET 0598  
                     ??_I2C_Write1ByteRegister 005F                                       _StateBat 0069  
                      ??_OSCILLATOR_Initialize 00A4                            _EUSART_ErrorHandler 00A0  
                         _I2C_DO_SEND_ADR_READ 0546                           __size_of_MyTimer2ISR 006D  
                  ?_EUSART_DefaultErrorHandler 0070                             _PWM3_LoadDutyValue 0453  
                              _I2C_MasterClose 05F0                  I2C_SetAddressNackCallback@ptr 0077  
                              I2C_Open@address 0071                                _I2C_MasterStart 05EA  
                              _I2C_MasterWrite 05A2                           _EUSART_RxDataHandler 043C  
                 __size_of_TMR2_Counter8BitSet 0006                                       __ptext10 0556  
                                     __ptext11 0517                                       __ptext20 00EF  
                                     __ptext12 02DE                                       __ptext21 05FD  
                                     __ptext13 0534                                       __ptext30 05A6  
                                     __ptext22 0453                                       __ptext14 0576  
                                     __ptext31 033F                                       __ptext23 0310  
                                     __ptext15 053D                                       __ptext40 05C2  
                                     __ptext32 03AF                                       __ptext24 04DD  
                                     __ptext16 057C                                       __ptext41 0582  
                                     __ptext33 0593                                       __ptext25 0272  
                                     __ptext50 059D                                       __ptext42 0238  
                                     __ptext34 05AA                                       __ptext26 04E9  
                                     __ptext18 058E                                       __ptext51 05C6  
                                     __ptext43 01B2                                       __ptext35 05AE  
                                     __ptext27 05A2                                       __ptext19 050C  
                                     __ptext60 04AF                                       __ptext52 05DE  
                                     __ptext44 055D                                       __ptext36 05B2  
                                     __ptext28 03F2                                       __ptext61 04BF  
                                     __ptext53 05CA                                       __ptext45 0546  
                                     __ptext37 05B6                                       __ptext29 0521  
                                     __ptext70 05F0                                       __ptext62 04F5  
                                     __ptext54 05E1                                       __ptext46 0598  
                                     __ptext38 05BA                                       __ptext71 05F3  
                                     __ptext63 038B                                       __ptext55 05F9  
                                     __ptext47 0366                                       __ptext39 05BE  
                                     __ptext72 02A9                                       __ptext64 04CF  
                                     __ptext56 05FB                                       __ptext48 05DB  
                                     __ptext73 003D                                       __ptext65 05E4  
                                     __ptext57 0425                                       __ptext49 0588  
                                     __ptext74 054E                                       __ptext66 05E7  
                                     __ptext58 048F                            ?_PWM3_LoadDutyValue 0070  
                                     __ptext75 05CE                                       __ptext67 05EA  
                                     __ptext59 049F                                       __ptext76 05FE  
                                     __ptext68 040C                                       __ptext77 05F6  
                                     __ptext69 05ED                                       __ptext78 043C  
                                 _SSP1CON1bits 0215                                   _SSP1CON2bits 0216  
          __end_of_I2C_SetDataCompleteCallback 0501                    _I2C_SetDataCompleteCallback 04F5  
                      ?_I2C_DO_RX_NACK_RESTART 0070                       __end_of_I2C_DO_SEND_STOP 05BA  
                                __size_of_main 0056                           __CFG_WDTCWS$WDTCWSSW 0000  
                      ?_EUSART_SetErrorHandler 00A4                                _I2C_SetCallback 038B  
                ??_I2C_SetDataCompleteCallback 0078                                     _RC1STAbits 019D  
                   I2C_Write1ByteRegister@data 005E  EUSART_SetOverrunErrorHandler@interruptHandler 00A4  
                         ??_PWM3_LoadDutyValue 0072                                       int$flags 007E  
                        ?_I2C_DO_SEND_ADR_READ 0070                              ??_TMR2_StartTimer 00A4  
           __end_of_INTERRUPT_InterruptManager 0024                     _INTERRUPT_InterruptManager 0004  
        __end_of_EUSART_SetFramingErrorHandler 0546         __size_of_EUSART_SetFramingErrorHandler 0009  
                _EUSART_SetFramingErrorHandler 053D                                   _SSP1STATbits 0214  
                     __end_of_I2C_MasterIsNack 058E                       __end_of_I2C_MasterSetIrq 05DE  
                                   _INTCONbits 000B                          ?_EUSART_RxDataHandler 0070  
               __end_of_I2C_DO_RX_NACK_RESTART 05AE                    TMR2_Counter8BitSet@timerVal 00A4  
                                     intlevel1 0000                                    ?_I2C_Poller 0070  
                              ??_TMR2_CallBack 007E                              ??_TMR2_WriteTimer 00A5  
             __size_of_I2C_MasterEnableRestart 0003                        ?_PIN_MANAGER_Initialize 0070  
               __end_of_EUSART_SetErrorHandler 0582                              __CFG_CLKOUTEN$OFF 0000  
                          _I2C_DO_SEND_RESTART 05BA                  __size_of_I2C_MasterDisableIrq 0003  
         __end_of_EUSART_SetRxInterruptHandler 053D          __size_of_EUSART_SetRxInterruptHandler 0009  
                 _EUSART_SetRxInterruptHandler 0534                __size_of_I2C_MasterWaitForEvent 0004  
              __size_of_I2C_Write1ByteRegister 002F                             _EUSART_Receive_ISR 02A9  
EUSART_SetFramingErrorHandler@interruptHandler 00A4                        __end_of_I2C_MasterClose 05F3  
                     __size_of_I2C_DO_TX_EMPTY 0025                    PWM3_LoadDutyValue@dutyValue 0070  
                      __end_of_I2C_MasterStart 05ED                        __end_of_I2C_MasterWrite 05A6  
                                __pstringtext1 03D2                           ?_I2C_DO_SEND_RESTART 0070  
                          ?_EUSART_Receive_ISR 0070                   __size_of_I2C_MasterGetRxData 0003  
                                   _TX1STAbits 019E                                     _TMR2_Start 05D8  
                  __size_of_I2C_MasterClearIrq 0003                             EUSART_Write@txData 0070  
                      __end_of_I2C_SetCallback 03AF                 __end_of_PIN_MANAGER_Initialize 0238  
               __size_of_rd1RegCompleteHandler 0010                  __end_of_rd1RegCompleteHandler 04BF  
                       __size_of_I2C_DO_RX_ACK 0004                 __size_of_wr1RegCompleteHandler 0010  
                         ??_EUSART_Receive_ISR 0071                          __size_of_I2C_DO_RESET 0005  
                __end_of_wr1RegCompleteHandler 049F                          _TMR2_InterruptHandler 0063  
                 __size_of_I2C_DO_ADDRESS_NACK 0023                           __size_of_I2C_DO_IDLE 0005  
                         __size_of_I2C_DO_RCEN 0006                                _PWM3_Initialize 0501  
                           __size_of_I2C_DO_RX 003A                             __size_of_I2C_DO_TX 004B  
