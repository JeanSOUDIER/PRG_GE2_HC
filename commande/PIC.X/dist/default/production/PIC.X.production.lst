

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Mar 30 16:40:51 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	text36,local,class=CODE,merge=1,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,delta=2
    58                           	psect	text43,local,class=CODE,merge=1,delta=2
    59                           	psect	text44,local,class=CODE,merge=1,delta=2
    60                           	psect	text45,local,class=CODE,merge=1,delta=2
    61                           	psect	text46,local,class=CODE,merge=1,delta=2
    62                           	psect	text47,local,class=CODE,merge=1,delta=2
    63                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text55,local,class=CODE,merge=1,delta=2
    71                           	psect	text56,local,class=CODE,merge=1,delta=2
    72                           	psect	text57,local,class=CODE,merge=1,delta=2
    73                           	psect	text58,local,class=CODE,merge=1,delta=2
    74                           	psect	text59,local,class=CODE,merge=1,delta=2
    75                           	psect	text60,local,class=CODE,merge=1,delta=2
    76                           	psect	text61,local,class=CODE,merge=1,delta=2
    77                           	psect	text62,local,class=CODE,merge=1,delta=2
    78                           	psect	text63,local,class=CODE,merge=1,delta=2
    79                           	psect	text64,local,class=CODE,merge=1,delta=2
    80                           	psect	text65,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text66,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text67,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text68,local,class=CODE,merge=1,delta=2
    84                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    87                           	psect	text72,local,class=CODE,merge=1,delta=2
    88                           	psect	text73,local,class=CODE,merge=1,delta=2
    89                           	psect	text74,local,class=CODE,merge=1,delta=2
    90                           	psect	text75,local,class=CODE,merge=1,delta=2
    91                           	psect	text76,local,class=CODE,merge=1,delta=2
    92                           	psect	text77,local,class=CODE,merge=1,delta=2
    93                           	psect	text78,local,class=CODE,merge=1,delta=2
    94                           	dabs	1,0x7E,2
    95  0000                     
    96                           ; Version 1.45
    97                           ; Generated 16/11/2017 GMT
    98                           ; 
    99                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   100                           ; All rights reserved.
   101                           ; 
   102                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   103                           ; 
   104                           ; Redistribution and use in source and binary forms, with or without modification, are
   105                           ; permitted provided that the following conditions are met:
   106                           ; 
   107                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   108                           ;        conditions and the following disclaimer.
   109                           ; 
   110                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   111                           ;        of conditions and the following disclaimer in the documentation and/or other
   112                           ;        materials provided with the distribution.
   113                           ; 
   114                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   115                           ;        software without specific prior written permission.
   116                           ; 
   117                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   118                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   119                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   120                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   121                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   122                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   123                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   124                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   125                           ; 
   126                           ; 
   127                           ; Code-generator required, PIC16F1619 Definitions
   128                           ; 
   129                           ; SFR Addresses
   130  0000                     	;# 
   131  0001                     	;# 
   132  0002                     	;# 
   133  0003                     	;# 
   134  0004                     	;# 
   135  0005                     	;# 
   136  0006                     	;# 
   137  0007                     	;# 
   138  0008                     	;# 
   139  0009                     	;# 
   140  000A                     	;# 
   141  000B                     	;# 
   142  000C                     	;# 
   143  000D                     	;# 
   144  000E                     	;# 
   145  0010                     	;# 
   146  0011                     	;# 
   147  0012                     	;# 
   148  0013                     	;# 
   149  0014                     	;# 
   150  0015                     	;# 
   151  0016                     	;# 
   152  0016                     	;# 
   153  0017                     	;# 
   154  0018                     	;# 
   155  0019                     	;# 
   156  001A                     	;# 
   157  001A                     	;# 
   158  001B                     	;# 
   159  001B                     	;# 
   160  001C                     	;# 
   161  001D                     	;# 
   162  001E                     	;# 
   163  001F                     	;# 
   164  008C                     	;# 
   165  008D                     	;# 
   166  008E                     	;# 
   167  0090                     	;# 
   168  0091                     	;# 
   169  0092                     	;# 
   170  0093                     	;# 
   171  0094                     	;# 
   172  0095                     	;# 
   173  0096                     	;# 
   174  0098                     	;# 
   175  0099                     	;# 
   176  009A                     	;# 
   177  009B                     	;# 
   178  009B                     	;# 
   179  009C                     	;# 
   180  009D                     	;# 
   181  009E                     	;# 
   182  009F                     	;# 
   183  010C                     	;# 
   184  010D                     	;# 
   185  010E                     	;# 
   186  0111                     	;# 
   187  0112                     	;# 
   188  0113                     	;# 
   189  0114                     	;# 
   190  0115                     	;# 
   191  0116                     	;# 
   192  0117                     	;# 
   193  0118                     	;# 
   194  0119                     	;# 
   195  011C                     	;# 
   196  018C                     	;# 
   197  018D                     	;# 
   198  018E                     	;# 
   199  0191                     	;# 
   200  0191                     	;# 
   201  0192                     	;# 
   202  0193                     	;# 
   203  0193                     	;# 
   204  0194                     	;# 
   205  0195                     	;# 
   206  0196                     	;# 
   207  0197                     	;# 
   208  0199                     	;# 
   209  0199                     	;# 
   210  0199                     	;# 
   211  019A                     	;# 
   212  019A                     	;# 
   213  019A                     	;# 
   214  019B                     	;# 
   215  019B                     	;# 
   216  019B                     	;# 
   217  019B                     	;# 
   218  019B                     	;# 
   219  019C                     	;# 
   220  019C                     	;# 
   221  019C                     	;# 
   222  019D                     	;# 
   223  019D                     	;# 
   224  019D                     	;# 
   225  019E                     	;# 
   226  019E                     	;# 
   227  019E                     	;# 
   228  019F                     	;# 
   229  019F                     	;# 
   230  019F                     	;# 
   231  019F                     	;# 
   232  019F                     	;# 
   233  020C                     	;# 
   234  020D                     	;# 
   235  020E                     	;# 
   236  0211                     	;# 
   237  0211                     	;# 
   238  0212                     	;# 
   239  0212                     	;# 
   240  0213                     	;# 
   241  0213                     	;# 
   242  0214                     	;# 
   243  0214                     	;# 
   244  0215                     	;# 
   245  0215                     	;# 
   246  0215                     	;# 
   247  0215                     	;# 
   248  0216                     	;# 
   249  0216                     	;# 
   250  0217                     	;# 
   251  0217                     	;# 
   252  028C                     	;# 
   253  028D                     	;# 
   254  028E                     	;# 
   255  0291                     	;# 
   256  0291                     	;# 
   257  0292                     	;# 
   258  0293                     	;# 
   259  0294                     	;# 
   260  0298                     	;# 
   261  0298                     	;# 
   262  0299                     	;# 
   263  029A                     	;# 
   264  029B                     	;# 
   265  029E                     	;# 
   266  030C                     	;# 
   267  030D                     	;# 
   268  030E                     	;# 
   269  038C                     	;# 
   270  038D                     	;# 
   271  038E                     	;# 
   272  0391                     	;# 
   273  0392                     	;# 
   274  0393                     	;# 
   275  0394                     	;# 
   276  0395                     	;# 
   277  0396                     	;# 
   278  0397                     	;# 
   279  0398                     	;# 
   280  0399                     	;# 
   281  040E                     	;# 
   282  0413                     	;# 
   283  0413                     	;# 
   284  0414                     	;# 
   285  0414                     	;# 
   286  0415                     	;# 
   287  0416                     	;# 
   288  0417                     	;# 
   289  0418                     	;# 
   290  041A                     	;# 
   291  041A                     	;# 
   292  041B                     	;# 
   293  041B                     	;# 
   294  041C                     	;# 
   295  041D                     	;# 
   296  041E                     	;# 
   297  041F                     	;# 
   298  0493                     	;# 
   299  0494                     	;# 
   300  0495                     	;# 
   301  0496                     	;# 
   302  049A                     	;# 
   303  049B                     	;# 
   304  049C                     	;# 
   305  049D                     	;# 
   306  058C                     	;# 
   307  058C                     	;# 
   308  058D                     	;# 
   309  058E                     	;# 
   310  058E                     	;# 
   311  058F                     	;# 
   312  0590                     	;# 
   313  0590                     	;# 
   314  0591                     	;# 
   315  0592                     	;# 
   316  0592                     	;# 
   317  0593                     	;# 
   318  0594                     	;# 
   319  0594                     	;# 
   320  0595                     	;# 
   321  0596                     	;# 
   322  0596                     	;# 
   323  0597                     	;# 
   324  0598                     	;# 
   325  0599                     	;# 
   326  059A                     	;# 
   327  059B                     	;# 
   328  059B                     	;# 
   329  059C                     	;# 
   330  059D                     	;# 
   331  060C                     	;# 
   332  060C                     	;# 
   333  060D                     	;# 
   334  060E                     	;# 
   335  060F                     	;# 
   336  060F                     	;# 
   337  0610                     	;# 
   338  0611                     	;# 
   339  0612                     	;# 
   340  0613                     	;# 
   341  0614                     	;# 
   342  0617                     	;# 
   343  0618                     	;# 
   344  0619                     	;# 
   345  061A                     	;# 
   346  061B                     	;# 
   347  061C                     	;# 
   348  0691                     	;# 
   349  0692                     	;# 
   350  0693                     	;# 
   351  0694                     	;# 
   352  0695                     	;# 
   353  0696                     	;# 
   354  0697                     	;# 
   355  0699                     	;# 
   356  069A                     	;# 
   357  0711                     	;# 
   358  0712                     	;# 
   359  0713                     	;# 
   360  0714                     	;# 
   361  0715                     	;# 
   362  0718                     	;# 
   363  0718                     	;# 
   364  0719                     	;# 
   365  071A                     	;# 
   366  071A                     	;# 
   367  071B                     	;# 
   368  071C                     	;# 
   369  071D                     	;# 
   370  0791                     	;# 
   371  0791                     	;# 
   372  0792                     	;# 
   373  0793                     	;# 
   374  0793                     	;# 
   375  0794                     	;# 
   376  0795                     	;# 
   377  0795                     	;# 
   378  0796                     	;# 
   379  0797                     	;# 
   380  0797                     	;# 
   381  0798                     	;# 
   382  0799                     	;# 
   383  079A                     	;# 
   384  080C                     	;# 
   385  080C                     	;# 
   386  080D                     	;# 
   387  080E                     	;# 
   388  080E                     	;# 
   389  080F                     	;# 
   390  0810                     	;# 
   391  0810                     	;# 
   392  0811                     	;# 
   393  0812                     	;# 
   394  0812                     	;# 
   395  0813                     	;# 
   396  0814                     	;# 
   397  0815                     	;# 
   398  0816                     	;# 
   399  0817                     	;# 
   400  0818                     	;# 
   401  0819                     	;# 
   402  081A                     	;# 
   403  081A                     	;# 
   404  081B                     	;# 
   405  081C                     	;# 
   406  081C                     	;# 
   407  081D                     	;# 
   408  088C                     	;# 
   409  088D                     	;# 
   410  088E                     	;# 
   411  088F                     	;# 
   412  088F                     	;# 
   413  0890                     	;# 
   414  0891                     	;# 
   415  0892                     	;# 
   416  0893                     	;# 
   417  0893                     	;# 
   418  0894                     	;# 
   419  0895                     	;# 
   420  0896                     	;# 
   421  0897                     	;# 
   422  0897                     	;# 
   423  0898                     	;# 
   424  0899                     	;# 
   425  0D8C                     	;# 
   426  0D8C                     	;# 
   427  0D8D                     	;# 
   428  0D8E                     	;# 
   429  0D8F                     	;# 
   430  0D8F                     	;# 
   431  0D90                     	;# 
   432  0D91                     	;# 
   433  0D92                     	;# 
   434  0D92                     	;# 
   435  0D93                     	;# 
   436  0D94                     	;# 
   437  0D95                     	;# 
   438  0D95                     	;# 
   439  0D96                     	;# 
   440  0D97                     	;# 
   441  0D98                     	;# 
   442  0D99                     	;# 
   443  0D9A                     	;# 
   444  0D9B                     	;# 
   445  0D9C                     	;# 
   446  0D9D                     	;# 
   447  0D9E                     	;# 
   448  0D9E                     	;# 
   449  0D9F                     	;# 
   450  0DA0                     	;# 
   451  0DA1                     	;# 
   452  0DA1                     	;# 
   453  0DA2                     	;# 
   454  0DA3                     	;# 
   455  0DA4                     	;# 
   456  0DA4                     	;# 
   457  0DA5                     	;# 
   458  0DA6                     	;# 
   459  0DA7                     	;# 
   460  0DA7                     	;# 
   461  0DA8                     	;# 
   462  0DA9                     	;# 
   463  0DAA                     	;# 
   464  0DAB                     	;# 
   465  0DAC                     	;# 
   466  0DAD                     	;# 
   467  0DAE                     	;# 
   468  0DAF                     	;# 
   469  0E0F                     	;# 
   470  0E10                     	;# 
   471  0E11                     	;# 
   472  0E12                     	;# 
   473  0E13                     	;# 
   474  0E14                     	;# 
   475  0E15                     	;# 
   476  0E16                     	;# 
   477  0E17                     	;# 
   478  0E18                     	;# 
   479  0E19                     	;# 
   480  0E1A                     	;# 
   481  0E1B                     	;# 
   482  0E1C                     	;# 
   483  0E1D                     	;# 
   484  0E1E                     	;# 
   485  0E1F                     	;# 
   486  0E20                     	;# 
   487  0E21                     	;# 
   488  0E22                     	;# 
   489  0E23                     	;# 
   490  0E24                     	;# 
   491  0E25                     	;# 
   492  0E26                     	;# 
   493  0E27                     	;# 
   494  0E28                     	;# 
   495  0E29                     	;# 
   496  0E2A                     	;# 
   497  0E2B                     	;# 
   498  0E2C                     	;# 
   499  0E2D                     	;# 
   500  0E2E                     	;# 
   501  0E90                     	;# 
   502  0E91                     	;# 
   503  0E92                     	;# 
   504  0E94                     	;# 
   505  0E95                     	;# 
   506  0E9C                     	;# 
   507  0E9D                     	;# 
   508  0E9E                     	;# 
   509  0E9F                     	;# 
   510  0EA0                     	;# 
   511  0EA1                     	;# 
   512  0EA2                     	;# 
   513  0EA3                     	;# 
   514  0EA4                     	;# 
   515  0EA5                     	;# 
   516  0EA6                     	;# 
   517  0EA7                     	;# 
   518  0F0F                     	;# 
   519  0F10                     	;# 
   520  0F11                     	;# 
   521  0F12                     	;# 
   522  0F13                     	;# 
   523  0F14                     	;# 
   524  0F15                     	;# 
   525  0F16                     	;# 
   526  0F17                     	;# 
   527  0F18                     	;# 
   528  0F19                     	;# 
   529  0F1A                     	;# 
   530  0F1B                     	;# 
   531  0F1C                     	;# 
   532  0F1D                     	;# 
   533  0F1E                     	;# 
   534  0F1F                     	;# 
   535  0F20                     	;# 
   536  0F21                     	;# 
   537  0F22                     	;# 
   538  0F23                     	;# 
   539  0F24                     	;# 
   540  0F25                     	;# 
   541  0F26                     	;# 
   542  0F27                     	;# 
   543  0F28                     	;# 
   544  0F29                     	;# 
   545  0F2A                     	;# 
   546  0F2B                     	;# 
   547  0F2C                     	;# 
   548  0F2D                     	;# 
   549  0F2E                     	;# 
   550  0F2F                     	;# 
   551  0F30                     	;# 
   552  0F31                     	;# 
   553  0F32                     	;# 
   554  0F33                     	;# 
   555  0F34                     	;# 
   556  0F35                     	;# 
   557  0F36                     	;# 
   558  0F37                     	;# 
   559  0FE4                     	;# 
   560  0FE5                     	;# 
   561  0FE6                     	;# 
   562  0FE7                     	;# 
   563  0FE8                     	;# 
   564  0FE9                     	;# 
   565  0FEA                     	;# 
   566  0FEB                     	;# 
   567  0FED                     	;# 
   568  0FEE                     	;# 
   569  0FEF                     	;# 
   570  0000                     	;# 
   571  0001                     	;# 
   572  0002                     	;# 
   573  0003                     	;# 
   574  0004                     	;# 
   575  0005                     	;# 
   576  0006                     	;# 
   577  0007                     	;# 
   578  0008                     	;# 
   579  0009                     	;# 
   580  000A                     	;# 
   581  000B                     	;# 
   582  000C                     	;# 
   583  000D                     	;# 
   584  000E                     	;# 
   585  0010                     	;# 
   586  0011                     	;# 
   587  0012                     	;# 
   588  0013                     	;# 
   589  0014                     	;# 
   590  0015                     	;# 
   591  0016                     	;# 
   592  0016                     	;# 
   593  0017                     	;# 
   594  0018                     	;# 
   595  0019                     	;# 
   596  001A                     	;# 
   597  001A                     	;# 
   598  001B                     	;# 
   599  001B                     	;# 
   600  001C                     	;# 
   601  001D                     	;# 
   602  001E                     	;# 
   603  001F                     	;# 
   604  008C                     	;# 
   605  008D                     	;# 
   606  008E                     	;# 
   607  0090                     	;# 
   608  0091                     	;# 
   609  0092                     	;# 
   610  0093                     	;# 
   611  0094                     	;# 
   612  0095                     	;# 
   613  0096                     	;# 
   614  0098                     	;# 
   615  0099                     	;# 
   616  009A                     	;# 
   617  009B                     	;# 
   618  009B                     	;# 
   619  009C                     	;# 
   620  009D                     	;# 
   621  009E                     	;# 
   622  009F                     	;# 
   623  010C                     	;# 
   624  010D                     	;# 
   625  010E                     	;# 
   626  0111                     	;# 
   627  0112                     	;# 
   628  0113                     	;# 
   629  0114                     	;# 
   630  0115                     	;# 
   631  0116                     	;# 
   632  0117                     	;# 
   633  0118                     	;# 
   634  0119                     	;# 
   635  011C                     	;# 
   636  018C                     	;# 
   637  018D                     	;# 
   638  018E                     	;# 
   639  0191                     	;# 
   640  0191                     	;# 
   641  0192                     	;# 
   642  0193                     	;# 
   643  0193                     	;# 
   644  0194                     	;# 
   645  0195                     	;# 
   646  0196                     	;# 
   647  0197                     	;# 
   648  0199                     	;# 
   649  0199                     	;# 
   650  0199                     	;# 
   651  019A                     	;# 
   652  019A                     	;# 
   653  019A                     	;# 
   654  019B                     	;# 
   655  019B                     	;# 
   656  019B                     	;# 
   657  019B                     	;# 
   658  019B                     	;# 
   659  019C                     	;# 
   660  019C                     	;# 
   661  019C                     	;# 
   662  019D                     	;# 
   663  019D                     	;# 
   664  019D                     	;# 
   665  019E                     	;# 
   666  019E                     	;# 
   667  019E                     	;# 
   668  019F                     	;# 
   669  019F                     	;# 
   670  019F                     	;# 
   671  019F                     	;# 
   672  019F                     	;# 
   673  020C                     	;# 
   674  020D                     	;# 
   675  020E                     	;# 
   676  0211                     	;# 
   677  0211                     	;# 
   678  0212                     	;# 
   679  0212                     	;# 
   680  0213                     	;# 
   681  0213                     	;# 
   682  0214                     	;# 
   683  0214                     	;# 
   684  0215                     	;# 
   685  0215                     	;# 
   686  0215                     	;# 
   687  0215                     	;# 
   688  0216                     	;# 
   689  0216                     	;# 
   690  0217                     	;# 
   691  0217                     	;# 
   692  028C                     	;# 
   693  028D                     	;# 
   694  028E                     	;# 
   695  0291                     	;# 
   696  0291                     	;# 
   697  0292                     	;# 
   698  0293                     	;# 
   699  0294                     	;# 
   700  0298                     	;# 
   701  0298                     	;# 
   702  0299                     	;# 
   703  029A                     	;# 
   704  029B                     	;# 
   705  029E                     	;# 
   706  030C                     	;# 
   707  030D                     	;# 
   708  030E                     	;# 
   709  038C                     	;# 
   710  038D                     	;# 
   711  038E                     	;# 
   712  0391                     	;# 
   713  0392                     	;# 
   714  0393                     	;# 
   715  0394                     	;# 
   716  0395                     	;# 
   717  0396                     	;# 
   718  0397                     	;# 
   719  0398                     	;# 
   720  0399                     	;# 
   721  040E                     	;# 
   722  0413                     	;# 
   723  0413                     	;# 
   724  0414                     	;# 
   725  0414                     	;# 
   726  0415                     	;# 
   727  0416                     	;# 
   728  0417                     	;# 
   729  0418                     	;# 
   730  041A                     	;# 
   731  041A                     	;# 
   732  041B                     	;# 
   733  041B                     	;# 
   734  041C                     	;# 
   735  041D                     	;# 
   736  041E                     	;# 
   737  041F                     	;# 
   738  0493                     	;# 
   739  0494                     	;# 
   740  0495                     	;# 
   741  0496                     	;# 
   742  049A                     	;# 
   743  049B                     	;# 
   744  049C                     	;# 
   745  049D                     	;# 
   746  058C                     	;# 
   747  058C                     	;# 
   748  058D                     	;# 
   749  058E                     	;# 
   750  058E                     	;# 
   751  058F                     	;# 
   752  0590                     	;# 
   753  0590                     	;# 
   754  0591                     	;# 
   755  0592                     	;# 
   756  0592                     	;# 
   757  0593                     	;# 
   758  0594                     	;# 
   759  0594                     	;# 
   760  0595                     	;# 
   761  0596                     	;# 
   762  0596                     	;# 
   763  0597                     	;# 
   764  0598                     	;# 
   765  0599                     	;# 
   766  059A                     	;# 
   767  059B                     	;# 
   768  059B                     	;# 
   769  059C                     	;# 
   770  059D                     	;# 
   771  060C                     	;# 
   772  060C                     	;# 
   773  060D                     	;# 
   774  060E                     	;# 
   775  060F                     	;# 
   776  060F                     	;# 
   777  0610                     	;# 
   778  0611                     	;# 
   779  0612                     	;# 
   780  0613                     	;# 
   781  0614                     	;# 
   782  0617                     	;# 
   783  0618                     	;# 
   784  0619                     	;# 
   785  061A                     	;# 
   786  061B                     	;# 
   787  061C                     	;# 
   788  0691                     	;# 
   789  0692                     	;# 
   790  0693                     	;# 
   791  0694                     	;# 
   792  0695                     	;# 
   793  0696                     	;# 
   794  0697                     	;# 
   795  0699                     	;# 
   796  069A                     	;# 
   797  0711                     	;# 
   798  0712                     	;# 
   799  0713                     	;# 
   800  0714                     	;# 
   801  0715                     	;# 
   802  0718                     	;# 
   803  0718                     	;# 
   804  0719                     	;# 
   805  071A                     	;# 
   806  071A                     	;# 
   807  071B                     	;# 
   808  071C                     	;# 
   809  071D                     	;# 
   810  0791                     	;# 
   811  0791                     	;# 
   812  0792                     	;# 
   813  0793                     	;# 
   814  0793                     	;# 
   815  0794                     	;# 
   816  0795                     	;# 
   817  0795                     	;# 
   818  0796                     	;# 
   819  0797                     	;# 
   820  0797                     	;# 
   821  0798                     	;# 
   822  0799                     	;# 
   823  079A                     	;# 
   824  080C                     	;# 
   825  080C                     	;# 
   826  080D                     	;# 
   827  080E                     	;# 
   828  080E                     	;# 
   829  080F                     	;# 
   830  0810                     	;# 
   831  0810                     	;# 
   832  0811                     	;# 
   833  0812                     	;# 
   834  0812                     	;# 
   835  0813                     	;# 
   836  0814                     	;# 
   837  0815                     	;# 
   838  0816                     	;# 
   839  0817                     	;# 
   840  0818                     	;# 
   841  0819                     	;# 
   842  081A                     	;# 
   843  081A                     	;# 
   844  081B                     	;# 
   845  081C                     	;# 
   846  081C                     	;# 
   847  081D                     	;# 
   848  088C                     	;# 
   849  088D                     	;# 
   850  088E                     	;# 
   851  088F                     	;# 
   852  088F                     	;# 
   853  0890                     	;# 
   854  0891                     	;# 
   855  0892                     	;# 
   856  0893                     	;# 
   857  0893                     	;# 
   858  0894                     	;# 
   859  0895                     	;# 
   860  0896                     	;# 
   861  0897                     	;# 
   862  0897                     	;# 
   863  0898                     	;# 
   864  0899                     	;# 
   865  0D8C                     	;# 
   866  0D8C                     	;# 
   867  0D8D                     	;# 
   868  0D8E                     	;# 
   869  0D8F                     	;# 
   870  0D8F                     	;# 
   871  0D90                     	;# 
   872  0D91                     	;# 
   873  0D92                     	;# 
   874  0D92                     	;# 
   875  0D93                     	;# 
   876  0D94                     	;# 
   877  0D95                     	;# 
   878  0D95                     	;# 
   879  0D96                     	;# 
   880  0D97                     	;# 
   881  0D98                     	;# 
   882  0D99                     	;# 
   883  0D9A                     	;# 
   884  0D9B                     	;# 
   885  0D9C                     	;# 
   886  0D9D                     	;# 
   887  0D9E                     	;# 
   888  0D9E                     	;# 
   889  0D9F                     	;# 
   890  0DA0                     	;# 
   891  0DA1                     	;# 
   892  0DA1                     	;# 
   893  0DA2                     	;# 
   894  0DA3                     	;# 
   895  0DA4                     	;# 
   896  0DA4                     	;# 
   897  0DA5                     	;# 
   898  0DA6                     	;# 
   899  0DA7                     	;# 
   900  0DA7                     	;# 
   901  0DA8                     	;# 
   902  0DA9                     	;# 
   903  0DAA                     	;# 
   904  0DAB                     	;# 
   905  0DAC                     	;# 
   906  0DAD                     	;# 
   907  0DAE                     	;# 
   908  0DAF                     	;# 
   909  0E0F                     	;# 
   910  0E10                     	;# 
   911  0E11                     	;# 
   912  0E12                     	;# 
   913  0E13                     	;# 
   914  0E14                     	;# 
   915  0E15                     	;# 
   916  0E16                     	;# 
   917  0E17                     	;# 
   918  0E18                     	;# 
   919  0E19                     	;# 
   920  0E1A                     	;# 
   921  0E1B                     	;# 
   922  0E1C                     	;# 
   923  0E1D                     	;# 
   924  0E1E                     	;# 
   925  0E1F                     	;# 
   926  0E20                     	;# 
   927  0E21                     	;# 
   928  0E22                     	;# 
   929  0E23                     	;# 
   930  0E24                     	;# 
   931  0E25                     	;# 
   932  0E26                     	;# 
   933  0E27                     	;# 
   934  0E28                     	;# 
   935  0E29                     	;# 
   936  0E2A                     	;# 
   937  0E2B                     	;# 
   938  0E2C                     	;# 
   939  0E2D                     	;# 
   940  0E2E                     	;# 
   941  0E90                     	;# 
   942  0E91                     	;# 
   943  0E92                     	;# 
   944  0E94                     	;# 
   945  0E95                     	;# 
   946  0E9C                     	;# 
   947  0E9D                     	;# 
   948  0E9E                     	;# 
   949  0E9F                     	;# 
   950  0EA0                     	;# 
   951  0EA1                     	;# 
   952  0EA2                     	;# 
   953  0EA3                     	;# 
   954  0EA4                     	;# 
   955  0EA5                     	;# 
   956  0EA6                     	;# 
   957  0EA7                     	;# 
   958  0F0F                     	;# 
   959  0F10                     	;# 
   960  0F11                     	;# 
   961  0F12                     	;# 
   962  0F13                     	;# 
   963  0F14                     	;# 
   964  0F15                     	;# 
   965  0F16                     	;# 
   966  0F17                     	;# 
   967  0F18                     	;# 
   968  0F19                     	;# 
   969  0F1A                     	;# 
   970  0F1B                     	;# 
   971  0F1C                     	;# 
   972  0F1D                     	;# 
   973  0F1E                     	;# 
   974  0F1F                     	;# 
   975  0F20                     	;# 
   976  0F21                     	;# 
   977  0F22                     	;# 
   978  0F23                     	;# 
   979  0F24                     	;# 
   980  0F25                     	;# 
   981  0F26                     	;# 
   982  0F27                     	;# 
   983  0F28                     	;# 
   984  0F29                     	;# 
   985  0F2A                     	;# 
   986  0F2B                     	;# 
   987  0F2C                     	;# 
   988  0F2D                     	;# 
   989  0F2E                     	;# 
   990  0F2F                     	;# 
   991  0F30                     	;# 
   992  0F31                     	;# 
   993  0F32                     	;# 
   994  0F33                     	;# 
   995  0F34                     	;# 
   996  0F35                     	;# 
   997  0F36                     	;# 
   998  0F37                     	;# 
   999  0FE4                     	;# 
  1000  0FE5                     	;# 
  1001  0FE6                     	;# 
  1002  0FE7                     	;# 
  1003  0FE8                     	;# 
  1004  0FE9                     	;# 
  1005  0FEA                     	;# 
  1006  0FEB                     	;# 
  1007  0FED                     	;# 
  1008  0FEE                     	;# 
  1009  0FEF                     	;# 
  1010  0000                     	;# 
  1011  0001                     	;# 
  1012  0002                     	;# 
  1013  0003                     	;# 
  1014  0004                     	;# 
  1015  0005                     	;# 
  1016  0006                     	;# 
  1017  0007                     	;# 
  1018  0008                     	;# 
  1019  0009                     	;# 
  1020  000A                     	;# 
  1021  000B                     	;# 
  1022  000C                     	;# 
  1023  000D                     	;# 
  1024  000E                     	;# 
  1025  0010                     	;# 
  1026  0011                     	;# 
  1027  0012                     	;# 
  1028  0013                     	;# 
  1029  0014                     	;# 
  1030  0015                     	;# 
  1031  0016                     	;# 
  1032  0016                     	;# 
  1033  0017                     	;# 
  1034  0018                     	;# 
  1035  0019                     	;# 
  1036  001A                     	;# 
  1037  001A                     	;# 
  1038  001B                     	;# 
  1039  001B                     	;# 
  1040  001C                     	;# 
  1041  001D                     	;# 
  1042  001E                     	;# 
  1043  001F                     	;# 
  1044  008C                     	;# 
  1045  008D                     	;# 
  1046  008E                     	;# 
  1047  0090                     	;# 
  1048  0091                     	;# 
  1049  0092                     	;# 
  1050  0093                     	;# 
  1051  0094                     	;# 
  1052  0095                     	;# 
  1053  0096                     	;# 
  1054  0098                     	;# 
  1055  0099                     	;# 
  1056  009A                     	;# 
  1057  009B                     	;# 
  1058  009B                     	;# 
  1059  009C                     	;# 
  1060  009D                     	;# 
  1061  009E                     	;# 
  1062  009F                     	;# 
  1063  010C                     	;# 
  1064  010D                     	;# 
  1065  010E                     	;# 
  1066  0111                     	;# 
  1067  0112                     	;# 
  1068  0113                     	;# 
  1069  0114                     	;# 
  1070  0115                     	;# 
  1071  0116                     	;# 
  1072  0117                     	;# 
  1073  0118                     	;# 
  1074  0119                     	;# 
  1075  011C                     	;# 
  1076  018C                     	;# 
  1077  018D                     	;# 
  1078  018E                     	;# 
  1079  0191                     	;# 
  1080  0191                     	;# 
  1081  0192                     	;# 
  1082  0193                     	;# 
  1083  0193                     	;# 
  1084  0194                     	;# 
  1085  0195                     	;# 
  1086  0196                     	;# 
  1087  0197                     	;# 
  1088  0199                     	;# 
  1089  0199                     	;# 
  1090  0199                     	;# 
  1091  019A                     	;# 
  1092  019A                     	;# 
  1093  019A                     	;# 
  1094  019B                     	;# 
  1095  019B                     	;# 
  1096  019B                     	;# 
  1097  019B                     	;# 
  1098  019B                     	;# 
  1099  019C                     	;# 
  1100  019C                     	;# 
  1101  019C                     	;# 
  1102  019D                     	;# 
  1103  019D                     	;# 
  1104  019D                     	;# 
  1105  019E                     	;# 
  1106  019E                     	;# 
  1107  019E                     	;# 
  1108  019F                     	;# 
  1109  019F                     	;# 
  1110  019F                     	;# 
  1111  019F                     	;# 
  1112  019F                     	;# 
  1113  020C                     	;# 
  1114  020D                     	;# 
  1115  020E                     	;# 
  1116  0211                     	;# 
  1117  0211                     	;# 
  1118  0212                     	;# 
  1119  0212                     	;# 
  1120  0213                     	;# 
  1121  0213                     	;# 
  1122  0214                     	;# 
  1123  0214                     	;# 
  1124  0215                     	;# 
  1125  0215                     	;# 
  1126  0215                     	;# 
  1127  0215                     	;# 
  1128  0216                     	;# 
  1129  0216                     	;# 
  1130  0217                     	;# 
  1131  0217                     	;# 
  1132  028C                     	;# 
  1133  028D                     	;# 
  1134  028E                     	;# 
  1135  0291                     	;# 
  1136  0291                     	;# 
  1137  0292                     	;# 
  1138  0293                     	;# 
  1139  0294                     	;# 
  1140  0298                     	;# 
  1141  0298                     	;# 
  1142  0299                     	;# 
  1143  029A                     	;# 
  1144  029B                     	;# 
  1145  029E                     	;# 
  1146  030C                     	;# 
  1147  030D                     	;# 
  1148  030E                     	;# 
  1149  038C                     	;# 
  1150  038D                     	;# 
  1151  038E                     	;# 
  1152  0391                     	;# 
  1153  0392                     	;# 
  1154  0393                     	;# 
  1155  0394                     	;# 
  1156  0395                     	;# 
  1157  0396                     	;# 
  1158  0397                     	;# 
  1159  0398                     	;# 
  1160  0399                     	;# 
  1161  040E                     	;# 
  1162  0413                     	;# 
  1163  0413                     	;# 
  1164  0414                     	;# 
  1165  0414                     	;# 
  1166  0415                     	;# 
  1167  0416                     	;# 
  1168  0417                     	;# 
  1169  0418                     	;# 
  1170  041A                     	;# 
  1171  041A                     	;# 
  1172  041B                     	;# 
  1173  041B                     	;# 
  1174  041C                     	;# 
  1175  041D                     	;# 
  1176  041E                     	;# 
  1177  041F                     	;# 
  1178  0493                     	;# 
  1179  0494                     	;# 
  1180  0495                     	;# 
  1181  0496                     	;# 
  1182  049A                     	;# 
  1183  049B                     	;# 
  1184  049C                     	;# 
  1185  049D                     	;# 
  1186  058C                     	;# 
  1187  058C                     	;# 
  1188  058D                     	;# 
  1189  058E                     	;# 
  1190  058E                     	;# 
  1191  058F                     	;# 
  1192  0590                     	;# 
  1193  0590                     	;# 
  1194  0591                     	;# 
  1195  0592                     	;# 
  1196  0592                     	;# 
  1197  0593                     	;# 
  1198  0594                     	;# 
  1199  0594                     	;# 
  1200  0595                     	;# 
  1201  0596                     	;# 
  1202  0596                     	;# 
  1203  0597                     	;# 
  1204  0598                     	;# 
  1205  0599                     	;# 
  1206  059A                     	;# 
  1207  059B                     	;# 
  1208  059B                     	;# 
  1209  059C                     	;# 
  1210  059D                     	;# 
  1211  060C                     	;# 
  1212  060C                     	;# 
  1213  060D                     	;# 
  1214  060E                     	;# 
  1215  060F                     	;# 
  1216  060F                     	;# 
  1217  0610                     	;# 
  1218  0611                     	;# 
  1219  0612                     	;# 
  1220  0613                     	;# 
  1221  0614                     	;# 
  1222  0617                     	;# 
  1223  0618                     	;# 
  1224  0619                     	;# 
  1225  061A                     	;# 
  1226  061B                     	;# 
  1227  061C                     	;# 
  1228  0691                     	;# 
  1229  0692                     	;# 
  1230  0693                     	;# 
  1231  0694                     	;# 
  1232  0695                     	;# 
  1233  0696                     	;# 
  1234  0697                     	;# 
  1235  0699                     	;# 
  1236  069A                     	;# 
  1237  0711                     	;# 
  1238  0712                     	;# 
  1239  0713                     	;# 
  1240  0714                     	;# 
  1241  0715                     	;# 
  1242  0718                     	;# 
  1243  0718                     	;# 
  1244  0719                     	;# 
  1245  071A                     	;# 
  1246  071A                     	;# 
  1247  071B                     	;# 
  1248  071C                     	;# 
  1249  071D                     	;# 
  1250  0791                     	;# 
  1251  0791                     	;# 
  1252  0792                     	;# 
  1253  0793                     	;# 
  1254  0793                     	;# 
  1255  0794                     	;# 
  1256  0795                     	;# 
  1257  0795                     	;# 
  1258  0796                     	;# 
  1259  0797                     	;# 
  1260  0797                     	;# 
  1261  0798                     	;# 
  1262  0799                     	;# 
  1263  079A                     	;# 
  1264  080C                     	;# 
  1265  080C                     	;# 
  1266  080D                     	;# 
  1267  080E                     	;# 
  1268  080E                     	;# 
  1269  080F                     	;# 
  1270  0810                     	;# 
  1271  0810                     	;# 
  1272  0811                     	;# 
  1273  0812                     	;# 
  1274  0812                     	;# 
  1275  0813                     	;# 
  1276  0814                     	;# 
  1277  0815                     	;# 
  1278  0816                     	;# 
  1279  0817                     	;# 
  1280  0818                     	;# 
  1281  0819                     	;# 
  1282  081A                     	;# 
  1283  081A                     	;# 
  1284  081B                     	;# 
  1285  081C                     	;# 
  1286  081C                     	;# 
  1287  081D                     	;# 
  1288  088C                     	;# 
  1289  088D                     	;# 
  1290  088E                     	;# 
  1291  088F                     	;# 
  1292  088F                     	;# 
  1293  0890                     	;# 
  1294  0891                     	;# 
  1295  0892                     	;# 
  1296  0893                     	;# 
  1297  0893                     	;# 
  1298  0894                     	;# 
  1299  0895                     	;# 
  1300  0896                     	;# 
  1301  0897                     	;# 
  1302  0897                     	;# 
  1303  0898                     	;# 
  1304  0899                     	;# 
  1305  0D8C                     	;# 
  1306  0D8C                     	;# 
  1307  0D8D                     	;# 
  1308  0D8E                     	;# 
  1309  0D8F                     	;# 
  1310  0D8F                     	;# 
  1311  0D90                     	;# 
  1312  0D91                     	;# 
  1313  0D92                     	;# 
  1314  0D92                     	;# 
  1315  0D93                     	;# 
  1316  0D94                     	;# 
  1317  0D95                     	;# 
  1318  0D95                     	;# 
  1319  0D96                     	;# 
  1320  0D97                     	;# 
  1321  0D98                     	;# 
  1322  0D99                     	;# 
  1323  0D9A                     	;# 
  1324  0D9B                     	;# 
  1325  0D9C                     	;# 
  1326  0D9D                     	;# 
  1327  0D9E                     	;# 
  1328  0D9E                     	;# 
  1329  0D9F                     	;# 
  1330  0DA0                     	;# 
  1331  0DA1                     	;# 
  1332  0DA1                     	;# 
  1333  0DA2                     	;# 
  1334  0DA3                     	;# 
  1335  0DA4                     	;# 
  1336  0DA4                     	;# 
  1337  0DA5                     	;# 
  1338  0DA6                     	;# 
  1339  0DA7                     	;# 
  1340  0DA7                     	;# 
  1341  0DA8                     	;# 
  1342  0DA9                     	;# 
  1343  0DAA                     	;# 
  1344  0DAB                     	;# 
  1345  0DAC                     	;# 
  1346  0DAD                     	;# 
  1347  0DAE                     	;# 
  1348  0DAF                     	;# 
  1349  0E0F                     	;# 
  1350  0E10                     	;# 
  1351  0E11                     	;# 
  1352  0E12                     	;# 
  1353  0E13                     	;# 
  1354  0E14                     	;# 
  1355  0E15                     	;# 
  1356  0E16                     	;# 
  1357  0E17                     	;# 
  1358  0E18                     	;# 
  1359  0E19                     	;# 
  1360  0E1A                     	;# 
  1361  0E1B                     	;# 
  1362  0E1C                     	;# 
  1363  0E1D                     	;# 
  1364  0E1E                     	;# 
  1365  0E1F                     	;# 
  1366  0E20                     	;# 
  1367  0E21                     	;# 
  1368  0E22                     	;# 
  1369  0E23                     	;# 
  1370  0E24                     	;# 
  1371  0E25                     	;# 
  1372  0E26                     	;# 
  1373  0E27                     	;# 
  1374  0E28                     	;# 
  1375  0E29                     	;# 
  1376  0E2A                     	;# 
  1377  0E2B                     	;# 
  1378  0E2C                     	;# 
  1379  0E2D                     	;# 
  1380  0E2E                     	;# 
  1381  0E90                     	;# 
  1382  0E91                     	;# 
  1383  0E92                     	;# 
  1384  0E94                     	;# 
  1385  0E95                     	;# 
  1386  0E9C                     	;# 
  1387  0E9D                     	;# 
  1388  0E9E                     	;# 
  1389  0E9F                     	;# 
  1390  0EA0                     	;# 
  1391  0EA1                     	;# 
  1392  0EA2                     	;# 
  1393  0EA3                     	;# 
  1394  0EA4                     	;# 
  1395  0EA5                     	;# 
  1396  0EA6                     	;# 
  1397  0EA7                     	;# 
  1398  0F0F                     	;# 
  1399  0F10                     	;# 
  1400  0F11                     	;# 
  1401  0F12                     	;# 
  1402  0F13                     	;# 
  1403  0F14                     	;# 
  1404  0F15                     	;# 
  1405  0F16                     	;# 
  1406  0F17                     	;# 
  1407  0F18                     	;# 
  1408  0F19                     	;# 
  1409  0F1A                     	;# 
  1410  0F1B                     	;# 
  1411  0F1C                     	;# 
  1412  0F1D                     	;# 
  1413  0F1E                     	;# 
  1414  0F1F                     	;# 
  1415  0F20                     	;# 
  1416  0F21                     	;# 
  1417  0F22                     	;# 
  1418  0F23                     	;# 
  1419  0F24                     	;# 
  1420  0F25                     	;# 
  1421  0F26                     	;# 
  1422  0F27                     	;# 
  1423  0F28                     	;# 
  1424  0F29                     	;# 
  1425  0F2A                     	;# 
  1426  0F2B                     	;# 
  1427  0F2C                     	;# 
  1428  0F2D                     	;# 
  1429  0F2E                     	;# 
  1430  0F2F                     	;# 
  1431  0F30                     	;# 
  1432  0F31                     	;# 
  1433  0F32                     	;# 
  1434  0F33                     	;# 
  1435  0F34                     	;# 
  1436  0F35                     	;# 
  1437  0F36                     	;# 
  1438  0F37                     	;# 
  1439  0FE4                     	;# 
  1440  0FE5                     	;# 
  1441  0FE6                     	;# 
  1442  0FE7                     	;# 
  1443  0FE8                     	;# 
  1444  0FE9                     	;# 
  1445  0FEA                     	;# 
  1446  0FEB                     	;# 
  1447  0FED                     	;# 
  1448  0FEE                     	;# 
  1449  0FEF                     	;# 
  1450  0000                     	;# 
  1451  0001                     	;# 
  1452  0002                     	;# 
  1453  0003                     	;# 
  1454  0004                     	;# 
  1455  0005                     	;# 
  1456  0006                     	;# 
  1457  0007                     	;# 
  1458  0008                     	;# 
  1459  0009                     	;# 
  1460  000A                     	;# 
  1461  000B                     	;# 
  1462  000C                     	;# 
  1463  000D                     	;# 
  1464  000E                     	;# 
  1465  0010                     	;# 
  1466  0011                     	;# 
  1467  0012                     	;# 
  1468  0013                     	;# 
  1469  0014                     	;# 
  1470  0015                     	;# 
  1471  0016                     	;# 
  1472  0016                     	;# 
  1473  0017                     	;# 
  1474  0018                     	;# 
  1475  0019                     	;# 
  1476  001A                     	;# 
  1477  001A                     	;# 
  1478  001B                     	;# 
  1479  001B                     	;# 
  1480  001C                     	;# 
  1481  001D                     	;# 
  1482  001E                     	;# 
  1483  001F                     	;# 
  1484  008C                     	;# 
  1485  008D                     	;# 
  1486  008E                     	;# 
  1487  0090                     	;# 
  1488  0091                     	;# 
  1489  0092                     	;# 
  1490  0093                     	;# 
  1491  0094                     	;# 
  1492  0095                     	;# 
  1493  0096                     	;# 
  1494  0098                     	;# 
  1495  0099                     	;# 
  1496  009A                     	;# 
  1497  009B                     	;# 
  1498  009B                     	;# 
  1499  009C                     	;# 
  1500  009D                     	;# 
  1501  009E                     	;# 
  1502  009F                     	;# 
  1503  010C                     	;# 
  1504  010D                     	;# 
  1505  010E                     	;# 
  1506  0111                     	;# 
  1507  0112                     	;# 
  1508  0113                     	;# 
  1509  0114                     	;# 
  1510  0115                     	;# 
  1511  0116                     	;# 
  1512  0117                     	;# 
  1513  0118                     	;# 
  1514  0119                     	;# 
  1515  011C                     	;# 
  1516  018C                     	;# 
  1517  018D                     	;# 
  1518  018E                     	;# 
  1519  0191                     	;# 
  1520  0191                     	;# 
  1521  0192                     	;# 
  1522  0193                     	;# 
  1523  0193                     	;# 
  1524  0194                     	;# 
  1525  0195                     	;# 
  1526  0196                     	;# 
  1527  0197                     	;# 
  1528  0199                     	;# 
  1529  0199                     	;# 
  1530  0199                     	;# 
  1531  019A                     	;# 
  1532  019A                     	;# 
  1533  019A                     	;# 
  1534  019B                     	;# 
  1535  019B                     	;# 
  1536  019B                     	;# 
  1537  019B                     	;# 
  1538  019B                     	;# 
  1539  019C                     	;# 
  1540  019C                     	;# 
  1541  019C                     	;# 
  1542  019D                     	;# 
  1543  019D                     	;# 
  1544  019D                     	;# 
  1545  019E                     	;# 
  1546  019E                     	;# 
  1547  019E                     	;# 
  1548  019F                     	;# 
  1549  019F                     	;# 
  1550  019F                     	;# 
  1551  019F                     	;# 
  1552  019F                     	;# 
  1553  020C                     	;# 
  1554  020D                     	;# 
  1555  020E                     	;# 
  1556  0211                     	;# 
  1557  0211                     	;# 
  1558  0212                     	;# 
  1559  0212                     	;# 
  1560  0213                     	;# 
  1561  0213                     	;# 
  1562  0214                     	;# 
  1563  0214                     	;# 
  1564  0215                     	;# 
  1565  0215                     	;# 
  1566  0215                     	;# 
  1567  0215                     	;# 
  1568  0216                     	;# 
  1569  0216                     	;# 
  1570  0217                     	;# 
  1571  0217                     	;# 
  1572  028C                     	;# 
  1573  028D                     	;# 
  1574  028E                     	;# 
  1575  0291                     	;# 
  1576  0291                     	;# 
  1577  0292                     	;# 
  1578  0293                     	;# 
  1579  0294                     	;# 
  1580  0298                     	;# 
  1581  0298                     	;# 
  1582  0299                     	;# 
  1583  029A                     	;# 
  1584  029B                     	;# 
  1585  029E                     	;# 
  1586  030C                     	;# 
  1587  030D                     	;# 
  1588  030E                     	;# 
  1589  038C                     	;# 
  1590  038D                     	;# 
  1591  038E                     	;# 
  1592  0391                     	;# 
  1593  0392                     	;# 
  1594  0393                     	;# 
  1595  0394                     	;# 
  1596  0395                     	;# 
  1597  0396                     	;# 
  1598  0397                     	;# 
  1599  0398                     	;# 
  1600  0399                     	;# 
  1601  040E                     	;# 
  1602  0413                     	;# 
  1603  0413                     	;# 
  1604  0414                     	;# 
  1605  0414                     	;# 
  1606  0415                     	;# 
  1607  0416                     	;# 
  1608  0417                     	;# 
  1609  0418                     	;# 
  1610  041A                     	;# 
  1611  041A                     	;# 
  1612  041B                     	;# 
  1613  041B                     	;# 
  1614  041C                     	;# 
  1615  041D                     	;# 
  1616  041E                     	;# 
  1617  041F                     	;# 
  1618  0493                     	;# 
  1619  0494                     	;# 
  1620  0495                     	;# 
  1621  0496                     	;# 
  1622  049A                     	;# 
  1623  049B                     	;# 
  1624  049C                     	;# 
  1625  049D                     	;# 
  1626  058C                     	;# 
  1627  058C                     	;# 
  1628  058D                     	;# 
  1629  058E                     	;# 
  1630  058E                     	;# 
  1631  058F                     	;# 
  1632  0590                     	;# 
  1633  0590                     	;# 
  1634  0591                     	;# 
  1635  0592                     	;# 
  1636  0592                     	;# 
  1637  0593                     	;# 
  1638  0594                     	;# 
  1639  0594                     	;# 
  1640  0595                     	;# 
  1641  0596                     	;# 
  1642  0596                     	;# 
  1643  0597                     	;# 
  1644  0598                     	;# 
  1645  0599                     	;# 
  1646  059A                     	;# 
  1647  059B                     	;# 
  1648  059B                     	;# 
  1649  059C                     	;# 
  1650  059D                     	;# 
  1651  060C                     	;# 
  1652  060C                     	;# 
  1653  060D                     	;# 
  1654  060E                     	;# 
  1655  060F                     	;# 
  1656  060F                     	;# 
  1657  0610                     	;# 
  1658  0611                     	;# 
  1659  0612                     	;# 
  1660  0613                     	;# 
  1661  0614                     	;# 
  1662  0617                     	;# 
  1663  0618                     	;# 
  1664  0619                     	;# 
  1665  061A                     	;# 
  1666  061B                     	;# 
  1667  061C                     	;# 
  1668  0691                     	;# 
  1669  0692                     	;# 
  1670  0693                     	;# 
  1671  0694                     	;# 
  1672  0695                     	;# 
  1673  0696                     	;# 
  1674  0697                     	;# 
  1675  0699                     	;# 
  1676  069A                     	;# 
  1677  0711                     	;# 
  1678  0712                     	;# 
  1679  0713                     	;# 
  1680  0714                     	;# 
  1681  0715                     	;# 
  1682  0718                     	;# 
  1683  0718                     	;# 
  1684  0719                     	;# 
  1685  071A                     	;# 
  1686  071A                     	;# 
  1687  071B                     	;# 
  1688  071C                     	;# 
  1689  071D                     	;# 
  1690  0791                     	;# 
  1691  0791                     	;# 
  1692  0792                     	;# 
  1693  0793                     	;# 
  1694  0793                     	;# 
  1695  0794                     	;# 
  1696  0795                     	;# 
  1697  0795                     	;# 
  1698  0796                     	;# 
  1699  0797                     	;# 
  1700  0797                     	;# 
  1701  0798                     	;# 
  1702  0799                     	;# 
  1703  079A                     	;# 
  1704  080C                     	;# 
  1705  080C                     	;# 
  1706  080D                     	;# 
  1707  080E                     	;# 
  1708  080E                     	;# 
  1709  080F                     	;# 
  1710  0810                     	;# 
  1711  0810                     	;# 
  1712  0811                     	;# 
  1713  0812                     	;# 
  1714  0812                     	;# 
  1715  0813                     	;# 
  1716  0814                     	;# 
  1717  0815                     	;# 
  1718  0816                     	;# 
  1719  0817                     	;# 
  1720  0818                     	;# 
  1721  0819                     	;# 
  1722  081A                     	;# 
  1723  081A                     	;# 
  1724  081B                     	;# 
  1725  081C                     	;# 
  1726  081C                     	;# 
  1727  081D                     	;# 
  1728  088C                     	;# 
  1729  088D                     	;# 
  1730  088E                     	;# 
  1731  088F                     	;# 
  1732  088F                     	;# 
  1733  0890                     	;# 
  1734  0891                     	;# 
  1735  0892                     	;# 
  1736  0893                     	;# 
  1737  0893                     	;# 
  1738  0894                     	;# 
  1739  0895                     	;# 
  1740  0896                     	;# 
  1741  0897                     	;# 
  1742  0897                     	;# 
  1743  0898                     	;# 
  1744  0899                     	;# 
  1745  0D8C                     	;# 
  1746  0D8C                     	;# 
  1747  0D8D                     	;# 
  1748  0D8E                     	;# 
  1749  0D8F                     	;# 
  1750  0D8F                     	;# 
  1751  0D90                     	;# 
  1752  0D91                     	;# 
  1753  0D92                     	;# 
  1754  0D92                     	;# 
  1755  0D93                     	;# 
  1756  0D94                     	;# 
  1757  0D95                     	;# 
  1758  0D95                     	;# 
  1759  0D96                     	;# 
  1760  0D97                     	;# 
  1761  0D98                     	;# 
  1762  0D99                     	;# 
  1763  0D9A                     	;# 
  1764  0D9B                     	;# 
  1765  0D9C                     	;# 
  1766  0D9D                     	;# 
  1767  0D9E                     	;# 
  1768  0D9E                     	;# 
  1769  0D9F                     	;# 
  1770  0DA0                     	;# 
  1771  0DA1                     	;# 
  1772  0DA1                     	;# 
  1773  0DA2                     	;# 
  1774  0DA3                     	;# 
  1775  0DA4                     	;# 
  1776  0DA4                     	;# 
  1777  0DA5                     	;# 
  1778  0DA6                     	;# 
  1779  0DA7                     	;# 
  1780  0DA7                     	;# 
  1781  0DA8                     	;# 
  1782  0DA9                     	;# 
  1783  0DAA                     	;# 
  1784  0DAB                     	;# 
  1785  0DAC                     	;# 
  1786  0DAD                     	;# 
  1787  0DAE                     	;# 
  1788  0DAF                     	;# 
  1789  0E0F                     	;# 
  1790  0E10                     	;# 
  1791  0E11                     	;# 
  1792  0E12                     	;# 
  1793  0E13                     	;# 
  1794  0E14                     	;# 
  1795  0E15                     	;# 
  1796  0E16                     	;# 
  1797  0E17                     	;# 
  1798  0E18                     	;# 
  1799  0E19                     	;# 
  1800  0E1A                     	;# 
  1801  0E1B                     	;# 
  1802  0E1C                     	;# 
  1803  0E1D                     	;# 
  1804  0E1E                     	;# 
  1805  0E1F                     	;# 
  1806  0E20                     	;# 
  1807  0E21                     	;# 
  1808  0E22                     	;# 
  1809  0E23                     	;# 
  1810  0E24                     	;# 
  1811  0E25                     	;# 
  1812  0E26                     	;# 
  1813  0E27                     	;# 
  1814  0E28                     	;# 
  1815  0E29                     	;# 
  1816  0E2A                     	;# 
  1817  0E2B                     	;# 
  1818  0E2C                     	;# 
  1819  0E2D                     	;# 
  1820  0E2E                     	;# 
  1821  0E90                     	;# 
  1822  0E91                     	;# 
  1823  0E92                     	;# 
  1824  0E94                     	;# 
  1825  0E95                     	;# 
  1826  0E9C                     	;# 
  1827  0E9D                     	;# 
  1828  0E9E                     	;# 
  1829  0E9F                     	;# 
  1830  0EA0                     	;# 
  1831  0EA1                     	;# 
  1832  0EA2                     	;# 
  1833  0EA3                     	;# 
  1834  0EA4                     	;# 
  1835  0EA5                     	;# 
  1836  0EA6                     	;# 
  1837  0EA7                     	;# 
  1838  0F0F                     	;# 
  1839  0F10                     	;# 
  1840  0F11                     	;# 
  1841  0F12                     	;# 
  1842  0F13                     	;# 
  1843  0F14                     	;# 
  1844  0F15                     	;# 
  1845  0F16                     	;# 
  1846  0F17                     	;# 
  1847  0F18                     	;# 
  1848  0F19                     	;# 
  1849  0F1A                     	;# 
  1850  0F1B                     	;# 
  1851  0F1C                     	;# 
  1852  0F1D                     	;# 
  1853  0F1E                     	;# 
  1854  0F1F                     	;# 
  1855  0F20                     	;# 
  1856  0F21                     	;# 
  1857  0F22                     	;# 
  1858  0F23                     	;# 
  1859  0F24                     	;# 
  1860  0F25                     	;# 
  1861  0F26                     	;# 
  1862  0F27                     	;# 
  1863  0F28                     	;# 
  1864  0F29                     	;# 
  1865  0F2A                     	;# 
  1866  0F2B                     	;# 
  1867  0F2C                     	;# 
  1868  0F2D                     	;# 
  1869  0F2E                     	;# 
  1870  0F2F                     	;# 
  1871  0F30                     	;# 
  1872  0F31                     	;# 
  1873  0F32                     	;# 
  1874  0F33                     	;# 
  1875  0F34                     	;# 
  1876  0F35                     	;# 
  1877  0F36                     	;# 
  1878  0F37                     	;# 
  1879  0FE4                     	;# 
  1880  0FE5                     	;# 
  1881  0FE6                     	;# 
  1882  0FE7                     	;# 
  1883  0FE8                     	;# 
  1884  0FE9                     	;# 
  1885  0FEA                     	;# 
  1886  0FEB                     	;# 
  1887  0FED                     	;# 
  1888  0FEE                     	;# 
  1889  0FEF                     	;# 
  1890  0000                     	;# 
  1891  0001                     	;# 
  1892  0002                     	;# 
  1893  0003                     	;# 
  1894  0004                     	;# 
  1895  0005                     	;# 
  1896  0006                     	;# 
  1897  0007                     	;# 
  1898  0008                     	;# 
  1899  0009                     	;# 
  1900  000A                     	;# 
  1901  000B                     	;# 
  1902  000C                     	;# 
  1903  000D                     	;# 
  1904  000E                     	;# 
  1905  0010                     	;# 
  1906  0011                     	;# 
  1907  0012                     	;# 
  1908  0013                     	;# 
  1909  0014                     	;# 
  1910  0015                     	;# 
  1911  0016                     	;# 
  1912  0016                     	;# 
  1913  0017                     	;# 
  1914  0018                     	;# 
  1915  0019                     	;# 
  1916  001A                     	;# 
  1917  001A                     	;# 
  1918  001B                     	;# 
  1919  001B                     	;# 
  1920  001C                     	;# 
  1921  001D                     	;# 
  1922  001E                     	;# 
  1923  001F                     	;# 
  1924  008C                     	;# 
  1925  008D                     	;# 
  1926  008E                     	;# 
  1927  0090                     	;# 
  1928  0091                     	;# 
  1929  0092                     	;# 
  1930  0093                     	;# 
  1931  0094                     	;# 
  1932  0095                     	;# 
  1933  0096                     	;# 
  1934  0098                     	;# 
  1935  0099                     	;# 
  1936  009A                     	;# 
  1937  009B                     	;# 
  1938  009B                     	;# 
  1939  009C                     	;# 
  1940  009D                     	;# 
  1941  009E                     	;# 
  1942  009F                     	;# 
  1943  010C                     	;# 
  1944  010D                     	;# 
  1945  010E                     	;# 
  1946  0111                     	;# 
  1947  0112                     	;# 
  1948  0113                     	;# 
  1949  0114                     	;# 
  1950  0115                     	;# 
  1951  0116                     	;# 
  1952  0117                     	;# 
  1953  0118                     	;# 
  1954  0119                     	;# 
  1955  011C                     	;# 
  1956  018C                     	;# 
  1957  018D                     	;# 
  1958  018E                     	;# 
  1959  0191                     	;# 
  1960  0191                     	;# 
  1961  0192                     	;# 
  1962  0193                     	;# 
  1963  0193                     	;# 
  1964  0194                     	;# 
  1965  0195                     	;# 
  1966  0196                     	;# 
  1967  0197                     	;# 
  1968  0199                     	;# 
  1969  0199                     	;# 
  1970  0199                     	;# 
  1971  019A                     	;# 
  1972  019A                     	;# 
  1973  019A                     	;# 
  1974  019B                     	;# 
  1975  019B                     	;# 
  1976  019B                     	;# 
  1977  019B                     	;# 
  1978  019B                     	;# 
  1979  019C                     	;# 
  1980  019C                     	;# 
  1981  019C                     	;# 
  1982  019D                     	;# 
  1983  019D                     	;# 
  1984  019D                     	;# 
  1985  019E                     	;# 
  1986  019E                     	;# 
  1987  019E                     	;# 
  1988  019F                     	;# 
  1989  019F                     	;# 
  1990  019F                     	;# 
  1991  019F                     	;# 
  1992  019F                     	;# 
  1993  020C                     	;# 
  1994  020D                     	;# 
  1995  020E                     	;# 
  1996  0211                     	;# 
  1997  0211                     	;# 
  1998  0212                     	;# 
  1999  0212                     	;# 
  2000  0213                     	;# 
  2001  0213                     	;# 
  2002  0214                     	;# 
  2003  0214                     	;# 
  2004  0215                     	;# 
  2005  0215                     	;# 
  2006  0215                     	;# 
  2007  0215                     	;# 
  2008  0216                     	;# 
  2009  0216                     	;# 
  2010  0217                     	;# 
  2011  0217                     	;# 
  2012  028C                     	;# 
  2013  028D                     	;# 
  2014  028E                     	;# 
  2015  0291                     	;# 
  2016  0291                     	;# 
  2017  0292                     	;# 
  2018  0293                     	;# 
  2019  0294                     	;# 
  2020  0298                     	;# 
  2021  0298                     	;# 
  2022  0299                     	;# 
  2023  029A                     	;# 
  2024  029B                     	;# 
  2025  029E                     	;# 
  2026  030C                     	;# 
  2027  030D                     	;# 
  2028  030E                     	;# 
  2029  038C                     	;# 
  2030  038D                     	;# 
  2031  038E                     	;# 
  2032  0391                     	;# 
  2033  0392                     	;# 
  2034  0393                     	;# 
  2035  0394                     	;# 
  2036  0395                     	;# 
  2037  0396                     	;# 
  2038  0397                     	;# 
  2039  0398                     	;# 
  2040  0399                     	;# 
  2041  040E                     	;# 
  2042  0413                     	;# 
  2043  0413                     	;# 
  2044  0414                     	;# 
  2045  0414                     	;# 
  2046  0415                     	;# 
  2047  0416                     	;# 
  2048  0417                     	;# 
  2049  0418                     	;# 
  2050  041A                     	;# 
  2051  041A                     	;# 
  2052  041B                     	;# 
  2053  041B                     	;# 
  2054  041C                     	;# 
  2055  041D                     	;# 
  2056  041E                     	;# 
  2057  041F                     	;# 
  2058  0493                     	;# 
  2059  0494                     	;# 
  2060  0495                     	;# 
  2061  0496                     	;# 
  2062  049A                     	;# 
  2063  049B                     	;# 
  2064  049C                     	;# 
  2065  049D                     	;# 
  2066  058C                     	;# 
  2067  058C                     	;# 
  2068  058D                     	;# 
  2069  058E                     	;# 
  2070  058E                     	;# 
  2071  058F                     	;# 
  2072  0590                     	;# 
  2073  0590                     	;# 
  2074  0591                     	;# 
  2075  0592                     	;# 
  2076  0592                     	;# 
  2077  0593                     	;# 
  2078  0594                     	;# 
  2079  0594                     	;# 
  2080  0595                     	;# 
  2081  0596                     	;# 
  2082  0596                     	;# 
  2083  0597                     	;# 
  2084  0598                     	;# 
  2085  0599                     	;# 
  2086  059A                     	;# 
  2087  059B                     	;# 
  2088  059B                     	;# 
  2089  059C                     	;# 
  2090  059D                     	;# 
  2091  060C                     	;# 
  2092  060C                     	;# 
  2093  060D                     	;# 
  2094  060E                     	;# 
  2095  060F                     	;# 
  2096  060F                     	;# 
  2097  0610                     	;# 
  2098  0611                     	;# 
  2099  0612                     	;# 
  2100  0613                     	;# 
  2101  0614                     	;# 
  2102  0617                     	;# 
  2103  0618                     	;# 
  2104  0619                     	;# 
  2105  061A                     	;# 
  2106  061B                     	;# 
  2107  061C                     	;# 
  2108  0691                     	;# 
  2109  0692                     	;# 
  2110  0693                     	;# 
  2111  0694                     	;# 
  2112  0695                     	;# 
  2113  0696                     	;# 
  2114  0697                     	;# 
  2115  0699                     	;# 
  2116  069A                     	;# 
  2117  0711                     	;# 
  2118  0712                     	;# 
  2119  0713                     	;# 
  2120  0714                     	;# 
  2121  0715                     	;# 
  2122  0718                     	;# 
  2123  0718                     	;# 
  2124  0719                     	;# 
  2125  071A                     	;# 
  2126  071A                     	;# 
  2127  071B                     	;# 
  2128  071C                     	;# 
  2129  071D                     	;# 
  2130  0791                     	;# 
  2131  0791                     	;# 
  2132  0792                     	;# 
  2133  0793                     	;# 
  2134  0793                     	;# 
  2135  0794                     	;# 
  2136  0795                     	;# 
  2137  0795                     	;# 
  2138  0796                     	;# 
  2139  0797                     	;# 
  2140  0797                     	;# 
  2141  0798                     	;# 
  2142  0799                     	;# 
  2143  079A                     	;# 
  2144  080C                     	;# 
  2145  080C                     	;# 
  2146  080D                     	;# 
  2147  080E                     	;# 
  2148  080E                     	;# 
  2149  080F                     	;# 
  2150  0810                     	;# 
  2151  0810                     	;# 
  2152  0811                     	;# 
  2153  0812                     	;# 
  2154  0812                     	;# 
  2155  0813                     	;# 
  2156  0814                     	;# 
  2157  0815                     	;# 
  2158  0816                     	;# 
  2159  0817                     	;# 
  2160  0818                     	;# 
  2161  0819                     	;# 
  2162  081A                     	;# 
  2163  081A                     	;# 
  2164  081B                     	;# 
  2165  081C                     	;# 
  2166  081C                     	;# 
  2167  081D                     	;# 
  2168  088C                     	;# 
  2169  088D                     	;# 
  2170  088E                     	;# 
  2171  088F                     	;# 
  2172  088F                     	;# 
  2173  0890                     	;# 
  2174  0891                     	;# 
  2175  0892                     	;# 
  2176  0893                     	;# 
  2177  0893                     	;# 
  2178  0894                     	;# 
  2179  0895                     	;# 
  2180  0896                     	;# 
  2181  0897                     	;# 
  2182  0897                     	;# 
  2183  0898                     	;# 
  2184  0899                     	;# 
  2185  0D8C                     	;# 
  2186  0D8C                     	;# 
  2187  0D8D                     	;# 
  2188  0D8E                     	;# 
  2189  0D8F                     	;# 
  2190  0D8F                     	;# 
  2191  0D90                     	;# 
  2192  0D91                     	;# 
  2193  0D92                     	;# 
  2194  0D92                     	;# 
  2195  0D93                     	;# 
  2196  0D94                     	;# 
  2197  0D95                     	;# 
  2198  0D95                     	;# 
  2199  0D96                     	;# 
  2200  0D97                     	;# 
  2201  0D98                     	;# 
  2202  0D99                     	;# 
  2203  0D9A                     	;# 
  2204  0D9B                     	;# 
  2205  0D9C                     	;# 
  2206  0D9D                     	;# 
  2207  0D9E                     	;# 
  2208  0D9E                     	;# 
  2209  0D9F                     	;# 
  2210  0DA0                     	;# 
  2211  0DA1                     	;# 
  2212  0DA1                     	;# 
  2213  0DA2                     	;# 
  2214  0DA3                     	;# 
  2215  0DA4                     	;# 
  2216  0DA4                     	;# 
  2217  0DA5                     	;# 
  2218  0DA6                     	;# 
  2219  0DA7                     	;# 
  2220  0DA7                     	;# 
  2221  0DA8                     	;# 
  2222  0DA9                     	;# 
  2223  0DAA                     	;# 
  2224  0DAB                     	;# 
  2225  0DAC                     	;# 
  2226  0DAD                     	;# 
  2227  0DAE                     	;# 
  2228  0DAF                     	;# 
  2229  0E0F                     	;# 
  2230  0E10                     	;# 
  2231  0E11                     	;# 
  2232  0E12                     	;# 
  2233  0E13                     	;# 
  2234  0E14                     	;# 
  2235  0E15                     	;# 
  2236  0E16                     	;# 
  2237  0E17                     	;# 
  2238  0E18                     	;# 
  2239  0E19                     	;# 
  2240  0E1A                     	;# 
  2241  0E1B                     	;# 
  2242  0E1C                     	;# 
  2243  0E1D                     	;# 
  2244  0E1E                     	;# 
  2245  0E1F                     	;# 
  2246  0E20                     	;# 
  2247  0E21                     	;# 
  2248  0E22                     	;# 
  2249  0E23                     	;# 
  2250  0E24                     	;# 
  2251  0E25                     	;# 
  2252  0E26                     	;# 
  2253  0E27                     	;# 
  2254  0E28                     	;# 
  2255  0E29                     	;# 
  2256  0E2A                     	;# 
  2257  0E2B                     	;# 
  2258  0E2C                     	;# 
  2259  0E2D                     	;# 
  2260  0E2E                     	;# 
  2261  0E90                     	;# 
  2262  0E91                     	;# 
  2263  0E92                     	;# 
  2264  0E94                     	;# 
  2265  0E95                     	;# 
  2266  0E9C                     	;# 
  2267  0E9D                     	;# 
  2268  0E9E                     	;# 
  2269  0E9F                     	;# 
  2270  0EA0                     	;# 
  2271  0EA1                     	;# 
  2272  0EA2                     	;# 
  2273  0EA3                     	;# 
  2274  0EA4                     	;# 
  2275  0EA5                     	;# 
  2276  0EA6                     	;# 
  2277  0EA7                     	;# 
  2278  0F0F                     	;# 
  2279  0F10                     	;# 
  2280  0F11                     	;# 
  2281  0F12                     	;# 
  2282  0F13                     	;# 
  2283  0F14                     	;# 
  2284  0F15                     	;# 
  2285  0F16                     	;# 
  2286  0F17                     	;# 
  2287  0F18                     	;# 
  2288  0F19                     	;# 
  2289  0F1A                     	;# 
  2290  0F1B                     	;# 
  2291  0F1C                     	;# 
  2292  0F1D                     	;# 
  2293  0F1E                     	;# 
  2294  0F1F                     	;# 
  2295  0F20                     	;# 
  2296  0F21                     	;# 
  2297  0F22                     	;# 
  2298  0F23                     	;# 
  2299  0F24                     	;# 
  2300  0F25                     	;# 
  2301  0F26                     	;# 
  2302  0F27                     	;# 
  2303  0F28                     	;# 
  2304  0F29                     	;# 
  2305  0F2A                     	;# 
  2306  0F2B                     	;# 
  2307  0F2C                     	;# 
  2308  0F2D                     	;# 
  2309  0F2E                     	;# 
  2310  0F2F                     	;# 
  2311  0F30                     	;# 
  2312  0F31                     	;# 
  2313  0F32                     	;# 
  2314  0F33                     	;# 
  2315  0F34                     	;# 
  2316  0F35                     	;# 
  2317  0F36                     	;# 
  2318  0F37                     	;# 
  2319  0FE4                     	;# 
  2320  0FE5                     	;# 
  2321  0FE6                     	;# 
  2322  0FE7                     	;# 
  2323  0FE8                     	;# 
  2324  0FE9                     	;# 
  2325  0FEA                     	;# 
  2326  0FEB                     	;# 
  2327  0FED                     	;# 
  2328  0FEE                     	;# 
  2329  0FEF                     	;# 
  2330  0000                     	;# 
  2331  0001                     	;# 
  2332  0002                     	;# 
  2333  0003                     	;# 
  2334  0004                     	;# 
  2335  0005                     	;# 
  2336  0006                     	;# 
  2337  0007                     	;# 
  2338  0008                     	;# 
  2339  0009                     	;# 
  2340  000A                     	;# 
  2341  000B                     	;# 
  2342  000C                     	;# 
  2343  000D                     	;# 
  2344  000E                     	;# 
  2345  0010                     	;# 
  2346  0011                     	;# 
  2347  0012                     	;# 
  2348  0013                     	;# 
  2349  0014                     	;# 
  2350  0015                     	;# 
  2351  0016                     	;# 
  2352  0016                     	;# 
  2353  0017                     	;# 
  2354  0018                     	;# 
  2355  0019                     	;# 
  2356  001A                     	;# 
  2357  001A                     	;# 
  2358  001B                     	;# 
  2359  001B                     	;# 
  2360  001C                     	;# 
  2361  001D                     	;# 
  2362  001E                     	;# 
  2363  001F                     	;# 
  2364  008C                     	;# 
  2365  008D                     	;# 
  2366  008E                     	;# 
  2367  0090                     	;# 
  2368  0091                     	;# 
  2369  0092                     	;# 
  2370  0093                     	;# 
  2371  0094                     	;# 
  2372  0095                     	;# 
  2373  0096                     	;# 
  2374  0098                     	;# 
  2375  0099                     	;# 
  2376  009A                     	;# 
  2377  009B                     	;# 
  2378  009B                     	;# 
  2379  009C                     	;# 
  2380  009D                     	;# 
  2381  009E                     	;# 
  2382  009F                     	;# 
  2383  010C                     	;# 
  2384  010D                     	;# 
  2385  010E                     	;# 
  2386  0111                     	;# 
  2387  0112                     	;# 
  2388  0113                     	;# 
  2389  0114                     	;# 
  2390  0115                     	;# 
  2391  0116                     	;# 
  2392  0117                     	;# 
  2393  0118                     	;# 
  2394  0119                     	;# 
  2395  011C                     	;# 
  2396  018C                     	;# 
  2397  018D                     	;# 
  2398  018E                     	;# 
  2399  0191                     	;# 
  2400  0191                     	;# 
  2401  0192                     	;# 
  2402  0193                     	;# 
  2403  0193                     	;# 
  2404  0194                     	;# 
  2405  0195                     	;# 
  2406  0196                     	;# 
  2407  0197                     	;# 
  2408  0199                     	;# 
  2409  0199                     	;# 
  2410  0199                     	;# 
  2411  019A                     	;# 
  2412  019A                     	;# 
  2413  019A                     	;# 
  2414  019B                     	;# 
  2415  019B                     	;# 
  2416  019B                     	;# 
  2417  019B                     	;# 
  2418  019B                     	;# 
  2419  019C                     	;# 
  2420  019C                     	;# 
  2421  019C                     	;# 
  2422  019D                     	;# 
  2423  019D                     	;# 
  2424  019D                     	;# 
  2425  019E                     	;# 
  2426  019E                     	;# 
  2427  019E                     	;# 
  2428  019F                     	;# 
  2429  019F                     	;# 
  2430  019F                     	;# 
  2431  019F                     	;# 
  2432  019F                     	;# 
  2433  020C                     	;# 
  2434  020D                     	;# 
  2435  020E                     	;# 
  2436  0211                     	;# 
  2437  0211                     	;# 
  2438  0212                     	;# 
  2439  0212                     	;# 
  2440  0213                     	;# 
  2441  0213                     	;# 
  2442  0214                     	;# 
  2443  0214                     	;# 
  2444  0215                     	;# 
  2445  0215                     	;# 
  2446  0215                     	;# 
  2447  0215                     	;# 
  2448  0216                     	;# 
  2449  0216                     	;# 
  2450  0217                     	;# 
  2451  0217                     	;# 
  2452  028C                     	;# 
  2453  028D                     	;# 
  2454  028E                     	;# 
  2455  0291                     	;# 
  2456  0291                     	;# 
  2457  0292                     	;# 
  2458  0293                     	;# 
  2459  0294                     	;# 
  2460  0298                     	;# 
  2461  0298                     	;# 
  2462  0299                     	;# 
  2463  029A                     	;# 
  2464  029B                     	;# 
  2465  029E                     	;# 
  2466  030C                     	;# 
  2467  030D                     	;# 
  2468  030E                     	;# 
  2469  038C                     	;# 
  2470  038D                     	;# 
  2471  038E                     	;# 
  2472  0391                     	;# 
  2473  0392                     	;# 
  2474  0393                     	;# 
  2475  0394                     	;# 
  2476  0395                     	;# 
  2477  0396                     	;# 
  2478  0397                     	;# 
  2479  0398                     	;# 
  2480  0399                     	;# 
  2481  040E                     	;# 
  2482  0413                     	;# 
  2483  0413                     	;# 
  2484  0414                     	;# 
  2485  0414                     	;# 
  2486  0415                     	;# 
  2487  0416                     	;# 
  2488  0417                     	;# 
  2489  0418                     	;# 
  2490  041A                     	;# 
  2491  041A                     	;# 
  2492  041B                     	;# 
  2493  041B                     	;# 
  2494  041C                     	;# 
  2495  041D                     	;# 
  2496  041E                     	;# 
  2497  041F                     	;# 
  2498  0493                     	;# 
  2499  0494                     	;# 
  2500  0495                     	;# 
  2501  0496                     	;# 
  2502  049A                     	;# 
  2503  049B                     	;# 
  2504  049C                     	;# 
  2505  049D                     	;# 
  2506  058C                     	;# 
  2507  058C                     	;# 
  2508  058D                     	;# 
  2509  058E                     	;# 
  2510  058E                     	;# 
  2511  058F                     	;# 
  2512  0590                     	;# 
  2513  0590                     	;# 
  2514  0591                     	;# 
  2515  0592                     	;# 
  2516  0592                     	;# 
  2517  0593                     	;# 
  2518  0594                     	;# 
  2519  0594                     	;# 
  2520  0595                     	;# 
  2521  0596                     	;# 
  2522  0596                     	;# 
  2523  0597                     	;# 
  2524  0598                     	;# 
  2525  0599                     	;# 
  2526  059A                     	;# 
  2527  059B                     	;# 
  2528  059B                     	;# 
  2529  059C                     	;# 
  2530  059D                     	;# 
  2531  060C                     	;# 
  2532  060C                     	;# 
  2533  060D                     	;# 
  2534  060E                     	;# 
  2535  060F                     	;# 
  2536  060F                     	;# 
  2537  0610                     	;# 
  2538  0611                     	;# 
  2539  0612                     	;# 
  2540  0613                     	;# 
  2541  0614                     	;# 
  2542  0617                     	;# 
  2543  0618                     	;# 
  2544  0619                     	;# 
  2545  061A                     	;# 
  2546  061B                     	;# 
  2547  061C                     	;# 
  2548  0691                     	;# 
  2549  0692                     	;# 
  2550  0693                     	;# 
  2551  0694                     	;# 
  2552  0695                     	;# 
  2553  0696                     	;# 
  2554  0697                     	;# 
  2555  0699                     	;# 
  2556  069A                     	;# 
  2557  0711                     	;# 
  2558  0712                     	;# 
  2559  0713                     	;# 
  2560  0714                     	;# 
  2561  0715                     	;# 
  2562  0718                     	;# 
  2563  0718                     	;# 
  2564  0719                     	;# 
  2565  071A                     	;# 
  2566  071A                     	;# 
  2567  071B                     	;# 
  2568  071C                     	;# 
  2569  071D                     	;# 
  2570  0791                     	;# 
  2571  0791                     	;# 
  2572  0792                     	;# 
  2573  0793                     	;# 
  2574  0793                     	;# 
  2575  0794                     	;# 
  2576  0795                     	;# 
  2577  0795                     	;# 
  2578  0796                     	;# 
  2579  0797                     	;# 
  2580  0797                     	;# 
  2581  0798                     	;# 
  2582  0799                     	;# 
  2583  079A                     	;# 
  2584  080C                     	;# 
  2585  080C                     	;# 
  2586  080D                     	;# 
  2587  080E                     	;# 
  2588  080E                     	;# 
  2589  080F                     	;# 
  2590  0810                     	;# 
  2591  0810                     	;# 
  2592  0811                     	;# 
  2593  0812                     	;# 
  2594  0812                     	;# 
  2595  0813                     	;# 
  2596  0814                     	;# 
  2597  0815                     	;# 
  2598  0816                     	;# 
  2599  0817                     	;# 
  2600  0818                     	;# 
  2601  0819                     	;# 
  2602  081A                     	;# 
  2603  081A                     	;# 
  2604  081B                     	;# 
  2605  081C                     	;# 
  2606  081C                     	;# 
  2607  081D                     	;# 
  2608  088C                     	;# 
  2609  088D                     	;# 
  2610  088E                     	;# 
  2611  088F                     	;# 
  2612  088F                     	;# 
  2613  0890                     	;# 
  2614  0891                     	;# 
  2615  0892                     	;# 
  2616  0893                     	;# 
  2617  0893                     	;# 
  2618  0894                     	;# 
  2619  0895                     	;# 
  2620  0896                     	;# 
  2621  0897                     	;# 
  2622  0897                     	;# 
  2623  0898                     	;# 
  2624  0899                     	;# 
  2625  0D8C                     	;# 
  2626  0D8C                     	;# 
  2627  0D8D                     	;# 
  2628  0D8E                     	;# 
  2629  0D8F                     	;# 
  2630  0D8F                     	;# 
  2631  0D90                     	;# 
  2632  0D91                     	;# 
  2633  0D92                     	;# 
  2634  0D92                     	;# 
  2635  0D93                     	;# 
  2636  0D94                     	;# 
  2637  0D95                     	;# 
  2638  0D95                     	;# 
  2639  0D96                     	;# 
  2640  0D97                     	;# 
  2641  0D98                     	;# 
  2642  0D99                     	;# 
  2643  0D9A                     	;# 
  2644  0D9B                     	;# 
  2645  0D9C                     	;# 
  2646  0D9D                     	;# 
  2647  0D9E                     	;# 
  2648  0D9E                     	;# 
  2649  0D9F                     	;# 
  2650  0DA0                     	;# 
  2651  0DA1                     	;# 
  2652  0DA1                     	;# 
  2653  0DA2                     	;# 
  2654  0DA3                     	;# 
  2655  0DA4                     	;# 
  2656  0DA4                     	;# 
  2657  0DA5                     	;# 
  2658  0DA6                     	;# 
  2659  0DA7                     	;# 
  2660  0DA7                     	;# 
  2661  0DA8                     	;# 
  2662  0DA9                     	;# 
  2663  0DAA                     	;# 
  2664  0DAB                     	;# 
  2665  0DAC                     	;# 
  2666  0DAD                     	;# 
  2667  0DAE                     	;# 
  2668  0DAF                     	;# 
  2669  0E0F                     	;# 
  2670  0E10                     	;# 
  2671  0E11                     	;# 
  2672  0E12                     	;# 
  2673  0E13                     	;# 
  2674  0E14                     	;# 
  2675  0E15                     	;# 
  2676  0E16                     	;# 
  2677  0E17                     	;# 
  2678  0E18                     	;# 
  2679  0E19                     	;# 
  2680  0E1A                     	;# 
  2681  0E1B                     	;# 
  2682  0E1C                     	;# 
  2683  0E1D                     	;# 
  2684  0E1E                     	;# 
  2685  0E1F                     	;# 
  2686  0E20                     	;# 
  2687  0E21                     	;# 
  2688  0E22                     	;# 
  2689  0E23                     	;# 
  2690  0E24                     	;# 
  2691  0E25                     	;# 
  2692  0E26                     	;# 
  2693  0E27                     	;# 
  2694  0E28                     	;# 
  2695  0E29                     	;# 
  2696  0E2A                     	;# 
  2697  0E2B                     	;# 
  2698  0E2C                     	;# 
  2699  0E2D                     	;# 
  2700  0E2E                     	;# 
  2701  0E90                     	;# 
  2702  0E91                     	;# 
  2703  0E92                     	;# 
  2704  0E94                     	;# 
  2705  0E95                     	;# 
  2706  0E9C                     	;# 
  2707  0E9D                     	;# 
  2708  0E9E                     	;# 
  2709  0E9F                     	;# 
  2710  0EA0                     	;# 
  2711  0EA1                     	;# 
  2712  0EA2                     	;# 
  2713  0EA3                     	;# 
  2714  0EA4                     	;# 
  2715  0EA5                     	;# 
  2716  0EA6                     	;# 
  2717  0EA7                     	;# 
  2718  0F0F                     	;# 
  2719  0F10                     	;# 
  2720  0F11                     	;# 
  2721  0F12                     	;# 
  2722  0F13                     	;# 
  2723  0F14                     	;# 
  2724  0F15                     	;# 
  2725  0F16                     	;# 
  2726  0F17                     	;# 
  2727  0F18                     	;# 
  2728  0F19                     	;# 
  2729  0F1A                     	;# 
  2730  0F1B                     	;# 
  2731  0F1C                     	;# 
  2732  0F1D                     	;# 
  2733  0F1E                     	;# 
  2734  0F1F                     	;# 
  2735  0F20                     	;# 
  2736  0F21                     	;# 
  2737  0F22                     	;# 
  2738  0F23                     	;# 
  2739  0F24                     	;# 
  2740  0F25                     	;# 
  2741  0F26                     	;# 
  2742  0F27                     	;# 
  2743  0F28                     	;# 
  2744  0F29                     	;# 
  2745  0F2A                     	;# 
  2746  0F2B                     	;# 
  2747  0F2C                     	;# 
  2748  0F2D                     	;# 
  2749  0F2E                     	;# 
  2750  0F2F                     	;# 
  2751  0F30                     	;# 
  2752  0F31                     	;# 
  2753  0F32                     	;# 
  2754  0F33                     	;# 
  2755  0F34                     	;# 
  2756  0F35                     	;# 
  2757  0F36                     	;# 
  2758  0F37                     	;# 
  2759  0FE4                     	;# 
  2760  0FE5                     	;# 
  2761  0FE6                     	;# 
  2762  0FE7                     	;# 
  2763  0FE8                     	;# 
  2764  0FE9                     	;# 
  2765  0FEA                     	;# 
  2766  0FEB                     	;# 
  2767  0FED                     	;# 
  2768  0FEE                     	;# 
  2769  0FEF                     	;# 
  2770  0000                     	;# 
  2771  0001                     	;# 
  2772  0002                     	;# 
  2773  0003                     	;# 
  2774  0004                     	;# 
  2775  0005                     	;# 
  2776  0006                     	;# 
  2777  0007                     	;# 
  2778  0008                     	;# 
  2779  0009                     	;# 
  2780  000A                     	;# 
  2781  000B                     	;# 
  2782  000C                     	;# 
  2783  000D                     	;# 
  2784  000E                     	;# 
  2785  0010                     	;# 
  2786  0011                     	;# 
  2787  0012                     	;# 
  2788  0013                     	;# 
  2789  0014                     	;# 
  2790  0015                     	;# 
  2791  0016                     	;# 
  2792  0016                     	;# 
  2793  0017                     	;# 
  2794  0018                     	;# 
  2795  0019                     	;# 
  2796  001A                     	;# 
  2797  001A                     	;# 
  2798  001B                     	;# 
  2799  001B                     	;# 
  2800  001C                     	;# 
  2801  001D                     	;# 
  2802  001E                     	;# 
  2803  001F                     	;# 
  2804  008C                     	;# 
  2805  008D                     	;# 
  2806  008E                     	;# 
  2807  0090                     	;# 
  2808  0091                     	;# 
  2809  0092                     	;# 
  2810  0093                     	;# 
  2811  0094                     	;# 
  2812  0095                     	;# 
  2813  0096                     	;# 
  2814  0098                     	;# 
  2815  0099                     	;# 
  2816  009A                     	;# 
  2817  009B                     	;# 
  2818  009B                     	;# 
  2819  009C                     	;# 
  2820  009D                     	;# 
  2821  009E                     	;# 
  2822  009F                     	;# 
  2823  010C                     	;# 
  2824  010D                     	;# 
  2825  010E                     	;# 
  2826  0111                     	;# 
  2827  0112                     	;# 
  2828  0113                     	;# 
  2829  0114                     	;# 
  2830  0115                     	;# 
  2831  0116                     	;# 
  2832  0117                     	;# 
  2833  0118                     	;# 
  2834  0119                     	;# 
  2835  011C                     	;# 
  2836  018C                     	;# 
  2837  018D                     	;# 
  2838  018E                     	;# 
  2839  0191                     	;# 
  2840  0191                     	;# 
  2841  0192                     	;# 
  2842  0193                     	;# 
  2843  0193                     	;# 
  2844  0194                     	;# 
  2845  0195                     	;# 
  2846  0196                     	;# 
  2847  0197                     	;# 
  2848  0199                     	;# 
  2849  0199                     	;# 
  2850  0199                     	;# 
  2851  019A                     	;# 
  2852  019A                     	;# 
  2853  019A                     	;# 
  2854  019B                     	;# 
  2855  019B                     	;# 
  2856  019B                     	;# 
  2857  019B                     	;# 
  2858  019B                     	;# 
  2859  019C                     	;# 
  2860  019C                     	;# 
  2861  019C                     	;# 
  2862  019D                     	;# 
  2863  019D                     	;# 
  2864  019D                     	;# 
  2865  019E                     	;# 
  2866  019E                     	;# 
  2867  019E                     	;# 
  2868  019F                     	;# 
  2869  019F                     	;# 
  2870  019F                     	;# 
  2871  019F                     	;# 
  2872  019F                     	;# 
  2873  020C                     	;# 
  2874  020D                     	;# 
  2875  020E                     	;# 
  2876  0211                     	;# 
  2877  0211                     	;# 
  2878  0212                     	;# 
  2879  0212                     	;# 
  2880  0213                     	;# 
  2881  0213                     	;# 
  2882  0214                     	;# 
  2883  0214                     	;# 
  2884  0215                     	;# 
  2885  0215                     	;# 
  2886  0215                     	;# 
  2887  0215                     	;# 
  2888  0216                     	;# 
  2889  0216                     	;# 
  2890  0217                     	;# 
  2891  0217                     	;# 
  2892  028C                     	;# 
  2893  028D                     	;# 
  2894  028E                     	;# 
  2895  0291                     	;# 
  2896  0291                     	;# 
  2897  0292                     	;# 
  2898  0293                     	;# 
  2899  0294                     	;# 
  2900  0298                     	;# 
  2901  0298                     	;# 
  2902  0299                     	;# 
  2903  029A                     	;# 
  2904  029B                     	;# 
  2905  029E                     	;# 
  2906  030C                     	;# 
  2907  030D                     	;# 
  2908  030E                     	;# 
  2909  038C                     	;# 
  2910  038D                     	;# 
  2911  038E                     	;# 
  2912  0391                     	;# 
  2913  0392                     	;# 
  2914  0393                     	;# 
  2915  0394                     	;# 
  2916  0395                     	;# 
  2917  0396                     	;# 
  2918  0397                     	;# 
  2919  0398                     	;# 
  2920  0399                     	;# 
  2921  040E                     	;# 
  2922  0413                     	;# 
  2923  0413                     	;# 
  2924  0414                     	;# 
  2925  0414                     	;# 
  2926  0415                     	;# 
  2927  0416                     	;# 
  2928  0417                     	;# 
  2929  0418                     	;# 
  2930  041A                     	;# 
  2931  041A                     	;# 
  2932  041B                     	;# 
  2933  041B                     	;# 
  2934  041C                     	;# 
  2935  041D                     	;# 
  2936  041E                     	;# 
  2937  041F                     	;# 
  2938  0493                     	;# 
  2939  0494                     	;# 
  2940  0495                     	;# 
  2941  0496                     	;# 
  2942  049A                     	;# 
  2943  049B                     	;# 
  2944  049C                     	;# 
  2945  049D                     	;# 
  2946  058C                     	;# 
  2947  058C                     	;# 
  2948  058D                     	;# 
  2949  058E                     	;# 
  2950  058E                     	;# 
  2951  058F                     	;# 
  2952  0590                     	;# 
  2953  0590                     	;# 
  2954  0591                     	;# 
  2955  0592                     	;# 
  2956  0592                     	;# 
  2957  0593                     	;# 
  2958  0594                     	;# 
  2959  0594                     	;# 
  2960  0595                     	;# 
  2961  0596                     	;# 
  2962  0596                     	;# 
  2963  0597                     	;# 
  2964  0598                     	;# 
  2965  0599                     	;# 
  2966  059A                     	;# 
  2967  059B                     	;# 
  2968  059B                     	;# 
  2969  059C                     	;# 
  2970  059D                     	;# 
  2971  060C                     	;# 
  2972  060C                     	;# 
  2973  060D                     	;# 
  2974  060E                     	;# 
  2975  060F                     	;# 
  2976  060F                     	;# 
  2977  0610                     	;# 
  2978  0611                     	;# 
  2979  0612                     	;# 
  2980  0613                     	;# 
  2981  0614                     	;# 
  2982  0617                     	;# 
  2983  0618                     	;# 
  2984  0619                     	;# 
  2985  061A                     	;# 
  2986  061B                     	;# 
  2987  061C                     	;# 
  2988  0691                     	;# 
  2989  0692                     	;# 
  2990  0693                     	;# 
  2991  0694                     	;# 
  2992  0695                     	;# 
  2993  0696                     	;# 
  2994  0697                     	;# 
  2995  0699                     	;# 
  2996  069A                     	;# 
  2997  0711                     	;# 
  2998  0712                     	;# 
  2999  0713                     	;# 
  3000  0714                     	;# 
  3001  0715                     	;# 
  3002  0718                     	;# 
  3003  0718                     	;# 
  3004  0719                     	;# 
  3005  071A                     	;# 
  3006  071A                     	;# 
  3007  071B                     	;# 
  3008  071C                     	;# 
  3009  071D                     	;# 
  3010  0791                     	;# 
  3011  0791                     	;# 
  3012  0792                     	;# 
  3013  0793                     	;# 
  3014  0793                     	;# 
  3015  0794                     	;# 
  3016  0795                     	;# 
  3017  0795                     	;# 
  3018  0796                     	;# 
  3019  0797                     	;# 
  3020  0797                     	;# 
  3021  0798                     	;# 
  3022  0799                     	;# 
  3023  079A                     	;# 
  3024  080C                     	;# 
  3025  080C                     	;# 
  3026  080D                     	;# 
  3027  080E                     	;# 
  3028  080E                     	;# 
  3029  080F                     	;# 
  3030  0810                     	;# 
  3031  0810                     	;# 
  3032  0811                     	;# 
  3033  0812                     	;# 
  3034  0812                     	;# 
  3035  0813                     	;# 
  3036  0814                     	;# 
  3037  0815                     	;# 
  3038  0816                     	;# 
  3039  0817                     	;# 
  3040  0818                     	;# 
  3041  0819                     	;# 
  3042  081A                     	;# 
  3043  081A                     	;# 
  3044  081B                     	;# 
  3045  081C                     	;# 
  3046  081C                     	;# 
  3047  081D                     	;# 
  3048  088C                     	;# 
  3049  088D                     	;# 
  3050  088E                     	;# 
  3051  088F                     	;# 
  3052  088F                     	;# 
  3053  0890                     	;# 
  3054  0891                     	;# 
  3055  0892                     	;# 
  3056  0893                     	;# 
  3057  0893                     	;# 
  3058  0894                     	;# 
  3059  0895                     	;# 
  3060  0896                     	;# 
  3061  0897                     	;# 
  3062  0897                     	;# 
  3063  0898                     	;# 
  3064  0899                     	;# 
  3065  0D8C                     	;# 
  3066  0D8C                     	;# 
  3067  0D8D                     	;# 
  3068  0D8E                     	;# 
  3069  0D8F                     	;# 
  3070  0D8F                     	;# 
  3071  0D90                     	;# 
  3072  0D91                     	;# 
  3073  0D92                     	;# 
  3074  0D92                     	;# 
  3075  0D93                     	;# 
  3076  0D94                     	;# 
  3077  0D95                     	;# 
  3078  0D95                     	;# 
  3079  0D96                     	;# 
  3080  0D97                     	;# 
  3081  0D98                     	;# 
  3082  0D99                     	;# 
  3083  0D9A                     	;# 
  3084  0D9B                     	;# 
  3085  0D9C                     	;# 
  3086  0D9D                     	;# 
  3087  0D9E                     	;# 
  3088  0D9E                     	;# 
  3089  0D9F                     	;# 
  3090  0DA0                     	;# 
  3091  0DA1                     	;# 
  3092  0DA1                     	;# 
  3093  0DA2                     	;# 
  3094  0DA3                     	;# 
  3095  0DA4                     	;# 
  3096  0DA4                     	;# 
  3097  0DA5                     	;# 
  3098  0DA6                     	;# 
  3099  0DA7                     	;# 
  3100  0DA7                     	;# 
  3101  0DA8                     	;# 
  3102  0DA9                     	;# 
  3103  0DAA                     	;# 
  3104  0DAB                     	;# 
  3105  0DAC                     	;# 
  3106  0DAD                     	;# 
  3107  0DAE                     	;# 
  3108  0DAF                     	;# 
  3109  0E0F                     	;# 
  3110  0E10                     	;# 
  3111  0E11                     	;# 
  3112  0E12                     	;# 
  3113  0E13                     	;# 
  3114  0E14                     	;# 
  3115  0E15                     	;# 
  3116  0E16                     	;# 
  3117  0E17                     	;# 
  3118  0E18                     	;# 
  3119  0E19                     	;# 
  3120  0E1A                     	;# 
  3121  0E1B                     	;# 
  3122  0E1C                     	;# 
  3123  0E1D                     	;# 
  3124  0E1E                     	;# 
  3125  0E1F                     	;# 
  3126  0E20                     	;# 
  3127  0E21                     	;# 
  3128  0E22                     	;# 
  3129  0E23                     	;# 
  3130  0E24                     	;# 
  3131  0E25                     	;# 
  3132  0E26                     	;# 
  3133  0E27                     	;# 
  3134  0E28                     	;# 
  3135  0E29                     	;# 
  3136  0E2A                     	;# 
  3137  0E2B                     	;# 
  3138  0E2C                     	;# 
  3139  0E2D                     	;# 
  3140  0E2E                     	;# 
  3141  0E90                     	;# 
  3142  0E91                     	;# 
  3143  0E92                     	;# 
  3144  0E94                     	;# 
  3145  0E95                     	;# 
  3146  0E9C                     	;# 
  3147  0E9D                     	;# 
  3148  0E9E                     	;# 
  3149  0E9F                     	;# 
  3150  0EA0                     	;# 
  3151  0EA1                     	;# 
  3152  0EA2                     	;# 
  3153  0EA3                     	;# 
  3154  0EA4                     	;# 
  3155  0EA5                     	;# 
  3156  0EA6                     	;# 
  3157  0EA7                     	;# 
  3158  0F0F                     	;# 
  3159  0F10                     	;# 
  3160  0F11                     	;# 
  3161  0F12                     	;# 
  3162  0F13                     	;# 
  3163  0F14                     	;# 
  3164  0F15                     	;# 
  3165  0F16                     	;# 
  3166  0F17                     	;# 
  3167  0F18                     	;# 
  3168  0F19                     	;# 
  3169  0F1A                     	;# 
  3170  0F1B                     	;# 
  3171  0F1C                     	;# 
  3172  0F1D                     	;# 
  3173  0F1E                     	;# 
  3174  0F1F                     	;# 
  3175  0F20                     	;# 
  3176  0F21                     	;# 
  3177  0F22                     	;# 
  3178  0F23                     	;# 
  3179  0F24                     	;# 
  3180  0F25                     	;# 
  3181  0F26                     	;# 
  3182  0F27                     	;# 
  3183  0F28                     	;# 
  3184  0F29                     	;# 
  3185  0F2A                     	;# 
  3186  0F2B                     	;# 
  3187  0F2C                     	;# 
  3188  0F2D                     	;# 
  3189  0F2E                     	;# 
  3190  0F2F                     	;# 
  3191  0F30                     	;# 
  3192  0F31                     	;# 
  3193  0F32                     	;# 
  3194  0F33                     	;# 
  3195  0F34                     	;# 
  3196  0F35                     	;# 
  3197  0F36                     	;# 
  3198  0F37                     	;# 
  3199  0FE4                     	;# 
  3200  0FE5                     	;# 
  3201  0FE6                     	;# 
  3202  0FE7                     	;# 
  3203  0FE8                     	;# 
  3204  0FE9                     	;# 
  3205  0FEA                     	;# 
  3206  0FEB                     	;# 
  3207  0FED                     	;# 
  3208  0FEE                     	;# 
  3209  0FEF                     	;# 
  3210  0000                     	;# 
  3211  0001                     	;# 
  3212  0002                     	;# 
  3213  0003                     	;# 
  3214  0004                     	;# 
  3215  0005                     	;# 
  3216  0006                     	;# 
  3217  0007                     	;# 
  3218  0008                     	;# 
  3219  0009                     	;# 
  3220  000A                     	;# 
  3221  000B                     	;# 
  3222  000C                     	;# 
  3223  000D                     	;# 
  3224  000E                     	;# 
  3225  0010                     	;# 
  3226  0011                     	;# 
  3227  0012                     	;# 
  3228  0013                     	;# 
  3229  0014                     	;# 
  3230  0015                     	;# 
  3231  0016                     	;# 
  3232  0016                     	;# 
  3233  0017                     	;# 
  3234  0018                     	;# 
  3235  0019                     	;# 
  3236  001A                     	;# 
  3237  001A                     	;# 
  3238  001B                     	;# 
  3239  001B                     	;# 
  3240  001C                     	;# 
  3241  001D                     	;# 
  3242  001E                     	;# 
  3243  001F                     	;# 
  3244  008C                     	;# 
  3245  008D                     	;# 
  3246  008E                     	;# 
  3247  0090                     	;# 
  3248  0091                     	;# 
  3249  0092                     	;# 
  3250  0093                     	;# 
  3251  0094                     	;# 
  3252  0095                     	;# 
  3253  0096                     	;# 
  3254  0098                     	;# 
  3255  0099                     	;# 
  3256  009A                     	;# 
  3257  009B                     	;# 
  3258  009B                     	;# 
  3259  009C                     	;# 
  3260  009D                     	;# 
  3261  009E                     	;# 
  3262  009F                     	;# 
  3263  010C                     	;# 
  3264  010D                     	;# 
  3265  010E                     	;# 
  3266  0111                     	;# 
  3267  0112                     	;# 
  3268  0113                     	;# 
  3269  0114                     	;# 
  3270  0115                     	;# 
  3271  0116                     	;# 
  3272  0117                     	;# 
  3273  0118                     	;# 
  3274  0119                     	;# 
  3275  011C                     	;# 
  3276  018C                     	;# 
  3277  018D                     	;# 
  3278  018E                     	;# 
  3279  0191                     	;# 
  3280  0191                     	;# 
  3281  0192                     	;# 
  3282  0193                     	;# 
  3283  0193                     	;# 
  3284  0194                     	;# 
  3285  0195                     	;# 
  3286  0196                     	;# 
  3287  0197                     	;# 
  3288  0199                     	;# 
  3289  0199                     	;# 
  3290  0199                     	;# 
  3291  019A                     	;# 
  3292  019A                     	;# 
  3293  019A                     	;# 
  3294  019B                     	;# 
  3295  019B                     	;# 
  3296  019B                     	;# 
  3297  019B                     	;# 
  3298  019B                     	;# 
  3299  019C                     	;# 
  3300  019C                     	;# 
  3301  019C                     	;# 
  3302  019D                     	;# 
  3303  019D                     	;# 
  3304  019D                     	;# 
  3305  019E                     	;# 
  3306  019E                     	;# 
  3307  019E                     	;# 
  3308  019F                     	;# 
  3309  019F                     	;# 
  3310  019F                     	;# 
  3311  019F                     	;# 
  3312  019F                     	;# 
  3313  020C                     	;# 
  3314  020D                     	;# 
  3315  020E                     	;# 
  3316  0211                     	;# 
  3317  0211                     	;# 
  3318  0212                     	;# 
  3319  0212                     	;# 
  3320  0213                     	;# 
  3321  0213                     	;# 
  3322  0214                     	;# 
  3323  0214                     	;# 
  3324  0215                     	;# 
  3325  0215                     	;# 
  3326  0215                     	;# 
  3327  0215                     	;# 
  3328  0216                     	;# 
  3329  0216                     	;# 
  3330  0217                     	;# 
  3331  0217                     	;# 
  3332  028C                     	;# 
  3333  028D                     	;# 
  3334  028E                     	;# 
  3335  0291                     	;# 
  3336  0291                     	;# 
  3337  0292                     	;# 
  3338  0293                     	;# 
  3339  0294                     	;# 
  3340  0298                     	;# 
  3341  0298                     	;# 
  3342  0299                     	;# 
  3343  029A                     	;# 
  3344  029B                     	;# 
  3345  029E                     	;# 
  3346  030C                     	;# 
  3347  030D                     	;# 
  3348  030E                     	;# 
  3349  038C                     	;# 
  3350  038D                     	;# 
  3351  038E                     	;# 
  3352  0391                     	;# 
  3353  0392                     	;# 
  3354  0393                     	;# 
  3355  0394                     	;# 
  3356  0395                     	;# 
  3357  0396                     	;# 
  3358  0397                     	;# 
  3359  0398                     	;# 
  3360  0399                     	;# 
  3361  040E                     	;# 
  3362  0413                     	;# 
  3363  0413                     	;# 
  3364  0414                     	;# 
  3365  0414                     	;# 
  3366  0415                     	;# 
  3367  0416                     	;# 
  3368  0417                     	;# 
  3369  0418                     	;# 
  3370  041A                     	;# 
  3371  041A                     	;# 
  3372  041B                     	;# 
  3373  041B                     	;# 
  3374  041C                     	;# 
  3375  041D                     	;# 
  3376  041E                     	;# 
  3377  041F                     	;# 
  3378  0493                     	;# 
  3379  0494                     	;# 
  3380  0495                     	;# 
  3381  0496                     	;# 
  3382  049A                     	;# 
  3383  049B                     	;# 
  3384  049C                     	;# 
  3385  049D                     	;# 
  3386  058C                     	;# 
  3387  058C                     	;# 
  3388  058D                     	;# 
  3389  058E                     	;# 
  3390  058E                     	;# 
  3391  058F                     	;# 
  3392  0590                     	;# 
  3393  0590                     	;# 
  3394  0591                     	;# 
  3395  0592                     	;# 
  3396  0592                     	;# 
  3397  0593                     	;# 
  3398  0594                     	;# 
  3399  0594                     	;# 
  3400  0595                     	;# 
  3401  0596                     	;# 
  3402  0596                     	;# 
  3403  0597                     	;# 
  3404  0598                     	;# 
  3405  0599                     	;# 
  3406  059A                     	;# 
  3407  059B                     	;# 
  3408  059B                     	;# 
  3409  059C                     	;# 
  3410  059D                     	;# 
  3411  060C                     	;# 
  3412  060C                     	;# 
  3413  060D                     	;# 
  3414  060E                     	;# 
  3415  060F                     	;# 
  3416  060F                     	;# 
  3417  0610                     	;# 
  3418  0611                     	;# 
  3419  0612                     	;# 
  3420  0613                     	;# 
  3421  0614                     	;# 
  3422  0617                     	;# 
  3423  0618                     	;# 
  3424  0619                     	;# 
  3425  061A                     	;# 
  3426  061B                     	;# 
  3427  061C                     	;# 
  3428  0691                     	;# 
  3429  0692                     	;# 
  3430  0693                     	;# 
  3431  0694                     	;# 
  3432  0695                     	;# 
  3433  0696                     	;# 
  3434  0697                     	;# 
  3435  0699                     	;# 
  3436  069A                     	;# 
  3437  0711                     	;# 
  3438  0712                     	;# 
  3439  0713                     	;# 
  3440  0714                     	;# 
  3441  0715                     	;# 
  3442  0718                     	;# 
  3443  0718                     	;# 
  3444  0719                     	;# 
  3445  071A                     	;# 
  3446  071A                     	;# 
  3447  071B                     	;# 
  3448  071C                     	;# 
  3449  071D                     	;# 
  3450  0791                     	;# 
  3451  0791                     	;# 
  3452  0792                     	;# 
  3453  0793                     	;# 
  3454  0793                     	;# 
  3455  0794                     	;# 
  3456  0795                     	;# 
  3457  0795                     	;# 
  3458  0796                     	;# 
  3459  0797                     	;# 
  3460  0797                     	;# 
  3461  0798                     	;# 
  3462  0799                     	;# 
  3463  079A                     	;# 
  3464  080C                     	;# 
  3465  080C                     	;# 
  3466  080D                     	;# 
  3467  080E                     	;# 
  3468  080E                     	;# 
  3469  080F                     	;# 
  3470  0810                     	;# 
  3471  0810                     	;# 
  3472  0811                     	;# 
  3473  0812                     	;# 
  3474  0812                     	;# 
  3475  0813                     	;# 
  3476  0814                     	;# 
  3477  0815                     	;# 
  3478  0816                     	;# 
  3479  0817                     	;# 
  3480  0818                     	;# 
  3481  0819                     	;# 
  3482  081A                     	;# 
  3483  081A                     	;# 
  3484  081B                     	;# 
  3485  081C                     	;# 
  3486  081C                     	;# 
  3487  081D                     	;# 
  3488  088C                     	;# 
  3489  088D                     	;# 
  3490  088E                     	;# 
  3491  088F                     	;# 
  3492  088F                     	;# 
  3493  0890                     	;# 
  3494  0891                     	;# 
  3495  0892                     	;# 
  3496  0893                     	;# 
  3497  0893                     	;# 
  3498  0894                     	;# 
  3499  0895                     	;# 
  3500  0896                     	;# 
  3501  0897                     	;# 
  3502  0897                     	;# 
  3503  0898                     	;# 
  3504  0899                     	;# 
  3505  0D8C                     	;# 
  3506  0D8C                     	;# 
  3507  0D8D                     	;# 
  3508  0D8E                     	;# 
  3509  0D8F                     	;# 
  3510  0D8F                     	;# 
  3511  0D90                     	;# 
  3512  0D91                     	;# 
  3513  0D92                     	;# 
  3514  0D92                     	;# 
  3515  0D93                     	;# 
  3516  0D94                     	;# 
  3517  0D95                     	;# 
  3518  0D95                     	;# 
  3519  0D96                     	;# 
  3520  0D97                     	;# 
  3521  0D98                     	;# 
  3522  0D99                     	;# 
  3523  0D9A                     	;# 
  3524  0D9B                     	;# 
  3525  0D9C                     	;# 
  3526  0D9D                     	;# 
  3527  0D9E                     	;# 
  3528  0D9E                     	;# 
  3529  0D9F                     	;# 
  3530  0DA0                     	;# 
  3531  0DA1                     	;# 
  3532  0DA1                     	;# 
  3533  0DA2                     	;# 
  3534  0DA3                     	;# 
  3535  0DA4                     	;# 
  3536  0DA4                     	;# 
  3537  0DA5                     	;# 
  3538  0DA6                     	;# 
  3539  0DA7                     	;# 
  3540  0DA7                     	;# 
  3541  0DA8                     	;# 
  3542  0DA9                     	;# 
  3543  0DAA                     	;# 
  3544  0DAB                     	;# 
  3545  0DAC                     	;# 
  3546  0DAD                     	;# 
  3547  0DAE                     	;# 
  3548  0DAF                     	;# 
  3549  0E0F                     	;# 
  3550  0E10                     	;# 
  3551  0E11                     	;# 
  3552  0E12                     	;# 
  3553  0E13                     	;# 
  3554  0E14                     	;# 
  3555  0E15                     	;# 
  3556  0E16                     	;# 
  3557  0E17                     	;# 
  3558  0E18                     	;# 
  3559  0E19                     	;# 
  3560  0E1A                     	;# 
  3561  0E1B                     	;# 
  3562  0E1C                     	;# 
  3563  0E1D                     	;# 
  3564  0E1E                     	;# 
  3565  0E1F                     	;# 
  3566  0E20                     	;# 
  3567  0E21                     	;# 
  3568  0E22                     	;# 
  3569  0E23                     	;# 
  3570  0E24                     	;# 
  3571  0E25                     	;# 
  3572  0E26                     	;# 
  3573  0E27                     	;# 
  3574  0E28                     	;# 
  3575  0E29                     	;# 
  3576  0E2A                     	;# 
  3577  0E2B                     	;# 
  3578  0E2C                     	;# 
  3579  0E2D                     	;# 
  3580  0E2E                     	;# 
  3581  0E90                     	;# 
  3582  0E91                     	;# 
  3583  0E92                     	;# 
  3584  0E94                     	;# 
  3585  0E95                     	;# 
  3586  0E9C                     	;# 
  3587  0E9D                     	;# 
  3588  0E9E                     	;# 
  3589  0E9F                     	;# 
  3590  0EA0                     	;# 
  3591  0EA1                     	;# 
  3592  0EA2                     	;# 
  3593  0EA3                     	;# 
  3594  0EA4                     	;# 
  3595  0EA5                     	;# 
  3596  0EA6                     	;# 
  3597  0EA7                     	;# 
  3598  0F0F                     	;# 
  3599  0F10                     	;# 
  3600  0F11                     	;# 
  3601  0F12                     	;# 
  3602  0F13                     	;# 
  3603  0F14                     	;# 
  3604  0F15                     	;# 
  3605  0F16                     	;# 
  3606  0F17                     	;# 
  3607  0F18                     	;# 
  3608  0F19                     	;# 
  3609  0F1A                     	;# 
  3610  0F1B                     	;# 
  3611  0F1C                     	;# 
  3612  0F1D                     	;# 
  3613  0F1E                     	;# 
  3614  0F1F                     	;# 
  3615  0F20                     	;# 
  3616  0F21                     	;# 
  3617  0F22                     	;# 
  3618  0F23                     	;# 
  3619  0F24                     	;# 
  3620  0F25                     	;# 
  3621  0F26                     	;# 
  3622  0F27                     	;# 
  3623  0F28                     	;# 
  3624  0F29                     	;# 
  3625  0F2A                     	;# 
  3626  0F2B                     	;# 
  3627  0F2C                     	;# 
  3628  0F2D                     	;# 
  3629  0F2E                     	;# 
  3630  0F2F                     	;# 
  3631  0F30                     	;# 
  3632  0F31                     	;# 
  3633  0F32                     	;# 
  3634  0F33                     	;# 
  3635  0F34                     	;# 
  3636  0F35                     	;# 
  3637  0F36                     	;# 
  3638  0F37                     	;# 
  3639  0FE4                     	;# 
  3640  0FE5                     	;# 
  3641  0FE6                     	;# 
  3642  0FE7                     	;# 
  3643  0FE8                     	;# 
  3644  0FE9                     	;# 
  3645  0FEA                     	;# 
  3646  0FEB                     	;# 
  3647  0FED                     	;# 
  3648  0FEE                     	;# 
  3649  0FEF                     	;# 
  3650                           
  3651                           	psect	idataBANK0
  3652  05E2                     __pidataBANK0:	
  3653                           
  3654                           ;initializer for _Angle
  3655  05E2  342D               	retlw	45
  3656  05E3  3400               	retlw	0
  3657                           
  3658                           ;initializer for _StateBat
  3659  05E4  3401               	retlw	1
  3660                           
  3661                           ;initializer for _Validation
  3662  05E5  3404               	retlw	4
  3663                           
  3664                           	psect	stringtext1
  3665  0419                     __pstringtext1:	
  3666  0419                     _fsmStateTable:	
  3667  0419  34D8               	retlw	low _I2C_DO_IDLE
  3668  041A  3405               	retlw	high _I2C_DO_IDLE
  3669  041B  3485               	retlw	low _I2C_DO_SEND_ADR_READ
  3670  041C  3405               	retlw	high _I2C_DO_SEND_ADR_READ
  3671  041D  349C               	retlw	low _I2C_DO_SEND_ADR_WRITE
  3672  041E  3405               	retlw	high _I2C_DO_SEND_ADR_WRITE
  3673  041F  34C4               	retlw	low _I2C_DO_TX
  3674  0420  3401               	retlw	high _I2C_DO_TX
  3675  0421  344A               	retlw	low _I2C_DO_RX
  3676  0422  3402               	retlw	high _I2C_DO_RX
  3677  0423  34C7               	retlw	low _I2C_DO_RCEN
  3678  0424  3405               	retlw	high _I2C_DO_RCEN
  3679  0425  34AD               	retlw	low _I2C_DO_TX_EMPTY
  3680  0426  3403               	retlw	high _I2C_DO_TX_EMPTY
  3681  0427  3406               	retlw	low _I2C_DO_SEND_RESTART_READ
  3682  0428  3406               	retlw	high _I2C_DO_SEND_RESTART_READ
  3683  0429  3402               	retlw	low _I2C_DO_SEND_RESTART_WRITE
  3684  042A  3406               	retlw	high _I2C_DO_SEND_RESTART_WRITE
  3685  042B  34FE               	retlw	low _I2C_DO_SEND_RESTART
  3686  042C  3405               	retlw	high _I2C_DO_SEND_RESTART
  3687  042D  34FA               	retlw	low _I2C_DO_SEND_STOP
  3688  042E  3405               	retlw	high _I2C_DO_SEND_STOP
  3689  042F  34F6               	retlw	low _I2C_DO_RX_ACK
  3690  0430  3405               	retlw	high _I2C_DO_RX_ACK
  3691  0431  34F2               	retlw	low _I2C_DO_RX_NACK_STOP
  3692  0432  3405               	retlw	high _I2C_DO_RX_NACK_STOP
  3693  0433  34EE               	retlw	low _I2C_DO_RX_NACK_RESTART
  3694  0434  3405               	retlw	high _I2C_DO_RX_NACK_RESTART
  3695  0435  34D3               	retlw	low _I2C_DO_RESET
  3696  0436  3405               	retlw	high _I2C_DO_RESET
  3697  0437  34F6               	retlw	low _I2C_DO_ADDRESS_NACK
  3698  0438  3403               	retlw	high _I2C_DO_ADDRESS_NACK
  3699  0439                     __end_of_fsmStateTable:	
  3700                           
  3701                           	psect	nvBANK0
  3702  0063                     __pnvBANK0:	
  3703  0063                     _TMR2_InterruptHandler:	
  3704  0063                     	ds	2
  3705  0065                     _EUSART_RxDefaultInterruptHandler:	
  3706  0065                     	ds	2
  3707                           
  3708                           	psect	nvBANK1
  3709  00A0                     __pnvBANK1:	
  3710  00A0                     _EUSART_ErrorHandler:	
  3711  00A0                     	ds	2
  3712  00A2                     _EUSART_OverrunErrorHandler:	
  3713  00A2                     	ds	2
  3714  00A4                     _EUSART_FramingErrorHandler:	
  3715  00A4                     	ds	2
  3716  000C                     _PORTAbits	set	12
  3717  001B                     _PR2	set	27
  3718  001A                     _TMR2	set	26
  3719  001C                     _T2CONbits	set	28
  3720  001F                     _T2RSTbits	set	31
  3721  001D                     _T2HLTbits	set	29
  3722  001C                     _T2CON	set	28
  3723  001A                     _T2TMR	set	26
  3724  001B                     _T2PR	set	27
  3725  001F                     _T2RST	set	31
  3726  001D                     _T2HLT	set	29
  3727  001E                     _T2CLKCON	set	30
  3728  0011                     _PIR2bits	set	17
  3729  0010                     _PIR1bits	set	16
  3730  000B                     _INTCONbits	set	11
  3731  0095                     _OPTION_REGbits	set	149
  3732  008E                     _TRISC	set	142
  3733  008D                     _TRISB	set	141
  3734  008C                     _TRISA	set	140
  3735  0098                     _OSCTUNE	set	152
  3736  0099                     _OSCCON	set	153
  3737  0090                     _PIE1bits	set	144
  3738  010C                     _LATAbits	set	268
  3739  010E                     _LATCbits	set	270
  3740  010E                     _LATC	set	270
  3741  010D                     _LATB	set	269
  3742  010C                     _LATA	set	268
  3743  0116                     _BORCON	set	278
  3744  0199                     _RC1REG	set	409
  3745  019D                     _RC1STAbits	set	413
  3746  019A                     _TX1REG	set	410
  3747  019E                     _TX1STAbits	set	414
  3748  019C                     _SPBRGH	set	412
  3749  019B                     _SPBRGL	set	411
  3750  019E                     _TX1STA	set	414
  3751  019D                     _RC1STA	set	413
  3752  019F                     _BAUD1CON	set	415
  3753  018C                     _ANSELA	set	396
  3754  018D                     _ANSELB	set	397
  3755  018E                     _ANSELC	set	398
  3756  0214                     _SSP1STATbits	set	532
  3757  0216                     _SSP1CON2bits	set	534
  3758  0211                     _SSP1BUF	set	529
  3759  0215                     _SSP1CON1bits	set	533
  3760  0212                     _SSP1ADD	set	530
  3761  0216                     _SSP1CON2	set	534
  3762  0215                     _SSP1CON1	set	533
  3763  0214                     _SSP1STAT	set	532
  3764  020E                     _WPUC	set	526
  3765  020C                     _WPUA	set	524
  3766  020D                     _WPUB	set	525
  3767  029E                     _CCPTMRSbits	set	670
  3768  028E                     _ODCONC	set	654
  3769  028D                     _ODCONB	set	653
  3770  028C                     _ODCONA	set	652
  3771  030E                     _SLRCONC	set	782
  3772  030D                     _SLRCONB	set	781
  3773  030C                     _SLRCONA	set	780
  3774  038E                     _INLVLC	set	910
  3775  038D                     _INLVLB	set	909
  3776  038C                     _INLVLA	set	908
  3777  0617                     _PWM3DCL	set	1559
  3778  0618                     _PWM3DCH	set	1560
  3779  0619                     _PWM3CON	set	1561
  3780  0E20                     _SSPCLKPPS	set	3616
  3781  0E21                     _SSPDATPPS	set	3617
  3782  0E24                     _RXPPS	set	3620
  3783  0E92                     _RA2PPS	set	3730
  3784  0E9C                     _RB4PPS	set	3740
  3785  0E9F                     _RB7PPS	set	3743
  3786  0E9E                     _RB6PPS	set	3742
  3787                           
  3788                           ; #config settings
  3789  0000                     
  3790                           	psect	cinit
  3791  0026                     start_initialization:	
  3792  0026                     __initialization:	
  3793                           
  3794                           ; Initialize objects allocated to BANK0
  3795  0026  3185  25E2  3180   	fcall	__pidataBANK0	;fetch initializer
  3796  0029  00E7               	movwf	__pdataBANK0& (0+127)
  3797  002A  3185  25E3  3180   	fcall	__pidataBANK0+1	;fetch initializer
  3798  002D  00E8               	movwf	(__pdataBANK0+1)& (0+127)
  3799  002E  3185  25E4  3180   	fcall	__pidataBANK0+2	;fetch initializer
  3800  0031  00E9               	movwf	(__pdataBANK0+2)& (0+127)
  3801  0032  3185  25E5  3180   	fcall	__pidataBANK0+3	;fetch initializer
  3802  0035  00EA               	movwf	(__pdataBANK0+3)& (0+127)
  3803                           
  3804                           ; Clear objects allocated to BANK0
  3805  0036  3020               	movlw	low __pbssBANK0
  3806  0037  0084               	movwf	4
  3807  0038  3000               	movlw	high __pbssBANK0
  3808  0039  0085               	movwf	5
  3809  003A  3038               	movlw	56
  3810  003B  3185  25A3         	fcall	clear_ram0
  3811  003D                     end_of_initialization:	
  3812                           ;End of C runtime variable initialization code
  3813                           
  3814  003D                     __end_of__initialization:	
  3815  003D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3816  003E  0020               	movlb	0
  3817  003F  3181  296E         	ljmp	_main	;jump to C main() function
  3818                           
  3819                           	psect	bssBANK0
  3820  0020                     __pbssBANK0:	
  3821  0020                     _I2C_Status:	
  3822  0020                     	ds	29
  3823  003D                     _eusartRxStatusBuffer:	
  3824  003D                     	ds	8
  3825  0045                     _eusartRxBuffer:	
  3826  0045                     	ds	8
  3827  004D                     _Vitesse:	
  3828  004D                     	ds	2
  3829  004F                     _StateLeds:	
  3830  004F                     	ds	1
  3831  0050                     _PosUart:	
  3832  0050                     	ds	1
  3833  0051                     _CptBat:	
  3834  0051                     	ds	1
  3835  0052                     _Type:	
  3836  0052                     	ds	1
  3837  0053                     _Data:	
  3838  0053                     	ds	1
  3839  0054                     _eusartRxLastError:	
  3840  0054                     	ds	1
  3841  0055                     _eusartRxCount:	
  3842  0055                     	ds	1
  3843  0056                     _eusartRxTail:	
  3844  0056                     	ds	1
  3845  0057                     _eusartRxHead:	
  3846  0057                     	ds	1
  3847                           
  3848                           	psect	dataBANK0
  3849  0067                     __pdataBANK0:	
  3850  0067                     _Angle:	
  3851  0067                     	ds	2
  3852  0069                     _StateBat:	
  3853  0069                     	ds	1
  3854  006A                     _Validation:	
  3855  006A                     	ds	1
  3856                           
  3857                           	psect	clrtext
  3858  05A3                     clear_ram0:	
  3859                           ;	Called with FSR0 containing the base address, and
  3860                           ;	WREG with the size to clear
  3861                           
  3862  05A3  0064               	clrwdt	;clear the watchdog before getting into this loop
  3863  05A4                     clrloop0:	
  3864  05A4  0180               	clrf	0	;clear RAM location pointed to by FSR
  3865  05A5  3101               	addfsr 0,1
  3866  05A6  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3867  05A7  2DA4               	goto	clrloop0	;have we reached the end yet?
  3868  05A8  3400               	retlw	0	;all done for this memory range, return
  3869                           
  3870                           	psect	cstackBANK1
  3871  00A6                     __pcstackBANK1:	
  3872  00A6                     ??_I2C_Initialize:	
  3873  00A6                     ??_PIN_MANAGER_Initialize:	
  3874                           ; 1 bytes @ 0x0
  3875                           
  3876  00A6                     ??_OSCILLATOR_Initialize:	
  3877                           ; 1 bytes @ 0x0
  3878                           
  3879  00A6                     ??_PWM3_Initialize:	
  3880                           ; 1 bytes @ 0x0
  3881                           
  3882  00A6                     ?_EUSART_SetRxInterruptHandler:	
  3883                           ; 1 bytes @ 0x0
  3884                           
  3885  00A6                     ?_EUSART_SetFramingErrorHandler:	
  3886                           ; 1 bytes @ 0x0
  3887                           
  3888  00A6                     ?_EUSART_SetOverrunErrorHandler:	
  3889                           ; 1 bytes @ 0x0
  3890                           
  3891  00A6                     ?_EUSART_SetErrorHandler:	
  3892                           ; 1 bytes @ 0x0
  3893                           
  3894  00A6                     ?_TMR2_SetInterruptHandler:	
  3895                           ; 1 bytes @ 0x0
  3896                           
  3897  00A6                     ??_TMR2_Start:	
  3898                           ; 1 bytes @ 0x0
  3899                           
  3900  00A6                     ??_TMR2_StartTimer:	
  3901                           ; 1 bytes @ 0x0
  3902                           
  3903  00A6                     ??_TMR2_Counter8BitSet:	
  3904                           ; 1 bytes @ 0x0
  3905                           
  3906  00A6                     TMR2_Counter8BitSet@timerVal:	
  3907                           ; 1 bytes @ 0x0
  3908                           
  3909  00A6                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3910                           ; 1 bytes @ 0x0
  3911                           
  3912  00A6                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3913                           ; 2 bytes @ 0x0
  3914                           
  3915  00A6                     EUSART_SetErrorHandler@interruptHandler:	
  3916                           ; 2 bytes @ 0x0
  3917                           
  3918  00A6                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3919                           ; 2 bytes @ 0x0
  3920                           
  3921  00A6                     TMR2_SetInterruptHandler@InterruptHandler:	
  3922                           ; 2 bytes @ 0x0
  3923                           
  3924                           
  3925                           ; 2 bytes @ 0x0
  3926  00A6                     	ds	1
  3927  00A7                     ??_TMR2_WriteTimer:	
  3928  00A7                     TMR2_WriteTimer@timerVal:	
  3929                           ; 1 bytes @ 0x1
  3930                           
  3931                           
  3932                           ; 1 bytes @ 0x1
  3933  00A7                     	ds	1
  3934  00A8                     ??_TMR2_Initialize:	
  3935  00A8                     ??_EUSART_Initialize:	
  3936                           ; 1 bytes @ 0x2
  3937                           
  3938  00A8                     ??_EUSART_SetRxInterruptHandler:	
  3939                           ; 1 bytes @ 0x2
  3940                           
  3941  00A8                     ??_EUSART_SetFramingErrorHandler:	
  3942                           ; 1 bytes @ 0x2
  3943                           
  3944  00A8                     ??_EUSART_SetOverrunErrorHandler:	
  3945                           ; 1 bytes @ 0x2
  3946                           
  3947  00A8                     ??_EUSART_SetErrorHandler:	
  3948                           ; 1 bytes @ 0x2
  3949                           
  3950  00A8                     ??_TMR2_SetInterruptHandler:	
  3951                           ; 1 bytes @ 0x2
  3952                           
  3953  00A8                     ??_SYSTEM_Initialize:	
  3954                           ; 1 bytes @ 0x2
  3955                           
  3956  00A8                     ??_main:	
  3957                           ; 1 bytes @ 0x2
  3958                           
  3959                           
  3960                           ; 1 bytes @ 0x2
  3961  00A8                     	ds	2
  3962                           
  3963                           	psect	cstackCOMMON
  3964  0070                     __pcstackCOMMON:	
  3965  0070                     ?_I2C_Open:	
  3966  0070                     ??_I2C_Open:	
  3967                           ; 1 bytes @ 0x0
  3968                           
  3969  0070                     ?_I2C_SetBuffer:	
  3970                           ; 1 bytes @ 0x0
  3971                           
  3972  0070                     ?_I2C_MasterWrite:	
  3973                           ; 1 bytes @ 0x0
  3974                           
  3975  0070                     ?_I2C_Close:	
  3976                           ; 1 bytes @ 0x0
  3977                           
  3978  0070                     ??_I2C_Close:	
  3979                           ; 1 bytes @ 0x0
  3980                           
  3981  0070                     ?_TMR2_ISR:	
  3982                           ; 1 bytes @ 0x0
  3983                           
  3984  0070                     ?_I2C_Initialize:	
  3985                           ; 1 bytes @ 0x0
  3986                           
  3987  0070                     ?_PIN_MANAGER_Initialize:	
  3988                           ; 1 bytes @ 0x0
  3989                           
  3990  0070                     ?_OSCILLATOR_Initialize:	
  3991                           ; 1 bytes @ 0x0
  3992                           
  3993  0070                     ?_PWM3_Initialize:	
  3994                           ; 1 bytes @ 0x0
  3995                           
  3996  0070                     ?_TMR2_Initialize:	
  3997                           ; 1 bytes @ 0x0
  3998                           
  3999  0070                     ?_EUSART_Initialize:	
  4000                           ; 1 bytes @ 0x0
  4001                           
  4002  0070                     ?_I2C_DO_IDLE:	
  4003                           ; 1 bytes @ 0x0
  4004                           
  4005  0070                     ??_I2C_DO_IDLE:	
  4006                           ; 1 bytes @ 0x0
  4007                           
  4008  0070                     ?_I2C_DO_SEND_ADR_READ:	
  4009                           ; 1 bytes @ 0x0
  4010                           
  4011  0070                     ??_I2C_DO_SEND_ADR_READ:	
  4012                           ; 1 bytes @ 0x0
  4013                           
  4014  0070                     ?_I2C_DO_SEND_ADR_WRITE:	
  4015                           ; 1 bytes @ 0x0
  4016                           
  4017  0070                     ?_I2C_DO_TX:	
  4018                           ; 1 bytes @ 0x0
  4019                           
  4020  0070                     ?_I2C_DO_RX:	
  4021                           ; 1 bytes @ 0x0
  4022                           
  4023  0070                     ?_I2C_DO_RCEN:	
  4024                           ; 1 bytes @ 0x0
  4025                           
  4026  0070                     ??_I2C_DO_RCEN:	
  4027                           ; 1 bytes @ 0x0
  4028                           
  4029  0070                     ?_I2C_DO_TX_EMPTY:	
  4030                           ; 1 bytes @ 0x0
  4031                           
  4032  0070                     ?_I2C_DO_SEND_RESTART_READ:	
  4033                           ; 1 bytes @ 0x0
  4034                           
  4035  0070                     ??_I2C_DO_SEND_RESTART_READ:	
  4036                           ; 1 bytes @ 0x0
  4037                           
  4038  0070                     ?_I2C_DO_SEND_RESTART_WRITE:	
  4039                           ; 1 bytes @ 0x0
  4040                           
  4041  0070                     ??_I2C_DO_SEND_RESTART_WRITE:	
  4042                           ; 1 bytes @ 0x0
  4043                           
  4044  0070                     ?_I2C_DO_SEND_RESTART:	
  4045                           ; 1 bytes @ 0x0
  4046                           
  4047  0070                     ??_I2C_DO_SEND_RESTART:	
  4048                           ; 1 bytes @ 0x0
  4049                           
  4050  0070                     ?_I2C_DO_SEND_STOP:	
  4051                           ; 1 bytes @ 0x0
  4052                           
  4053  0070                     ??_I2C_DO_SEND_STOP:	
  4054                           ; 1 bytes @ 0x0
  4055                           
  4056  0070                     ?_I2C_DO_RX_ACK:	
  4057                           ; 1 bytes @ 0x0
  4058                           
  4059  0070                     ??_I2C_DO_RX_ACK:	
  4060                           ; 1 bytes @ 0x0
  4061                           
  4062  0070                     ?_I2C_DO_RX_NACK_STOP:	
  4063                           ; 1 bytes @ 0x0
  4064                           
  4065  0070                     ??_I2C_DO_RX_NACK_STOP:	
  4066                           ; 1 bytes @ 0x0
  4067                           
  4068  0070                     ?_I2C_DO_RX_NACK_RESTART:	
  4069                           ; 1 bytes @ 0x0
  4070                           
  4071  0070                     ??_I2C_DO_RX_NACK_RESTART:	
  4072                           ; 1 bytes @ 0x0
  4073                           
  4074  0070                     ?_I2C_DO_RESET:	
  4075                           ; 1 bytes @ 0x0
  4076                           
  4077  0070                     ??_I2C_DO_RESET:	
  4078                           ; 1 bytes @ 0x0
  4079                           
  4080  0070                     ?_I2C_DO_ADDRESS_NACK:	
  4081                           ; 1 bytes @ 0x0
  4082                           
  4083  0070                     ?_I2C_MasterClearIrq:	
  4084                           ; 1 bytes @ 0x0
  4085                           
  4086  0070                     ??_I2C_MasterClearIrq:	
  4087                           ; 1 bytes @ 0x0
  4088                           
  4089  0070                     ?_I2C_MasterOpen:	
  4090                           ; 1 bytes @ 0x0
  4091                           
  4092  0070                     ??_I2C_MasterOpen:	
  4093                           ; 1 bytes @ 0x0
  4094                           
  4095  0070                     ?_I2C_MasterDisableIrq:	
  4096                           ; 1 bytes @ 0x0
  4097                           
  4098  0070                     ??_I2C_MasterDisableIrq:	
  4099                           ; 1 bytes @ 0x0
  4100                           
  4101  0070                     ?_I2C_MasterClose:	
  4102                           ; 1 bytes @ 0x0
  4103                           
  4104  0070                     ??_I2C_MasterClose:	
  4105                           ; 1 bytes @ 0x0
  4106                           
  4107  0070                     ?_I2C_MasterStart:	
  4108                           ; 1 bytes @ 0x0
  4109                           
  4110  0070                     ??_I2C_MasterStart:	
  4111                           ; 1 bytes @ 0x0
  4112                           
  4113  0070                     ?_I2C_Poller:	
  4114                           ; 1 bytes @ 0x0
  4115                           
  4116  0070                     ?_I2C_SetCallback:	
  4117                           ; 1 bytes @ 0x0
  4118                           
  4119  0070                     ?_I2C_MasterWaitForEvent:	
  4120                           ; 1 bytes @ 0x0
  4121                           
  4122  0070                     ??_I2C_MasterWaitForEvent:	
  4123                           ; 1 bytes @ 0x0
  4124                           
  4125  0070                     ?_I2C_MasterFsm:	
  4126                           ; 1 bytes @ 0x0
  4127                           
  4128  0070                     ?_I2C_MasterIsNack:	
  4129                           ; 1 bytes @ 0x0
  4130                           
  4131  0070                     ??_I2C_MasterIsNack:	
  4132                           ; 1 bytes @ 0x0
  4133                           
  4134  0070                     ?_I2C_MasterSendTxData:	
  4135                           ; 1 bytes @ 0x0
  4136                           
  4137  0070                     ??_I2C_MasterSendTxData:	
  4138                           ; 1 bytes @ 0x0
  4139                           
  4140  0070                     ?_I2C_MasterGetRxData:	
  4141                           ; 1 bytes @ 0x0
  4142                           
  4143  0070                     ??_I2C_MasterGetRxData:	
  4144                           ; 1 bytes @ 0x0
  4145                           
  4146  0070                     ?_I2C_MasterSendAck:	
  4147                           ; 1 bytes @ 0x0
  4148                           
  4149  0070                     ??_I2C_MasterSendAck:	
  4150                           ; 1 bytes @ 0x0
  4151                           
  4152  0070                     ?_I2C_MasterStartRx:	
  4153                           ; 1 bytes @ 0x0
  4154                           
  4155  0070                     ??_I2C_MasterStartRx:	
  4156                           ; 1 bytes @ 0x0
  4157                           
  4158  0070                     ?_I2C_MasterSetIrq:	
  4159                           ; 1 bytes @ 0x0
  4160                           
  4161  0070                     ??_I2C_MasterSetIrq:	
  4162                           ; 1 bytes @ 0x0
  4163                           
  4164  0070                     ?_I2C_MasterEnableRestart:	
  4165                           ; 1 bytes @ 0x0
  4166                           
  4167  0070                     ??_I2C_MasterEnableRestart:	
  4168                           ; 1 bytes @ 0x0
  4169                           
  4170  0070                     ?_I2C_MasterStop:	
  4171                           ; 1 bytes @ 0x0
  4172                           
  4173  0070                     ??_I2C_MasterStop:	
  4174                           ; 1 bytes @ 0x0
  4175                           
  4176  0070                     ?_I2C_MasterSendNack:	
  4177                           ; 1 bytes @ 0x0
  4178                           
  4179  0070                     ??_I2C_MasterSendNack:	
  4180                           ; 1 bytes @ 0x0
  4181                           
  4182  0070                     ?_EUSART_Receive_ISR:	
  4183                           ; 1 bytes @ 0x0
  4184                           
  4185  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  4186                           ; 1 bytes @ 0x0
  4187                           
  4188  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  4189                           ; 1 bytes @ 0x0
  4190                           
  4191  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  4192                           ; 1 bytes @ 0x0
  4193                           
  4194  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  4195                           ; 1 bytes @ 0x0
  4196                           
  4197  0070                     ?_EUSART_DefaultErrorHandler:	
  4198                           ; 1 bytes @ 0x0
  4199                           
  4200  0070                     ?_EUSART_RxDataHandler:	
  4201                           ; 1 bytes @ 0x0
  4202                           
  4203  0070                     ??_EUSART_RxDataHandler:	
  4204                           ; 1 bytes @ 0x0
  4205                           
  4206  0070                     ?_TMR2_DefaultInterruptHandler:	
  4207                           ; 1 bytes @ 0x0
  4208                           
  4209  0070                     ??_TMR2_DefaultInterruptHandler:	
  4210                           ; 1 bytes @ 0x0
  4211                           
  4212  0070                     ?_INTERRUPT_InterruptManager:	
  4213                           ; 1 bytes @ 0x0
  4214                           
  4215  0070                     ?_SYSTEM_Initialize:	
  4216                           ; 1 bytes @ 0x0
  4217                           
  4218  0070                     ?_I2C_MasterOperation:	
  4219                           ; 1 bytes @ 0x0
  4220                           
  4221  0070                     ?_EUSART_Write:	
  4222                           ; 1 bytes @ 0x0
  4223                           
  4224  0070                     ??_EUSART_Write:	
  4225                           ; 1 bytes @ 0x0
  4226                           
  4227  0070                     ?_TMR2_Start:	
  4228                           ; 1 bytes @ 0x0
  4229                           
  4230  0070                     ?_TMR2_StartTimer:	
  4231                           ; 1 bytes @ 0x0
  4232                           
  4233  0070                     ?_TMR2_Counter8BitSet:	
  4234                           ; 1 bytes @ 0x0
  4235                           
  4236  0070                     ?_TMR2_WriteTimer:	
  4237                           ; 1 bytes @ 0x0
  4238                           
  4239  0070                     ?_MyTimer2ISR:	
  4240                           ; 1 bytes @ 0x0
  4241                           
  4242  0070                     ?_MyUART_ISR:	
  4243                           ; 1 bytes @ 0x0
  4244                           
  4245  0070                     ?_main:	
  4246                           ; 1 bytes @ 0x0
  4247                           
  4248  0070                     ?___lwdiv:	
  4249                           ; 1 bytes @ 0x0
  4250                           
  4251  0070                     I2C_MasterSendTxData@data:	
  4252                           ; 2 bytes @ 0x0
  4253                           
  4254  0070                     EUSART_Write@txData:	
  4255                           ; 1 bytes @ 0x0
  4256                           
  4257  0070                     I2C_SetBuffer@bufferSize:	
  4258                           ; 1 bytes @ 0x0
  4259                           
  4260  0070                     I2C_SetCallback@cb:	
  4261                           ; 2 bytes @ 0x0
  4262                           
  4263  0070                     ___lwdiv@divisor:	
  4264                           ; 2 bytes @ 0x0
  4265                           
  4266                           
  4267                           ; 2 bytes @ 0x0
  4268  0070                     	ds	1
  4269  0071                     ??_I2C_DO_SEND_ADR_WRITE:	
  4270  0071                     ??_EUSART_Receive_ISR:	
  4271                           ; 1 bytes @ 0x1
  4272                           
  4273  0071                     ??_EUSART_DefaultErrorHandler:	
  4274                           ; 1 bytes @ 0x1
  4275                           
  4276  0071                     ??_MyUART_ISR:	
  4277                           ; 1 bytes @ 0x1
  4278                           
  4279  0071                     I2C_Open@address:	
  4280                           ; 1 bytes @ 0x1
  4281                           
  4282  0071                     I2C_Close@returnValue:	
  4283                           ; 1 bytes @ 0x1
  4284                           
  4285                           
  4286                           ; 1 bytes @ 0x1
  4287  0071                     	ds	1
  4288  0072                     ??_I2C_SetBuffer:	
  4289  0072                     I2C_Open@returnValue:	
  4290                           ; 1 bytes @ 0x2
  4291                           
  4292  0072                     I2C_SetCallback@ptr:	
  4293                           ; 1 bytes @ 0x2
  4294                           
  4295  0072                     ___lwdiv@dividend:	
  4296                           ; 1 bytes @ 0x2
  4297                           
  4298                           
  4299                           ; 2 bytes @ 0x2
  4300  0072                     	ds	1
  4301  0073                     ??_I2C_SetCallback:	
  4302  0073                     I2C_SetBuffer@buffer:	
  4303                           ; 1 bytes @ 0x3
  4304                           
  4305                           
  4306                           ; 1 bytes @ 0x3
  4307  0073                     	ds	1
  4308  0074                     ??___lwdiv:	
  4309  0074                     I2C_SetCallback@idx:	
  4310                           ; 1 bytes @ 0x4
  4311                           
  4312                           
  4313                           ; 1 bytes @ 0x4
  4314  0074                     	ds	1
  4315  0075                     ?_I2C_SetDataCompleteCallback:	
  4316  0075                     ?_I2C_SetAddressNackCallback:	
  4317                           ; 1 bytes @ 0x5
  4318                           
  4319  0075                     MyUART_ISR@c:	
  4320                           ; 1 bytes @ 0x5
  4321                           
  4322  0075                     I2C_SetDataCompleteCallback@cb:	
  4323                           ; 1 bytes @ 0x5
  4324                           
  4325  0075                     I2C_SetAddressNackCallback@cb:	
  4326                           ; 2 bytes @ 0x5
  4327                           
  4328  0075                     ___lwdiv@quotient:	
  4329                           ; 2 bytes @ 0x5
  4330                           
  4331                           
  4332                           ; 2 bytes @ 0x5
  4333  0075                     	ds	2
  4334  0077                     I2C_SetDataCompleteCallback@ptr:	
  4335  0077                     I2C_SetAddressNackCallback@ptr:	
  4336                           ; 1 bytes @ 0x7
  4337                           
  4338  0077                     ___lwdiv@counter:	
  4339                           ; 1 bytes @ 0x7
  4340                           
  4341                           
  4342                           ; 1 bytes @ 0x7
  4343  0077                     	ds	1
  4344  0078                     ??_I2C_SetDataCompleteCallback:	
  4345  0078                     ??_I2C_SetAddressNackCallback:	
  4346                           ; 1 bytes @ 0x8
  4347                           
  4348  0078                     ?_PWM3_LoadDutyValue:	
  4349                           ; 1 bytes @ 0x8
  4350                           
  4351  0078                     PWM3_LoadDutyValue@dutyValue:	
  4352                           ; 1 bytes @ 0x8
  4353                           
  4354                           
  4355                           ; 2 bytes @ 0x8
  4356  0078                     	ds	1
  4357  0079                     ?_rd1RegCompleteHandler:	
  4358  0079                     ?_rd2RegCompleteHandler:	
  4359                           ; 1 bytes @ 0x9
  4360                           
  4361  0079                     ?_wr1RegCompleteHandler:	
  4362                           ; 1 bytes @ 0x9
  4363                           
  4364  0079                     ?_wr2RegCompleteHandler:	
  4365                           ; 1 bytes @ 0x9
  4366                           
  4367  0079                     ?_rdBlkRegCompleteHandler:	
  4368                           ; 1 bytes @ 0x9
  4369                           
  4370  0079                     ?_I2C_CallbackReturnStop:	
  4371                           ; 1 bytes @ 0x9
  4372                           
  4373  0079                     ?_I2C_CallbackReturnReset:	
  4374                           ; 1 bytes @ 0x9
  4375                           
  4376  0079                     rd1RegCompleteHandler@ptr:	
  4377                           ; 1 bytes @ 0x9
  4378                           
  4379  0079                     rd2RegCompleteHandler@ptr:	
  4380                           ; 1 bytes @ 0x9
  4381                           
  4382  0079                     wr1RegCompleteHandler@ptr:	
  4383                           ; 1 bytes @ 0x9
  4384                           
  4385  0079                     wr2RegCompleteHandler@ptr:	
  4386                           ; 1 bytes @ 0x9
  4387                           
  4388  0079                     rdBlkRegCompleteHandler@ptr:	
  4389                           ; 1 bytes @ 0x9
  4390                           
  4391  0079                     I2C_CallbackReturnStop@funPtr:	
  4392                           ; 1 bytes @ 0x9
  4393                           
  4394  0079                     I2C_CallbackReturnReset@funPtr:	
  4395                           ; 1 bytes @ 0x9
  4396                           
  4397                           
  4398                           ; 1 bytes @ 0x9
  4399  0079                     	ds	1
  4400  007A                     ??_rd1RegCompleteHandler:	
  4401  007A                     ??_rd2RegCompleteHandler:	
  4402                           ; 1 bytes @ 0xA
  4403                           
  4404  007A                     ??_wr1RegCompleteHandler:	
  4405                           ; 1 bytes @ 0xA
  4406                           
  4407  007A                     ??_wr2RegCompleteHandler:	
  4408                           ; 1 bytes @ 0xA
  4409                           
  4410  007A                     ??_rdBlkRegCompleteHandler:	
  4411                           ; 1 bytes @ 0xA
  4412                           
  4413  007A                     ??_I2C_DO_TX:	
  4414                           ; 1 bytes @ 0xA
  4415                           
  4416  007A                     ??_I2C_DO_RX:	
  4417                           ; 1 bytes @ 0xA
  4418                           
  4419  007A                     ??_I2C_DO_TX_EMPTY:	
  4420                           ; 1 bytes @ 0xA
  4421                           
  4422  007A                     ??_I2C_DO_ADDRESS_NACK:	
  4423                           ; 1 bytes @ 0xA
  4424                           
  4425  007A                     ??_I2C_CallbackReturnStop:	
  4426                           ; 1 bytes @ 0xA
  4427                           
  4428  007A                     ??_I2C_CallbackReturnReset:	
  4429                           ; 1 bytes @ 0xA
  4430                           
  4431  007A                     ??_PWM3_LoadDutyValue:	
  4432                           ; 1 bytes @ 0xA
  4433                           
  4434                           
  4435                           ; 1 bytes @ 0xA
  4436  007A                     	ds	1
  4437  007B                     _I2C_DO_TX$794:	
  4438                           
  4439                           ; 2 bytes @ 0xB
  4440  007B                     	ds	2
  4441  007D                     ??_I2C_Poller:	
  4442  007D                     ??_I2C_MasterOperation:	
  4443                           ; 1 bytes @ 0xD
  4444                           
  4445                           
  4446                           ; 1 bytes @ 0xD
  4447  007D                     	ds	1
  4448  007E                     ??_I2C_MasterWrite:	
  4449  007E                     ??_TMR2_ISR:	
  4450                           ; 1 bytes @ 0xE
  4451                           
  4452                           
  4453                           	psect	cstackBANK0
  4454  0058                     __pcstackBANK0:	
  4455                           ; 1 bytes @ 0xE
  4456                           
  4457  0058                     ??_I2C_MasterFsm:	
  4458                           
  4459                           ; 1 bytes @ 0x0
  4460  0058                     	ds	3
  4461  005B                     I2C_MasterOperation@read:	
  4462                           
  4463                           ; 1 bytes @ 0x3
  4464  005B                     	ds	1
  4465  005C                     I2C_MasterOperation@returnValue:	
  4466                           
  4467                           ; 1 bytes @ 0x4
  4468  005C                     	ds	1
  4469  005D                     ?_I2C_Write1ByteRegister:	
  4470  005D                     I2C_Write1ByteRegister@reg:	
  4471                           ; 1 bytes @ 0x5
  4472                           
  4473                           
  4474                           ; 1 bytes @ 0x5
  4475  005D                     	ds	1
  4476  005E                     I2C_Write1ByteRegister@data:	
  4477                           
  4478                           ; 1 bytes @ 0x6
  4479  005E                     	ds	1
  4480  005F                     ??_I2C_Write1ByteRegister:	
  4481                           
  4482                           ; 1 bytes @ 0x7
  4483  005F                     	ds	1
  4484  0060                     I2C_Write1ByteRegister@address:	
  4485                           
  4486                           ; 1 bytes @ 0x8
  4487  0060                     	ds	1
  4488  0061                     ??_MyTimer2ISR:	
  4489                           
  4490                           ; 1 bytes @ 0x9
  4491  0061                     	ds	1
  4492  0062                     ??_INTERRUPT_InterruptManager:	
  4493                           
  4494                           ; 1 bytes @ 0xA
  4495  0062                     	ds	1
  4496                           
  4497                           	psect	maintext
  4498  016E                     __pmaintext:	
  4499 ;;
  4500 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4501 ;;
  4502 ;; *************** function _main *****************
  4503 ;; Defined at:
  4504 ;;		line 171 in file "main.c"
  4505 ;; Parameters:    Size  Location     Type
  4506 ;;		None
  4507 ;; Auto vars:     Size  Location     Type
  4508 ;;		None
  4509 ;; Return value:  Size  Location     Type
  4510 ;;                  1    wreg      void 
  4511 ;; Registers used:
  4512 ;;		wreg, status,2, status,0, pclath, cstack
  4513 ;; Tracked objects:
  4514 ;;		On entry : B1F/0
  4515 ;;		On exit  : 0/0
  4516 ;;		Unchanged: 0/0
  4517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4520 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4521 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4522 ;;Total ram usage:        2 bytes
  4523 ;; Hardware stack levels required when called:   15
  4524 ;; This function calls:
  4525 ;;		_EUSART_SetRxInterruptHandler
  4526 ;;		_SYSTEM_Initialize
  4527 ;;		_TMR2_SetInterruptHandler
  4528 ;;		_TMR2_StartTimer
  4529 ;;		_TMR2_WriteTimer
  4530 ;; This function is called by:
  4531 ;;		Startup code after reset
  4532 ;; This function uses a non-reentrant model
  4533 ;;
  4534                           
  4535                           
  4536                           ;psect for function _main
  4537  016E                     _main:	
  4538                           
  4539                           ;main.c: 172: SYSTEM_Initialize();
  4540                           
  4541                           ;incstack = 0
  4542                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
  4543  016E  3184  24C4  3181   	fcall	_SYSTEM_Initialize
  4544                           
  4545                           ;main.c: 174: do { LATCbits.LATC5 = 1; } while(0);
  4546  0171  0022               	movlb	2	; select bank2
  4547  0172  168E               	bsf	14,5	;volatile
  4548                           
  4549                           ;main.c: 175: do { LATAbits.LATA5 = 1; } while(0);
  4550  0173  168C               	bsf	12,5	;volatile
  4551                           
  4552                           ;main.c: 182: TMR2_SetInterruptHandler(MyTimer2ISR);
  4553  0174  30F9               	movlw	low _MyTimer2ISR
  4554  0175  0021               	movlb	1	; select bank1
  4555  0176  00A6               	movwf	TMR2_SetInterruptHandler@InterruptHandler^(0+128)
  4556  0177  3000               	movlw	high _MyTimer2ISR
  4557  0178  00A7               	movwf	(TMR2_SetInterruptHandler@InterruptHandler^(0+128)+1)
  4558  0179  3185  2573  3181   	fcall	_TMR2_SetInterruptHandler
  4559                           
  4560                           ;main.c: 183: TMR2_WriteTimer(255);
  4561  017C  30FF               	movlw	255
  4562  017D  3185  25A9  3181   	fcall	_TMR2_WriteTimer
  4563                           
  4564                           ;main.c: 184: TMR2_StartTimer();
  4565  0180  3186  2616  3181   	fcall	_TMR2_StartTimer
  4566                           
  4567                           ;main.c: 186: EUSART_SetRxInterruptHandler(MyUART_ISR);
  4568  0183  3041               	movlw	low _MyUART_ISR
  4569  0184  0021               	movlb	1	; select bank1
  4570  0185  00A6               	movwf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128)
  4571  0186  3000               	movlw	high _MyUART_ISR
  4572  0187  00A7               	movwf	(EUSART_SetRxInterruptHandler@interruptHandler^(0+128)+1)
  4573  0188  3185  257C  3181   	fcall	_EUSART_SetRxInterruptHandler
  4574                           
  4575                           ;main.c: 188: (INTCONbits.PEIE = 1);
  4576  018B  170B               	bsf	11,6	;volatile
  4577                           
  4578                           ;main.c: 189: (INTCONbits.GIE = 1);
  4579  018C  178B               	bsf	11,7	;volatile
  4580  018D  29BE               	goto	l3182
  4581  018E                     l3184:	
  4582                           
  4583                           ;main.c: 193: if(Validation) {
  4584  018E  086A               	movf	_Validation,w
  4585  018F  1903               	btfsc	3,2
  4586  0190  29AA               	goto	l3190
  4587                           
  4588                           ;main.c: 194: do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  4589  0191  1003               	clrc
  4590  0192  0022               	movlb	2	; select bank2
  4591  0193  1E8C               	btfss	12,5	;volatile
  4592  0194  1403               	setc
  4593  0195  1C03               	btfss	3,0
  4594  0196  299A               	goto	u1490
  4595  0197  0022               	movlb	2	; select bank2
  4596  0198  168C               	bsf	12,5	;volatile
  4597  0199  299C               	goto	l3188
  4598  019A                     u1490:	
  4599  019A  0022               	movlb	2	; select bank2
  4600  019B  128C               	bcf	12,5	;volatile
  4601  019C                     l3188:	
  4602                           
  4603                           ;main.c: 195: _delay((unsigned long)((500)*(4000000/4000.0)));
  4604  019C  3003               	movlw	3
  4605  019D  0021               	movlb	1	; select bank1
  4606  019E  00A9               	movwf	(??_main^(0+128)+1)
  4607  019F  308A               	movlw	138
  4608  01A0  00A8               	movwf	??_main^(0+128)
  4609  01A1  3055               	movlw	85
  4610  01A2                     u1537:	
  4611  01A2  0B89               	decfsz	9,f
  4612  01A3  29A2               	goto	u1537
  4613  01A4  0BA8               	decfsz	??_main^(0+128),f
  4614  01A5  29A2               	goto	u1537
  4615  01A6  0BA9               	decfsz	(??_main^(0+128)+1),f
  4616  01A7  29A2               	goto	u1537
  4617  01A8  3200               	nop2
  4618                           
  4619                           ;main.c: 196: } else {
  4620  01A9  29BE               	goto	l3182
  4621  01AA                     l3190:	
  4622                           ;main.c: 197: do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  4623                           
  4624  01AA  1003               	clrc
  4625  01AB  0022               	movlb	2	; select bank2
  4626  01AC  1E8C               	btfss	12,5	;volatile
  4627  01AD  1403               	setc
  4628  01AE  1C03               	btfss	3,0
  4629  01AF  29B3               	goto	u1510
  4630  01B0  0022               	movlb	2	; select bank2
  4631  01B1  168C               	bsf	12,5	;volatile
  4632  01B2  29B5               	goto	l3192
  4633  01B3                     u1510:	
  4634  01B3  0022               	movlb	2	; select bank2
  4635  01B4  128C               	bcf	12,5	;volatile
  4636  01B5                     l3192:	
  4637                           
  4638                           ;main.c: 198: _delay((unsigned long)((100)*(4000000/4000.0)));
  4639  01B5  3082               	movlw	130
  4640  01B6  0021               	movlb	1	; select bank1
  4641  01B7  00A8               	movwf	??_main^(0+128)
  4642  01B8  30DD               	movlw	221
  4643  01B9                     u1547:	
  4644  01B9  0B89               	decfsz	9,f
  4645  01BA  29B9               	goto	u1547
  4646  01BB  0BA8               	decfsz	??_main^(0+128),f
  4647  01BC  29B9               	goto	u1547
  4648  01BD  3200               	nop2
  4649  01BE                     l3182:	
  4650                           ;main.c: 191: while (1) {
  4651                           
  4652                           ;main.c: 199: }
  4653                           ;main.c: 200: } else {
  4654                           
  4655                           
  4656                           ;main.c: 192: if(PORTAbits.RA4) {
  4657  01BE  0020               	movlb	0	; select bank0
  4658  01BF  1A0C               	btfsc	12,4	;volatile
  4659  01C0  298E               	goto	l3184
  4660                           
  4661                           ;main.c: 201: do { LATAbits.LATA5 = 1; } while(0);
  4662  01C1  0022               	movlb	2	; select bank2
  4663  01C2  168C               	bsf	12,5	;volatile
  4664  01C3  29BE               	goto	l3182
  4665  01C4                     __end_of_main:	
  4666                           
  4667                           	psect	text1
  4668  05A9                     __ptext1:	
  4669 ;; *************** function _TMR2_WriteTimer *****************
  4670 ;; Defined at:
  4671 ;;		line 150 in file "mcc_generated_files/tmr2.c"
  4672 ;; Parameters:    Size  Location     Type
  4673 ;;  timerVal        1    wreg     unsigned char 
  4674 ;; Auto vars:     Size  Location     Type
  4675 ;;  timerVal        1    1[BANK1 ] unsigned char 
  4676 ;; Return value:  Size  Location     Type
  4677 ;;                  1    wreg      void 
  4678 ;; Registers used:
  4679 ;;		wreg, status,2, status,0, pclath, cstack
  4680 ;; Tracked objects:
  4681 ;;		On entry : 0/0
  4682 ;;		On exit  : 0/0
  4683 ;;		Unchanged: 0/0
  4684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4686 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4688 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4689 ;;Total ram usage:        1 bytes
  4690 ;; Hardware stack levels used:    1
  4691 ;; Hardware stack levels required when called:   13
  4692 ;; This function calls:
  4693 ;;		_TMR2_Counter8BitSet
  4694 ;; This function is called by:
  4695 ;;		_main
  4696 ;; This function uses a non-reentrant model
  4697 ;;
  4698                           
  4699                           
  4700                           ;psect for function _TMR2_WriteTimer
  4701  05A9                     _TMR2_WriteTimer:	
  4702                           
  4703                           ;incstack = 0
  4704                           ; Regs used in _TMR2_WriteTimer: [wreg+status,2+status,0+pclath+cstack]
  4705                           ;TMR2_WriteTimer@timerVal stored from wreg
  4706  05A9  0021               	movlb	1	; select bank1
  4707  05AA  00A7               	movwf	TMR2_WriteTimer@timerVal^(0+128)
  4708                           
  4709                           ;tmr2.c: 152: TMR2_Counter8BitSet(timerVal);
  4710  05AB  0827               	movf	TMR2_WriteTimer@timerVal^(0+128),w
  4711  05AC  3185  25AF         	fcall	_TMR2_Counter8BitSet
  4712  05AE  0008               	return
  4713  05AF                     __end_of_TMR2_WriteTimer:	
  4714                           
  4715                           	psect	text2
  4716  05AF                     __ptext2:	
  4717 ;; *************** function _TMR2_Counter8BitSet *****************
  4718 ;; Defined at:
  4719 ;;		line 144 in file "mcc_generated_files/tmr2.c"
  4720 ;; Parameters:    Size  Location     Type
  4721 ;;  timerVal        1    wreg     unsigned char 
  4722 ;; Auto vars:     Size  Location     Type
  4723 ;;  timerVal        1    0[BANK1 ] unsigned char 
  4724 ;; Return value:  Size  Location     Type
  4725 ;;                  1    wreg      void 
  4726 ;; Registers used:
  4727 ;;		wreg
  4728 ;; Tracked objects:
  4729 ;;		On entry : 0/0
  4730 ;;		On exit  : 0/0
  4731 ;;		Unchanged: 0/0
  4732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4734 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4736 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4737 ;;Total ram usage:        1 bytes
  4738 ;; Hardware stack levels used:    1
  4739 ;; Hardware stack levels required when called:   12
  4740 ;; This function calls:
  4741 ;;		Nothing
  4742 ;; This function is called by:
  4743 ;;		_TMR2_WriteTimer
  4744 ;; This function uses a non-reentrant model
  4745 ;;
  4746                           
  4747                           
  4748                           ;psect for function _TMR2_Counter8BitSet
  4749  05AF                     _TMR2_Counter8BitSet:	
  4750                           
  4751                           ;incstack = 0
  4752                           ; Regs used in _TMR2_Counter8BitSet: [wreg]
  4753                           ;TMR2_Counter8BitSet@timerVal stored from wreg
  4754  05AF  0021               	movlb	1	; select bank1
  4755  05B0  00A6               	movwf	TMR2_Counter8BitSet@timerVal^(0+128)
  4756                           
  4757                           ;tmr2.c: 147: TMR2 = timerVal;
  4758  05B1  0826               	movf	TMR2_Counter8BitSet@timerVal^(0+128),w
  4759  05B2  0020               	movlb	0	; select bank0
  4760  05B3  009A               	movwf	26	;volatile
  4761  05B4  0008               	return
  4762  05B5                     __end_of_TMR2_Counter8BitSet:	
  4763                           
  4764                           	psect	text3
  4765  0616                     __ptext3:	
  4766 ;; *************** function _TMR2_StartTimer *****************
  4767 ;; Defined at:
  4768 ;;		line 114 in file "mcc_generated_files/tmr2.c"
  4769 ;; Parameters:    Size  Location     Type
  4770 ;;		None
  4771 ;; Auto vars:     Size  Location     Type
  4772 ;;		None
  4773 ;; Return value:  Size  Location     Type
  4774 ;;                  1    wreg      void 
  4775 ;; Registers used:
  4776 ;;		status,2, status,0, pclath, cstack
  4777 ;; Tracked objects:
  4778 ;;		On entry : 0/0
  4779 ;;		On exit  : 0/0
  4780 ;;		Unchanged: 0/0
  4781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4786 ;;Total ram usage:        0 bytes
  4787 ;; Hardware stack levels used:    1
  4788 ;; Hardware stack levels required when called:   13
  4789 ;; This function calls:
  4790 ;;		_TMR2_Start
  4791 ;; This function is called by:
  4792 ;;		_main
  4793 ;; This function uses a non-reentrant model
  4794 ;;
  4795                           
  4796                           
  4797                           ;psect for function _TMR2_StartTimer
  4798  0616                     _TMR2_StartTimer:	
  4799                           
  4800                           ;tmr2.c: 116: TMR2_Start();
  4801                           
  4802                           ;incstack = 0
  4803                           ; Regs used in _TMR2_StartTimer: [status,2+status,0+pclath+cstack]
  4804  0616  3186  2619         	fcall	_TMR2_Start
  4805  0618  0008               	return
  4806  0619                     __end_of_TMR2_StartTimer:	
  4807                           
  4808                           	psect	text4
  4809  0619                     __ptext4:	
  4810 ;; *************** function _TMR2_Start *****************
  4811 ;; Defined at:
  4812 ;;		line 108 in file "mcc_generated_files/tmr2.c"
  4813 ;; Parameters:    Size  Location     Type
  4814 ;;		None
  4815 ;; Auto vars:     Size  Location     Type
  4816 ;;		None
  4817 ;; Return value:  Size  Location     Type
  4818 ;;                  1    wreg      void 
  4819 ;; Registers used:
  4820 ;;		None
  4821 ;; Tracked objects:
  4822 ;;		On entry : 0/0
  4823 ;;		On exit  : 0/0
  4824 ;;		Unchanged: 0/0
  4825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4829 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4830 ;;Total ram usage:        0 bytes
  4831 ;; Hardware stack levels used:    1
  4832 ;; Hardware stack levels required when called:   12
  4833 ;; This function calls:
  4834 ;;		Nothing
  4835 ;; This function is called by:
  4836 ;;		_TMR2_StartTimer
  4837 ;; This function uses a non-reentrant model
  4838 ;;
  4839                           
  4840                           
  4841                           ;psect for function _TMR2_Start
  4842  0619                     _TMR2_Start:	
  4843                           
  4844                           ;tmr2.c: 111: T2CONbits.TMR2ON = 1;
  4845                           
  4846                           ;incstack = 0
  4847                           ; Regs used in _TMR2_Start: []
  4848  0619  0020               	movlb	0	; select bank0
  4849  061A  179C               	bsf	28,7	;volatile
  4850  061B  0008               	return
  4851  061C                     __end_of_TMR2_Start:	
  4852                           
  4853                           	psect	text5
  4854  04C4                     __ptext5:	
  4855 ;; *************** function _SYSTEM_Initialize *****************
  4856 ;; Defined at:
  4857 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4858 ;; Parameters:    Size  Location     Type
  4859 ;;		None
  4860 ;; Auto vars:     Size  Location     Type
  4861 ;;		None
  4862 ;; Return value:  Size  Location     Type
  4863 ;;                  1    wreg      void 
  4864 ;; Registers used:
  4865 ;;		wreg, status,2, status,0, pclath, cstack
  4866 ;; Tracked objects:
  4867 ;;		On entry : 0/0
  4868 ;;		On exit  : 0/0
  4869 ;;		Unchanged: 0/0
  4870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4874 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4875 ;;Total ram usage:        0 bytes
  4876 ;; Hardware stack levels used:    1
  4877 ;; Hardware stack levels required when called:   14
  4878 ;; This function calls:
  4879 ;;		_EUSART_Initialize
  4880 ;;		_I2C_Initialize
  4881 ;;		_OSCILLATOR_Initialize
  4882 ;;		_PIN_MANAGER_Initialize
  4883 ;;		_PWM3_Initialize
  4884 ;;		_TMR2_Initialize
  4885 ;; This function is called by:
  4886 ;;		_main
  4887 ;; This function uses a non-reentrant model
  4888 ;;
  4889                           
  4890                           
  4891                           ;psect for function _SYSTEM_Initialize
  4892  04C4                     _SYSTEM_Initialize:	
  4893                           
  4894                           ;mcc.c: 52: I2C_Initialize();
  4895                           
  4896                           ;incstack = 0
  4897                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4898  04C4  3185  255F  3184   	fcall	_I2C_Initialize
  4899                           
  4900                           ;mcc.c: 53: PIN_MANAGER_Initialize();
  4901  04C7  3182  220F  3184   	fcall	_PIN_MANAGER_Initialize
  4902                           
  4903                           ;mcc.c: 54: OSCILLATOR_Initialize();
  4904  04CA  3185  2595  3184   	fcall	_OSCILLATOR_Initialize
  4905                           
  4906                           ;mcc.c: 55: PWM3_Initialize();
  4907  04CD  3185  2554  3184   	fcall	_PWM3_Initialize
  4908                           
  4909                           ;mcc.c: 56: TMR2_Initialize();
  4910  04D0  3184  24B0  3184   	fcall	_TMR2_Initialize
  4911                           
  4912                           ;mcc.c: 57: EUSART_Initialize();
  4913  04D3  3183  2325         	fcall	_EUSART_Initialize
  4914  04D5  0008               	return
  4915  04D6                     __end_of_SYSTEM_Initialize:	
  4916                           
  4917                           	psect	text6
  4918  04B0                     __ptext6:	
  4919 ;; *************** function _TMR2_Initialize *****************
  4920 ;; Defined at:
  4921 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  4922 ;; Parameters:    Size  Location     Type
  4923 ;;		None
  4924 ;; Auto vars:     Size  Location     Type
  4925 ;;		None
  4926 ;; Return value:  Size  Location     Type
  4927 ;;                  1    wreg      void 
  4928 ;; Registers used:
  4929 ;;		wreg, status,2, status,0, pclath, cstack
  4930 ;; Tracked objects:
  4931 ;;		On entry : 0/0
  4932 ;;		On exit  : 0/0
  4933 ;;		Unchanged: 0/0
  4934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4939 ;;Total ram usage:        0 bytes
  4940 ;; Hardware stack levels used:    1
  4941 ;; Hardware stack levels required when called:   13
  4942 ;; This function calls:
  4943 ;;		_TMR2_SetInterruptHandler
  4944 ;; This function is called by:
  4945 ;;		_SYSTEM_Initialize
  4946 ;; This function uses a non-reentrant model
  4947 ;;
  4948                           
  4949                           
  4950                           ;psect for function _TMR2_Initialize
  4951  04B0                     _TMR2_Initialize:	
  4952                           
  4953                           ;tmr2.c: 69: T2CLKCON = 0x00;
  4954                           
  4955                           ;incstack = 0
  4956                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4957  04B0  0020               	movlb	0	; select bank0
  4958  04B1  019E               	clrf	30	;volatile
  4959                           
  4960                           ;tmr2.c: 72: T2HLT = 0x00;
  4961  04B2  019D               	clrf	29	;volatile
  4962                           
  4963                           ;tmr2.c: 75: T2RST = 0x00;
  4964  04B3  019F               	clrf	31	;volatile
  4965                           
  4966                           ;tmr2.c: 78: T2PR = 0x9B;
  4967  04B4  309B               	movlw	155
  4968  04B5  009B               	movwf	27	;volatile
  4969                           
  4970                           ;tmr2.c: 81: T2TMR = 0x00;
  4971  04B6  019A               	clrf	26	;volatile
  4972                           
  4973                           ;tmr2.c: 84: PIR1bits.TMR2IF = 0;
  4974  04B7  1090               	bcf	16,1	;volatile
  4975                           
  4976                           ;tmr2.c: 87: PIE1bits.TMR2IE = 1;
  4977  04B8  0021               	movlb	1	; select bank1
  4978  04B9  1490               	bsf	16,1	;volatile
  4979                           
  4980                           ;tmr2.c: 90: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
  4981  04BA  303E               	movlw	low _TMR2_DefaultInterruptHandler
  4982  04BB  00A6               	movwf	TMR2_SetInterruptHandler@InterruptHandler^(0+128)
  4983  04BC  3006               	movlw	high _TMR2_DefaultInterruptHandler
  4984  04BD  00A7               	movwf	(TMR2_SetInterruptHandler@InterruptHandler^(0+128)+1)
  4985  04BE  3185  2573         	fcall	_TMR2_SetInterruptHandler
  4986                           
  4987                           ;tmr2.c: 93: T2CON = 0xF0;
  4988  04C0  30F0               	movlw	240
  4989  04C1  0020               	movlb	0	; select bank0
  4990  04C2  009C               	movwf	28	;volatile
  4991  04C3  0008               	return
  4992  04C4                     __end_of_TMR2_Initialize:	
  4993                           
  4994                           	psect	text7
  4995  0573                     __ptext7:	
  4996 ;; *************** function _TMR2_SetInterruptHandler *****************
  4997 ;; Defined at:
  4998 ;;		line 178 in file "mcc_generated_files/tmr2.c"
  4999 ;; Parameters:    Size  Location     Type
  5000 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5001 ;;		 -> MyTimer2ISR(1), TMR2_DefaultInterruptHandler(1), 
  5002 ;; Auto vars:     Size  Location     Type
  5003 ;;		None
  5004 ;; Return value:  Size  Location     Type
  5005 ;;                  1    wreg      void 
  5006 ;; Registers used:
  5007 ;;		wreg
  5008 ;; Tracked objects:
  5009 ;;		On entry : 0/0
  5010 ;;		On exit  : 0/0
  5011 ;;		Unchanged: 0/0
  5012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5013 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5016 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5017 ;;Total ram usage:        2 bytes
  5018 ;; Hardware stack levels used:    1
  5019 ;; Hardware stack levels required when called:   12
  5020 ;; This function calls:
  5021 ;;		Nothing
  5022 ;; This function is called by:
  5023 ;;		_TMR2_Initialize
  5024 ;;		_main
  5025 ;; This function uses a non-reentrant model
  5026 ;;
  5027                           
  5028                           
  5029                           ;psect for function _TMR2_SetInterruptHandler
  5030  0573                     _TMR2_SetInterruptHandler:	
  5031                           
  5032                           ;tmr2.c: 179: TMR2_InterruptHandler = InterruptHandler;
  5033                           
  5034                           ;incstack = 0
  5035                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  5036  0573  0021               	movlb	1	; select bank1
  5037  0574  0827               	movf	(TMR2_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5038  0575  0020               	movlb	0	; select bank0
  5039  0576  00E4               	movwf	_TMR2_InterruptHandler+1
  5040  0577  0021               	movlb	1	; select bank1
  5041  0578  0826               	movf	TMR2_SetInterruptHandler@InterruptHandler^(0+128),w
  5042  0579  0020               	movlb	0	; select bank0
  5043  057A  00E3               	movwf	_TMR2_InterruptHandler
  5044  057B  0008               	return
  5045  057C                     __end_of_TMR2_SetInterruptHandler:	
  5046                           
  5047                           	psect	text8
  5048  0554                     __ptext8:	
  5049 ;; *************** function _PWM3_Initialize *****************
  5050 ;; Defined at:
  5051 ;;		line 58 in file "mcc_generated_files/pwm3.c"
  5052 ;; Parameters:    Size  Location     Type
  5053 ;;		None
  5054 ;; Auto vars:     Size  Location     Type
  5055 ;;		None
  5056 ;; Return value:  Size  Location     Type
  5057 ;;                  1    wreg      void 
  5058 ;; Registers used:
  5059 ;;		wreg, status,2, status,0
  5060 ;; Tracked objects:
  5061 ;;		On entry : 0/0
  5062 ;;		On exit  : 0/0
  5063 ;;		Unchanged: 0/0
  5064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5069 ;;Total ram usage:        0 bytes
  5070 ;; Hardware stack levels used:    1
  5071 ;; Hardware stack levels required when called:   12
  5072 ;; This function calls:
  5073 ;;		Nothing
  5074 ;; This function is called by:
  5075 ;;		_SYSTEM_Initialize
  5076 ;; This function uses a non-reentrant model
  5077 ;;
  5078                           
  5079                           
  5080                           ;psect for function _PWM3_Initialize
  5081  0554                     _PWM3_Initialize:	
  5082                           
  5083                           ;pwm3.c: 62: PWM3CON = 0x80;
  5084                           
  5085                           ;incstack = 0
  5086                           ; Regs used in _PWM3_Initialize: [wreg+status,2+status,0]
  5087  0554  3080               	movlw	128
  5088  0555  002C               	movlb	12	; select bank12
  5089  0556  0099               	movwf	25	;volatile
  5090                           
  5091                           ;pwm3.c: 65: PWM3DCH = 0x0F;
  5092  0557  300F               	movlw	15
  5093  0558  0098               	movwf	24	;volatile
  5094                           
  5095                           ;pwm3.c: 68: PWM3DCL = 0x40;
  5096  0559  3040               	movlw	64
  5097  055A  0097               	movwf	23	;volatile
  5098                           
  5099                           ;pwm3.c: 71: CCPTMRSbits.P3TSEL = 0;
  5100  055B  30CF               	movlw	-49
  5101  055C  0025               	movlb	5	; select bank5
  5102  055D  059E               	andwf	30,f	;volatile
  5103  055E  0008               	return
  5104  055F                     __end_of_PWM3_Initialize:	
  5105                           
  5106                           	psect	text9
  5107  020F                     __ptext9:	
  5108 ;; *************** function _PIN_MANAGER_Initialize *****************
  5109 ;; Defined at:
  5110 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  5111 ;; Parameters:    Size  Location     Type
  5112 ;;		None
  5113 ;; Auto vars:     Size  Location     Type
  5114 ;;		None
  5115 ;; Return value:  Size  Location     Type
  5116 ;;                  1    wreg      void 
  5117 ;; Registers used:
  5118 ;;		wreg, status,2
  5119 ;; Tracked objects:
  5120 ;;		On entry : 0/0
  5121 ;;		On exit  : 0/0
  5122 ;;		Unchanged: 0/0
  5123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5128 ;;Total ram usage:        0 bytes
  5129 ;; Hardware stack levels used:    1
  5130 ;; Hardware stack levels required when called:   12
  5131 ;; This function calls:
  5132 ;;		Nothing
  5133 ;; This function is called by:
  5134 ;;		_SYSTEM_Initialize
  5135 ;; This function uses a non-reentrant model
  5136 ;;
  5137                           
  5138                           
  5139                           ;psect for function _PIN_MANAGER_Initialize
  5140  020F                     _PIN_MANAGER_Initialize:	
  5141                           
  5142                           ;pin_manager.c: 60: LATA = 0x00;
  5143                           
  5144                           ;incstack = 0
  5145                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  5146  020F  0022               	movlb	2	; select bank2
  5147  0210  018C               	clrf	12	;volatile
  5148                           
  5149                           ;pin_manager.c: 61: LATB = 0x00;
  5150  0211  018D               	clrf	13	;volatile
  5151                           
  5152                           ;pin_manager.c: 62: LATC = 0x00;
  5153  0212  018E               	clrf	14	;volatile
  5154                           
  5155                           ;pin_manager.c: 67: TRISA = 0x13;
  5156  0213  3013               	movlw	19
  5157  0214  0021               	movlb	1	; select bank1
  5158  0215  008C               	movwf	12	;volatile
  5159                           
  5160                           ;pin_manager.c: 68: TRISB = 0x70;
  5161  0216  3070               	movlw	112
  5162  0217  008D               	movwf	13	;volatile
  5163                           
  5164                           ;pin_manager.c: 69: TRISC = 0x1F;
  5165  0218  301F               	movlw	31
  5166  0219  008E               	movwf	14	;volatile
  5167                           
  5168                           ;pin_manager.c: 74: ANSELC = 0x0E;
  5169  021A  300E               	movlw	14
  5170  021B  0023               	movlb	3	; select bank3
  5171  021C  008E               	movwf	14	;volatile
  5172                           
  5173                           ;pin_manager.c: 75: ANSELB = 0x00;
  5174  021D  018D               	clrf	13	;volatile
  5175                           
  5176                           ;pin_manager.c: 76: ANSELA = 0x01;
  5177  021E  3001               	movlw	1
  5178  021F  008C               	movwf	12	;volatile
  5179                           
  5180                           ;pin_manager.c: 81: WPUB = 0x00;
  5181  0220  0024               	movlb	4	; select bank4
  5182  0221  018D               	clrf	13	;volatile
  5183                           
  5184                           ;pin_manager.c: 82: WPUA = 0x00;
  5185  0222  018C               	clrf	12	;volatile
  5186                           
  5187                           ;pin_manager.c: 83: WPUC = 0x00;
  5188  0223  018E               	clrf	14	;volatile
  5189                           
  5190                           ;pin_manager.c: 84: OPTION_REGbits.nWPUEN = 1;
  5191  0224  0021               	movlb	1	; select bank1
  5192  0225  1795               	bsf	21,7	;volatile
  5193                           
  5194                           ;pin_manager.c: 89: ODCONA = 0x00;
  5195  0226  0025               	movlb	5	; select bank5
  5196  0227  018C               	clrf	12	;volatile
  5197                           
  5198                           ;pin_manager.c: 90: ODCONB = 0x00;
  5199  0228  018D               	clrf	13	;volatile
  5200                           
  5201                           ;pin_manager.c: 91: ODCONC = 0x00;
  5202  0229  018E               	clrf	14	;volatile
  5203                           
  5204                           ;pin_manager.c: 96: SLRCONA = 0x37;
  5205  022A  3037               	movlw	55
  5206  022B  0026               	movlb	6	; select bank6
  5207  022C  008C               	movwf	12	;volatile
  5208                           
  5209                           ;pin_manager.c: 97: SLRCONB = 0xF0;
  5210  022D  30F0               	movlw	240
  5211  022E  008D               	movwf	13	;volatile
  5212                           
  5213                           ;pin_manager.c: 98: SLRCONC = 0xFF;
  5214  022F  30FF               	movlw	255
  5215  0230  008E               	movwf	14	;volatile
  5216                           
  5217                           ;pin_manager.c: 103: INLVLA = 0x3F;
  5218  0231  303F               	movlw	63
  5219  0232  0027               	movlb	7	; select bank7
  5220  0233  008C               	movwf	12	;volatile
  5221                           
  5222                           ;pin_manager.c: 104: INLVLB = 0xF0;
  5223  0234  30F0               	movlw	240
  5224  0235  008D               	movwf	13	;volatile
  5225                           
  5226                           ;pin_manager.c: 105: INLVLC = 0xFF;
  5227  0236  30FF               	movlw	255
  5228  0237  008E               	movwf	14	;volatile
  5229                           
  5230                           ;pin_manager.c: 114: RXPPS = 0x0D;
  5231  0238  300D               	movlw	13
  5232  0239  003C               	movlb	28	; select bank28
  5233  023A  00A4               	movwf	36	;volatile
  5234                           
  5235                           ;pin_manager.c: 115: SSPDATPPS = 0x0C;
  5236  023B  300C               	movlw	12
  5237  023C  00A1               	movwf	33	;volatile
  5238                           
  5239                           ;pin_manager.c: 116: RB6PPS = 0x10;
  5240  023D  3010               	movlw	16
  5241  023E  003D               	movlb	29	; select bank29
  5242  023F  009E               	movwf	30	;volatile
  5243                           
  5244                           ;pin_manager.c: 117: RB7PPS = 0x12;
  5245  0240  3012               	movlw	18
  5246  0241  009F               	movwf	31	;volatile
  5247                           
  5248                           ;pin_manager.c: 118: RB4PPS = 0x11;
  5249  0242  3011               	movlw	17
  5250  0243  009C               	movwf	28	;volatile
  5251                           
  5252                           ;pin_manager.c: 119: RA2PPS = 0x0E;
  5253  0244  300E               	movlw	14
  5254  0245  0092               	movwf	18	;volatile
  5255                           
  5256                           ;pin_manager.c: 120: SSPCLKPPS = 0x0E;
  5257  0246  300E               	movlw	14
  5258  0247  003C               	movlb	28	; select bank28
  5259  0248  00A0               	movwf	32	;volatile
  5260  0249  0008               	return
  5261  024A                     __end_of_PIN_MANAGER_Initialize:	
  5262                           
  5263                           	psect	text10
  5264  0595                     __ptext10:	
  5265 ;; *************** function _OSCILLATOR_Initialize *****************
  5266 ;; Defined at:
  5267 ;;		line 60 in file "mcc_generated_files/mcc.c"
  5268 ;; Parameters:    Size  Location     Type
  5269 ;;		None
  5270 ;; Auto vars:     Size  Location     Type
  5271 ;;		None
  5272 ;; Return value:  Size  Location     Type
  5273 ;;                  1    wreg      void 
  5274 ;; Registers used:
  5275 ;;		wreg, status,2
  5276 ;; Tracked objects:
  5277 ;;		On entry : 0/0
  5278 ;;		On exit  : 0/0
  5279 ;;		Unchanged: 0/0
  5280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5284 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5285 ;;Total ram usage:        0 bytes
  5286 ;; Hardware stack levels used:    1
  5287 ;; Hardware stack levels required when called:   12
  5288 ;; This function calls:
  5289 ;;		Nothing
  5290 ;; This function is called by:
  5291 ;;		_SYSTEM_Initialize
  5292 ;; This function uses a non-reentrant model
  5293 ;;
  5294                           
  5295                           
  5296                           ;psect for function _OSCILLATOR_Initialize
  5297  0595                     _OSCILLATOR_Initialize:	
  5298                           
  5299                           ;mcc.c: 63: OSCCON = 0x6A;
  5300                           
  5301                           ;incstack = 0
  5302                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5303  0595  306A               	movlw	106
  5304  0596  0021               	movlb	1	; select bank1
  5305  0597  0099               	movwf	25	;volatile
  5306                           
  5307                           ;mcc.c: 65: OSCTUNE = 0x00;
  5308  0598  0198               	clrf	24	;volatile
  5309                           
  5310                           ;mcc.c: 67: BORCON = 0x00;
  5311  0599  0022               	movlb	2	; select bank2
  5312  059A  0196               	clrf	22	;volatile
  5313  059B  0008               	return
  5314  059C                     __end_of_OSCILLATOR_Initialize:	
  5315                           
  5316                           	psect	text11
  5317  055F                     __ptext11:	
  5318 ;; *************** function _I2C_Initialize *****************
  5319 ;; Defined at:
  5320 ;;		line 167 in file "mcc_generated_files/i2c_master.c"
  5321 ;; Parameters:    Size  Location     Type
  5322 ;;		None
  5323 ;; Auto vars:     Size  Location     Type
  5324 ;;		None
  5325 ;; Return value:  Size  Location     Type
  5326 ;;                  1    wreg      void 
  5327 ;; Registers used:
  5328 ;;		wreg, status,2
  5329 ;; Tracked objects:
  5330 ;;		On entry : 0/0
  5331 ;;		On exit  : 0/0
  5332 ;;		Unchanged: 0/0
  5333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5338 ;;Total ram usage:        0 bytes
  5339 ;; Hardware stack levels used:    1
  5340 ;; Hardware stack levels required when called:   12
  5341 ;; This function calls:
  5342 ;;		Nothing
  5343 ;; This function is called by:
  5344 ;;		_SYSTEM_Initialize
  5345 ;; This function uses a non-reentrant model
  5346 ;;
  5347                           
  5348                           
  5349                           ;psect for function _I2C_Initialize
  5350  055F                     _I2C_Initialize:	
  5351                           
  5352                           ;i2c_master.c: 169: SSP1STAT = 0x80;
  5353                           
  5354                           ;incstack = 0
  5355                           ; Regs used in _I2C_Initialize: [wreg+status,2]
  5356  055F  3080               	movlw	128
  5357  0560  0024               	movlb	4	; select bank4
  5358  0561  0094               	movwf	20	;volatile
  5359                           
  5360                           ;i2c_master.c: 170: SSP1CON1 = 0x08;
  5361  0562  3008               	movlw	8
  5362  0563  0095               	movwf	21	;volatile
  5363                           
  5364                           ;i2c_master.c: 171: SSP1CON2 = 0x00;
  5365  0564  0196               	clrf	22	;volatile
  5366                           
  5367                           ;i2c_master.c: 172: SSP1ADD = 0x09;
  5368  0565  3009               	movlw	9
  5369  0566  0092               	movwf	18	;volatile
  5370                           
  5371                           ;i2c_master.c: 173: SSP1CON1bits.SSPEN = 0;
  5372  0567  1295               	bcf	21,5	;volatile
  5373  0568  0008               	return
  5374  0569                     __end_of_I2C_Initialize:	
  5375                           
  5376                           	psect	text12
  5377  0325                     __ptext12:	
  5378 ;; *************** function _EUSART_Initialize *****************
  5379 ;; Defined at:
  5380 ;;		line 83 in file "mcc_generated_files/eusart.c"
  5381 ;; Parameters:    Size  Location     Type
  5382 ;;		None
  5383 ;; Auto vars:     Size  Location     Type
  5384 ;;		None
  5385 ;; Return value:  Size  Location     Type
  5386 ;;                  1    wreg      void 
  5387 ;; Registers used:
  5388 ;;		wreg, status,2, status,0, pclath, cstack
  5389 ;; Tracked objects:
  5390 ;;		On entry : 0/0
  5391 ;;		On exit  : 0/0
  5392 ;;		Unchanged: 0/0
  5393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5398 ;;Total ram usage:        0 bytes
  5399 ;; Hardware stack levels used:    1
  5400 ;; Hardware stack levels required when called:   13
  5401 ;; This function calls:
  5402 ;;		_EUSART_SetErrorHandler
  5403 ;;		_EUSART_SetFramingErrorHandler
  5404 ;;		_EUSART_SetOverrunErrorHandler
  5405 ;;		_EUSART_SetRxInterruptHandler
  5406 ;; This function is called by:
  5407 ;;		_SYSTEM_Initialize
  5408 ;; This function uses a non-reentrant model
  5409 ;;
  5410                           
  5411                           
  5412                           ;psect for function _EUSART_Initialize
  5413  0325                     _EUSART_Initialize:	
  5414                           
  5415                           ;eusart.c: 86: PIE1bits.RCIE = 0;
  5416                           
  5417                           ;incstack = 0
  5418                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5419  0325  0021               	movlb	1	; select bank1
  5420  0326  1290               	bcf	16,5	;volatile
  5421                           
  5422                           ;eusart.c: 87: EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  5423  0327  30BB               	movlw	low _EUSART_Receive_ISR
  5424  0328  00A6               	movwf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128)
  5425  0329  3002               	movlw	high _EUSART_Receive_ISR
  5426  032A  00A7               	movwf	(EUSART_SetRxInterruptHandler@interruptHandler^(0+128)+1)
  5427  032B  3185  257C  3183   	fcall	_EUSART_SetRxInterruptHandler
  5428                           
  5429                           ;eusart.c: 91: BAUD1CON = 0x09;
  5430  032E  3009               	movlw	9
  5431  032F  0023               	movlb	3	; select bank3
  5432  0330  009F               	movwf	31	;volatile
  5433                           
  5434                           ;eusart.c: 94: RC1STA = 0x90;
  5435  0331  3090               	movlw	144
  5436  0332  009D               	movwf	29	;volatile
  5437                           
  5438                           ;eusart.c: 97: TX1STA = 0x24;
  5439  0333  3024               	movlw	36
  5440  0334  009E               	movwf	30	;volatile
  5441                           
  5442                           ;eusart.c: 100: SPBRGL = 0x67;
  5443  0335  3067               	movlw	103
  5444  0336  009B               	movwf	27	;volatile
  5445                           
  5446                           ;eusart.c: 103: SPBRGH = 0x00;
  5447  0337  019C               	clrf	28	;volatile
  5448                           
  5449                           ;eusart.c: 106: EUSART_SetFramingErrorHandler(EUSART_DefaultFramingErrorHandler);
  5450  0338  303F               	movlw	low _EUSART_DefaultFramingErrorHandler
  5451  0339  0021               	movlb	1	; select bank1
  5452  033A  00A6               	movwf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128)
  5453  033B  3006               	movlw	high _EUSART_DefaultFramingErrorHandler
  5454  033C  00A7               	movwf	(EUSART_SetFramingErrorHandler@interruptHandler^(0+128)+1)
  5455  033D  3185  25BB  3183   	fcall	_EUSART_SetFramingErrorHandler
  5456                           
  5457                           ;eusart.c: 107: EUSART_SetOverrunErrorHandler(EUSART_DefaultOverrunErrorHandler);
  5458  0340  3012               	movlw	low _EUSART_DefaultOverrunErrorHandler
  5459  0341  0021               	movlb	1	; select bank1
  5460  0342  00A6               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)
  5461  0343  3006               	movlw	high _EUSART_DefaultOverrunErrorHandler
  5462  0344  00A7               	movwf	(EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)+1)
  5463  0345  3185  25B5  3183   	fcall	_EUSART_SetOverrunErrorHandler
  5464                           
  5465                           ;eusart.c: 108: EUSART_SetErrorHandler(EUSART_DefaultErrorHandler);
  5466  0348  3037               	movlw	low _EUSART_DefaultErrorHandler
  5467  0349  0021               	movlb	1	; select bank1
  5468  034A  00A6               	movwf	EUSART_SetErrorHandler@interruptHandler^(0+128)
  5469  034B  3006               	movlw	high _EUSART_DefaultErrorHandler
  5470  034C  00A7               	movwf	(EUSART_SetErrorHandler@interruptHandler^(0+128)+1)
  5471  034D  3185  25C1         	fcall	_EUSART_SetErrorHandler
  5472                           
  5473                           ;eusart.c: 110: eusartRxLastError.status = 0;
  5474  034F  0020               	movlb	0	; select bank0
  5475  0350  01D4               	clrf	_eusartRxLastError	;volatile
  5476                           
  5477                           ;eusart.c: 113: eusartRxHead = 0;
  5478  0351  01D7               	clrf	_eusartRxHead	;volatile
  5479                           
  5480                           ;eusart.c: 114: eusartRxTail = 0;
  5481  0352  01D6               	clrf	_eusartRxTail	;volatile
  5482                           
  5483                           ;eusart.c: 115: eusartRxCount = 0;
  5484  0353  01D5               	clrf	_eusartRxCount	;volatile
  5485                           
  5486                           ;eusart.c: 118: PIE1bits.RCIE = 1;
  5487  0354  0021               	movlb	1	; select bank1
  5488  0355  1690               	bsf	16,5	;volatile
  5489  0356  0008               	return
  5490  0357                     __end_of_EUSART_Initialize:	
  5491                           
  5492                           	psect	text13
  5493  057C                     __ptext13:	
  5494 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  5495 ;; Defined at:
  5496 ;;		line 234 in file "mcc_generated_files/eusart.c"
  5497 ;; Parameters:    Size  Location     Type
  5498 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5499 ;;		 -> MyUART_ISR(1), EUSART_Receive_ISR(1), 
  5500 ;; Auto vars:     Size  Location     Type
  5501 ;;		None
  5502 ;; Return value:  Size  Location     Type
  5503 ;;                  1    wreg      void 
  5504 ;; Registers used:
  5505 ;;		wreg
  5506 ;; Tracked objects:
  5507 ;;		On entry : 0/0
  5508 ;;		On exit  : 0/0
  5509 ;;		Unchanged: 0/0
  5510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5511 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5514 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5515 ;;Total ram usage:        2 bytes
  5516 ;; Hardware stack levels used:    1
  5517 ;; Hardware stack levels required when called:   12
  5518 ;; This function calls:
  5519 ;;		Nothing
  5520 ;; This function is called by:
  5521 ;;		_EUSART_Initialize
  5522 ;;		_main
  5523 ;; This function uses a non-reentrant model
  5524 ;;
  5525                           
  5526                           
  5527                           ;psect for function _EUSART_SetRxInterruptHandler
  5528  057C                     _EUSART_SetRxInterruptHandler:	
  5529                           
  5530                           ;eusart.c: 235: EUSART_RxDefaultInterruptHandler = interruptHandler;
  5531                           
  5532                           ;incstack = 0
  5533                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  5534  057C  0021               	movlb	1	; select bank1
  5535  057D  0827               	movf	(EUSART_SetRxInterruptHandler@interruptHandler+1)^(0+128),w
  5536  057E  0020               	movlb	0	; select bank0
  5537  057F  00E6               	movwf	_EUSART_RxDefaultInterruptHandler+1
  5538  0580  0021               	movlb	1	; select bank1
  5539  0581  0826               	movf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128),w
  5540  0582  0020               	movlb	0	; select bank0
  5541  0583  00E5               	movwf	_EUSART_RxDefaultInterruptHandler
  5542  0584  0008               	return
  5543  0585                     __end_of_EUSART_SetRxInterruptHandler:	
  5544                           
  5545                           	psect	text14
  5546  05B5                     __ptext14:	
  5547 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  5548 ;; Defined at:
  5549 ;;		line 225 in file "mcc_generated_files/eusart.c"
  5550 ;; Parameters:    Size  Location     Type
  5551 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5552 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  5553 ;; Auto vars:     Size  Location     Type
  5554 ;;		None
  5555 ;; Return value:  Size  Location     Type
  5556 ;;                  1    wreg      void 
  5557 ;; Registers used:
  5558 ;;		wreg
  5559 ;; Tracked objects:
  5560 ;;		On entry : 0/0
  5561 ;;		On exit  : 0/0
  5562 ;;		Unchanged: 0/0
  5563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5564 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5567 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5568 ;;Total ram usage:        2 bytes
  5569 ;; Hardware stack levels used:    1
  5570 ;; Hardware stack levels required when called:   12
  5571 ;; This function calls:
  5572 ;;		Nothing
  5573 ;; This function is called by:
  5574 ;;		_EUSART_Initialize
  5575 ;; This function uses a non-reentrant model
  5576 ;;
  5577                           
  5578                           
  5579                           ;psect for function _EUSART_SetOverrunErrorHandler
  5580  05B5                     _EUSART_SetOverrunErrorHandler:	
  5581                           
  5582                           ;eusart.c: 226: EUSART_OverrunErrorHandler = interruptHandler;
  5583                           
  5584                           ;incstack = 0
  5585                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  5586  05B5  0021               	movlb	1	; select bank1
  5587  05B6  0827               	movf	(EUSART_SetOverrunErrorHandler@interruptHandler+1)^(0+128),w
  5588  05B7  00A3               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  5589  05B8  0826               	movf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128),w
  5590  05B9  00A2               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  5591  05BA  0008               	return
  5592  05BB                     __end_of_EUSART_SetOverrunErrorHandler:	
  5593                           
  5594                           	psect	text15
  5595  05BB                     __ptext15:	
  5596 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  5597 ;; Defined at:
  5598 ;;		line 221 in file "mcc_generated_files/eusart.c"
  5599 ;; Parameters:    Size  Location     Type
  5600 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5601 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  5602 ;; Auto vars:     Size  Location     Type
  5603 ;;		None
  5604 ;; Return value:  Size  Location     Type
  5605 ;;                  1    wreg      void 
  5606 ;; Registers used:
  5607 ;;		wreg
  5608 ;; Tracked objects:
  5609 ;;		On entry : 0/0
  5610 ;;		On exit  : 0/0
  5611 ;;		Unchanged: 0/0
  5612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5613 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5616 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5617 ;;Total ram usage:        2 bytes
  5618 ;; Hardware stack levels used:    1
  5619 ;; Hardware stack levels required when called:   12
  5620 ;; This function calls:
  5621 ;;		Nothing
  5622 ;; This function is called by:
  5623 ;;		_EUSART_Initialize
  5624 ;; This function uses a non-reentrant model
  5625 ;;
  5626                           
  5627                           
  5628                           ;psect for function _EUSART_SetFramingErrorHandler
  5629  05BB                     _EUSART_SetFramingErrorHandler:	
  5630                           
  5631                           ;eusart.c: 222: EUSART_FramingErrorHandler = interruptHandler;
  5632                           
  5633                           ;incstack = 0
  5634                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  5635  05BB  0021               	movlb	1	; select bank1
  5636  05BC  0827               	movf	(EUSART_SetFramingErrorHandler@interruptHandler+1)^(0+128),w
  5637  05BD  00A5               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  5638  05BE  0826               	movf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128),w
  5639  05BF  00A4               	movwf	_EUSART_FramingErrorHandler^(0+128)
  5640  05C0  0008               	return
  5641  05C1                     __end_of_EUSART_SetFramingErrorHandler:	
  5642                           
  5643                           	psect	text16
  5644  05C1                     __ptext16:	
  5645 ;; *************** function _EUSART_SetErrorHandler *****************
  5646 ;; Defined at:
  5647 ;;		line 229 in file "mcc_generated_files/eusart.c"
  5648 ;; Parameters:    Size  Location     Type
  5649 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5650 ;;		 -> EUSART_DefaultErrorHandler(1), 
  5651 ;; Auto vars:     Size  Location     Type
  5652 ;;		None
  5653 ;; Return value:  Size  Location     Type
  5654 ;;                  1    wreg      void 
  5655 ;; Registers used:
  5656 ;;		wreg
  5657 ;; Tracked objects:
  5658 ;;		On entry : 0/0
  5659 ;;		On exit  : 0/0
  5660 ;;		Unchanged: 0/0
  5661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5662 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5665 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5666 ;;Total ram usage:        2 bytes
  5667 ;; Hardware stack levels used:    1
  5668 ;; Hardware stack levels required when called:   12
  5669 ;; This function calls:
  5670 ;;		Nothing
  5671 ;; This function is called by:
  5672 ;;		_EUSART_Initialize
  5673 ;; This function uses a non-reentrant model
  5674 ;;
  5675                           
  5676                           
  5677                           ;psect for function _EUSART_SetErrorHandler
  5678  05C1                     _EUSART_SetErrorHandler:	
  5679                           
  5680                           ;eusart.c: 230: EUSART_ErrorHandler = interruptHandler;
  5681                           
  5682                           ;incstack = 0
  5683                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  5684  05C1  0021               	movlb	1	; select bank1
  5685  05C2  0827               	movf	(EUSART_SetErrorHandler@interruptHandler+1)^(0+128),w
  5686  05C3  00A1               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  5687  05C4  0826               	movf	EUSART_SetErrorHandler@interruptHandler^(0+128),w
  5688  05C5  00A0               	movwf	_EUSART_ErrorHandler^(0+128)
  5689  05C6  0008               	return
  5690  05C7                     __end_of_EUSART_SetErrorHandler:	
  5691                           
  5692                           	psect	intentry
  5693  0004                     __pintentry:	
  5694 ;; *************** function _INTERRUPT_InterruptManager *****************
  5695 ;; Defined at:
  5696 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5697 ;; Parameters:    Size  Location     Type
  5698 ;;		None
  5699 ;; Auto vars:     Size  Location     Type
  5700 ;;		None
  5701 ;; Return value:  Size  Location     Type
  5702 ;;                  1    wreg      void 
  5703 ;; Registers used:
  5704 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5705 ;; Tracked objects:
  5706 ;;		On entry : 0/0
  5707 ;;		On exit  : 0/0
  5708 ;;		Unchanged: 0/0
  5709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5712 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5713 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5714 ;;Total ram usage:        1 bytes
  5715 ;; Hardware stack levels used:    1
  5716 ;; Hardware stack levels required when called:   11
  5717 ;; This function calls:
  5718 ;;		Absolute function
  5719 ;;		_EUSART_Receive_ISR
  5720 ;;		_MyUART_ISR
  5721 ;;		_TMR2_ISR
  5722 ;; This function is called by:
  5723 ;;		Interrupt level 1
  5724 ;; This function uses a non-reentrant model
  5725 ;;
  5726                           
  5727  0004                     _INTERRUPT_InterruptManager:	
  5728                           
  5729                           ;incstack = 0
  5730  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  5731                           
  5732                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5733  0005  3180               	pagesel	$
  5734  0006  0020               	movlb	0	; select bank0
  5735  0007  087F               	movf	127,w
  5736  0008  00E2               	movwf	??_INTERRUPT_InterruptManager
  5737                           
  5738                           ;interrupt_manager.c: 55: if(INTCONbits.PEIE == 1)
  5739  0009  1F0B               	btfss	11,6	;volatile
  5740  000A  281F               	goto	i1l123
  5741                           
  5742                           ;interrupt_manager.c: 56: {
  5743                           ;interrupt_manager.c: 57: if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
  5744  000B  0021               	movlb	1	; select bank1
  5745  000C  1E90               	btfss	16,5	;volatile
  5746  000D  2817               	goto	i1l118
  5747  000E  0020               	movlb	0	; select bank0
  5748  000F  1E90               	btfss	16,5	;volatile
  5749  0010  2817               	goto	i1l118
  5750                           
  5751                           ;interrupt_manager.c: 58: {
  5752                           ;interrupt_manager.c: 59: EUSART_RxDefaultInterruptHandler();
  5753  0011  0866               	movf	_EUSART_RxDefaultInterruptHandler+1,w
  5754  0012  008A               	movwf	10
  5755  0013  0865               	movf	_EUSART_RxDefaultInterruptHandler,w
  5756  0014  000A               	callw
  5757  0015  3180               	pagesel	$
  5758                           
  5759                           ;interrupt_manager.c: 60: }
  5760  0016  281F               	goto	i1l123
  5761  0017                     i1l118:	
  5762                           
  5763                           ;interrupt_manager.c: 61: else if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
  5764  0017  0021               	movlb	1	; select bank1
  5765  0018  1C90               	btfss	16,1	;volatile
  5766  0019  281F               	goto	i1l123
  5767  001A  0020               	movlb	0	; select bank0
  5768  001B  1C90               	btfss	16,1	;volatile
  5769  001C  281F               	goto	i1l123
  5770                           
  5771                           ;interrupt_manager.c: 62: {
  5772                           ;interrupt_manager.c: 63: TMR2_ISR();
  5773  001D  3185  2524         	fcall	_TMR2_ISR
  5774  001F                     i1l123:	
  5775                           ;interrupt_manager.c: 70: else
  5776                           ;interrupt_manager.c: 71: {
  5777                           
  5778                           ;interrupt_manager.c: 68: }
  5779                           ;interrupt_manager.c: 69: }
  5780                           
  5781                           ;interrupt_manager.c: 65: else
  5782                           ;interrupt_manager.c: 66: {
  5783                           
  5784                           ;interrupt_manager.c: 64: }
  5785                           
  5786  001F  0020               	movlb	0	; select bank0
  5787  0020  0862               	movf	??_INTERRUPT_InterruptManager,w
  5788  0021  00FF               	movwf	127
  5789  0022  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  5790  0023  0009               	retfie
  5791  0024                     __end_of_INTERRUPT_InterruptManager:	
  5792                           
  5793                           	psect	text18
  5794  0524                     __ptext18:	
  5795 ;; *************** function _TMR2_ISR *****************
  5796 ;; Defined at:
  5797 ;;		line 165 in file "mcc_generated_files/tmr2.c"
  5798 ;; Parameters:    Size  Location     Type
  5799 ;;		None
  5800 ;; Auto vars:     Size  Location     Type
  5801 ;;		None
  5802 ;; Return value:  Size  Location     Type
  5803 ;;                  1    wreg      void 
  5804 ;; Registers used:
  5805 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5806 ;; Tracked objects:
  5807 ;;		On entry : 0/0
  5808 ;;		On exit  : 0/0
  5809 ;;		Unchanged: 0/0
  5810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5815 ;;Total ram usage:        0 bytes
  5816 ;; Hardware stack levels used:    1
  5817 ;; Hardware stack levels required when called:   10
  5818 ;; This function calls:
  5819 ;;		Absolute function
  5820 ;;		_MyTimer2ISR
  5821 ;;		_TMR2_DefaultInterruptHandler
  5822 ;; This function is called by:
  5823 ;;		_INTERRUPT_InterruptManager
  5824 ;; This function uses a non-reentrant model
  5825 ;;
  5826                           
  5827                           
  5828                           ;psect for function _TMR2_ISR
  5829  0524                     _TMR2_ISR:	
  5830                           
  5831                           ;tmr2.c: 169: PIR1bits.TMR2IF = 0;
  5832                           
  5833                           ;incstack = 0
  5834                           ; Regs used in _TMR2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5835  0524  0020               	movlb	0	; select bank0
  5836  0525  1090               	bcf	16,1	;volatile
  5837                           
  5838                           ;tmr2.c: 171: if(TMR2_InterruptHandler)
  5839  0526  0863               	movf	_TMR2_InterruptHandler,w
  5840  0527  0464               	iorwf	_TMR2_InterruptHandler+1,w
  5841  0528  1903               	btfsc	3,2
  5842  0529  0008               	return
  5843                           
  5844                           ;tmr2.c: 172: {
  5845                           ;tmr2.c: 173: TMR2_InterruptHandler();
  5846  052A  0864               	movf	_TMR2_InterruptHandler+1,w
  5847  052B  008A               	movwf	10
  5848  052C  0863               	movf	_TMR2_InterruptHandler,w
  5849  052D  000A               	callw
  5850  052E  3185               	pagesel	$
  5851  052F  0008               	return
  5852  0530                     __end_of_TMR2_ISR:	
  5853                           
  5854                           	psect	text19
  5855  00F9                     __ptext19:	
  5856 ;; *************** function _MyTimer2ISR *****************
  5857 ;; Defined at:
  5858 ;;		line 59 in file "main.c"
  5859 ;; Parameters:    Size  Location     Type
  5860 ;;		None
  5861 ;; Auto vars:     Size  Location     Type
  5862 ;;		None
  5863 ;; Return value:  Size  Location     Type
  5864 ;;                  1    wreg      void 
  5865 ;; Registers used:
  5866 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5867 ;; Tracked objects:
  5868 ;;		On entry : 0/0
  5869 ;;		On exit  : 0/0
  5870 ;;		Unchanged: 0/0
  5871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5874 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5875 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5876 ;;Total ram usage:        1 bytes
  5877 ;; Hardware stack levels used:    1
  5878 ;; Hardware stack levels required when called:    9
  5879 ;; This function calls:
  5880 ;;		_EUSART_Write
  5881 ;;		_I2C_Write1ByteRegister
  5882 ;;		_PWM3_LoadDutyValue
  5883 ;;		___lwdiv
  5884 ;; This function is called by:
  5885 ;;		_main
  5886 ;;		_TMR2_ISR
  5887 ;; This function uses a non-reentrant model
  5888 ;;
  5889                           
  5890                           
  5891                           ;psect for function _MyTimer2ISR
  5892  00F9                     _MyTimer2ISR:	
  5893                           
  5894                           ;main.c: 65: PWM3_LoadDutyValue((uint8_t)(Angle/6)+45);
  5895                           
  5896                           ;incstack = 0
  5897                           ; Regs used in _MyTimer2ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5898  00F9  3006               	movlw	6
  5899  00FA  00F0               	movwf	___lwdiv@divisor
  5900  00FB  3000               	movlw	0
  5901  00FC  00F1               	movwf	___lwdiv@divisor+1
  5902  00FD  0020               	movlb	0	; select bank0
  5903  00FE  0868               	movf	_Angle+1,w
  5904  00FF  00F3               	movwf	___lwdiv@dividend+1
  5905  0100  0867               	movf	_Angle,w
  5906  0101  00F2               	movwf	___lwdiv@dividend
  5907  0102  3182  22F1  3180   	fcall	___lwdiv
  5908  0105  0870               	movf	?___lwdiv,w
  5909  0106  3E2D               	addlw	45
  5910  0107  00F8               	movwf	PWM3_LoadDutyValue@dutyValue
  5911  0108  3000               	movlw	0
  5912  0109  1803               	skipnc
  5913  010A  3001               	movlw	1
  5914  010B  00F9               	movwf	PWM3_LoadDutyValue@dutyValue+1
  5915  010C  3184  249A  3180   	fcall	_PWM3_LoadDutyValue
  5916                           
  5917                           ;main.c: 66: if(PORTAbits.RA4) {
  5918  010F  0020               	movlb	0	; select bank0
  5919  0110  1E0C               	btfss	12,4	;volatile
  5920  0111  2953               	goto	i1l2772
  5921                           
  5922                           ;main.c: 67: CptBat = 0;
  5923  0112  01D1               	clrf	_CptBat
  5924                           
  5925                           ;main.c: 68: if(StateBat == S_bat_low) {
  5926  0113  0869               	movf	_StateBat,w
  5927  0114  1D03               	btfss	3,2
  5928  0115  2925               	goto	i1l2756
  5929                           
  5930                           ;main.c: 69: EUSART_Write('B');
  5931  0116  3042               	movlw	66
  5932  0117  3185  258D  3180   	fcall	_EUSART_Write
  5933                           
  5934                           ;main.c: 70: EUSART_Write('1');
  5935  011A  3031               	movlw	49
  5936  011B  3185  258D  3180   	fcall	_EUSART_Write
  5937                           
  5938                           ;main.c: 71: EUSART_Write('s');
  5939  011E  3073               	movlw	115
  5940  011F  3185  258D  3180   	fcall	_EUSART_Write
  5941                           
  5942                           ;main.c: 72: StateBat = S_bat_high;
  5943  0122  0020               	movlb	0	; select bank0
  5944  0123  01E9               	clrf	_StateBat
  5945  0124  0AE9               	incf	_StateBat,f
  5946  0125                     i1l2756:	
  5947                           
  5948                           ;main.c: 73: }
  5949                           ;main.c: 74: if(Validation) {
  5950  0125  086A               	movf	_Validation,w
  5951  0126  1903               	btfsc	3,2
  5952  0127  293F               	goto	i1l2766
  5953                           
  5954                           ;main.c: 76: if(Vitesse > 100) {Vitesse = 100;}
  5955  0128  3000               	movlw	0
  5956  0129  024E               	subwf	_Vitesse+1,w
  5957  012A  3065               	movlw	101
  5958  012B  1903               	skipnz
  5959  012C  024D               	subwf	_Vitesse,w
  5960  012D  1C03               	skipc
  5961  012E  2933               	goto	i1l2762
  5962  012F  3064               	movlw	100
  5963  0130  00CD               	movwf	_Vitesse
  5964  0131  3000               	movlw	0
  5965  0132  00CE               	movwf	_Vitesse+1
  5966  0133                     i1l2762:	
  5967                           
  5968                           ;main.c: 77: I2C_Write1ByteRegister(0x40, Vitesse, 0);
  5969  0133  084D               	movf	_Vitesse,w
  5970  0134  00E1               	movwf	??_MyTimer2ISR
  5971  0135  0861               	movf	??_MyTimer2ISR,w
  5972  0136  00DD               	movwf	I2C_Write1ByteRegister@reg
  5973  0137  01DE               	clrf	I2C_Write1ByteRegister@data
  5974  0138  3040               	movlw	64
  5975  0139  3183  2357         	fcall	_I2C_Write1ByteRegister
  5976                           
  5977                           ;main.c: 79: Validation--;
  5978  013B  3001               	movlw	1
  5979  013C  0020               	movlb	0	; select bank0
  5980  013D  02EA               	subwf	_Validation,f
  5981                           
  5982                           ;main.c: 80: } else {
  5983  013E  0008               	return
  5984  013F                     i1l2766:	
  5985                           
  5986                           ;main.c: 81: CptBat++;
  5987  013F  3001               	movlw	1
  5988  0140  00E1               	movwf	??_MyTimer2ISR
  5989  0141  0861               	movf	??_MyTimer2ISR,w
  5990  0142  07D1               	addwf	_CptBat,f
  5991                           
  5992                           ;main.c: 82: if(CptBat > 100) {
  5993  0143  3065               	movlw	101
  5994  0144  0251               	subwf	_CptBat,w
  5995  0145  1C03               	skipc
  5996  0146  2949               	goto	i1l2770
  5997                           
  5998                           ;main.c: 83: do { LATCbits.LATC5 = 0; } while(0);
  5999  0147  0022               	movlb	2	; select bank2
  6000  0148  128E               	bcf	14,5	;volatile
  6001  0149                     i1l2770:	
  6002                           
  6003                           ;main.c: 84: }
  6004                           ;main.c: 86: I2C_Write1ByteRegister(0x40, 101, 0);
  6005  0149  3065               	movlw	101
  6006  014A  0020               	movlb	0	; select bank0
  6007  014B  00E1               	movwf	??_MyTimer2ISR
  6008  014C  0861               	movf	??_MyTimer2ISR,w
  6009  014D  00DD               	movwf	I2C_Write1ByteRegister@reg
  6010  014E  01DE               	clrf	I2C_Write1ByteRegister@data
  6011  014F  3040               	movlw	64
  6012  0150  3183  2357         	fcall	_I2C_Write1ByteRegister
  6013                           
  6014                           ;main.c: 88: }
  6015                           ;main.c: 89: } else {
  6016  0152  0008               	return
  6017  0153                     i1l2772:	
  6018                           
  6019                           ;main.c: 90: if(StateBat == S_bat_high) {
  6020  0153  0020               	movlb	0	; select bank0
  6021  0154  0369               	decf	_StateBat,w
  6022  0155  1D03               	btfss	3,2
  6023  0156  2965               	goto	i1l2778
  6024                           
  6025                           ;main.c: 91: EUSART_Write('B');
  6026  0157  3042               	movlw	66
  6027  0158  3185  258D  3180   	fcall	_EUSART_Write
  6028                           
  6029                           ;main.c: 92: EUSART_Write('0');
  6030  015B  3030               	movlw	48
  6031  015C  3185  258D  3180   	fcall	_EUSART_Write
  6032                           
  6033                           ;main.c: 93: EUSART_Write('r');
  6034  015F  3072               	movlw	114
  6035  0160  3185  258D  3180   	fcall	_EUSART_Write
  6036                           
  6037                           ;main.c: 94: StateBat = S_bat_low;
  6038  0163  0020               	movlb	0	; select bank0
  6039  0164  01E9               	clrf	_StateBat
  6040  0165                     i1l2778:	
  6041                           
  6042                           ;main.c: 95: }
  6043                           ;main.c: 97: I2C_Write1ByteRegister(0x40, 101, 0);
  6044  0165  3065               	movlw	101
  6045  0166  00E1               	movwf	??_MyTimer2ISR
  6046  0167  0861               	movf	??_MyTimer2ISR,w
  6047  0168  00DD               	movwf	I2C_Write1ByteRegister@reg
  6048  0169  01DE               	clrf	I2C_Write1ByteRegister@data
  6049  016A  3040               	movlw	64
  6050  016B  3183  2357         	fcall	_I2C_Write1ByteRegister
  6051  016D  0008               	return
  6052  016E                     __end_of_MyTimer2ISR:	
  6053                           
  6054                           	psect	text20
  6055  063E                     __ptext20:	
  6056 ;; *************** function _TMR2_DefaultInterruptHandler *****************
  6057 ;; Defined at:
  6058 ;;		line 182 in file "mcc_generated_files/tmr2.c"
  6059 ;; Parameters:    Size  Location     Type
  6060 ;;		None
  6061 ;; Auto vars:     Size  Location     Type
  6062 ;;		None
  6063 ;; Return value:  Size  Location     Type
  6064 ;;                  1    wreg      void 
  6065 ;; Registers used:
  6066 ;;		None
  6067 ;; Tracked objects:
  6068 ;;		On entry : 0/0
  6069 ;;		On exit  : 0/0
  6070 ;;		Unchanged: 0/0
  6071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6075 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6076 ;;Total ram usage:        0 bytes
  6077 ;; Hardware stack levels used:    1
  6078 ;; This function calls:
  6079 ;;		Nothing
  6080 ;; This function is called by:
  6081 ;;		_TMR2_Initialize
  6082 ;;		_TMR2_ISR
  6083 ;; This function uses a non-reentrant model
  6084 ;;
  6085                           
  6086                           
  6087                           ;psect for function _TMR2_DefaultInterruptHandler
  6088  063E                     _TMR2_DefaultInterruptHandler:	
  6089                           
  6090                           ;incstack = 0
  6091                           ; Regs used in _TMR2_DefaultInterruptHandler: []
  6092  063E  0008               	return
  6093  063F                     __end_of_TMR2_DefaultInterruptHandler:	
  6094                           
  6095                           	psect	text21
  6096  02F1                     __ptext21:	
  6097 ;; *************** function ___lwdiv *****************
  6098 ;; Defined at:
  6099 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  6100 ;; Parameters:    Size  Location     Type
  6101 ;;  divisor         2    0[COMMON] unsigned int 
  6102 ;;  dividend        2    2[COMMON] unsigned int 
  6103 ;; Auto vars:     Size  Location     Type
  6104 ;;  quotient        2    5[COMMON] unsigned int 
  6105 ;;  counter         1    7[COMMON] unsigned char 
  6106 ;; Return value:  Size  Location     Type
  6107 ;;                  2    0[COMMON] unsigned int 
  6108 ;; Registers used:
  6109 ;;		wreg, status,2, status,0
  6110 ;; Tracked objects:
  6111 ;;		On entry : 0/0
  6112 ;;		On exit  : 0/0
  6113 ;;		Unchanged: 0/0
  6114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6115 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6116 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6117 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6118 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6119 ;;Total ram usage:        8 bytes
  6120 ;; Hardware stack levels used:    1
  6121 ;; This function calls:
  6122 ;;		Nothing
  6123 ;; This function is called by:
  6124 ;;		_MyTimer2ISR
  6125 ;; This function uses a non-reentrant model
  6126 ;;
  6127                           
  6128                           
  6129                           ;psect for function ___lwdiv
  6130  02F1                     ___lwdiv:	
  6131                           
  6132                           ;incstack = 0
  6133                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6134  02F1  01F5               	clrf	___lwdiv@quotient
  6135  02F2  01F6               	clrf	___lwdiv@quotient+1
  6136  02F3  0870               	movf	___lwdiv@divisor,w
  6137  02F4  0471               	iorwf	___lwdiv@divisor+1,w
  6138  02F5  1903               	btfsc	3,2
  6139  02F6  2B20               	goto	i1l2626
  6140  02F7  01F7               	clrf	___lwdiv@counter
  6141  02F8  0AF7               	incf	___lwdiv@counter,f
  6142  02F9                     i1l2614:	
  6143  02F9  1BF1               	btfsc	___lwdiv@divisor+1,7
  6144  02FA  2B05               	goto	i1l2616
  6145  02FB  3001               	movlw	1
  6146  02FC                     u95_25:	
  6147  02FC  35F0               	lslf	___lwdiv@divisor,f
  6148  02FD  0DF1               	rlf	___lwdiv@divisor+1,f
  6149  02FE  0B89               	decfsz	9,f
  6150  02FF  2AFC               	goto	u95_25
  6151  0300  3001               	movlw	1
  6152  0301  00F4               	movwf	??___lwdiv
  6153  0302  0874               	movf	??___lwdiv,w
  6154  0303  07F7               	addwf	___lwdiv@counter,f
  6155  0304  2AF9               	goto	i1l2614
  6156  0305                     i1l2616:	
  6157  0305  3001               	movlw	1
  6158  0306                     u97_25:	
  6159  0306  35F5               	lslf	___lwdiv@quotient,f
  6160  0307  0DF6               	rlf	___lwdiv@quotient+1,f
  6161  0308  0B89               	decfsz	9,f
  6162  0309  2B06               	goto	u97_25
  6163  030A  0871               	movf	___lwdiv@divisor+1,w
  6164  030B  0273               	subwf	___lwdiv@dividend+1,w
  6165  030C  1D03               	skipz
  6166  030D  2B10               	goto	u98_25
  6167  030E  0870               	movf	___lwdiv@divisor,w
  6168  030F  0272               	subwf	___lwdiv@dividend,w
  6169  0310                     u98_25:	
  6170  0310  1C03               	skipc
  6171  0311  2B17               	goto	i1l2622
  6172  0312  0870               	movf	___lwdiv@divisor,w
  6173  0313  02F2               	subwf	___lwdiv@dividend,f
  6174  0314  0871               	movf	___lwdiv@divisor+1,w
  6175  0315  3BF3               	subwfb	___lwdiv@dividend+1,f
  6176  0316  1475               	bsf	___lwdiv@quotient,0
  6177  0317                     i1l2622:	
  6178  0317  3001               	movlw	1
  6179  0318                     u99_25:	
  6180  0318  36F1               	lsrf	___lwdiv@divisor+1,f
  6181  0319  0CF0               	rrf	___lwdiv@divisor,f
  6182  031A  0B89               	decfsz	9,f
  6183  031B  2B18               	goto	u99_25
  6184  031C  3001               	movlw	1
  6185  031D  02F7               	subwf	___lwdiv@counter,f
  6186  031E  1D03               	btfss	3,2
  6187  031F  2B05               	goto	i1l2616
  6188  0320                     i1l2626:	
  6189  0320  0876               	movf	___lwdiv@quotient+1,w
  6190  0321  00F1               	movwf	?___lwdiv+1
  6191  0322  0875               	movf	___lwdiv@quotient,w
  6192  0323  00F0               	movwf	?___lwdiv
  6193  0324  0008               	return
  6194  0325                     __end_of___lwdiv:	
  6195                           
  6196                           	psect	text22
  6197  049A                     __ptext22:	
  6198 ;; *************** function _PWM3_LoadDutyValue *****************
  6199 ;; Defined at:
  6200 ;;		line 74 in file "mcc_generated_files/pwm3.c"
  6201 ;; Parameters:    Size  Location     Type
  6202 ;;  dutyValue       2    8[COMMON] unsigned int 
  6203 ;; Auto vars:     Size  Location     Type
  6204 ;;		None
  6205 ;; Return value:  Size  Location     Type
  6206 ;;                  1    wreg      void 
  6207 ;; Registers used:
  6208 ;;		wreg, status,2, status,0
  6209 ;; Tracked objects:
  6210 ;;		On entry : 0/0
  6211 ;;		On exit  : 0/0
  6212 ;;		Unchanged: 0/0
  6213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6214 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6216 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6217 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6218 ;;Total ram usage:        4 bytes
  6219 ;; Hardware stack levels used:    1
  6220 ;; This function calls:
  6221 ;;		Nothing
  6222 ;; This function is called by:
  6223 ;;		_MyTimer2ISR
  6224 ;; This function uses a non-reentrant model
  6225 ;;
  6226                           
  6227                           
  6228                           ;psect for function _PWM3_LoadDutyValue
  6229  049A                     _PWM3_LoadDutyValue:	
  6230                           
  6231                           ;pwm3.c: 77: PWM3DCH = (dutyValue & 0x03FC)>>2;
  6232                           
  6233                           ;incstack = 0
  6234                           ; Regs used in _PWM3_LoadDutyValue: [wreg+status,2+status,0]
  6235  049A  0879               	movf	PWM3_LoadDutyValue@dutyValue+1,w
  6236  049B  00FB               	movwf	??_PWM3_LoadDutyValue+1
  6237  049C  0878               	movf	PWM3_LoadDutyValue@dutyValue,w
  6238  049D  00FA               	movwf	??_PWM3_LoadDutyValue
  6239  049E  36FB               	lsrf	??_PWM3_LoadDutyValue+1,f
  6240  049F  0CFA               	rrf	??_PWM3_LoadDutyValue,f
  6241  04A0  36FB               	lsrf	??_PWM3_LoadDutyValue+1,f
  6242  04A1  0CFA               	rrf	??_PWM3_LoadDutyValue,f
  6243  04A2  087A               	movf	??_PWM3_LoadDutyValue,w
  6244  04A3  002C               	movlb	12	; select bank12
  6245  04A4  0098               	movwf	24	;volatile
  6246                           
  6247                           ;pwm3.c: 80: PWM3DCL = (dutyValue & 0x0003)<<6;
  6248  04A5  0878               	movf	PWM3_LoadDutyValue@dutyValue,w
  6249  04A6  3903               	andlw	3
  6250  04A7  00FA               	movwf	??_PWM3_LoadDutyValue
  6251  04A8  3005               	movlw	5
  6252  04A9                     u93_25:	
  6253  04A9  35FA               	lslf	??_PWM3_LoadDutyValue,f
  6254  04AA  3EFF               	addlw	-1
  6255  04AB  1D03               	skipz
  6256  04AC  2CA9               	goto	u93_25
  6257  04AD  357A               	lslf	??_PWM3_LoadDutyValue,w
  6258  04AE  0097               	movwf	23	;volatile
  6259  04AF  0008               	return
  6260  04B0                     __end_of_PWM3_LoadDutyValue:	
  6261                           
  6262                           	psect	text23
  6263  0357                     __ptext23:	
  6264 ;; *************** function _I2C_Write1ByteRegister *****************
  6265 ;; Defined at:
  6266 ;;		line 91 in file "mcc_generated_files/examples/i2c_master_example.c"
  6267 ;; Parameters:    Size  Location     Type
  6268 ;;  address         1    wreg     unsigned char 
  6269 ;;  reg             1    5[BANK0 ] unsigned char 
  6270 ;;  data            1    6[BANK0 ] unsigned char 
  6271 ;; Auto vars:     Size  Location     Type
  6272 ;;  address         1    8[BANK0 ] unsigned char 
  6273 ;; Return value:  Size  Location     Type
  6274 ;;                  1    wreg      void 
  6275 ;; Registers used:
  6276 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6277 ;; Tracked objects:
  6278 ;;		On entry : 0/0
  6279 ;;		On exit  : 0/0
  6280 ;;		Unchanged: 0/0
  6281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6282 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6283 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6284 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6285 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6286 ;;Total ram usage:        4 bytes
  6287 ;; Hardware stack levels used:    1
  6288 ;; Hardware stack levels required when called:    8
  6289 ;; This function calls:
  6290 ;;		_I2C_Close
  6291 ;;		_I2C_MasterWrite
  6292 ;;		_I2C_Open
  6293 ;;		_I2C_SetAddressNackCallback
  6294 ;;		_I2C_SetBuffer
  6295 ;;		_I2C_SetDataCompleteCallback
  6296 ;; This function is called by:
  6297 ;;		_MyTimer2ISR
  6298 ;; This function uses a non-reentrant model
  6299 ;;
  6300                           
  6301                           
  6302                           ;psect for function _I2C_Write1ByteRegister
  6303  0357                     _I2C_Write1ByteRegister:	
  6304                           
  6305                           ;incstack = 0
  6306                           ; Regs used in _I2C_Write1ByteRegister: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6307                           ;I2C_Write1ByteRegister@address stored from wreg
  6308  0357  0020               	movlb	0	; select bank0
  6309  0358  00E0               	movwf	I2C_Write1ByteRegister@address
  6310  0359                     i1l2566:	
  6311                           ;i2c_master_example.c: 93: while(!I2C_Open(address));
  6312                           
  6313  0359  0020               	movlb	0	; select bank0
  6314  035A  0860               	movf	I2C_Write1ByteRegister@address,w
  6315  035B  3182  2284  3183   	fcall	_I2C_Open
  6316  035E  3A00               	xorlw	0
  6317  035F  1903               	skipnz
  6318  0360  2B59               	goto	i1l2566
  6319                           
  6320                           ;i2c_master_example.c: 94: I2C_SetDataCompleteCallback(wr1RegCompleteHandler,&data);
  6321  0361  30D6               	movlw	low _wr1RegCompleteHandler
  6322  0362  00F5               	movwf	I2C_SetDataCompleteCallback@cb
  6323  0363  3004               	movlw	high _wr1RegCompleteHandler
  6324  0364  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
  6325  0365  305E               	movlw	(low (I2C_Write1ByteRegister@data| 0))& (0+255)
  6326  0366  0020               	movlb	0	; select bank0
  6327  0367  00DF               	movwf	??_I2C_Write1ByteRegister
  6328  0368  085F               	movf	??_I2C_Write1ByteRegister,w
  6329  0369  00F7               	movwf	I2C_SetDataCompleteCallback@ptr
  6330  036A  3185  2548  3183   	fcall	_I2C_SetDataCompleteCallback
  6331                           
  6332                           ;i2c_master_example.c: 95: I2C_SetBuffer(&reg,1);
  6333  036D  3001               	movlw	1
  6334  036E  00F0               	movwf	I2C_SetBuffer@bufferSize
  6335  036F  3000               	movlw	0
  6336  0370  00F1               	movwf	I2C_SetBuffer@bufferSize+1
  6337  0371  305D               	movlw	(low (I2C_Write1ByteRegister@reg| 0))& (0+255)
  6338  0372  3185  2516  3183   	fcall	_I2C_SetBuffer
  6339                           
  6340                           ;i2c_master_example.c: 96: I2C_SetAddressNackCallback((0),(0));
  6341  0375  3000               	movlw	0
  6342  0376  00F5               	movwf	I2C_SetAddressNackCallback@cb
  6343  0377  00F6               	movwf	I2C_SetAddressNackCallback@cb+1
  6344  0378  01F7               	clrf	I2C_SetAddressNackCallback@ptr
  6345  0379  3185  2530  3183   	fcall	_I2C_SetAddressNackCallback
  6346                           
  6347                           ;i2c_master_example.c: 97: I2C_MasterWrite();
  6348  037C  3185  25E6  3183   	fcall	_I2C_MasterWrite
  6349  037F                     i1l2576:	
  6350                           ;i2c_master_example.c: 98: while(I2C_BUSY == I2C_Close());
  6351                           
  6352  037F  3184  2453  3183   	fcall	_I2C_Close
  6353  0382  3A01               	xorlw	1
  6354  0383  1D03               	btfss	3,2
  6355  0384  0008               	return
  6356  0385  2B7F               	goto	i1l2576
  6357  0386                     __end_of_I2C_Write1ByteRegister:	
  6358                           
  6359                           	psect	text24
  6360  0530                     __ptext24:	
  6361 ;; *************** function _I2C_SetAddressNackCallback *****************
  6362 ;; Defined at:
  6363 ;;		line 283 in file "mcc_generated_files/i2c_master.c"
  6364 ;; Parameters:    Size  Location     Type
  6365 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
  6366 ;;		 -> Absolute function(1), 
  6367 ;;  ptr             1    7[COMMON] PTR void 
  6368 ;;		 -> NULL(0), 
  6369 ;; Auto vars:     Size  Location     Type
  6370 ;;		None
  6371 ;; Return value:  Size  Location     Type
  6372 ;;                  1    wreg      void 
  6373 ;; Registers used:
  6374 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6375 ;; Tracked objects:
  6376 ;;		On entry : 0/0
  6377 ;;		On exit  : 0/0
  6378 ;;		Unchanged: 0/0
  6379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6380 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6382 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6383 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6384 ;;Total ram usage:        4 bytes
  6385 ;; Hardware stack levels used:    1
  6386 ;; Hardware stack levels required when called:    1
  6387 ;; This function calls:
  6388 ;;		_I2C_SetCallback
  6389 ;; This function is called by:
  6390 ;;		_I2C_Write1ByteRegister
  6391 ;;		_I2C_Read1ByteRegister
  6392 ;;		_I2C_Read2ByteRegister
  6393 ;;		_I2C_Write2ByteRegister
  6394 ;;		_I2C_WriteNBytes
  6395 ;;		_I2C_ReadDataBlock
  6396 ;; This function uses a non-reentrant model
  6397 ;;
  6398                           
  6399                           
  6400                           ;psect for function _I2C_SetAddressNackCallback
  6401  0530                     _I2C_SetAddressNackCallback:	
  6402                           
  6403                           ;i2c_master.c: 285: I2C_SetCallback(I2C_ADDR_NACK, cb, ptr);
  6404                           
  6405                           ;incstack = 0
  6406                           ; Regs used in _I2C_SetAddressNackCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6407  0530  0876               	movf	I2C_SetAddressNackCallback@cb+1,w
  6408  0531  00F1               	movwf	I2C_SetCallback@cb+1
  6409  0532  0875               	movf	I2C_SetAddressNackCallback@cb,w
  6410  0533  00F0               	movwf	I2C_SetCallback@cb
  6411  0534  0877               	movf	I2C_SetAddressNackCallback@ptr,w
  6412  0535  00F8               	movwf	??_I2C_SetAddressNackCallback
  6413  0536  0878               	movf	??_I2C_SetAddressNackCallback,w
  6414  0537  00F2               	movwf	I2C_SetCallback@ptr
  6415  0538  3002               	movlw	2
  6416  0539  3183  23D2         	fcall	_I2C_SetCallback
  6417  053B  0008               	return
  6418  053C                     __end_of_I2C_SetAddressNackCallback:	
  6419                           
  6420                           	psect	text25
  6421  0284                     __ptext25:	
  6422 ;; *************** function _I2C_Open *****************
  6423 ;; Defined at:
  6424 ;;		line 176 in file "mcc_generated_files/i2c_master.c"
  6425 ;; Parameters:    Size  Location     Type
  6426 ;;  address         1    wreg     unsigned char 
  6427 ;; Auto vars:     Size  Location     Type
  6428 ;;  address         1    1[COMMON] unsigned char 
  6429 ;;  returnValue     1    2[COMMON] enum E92
  6430 ;; Return value:  Size  Location     Type
  6431 ;;                  1    wreg      enum E92
  6432 ;; Registers used:
  6433 ;;		wreg, status,2, status,0, pclath, cstack
  6434 ;; Tracked objects:
  6435 ;;		On entry : 0/0
  6436 ;;		On exit  : 0/0
  6437 ;;		Unchanged: 0/0
  6438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6440 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6441 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6442 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6443 ;;Total ram usage:        3 bytes
  6444 ;; Hardware stack levels used:    1
  6445 ;; Hardware stack levels required when called:    1
  6446 ;; This function calls:
  6447 ;;		_I2C_MasterClearIrq
  6448 ;;		_I2C_MasterOpen
  6449 ;; This function is called by:
  6450 ;;		_I2C_Write1ByteRegister
  6451 ;;		_I2C_Read1ByteRegister
  6452 ;;		_I2C_Read2ByteRegister
  6453 ;;		_I2C_Write2ByteRegister
  6454 ;;		_I2C_WriteNBytes
  6455 ;;		_I2C_ReadNBytes
  6456 ;;		_I2C_ReadDataBlock
  6457 ;; This function uses a non-reentrant model
  6458 ;;
  6459                           
  6460                           
  6461                           ;psect for function _I2C_Open
  6462  0284                     _I2C_Open:	
  6463                           
  6464                           ;incstack = 0
  6465                           ; Regs used in _I2C_Open: [wreg+status,2+status,0+pclath+cstack]
  6466                           ;I2C_Open@address stored from wreg
  6467  0284  00F1               	movwf	I2C_Open@address
  6468                           
  6469                           ;i2c_master.c: 178: i2c_error_t returnValue = I2C_BUSY;
  6470  0285  01F2               	clrf	I2C_Open@returnValue
  6471  0286  0AF2               	incf	I2C_Open@returnValue,f
  6472                           
  6473                           ;i2c_master.c: 180: if(!I2C_Status.inUse)
  6474  0287  0020               	movlb	0	; select bank0
  6475  0288  193C               	btfsc	_I2C_Status+28,2
  6476  0289  2AB9               	goto	i1l321
  6477                           
  6478                           ;i2c_master.c: 181: {
  6479                           ;i2c_master.c: 182: I2C_Status.address = address;
  6480  028A  0871               	movf	I2C_Open@address,w
  6481  028B  00F0               	movwf	??_I2C_Open
  6482  028C  0870               	movf	??_I2C_Open,w
  6483  028D  00B6               	movwf	_I2C_Status+22
  6484                           
  6485                           ;i2c_master.c: 183: I2C_Status.busy = 0;
  6486  028E  10BC               	bcf	_I2C_Status+28,1
  6487                           
  6488                           ;i2c_master.c: 184: I2C_Status.inUse = 1;
  6489  028F  153C               	bsf	_I2C_Status+28,2
  6490                           
  6491                           ;i2c_master.c: 185: I2C_Status.addressNackCheck = 0;
  6492  0290  103C               	bcf	_I2C_Status+28,0
  6493                           
  6494                           ;i2c_master.c: 186: I2C_Status.state = I2C_RESET;
  6495  0291  300E               	movlw	14
  6496  0292  00F0               	movwf	??_I2C_Open
  6497  0293  0870               	movf	??_I2C_Open,w
  6498  0294  00BA               	movwf	_I2C_Status+26
  6499                           
  6500                           ;i2c_master.c: 187: I2C_Status.time_out_value = 500;
  6501  0295  30F4               	movlw	244
  6502  0296  00B4               	movwf	_I2C_Status+20
  6503  0297  3001               	movlw	1
  6504  0298  00B5               	movwf	_I2C_Status+21
  6505                           
  6506                           ;i2c_master.c: 188: I2C_Status.bufferFree = 1;
  6507  0299  15BC               	bsf	_I2C_Status+28,3
  6508                           
  6509                           ;i2c_master.c: 191: I2C_Status.callbackTable[I2C_DATA_COMPLETE]=I2C_CallbackReturnStop;
  6510  029A  303C               	movlw	low _I2C_CallbackReturnStop
  6511  029B  00A0               	movwf	_I2C_Status
  6512  029C  3006               	movlw	high _I2C_CallbackReturnStop
  6513  029D  00A1               	movwf	_I2C_Status+1
  6514                           
  6515                           ;i2c_master.c: 192: I2C_Status.callbackPayload[I2C_DATA_COMPLETE] = (0);
  6516  029E  01AC               	clrf	low ((_I2C_Status| 0+12))
  6517                           
  6518                           ;i2c_master.c: 193: I2C_Status.callbackTable[I2C_WRITE_COLLISION]=I2C_CallbackReturnStop
      +                          ;
  6519  029F  303C               	movlw	low _I2C_CallbackReturnStop
  6520  02A0  00A2               	movwf	low ((_I2C_Status| 0+2))
  6521  02A1  3006               	movlw	high _I2C_CallbackReturnStop
  6522  02A2  00A3               	movwf	(low ((_I2C_Status| 0+2))+1)
  6523                           
  6524                           ;i2c_master.c: 194: I2C_Status.callbackPayload[I2C_WRITE_COLLISION] = (0);
  6525  02A3  01AD               	clrf	low ((_I2C_Status| 0+13))
  6526                           
  6527                           ;i2c_master.c: 195: I2C_Status.callbackTable[I2C_ADDR_NACK]=I2C_CallbackReturnStop;
  6528  02A4  303C               	movlw	low _I2C_CallbackReturnStop
  6529  02A5  00A4               	movwf	low ((_I2C_Status| 0+4))
  6530  02A6  3006               	movlw	high _I2C_CallbackReturnStop
  6531  02A7  00A5               	movwf	(low ((_I2C_Status| 0+4))+1)
  6532                           
  6533                           ;i2c_master.c: 196: I2C_Status.callbackPayload[I2C_ADDR_NACK] = (0);
  6534  02A8  01AE               	clrf	low ((_I2C_Status| 0+14))
  6535                           
  6536                           ;i2c_master.c: 197: I2C_Status.callbackTable[I2C_DATA_NACK]=I2C_CallbackReturnStop;
  6537  02A9  303C               	movlw	low _I2C_CallbackReturnStop
  6538  02AA  00A6               	movwf	low ((_I2C_Status| 0+6))
  6539  02AB  3006               	movlw	high _I2C_CallbackReturnStop
  6540  02AC  00A7               	movwf	(low ((_I2C_Status| 0+6))+1)
  6541                           
  6542                           ;i2c_master.c: 198: I2C_Status.callbackPayload[I2C_DATA_NACK] = (0);
  6543  02AD  01AF               	clrf	low ((_I2C_Status| 0+15))
  6544                           
  6545                           ;i2c_master.c: 199: I2C_Status.callbackTable[I2C_TIMEOUT]=I2C_CallbackReturnReset;
  6546  02AE  303A               	movlw	low _I2C_CallbackReturnReset
  6547  02AF  00A8               	movwf	low ((_I2C_Status| 0+8))
  6548  02B0  3006               	movlw	high _I2C_CallbackReturnReset
  6549  02B1  00A9               	movwf	(low ((_I2C_Status| 0+8))+1)
  6550                           
  6551                           ;i2c_master.c: 200: I2C_Status.callbackPayload[I2C_TIMEOUT] = (0);
  6552  02B2  01B0               	clrf	low ((_I2C_Status| 0+16))
  6553                           
  6554                           ;i2c_master.c: 202: I2C_MasterClearIrq();
  6555  02B3  3186  2634  3182   	fcall	_I2C_MasterClearIrq
  6556                           
  6557                           ;i2c_master.c: 203: I2C_MasterOpen();
  6558  02B6  3185  253C         	fcall	_I2C_MasterOpen
  6559                           
  6560                           ;i2c_master.c: 204: returnValue = I2C_NOERR;
  6561  02B8  01F2               	clrf	I2C_Open@returnValue
  6562  02B9                     i1l321:	
  6563                           
  6564                           ;i2c_master.c: 205: }
  6565                           ;i2c_master.c: 206: return returnValue;
  6566  02B9  0872               	movf	I2C_Open@returnValue,w
  6567  02BA  0008               	return
  6568  02BB                     __end_of_I2C_Open:	
  6569                           
  6570                           	psect	text26
  6571  053C                     __ptext26:	
  6572 ;; *************** function _I2C_MasterOpen *****************
  6573 ;; Defined at:
  6574 ;;		line 543 in file "mcc_generated_files/i2c_master.c"
  6575 ;; Parameters:    Size  Location     Type
  6576 ;;		None
  6577 ;; Auto vars:     Size  Location     Type
  6578 ;;		None
  6579 ;; Return value:  Size  Location     Type
  6580 ;;                  1    wreg      unsigned char 
  6581 ;; Registers used:
  6582 ;;		wreg, status,2
  6583 ;; Tracked objects:
  6584 ;;		On entry : 0/0
  6585 ;;		On exit  : 0/0
  6586 ;;		Unchanged: 0/0
  6587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6592 ;;Total ram usage:        0 bytes
  6593 ;; Hardware stack levels used:    1
  6594 ;; This function calls:
  6595 ;;		Nothing
  6596 ;; This function is called by:
  6597 ;;		_I2C_Open
  6598 ;; This function uses a non-reentrant model
  6599 ;;
  6600                           
  6601                           
  6602                           ;psect for function _I2C_MasterOpen
  6603  053C                     _I2C_MasterOpen:	
  6604                           
  6605                           ;i2c_master.c: 545: if(!SSP1CON1bits.SSPEN)
  6606                           
  6607                           ;incstack = 0
  6608                           ; Regs used in _I2C_MasterOpen: [wreg+status,2]
  6609  053C  0024               	movlb	4	; select bank4
  6610  053D  1A95               	btfsc	21,5	;volatile
  6611  053E  0008               	return
  6612                           
  6613                           ;i2c_master.c: 546: {
  6614                           ;i2c_master.c: 547: SSP1STAT = 0x80;
  6615  053F  3080               	movlw	128
  6616  0540  0094               	movwf	20	;volatile
  6617                           
  6618                           ;i2c_master.c: 548: SSP1CON1 = 0x08;
  6619  0541  3008               	movlw	8
  6620  0542  0095               	movwf	21	;volatile
  6621                           
  6622                           ;i2c_master.c: 549: SSP1CON2 = 0x00;
  6623  0543  0196               	clrf	22	;volatile
  6624                           
  6625                           ;i2c_master.c: 550: SSP1ADD = 0x09;
  6626  0544  3009               	movlw	9
  6627  0545  0092               	movwf	18	;volatile
  6628                           
  6629                           ;i2c_master.c: 551: SSP1CON1bits.SSPEN = 1;
  6630  0546  1695               	bsf	21,5	;volatile
  6631                           
  6632                           ;i2c_master.c: 552: return 1;
  6633                           ;	Return value of _I2C_MasterOpen is never used
  6634  0547  0008               	return
  6635  0548                     __end_of_I2C_MasterOpen:	
  6636                           ;i2c_master.c: 553: }
  6637                           ;i2c_master.c: 554: return 0;
  6638                           ;	Return value of _I2C_MasterOpen is never used
  6639                           
  6640                           
  6641                           	psect	text27
  6642  05E6                     __ptext27:	
  6643 ;; *************** function _I2C_MasterWrite *****************
  6644 ;; Defined at:
  6645 ;;		line 251 in file "mcc_generated_files/i2c_master.c"
  6646 ;; Parameters:    Size  Location     Type
  6647 ;;		None
  6648 ;; Auto vars:     Size  Location     Type
  6649 ;;		None
  6650 ;; Return value:  Size  Location     Type
  6651 ;;                  1    wreg      enum E92
  6652 ;; Registers used:
  6653 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6654 ;; Tracked objects:
  6655 ;;		On entry : 0/0
  6656 ;;		On exit  : 0/0
  6657 ;;		Unchanged: 0/0
  6658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6663 ;;Total ram usage:        0 bytes
  6664 ;; Hardware stack levels used:    1
  6665 ;; Hardware stack levels required when called:    7
  6666 ;; This function calls:
  6667 ;;		_I2C_MasterOperation
  6668 ;; This function is called by:
  6669 ;;		_I2C_Write1ByteRegister
  6670 ;;		_I2C_Read1ByteRegister
  6671 ;;		_I2C_Read2ByteRegister
  6672 ;;		_I2C_Write2ByteRegister
  6673 ;;		_I2C_WriteNBytes
  6674 ;;		_I2C_ReadDataBlock
  6675 ;; This function uses a non-reentrant model
  6676 ;;
  6677                           
  6678                           
  6679                           ;psect for function _I2C_MasterWrite
  6680  05E6                     _I2C_MasterWrite:	
  6681                           
  6682                           ;i2c_master.c: 253: return I2C_MasterOperation(0);
  6683                           ;	Return value of _I2C_MasterWrite is never used
  6684                           
  6685                           ;incstack = 0
  6686                           ; Regs used in _I2C_MasterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6687  05E6  3000               	movlw	0
  6688  05E7  3184  2439         	fcall	_I2C_MasterOperation
  6689  05E9  0008               	return
  6690  05EA                     __end_of_I2C_MasterWrite:	
  6691                           
  6692                           	psect	text28
  6693  0439                     __ptext28:	
  6694 ;; *************** function _I2C_MasterOperation *****************
  6695 ;; Defined at:
  6696 ;;		line 224 in file "mcc_generated_files/i2c_master.c"
  6697 ;; Parameters:    Size  Location     Type
  6698 ;;  read            1    wreg     unsigned char 
  6699 ;; Auto vars:     Size  Location     Type
  6700 ;;  read            1    3[BANK0 ] unsigned char 
  6701 ;;  returnValue     1    4[BANK0 ] enum E92
  6702 ;; Return value:  Size  Location     Type
  6703 ;;                  1    wreg      enum E92
  6704 ;; Registers used:
  6705 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6706 ;; Tracked objects:
  6707 ;;		On entry : 0/0
  6708 ;;		On exit  : 0/0
  6709 ;;		Unchanged: 0/0
  6710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6712 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6713 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6714 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6715 ;;Total ram usage:        3 bytes
  6716 ;; Hardware stack levels used:    1
  6717 ;; Hardware stack levels required when called:    6
  6718 ;; This function calls:
  6719 ;;		_I2C_MasterStart
  6720 ;;		_I2C_Poller
  6721 ;; This function is called by:
  6722 ;;		_I2C_MasterWrite
  6723 ;;		_I2C_MasterRead
  6724 ;; This function uses a non-reentrant model
  6725 ;;
  6726                           
  6727                           
  6728                           ;psect for function _I2C_MasterOperation
  6729  0439                     _I2C_MasterOperation:	
  6730                           
  6731                           ;incstack = 0
  6732                           ; Regs used in _I2C_MasterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6733                           ;I2C_MasterOperation@read stored from wreg
  6734  0439  0020               	movlb	0	; select bank0
  6735  043A  00DB               	movwf	I2C_MasterOperation@read
  6736                           
  6737                           ;i2c_master.c: 226: i2c_error_t returnValue = I2C_BUSY;
  6738  043B  01DC               	clrf	I2C_MasterOperation@returnValue
  6739  043C  0ADC               	incf	I2C_MasterOperation@returnValue,f
  6740                           
  6741                           ;i2c_master.c: 227: if(!I2C_Status.busy)
  6742  043D  18BC               	btfsc	_I2C_Status+28,1
  6743  043E  2C50               	goto	i1l2504
  6744                           
  6745                           ;i2c_master.c: 228: {
  6746                           ;i2c_master.c: 229: I2C_Status.busy = 1;
  6747  043F  14BC               	bsf	_I2C_Status+28,1
  6748                           
  6749                           ;i2c_master.c: 230: returnValue = I2C_NOERR;
  6750  0440  01DC               	clrf	I2C_MasterOperation@returnValue
  6751                           
  6752                           ;i2c_master.c: 232: if(read)
  6753  0441  085B               	movf	I2C_MasterOperation@read,w
  6754  0442  1903               	btfsc	3,2
  6755  0443  2C47               	goto	i1l2498
  6756                           
  6757                           ;i2c_master.c: 233: {
  6758                           ;i2c_master.c: 234: I2C_Status.state = I2C_SEND_ADR_READ;
  6759  0444  01BA               	clrf	_I2C_Status+26
  6760  0445  0ABA               	incf	_I2C_Status+26,f
  6761                           
  6762                           ;i2c_master.c: 235: }
  6763  0446  2C4B               	goto	i1l2500
  6764  0447                     i1l2498:	
  6765                           
  6766                           ;i2c_master.c: 236: else
  6767                           ;i2c_master.c: 237: {
  6768                           ;i2c_master.c: 238: I2C_Status.state = I2C_SEND_ADR_WRITE;
  6769  0447  3002               	movlw	2
  6770  0448  00FD               	movwf	??_I2C_MasterOperation
  6771  0449  087D               	movf	??_I2C_MasterOperation,w
  6772  044A  00BA               	movwf	_I2C_Status+26
  6773  044B                     i1l2500:	
  6774                           
  6775                           ;i2c_master.c: 239: }
  6776                           ;i2c_master.c: 240: I2C_MasterStart();
  6777  044B  3186  262B  3184   	fcall	_I2C_MasterStart
  6778                           
  6779                           ;i2c_master.c: 241: I2C_Poller();
  6780  044E  3185  2569         	fcall	_I2C_Poller
  6781  0450                     i1l2504:	
  6782                           
  6783                           ;i2c_master.c: 242: }
  6784                           ;i2c_master.c: 243: return returnValue;
  6785  0450  0020               	movlb	0	; select bank0
  6786  0451  085C               	movf	I2C_MasterOperation@returnValue,w
  6787  0452  0008               	return
  6788  0453                     __end_of_I2C_MasterOperation:	
  6789                           
  6790                           	psect	text29
  6791  0569                     __ptext29:	
  6792 ;; *************** function _I2C_Poller *****************
  6793 ;; Defined at:
  6794 ;;		line 312 in file "mcc_generated_files/i2c_master.c"
  6795 ;; Parameters:    Size  Location     Type
  6796 ;;		None
  6797 ;; Auto vars:     Size  Location     Type
  6798 ;;		None
  6799 ;; Return value:  Size  Location     Type
  6800 ;;                  1    wreg      void 
  6801 ;; Registers used:
  6802 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6803 ;; Tracked objects:
  6804 ;;		On entry : 0/0
  6805 ;;		On exit  : 0/0
  6806 ;;		Unchanged: 0/0
  6807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6812 ;;Total ram usage:        0 bytes
  6813 ;; Hardware stack levels used:    1
  6814 ;; Hardware stack levels required when called:    5
  6815 ;; This function calls:
  6816 ;;		_I2C_MasterFsm
  6817 ;;		_I2C_MasterWaitForEvent
  6818 ;; This function is called by:
  6819 ;;		_I2C_MasterOperation
  6820 ;; This function uses a non-reentrant model
  6821 ;;
  6822                           
  6823                           
  6824                           ;psect for function _I2C_Poller
  6825  0569                     _I2C_Poller:	
  6826  0569                     i1l2470:	
  6827                           ;i2c_master.c: 314: while(I2C_Status.busy)
  6828                           
  6829                           ;incstack = 0
  6830                           ; Regs used in _I2C_Poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6831                           
  6832  0569  0020               	movlb	0	; select bank0
  6833  056A  1CBC               	btfss	_I2C_Status+28,1
  6834  056B  0008               	return
  6835                           
  6836                           ;i2c_master.c: 315: {
  6837                           ;i2c_master.c: 316: I2C_MasterWaitForEvent();
  6838  056C  3185  25EA  3185   	fcall	_I2C_MasterWaitForEvent
  6839                           
  6840                           ;i2c_master.c: 317: I2C_MasterFsm();
  6841  056F  3183  2386  3185   	fcall	_I2C_MasterFsm
  6842  0572  2D69               	goto	i1l2470
  6843  0573                     __end_of_I2C_Poller:	
  6844                           
  6845                           	psect	text30
  6846  05EA                     __ptext30:	
  6847 ;; *************** function _I2C_MasterWaitForEvent *****************
  6848 ;; Defined at:
  6849 ;;		line 650 in file "mcc_generated_files/i2c_master.c"
  6850 ;; Parameters:    Size  Location     Type
  6851 ;;		None
  6852 ;; Auto vars:     Size  Location     Type
  6853 ;;		None
  6854 ;; Return value:  Size  Location     Type
  6855 ;;                  1    wreg      void 
  6856 ;; Registers used:
  6857 ;;		None
  6858 ;; Tracked objects:
  6859 ;;		On entry : 0/0
  6860 ;;		On exit  : 0/0
  6861 ;;		Unchanged: 0/0
  6862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6866 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6867 ;;Total ram usage:        0 bytes
  6868 ;; Hardware stack levels used:    1
  6869 ;; This function calls:
  6870 ;;		Nothing
  6871 ;; This function is called by:
  6872 ;;		_I2C_Poller
  6873 ;; This function uses a non-reentrant model
  6874 ;;
  6875                           
  6876                           
  6877                           ;psect for function _I2C_MasterWaitForEvent
  6878  05EA                     _I2C_MasterWaitForEvent:	
  6879  05EA                     i1l544:	
  6880                           ;incstack = 0
  6881                           ; Regs used in _I2C_MasterWaitForEvent: []
  6882                           ;i2c_master.c: 652: while(1)
  6883                           
  6884                           
  6885                           ;i2c_master.c: 653: {
  6886                           ;i2c_master.c: 654: if(PIR1bits.SSP1IF)
  6887  05EA  0020               	movlb	0	; select bank0
  6888  05EB  1990               	btfsc	16,3	;volatile
  6889  05EC  0008               	return
  6890  05ED  2DEA               	goto	i1l544
  6891  05EE                     __end_of_I2C_MasterWaitForEvent:	
  6892                           ;i2c_master.c: 655: {
  6893                           ;i2c_master.c: 656: break;
  6894                           
  6895                           
  6896                           	psect	text31
  6897  0386                     __ptext31:	
  6898 ;; *************** function _I2C_MasterFsm *****************
  6899 ;; Defined at:
  6900 ;;		line 321 in file "mcc_generated_files/i2c_master.c"
  6901 ;; Parameters:    Size  Location     Type
  6902 ;;		None
  6903 ;; Auto vars:     Size  Location     Type
  6904 ;;		None
  6905 ;; Return value:  Size  Location     Type
  6906 ;;                  1    wreg      void 
  6907 ;; Registers used:
  6908 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6909 ;; Tracked objects:
  6910 ;;		On entry : 0/0
  6911 ;;		On exit  : 0/0
  6912 ;;		Unchanged: 0/0
  6913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6916 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6917 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6918 ;;Total ram usage:        3 bytes
  6919 ;; Hardware stack levels used:    1
  6920 ;; Hardware stack levels required when called:    4
  6921 ;; This function calls:
  6922 ;;		_I2C_DO_ADDRESS_NACK
  6923 ;;		_I2C_DO_IDLE
  6924 ;;		_I2C_DO_RCEN
  6925 ;;		_I2C_DO_RESET
  6926 ;;		_I2C_DO_RX
  6927 ;;		_I2C_DO_RX_ACK
  6928 ;;		_I2C_DO_RX_NACK_RESTART
  6929 ;;		_I2C_DO_RX_NACK_STOP
  6930 ;;		_I2C_DO_SEND_ADR_READ
  6931 ;;		_I2C_DO_SEND_ADR_WRITE
  6932 ;;		_I2C_DO_SEND_RESTART
  6933 ;;		_I2C_DO_SEND_RESTART_READ
  6934 ;;		_I2C_DO_SEND_RESTART_WRITE
  6935 ;;		_I2C_DO_SEND_STOP
  6936 ;;		_I2C_DO_TX
  6937 ;;		_I2C_DO_TX_EMPTY
  6938 ;;		_I2C_MasterClearIrq
  6939 ;;		_I2C_MasterIsNack
  6940 ;; This function is called by:
  6941 ;;		_I2C_Poller
  6942 ;; This function uses a non-reentrant model
  6943 ;;
  6944                           
  6945                           
  6946                           ;psect for function _I2C_MasterFsm
  6947  0386                     _I2C_MasterFsm:	
  6948                           
  6949                           ;i2c_master.c: 323: I2C_MasterClearIrq();
  6950                           
  6951                           ;incstack = 0
  6952                           ; Regs used in _I2C_MasterFsm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6953  0386  3186  2634  3183   	fcall	_I2C_MasterClearIrq
  6954                           
  6955                           ;i2c_master.c: 325: if(I2C_Status.addressNackCheck && I2C_MasterIsNack())
  6956  0389  0020               	movlb	0	; select bank0
  6957  038A  1C3C               	btfss	_I2C_Status+28,0
  6958  038B  2B97               	goto	i1l2460
  6959  038C  3185  25CD  3183   	fcall	_I2C_MasterIsNack
  6960  038F  3A00               	xorlw	0
  6961  0390  1903               	skipnz
  6962  0391  2B97               	goto	i1l2460
  6963                           
  6964                           ;i2c_master.c: 326: {
  6965                           ;i2c_master.c: 327: I2C_Status.state = I2C_ADDRESS_NACK;
  6966  0392  300F               	movlw	15
  6967  0393  0020               	movlb	0	; select bank0
  6968  0394  00D8               	movwf	??_I2C_MasterFsm
  6969  0395  0858               	movf	??_I2C_MasterFsm,w
  6970  0396  00BA               	movwf	_I2C_Status+26
  6971  0397                     i1l2460:	
  6972                           
  6973                           ;i2c_master.c: 328: }
  6974                           ;i2c_master.c: 329: I2C_Status.state = fsmStateTable[I2C_Status.state]();
  6975  0397  0020               	movlb	0	; select bank0
  6976  0398  083A               	movf	_I2C_Status+26,w
  6977  0399  00D8               	movwf	??_I2C_MasterFsm
  6978  039A  01D9               	clrf	??_I2C_MasterFsm+1
  6979  039B  35D8               	lslf	??_I2C_MasterFsm,f
  6980  039C  0DD9               	rlf	??_I2C_MasterFsm+1,f
  6981  039D  3019               	movlw	low (_fsmStateTable| (0+32768))
  6982  039E  0758               	addwf	??_I2C_MasterFsm,w
  6983  039F  0084               	movwf	4
  6984  03A0  3084               	movlw	high (_fsmStateTable| (0+32768))
  6985  03A1  3D59               	addwfc	??_I2C_MasterFsm+1,w
  6986  03A2  0085               	movwf	5
  6987  03A3  3F01               	moviw [1]fsr0
  6988  03A4  008A               	movwf	10
  6989  03A5  3F00               	moviw [0]fsr0
  6990  03A6  000A               	callw
  6991  03A7  3183               	pagesel	$
  6992  03A8  0020               	movlb	0	; select bank0
  6993  03A9  00DA               	movwf	??_I2C_MasterFsm+2
  6994  03AA  085A               	movf	??_I2C_MasterFsm+2,w
  6995  03AB  00BA               	movwf	_I2C_Status+26
  6996  03AC  0008               	return
  6997  03AD                     __end_of_I2C_MasterFsm:	
  6998                           
  6999                           	psect	text32
  7000  03F6                     __ptext32:	
  7001 ;; *************** function _I2C_DO_ADDRESS_NACK *****************
  7002 ;; Defined at:
  7003 ;;		line 500 in file "mcc_generated_files/i2c_master.c"
  7004 ;; Parameters:    Size  Location     Type
  7005 ;;		None
  7006 ;; Auto vars:     Size  Location     Type
  7007 ;;		None
  7008 ;; Return value:  Size  Location     Type
  7009 ;;                  1    wreg      enum E12103
  7010 ;; Registers used:
  7011 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7012 ;; Tracked objects:
  7013 ;;		On entry : 0/0
  7014 ;;		On exit  : 0/0
  7015 ;;		Unchanged: 0/0
  7016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7019 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7020 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7021 ;;Total ram usage:        1 bytes
  7022 ;; Hardware stack levels used:    1
  7023 ;; Hardware stack levels required when called:    3
  7024 ;; This function calls:
  7025 ;;		Absolute function
  7026 ;;		_I2C_CallbackReturnReset
  7027 ;;		_I2C_CallbackReturnStop
  7028 ;;		_I2C_DO_SEND_RESTART
  7029 ;;		_I2C_DO_SEND_STOP
  7030 ;;		_rd1RegCompleteHandler
  7031 ;;		_rd2RegCompleteHandler
  7032 ;;		_rdBlkRegCompleteHandler
  7033 ;;		_wr1RegCompleteHandler
  7034 ;;		_wr2RegCompleteHandler
  7035 ;; This function is called by:
  7036 ;;		_I2C_MasterFsm
  7037 ;; This function uses a non-reentrant model
  7038 ;;
  7039                           
  7040                           
  7041                           ;psect for function _I2C_DO_ADDRESS_NACK
  7042  03F6                     _I2C_DO_ADDRESS_NACK:	
  7043                           
  7044                           ;i2c_master.c: 502: I2C_Status.addressNackCheck = 0;
  7045                           
  7046                           ;incstack = 0
  7047                           ; Regs used in _I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7048  03F6  0020               	movlb	0	; select bank0
  7049  03F7  103C               	bcf	_I2C_Status+28,0
  7050                           
  7051                           ;i2c_master.c: 503: I2C_Status.error = I2C_FAIL;
  7052  03F8  3002               	movlw	2
  7053  03F9  00FA               	movwf	??_I2C_DO_ADDRESS_NACK
  7054  03FA  087A               	movf	??_I2C_DO_ADDRESS_NACK,w
  7055  03FB  00BB               	movwf	_I2C_Status+27
  7056                           
  7057                           ;i2c_master.c: 504: switch(I2C_Status.callbackTable[I2C_ADDR_NACK](I2C_Status.callbackPa
      +                          yload[I2C_ADDR_NACK]))
  7058  03FC  2C03               	goto	i1l2448
  7059  03FD                     i1l2438:	
  7060                           ;i2c_master.c: 505: {
  7061                           ;i2c_master.c: 506: case I2C_RESTART_READ:
  7062                           
  7063                           
  7064                           ;i2c_master.c: 507: case I2C_RESTART_WRITE:
  7065                           ;i2c_master.c: 508: return I2C_DO_SEND_RESTART();
  7066  03FD  3185  25FE         	fcall	_I2C_DO_SEND_RESTART
  7067  03FF  0008               	return
  7068  0400                     i1l2442:	
  7069                           ;i2c_master.c: 509: default:
  7070                           
  7071                           
  7072                           ;i2c_master.c: 510: return I2C_DO_SEND_STOP();
  7073  0400  3185  25FA         	fcall	_I2C_DO_SEND_STOP
  7074                           
  7075                           ;i2c_master.c: 511: }
  7076  0402  0008               	return
  7077  0403                     i1l2448:	
  7078  0403  0020               	movlb	0	; select bank0
  7079  0404  082E               	movf	low ((_I2C_Status| 0+14)),w
  7080  0405  00FA               	movwf	??_I2C_DO_ADDRESS_NACK
  7081  0406  087A               	movf	??_I2C_DO_ADDRESS_NACK,w
  7082  0407  00F9               	movwf	I2C_CallbackReturnReset@funPtr
  7083  0408  3004               	movlw	4
  7084  0409  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
  7085  040A  0086               	movwf	6
  7086  040B  0187               	clrf	7
  7087  040C  3F41               	moviw [1]fsr1
  7088  040D  008A               	movwf	10
  7089  040E  3F40               	moviw [0]fsr1
  7090  040F  000A               	callw
  7091  0410  3183               	pagesel	$
  7092                           
  7093                           ; Switch size 1, requested type "space"
  7094                           ; Number of cases is 2, Range of values is 2 to 3
  7095                           ; switch strategies available:
  7096                           ; Name         Instructions Cycles
  7097                           ; simple_byte            7     4 (average)
  7098                           ; direct_byte           13     9 (fixed)
  7099                           ; jumptable            263     9 (fixed)
  7100                           ;	Chosen strategy is simple_byte
  7101  0411  3A02               	xorlw	2	; case 2
  7102  0412  1903               	skipnz
  7103  0413  2BFD               	goto	i1l2438
  7104  0414  3A01               	xorlw	1	; case 3
  7105  0415  1903               	skipnz
  7106  0416  2BFD               	goto	i1l2438
  7107  0417  2C00               	goto	i1l2442
  7108  0418  0008               	return
  7109  0419                     __end_of_I2C_DO_ADDRESS_NACK:	
  7110                           
  7111                           	psect	text33
  7112  05D3                     __ptext33:	
  7113 ;; *************** function _I2C_DO_RESET *****************
  7114 ;; Defined at:
  7115 ;;		line 494 in file "mcc_generated_files/i2c_master.c"
  7116 ;; Parameters:    Size  Location     Type
  7117 ;;		None
  7118 ;; Auto vars:     Size  Location     Type
  7119 ;;		None
  7120 ;; Return value:  Size  Location     Type
  7121 ;;                  1    wreg      enum E12103
  7122 ;; Registers used:
  7123 ;;		wreg, status,2
  7124 ;; Tracked objects:
  7125 ;;		On entry : 0/0
  7126 ;;		On exit  : 0/0
  7127 ;;		Unchanged: 0/0
  7128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7133 ;;Total ram usage:        0 bytes
  7134 ;; Hardware stack levels used:    1
  7135 ;; This function calls:
  7136 ;;		Nothing
  7137 ;; This function is called by:
  7138 ;;		_I2C_MasterFsm
  7139 ;; This function uses a non-reentrant model
  7140 ;;
  7141                           
  7142                           
  7143                           ;psect for function _I2C_DO_RESET
  7144  05D3                     _I2C_DO_RESET:	
  7145                           
  7146                           ;i2c_master.c: 496: I2C_Status.busy = 0;
  7147                           
  7148                           ;incstack = 0
  7149                           ; Regs used in _I2C_DO_RESET: [wreg+status,2]
  7150  05D3  0020               	movlb	0	; select bank0
  7151  05D4  10BC               	bcf	_I2C_Status+28,1
  7152                           
  7153                           ;i2c_master.c: 497: I2C_Status.error = I2C_NOERR;
  7154  05D5  01BB               	clrf	_I2C_Status+27
  7155                           
  7156                           ;i2c_master.c: 498: return I2C_RESET;
  7157  05D6  300E               	movlw	14
  7158  05D7  0008               	return
  7159  05D8                     __end_of_I2C_DO_RESET:	
  7160                           
  7161                           	psect	text34
  7162  05EE                     __ptext34:	
  7163 ;; *************** function _I2C_DO_RX_NACK_RESTART *****************
  7164 ;; Defined at:
  7165 ;;		line 488 in file "mcc_generated_files/i2c_master.c"
  7166 ;; Parameters:    Size  Location     Type
  7167 ;;		None
  7168 ;; Auto vars:     Size  Location     Type
  7169 ;;		None
  7170 ;; Return value:  Size  Location     Type
  7171 ;;                  1    wreg      enum E12103
  7172 ;; Registers used:
  7173 ;;		wreg, status,2, status,0, pclath, cstack
  7174 ;; Tracked objects:
  7175 ;;		On entry : 0/0
  7176 ;;		On exit  : 0/0
  7177 ;;		Unchanged: 0/0
  7178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7182 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7183 ;;Total ram usage:        0 bytes
  7184 ;; Hardware stack levels used:    1
  7185 ;; Hardware stack levels required when called:    1
  7186 ;; This function calls:
  7187 ;;		_I2C_MasterSendNack
  7188 ;; This function is called by:
  7189 ;;		_I2C_DO_RX
  7190 ;;		_I2C_MasterFsm
  7191 ;; This function uses a non-reentrant model
  7192 ;;
  7193                           
  7194                           
  7195                           ;psect for function _I2C_DO_RX_NACK_RESTART
  7196  05EE                     _I2C_DO_RX_NACK_RESTART:	
  7197                           
  7198                           ;i2c_master.c: 490: I2C_MasterSendNack();
  7199                           
  7200                           ;incstack = 0
  7201                           ; Regs used in _I2C_DO_RX_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  7202  05EE  3186  260E         	fcall	_I2C_MasterSendNack
  7203                           
  7204                           ;i2c_master.c: 491: return I2C_SEND_RESTART;
  7205  05F0  3009               	movlw	9
  7206  05F1  0008               	return
  7207  05F2                     __end_of_I2C_DO_RX_NACK_RESTART:	
  7208                           
  7209                           	psect	text35
  7210  05F2                     __ptext35:	
  7211 ;; *************** function _I2C_DO_RX_NACK_STOP *****************
  7212 ;; Defined at:
  7213 ;;		line 482 in file "mcc_generated_files/i2c_master.c"
  7214 ;; Parameters:    Size  Location     Type
  7215 ;;		None
  7216 ;; Auto vars:     Size  Location     Type
  7217 ;;		None
  7218 ;; Return value:  Size  Location     Type
  7219 ;;                  1    wreg      enum E12103
  7220 ;; Registers used:
  7221 ;;		wreg, status,2, status,0, pclath, cstack
  7222 ;; Tracked objects:
  7223 ;;		On entry : 0/0
  7224 ;;		On exit  : 0/0
  7225 ;;		Unchanged: 0/0
  7226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7231 ;;Total ram usage:        0 bytes
  7232 ;; Hardware stack levels used:    1
  7233 ;; Hardware stack levels required when called:    1
  7234 ;; This function calls:
  7235 ;;		_I2C_MasterSendNack
  7236 ;; This function is called by:
  7237 ;;		_I2C_DO_RX
  7238 ;;		_I2C_MasterFsm
  7239 ;; This function uses a non-reentrant model
  7240 ;;
  7241                           
  7242                           
  7243                           ;psect for function _I2C_DO_RX_NACK_STOP
  7244  05F2                     _I2C_DO_RX_NACK_STOP:	
  7245                           
  7246                           ;i2c_master.c: 484: I2C_MasterSendNack();
  7247                           
  7248                           ;incstack = 0
  7249                           ; Regs used in _I2C_DO_RX_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  7250  05F2  3186  260E         	fcall	_I2C_MasterSendNack
  7251                           
  7252                           ;i2c_master.c: 485: return I2C_SEND_STOP;
  7253  05F4  300A               	movlw	10
  7254  05F5  0008               	return
  7255  05F6                     __end_of_I2C_DO_RX_NACK_STOP:	
  7256                           
  7257                           	psect	text36
  7258  05F6                     __ptext36:	
  7259 ;; *************** function _I2C_DO_RX_ACK *****************
  7260 ;; Defined at:
  7261 ;;		line 475 in file "mcc_generated_files/i2c_master.c"
  7262 ;; Parameters:    Size  Location     Type
  7263 ;;		None
  7264 ;; Auto vars:     Size  Location     Type
  7265 ;;		None
  7266 ;; Return value:  Size  Location     Type
  7267 ;;                  1    wreg      enum E12103
  7268 ;; Registers used:
  7269 ;;		wreg, status,2, status,0, pclath, cstack
  7270 ;; Tracked objects:
  7271 ;;		On entry : 0/0
  7272 ;;		On exit  : 0/0
  7273 ;;		Unchanged: 0/0
  7274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7279 ;;Total ram usage:        0 bytes
  7280 ;; Hardware stack levels used:    1
  7281 ;; Hardware stack levels required when called:    1
  7282 ;; This function calls:
  7283 ;;		_I2C_MasterSendAck
  7284 ;; This function is called by:
  7285 ;;		_I2C_MasterFsm
  7286 ;; This function uses a non-reentrant model
  7287 ;;
  7288                           
  7289                           
  7290                           ;psect for function _I2C_DO_RX_ACK
  7291  05F6                     _I2C_DO_RX_ACK:	
  7292                           
  7293                           ;i2c_master.c: 477: I2C_MasterSendAck();
  7294                           
  7295                           ;incstack = 0
  7296                           ; Regs used in _I2C_DO_RX_ACK: [wreg+status,2+status,0+pclath+cstack]
  7297  05F6  3186  260A         	fcall	_I2C_MasterSendAck
  7298                           
  7299                           ;i2c_master.c: 478: return I2C_RCEN;
  7300  05F8  3005               	movlw	5
  7301  05F9  0008               	return
  7302  05FA                     __end_of_I2C_DO_RX_ACK:	
  7303                           
  7304                           	psect	text37
  7305  05FA                     __ptext37:	
  7306 ;; *************** function _I2C_DO_SEND_STOP *****************
  7307 ;; Defined at:
  7308 ;;		line 469 in file "mcc_generated_files/i2c_master.c"
  7309 ;; Parameters:    Size  Location     Type
  7310 ;;		None
  7311 ;; Auto vars:     Size  Location     Type
  7312 ;;		None
  7313 ;; Return value:  Size  Location     Type
  7314 ;;                  1    wreg      enum E12103
  7315 ;; Registers used:
  7316 ;;		wreg, status,2, status,0, pclath, cstack
  7317 ;; Tracked objects:
  7318 ;;		On entry : 0/0
  7319 ;;		On exit  : 0/0
  7320 ;;		Unchanged: 0/0
  7321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7326 ;;Total ram usage:        0 bytes
  7327 ;; Hardware stack levels used:    1
  7328 ;; Hardware stack levels required when called:    1
  7329 ;; This function calls:
  7330 ;;		_I2C_MasterStop
  7331 ;; This function is called by:
  7332 ;;		_I2C_DO_TX
  7333 ;;		_I2C_DO_TX_EMPTY
  7334 ;;		_I2C_DO_ADDRESS_NACK
  7335 ;;		_I2C_MasterFsm
  7336 ;; This function uses a non-reentrant model
  7337 ;;
  7338                           
  7339                           
  7340                           ;psect for function _I2C_DO_SEND_STOP
  7341  05FA                     _I2C_DO_SEND_STOP:	
  7342                           
  7343                           ;i2c_master.c: 471: I2C_MasterStop();
  7344                           
  7345                           ;incstack = 0
  7346                           ; Regs used in _I2C_DO_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
  7347  05FA  3186  2625         	fcall	_I2C_MasterStop
  7348                           
  7349                           ;i2c_master.c: 472: return I2C_IDLE;
  7350  05FC  3000               	movlw	0
  7351  05FD  0008               	return
  7352  05FE                     __end_of_I2C_DO_SEND_STOP:	
  7353                           
  7354                           	psect	text38
  7355  05FE                     __ptext38:	
  7356 ;; *************** function _I2C_DO_SEND_RESTART *****************
  7357 ;; Defined at:
  7358 ;;		line 463 in file "mcc_generated_files/i2c_master.c"
  7359 ;; Parameters:    Size  Location     Type
  7360 ;;		None
  7361 ;; Auto vars:     Size  Location     Type
  7362 ;;		None
  7363 ;; Return value:  Size  Location     Type
  7364 ;;                  1    wreg      enum E12103
  7365 ;; Registers used:
  7366 ;;		wreg, status,2, status,0, pclath, cstack
  7367 ;; Tracked objects:
  7368 ;;		On entry : 0/0
  7369 ;;		On exit  : 0/0
  7370 ;;		Unchanged: 0/0
  7371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7376 ;;Total ram usage:        0 bytes
  7377 ;; Hardware stack levels used:    1
  7378 ;; Hardware stack levels required when called:    1
  7379 ;; This function calls:
  7380 ;;		_I2C_MasterEnableRestart
  7381 ;; This function is called by:
  7382 ;;		_I2C_DO_TX_EMPTY
  7383 ;;		_I2C_DO_ADDRESS_NACK
  7384 ;;		_I2C_MasterFsm
  7385 ;; This function uses a non-reentrant model
  7386 ;;
  7387                           
  7388                           
  7389                           ;psect for function _I2C_DO_SEND_RESTART
  7390  05FE                     _I2C_DO_SEND_RESTART:	
  7391                           
  7392                           ;i2c_master.c: 465: I2C_MasterEnableRestart();
  7393                           
  7394                           ;incstack = 0
  7395                           ; Regs used in _I2C_DO_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
  7396  05FE  3186  2628         	fcall	_I2C_MasterEnableRestart
  7397                           
  7398                           ;i2c_master.c: 466: return I2C_SEND_ADR_READ;
  7399  0600  3001               	movlw	1
  7400  0601  0008               	return
  7401  0602                     __end_of_I2C_DO_SEND_RESTART:	
  7402                           
  7403                           	psect	text39
  7404  0602                     __ptext39:	
  7405 ;; *************** function _I2C_DO_SEND_RESTART_WRITE *****************
  7406 ;; Defined at:
  7407 ;;		line 456 in file "mcc_generated_files/i2c_master.c"
  7408 ;; Parameters:    Size  Location     Type
  7409 ;;		None
  7410 ;; Auto vars:     Size  Location     Type
  7411 ;;		None
  7412 ;; Return value:  Size  Location     Type
  7413 ;;                  1    wreg      enum E12103
  7414 ;; Registers used:
  7415 ;;		wreg, status,2, status,0, pclath, cstack
  7416 ;; Tracked objects:
  7417 ;;		On entry : 0/0
  7418 ;;		On exit  : 0/0
  7419 ;;		Unchanged: 0/0
  7420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7424 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7425 ;;Total ram usage:        0 bytes
  7426 ;; Hardware stack levels used:    1
  7427 ;; Hardware stack levels required when called:    1
  7428 ;; This function calls:
  7429 ;;		_I2C_MasterEnableRestart
  7430 ;; This function is called by:
  7431 ;;		_I2C_DO_TX
  7432 ;;		_I2C_MasterFsm
  7433 ;; This function uses a non-reentrant model
  7434 ;;
  7435                           
  7436                           
  7437                           ;psect for function _I2C_DO_SEND_RESTART_WRITE
  7438  0602                     _I2C_DO_SEND_RESTART_WRITE:	
  7439                           
  7440                           ;i2c_master.c: 458: I2C_MasterEnableRestart();
  7441                           
  7442                           ;incstack = 0
  7443                           ; Regs used in _I2C_DO_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
  7444  0602  3186  2628         	fcall	_I2C_MasterEnableRestart
  7445                           
  7446                           ;i2c_master.c: 459: return I2C_SEND_ADR_WRITE;
  7447  0604  3002               	movlw	2
  7448  0605  0008               	return
  7449  0606                     __end_of_I2C_DO_SEND_RESTART_WRITE:	
  7450                           
  7451                           	psect	text40
  7452  0606                     __ptext40:	
  7453 ;; *************** function _I2C_DO_SEND_RESTART_READ *****************
  7454 ;; Defined at:
  7455 ;;		line 450 in file "mcc_generated_files/i2c_master.c"
  7456 ;; Parameters:    Size  Location     Type
  7457 ;;		None
  7458 ;; Auto vars:     Size  Location     Type
  7459 ;;		None
  7460 ;; Return value:  Size  Location     Type
  7461 ;;                  1    wreg      enum E12103
  7462 ;; Registers used:
  7463 ;;		wreg, status,2, status,0, pclath, cstack
  7464 ;; Tracked objects:
  7465 ;;		On entry : 0/0
  7466 ;;		On exit  : 0/0
  7467 ;;		Unchanged: 0/0
  7468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7473 ;;Total ram usage:        0 bytes
  7474 ;; Hardware stack levels used:    1
  7475 ;; Hardware stack levels required when called:    1
  7476 ;; This function calls:
  7477 ;;		_I2C_MasterEnableRestart
  7478 ;; This function is called by:
  7479 ;;		_I2C_DO_TX
  7480 ;;		_I2C_MasterFsm
  7481 ;; This function uses a non-reentrant model
  7482 ;;
  7483                           
  7484                           
  7485                           ;psect for function _I2C_DO_SEND_RESTART_READ
  7486  0606                     _I2C_DO_SEND_RESTART_READ:	
  7487                           
  7488                           ;i2c_master.c: 452: I2C_MasterEnableRestart();
  7489                           
  7490                           ;incstack = 0
  7491                           ; Regs used in _I2C_DO_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
  7492  0606  3186  2628         	fcall	_I2C_MasterEnableRestart
  7493                           
  7494                           ;i2c_master.c: 453: return I2C_SEND_ADR_READ;
  7495  0608  3001               	movlw	1
  7496  0609  0008               	return
  7497  060A                     __end_of_I2C_DO_SEND_RESTART_READ:	
  7498                           
  7499                           	psect	text41
  7500  05C7                     __ptext41:	
  7501 ;; *************** function _I2C_DO_RCEN *****************
  7502 ;; Defined at:
  7503 ;;		line 402 in file "mcc_generated_files/i2c_master.c"
  7504 ;; Parameters:    Size  Location     Type
  7505 ;;		None
  7506 ;; Auto vars:     Size  Location     Type
  7507 ;;		None
  7508 ;; Return value:  Size  Location     Type
  7509 ;;                  1    wreg      enum E12103
  7510 ;; Registers used:
  7511 ;;		wreg, status,2, status,0, pclath, cstack
  7512 ;; Tracked objects:
  7513 ;;		On entry : 0/0
  7514 ;;		On exit  : 0/0
  7515 ;;		Unchanged: 0/0
  7516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7520 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7521 ;;Total ram usage:        0 bytes
  7522 ;; Hardware stack levels used:    1
  7523 ;; Hardware stack levels required when called:    1
  7524 ;; This function calls:
  7525 ;;		_I2C_MasterStartRx
  7526 ;; This function is called by:
  7527 ;;		_I2C_MasterFsm
  7528 ;; This function uses a non-reentrant model
  7529 ;;
  7530                           
  7531                           
  7532                           ;psect for function _I2C_DO_RCEN
  7533  05C7                     _I2C_DO_RCEN:	
  7534                           
  7535                           ;i2c_master.c: 404: I2C_Status.addressNackCheck = 0;
  7536                           
  7537                           ;incstack = 0
  7538                           ; Regs used in _I2C_DO_RCEN: [wreg+status,2+status,0+pclath+cstack]
  7539  05C7  0020               	movlb	0	; select bank0
  7540  05C8  103C               	bcf	_I2C_Status+28,0
  7541                           
  7542                           ;i2c_master.c: 405: I2C_MasterStartRx();
  7543  05C9  3186  2622         	fcall	_I2C_MasterStartRx
  7544                           
  7545                           ;i2c_master.c: 406: return I2C_RX;
  7546  05CB  3004               	movlw	4
  7547  05CC  0008               	return
  7548  05CD                     __end_of_I2C_DO_RCEN:	
  7549                           
  7550                           	psect	text42
  7551  024A                     __ptext42:	
  7552 ;; *************** function _I2C_DO_RX *****************
  7553 ;; Defined at:
  7554 ;;		line 378 in file "mcc_generated_files/i2c_master.c"
  7555 ;; Parameters:    Size  Location     Type
  7556 ;;		None
  7557 ;; Auto vars:     Size  Location     Type
  7558 ;;		None
  7559 ;; Return value:  Size  Location     Type
  7560 ;;                  1    wreg      enum E12103
  7561 ;; Registers used:
  7562 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7563 ;; Tracked objects:
  7564 ;;		On entry : 0/0
  7565 ;;		On exit  : 0/0
  7566 ;;		Unchanged: 0/0
  7567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7570 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7571 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7572 ;;Total ram usage:        1 bytes
  7573 ;; Hardware stack levels used:    1
  7574 ;; Hardware stack levels required when called:    3
  7575 ;; This function calls:
  7576 ;;		Absolute function
  7577 ;;		_I2C_CallbackReturnReset
  7578 ;;		_I2C_CallbackReturnStop
  7579 ;;		_I2C_DO_RX_NACK_RESTART
  7580 ;;		_I2C_DO_RX_NACK_STOP
  7581 ;;		_I2C_MasterGetRxData
  7582 ;;		_I2C_MasterSendAck
  7583 ;;		_rd1RegCompleteHandler
  7584 ;;		_rd2RegCompleteHandler
  7585 ;;		_rdBlkRegCompleteHandler
  7586 ;;		_wr1RegCompleteHandler
  7587 ;;		_wr2RegCompleteHandler
  7588 ;; This function is called by:
  7589 ;;		_I2C_MasterFsm
  7590 ;; This function uses a non-reentrant model
  7591 ;;
  7592                           
  7593                           
  7594                           ;psect for function _I2C_DO_RX
  7595  024A                     _I2C_DO_RX:	
  7596                           
  7597                           ;i2c_master.c: 380: *I2C_Status.data_ptr++ = I2C_MasterGetRxData();
  7598                           
  7599                           ;incstack = 0
  7600                           ; Regs used in _I2C_DO_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7601  024A  3186  261F  3182   	fcall	_I2C_MasterGetRxData
  7602  024D  00FA               	movwf	??_I2C_DO_RX
  7603  024E  0020               	movlb	0	; select bank0
  7604  024F  0837               	movf	low ((_I2C_Status| 0+23)),w
  7605  0250  0086               	movwf	6
  7606  0251  0187               	clrf	7
  7607  0252  087A               	movf	??_I2C_DO_RX,w
  7608  0253  0081               	movwf	1
  7609  0254  3001               	movlw	1
  7610  0255  00FA               	movwf	??_I2C_DO_RX
  7611  0256  087A               	movf	??_I2C_DO_RX,w
  7612  0257  07B7               	addwf	low ((_I2C_Status| 0+23)),f
  7613                           
  7614                           ;i2c_master.c: 381: if(--I2C_Status.data_length)
  7615  0258  3001               	movlw	1
  7616  0259  02B8               	subwf	_I2C_Status+24,f
  7617  025A  3000               	movlw	0
  7618  025B  3BB9               	subwfb	_I2C_Status+25,f
  7619  025C  0838               	movf	_I2C_Status+24,w
  7620  025D  0439               	iorwf	_I2C_Status+25,w
  7621  025E  1903               	btfsc	3,2
  7622  025F  2A64               	goto	i1l403
  7623                           
  7624                           ;i2c_master.c: 382: {
  7625                           ;i2c_master.c: 383: I2C_MasterSendAck();
  7626  0260  3186  260A         	fcall	_I2C_MasterSendAck
  7627                           
  7628                           ;i2c_master.c: 384: return I2C_RCEN;
  7629  0262  3005               	movlw	5
  7630                           
  7631                           ;i2c_master.c: 385: }
  7632  0263  0008               	return
  7633  0264                     i1l403:	
  7634                           
  7635                           ;i2c_master.c: 386: else
  7636                           ;i2c_master.c: 387: {
  7637                           ;i2c_master.c: 388: I2C_Status.bufferFree = 1;
  7638  0264  15BC               	bsf	_I2C_Status+28,3
  7639                           
  7640                           ;i2c_master.c: 389: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
  7641  0265  2A6C               	goto	i1l2390
  7642  0266                     i1l2380:	
  7643                           ;i2c_master.c: 390: {
  7644                           ;i2c_master.c: 391: case I2C_RESTART_WRITE:
  7645                           
  7646                           
  7647                           ;i2c_master.c: 392: case I2C_RESTART_READ:
  7648                           ;i2c_master.c: 393: return I2C_DO_RX_NACK_RESTART();
  7649  0266  3185  25EE         	fcall	_I2C_DO_RX_NACK_RESTART
  7650  0268  0008               	return
  7651  0269                     i1l2384:	
  7652                           ;i2c_master.c: 395: case I2C_CONTINUE:
  7653                           
  7654                           ;i2c_master.c: 394: default:
  7655                           
  7656                           
  7657                           ;i2c_master.c: 396: case I2C_STOP:
  7658                           ;i2c_master.c: 397: return I2C_DO_RX_NACK_STOP();
  7659  0269  3185  25F2         	fcall	_I2C_DO_RX_NACK_STOP
  7660                           
  7661                           ;i2c_master.c: 398: }
  7662  026B  0008               	return
  7663  026C                     i1l2390:	
  7664  026C  0020               	movlb	0	; select bank0
  7665  026D  082C               	movf	low ((_I2C_Status| 0+12)),w
  7666  026E  00FA               	movwf	??_I2C_DO_RX
  7667  026F  087A               	movf	??_I2C_DO_RX,w
  7668  0270  00F9               	movwf	I2C_CallbackReturnReset@funPtr
  7669  0271  0821               	movf	_I2C_Status+1,w
  7670  0272  008A               	movwf	10
  7671  0273  0820               	movf	_I2C_Status,w
  7672  0274  000A               	callw
  7673  0275  3182               	pagesel	$
  7674                           
  7675                           ; Switch size 1, requested type "space"
  7676                           ; Number of cases is 4, Range of values is 1 to 4
  7677                           ; switch strategies available:
  7678                           ; Name         Instructions Cycles
  7679                           ; simple_byte           13     7 (average)
  7680                           ; direct_byte           17     9 (fixed)
  7681                           ; jumptable            263     9 (fixed)
  7682                           ;	Chosen strategy is simple_byte
  7683  0276  3A01               	xorlw	1	; case 1
  7684  0277  1903               	skipnz
  7685  0278  2A69               	goto	i1l2384
  7686  0279  3A03               	xorlw	3	; case 2
  7687  027A  1903               	skipnz
  7688  027B  2A66               	goto	i1l2380
  7689  027C  3A01               	xorlw	1	; case 3
  7690  027D  1903               	skipnz
  7691  027E  2A66               	goto	i1l2380
  7692  027F  3A07               	xorlw	7	; case 4
  7693  0280  1903               	skipnz
  7694  0281  2A69               	goto	i1l2384
  7695  0282  2A69               	goto	i1l2384
  7696  0283  0008               	return
  7697  0284                     __end_of_I2C_DO_RX:	
  7698                           
  7699                           	psect	text43
  7700  01C4                     __ptext43:	
  7701 ;; *************** function _I2C_DO_TX *****************
  7702 ;; Defined at:
  7703 ;;		line 354 in file "mcc_generated_files/i2c_master.c"
  7704 ;; Parameters:    Size  Location     Type
  7705 ;;		None
  7706 ;; Auto vars:     Size  Location     Type
  7707 ;;		None
  7708 ;; Return value:  Size  Location     Type
  7709 ;;                  1    wreg      enum E12103
  7710 ;; Registers used:
  7711 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7712 ;; Tracked objects:
  7713 ;;		On entry : 0/0
  7714 ;;		On exit  : 0/0
  7715 ;;		Unchanged: 0/0
  7716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7718 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7719 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7720 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7721 ;;Total ram usage:        3 bytes
  7722 ;; Hardware stack levels used:    1
  7723 ;; Hardware stack levels required when called:    3
  7724 ;; This function calls:
  7725 ;;		Absolute function
  7726 ;;		_I2C_CallbackReturnReset
  7727 ;;		_I2C_CallbackReturnStop
  7728 ;;		_I2C_DO_SEND_RESTART_READ
  7729 ;;		_I2C_DO_SEND_RESTART_WRITE
  7730 ;;		_I2C_DO_SEND_STOP
  7731 ;;		_I2C_MasterIsNack
  7732 ;;		_I2C_MasterSendTxData
  7733 ;;		_rd1RegCompleteHandler
  7734 ;;		_rd2RegCompleteHandler
  7735 ;;		_rdBlkRegCompleteHandler
  7736 ;;		_wr1RegCompleteHandler
  7737 ;;		_wr2RegCompleteHandler
  7738 ;; This function is called by:
  7739 ;;		_I2C_MasterFsm
  7740 ;; This function uses a non-reentrant model
  7741 ;;
  7742                           
  7743                           
  7744                           ;psect for function _I2C_DO_TX
  7745  01C4                     _I2C_DO_TX:	
  7746                           
  7747                           ;i2c_master.c: 356: if(I2C_MasterIsNack())
  7748                           
  7749                           ;incstack = 0
  7750                           ; Regs used in _I2C_DO_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7751  01C4  3185  25CD  3181   	fcall	_I2C_MasterIsNack
  7752  01C7  3A00               	xorlw	0
  7753  01C8  1D03               	btfss	3,2
  7754  01C9  29D4               	goto	i1l2354
  7755  01CA  29F0               	goto	i1l387
  7756  01CB                     i1l2340:	
  7757                           ;i2c_master.c: 359: {
  7758                           ;i2c_master.c: 360: case I2C_RESTART_READ:
  7759                           
  7760                           ;i2c_master.c: 357: {
  7761                           ;i2c_master.c: 358: switch(I2C_Status.callbackTable[I2C_DATA_NACK](I2C_Status.callbackPa
      +                          yload[I2C_DATA_NACK]))
  7762                           
  7763                           
  7764                           ;i2c_master.c: 361: return I2C_DO_SEND_RESTART_READ();
  7765  01CB  3186  2606         	fcall	_I2C_DO_SEND_RESTART_READ
  7766  01CD  0008               	return
  7767  01CE                     i1l2344:	
  7768                           ;i2c_master.c: 362: case I2C_RESTART_WRITE:
  7769                           
  7770                           
  7771                           ;i2c_master.c: 363: return I2C_DO_SEND_RESTART_WRITE();
  7772  01CE  3186  2602         	fcall	_I2C_DO_SEND_RESTART_WRITE
  7773  01D0  0008               	return
  7774  01D1                     i1l2348:	
  7775                           ;i2c_master.c: 365: case I2C_CONTINUE:
  7776                           
  7777                           ;i2c_master.c: 364: default:
  7778                           
  7779                           
  7780                           ;i2c_master.c: 366: case I2C_STOP:
  7781                           ;i2c_master.c: 367: return I2C_DO_SEND_STOP();
  7782  01D1  3185  25FA         	fcall	_I2C_DO_SEND_STOP
  7783                           
  7784                           ;i2c_master.c: 368: }
  7785  01D3  0008               	return
  7786  01D4                     i1l2354:	
  7787  01D4  0020               	movlb	0	; select bank0
  7788  01D5  082F               	movf	low ((_I2C_Status| 0+15)),w
  7789  01D6  00FA               	movwf	??_I2C_DO_TX
  7790  01D7  087A               	movf	??_I2C_DO_TX,w
  7791  01D8  00F9               	movwf	I2C_CallbackReturnReset@funPtr
  7792  01D9  3006               	movlw	6
  7793  01DA  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
  7794  01DB  0086               	movwf	6
  7795  01DC  0187               	clrf	7
  7796  01DD  3F41               	moviw [1]fsr1
  7797  01DE  008A               	movwf	10
  7798  01DF  3F40               	moviw [0]fsr1
  7799  01E0  000A               	callw
  7800  01E1  3181               	pagesel	$
  7801                           
  7802                           ; Switch size 1, requested type "space"
  7803                           ; Number of cases is 4, Range of values is 1 to 4
  7804                           ; switch strategies available:
  7805                           ; Name         Instructions Cycles
  7806                           ; simple_byte           13     7 (average)
  7807                           ; direct_byte           17     9 (fixed)
  7808                           ; jumptable            263     9 (fixed)
  7809                           ;	Chosen strategy is simple_byte
  7810  01E2  3A01               	xorlw	1	; case 1
  7811  01E3  1903               	skipnz
  7812  01E4  29D1               	goto	i1l2348
  7813  01E5  3A03               	xorlw	3	; case 2
  7814  01E6  1903               	skipnz
  7815  01E7  29CB               	goto	i1l2340
  7816  01E8  3A01               	xorlw	1	; case 3
  7817  01E9  1903               	skipnz
  7818  01EA  29CE               	goto	i1l2344
  7819  01EB  3A07               	xorlw	7	; case 4
  7820  01EC  1903               	skipnz
  7821  01ED  29D1               	goto	i1l2348
  7822  01EE  29D1               	goto	i1l2348
  7823                           
  7824                           ;i2c_master.c: 369: }
  7825  01EF  0008               	return
  7826  01F0                     i1l387:	
  7827                           
  7828                           ;i2c_master.c: 370: else
  7829                           ;i2c_master.c: 371: {
  7830                           ;i2c_master.c: 372: I2C_Status.addressNackCheck = 0;
  7831  01F0  0020               	movlb	0	; select bank0
  7832  01F1  103C               	bcf	_I2C_Status+28,0
  7833                           
  7834                           ;i2c_master.c: 373: I2C_MasterSendTxData(*I2C_Status.data_ptr++);
  7835  01F2  3017               	movlw	23
  7836  01F3  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
  7837  01F4  0086               	movwf	6
  7838  01F5  0187               	clrf	7
  7839  01F6  3F40               	moviw [0]fsr1
  7840  01F7  0084               	movwf	4
  7841  01F8  0185               	clrf	5
  7842  01F9  0A81               	incf	1,f
  7843  01FA  0800               	movf	0,w
  7844  01FB  3185  25DD  3181   	fcall	_I2C_MasterSendTxData
  7845                           
  7846                           ;i2c_master.c: 374: return (--I2C_Status.data_length)?I2C_TX:I2C_TX_EMPTY;
  7847  01FE  3001               	movlw	1
  7848  01FF  0020               	movlb	0	; select bank0
  7849  0200  02B8               	subwf	_I2C_Status+24,f
  7850  0201  3000               	movlw	0
  7851  0202  3BB9               	subwfb	_I2C_Status+25,f
  7852  0203  0838               	movf	_I2C_Status+24,w
  7853  0204  0439               	iorwf	_I2C_Status+25,w
  7854  0205  1D03               	btfss	3,2
  7855  0206  2A09               	goto	i1l2362
  7856  0207  3006               	movlw	6
  7857  0208  2A0A               	goto	L1
  7858  0209                     i1l2362:	
  7859  0209  3003               	movlw	3
  7860  020A                     L1:	
  7861  020A  00FB               	movwf	_I2C_DO_TX$794
  7862  020B  3000               	movlw	0
  7863  020C  00FC               	movwf	_I2C_DO_TX$794+1
  7864  020D  087B               	movf	_I2C_DO_TX$794,w
  7865  020E  0008               	return
  7866  020F                     __end_of_I2C_DO_TX:	
  7867                           
  7868                           	psect	text44
  7869  059C                     __ptext44:	
  7870 ;; *************** function _I2C_DO_SEND_ADR_WRITE *****************
  7871 ;; Defined at:
  7872 ;;		line 347 in file "mcc_generated_files/i2c_master.c"
  7873 ;; Parameters:    Size  Location     Type
  7874 ;;		None
  7875 ;; Auto vars:     Size  Location     Type
  7876 ;;		None
  7877 ;; Return value:  Size  Location     Type
  7878 ;;                  1    wreg      enum E12103
  7879 ;; Registers used:
  7880 ;;		wreg, status,2, status,0, pclath, cstack
  7881 ;; Tracked objects:
  7882 ;;		On entry : 0/0
  7883 ;;		On exit  : 0/0
  7884 ;;		Unchanged: 0/0
  7885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7889 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7890 ;;Total ram usage:        0 bytes
  7891 ;; Hardware stack levels used:    1
  7892 ;; Hardware stack levels required when called:    1
  7893 ;; This function calls:
  7894 ;;		_I2C_MasterSendTxData
  7895 ;; This function is called by:
  7896 ;;		_I2C_MasterFsm
  7897 ;; This function uses a non-reentrant model
  7898 ;;
  7899                           
  7900                           
  7901                           ;psect for function _I2C_DO_SEND_ADR_WRITE
  7902  059C                     _I2C_DO_SEND_ADR_WRITE:	
  7903                           
  7904                           ;i2c_master.c: 349: I2C_Status.addressNackCheck = 1;
  7905                           
  7906                           ;incstack = 0
  7907                           ; Regs used in _I2C_DO_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
  7908  059C  0020               	movlb	0	; select bank0
  7909  059D  143C               	bsf	_I2C_Status+28,0
  7910                           
  7911                           ;i2c_master.c: 350: I2C_MasterSendTxData(I2C_Status.address << 1);
  7912  059E  3536               	lslf	_I2C_Status+22,w
  7913  059F  3185  25DD         	fcall	_I2C_MasterSendTxData
  7914                           
  7915                           ;i2c_master.c: 351: return I2C_TX;
  7916  05A1  3003               	movlw	3
  7917  05A2  0008               	return
  7918  05A3                     __end_of_I2C_DO_SEND_ADR_WRITE:	
  7919                           
  7920                           	psect	text45
  7921  0585                     __ptext45:	
  7922 ;; *************** function _I2C_DO_SEND_ADR_READ *****************
  7923 ;; Defined at:
  7924 ;;		line 340 in file "mcc_generated_files/i2c_master.c"
  7925 ;; Parameters:    Size  Location     Type
  7926 ;;		None
  7927 ;; Auto vars:     Size  Location     Type
  7928 ;;		None
  7929 ;; Return value:  Size  Location     Type
  7930 ;;                  1    wreg      enum E12103
  7931 ;; Registers used:
  7932 ;;		wreg, status,2, status,0, pclath, cstack
  7933 ;; Tracked objects:
  7934 ;;		On entry : 0/0
  7935 ;;		On exit  : 0/0
  7936 ;;		Unchanged: 0/0
  7937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7941 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7942 ;;Total ram usage:        0 bytes
  7943 ;; Hardware stack levels used:    1
  7944 ;; Hardware stack levels required when called:    1
  7945 ;; This function calls:
  7946 ;;		_I2C_MasterSendTxData
  7947 ;; This function is called by:
  7948 ;;		_I2C_MasterFsm
  7949 ;; This function uses a non-reentrant model
  7950 ;;
  7951                           
  7952                           
  7953                           ;psect for function _I2C_DO_SEND_ADR_READ
  7954  0585                     _I2C_DO_SEND_ADR_READ:	
  7955                           
  7956                           ;i2c_master.c: 342: I2C_Status.addressNackCheck = 1;
  7957                           
  7958                           ;incstack = 0
  7959                           ; Regs used in _I2C_DO_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
  7960  0585  0020               	movlb	0	; select bank0
  7961  0586  143C               	bsf	_I2C_Status+28,0
  7962                           
  7963                           ;i2c_master.c: 343: I2C_MasterSendTxData(I2C_Status.address << 1 | 1);
  7964  0587  1403               	setc
  7965  0588  0D36               	rlf	_I2C_Status+22,w
  7966  0589  3185  25DD         	fcall	_I2C_MasterSendTxData
  7967                           
  7968                           ;i2c_master.c: 344: return I2C_RCEN;
  7969  058B  3005               	movlw	5
  7970  058C  0008               	return
  7971  058D                     __end_of_I2C_DO_SEND_ADR_READ:	
  7972                           
  7973                           	psect	text46
  7974  05D8                     __ptext46:	
  7975 ;; *************** function _I2C_DO_IDLE *****************
  7976 ;; Defined at:
  7977 ;;		line 333 in file "mcc_generated_files/i2c_master.c"
  7978 ;; Parameters:    Size  Location     Type
  7979 ;;		None
  7980 ;; Auto vars:     Size  Location     Type
  7981 ;;		None
  7982 ;; Return value:  Size  Location     Type
  7983 ;;                  1    wreg      enum E12103
  7984 ;; Registers used:
  7985 ;;		wreg, status,2
  7986 ;; Tracked objects:
  7987 ;;		On entry : 0/0
  7988 ;;		On exit  : 0/0
  7989 ;;		Unchanged: 0/0
  7990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7994 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7995 ;;Total ram usage:        0 bytes
  7996 ;; Hardware stack levels used:    1
  7997 ;; This function calls:
  7998 ;;		Nothing
  7999 ;; This function is called by:
  8000 ;;		_I2C_MasterFsm
  8001 ;; This function uses a non-reentrant model
  8002 ;;
  8003                           
  8004                           
  8005                           ;psect for function _I2C_DO_IDLE
  8006  05D8                     _I2C_DO_IDLE:	
  8007                           
  8008                           ;i2c_master.c: 335: I2C_Status.busy = 0;
  8009                           
  8010                           ;incstack = 0
  8011                           ; Regs used in _I2C_DO_IDLE: [wreg+status,2]
  8012  05D8  0020               	movlb	0	; select bank0
  8013  05D9  10BC               	bcf	_I2C_Status+28,1
  8014                           
  8015                           ;i2c_master.c: 336: I2C_Status.error = I2C_NOERR;
  8016  05DA  01BB               	clrf	_I2C_Status+27
  8017                           
  8018                           ;i2c_master.c: 337: return I2C_RESET;
  8019  05DB  300E               	movlw	14
  8020  05DC  0008               	return
  8021  05DD                     __end_of_I2C_DO_IDLE:	
  8022                           
  8023                           	psect	text47
  8024  03AD                     __ptext47:	
  8025 ;; *************** function _I2C_DO_TX_EMPTY *****************
  8026 ;; Defined at:
  8027 ;;		line 409 in file "mcc_generated_files/i2c_master.c"
  8028 ;; Parameters:    Size  Location     Type
  8029 ;;		None
  8030 ;; Auto vars:     Size  Location     Type
  8031 ;;		None
  8032 ;; Return value:  Size  Location     Type
  8033 ;;                  1    wreg      enum E12103
  8034 ;; Registers used:
  8035 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8036 ;; Tracked objects:
  8037 ;;		On entry : 0/0
  8038 ;;		On exit  : 0/0
  8039 ;;		Unchanged: 0/0
  8040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8043 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8044 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8045 ;;Total ram usage:        1 bytes
  8046 ;; Hardware stack levels used:    1
  8047 ;; Hardware stack levels required when called:    3
  8048 ;; This function calls:
  8049 ;;		Absolute function
  8050 ;;		_I2C_CallbackReturnReset
  8051 ;;		_I2C_CallbackReturnStop
  8052 ;;		_I2C_DO_SEND_RESTART
  8053 ;;		_I2C_DO_SEND_STOP
  8054 ;;		_I2C_MasterSetIrq
  8055 ;;		_rd1RegCompleteHandler
  8056 ;;		_rd2RegCompleteHandler
  8057 ;;		_rdBlkRegCompleteHandler
  8058 ;;		_wr1RegCompleteHandler
  8059 ;;		_wr2RegCompleteHandler
  8060 ;; This function is called by:
  8061 ;;		_I2C_MasterFsm
  8062 ;; This function uses a non-reentrant model
  8063 ;;
  8064                           
  8065                           
  8066                           ;psect for function _I2C_DO_TX_EMPTY
  8067  03AD                     _I2C_DO_TX_EMPTY:	
  8068                           
  8069                           ;i2c_master.c: 411: I2C_Status.bufferFree = 1;
  8070                           
  8071                           ;incstack = 0
  8072                           ; Regs used in _I2C_DO_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8073  03AD  0020               	movlb	0	; select bank0
  8074  03AE  15BC               	bsf	_I2C_Status+28,3
  8075                           
  8076                           ;i2c_master.c: 412: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
  8077  03AF  2BBA               	goto	i1l2418
  8078  03B0                     i1l2402:	
  8079                           ;i2c_master.c: 413: {
  8080                           ;i2c_master.c: 414: case I2C_RESTART_READ:
  8081                           
  8082                           
  8083                           ;i2c_master.c: 415: case I2C_RESTART_WRITE:
  8084                           ;i2c_master.c: 416: return I2C_DO_SEND_RESTART();
  8085  03B0  3185  25FE         	fcall	_I2C_DO_SEND_RESTART
  8086  03B2  0008               	return
  8087  03B3                     i1l2406:	
  8088                           ;i2c_master.c: 417: case I2C_CONTINUE:
  8089                           
  8090                           
  8091                           ;i2c_master.c: 418: I2C_MasterSetIrq();
  8092  03B3  3186  261C         	fcall	_I2C_MasterSetIrq
  8093                           
  8094                           ;i2c_master.c: 419: return I2C_TX;
  8095  03B5  3003               	movlw	3
  8096  03B6  0008               	return
  8097  03B7                     i1l2412:	
  8098                           ;i2c_master.c: 421: case I2C_STOP:
  8099                           
  8100                           ;i2c_master.c: 420: default:
  8101                           
  8102                           
  8103                           ;i2c_master.c: 422: return I2C_DO_SEND_STOP();
  8104  03B7  3185  25FA         	fcall	_I2C_DO_SEND_STOP
  8105                           
  8106                           ;i2c_master.c: 423: }
  8107  03B9  0008               	return
  8108  03BA                     i1l2418:	
  8109  03BA  0020               	movlb	0	; select bank0
  8110  03BB  082C               	movf	low ((_I2C_Status| 0+12)),w
  8111  03BC  00FA               	movwf	??_I2C_DO_TX_EMPTY
  8112  03BD  087A               	movf	??_I2C_DO_TX_EMPTY,w
  8113  03BE  00F9               	movwf	I2C_CallbackReturnReset@funPtr
  8114  03BF  0821               	movf	_I2C_Status+1,w
  8115  03C0  008A               	movwf	10
  8116  03C1  0820               	movf	_I2C_Status,w
  8117  03C2  000A               	callw
  8118  03C3  3183               	pagesel	$
  8119                           
  8120                           ; Switch size 1, requested type "space"
  8121                           ; Number of cases is 4, Range of values is 1 to 4
  8122                           ; switch strategies available:
  8123                           ; Name         Instructions Cycles
  8124                           ; simple_byte           13     7 (average)
  8125                           ; direct_byte           17     9 (fixed)
  8126                           ; jumptable            263     9 (fixed)
  8127                           ;	Chosen strategy is simple_byte
  8128  03C4  3A01               	xorlw	1	; case 1
  8129  03C5  1903               	skipnz
  8130  03C6  2BB7               	goto	i1l2412
  8131  03C7  3A03               	xorlw	3	; case 2
  8132  03C8  1903               	skipnz
  8133  03C9  2BB0               	goto	i1l2402
  8134  03CA  3A01               	xorlw	1	; case 3
  8135  03CB  1903               	skipnz
  8136  03CC  2BB0               	goto	i1l2402
  8137  03CD  3A07               	xorlw	7	; case 4
  8138  03CE  1903               	skipnz
  8139  03CF  2BB3               	goto	i1l2406
  8140  03D0  2BB7               	goto	i1l2412
  8141  03D1  0008               	return
  8142  03D2                     __end_of_I2C_DO_TX_EMPTY:	
  8143                           
  8144                           	psect	text48
  8145  061C                     __ptext48:	
  8146 ;; *************** function _I2C_MasterSetIrq *****************
  8147 ;; Defined at:
  8148 ;;		line 645 in file "mcc_generated_files/i2c_master.c"
  8149 ;; Parameters:    Size  Location     Type
  8150 ;;		None
  8151 ;; Auto vars:     Size  Location     Type
  8152 ;;		None
  8153 ;; Return value:  Size  Location     Type
  8154 ;;                  1    wreg      void 
  8155 ;; Registers used:
  8156 ;;		None
  8157 ;; Tracked objects:
  8158 ;;		On entry : 0/0
  8159 ;;		On exit  : 0/0
  8160 ;;		Unchanged: 0/0
  8161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8165 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8166 ;;Total ram usage:        0 bytes
  8167 ;; Hardware stack levels used:    1
  8168 ;; This function calls:
  8169 ;;		Nothing
  8170 ;; This function is called by:
  8171 ;;		_I2C_DO_TX_EMPTY
  8172 ;; This function uses a non-reentrant model
  8173 ;;
  8174                           
  8175                           
  8176                           ;psect for function _I2C_MasterSetIrq
  8177  061C                     _I2C_MasterSetIrq:	
  8178                           
  8179                           ;i2c_master.c: 647: PIR1bits.SSP1IF = 1;
  8180                           
  8181                           ;incstack = 0
  8182                           ; Regs used in _I2C_MasterSetIrq: []
  8183  061C  0020               	movlb	0	; select bank0
  8184  061D  1590               	bsf	16,3	;volatile
  8185  061E  0008               	return
  8186  061F                     __end_of_I2C_MasterSetIrq:	
  8187                           
  8188                           	psect	text49
  8189  05CD                     __ptext49:	
  8190 ;; *************** function _I2C_MasterIsNack *****************
  8191 ;; Defined at:
  8192 ;;		line 598 in file "mcc_generated_files/i2c_master.c"
  8193 ;; Parameters:    Size  Location     Type
  8194 ;;		None
  8195 ;; Auto vars:     Size  Location     Type
  8196 ;;		None
  8197 ;; Return value:  Size  Location     Type
  8198 ;;                  1    wreg      unsigned char 
  8199 ;; Registers used:
  8200 ;;		wreg, status,2, status,0
  8201 ;; Tracked objects:
  8202 ;;		On entry : 0/0
  8203 ;;		On exit  : 0/0
  8204 ;;		Unchanged: 0/0
  8205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8209 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8210 ;;Total ram usage:        0 bytes
  8211 ;; Hardware stack levels used:    1
  8212 ;; This function calls:
  8213 ;;		Nothing
  8214 ;; This function is called by:
  8215 ;;		_I2C_MasterFsm
  8216 ;;		_I2C_DO_TX
  8217 ;; This function uses a non-reentrant model
  8218 ;;
  8219                           
  8220                           
  8221                           ;psect for function _I2C_MasterIsNack
  8222  05CD                     _I2C_MasterIsNack:	
  8223                           
  8224                           ;i2c_master.c: 600: return SSP1CON2bits.ACKSTAT;
  8225                           
  8226                           ;incstack = 0
  8227                           ; Regs used in _I2C_MasterIsNack: [wreg+status,2+status,0]
  8228  05CD  0024               	movlb	4	; select bank4
  8229  05CE  0E16               	swapf	22,w	;volatile
  8230  05CF  0C89               	rrf	9,f
  8231  05D0  0C89               	rrf	9,f
  8232  05D1  3901               	andlw	1
  8233  05D2  0008               	return
  8234  05D3                     __end_of_I2C_MasterIsNack:	
  8235                           
  8236                           	psect	text50
  8237  05DD                     __ptext50:	
  8238 ;; *************** function _I2C_MasterSendTxData *****************
  8239 ;; Defined at:
  8240 ;;		line 568 in file "mcc_generated_files/i2c_master.c"
  8241 ;; Parameters:    Size  Location     Type
  8242 ;;  data            1    wreg     unsigned char 
  8243 ;; Auto vars:     Size  Location     Type
  8244 ;;  data            1    0[COMMON] unsigned char 
  8245 ;; Return value:  Size  Location     Type
  8246 ;;                  1    wreg      void 
  8247 ;; Registers used:
  8248 ;;		wreg
  8249 ;; Tracked objects:
  8250 ;;		On entry : 0/0
  8251 ;;		On exit  : 0/0
  8252 ;;		Unchanged: 0/0
  8253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8255 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8257 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8258 ;;Total ram usage:        1 bytes
  8259 ;; Hardware stack levels used:    1
  8260 ;; This function calls:
  8261 ;;		Nothing
  8262 ;; This function is called by:
  8263 ;;		_I2C_DO_SEND_ADR_READ
  8264 ;;		_I2C_DO_SEND_ADR_WRITE
  8265 ;;		_I2C_DO_TX
  8266 ;; This function uses a non-reentrant model
  8267 ;;
  8268                           
  8269                           
  8270                           ;psect for function _I2C_MasterSendTxData
  8271  05DD                     _I2C_MasterSendTxData:	
  8272                           
  8273                           ;incstack = 0
  8274                           ; Regs used in _I2C_MasterSendTxData: [wreg]
  8275                           ;I2C_MasterSendTxData@data stored from wreg
  8276  05DD  00F0               	movwf	I2C_MasterSendTxData@data
  8277                           
  8278                           ;i2c_master.c: 570: SSP1BUF = data;
  8279  05DE  0870               	movf	I2C_MasterSendTxData@data,w
  8280  05DF  0024               	movlb	4	; select bank4
  8281  05E0  0091               	movwf	17	;volatile
  8282  05E1  0008               	return
  8283  05E2                     __end_of_I2C_MasterSendTxData:	
  8284                           
  8285                           	psect	text51
  8286  060A                     __ptext51:	
  8287 ;; *************** function _I2C_MasterSendAck *****************
  8288 ;; Defined at:
  8289 ;;		line 603 in file "mcc_generated_files/i2c_master.c"
  8290 ;; Parameters:    Size  Location     Type
  8291 ;;		None
  8292 ;; Auto vars:     Size  Location     Type
  8293 ;;		None
  8294 ;; Return value:  Size  Location     Type
  8295 ;;                  1    wreg      void 
  8296 ;; Registers used:
  8297 ;;		None
  8298 ;; Tracked objects:
  8299 ;;		On entry : 0/0
  8300 ;;		On exit  : 0/0
  8301 ;;		Unchanged: 0/0
  8302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8306 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8307 ;;Total ram usage:        0 bytes
  8308 ;; Hardware stack levels used:    1
  8309 ;; This function calls:
  8310 ;;		Nothing
  8311 ;; This function is called by:
  8312 ;;		_I2C_DO_RX
  8313 ;;		_I2C_DO_RX_ACK
  8314 ;; This function uses a non-reentrant model
  8315 ;;
  8316                           
  8317                           
  8318                           ;psect for function _I2C_MasterSendAck
  8319  060A                     _I2C_MasterSendAck:	
  8320                           
  8321                           ;i2c_master.c: 605: SSP1CON2bits.ACKDT = 0;
  8322                           
  8323                           ;incstack = 0
  8324                           ; Regs used in _I2C_MasterSendAck: []
  8325  060A  0024               	movlb	4	; select bank4
  8326  060B  1296               	bcf	22,5	;volatile
  8327                           
  8328                           ;i2c_master.c: 606: SSP1CON2bits.ACKEN = 1;
  8329  060C  1616               	bsf	22,4	;volatile
  8330  060D  0008               	return
  8331  060E                     __end_of_I2C_MasterSendAck:	
  8332                           
  8333                           	psect	text52
  8334  061F                     __ptext52:	
  8335 ;; *************** function _I2C_MasterGetRxData *****************
  8336 ;; Defined at:
  8337 ;;		line 563 in file "mcc_generated_files/i2c_master.c"
  8338 ;; Parameters:    Size  Location     Type
  8339 ;;		None
  8340 ;; Auto vars:     Size  Location     Type
  8341 ;;		None
  8342 ;; Return value:  Size  Location     Type
  8343 ;;                  1    wreg      unsigned char 
  8344 ;; Registers used:
  8345 ;;		wreg
  8346 ;; Tracked objects:
  8347 ;;		On entry : 0/0
  8348 ;;		On exit  : 0/0
  8349 ;;		Unchanged: 0/0
  8350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8354 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8355 ;;Total ram usage:        0 bytes
  8356 ;; Hardware stack levels used:    1
  8357 ;; This function calls:
  8358 ;;		Nothing
  8359 ;; This function is called by:
  8360 ;;		_I2C_DO_RX
  8361 ;; This function uses a non-reentrant model
  8362 ;;
  8363                           
  8364                           
  8365                           ;psect for function _I2C_MasterGetRxData
  8366  061F                     _I2C_MasterGetRxData:	
  8367                           
  8368                           ;i2c_master.c: 565: return SSP1BUF;
  8369                           
  8370                           ;incstack = 0
  8371                           ; Regs used in _I2C_MasterGetRxData: [wreg]
  8372  061F  0024               	movlb	4	; select bank4
  8373  0620  0811               	movf	17,w	;volatile
  8374  0621  0008               	return
  8375  0622                     __end_of_I2C_MasterGetRxData:	
  8376                           
  8377                           	psect	text53
  8378  060E                     __ptext53:	
  8379 ;; *************** function _I2C_MasterSendNack *****************
  8380 ;; Defined at:
  8381 ;;		line 609 in file "mcc_generated_files/i2c_master.c"
  8382 ;; Parameters:    Size  Location     Type
  8383 ;;		None
  8384 ;; Auto vars:     Size  Location     Type
  8385 ;;		None
  8386 ;; Return value:  Size  Location     Type
  8387 ;;                  1    wreg      void 
  8388 ;; Registers used:
  8389 ;;		None
  8390 ;; Tracked objects:
  8391 ;;		On entry : 0/0
  8392 ;;		On exit  : 0/0
  8393 ;;		Unchanged: 0/0
  8394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8399 ;;Total ram usage:        0 bytes
  8400 ;; Hardware stack levels used:    1
  8401 ;; This function calls:
  8402 ;;		Nothing
  8403 ;; This function is called by:
  8404 ;;		_I2C_DO_RX_NACK_STOP
  8405 ;;		_I2C_DO_RX_NACK_RESTART
  8406 ;; This function uses a non-reentrant model
  8407 ;;
  8408                           
  8409                           
  8410                           ;psect for function _I2C_MasterSendNack
  8411  060E                     _I2C_MasterSendNack:	
  8412                           
  8413                           ;i2c_master.c: 611: SSP1CON2bits.ACKDT = 1;
  8414                           
  8415                           ;incstack = 0
  8416                           ; Regs used in _I2C_MasterSendNack: []
  8417  060E  0024               	movlb	4	; select bank4
  8418  060F  1696               	bsf	22,5	;volatile
  8419                           
  8420                           ;i2c_master.c: 612: SSP1CON2bits.ACKEN = 1;
  8421  0610  1616               	bsf	22,4	;volatile
  8422  0611  0008               	return
  8423  0612                     __end_of_I2C_MasterSendNack:	
  8424                           
  8425                           	psect	text54
  8426  0622                     __ptext54:	
  8427 ;; *************** function _I2C_MasterStartRx *****************
  8428 ;; Defined at:
  8429 ;;		line 583 in file "mcc_generated_files/i2c_master.c"
  8430 ;; Parameters:    Size  Location     Type
  8431 ;;		None
  8432 ;; Auto vars:     Size  Location     Type
  8433 ;;		None
  8434 ;; Return value:  Size  Location     Type
  8435 ;;                  1    wreg      void 
  8436 ;; Registers used:
  8437 ;;		None
  8438 ;; Tracked objects:
  8439 ;;		On entry : 0/0
  8440 ;;		On exit  : 0/0
  8441 ;;		Unchanged: 0/0
  8442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8447 ;;Total ram usage:        0 bytes
  8448 ;; Hardware stack levels used:    1
  8449 ;; This function calls:
  8450 ;;		Nothing
  8451 ;; This function is called by:
  8452 ;;		_I2C_DO_RCEN
  8453 ;; This function uses a non-reentrant model
  8454 ;;
  8455                           
  8456                           
  8457                           ;psect for function _I2C_MasterStartRx
  8458  0622                     _I2C_MasterStartRx:	
  8459                           
  8460                           ;i2c_master.c: 585: SSP1CON2bits.RCEN = 1;
  8461                           
  8462                           ;incstack = 0
  8463                           ; Regs used in _I2C_MasterStartRx: []
  8464  0622  0024               	movlb	4	; select bank4
  8465  0623  1596               	bsf	22,3	;volatile
  8466  0624  0008               	return
  8467  0625                     __end_of_I2C_MasterStartRx:	
  8468                           
  8469                           	psect	text55
  8470  063A                     __ptext55:	
  8471 ;; *************** function _I2C_CallbackReturnReset *****************
  8472 ;; Defined at:
  8473 ;;		line 525 in file "mcc_generated_files/i2c_master.c"
  8474 ;; Parameters:    Size  Location     Type
  8475 ;;  funPtr          1    9[COMMON] PTR void 
  8476 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8477 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8478 ;; Auto vars:     Size  Location     Type
  8479 ;;		None
  8480 ;; Return value:  Size  Location     Type
  8481 ;;                  1    wreg      enum E97
  8482 ;; Registers used:
  8483 ;;		wreg
  8484 ;; Tracked objects:
  8485 ;;		On entry : 0/0
  8486 ;;		On exit  : 0/0
  8487 ;;		Unchanged: 0/0
  8488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8489 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8492 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8493 ;;Total ram usage:        1 bytes
  8494 ;; Hardware stack levels used:    1
  8495 ;; This function calls:
  8496 ;;		Nothing
  8497 ;; This function is called by:
  8498 ;;		_I2C_Open
  8499 ;;		_I2C_DO_TX
  8500 ;;		_I2C_DO_RX
  8501 ;;		_I2C_DO_TX_EMPTY
  8502 ;;		_I2C_DO_ADDRESS_NACK
  8503 ;;		_I2C_DO_RX_EMPTY
  8504 ;; This function uses a non-reentrant model
  8505 ;;
  8506                           
  8507                           
  8508                           ;psect for function _I2C_CallbackReturnReset
  8509  063A                     _I2C_CallbackReturnReset:	
  8510                           
  8511                           ;i2c_master.c: 527: return I2C_RESET_LINK;
  8512                           
  8513                           ;incstack = 0
  8514                           ; Regs used in _I2C_CallbackReturnReset: [wreg]
  8515  063A  3005               	movlw	5
  8516  063B  0008               	return
  8517  063C                     __end_of_I2C_CallbackReturnReset:	
  8518                           
  8519                           	psect	text56
  8520  063C                     __ptext56:	
  8521 ;; *************** function _I2C_CallbackReturnStop *****************
  8522 ;; Defined at:
  8523 ;;		line 520 in file "mcc_generated_files/i2c_master.c"
  8524 ;; Parameters:    Size  Location     Type
  8525 ;;  funPtr          1    9[COMMON] PTR void 
  8526 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8527 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8528 ;; Auto vars:     Size  Location     Type
  8529 ;;		None
  8530 ;; Return value:  Size  Location     Type
  8531 ;;                  1    wreg      enum E97
  8532 ;; Registers used:
  8533 ;;		wreg
  8534 ;; Tracked objects:
  8535 ;;		On entry : 0/0
  8536 ;;		On exit  : 0/0
  8537 ;;		Unchanged: 0/0
  8538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8539 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8542 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8543 ;;Total ram usage:        1 bytes
  8544 ;; Hardware stack levels used:    1
  8545 ;; This function calls:
  8546 ;;		Nothing
  8547 ;; This function is called by:
  8548 ;;		_I2C_Open
  8549 ;;		_I2C_SetCallback
  8550 ;;		_I2C_DO_TX
  8551 ;;		_I2C_DO_RX
  8552 ;;		_I2C_DO_TX_EMPTY
  8553 ;;		_I2C_DO_ADDRESS_NACK
  8554 ;;		_I2C_DO_RX_EMPTY
  8555 ;; This function uses a non-reentrant model
  8556 ;;
  8557                           
  8558                           
  8559                           ;psect for function _I2C_CallbackReturnStop
  8560  063C                     _I2C_CallbackReturnStop:	
  8561                           
  8562                           ;i2c_master.c: 522: return I2C_STOP;
  8563                           
  8564                           ;incstack = 0
  8565                           ; Regs used in _I2C_CallbackReturnStop: [wreg]
  8566  063C  3001               	movlw	1
  8567  063D  0008               	return
  8568  063E                     __end_of_I2C_CallbackReturnStop:	
  8569                           
  8570                           	psect	text57
  8571  046C                     __ptext57:	
  8572 ;; *************** function _rdBlkRegCompleteHandler *****************
  8573 ;; Defined at:
  8574 ;;		line 170 in file "mcc_generated_files/examples/i2c_master_example.c"
  8575 ;; Parameters:    Size  Location     Type
  8576 ;;  ptr             1    9[COMMON] PTR void 
  8577 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8578 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8579 ;; Auto vars:     Size  Location     Type
  8580 ;;		None
  8581 ;; Return value:  Size  Location     Type
  8582 ;;                  1    wreg      enum E97
  8583 ;; Registers used:
  8584 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8585 ;; Tracked objects:
  8586 ;;		On entry : 0/0
  8587 ;;		On exit  : 0/0
  8588 ;;		Unchanged: 0/0
  8589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8590 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8593 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8594 ;;Total ram usage:        1 bytes
  8595 ;; Hardware stack levels used:    1
  8596 ;; Hardware stack levels required when called:    2
  8597 ;; This function calls:
  8598 ;;		_I2C_SetBuffer
  8599 ;;		_I2C_SetDataCompleteCallback
  8600 ;; This function is called by:
  8601 ;;		_I2C_ReadDataBlock
  8602 ;;		_I2C_DO_TX
  8603 ;;		_I2C_DO_RX
  8604 ;;		_I2C_DO_TX_EMPTY
  8605 ;;		_I2C_DO_ADDRESS_NACK
  8606 ;;		_I2C_DO_RX_EMPTY
  8607 ;; This function uses a non-reentrant model
  8608 ;;
  8609                           
  8610                           
  8611                           ;psect for function _rdBlkRegCompleteHandler
  8612  046C                     _rdBlkRegCompleteHandler:	
  8613                           
  8614                           ;i2c_master_example.c: 172: I2C_SetBuffer(((i2c_buffer_t *)ptr)->data,((i2c_buffer_t*)pt
      +                          r)->len);
  8615                           
  8616                           ;incstack = 0
  8617                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  8618  046C  0879               	movf	rdBlkRegCompleteHandler@ptr,w
  8619  046D  0086               	movwf	6
  8620  046E  0187               	clrf	7
  8621  046F  3F40               	moviw [0]fsr1
  8622  0470  00F0               	movwf	I2C_SetBuffer@bufferSize
  8623  0471  3F41               	moviw [1]fsr1
  8624  0472  00F1               	movwf	I2C_SetBuffer@bufferSize+1
  8625  0473  0879               	movf	rdBlkRegCompleteHandler@ptr,w
  8626  0474  3E02               	addlw	2
  8627  0475  0086               	movwf	6
  8628  0476  0187               	clrf	7
  8629  0477  0801               	movf	1,w
  8630  0478  3185  2516  3184   	fcall	_I2C_SetBuffer
  8631                           
  8632                           ;i2c_master_example.c: 173: I2C_SetDataCompleteCallback((0),(0));
  8633  047B  3000               	movlw	0
  8634  047C  00F5               	movwf	I2C_SetDataCompleteCallback@cb
  8635  047D  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
  8636  047E  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
  8637  047F  3185  2548         	fcall	_I2C_SetDataCompleteCallback
  8638                           
  8639                           ;i2c_master_example.c: 174: return I2C_RESTART_READ;
  8640  0481  3002               	movlw	2
  8641  0482  0008               	return
  8642  0483                     __end_of_rdBlkRegCompleteHandler:	
  8643                           
  8644                           	psect	text58
  8645  04D6                     __ptext58:	
  8646 ;; *************** function _wr1RegCompleteHandler *****************
  8647 ;; Defined at:
  8648 ;;		line 156 in file "mcc_generated_files/examples/i2c_master_example.c"
  8649 ;; Parameters:    Size  Location     Type
  8650 ;;  ptr             1    9[COMMON] PTR void 
  8651 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8652 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8653 ;; Auto vars:     Size  Location     Type
  8654 ;;		None
  8655 ;; Return value:  Size  Location     Type
  8656 ;;                  1    wreg      enum E97
  8657 ;; Registers used:
  8658 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8659 ;; Tracked objects:
  8660 ;;		On entry : 0/0
  8661 ;;		On exit  : 0/0
  8662 ;;		Unchanged: 0/0
  8663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8664 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8667 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8668 ;;Total ram usage:        1 bytes
  8669 ;; Hardware stack levels used:    1
  8670 ;; Hardware stack levels required when called:    2
  8671 ;; This function calls:
  8672 ;;		_I2C_SetBuffer
  8673 ;;		_I2C_SetDataCompleteCallback
  8674 ;; This function is called by:
  8675 ;;		_I2C_Write1ByteRegister
  8676 ;;		_I2C_DO_TX
  8677 ;;		_I2C_DO_RX
  8678 ;;		_I2C_DO_TX_EMPTY
  8679 ;;		_I2C_DO_ADDRESS_NACK
  8680 ;;		_I2C_DO_RX_EMPTY
  8681 ;; This function uses a non-reentrant model
  8682 ;;
  8683                           
  8684                           
  8685                           ;psect for function _wr1RegCompleteHandler
  8686  04D6                     _wr1RegCompleteHandler:	
  8687                           
  8688                           ;i2c_master_example.c: 158: I2C_SetBuffer(ptr,1);
  8689                           
  8690                           ;incstack = 0
  8691                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8692  04D6  3001               	movlw	1
  8693  04D7  00F0               	movwf	I2C_SetBuffer@bufferSize
  8694  04D8  3000               	movlw	0
  8695  04D9  00F1               	movwf	I2C_SetBuffer@bufferSize+1
  8696  04DA  0879               	movf	wr1RegCompleteHandler@ptr,w
  8697  04DB  3185  2516  3184   	fcall	_I2C_SetBuffer
  8698                           
  8699                           ;i2c_master_example.c: 159: I2C_SetDataCompleteCallback((0),(0));
  8700  04DE  3000               	movlw	0
  8701  04DF  00F5               	movwf	I2C_SetDataCompleteCallback@cb
  8702  04E0  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
  8703  04E1  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
  8704  04E2  3185  2548         	fcall	_I2C_SetDataCompleteCallback
  8705                           
  8706                           ;i2c_master_example.c: 160: return I2C_CONTINUE;
  8707  04E4  3004               	movlw	4
  8708  04E5  0008               	return
  8709  04E6                     __end_of_wr1RegCompleteHandler:	
  8710                           
  8711                           	psect	text59
  8712  04E6                     __ptext59:	
  8713 ;; *************** function _rd2RegCompleteHandler *****************
  8714 ;; Defined at:
  8715 ;;		line 149 in file "mcc_generated_files/examples/i2c_master_example.c"
  8716 ;; Parameters:    Size  Location     Type
  8717 ;;  ptr             1    9[COMMON] PTR void 
  8718 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8719 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8720 ;; Auto vars:     Size  Location     Type
  8721 ;;		None
  8722 ;; Return value:  Size  Location     Type
  8723 ;;                  1    wreg      enum E97
  8724 ;; Registers used:
  8725 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8726 ;; Tracked objects:
  8727 ;;		On entry : 0/0
  8728 ;;		On exit  : 0/0
  8729 ;;		Unchanged: 0/0
  8730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8731 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8734 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8735 ;;Total ram usage:        1 bytes
  8736 ;; Hardware stack levels used:    1
  8737 ;; Hardware stack levels required when called:    2
  8738 ;; This function calls:
  8739 ;;		_I2C_SetBuffer
  8740 ;;		_I2C_SetDataCompleteCallback
  8741 ;; This function is called by:
  8742 ;;		_I2C_Read2ByteRegister
  8743 ;;		_I2C_DO_TX
  8744 ;;		_I2C_DO_RX
  8745 ;;		_I2C_DO_TX_EMPTY
  8746 ;;		_I2C_DO_ADDRESS_NACK
  8747 ;;		_I2C_DO_RX_EMPTY
  8748 ;; This function uses a non-reentrant model
  8749 ;;
  8750                           
  8751                           
  8752                           ;psect for function _rd2RegCompleteHandler
  8753  04E6                     _rd2RegCompleteHandler:	
  8754                           
  8755                           ;i2c_master_example.c: 151: I2C_SetBuffer(ptr,2);
  8756                           
  8757                           ;incstack = 0
  8758                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8759  04E6  3002               	movlw	2
  8760  04E7  00F0               	movwf	I2C_SetBuffer@bufferSize
  8761  04E8  3000               	movlw	0
  8762  04E9  00F1               	movwf	I2C_SetBuffer@bufferSize+1
  8763  04EA  0879               	movf	rd2RegCompleteHandler@ptr,w
  8764  04EB  3185  2516  3184   	fcall	_I2C_SetBuffer
  8765                           
  8766                           ;i2c_master_example.c: 152: I2C_SetDataCompleteCallback((0),(0));
  8767  04EE  3000               	movlw	0
  8768  04EF  00F5               	movwf	I2C_SetDataCompleteCallback@cb
  8769  04F0  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
  8770  04F1  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
  8771  04F2  3185  2548         	fcall	_I2C_SetDataCompleteCallback
  8772                           
  8773                           ;i2c_master_example.c: 153: return I2C_RESTART_READ;
  8774  04F4  3002               	movlw	2
  8775  04F5  0008               	return
  8776  04F6                     __end_of_rd2RegCompleteHandler:	
  8777                           
  8778                           	psect	text60
  8779  04F6                     __ptext60:	
  8780 ;; *************** function _rd1RegCompleteHandler *****************
  8781 ;; Defined at:
  8782 ;;		line 142 in file "mcc_generated_files/examples/i2c_master_example.c"
  8783 ;; Parameters:    Size  Location     Type
  8784 ;;  ptr             1    9[COMMON] PTR void 
  8785 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8786 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8787 ;; Auto vars:     Size  Location     Type
  8788 ;;		None
  8789 ;; Return value:  Size  Location     Type
  8790 ;;                  1    wreg      enum E97
  8791 ;; Registers used:
  8792 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8793 ;; Tracked objects:
  8794 ;;		On entry : 0/0
  8795 ;;		On exit  : 0/0
  8796 ;;		Unchanged: 0/0
  8797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8798 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8801 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8802 ;;Total ram usage:        1 bytes
  8803 ;; Hardware stack levels used:    1
  8804 ;; Hardware stack levels required when called:    2
  8805 ;; This function calls:
  8806 ;;		_I2C_SetBuffer
  8807 ;;		_I2C_SetDataCompleteCallback
  8808 ;; This function is called by:
  8809 ;;		_I2C_Read1ByteRegister
  8810 ;;		_I2C_DO_TX
  8811 ;;		_I2C_DO_RX
  8812 ;;		_I2C_DO_TX_EMPTY
  8813 ;;		_I2C_DO_ADDRESS_NACK
  8814 ;;		_I2C_DO_RX_EMPTY
  8815 ;; This function uses a non-reentrant model
  8816 ;;
  8817                           
  8818                           
  8819                           ;psect for function _rd1RegCompleteHandler
  8820  04F6                     _rd1RegCompleteHandler:	
  8821                           
  8822                           ;i2c_master_example.c: 144: I2C_SetBuffer(ptr,1);
  8823                           
  8824                           ;incstack = 0
  8825                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8826  04F6  3001               	movlw	1
  8827  04F7  00F0               	movwf	I2C_SetBuffer@bufferSize
  8828  04F8  3000               	movlw	0
  8829  04F9  00F1               	movwf	I2C_SetBuffer@bufferSize+1
  8830  04FA  0879               	movf	rd1RegCompleteHandler@ptr,w
  8831  04FB  3185  2516  3184   	fcall	_I2C_SetBuffer
  8832                           
  8833                           ;i2c_master_example.c: 145: I2C_SetDataCompleteCallback((0),(0));
  8834  04FE  3000               	movlw	0
  8835  04FF  00F5               	movwf	I2C_SetDataCompleteCallback@cb
  8836  0500  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
  8837  0501  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
  8838  0502  3185  2548         	fcall	_I2C_SetDataCompleteCallback
  8839                           
  8840                           ;i2c_master_example.c: 146: return I2C_RESTART_READ;
  8841  0504  3002               	movlw	2
  8842  0505  0008               	return
  8843  0506                     __end_of_rd1RegCompleteHandler:	
  8844                           
  8845                           	psect	text61
  8846  0506                     __ptext61:	
  8847 ;; *************** function _wr2RegCompleteHandler *****************
  8848 ;; Defined at:
  8849 ;;		line 163 in file "mcc_generated_files/examples/i2c_master_example.c"
  8850 ;; Parameters:    Size  Location     Type
  8851 ;;  ptr             1    9[COMMON] PTR void 
  8852 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8853 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8854 ;; Auto vars:     Size  Location     Type
  8855 ;;		None
  8856 ;; Return value:  Size  Location     Type
  8857 ;;                  1    wreg      enum E97
  8858 ;; Registers used:
  8859 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8860 ;; Tracked objects:
  8861 ;;		On entry : 0/0
  8862 ;;		On exit  : 0/0
  8863 ;;		Unchanged: 0/0
  8864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8865 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8868 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8869 ;;Total ram usage:        1 bytes
  8870 ;; Hardware stack levels used:    1
  8871 ;; Hardware stack levels required when called:    2
  8872 ;; This function calls:
  8873 ;;		_I2C_SetBuffer
  8874 ;;		_I2C_SetDataCompleteCallback
  8875 ;; This function is called by:
  8876 ;;		_I2C_Write2ByteRegister
  8877 ;;		_I2C_DO_TX
  8878 ;;		_I2C_DO_RX
  8879 ;;		_I2C_DO_TX_EMPTY
  8880 ;;		_I2C_DO_ADDRESS_NACK
  8881 ;;		_I2C_DO_RX_EMPTY
  8882 ;; This function uses a non-reentrant model
  8883 ;;
  8884                           
  8885                           
  8886                           ;psect for function _wr2RegCompleteHandler
  8887  0506                     _wr2RegCompleteHandler:	
  8888                           
  8889                           ;i2c_master_example.c: 165: I2C_SetBuffer(ptr,2);
  8890                           
  8891                           ;incstack = 0
  8892                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8893  0506  3002               	movlw	2
  8894  0507  00F0               	movwf	I2C_SetBuffer@bufferSize
  8895  0508  3000               	movlw	0
  8896  0509  00F1               	movwf	I2C_SetBuffer@bufferSize+1
  8897  050A  0879               	movf	wr2RegCompleteHandler@ptr,w
  8898  050B  3185  2516  3185   	fcall	_I2C_SetBuffer
  8899                           
  8900                           ;i2c_master_example.c: 166: I2C_SetDataCompleteCallback((0),(0));
  8901  050E  3000               	movlw	0
  8902  050F  00F5               	movwf	I2C_SetDataCompleteCallback@cb
  8903  0510  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
  8904  0511  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
  8905  0512  3185  2548         	fcall	_I2C_SetDataCompleteCallback
  8906                           
  8907                           ;i2c_master_example.c: 167: return I2C_CONTINUE;
  8908  0514  3004               	movlw	4
  8909  0515  0008               	return
  8910  0516                     __end_of_wr2RegCompleteHandler:	
  8911                           
  8912                           	psect	text62
  8913  0548                     __ptext62:	
  8914 ;; *************** function _I2C_SetDataCompleteCallback *****************
  8915 ;; Defined at:
  8916 ;;		line 273 in file "mcc_generated_files/i2c_master.c"
  8917 ;; Parameters:    Size  Location     Type
  8918 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
  8919 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), 
  8920 ;;		 -> Absolute function(1), rd1RegCompleteHandler(1), 
  8921 ;;  ptr             1    7[COMMON] PTR void 
  8922 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8923 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8924 ;; Auto vars:     Size  Location     Type
  8925 ;;		None
  8926 ;; Return value:  Size  Location     Type
  8927 ;;                  1    wreg      void 
  8928 ;; Registers used:
  8929 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8930 ;; Tracked objects:
  8931 ;;		On entry : 0/0
  8932 ;;		On exit  : 0/0
  8933 ;;		Unchanged: 0/0
  8934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8935 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8937 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8938 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8939 ;;Total ram usage:        4 bytes
  8940 ;; Hardware stack levels used:    1
  8941 ;; Hardware stack levels required when called:    1
  8942 ;; This function calls:
  8943 ;;		_I2C_SetCallback
  8944 ;; This function is called by:
  8945 ;;		_I2C_Write1ByteRegister
  8946 ;;		_rd1RegCompleteHandler
  8947 ;;		_rd2RegCompleteHandler
  8948 ;;		_wr1RegCompleteHandler
  8949 ;;		_wr2RegCompleteHandler
  8950 ;;		_rdBlkRegCompleteHandler
  8951 ;;		_I2C_Read1ByteRegister
  8952 ;;		_I2C_Read2ByteRegister
  8953 ;;		_I2C_Write2ByteRegister
  8954 ;;		_I2C_ReadDataBlock
  8955 ;; This function uses a non-reentrant model
  8956 ;;
  8957                           
  8958                           
  8959                           ;psect for function _I2C_SetDataCompleteCallback
  8960  0548                     _I2C_SetDataCompleteCallback:	
  8961                           
  8962                           ;i2c_master.c: 275: I2C_SetCallback(I2C_DATA_COMPLETE, cb, ptr);
  8963                           
  8964                           ;incstack = 0
  8965                           ; Regs used in _I2C_SetDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  8966  0548  0876               	movf	I2C_SetDataCompleteCallback@cb+1,w
  8967  0549  00F1               	movwf	I2C_SetCallback@cb+1
  8968  054A  0875               	movf	I2C_SetDataCompleteCallback@cb,w
  8969  054B  00F0               	movwf	I2C_SetCallback@cb
  8970  054C  0877               	movf	I2C_SetDataCompleteCallback@ptr,w
  8971  054D  00F8               	movwf	??_I2C_SetDataCompleteCallback
  8972  054E  0878               	movf	??_I2C_SetDataCompleteCallback,w
  8973  054F  00F2               	movwf	I2C_SetCallback@ptr
  8974  0550  3000               	movlw	0
  8975  0551  3183  23D2         	fcall	_I2C_SetCallback
  8976  0553  0008               	return
  8977  0554                     __end_of_I2C_SetDataCompleteCallback:	
  8978                           
  8979                           	psect	text63
  8980  03D2                     __ptext63:	
  8981 ;; *************** function _I2C_SetCallback *****************
  8982 ;; Defined at:
  8983 ;;		line 298 in file "mcc_generated_files/i2c_master.c"
  8984 ;; Parameters:    Size  Location     Type
  8985 ;;  idx             1    wreg     enum E12121
  8986 ;;  cb              2    0[COMMON] PTR FTN(PTR void ,)enum 
  8987 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), 
  8988 ;;		 -> Absolute function(1), rd1RegCompleteHandler(1), 
  8989 ;;  ptr             1    2[COMMON] PTR void 
  8990 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8991 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8992 ;; Auto vars:     Size  Location     Type
  8993 ;;  idx             1    4[COMMON] enum E12121
  8994 ;; Return value:  Size  Location     Type
  8995 ;;                  1    wreg      void 
  8996 ;; Registers used:
  8997 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8998 ;; Tracked objects:
  8999 ;;		On entry : 0/0
  9000 ;;		On exit  : 0/0
  9001 ;;		Unchanged: 0/0
  9002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9003 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9004 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9005 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9006 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9007 ;;Total ram usage:        5 bytes
  9008 ;; Hardware stack levels used:    1
  9009 ;; This function calls:
  9010 ;;		Nothing
  9011 ;; This function is called by:
  9012 ;;		_I2C_SetDataCompleteCallback
  9013 ;;		_I2C_SetAddressNackCallback
  9014 ;;		_I2C_SetWriteCollisionCallback
  9015 ;;		_I2C_SetDataNackCallback
  9016 ;;		_I2C_SetTimeoutCallback
  9017 ;; This function uses a non-reentrant model
  9018 ;;
  9019                           
  9020                           
  9021                           ;psect for function _I2C_SetCallback
  9022  03D2                     _I2C_SetCallback:	
  9023                           
  9024                           ;incstack = 0
  9025                           ; Regs used in _I2C_SetCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
  9026                           ;I2C_SetCallback@idx stored from wreg
  9027  03D2  00F4               	movwf	I2C_SetCallback@idx
  9028                           
  9029                           ;i2c_master.c: 300: if(cb)
  9030  03D3  0870               	movf	I2C_SetCallback@cb,w
  9031  03D4  0471               	iorwf	I2C_SetCallback@cb+1,w
  9032  03D5  1903               	btfsc	3,2
  9033  03D6  2BE8               	goto	i1l2196
  9034                           
  9035                           ;i2c_master.c: 301: {
  9036                           ;i2c_master.c: 302: I2C_Status.callbackTable[idx] = cb;
  9037  03D7  3574               	lslf	I2C_SetCallback@idx,w
  9038  03D8  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
  9039  03D9  0086               	movwf	6
  9040  03DA  0187               	clrf	7
  9041  03DB  0870               	movf	I2C_SetCallback@cb,w
  9042  03DC  3FC0               	movwi [0]fsr1
  9043  03DD  0871               	movf	I2C_SetCallback@cb+1,w
  9044  03DE  3FC1               	movwi [1]fsr1
  9045                           
  9046                           ;i2c_master.c: 303: I2C_Status.callbackPayload[idx] = ptr;
  9047  03DF  0872               	movf	I2C_SetCallback@ptr,w
  9048  03E0  00F3               	movwf	??_I2C_SetCallback
  9049  03E1  0874               	movf	I2C_SetCallback@idx,w
  9050  03E2  3E2C               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
  9051  03E3  0086               	movwf	6
  9052  03E4  0187               	clrf	7
  9053  03E5  0873               	movf	??_I2C_SetCallback,w
  9054  03E6  0081               	movwf	1
  9055                           
  9056                           ;i2c_master.c: 304: }
  9057  03E7  0008               	return
  9058  03E8                     i1l2196:	
  9059                           
  9060                           ;i2c_master.c: 305: else
  9061                           ;i2c_master.c: 306: {
  9062                           ;i2c_master.c: 307: I2C_Status.callbackTable[idx] = I2C_CallbackReturnStop;
  9063  03E8  3574               	lslf	I2C_SetCallback@idx,w
  9064  03E9  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
  9065  03EA  0086               	movwf	6
  9066  03EB  0187               	clrf	7
  9067  03EC  303C               	movlw	low _I2C_CallbackReturnStop
  9068  03ED  3FC0               	movwi [0]fsr1
  9069  03EE  3006               	movlw	high _I2C_CallbackReturnStop
  9070  03EF  3FC1               	movwi [1]fsr1
  9071                           
  9072                           ;i2c_master.c: 308: I2C_Status.callbackPayload[idx] = (0);
  9073  03F0  0874               	movf	I2C_SetCallback@idx,w
  9074  03F1  3E2C               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
  9075  03F2  0086               	movwf	6
  9076  03F3  0187               	clrf	7
  9077  03F4  0181               	clrf	1
  9078  03F5  0008               	return
  9079  03F6                     __end_of_I2C_SetCallback:	
  9080                           
  9081                           	psect	text64
  9082  0516                     __ptext64:	
  9083 ;; *************** function _I2C_SetBuffer *****************
  9084 ;; Defined at:
  9085 ;;		line 263 in file "mcc_generated_files/i2c_master.c"
  9086 ;; Parameters:    Size  Location     Type
  9087 ;;  buffer          1    wreg     PTR void 
  9088 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
  9089 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
  9090 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
  9091 ;;  bufferSize      2    0[COMMON] unsigned int 
  9092 ;; Auto vars:     Size  Location     Type
  9093 ;;  buffer          1    3[COMMON] PTR void 
  9094 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
  9095 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
  9096 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
  9097 ;; Return value:  Size  Location     Type
  9098 ;;                  1    wreg      void 
  9099 ;; Registers used:
  9100 ;;		wreg
  9101 ;; Tracked objects:
  9102 ;;		On entry : 0/0
  9103 ;;		On exit  : 0/0
  9104 ;;		Unchanged: 0/0
  9105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9106 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9107 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9108 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9109 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9110 ;;Total ram usage:        4 bytes
  9111 ;; Hardware stack levels used:    1
  9112 ;; This function calls:
  9113 ;;		Nothing
  9114 ;; This function is called by:
  9115 ;;		_I2C_Write1ByteRegister
  9116 ;;		_rd1RegCompleteHandler
  9117 ;;		_rd2RegCompleteHandler
  9118 ;;		_wr1RegCompleteHandler
  9119 ;;		_wr2RegCompleteHandler
  9120 ;;		_rdBlkRegCompleteHandler
  9121 ;;		_I2C_Read1ByteRegister
  9122 ;;		_I2C_Read2ByteRegister
  9123 ;;		_I2C_Write2ByteRegister
  9124 ;;		_I2C_WriteNBytes
  9125 ;;		_I2C_ReadNBytes
  9126 ;;		_I2C_ReadDataBlock
  9127 ;; This function uses a non-reentrant model
  9128 ;;
  9129                           
  9130                           
  9131                           ;psect for function _I2C_SetBuffer
  9132  0516                     _I2C_SetBuffer:	
  9133                           
  9134                           ;incstack = 0
  9135                           ; Regs used in _I2C_SetBuffer: [wreg]
  9136                           ;I2C_SetBuffer@buffer stored from wreg
  9137  0516  00F3               	movwf	I2C_SetBuffer@buffer
  9138                           
  9139                           ;i2c_master.c: 265: if(I2C_Status.bufferFree)
  9140  0517  0020               	movlb	0	; select bank0
  9141  0518  1DBC               	btfss	_I2C_Status+28,3
  9142  0519  0008               	return
  9143                           
  9144                           ;i2c_master.c: 266: {
  9145                           ;i2c_master.c: 267: I2C_Status.data_ptr = buffer;
  9146  051A  0873               	movf	I2C_SetBuffer@buffer,w
  9147  051B  00F2               	movwf	??_I2C_SetBuffer
  9148  051C  0872               	movf	??_I2C_SetBuffer,w
  9149  051D  00B7               	movwf	low ((_I2C_Status| 0+23))
  9150                           
  9151                           ;i2c_master.c: 268: I2C_Status.data_length = bufferSize;
  9152  051E  0871               	movf	I2C_SetBuffer@bufferSize+1,w
  9153  051F  00B9               	movwf	_I2C_Status+25
  9154  0520  0870               	movf	I2C_SetBuffer@bufferSize,w
  9155  0521  00B8               	movwf	_I2C_Status+24
  9156                           
  9157                           ;i2c_master.c: 269: I2C_Status.bufferFree = 0;
  9158  0522  11BC               	bcf	_I2C_Status+28,3
  9159  0523  0008               	return
  9160  0524                     __end_of_I2C_SetBuffer:	
  9161                           
  9162                           	psect	text65
  9163  0625                     __ptext65:	
  9164 ;; *************** function _I2C_MasterStop *****************
  9165 ;; Defined at:
  9166 ;;		line 593 in file "mcc_generated_files/i2c_master.c"
  9167 ;; Parameters:    Size  Location     Type
  9168 ;;		None
  9169 ;; Auto vars:     Size  Location     Type
  9170 ;;		None
  9171 ;; Return value:  Size  Location     Type
  9172 ;;                  1    wreg      void 
  9173 ;; Registers used:
  9174 ;;		None
  9175 ;; Tracked objects:
  9176 ;;		On entry : 0/0
  9177 ;;		On exit  : 0/0
  9178 ;;		Unchanged: 0/0
  9179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9183 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9184 ;;Total ram usage:        0 bytes
  9185 ;; Hardware stack levels used:    1
  9186 ;; This function calls:
  9187 ;;		Nothing
  9188 ;; This function is called by:
  9189 ;;		_I2C_DO_SEND_STOP
  9190 ;; This function uses a non-reentrant model
  9191 ;;
  9192                           
  9193                           
  9194                           ;psect for function _I2C_MasterStop
  9195  0625                     _I2C_MasterStop:	
  9196                           
  9197                           ;i2c_master.c: 595: SSP1CON2bits.PEN = 1;
  9198                           
  9199                           ;incstack = 0
  9200                           ; Regs used in _I2C_MasterStop: []
  9201  0625  0024               	movlb	4	; select bank4
  9202  0626  1516               	bsf	22,2	;volatile
  9203  0627  0008               	return
  9204  0628                     __end_of_I2C_MasterStop:	
  9205                           
  9206                           	psect	text66
  9207  0628                     __ptext66:	
  9208 ;; *************** function _I2C_MasterEnableRestart *****************
  9209 ;; Defined at:
  9210 ;;		line 573 in file "mcc_generated_files/i2c_master.c"
  9211 ;; Parameters:    Size  Location     Type
  9212 ;;		None
  9213 ;; Auto vars:     Size  Location     Type
  9214 ;;		None
  9215 ;; Return value:  Size  Location     Type
  9216 ;;                  1    wreg      void 
  9217 ;; Registers used:
  9218 ;;		None
  9219 ;; Tracked objects:
  9220 ;;		On entry : 0/0
  9221 ;;		On exit  : 0/0
  9222 ;;		Unchanged: 0/0
  9223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9228 ;;Total ram usage:        0 bytes
  9229 ;; Hardware stack levels used:    1
  9230 ;; This function calls:
  9231 ;;		Nothing
  9232 ;; This function is called by:
  9233 ;;		_I2C_DO_SEND_RESTART_READ
  9234 ;;		_I2C_DO_SEND_RESTART_WRITE
  9235 ;;		_I2C_DO_SEND_RESTART
  9236 ;;		_I2C_DO_RX_EMPTY
  9237 ;; This function uses a non-reentrant model
  9238 ;;
  9239                           
  9240                           
  9241                           ;psect for function _I2C_MasterEnableRestart
  9242  0628                     _I2C_MasterEnableRestart:	
  9243                           
  9244                           ;i2c_master.c: 575: SSP1CON2bits.RSEN = 1;
  9245                           
  9246                           ;incstack = 0
  9247                           ; Regs used in _I2C_MasterEnableRestart: []
  9248  0628  0024               	movlb	4	; select bank4
  9249  0629  1496               	bsf	22,1	;volatile
  9250  062A  0008               	return
  9251  062B                     __end_of_I2C_MasterEnableRestart:	
  9252                           
  9253                           	psect	text67
  9254  062B                     __ptext67:	
  9255 ;; *************** function _I2C_MasterStart *****************
  9256 ;; Defined at:
  9257 ;;		line 588 in file "mcc_generated_files/i2c_master.c"
  9258 ;; Parameters:    Size  Location     Type
  9259 ;;		None
  9260 ;; Auto vars:     Size  Location     Type
  9261 ;;		None
  9262 ;; Return value:  Size  Location     Type
  9263 ;;                  1    wreg      void 
  9264 ;; Registers used:
  9265 ;;		None
  9266 ;; Tracked objects:
  9267 ;;		On entry : 0/0
  9268 ;;		On exit  : 0/0
  9269 ;;		Unchanged: 0/0
  9270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9274 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9275 ;;Total ram usage:        0 bytes
  9276 ;; Hardware stack levels used:    1
  9277 ;; This function calls:
  9278 ;;		Nothing
  9279 ;; This function is called by:
  9280 ;;		_I2C_MasterOperation
  9281 ;; This function uses a non-reentrant model
  9282 ;;
  9283                           
  9284                           
  9285                           ;psect for function _I2C_MasterStart
  9286  062B                     _I2C_MasterStart:	
  9287                           
  9288                           ;i2c_master.c: 590: SSP1CON2bits.SEN = 1;
  9289                           
  9290                           ;incstack = 0
  9291                           ; Regs used in _I2C_MasterStart: []
  9292  062B  0024               	movlb	4	; select bank4
  9293  062C  1416               	bsf	22,0	;volatile
  9294  062D  0008               	return
  9295  062E                     __end_of_I2C_MasterStart:	
  9296                           
  9297                           	psect	text68
  9298  0453                     __ptext68:	
  9299 ;; *************** function _I2C_Close *****************
  9300 ;; Defined at:
  9301 ;;		line 209 in file "mcc_generated_files/i2c_master.c"
  9302 ;; Parameters:    Size  Location     Type
  9303 ;;		None
  9304 ;; Auto vars:     Size  Location     Type
  9305 ;;  returnValue     1    1[COMMON] enum E92
  9306 ;; Return value:  Size  Location     Type
  9307 ;;                  1    wreg      enum E92
  9308 ;; Registers used:
  9309 ;;		wreg, status,2, status,0, pclath, cstack
  9310 ;; Tracked objects:
  9311 ;;		On entry : 0/0
  9312 ;;		On exit  : 0/0
  9313 ;;		Unchanged: 0/0
  9314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9316 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9317 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9318 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9319 ;;Total ram usage:        2 bytes
  9320 ;; Hardware stack levels used:    1
  9321 ;; Hardware stack levels required when called:    1
  9322 ;; This function calls:
  9323 ;;		_I2C_MasterClearIrq
  9324 ;;		_I2C_MasterClose
  9325 ;;		_I2C_MasterDisableIrq
  9326 ;; This function is called by:
  9327 ;;		_I2C_Write1ByteRegister
  9328 ;;		_I2C_Read1ByteRegister
  9329 ;;		_I2C_Read2ByteRegister
  9330 ;;		_I2C_Write2ByteRegister
  9331 ;;		_I2C_WriteNBytes
  9332 ;;		_I2C_ReadNBytes
  9333 ;;		_I2C_ReadDataBlock
  9334 ;; This function uses a non-reentrant model
  9335 ;;
  9336                           
  9337                           
  9338                           ;psect for function _I2C_Close
  9339  0453                     _I2C_Close:	
  9340                           
  9341                           ;i2c_master.c: 211: i2c_error_t returnValue = I2C_BUSY;
  9342                           
  9343                           ;incstack = 0
  9344                           ; Regs used in _I2C_Close: [wreg+status,2+status,0+pclath+cstack]
  9345  0453  01F1               	clrf	I2C_Close@returnValue
  9346  0454  0AF1               	incf	I2C_Close@returnValue,f
  9347                           
  9348                           ;i2c_master.c: 212: if(!I2C_Status.busy)
  9349  0455  0020               	movlb	0	; select bank0
  9350  0456  18BC               	btfsc	_I2C_Status+28,1
  9351  0457  2C6A               	goto	i1l2560
  9352                           
  9353                           ;i2c_master.c: 213: {
  9354                           ;i2c_master.c: 214: I2C_Status.inUse = 0;
  9355  0458  113C               	bcf	_I2C_Status+28,2
  9356                           
  9357                           ;i2c_master.c: 215: I2C_Status.address = 0xff;
  9358  0459  30FF               	movlw	255
  9359  045A  00F0               	movwf	??_I2C_Close
  9360  045B  0870               	movf	??_I2C_Close,w
  9361  045C  00B6               	movwf	_I2C_Status+22
  9362                           
  9363                           ;i2c_master.c: 216: I2C_MasterClearIrq();
  9364  045D  3186  2634  3184   	fcall	_I2C_MasterClearIrq
  9365                           
  9366                           ;i2c_master.c: 217: I2C_MasterDisableIrq();
  9367  0460  3186  262E  3184   	fcall	_I2C_MasterDisableIrq
  9368                           
  9369                           ;i2c_master.c: 218: I2C_MasterClose();
  9370  0463  3186  2631         	fcall	_I2C_MasterClose
  9371                           
  9372                           ;i2c_master.c: 219: returnValue = I2C_Status.error;
  9373  0465  0020               	movlb	0	; select bank0
  9374  0466  083B               	movf	_I2C_Status+27,w
  9375  0467  00F0               	movwf	??_I2C_Close
  9376  0468  0870               	movf	??_I2C_Close,w
  9377  0469  00F1               	movwf	I2C_Close@returnValue
  9378  046A                     i1l2560:	
  9379                           
  9380                           ;i2c_master.c: 220: }
  9381                           ;i2c_master.c: 221: return returnValue;
  9382  046A  0871               	movf	I2C_Close@returnValue,w
  9383  046B  0008               	return
  9384  046C                     __end_of_I2C_Close:	
  9385                           
  9386                           	psect	text69
  9387  062E                     __ptext69:	
  9388 ;; *************** function _I2C_MasterDisableIrq *****************
  9389 ;; Defined at:
  9390 ;;		line 635 in file "mcc_generated_files/i2c_master.c"
  9391 ;; Parameters:    Size  Location     Type
  9392 ;;		None
  9393 ;; Auto vars:     Size  Location     Type
  9394 ;;		None
  9395 ;; Return value:  Size  Location     Type
  9396 ;;                  1    wreg      void 
  9397 ;; Registers used:
  9398 ;;		None
  9399 ;; Tracked objects:
  9400 ;;		On entry : 0/0
  9401 ;;		On exit  : 0/0
  9402 ;;		Unchanged: 0/0
  9403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9408 ;;Total ram usage:        0 bytes
  9409 ;; Hardware stack levels used:    1
  9410 ;; This function calls:
  9411 ;;		Nothing
  9412 ;; This function is called by:
  9413 ;;		_I2C_Close
  9414 ;;		_I2C_SetTimeOut
  9415 ;; This function uses a non-reentrant model
  9416 ;;
  9417                           
  9418                           
  9419                           ;psect for function _I2C_MasterDisableIrq
  9420  062E                     _I2C_MasterDisableIrq:	
  9421                           
  9422                           ;i2c_master.c: 637: PIE1bits.SSP1IE = 0;
  9423                           
  9424                           ;incstack = 0
  9425                           ; Regs used in _I2C_MasterDisableIrq: []
  9426  062E  0021               	movlb	1	; select bank1
  9427  062F  1190               	bcf	16,3	;volatile
  9428  0630  0008               	return
  9429  0631                     __end_of_I2C_MasterDisableIrq:	
  9430                           
  9431                           	psect	text70
  9432  0631                     __ptext70:	
  9433 ;; *************** function _I2C_MasterClose *****************
  9434 ;; Defined at:
  9435 ;;		line 557 in file "mcc_generated_files/i2c_master.c"
  9436 ;; Parameters:    Size  Location     Type
  9437 ;;		None
  9438 ;; Auto vars:     Size  Location     Type
  9439 ;;		None
  9440 ;; Return value:  Size  Location     Type
  9441 ;;                  1    wreg      void 
  9442 ;; Registers used:
  9443 ;;		None
  9444 ;; Tracked objects:
  9445 ;;		On entry : 0/0
  9446 ;;		On exit  : 0/0
  9447 ;;		Unchanged: 0/0
  9448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9452 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9453 ;;Total ram usage:        0 bytes
  9454 ;; Hardware stack levels used:    1
  9455 ;; This function calls:
  9456 ;;		Nothing
  9457 ;; This function is called by:
  9458 ;;		_I2C_Close
  9459 ;; This function uses a non-reentrant model
  9460 ;;
  9461                           
  9462                           
  9463                           ;psect for function _I2C_MasterClose
  9464  0631                     _I2C_MasterClose:	
  9465                           
  9466                           ;i2c_master.c: 560: SSP1CON1bits.SSPEN = 0;
  9467                           
  9468                           ;incstack = 0
  9469                           ; Regs used in _I2C_MasterClose: []
  9470  0631  0024               	movlb	4	; select bank4
  9471  0632  1295               	bcf	21,5	;volatile
  9472  0633  0008               	return
  9473  0634                     __end_of_I2C_MasterClose:	
  9474                           
  9475                           	psect	text71
  9476  0634                     __ptext71:	
  9477 ;; *************** function _I2C_MasterClearIrq *****************
  9478 ;; Defined at:
  9479 ;;		line 640 in file "mcc_generated_files/i2c_master.c"
  9480 ;; Parameters:    Size  Location     Type
  9481 ;;		None
  9482 ;; Auto vars:     Size  Location     Type
  9483 ;;		None
  9484 ;; Return value:  Size  Location     Type
  9485 ;;                  1    wreg      void 
  9486 ;; Registers used:
  9487 ;;		None
  9488 ;; Tracked objects:
  9489 ;;		On entry : 0/0
  9490 ;;		On exit  : 0/0
  9491 ;;		Unchanged: 0/0
  9492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;Total ram usage:        0 bytes
  9498 ;; Hardware stack levels used:    1
  9499 ;; This function calls:
  9500 ;;		Nothing
  9501 ;; This function is called by:
  9502 ;;		_I2C_Open
  9503 ;;		_I2C_Close
  9504 ;;		_I2C_MasterFsm
  9505 ;; This function uses a non-reentrant model
  9506 ;;
  9507                           
  9508                           
  9509                           ;psect for function _I2C_MasterClearIrq
  9510  0634                     _I2C_MasterClearIrq:	
  9511                           
  9512                           ;i2c_master.c: 642: PIR1bits.SSP1IF = 0;
  9513                           
  9514                           ;incstack = 0
  9515                           ; Regs used in _I2C_MasterClearIrq: []
  9516  0634  0020               	movlb	0	; select bank0
  9517  0635  1190               	bcf	16,3	;volatile
  9518  0636  0008               	return
  9519  0637                     __end_of_I2C_MasterClearIrq:	
  9520                           
  9521                           	psect	text72
  9522  02BB                     __ptext72:	
  9523 ;; *************** function _EUSART_Receive_ISR *****************
  9524 ;; Defined at:
  9525 ;;		line 173 in file "mcc_generated_files/eusart.c"
  9526 ;; Parameters:    Size  Location     Type
  9527 ;;		None
  9528 ;; Auto vars:     Size  Location     Type
  9529 ;;		None
  9530 ;; Return value:  Size  Location     Type
  9531 ;;                  1    wreg      void 
  9532 ;; Registers used:
  9533 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9534 ;; Tracked objects:
  9535 ;;		On entry : 0/0
  9536 ;;		On exit  : 0/0
  9537 ;;		Unchanged: 0/0
  9538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9543 ;;Total ram usage:        0 bytes
  9544 ;; Hardware stack levels used:    1
  9545 ;; Hardware stack levels required when called:    2
  9546 ;; This function calls:
  9547 ;;		Absolute function
  9548 ;;		_EUSART_DefaultErrorHandler
  9549 ;;		_EUSART_DefaultFramingErrorHandler
  9550 ;;		_EUSART_DefaultOverrunErrorHandler
  9551 ;;		_EUSART_RxDataHandler
  9552 ;; This function is called by:
  9553 ;;		_EUSART_Initialize
  9554 ;;		_INTERRUPT_InterruptManager
  9555 ;; This function uses a non-reentrant model
  9556 ;;
  9557                           
  9558                           
  9559                           ;psect for function _EUSART_Receive_ISR
  9560  02BB                     _EUSART_Receive_ISR:	
  9561                           
  9562                           ;eusart.c: 176: eusartRxStatusBuffer[eusartRxHead].status = 0;
  9563                           
  9564                           ;incstack = 0
  9565                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9566  02BB  0020               	movlb	0	; select bank0
  9567  02BC  0857               	movf	_eusartRxHead,w	;volatile
  9568  02BD  3E3D               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  9569  02BE  0086               	movwf	6
  9570  02BF  0187               	clrf	7
  9571  02C0  0181               	clrf	1
  9572                           
  9573                           ;eusart.c: 178: if(RC1STAbits.FERR){
  9574  02C1  0023               	movlb	3	; select bank3
  9575  02C2  1D1D               	btfss	29,2	;volatile
  9576  02C3  2AD0               	goto	i1l2796
  9577                           
  9578                           ;eusart.c: 179: eusartRxStatusBuffer[eusartRxHead].ferr = 1;
  9579  02C4  0020               	movlb	0	; select bank0
  9580  02C5  0857               	movf	_eusartRxHead,w	;volatile
  9581  02C6  3E3D               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  9582  02C7  0086               	movwf	6
  9583  02C8  0187               	clrf	7
  9584  02C9  1481               	bsf	1,1
  9585                           
  9586                           ;eusart.c: 180: EUSART_FramingErrorHandler();
  9587  02CA  0021               	movlb	1	; select bank1
  9588  02CB  0825               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
  9589  02CC  008A               	movwf	10
  9590  02CD  0824               	movf	_EUSART_FramingErrorHandler^(0+128),w
  9591  02CE  000A               	callw
  9592  02CF  3182               	pagesel	$
  9593  02D0                     i1l2796:	
  9594                           
  9595                           ;eusart.c: 181: }
  9596                           ;eusart.c: 183: if(RC1STAbits.OERR){
  9597  02D0  0023               	movlb	3	; select bank3
  9598  02D1  1C9D               	btfss	29,1	;volatile
  9599  02D2  2ADF               	goto	i1l2802
  9600                           
  9601                           ;eusart.c: 184: eusartRxStatusBuffer[eusartRxHead].oerr = 1;
  9602  02D3  0020               	movlb	0	; select bank0
  9603  02D4  0857               	movf	_eusartRxHead,w	;volatile
  9604  02D5  3E3D               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  9605  02D6  0086               	movwf	6
  9606  02D7  0187               	clrf	7
  9607  02D8  1501               	bsf	1,2
  9608                           
  9609                           ;eusart.c: 185: EUSART_OverrunErrorHandler();
  9610  02D9  0021               	movlb	1	; select bank1
  9611  02DA  0823               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
  9612  02DB  008A               	movwf	10
  9613  02DC  0822               	movf	_EUSART_OverrunErrorHandler^(0+128),w
  9614  02DD  000A               	callw
  9615  02DE  3182               	pagesel	$
  9616  02DF                     i1l2802:	
  9617                           
  9618                           ;eusart.c: 186: }
  9619                           ;eusart.c: 188: if(eusartRxStatusBuffer[eusartRxHead].status){
  9620  02DF  0020               	movlb	0	; select bank0
  9621  02E0  0857               	movf	_eusartRxHead,w	;volatile
  9622  02E1  3E3D               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  9623  02E2  0086               	movwf	6
  9624  02E3  0187               	clrf	7
  9625  02E4  0801               	movf	1,w
  9626  02E5  1903               	btfsc	3,2
  9627  02E6  2AEE               	goto	i1l2806
  9628                           
  9629                           ;eusart.c: 189: EUSART_ErrorHandler();
  9630  02E7  0021               	movlb	1	; select bank1
  9631  02E8  0821               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
  9632  02E9  008A               	movwf	10
  9633  02EA  0820               	movf	_EUSART_ErrorHandler^(0+128),w
  9634  02EB  000A               	callw
  9635  02EC  3182               	pagesel	$
  9636                           
  9637                           ;eusart.c: 190: } else {
  9638  02ED  0008               	return
  9639  02EE                     i1l2806:	
  9640                           
  9641                           ;eusart.c: 191: EUSART_RxDataHandler();
  9642  02EE  3184  2483         	fcall	_EUSART_RxDataHandler
  9643  02F0  0008               	return
  9644  02F1                     __end_of_EUSART_Receive_ISR:	
  9645                           
  9646                           	psect	text73
  9647  0041                     __ptext73:	
  9648 ;; *************** function _MyUART_ISR *****************
  9649 ;; Defined at:
  9650 ;;		line 102 in file "main.c"
  9651 ;; Parameters:    Size  Location     Type
  9652 ;;		None
  9653 ;; Auto vars:     Size  Location     Type
  9654 ;;  c               1    5[COMMON] unsigned char 
  9655 ;; Return value:  Size  Location     Type
  9656 ;;                  1    wreg      void 
  9657 ;; Registers used:
  9658 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9659 ;; Tracked objects:
  9660 ;;		On entry : 0/0
  9661 ;;		On exit  : 0/0
  9662 ;;		Unchanged: 0/0
  9663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9665 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9666 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9667 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9668 ;;Total ram usage:        5 bytes
  9669 ;; Hardware stack levels used:    1
  9670 ;; Hardware stack levels required when called:    1
  9671 ;; This function calls:
  9672 ;;		_EUSART_Write
  9673 ;; This function is called by:
  9674 ;;		_main
  9675 ;;		_INTERRUPT_InterruptManager
  9676 ;; This function uses a non-reentrant model
  9677 ;;
  9678                           
  9679                           
  9680                           ;psect for function _MyUART_ISR
  9681  0041                     _MyUART_ISR:	
  9682                           
  9683                           ;main.c: 103: unsigned char c = RC1REG;
  9684                           
  9685                           ;incstack = 0
  9686                           ; Regs used in _MyUART_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9687  0041  0023               	movlb	3	; select bank3
  9688  0042  0819               	movf	25,w	;volatile
  9689  0043  00F1               	movwf	??_MyUART_ISR
  9690  0044  0871               	movf	??_MyUART_ISR,w
  9691  0045  00F5               	movwf	MyUART_ISR@c
  9692                           
  9693                           ;main.c: 104: if(c) {
  9694  0046  0875               	movf	MyUART_ISR@c,w
  9695  0047  1903               	btfsc	3,2
  9696  0048  0008               	return
  9697  0049  28EC               	goto	i1l2868
  9698  004A                     i1l2818:	
  9699                           ;main.c: 106: case S_Idle:
  9700                           
  9701                           ;main.c: 105: switch(PosUart) {
  9702                           
  9703                           
  9704                           ;main.c: 107: if(c == 'V' || c == 'A' || c == 'P' || c == 'L') {
  9705  004A  3056               	movlw	86
  9706  004B  0675               	xorwf	MyUART_ISR@c,w
  9707  004C  1903               	btfsc	3,2
  9708  004D  285A               	goto	i1l2826
  9709  004E  3041               	movlw	65
  9710  004F  0675               	xorwf	MyUART_ISR@c,w
  9711  0050  1903               	btfsc	3,2
  9712  0051  285A               	goto	i1l2826
  9713  0052  3050               	movlw	80
  9714  0053  0675               	xorwf	MyUART_ISR@c,w
  9715  0054  1903               	btfsc	3,2
  9716  0055  285A               	goto	i1l2826
  9717  0056  304C               	movlw	76
  9718  0057  0675               	xorwf	MyUART_ISR@c,w
  9719  0058  1D03               	btfss	3,2
  9720  0059  0008               	return
  9721  005A                     i1l2826:	
  9722                           
  9723                           ;main.c: 108: Type = c;
  9724  005A  0875               	movf	MyUART_ISR@c,w
  9725  005B  00F1               	movwf	??_MyUART_ISR
  9726  005C  0871               	movf	??_MyUART_ISR,w
  9727  005D  0020               	movlb	0	; select bank0
  9728  005E  00D2               	movwf	_Type
  9729                           
  9730                           ;main.c: 109: PosUart = S_Data;
  9731  005F  01D0               	clrf	_PosUart
  9732  0060  0AD0               	incf	_PosUart,f
  9733                           
  9734                           ;main.c: 110: }
  9735                           ;main.c: 111: break;
  9736  0061  0008               	return
  9737  0062                     i1l2830:	
  9738                           ;main.c: 112: case S_Data:
  9739                           
  9740                           
  9741                           ;main.c: 113: Data = c;
  9742  0062  0875               	movf	MyUART_ISR@c,w
  9743  0063  00F1               	movwf	??_MyUART_ISR
  9744  0064  0871               	movf	??_MyUART_ISR,w
  9745  0065  00D3               	movwf	_Data
  9746                           
  9747                           ;main.c: 114: PosUart = S_Check;
  9748  0066  3002               	movlw	2
  9749  0067  00F1               	movwf	??_MyUART_ISR
  9750  0068  0871               	movf	??_MyUART_ISR,w
  9751  0069  00D0               	movwf	_PosUart
  9752                           
  9753                           ;main.c: 115: break;
  9754  006A  0008               	return
  9755  006B                     i1l2832:	
  9756                           ;main.c: 116: case S_Check:
  9757                           
  9758                           
  9759                           ;main.c: 117: if((Type+Data)%256 == c) {
  9760  006B  0852               	movf	_Type,w
  9761  006C  0753               	addwf	_Data,w
  9762  006D  00F1               	movwf	??_MyUART_ISR
  9763  006E  01F2               	clrf	??_MyUART_ISR+1
  9764  006F  0DF2               	rlf	??_MyUART_ISR+1,f
  9765  0070  30FF               	movlw	255
  9766  0071  0571               	andwf	??_MyUART_ISR,w
  9767  0072  00F3               	movwf	??_MyUART_ISR+2
  9768  0073  3000               	movlw	0
  9769  0074  0572               	andwf	??_MyUART_ISR+1,w
  9770  0075  00F4               	movwf	??_MyUART_ISR+3
  9771  0076  0875               	movf	MyUART_ISR@c,w
  9772  0077  0673               	xorwf	??_MyUART_ISR+2,w
  9773  0078  0474               	iorwf	??_MyUART_ISR+3,w
  9774  0079  1D03               	skipz
  9775  007A  28DC               	goto	i1l2860
  9776                           
  9777                           ;main.c: 118: Validation = 4;
  9778  007B  3004               	movlw	4
  9779  007C  00F1               	movwf	??_MyUART_ISR
  9780  007D  0871               	movf	??_MyUART_ISR,w
  9781  007E  00EA               	movwf	_Validation
  9782                           
  9783                           ;main.c: 119: if(Type == 'V') {
  9784  007F  3056               	movlw	86
  9785  0080  0652               	xorwf	_Type,w
  9786  0081  1D03               	btfss	3,2
  9787  0082  288B               	goto	i1l2840
  9788                           
  9789                           ;main.c: 120: Vitesse = Data;
  9790  0083  0853               	movf	_Data,w
  9791  0084  00F1               	movwf	??_MyUART_ISR
  9792  0085  01F2               	clrf	??_MyUART_ISR+1
  9793  0086  0871               	movf	??_MyUART_ISR,w
  9794  0087  00CD               	movwf	_Vitesse
  9795  0088  0872               	movf	??_MyUART_ISR+1,w
  9796  0089  00CE               	movwf	_Vitesse+1
  9797                           
  9798                           ;main.c: 121: } else if(Type == 'A') {
  9799  008A  28E7               	goto	i1l2862
  9800  008B                     i1l2840:	
  9801  008B  3041               	movlw	65
  9802  008C  0652               	xorwf	_Type,w
  9803  008D  1D03               	btfss	3,2
  9804  008E  2897               	goto	i1l2844
  9805                           
  9806                           ;main.c: 122: Angle = Data;
  9807  008F  0853               	movf	_Data,w
  9808  0090  00F1               	movwf	??_MyUART_ISR
  9809  0091  01F2               	clrf	??_MyUART_ISR+1
  9810  0092  0871               	movf	??_MyUART_ISR,w
  9811  0093  00E7               	movwf	_Angle
  9812  0094  0872               	movf	??_MyUART_ISR+1,w
  9813  0095  00E8               	movwf	_Angle+1
  9814                           
  9815                           ;main.c: 123: } else if(Type == 'P') {
  9816  0096  28E7               	goto	i1l2862
  9817  0097                     i1l2844:	
  9818  0097  3050               	movlw	80
  9819  0098  0652               	xorwf	_Type,w
  9820  0099  1D03               	btfss	3,2
  9821  009A  28A5               	goto	i1l2848
  9822                           
  9823                           ;main.c: 124: EUSART_Write('P');
  9824  009B  3050               	movlw	80
  9825  009C  3185  258D  3180   	fcall	_EUSART_Write
  9826                           
  9827                           ;main.c: 125: EUSART_Write('+');
  9828  009F  302B               	movlw	43
  9829  00A0  3185  258D  3180   	fcall	_EUSART_Write
  9830                           
  9831                           ;main.c: 126: EUSART_Write('{');
  9832  00A3  307B               	movlw	123
  9833  00A4  28E5               	goto	L2
  9834  00A5                     i1l2848:	
  9835                           ;main.c: 127: } else if(Type == 'L') {
  9836                           
  9837  00A5  304C               	movlw	76
  9838  00A6  0020               	movlb	0	; select bank0
  9839  00A7  0652               	xorwf	_Type,w
  9840  00A8  1D03               	btfss	3,2
  9841  00A9  28D2               	goto	i1l2858
  9842                           
  9843                           ;main.c: 128: StateLeds++;
  9844  00AA  3001               	movlw	1
  9845  00AB  00F1               	movwf	??_MyUART_ISR
  9846  00AC  0871               	movf	??_MyUART_ISR,w
  9847  00AD  07CF               	addwf	_StateLeds,f
  9848                           
  9849                           ;main.c: 129: switch(StateLeds) {
  9850  00AE  28C3               	goto	i1l2856
  9851  00AF                     i1l846:	
  9852                           ;main.c: 131: do { LATCbits.LATC6 = 0; } while(0);
  9853                           
  9854                           ;main.c: 130: case S_leds_off:
  9855                           
  9856  00AF  0022               	movlb	2	; select bank2
  9857  00B0  130E               	bcf	14,6	;volatile
  9858  00B1  28B4               	goto	i1l854
  9859  00B2                     i1l852:	
  9860                           ;main.c: 135: do { LATCbits.LATC6 = 1; } while(0);
  9861                           
  9862                           ;main.c: 134: case S_led_r:
  9863                           
  9864                           ;main.c: 133: break;
  9865                           
  9866                           ;main.c: 132: do { LATCbits.LATC7 = 0; } while(0);
  9867                           
  9868  00B2  0022               	movlb	2	; select bank2
  9869  00B3  170E               	bsf	14,6	;volatile
  9870  00B4                     i1l854:	
  9871                           ;main.c: 136: do { LATCbits.LATC7 = 0; } while(0);
  9872                           
  9873  00B4  138E               	bcf	14,7	;volatile
  9874                           
  9875                           ;main.c: 137: break;
  9876  00B5  28E7               	goto	i1l2862
  9877  00B6                     i1l857:	
  9878                           ;main.c: 139: do { LATCbits.LATC6 = 0; } while(0);
  9879                           
  9880                           ;main.c: 138: case S_led_l:
  9881                           
  9882  00B6  0022               	movlb	2	; select bank2
  9883  00B7  130E               	bcf	14,6	;volatile
  9884  00B8  28BB               	goto	i1l864
  9885  00B9                     i1l862:	
  9886                           ;main.c: 143: do { LATCbits.LATC6 = 1; } while(0);
  9887                           
  9888                           ;main.c: 142: case S_leds_on:
  9889                           
  9890                           ;main.c: 141: break;
  9891                           
  9892                           ;main.c: 140: do { LATCbits.LATC7 = 1; } while(0);
  9893                           
  9894  00B9  0022               	movlb	2	; select bank2
  9895  00BA  170E               	bsf	14,6	;volatile
  9896  00BB                     i1l864:	
  9897                           ;main.c: 144: do { LATCbits.LATC7 = 1; } while(0);
  9898                           
  9899  00BB  178E               	bsf	14,7	;volatile
  9900                           
  9901                           ;main.c: 145: break;
  9902  00BC  28E7               	goto	i1l2862
  9903  00BD                     i1l867:	
  9904                           ;main.c: 147: do { LATCbits.LATC6 = 0; } while(0);
  9905                           
  9906                           ;main.c: 146: default:
  9907                           
  9908  00BD  0022               	movlb	2	; select bank2
  9909  00BE  130E               	bcf	14,6	;volatile
  9910                           
  9911                           ;main.c: 148: do { LATCbits.LATC7 = 0; } while(0);
  9912  00BF  138E               	bcf	14,7	;volatile
  9913                           
  9914                           ;main.c: 149: StateLeds = S_leds_off;
  9915  00C0  0020               	movlb	0	; select bank0
  9916  00C1  01CF               	clrf	_StateLeds
  9917                           
  9918                           ;main.c: 151: }
  9919                           
  9920                           ;main.c: 150: break;
  9921  00C2  28E7               	goto	i1l2862
  9922  00C3                     i1l2856:	
  9923  00C3  084F               	movf	_StateLeds,w
  9924                           
  9925                           ; Switch size 1, requested type "space"
  9926                           ; Number of cases is 4, Range of values is 0 to 3
  9927                           ; switch strategies available:
  9928                           ; Name         Instructions Cycles
  9929                           ; simple_byte           13     7 (average)
  9930                           ; direct_byte           14     6 (fixed)
  9931                           ; jumptable            260     6 (fixed)
  9932                           ;	Chosen strategy is simple_byte
  9933  00C4  3A00               	xorlw	0	; case 0
  9934  00C5  1903               	skipnz
  9935  00C6  28AF               	goto	i1l846
  9936  00C7  3A01               	xorlw	1	; case 1
  9937  00C8  1903               	skipnz
  9938  00C9  28B2               	goto	i1l852
  9939  00CA  3A03               	xorlw	3	; case 2
  9940  00CB  1903               	skipnz
  9941  00CC  28B6               	goto	i1l857
  9942  00CD  3A01               	xorlw	1	; case 3
  9943  00CE  1903               	skipnz
  9944  00CF  28B9               	goto	i1l862
  9945  00D0  28BD               	goto	i1l867
  9946                           
  9947                           ;main.c: 152: } else {
  9948  00D1  28E7               	goto	i1l2862
  9949  00D2                     i1l2858:	
  9950                           
  9951                           ;main.c: 153: EUSART_Write('$');
  9952  00D2  3024               	movlw	36
  9953  00D3  3185  258D  3180   	fcall	_EUSART_Write
  9954                           
  9955                           ;main.c: 154: EUSART_Write('M');
  9956  00D6  304D               	movlw	77
  9957  00D7  3185  258D  3180   	fcall	_EUSART_Write
  9958                           
  9959                           ;main.c: 155: EUSART_Write('q');
  9960  00DA  3071               	movlw	113
  9961  00DB  28E5               	goto	L2
  9962  00DC                     i1l2860:	
  9963                           ;main.c: 156: }
  9964                           ;main.c: 157: } else {
  9965                           
  9966                           
  9967                           ;main.c: 158: EUSART_Write('$');
  9968  00DC  3024               	movlw	36
  9969  00DD  3185  258D  3180   	fcall	_EUSART_Write
  9970                           
  9971                           ;main.c: 159: EUSART_Write('C');
  9972  00E0  3043               	movlw	67
  9973  00E1  3185  258D  3180   	fcall	_EUSART_Write
  9974                           
  9975                           ;main.c: 160: EUSART_Write('g');
  9976  00E4  3067               	movlw	103
  9977  00E5                     L2:	
  9978  00E5  3185  258D         	fcall	_EUSART_Write
  9979  00E7                     i1l2862:	
  9980                           
  9981                           ;main.c: 161: }
  9982                           ;main.c: 162: PosUart = S_Idle;
  9983  00E7  0020               	movlb	0	; select bank0
  9984  00E8  01D0               	clrf	_PosUart
  9985                           
  9986                           ;main.c: 163: break;
  9987  00E9  0008               	return
  9988  00EA                     i1l2864:	
  9989                           ;main.c: 164: default:
  9990                           
  9991                           
  9992                           ;main.c: 165: PosUart = S_Idle;
  9993  00EA  01D0               	clrf	_PosUart
  9994                           
  9995                           ;main.c: 167: }
  9996                           
  9997                           ;main.c: 166: break;
  9998  00EB  0008               	return
  9999  00EC                     i1l2868:	
 10000  00EC  0020               	movlb	0	; select bank0
 10001  00ED  0850               	movf	_PosUart,w
 10002                           
 10003                           ; Switch size 1, requested type "space"
 10004                           ; Number of cases is 3, Range of values is 0 to 2
 10005                           ; switch strategies available:
 10006                           ; Name         Instructions Cycles
 10007                           ; simple_byte           10     6 (average)
 10008                           ; direct_byte           12     6 (fixed)
 10009                           ; jumptable            260     6 (fixed)
 10010                           ;	Chosen strategy is simple_byte
 10011  00EE  3A00               	xorlw	0	; case 0
 10012  00EF  1903               	skipnz
 10013  00F0  284A               	goto	i1l2818
 10014  00F1  3A01               	xorlw	1	; case 1
 10015  00F2  1903               	skipnz
 10016  00F3  2862               	goto	i1l2830
 10017  00F4  3A03               	xorlw	3	; case 2
 10018  00F5  1903               	skipnz
 10019  00F6  286B               	goto	i1l2832
 10020  00F7  28EA               	goto	i1l2864
 10021  00F8  0008               	return
 10022  00F9                     __end_of_MyUART_ISR:	
 10023                           
 10024                           	psect	text74
 10025  058D                     __ptext74:	
 10026 ;; *************** function _EUSART_Write *****************
 10027 ;; Defined at:
 10028 ;;		line 162 in file "mcc_generated_files/eusart.c"
 10029 ;; Parameters:    Size  Location     Type
 10030 ;;  txData          1    wreg     unsigned char 
 10031 ;; Auto vars:     Size  Location     Type
 10032 ;;  txData          1    0[COMMON] unsigned char 
 10033 ;; Return value:  Size  Location     Type
 10034 ;;                  1    wreg      void 
 10035 ;; Registers used:
 10036 ;;		wreg
 10037 ;; Tracked objects:
 10038 ;;		On entry : 0/0
 10039 ;;		On exit  : 0/0
 10040 ;;		Unchanged: 0/0
 10041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10043 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10045 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10046 ;;Total ram usage:        1 bytes
 10047 ;; Hardware stack levels used:    1
 10048 ;; This function calls:
 10049 ;;		Nothing
 10050 ;; This function is called by:
 10051 ;;		_MyTimer2ISR
 10052 ;;		_MyUART_ISR
 10053 ;; This function uses a non-reentrant model
 10054 ;;
 10055                           
 10056                           
 10057                           ;psect for function _EUSART_Write
 10058  058D                     _EUSART_Write:	
 10059                           
 10060                           ;incstack = 0
 10061                           ; Regs used in _EUSART_Write: [wreg]
 10062                           ;EUSART_Write@txData stored from wreg
 10063  058D  00F0               	movwf	EUSART_Write@txData
 10064  058E                     i1l635:	
 10065                           ;eusart.c: 165: {
 10066                           
 10067                           ;eusart.c: 164: while(0 == PIR1bits.TXIF)
 10068                           
 10069  058E  0020               	movlb	0	; select bank0
 10070  058F  1E10               	btfss	16,4	;volatile
 10071  0590  2D8E               	goto	i1l635
 10072                           
 10073                           ;eusart.c: 166: }
 10074                           ;eusart.c: 168: TX1REG = txData;
 10075  0591  0870               	movf	EUSART_Write@txData,w
 10076  0592  0023               	movlb	3	; select bank3
 10077  0593  009A               	movwf	26	;volatile
 10078  0594  0008               	return
 10079  0595                     __end_of_EUSART_Write:	
 10080                           
 10081                           	psect	text75
 10082  0612                     __ptext75:	
 10083 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 10084 ;; Defined at:
 10085 ;;		line 209 in file "mcc_generated_files/eusart.c"
 10086 ;; Parameters:    Size  Location     Type
 10087 ;;		None
 10088 ;; Auto vars:     Size  Location     Type
 10089 ;;		None
 10090 ;; Return value:  Size  Location     Type
 10091 ;;                  1    wreg      void 
 10092 ;; Registers used:
 10093 ;;		None
 10094 ;; Tracked objects:
 10095 ;;		On entry : 0/0
 10096 ;;		On exit  : 0/0
 10097 ;;		Unchanged: 0/0
 10098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10102 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10103 ;;Total ram usage:        0 bytes
 10104 ;; Hardware stack levels used:    1
 10105 ;; This function calls:
 10106 ;;		Nothing
 10107 ;; This function is called by:
 10108 ;;		_EUSART_Initialize
 10109 ;;		_EUSART_Receive_ISR
 10110 ;; This function uses a non-reentrant model
 10111 ;;
 10112                           
 10113                           
 10114                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 10115  0612                     _EUSART_DefaultOverrunErrorHandler:	
 10116                           
 10117                           ;eusart.c: 212: RC1STAbits.CREN = 0;
 10118                           
 10119                           ;incstack = 0
 10120                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 10121  0612  0023               	movlb	3	; select bank3
 10122  0613  121D               	bcf	29,4	;volatile
 10123                           
 10124                           ;eusart.c: 213: RC1STAbits.CREN = 1;
 10125  0614  161D               	bsf	29,4	;volatile
 10126  0615  0008               	return
 10127  0616                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 10128                           
 10129                           	psect	text76
 10130  063F                     __ptext76:	
 10131 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 10132 ;; Defined at:
 10133 ;;		line 207 in file "mcc_generated_files/eusart.c"
 10134 ;; Parameters:    Size  Location     Type
 10135 ;;		None
 10136 ;; Auto vars:     Size  Location     Type
 10137 ;;		None
 10138 ;; Return value:  Size  Location     Type
 10139 ;;                  1    wreg      void 
 10140 ;; Registers used:
 10141 ;;		None
 10142 ;; Tracked objects:
 10143 ;;		On entry : 0/0
 10144 ;;		On exit  : 0/0
 10145 ;;		Unchanged: 0/0
 10146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10150 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10151 ;;Total ram usage:        0 bytes
 10152 ;; Hardware stack levels used:    1
 10153 ;; This function calls:
 10154 ;;		Nothing
 10155 ;; This function is called by:
 10156 ;;		_EUSART_Initialize
 10157 ;;		_EUSART_Receive_ISR
 10158 ;; This function uses a non-reentrant model
 10159 ;;
 10160                           
 10161                           
 10162                           ;psect for function _EUSART_DefaultFramingErrorHandler
 10163  063F                     _EUSART_DefaultFramingErrorHandler:	
 10164                           
 10165                           ;incstack = 0
 10166                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 10167  063F  0008               	return
 10168  0640                     __end_of_EUSART_DefaultFramingErrorHandler:	
 10169                           
 10170                           	psect	text77
 10171  0637                     __ptext77:	
 10172 ;; *************** function _EUSART_DefaultErrorHandler *****************
 10173 ;; Defined at:
 10174 ;;		line 217 in file "mcc_generated_files/eusart.c"
 10175 ;; Parameters:    Size  Location     Type
 10176 ;;		None
 10177 ;; Auto vars:     Size  Location     Type
 10178 ;;		None
 10179 ;; Return value:  Size  Location     Type
 10180 ;;                  1    wreg      void 
 10181 ;; Registers used:
 10182 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10183 ;; Tracked objects:
 10184 ;;		On entry : 0/0
 10185 ;;		On exit  : 0/0
 10186 ;;		Unchanged: 0/0
 10187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10192 ;;Total ram usage:        0 bytes
 10193 ;; Hardware stack levels used:    1
 10194 ;; Hardware stack levels required when called:    1
 10195 ;; This function calls:
 10196 ;;		_EUSART_RxDataHandler
 10197 ;; This function is called by:
 10198 ;;		_EUSART_Initialize
 10199 ;;		_EUSART_Receive_ISR
 10200 ;; This function uses a non-reentrant model
 10201 ;;
 10202                           
 10203                           
 10204                           ;psect for function _EUSART_DefaultErrorHandler
 10205  0637                     _EUSART_DefaultErrorHandler:	
 10206                           
 10207                           ;eusart.c: 218: EUSART_RxDataHandler();
 10208                           
 10209                           ;incstack = 0
 10210                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10211  0637  3184  2483         	fcall	_EUSART_RxDataHandler
 10212  0639  0008               	return
 10213  063A                     __end_of_EUSART_DefaultErrorHandler:	
 10214                           
 10215                           	psect	text78
 10216  0483                     __ptext78:	
 10217 ;; *************** function _EUSART_RxDataHandler *****************
 10218 ;; Defined at:
 10219 ;;		line 197 in file "mcc_generated_files/eusart.c"
 10220 ;; Parameters:    Size  Location     Type
 10221 ;;		None
 10222 ;; Auto vars:     Size  Location     Type
 10223 ;;		None
 10224 ;; Return value:  Size  Location     Type
 10225 ;;                  1    wreg      void 
 10226 ;; Registers used:
 10227 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10228 ;; Tracked objects:
 10229 ;;		On entry : 0/0
 10230 ;;		On exit  : 0/0
 10231 ;;		Unchanged: 0/0
 10232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10235 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10236 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10237 ;;Total ram usage:        1 bytes
 10238 ;; Hardware stack levels used:    1
 10239 ;; This function calls:
 10240 ;;		Nothing
 10241 ;; This function is called by:
 10242 ;;		_EUSART_Receive_ISR
 10243 ;;		_EUSART_DefaultErrorHandler
 10244 ;; This function uses a non-reentrant model
 10245 ;;
 10246                           
 10247                           
 10248                           ;psect for function _EUSART_RxDataHandler
 10249  0483                     _EUSART_RxDataHandler:	
 10250                           
 10251                           ;eusart.c: 199: eusartRxBuffer[eusartRxHead++] = RC1REG;
 10252                           
 10253                           ;incstack = 0
 10254                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 10255  0483  0023               	movlb	3	; select bank3
 10256  0484  0819               	movf	25,w	;volatile
 10257  0485  00F0               	movwf	??_EUSART_RxDataHandler
 10258  0486  0020               	movlb	0	; select bank0
 10259  0487  0857               	movf	_eusartRxHead,w
 10260  0488  3E45               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 10261  0489  0086               	movwf	6
 10262  048A  0187               	clrf	7
 10263  048B  0870               	movf	??_EUSART_RxDataHandler,w
 10264  048C  0081               	movwf	1
 10265  048D  3001               	movlw	1
 10266  048E  00F0               	movwf	??_EUSART_RxDataHandler
 10267  048F  0870               	movf	??_EUSART_RxDataHandler,w
 10268  0490  07D7               	addwf	_eusartRxHead,f	;volatile
 10269                           
 10270                           ;eusart.c: 200: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 10271  0491  3008               	movlw	8
 10272  0492  0257               	subwf	_eusartRxHead,w	;volatile
 10273  0493  1803               	btfsc	3,0
 10274                           
 10275                           ;eusart.c: 201: {
 10276                           ;eusart.c: 202: eusartRxHead = 0;
 10277  0494  01D7               	clrf	_eusartRxHead	;volatile
 10278                           
 10279                           ;eusart.c: 203: }
 10280                           ;eusart.c: 204: eusartRxCount++;
 10281  0495  3001               	movlw	1
 10282  0496  00F0               	movwf	??_EUSART_RxDataHandler
 10283  0497  0870               	movf	??_EUSART_RxDataHandler,w
 10284  0498  07D5               	addwf	_eusartRxCount,f	;volatile
 10285  0499  0008               	return
 10286  049A                     __end_of_EUSART_RxDataHandler:	
 10287  007E                     btemp	set	126	;btemp
 10288  007E                     int$flags	set	126
 10289  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    32
    Data        4
    BSS         56
    Persistent  10
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     11      75
    BANK1            80      4      10
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    I2C_Read1ByteRegister@returnValue.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Read2ByteRegister@returnValue.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Write1ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Write2ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    I2C_DO_TX$1910$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_RX$1916$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX_EMPTY$1922$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_RX_EMPTY$1928$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX_EMPTY$1927	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX_EMPTY$1922	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_DO_RX$1921	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_RX$1916	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_DO_TX$1915	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX$1910	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_MasterFsm$1909	const PTR FTN()enum E12103 size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    I2C_CallbackReturnStop@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_CallbackReturnReset@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    Absolute function$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S443$0$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyTimer2ISR(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyTimer2ISR(), TMR2_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyUART_ISR(), EUSART_Receive_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), Absolute function(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), Absolute function(), 

    I2C_SetCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_SetCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> Absolute function(), rd1RegCompleteHandler(), 

    I2C_SetAddressNackCallback@ptr	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    I2C_SetAddressNackCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> Absolute function(), 

    I2C_SetDataCompleteCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_SetDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> Absolute function(), rd1RegCompleteHandler(), 

    I2C_SetBuffer@buffer	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(BANK0[1]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S443$data_ptr	PTR unsigned char  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(BANK0[1]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_Status.data_ptr	PTR unsigned char  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(BANK0[1]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S443$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_Status.callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S443$callbackTable	PTR FTN(PTR void ,)enum E97[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_Status.callbackTable	PTR FTN(PTR void ,)enum E97[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    fsmStateTable	const PTR FTN()enum E12103[16] size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyUART_ISR(), EUSART_Receive_ISR(), Absolute function(), 

    rdBlkRegCompleteHandler@ptr.data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    wr2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    wr1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    rd2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    rd1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S85$data	PTR unsigned char  size(1) Largest target is 0

    bufferBlock.data	PTR unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _PWM3_LoadDutyValue->___lwdiv
    _I2C_SetAddressNackCallback->_I2C_SetCallback
    _I2C_MasterWrite->_I2C_MasterOperation
    _I2C_MasterFsm->_I2C_DO_TX
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnReset
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnStop
    _I2C_DO_TX_EMPTY->_rd1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rd2RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rdBlkRegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr2RegCompleteHandler
    _I2C_DO_TX->_I2C_CallbackReturnReset
    _I2C_DO_TX->_I2C_CallbackReturnStop
    _I2C_DO_TX->_rd1RegCompleteHandler
    _I2C_DO_TX->_rd2RegCompleteHandler
    _I2C_DO_TX->_rdBlkRegCompleteHandler
    _I2C_DO_TX->_wr1RegCompleteHandler
    _I2C_DO_TX->_wr2RegCompleteHandler
    _I2C_DO_SEND_ADR_WRITE->_I2C_MasterSendTxData
    _I2C_DO_RX->_I2C_CallbackReturnReset
    _I2C_DO_RX->_I2C_CallbackReturnStop
    _I2C_DO_RX->_rd1RegCompleteHandler
    _I2C_DO_RX->_rd2RegCompleteHandler
    _I2C_DO_RX->_rdBlkRegCompleteHandler
    _I2C_DO_RX->_wr1RegCompleteHandler
    _I2C_DO_RX->_wr2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnReset
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnStop
    _I2C_DO_ADDRESS_NACK->_rd1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rd2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rdBlkRegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr2RegCompleteHandler
    _wr2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _wr1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rdBlkRegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _I2C_SetDataCompleteCallback->_I2C_SetCallback
    _MyUART_ISR->_EUSART_Write
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _TMR2_ISR->_MyTimer2ISR
    _MyTimer2ISR->_I2C_Write1ByteRegister
    _I2C_MasterWrite->_I2C_MasterOperation
    _I2C_Poller->_I2C_MasterFsm

Critical Paths under _main in BANK1

    _main->_EUSART_SetRxInterruptHandler
    _main->_TMR2_SetInterruptHandler
    _main->_TMR2_WriteTimer
    _TMR2_WriteTimer->_TMR2_Counter8BitSet
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1269
                                              2 BANK1      2     2      0
       _EUSART_SetRxInterruptHandler
                  _SYSTEM_Initialize
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
                    _TMR2_WriteTimer
 ---------------------------------------------------------------------------------
 (1) _TMR2_WriteTimer                                      1     1      0      62
                                              1 BANK1      1     1      0
                _TMR2_Counter8BitSet
 ---------------------------------------------------------------------------------
 (2) _TMR2_Counter8BitSet                                  1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
                         _TMR2_Start
 ---------------------------------------------------------------------------------
 (2) _TMR2_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     785
                  _EUSART_Initialize
                     _I2C_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM3_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     211
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR2_SetInterruptHandler                             2     0      2     211
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     574
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     211
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     121
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     121
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     121
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           1     1      0   85279
                                             10 BANK0      1     1      0
                   Absolute function *
                 _EUSART_Receive_ISR *
                         _MyUART_ISR *
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR2_ISR                                             0     0      0   85080
                   Absolute function *
                        _MyTimer2ISR *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (6) _TMR2_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _MyTimer2ISR                                          1     1      0   85080
                                              9 BANK0      1     1      0
                       _EUSART_Write
             _I2C_Write1ByteRegister
                 _PWM3_LoadDutyValue
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (7) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (7) _PWM3_LoadDutyValue                                   4     2      2     120
                                              8 COMMON     4     2      2
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) _I2C_Write1ByteRegister                               4     2      2   84624
                                              5 BANK0      4     2      2
                          _I2C_Close
                    _I2C_MasterWrite
                           _I2C_Open
         _I2C_SetAddressNackCallback
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _I2C_SetAddressNackCallback                           4     1      3    1870
                                              5 COMMON     4     1      3
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (8) _I2C_Open                                             3     3      0      46
                                              0 COMMON     3     3      0
                 _I2C_MasterClearIrq
                     _I2C_MasterOpen
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterOpen                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C_MasterWrite                                      0     0      0   78324
                _I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterOperation                                  3     3      0   78324
                                             13 COMMON     1     1      0
                                              3 BANK0      2     2      0
                    _I2C_MasterStart
                         _I2C_Poller
 ---------------------------------------------------------------------------------
 (10) _I2C_Poller                                          0     0      0   78278
                      _I2C_MasterFsm
             _I2C_MasterWaitForEvent
 ---------------------------------------------------------------------------------
 (11) _I2C_MasterWaitForEvent                              0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _I2C_MasterFsm                                       3     3      0   78278
                                              0 BANK0      3     3      0
                _I2C_DO_ADDRESS_NACK *
                        _I2C_DO_IDLE *
                        _I2C_DO_RCEN *
                       _I2C_DO_RESET *
                          _I2C_DO_RX *
                      _I2C_DO_RX_ACK *
             _I2C_DO_RX_NACK_RESTART *
                _I2C_DO_RX_NACK_STOP *
               _I2C_DO_SEND_ADR_READ *
              _I2C_DO_SEND_ADR_WRITE *
                _I2C_DO_SEND_RESTART *
           _I2C_DO_SEND_RESTART_READ *
          _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_DO_SEND_STOP *
                          _I2C_DO_TX *
                    _I2C_DO_TX_EMPTY *
                 _I2C_MasterClearIrq
                   _I2C_MasterIsNack
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_TX_EMPTY                                     1     1      0   19547
                                             10 COMMON     1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
                   _I2C_MasterSetIrq
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (13) _I2C_MasterSetIrq                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_TX                                           3     3      0   19593
                                             10 COMMON     3     3      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
           _I2C_DO_SEND_RESTART_READ
          _I2C_DO_SEND_RESTART_WRITE
                   _I2C_DO_SEND_STOP
                   _I2C_MasterIsNack
               _I2C_MasterSendTxData
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (12) _I2C_MasterIsNack                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _I2C_DO_SEND_RESTART_WRITE                           0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (13) _I2C_DO_SEND_RESTART_READ                            0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_SEND_ADR_WRITE                               0     0      0      22
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_SEND_ADR_READ                                0     0      0      22
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (13) _I2C_MasterSendTxData                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_RX_ACK                                       0     0      0       0
                  _I2C_MasterSendAck
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_RX                                           1     1      0   19547
                                             10 COMMON     1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
             _I2C_DO_RX_NACK_RESTART
                _I2C_DO_RX_NACK_STOP
                _I2C_MasterGetRxData
                  _I2C_MasterSendAck
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (13) _I2C_MasterSendAck                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _I2C_MasterGetRxData                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_RX_NACK_STOP                                 0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_RX_NACK_RESTART                              0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (13) _I2C_MasterSendNack                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_RESET                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_RCEN                                         0     0      0       0
                  _I2C_MasterStartRx
 ---------------------------------------------------------------------------------
 (13) _I2C_MasterStartRx                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_IDLE                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_ADDRESS_NACK                                 1     1      0   19547
                                             10 COMMON     1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (13) _wr2RegCompleteHandler                               1     0      1    3852
                                              9 COMMON     1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (13) _wr1RegCompleteHandler                               1     0      1    3852
                                              9 COMMON     1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (13) _rdBlkRegCompleteHandler                             1     0      1    3874
                                              9 COMMON     1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (13) _rd2RegCompleteHandler                               1     0      1    3852
                                              9 COMMON     1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (13) _rd1RegCompleteHandler                               1     0      1    3852
                                              9 COMMON     1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _I2C_SetDataCompleteCallback                          4     1      3    2478
                                              5 COMMON     4     1      3
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (9) _I2C_SetCallback                                      5     2      3     914
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (8) _I2C_SetBuffer                                        4     2      2    1352
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (13) _I2C_DO_SEND_STOP                                    0     0      0       0
                     _I2C_MasterStop
 ---------------------------------------------------------------------------------
 (14) _I2C_MasterStop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _I2C_DO_SEND_RESTART                                 0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (14) _I2C_MasterEnableRestart                             0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _I2C_CallbackReturnStop                              1     0      1       0
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (13) _I2C_CallbackReturnReset                             1     0      1     265
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (10) _I2C_MasterStart                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C_Close                                            2     2      0      24
                                              0 COMMON     2     2      0
                 _I2C_MasterClearIrq
                    _I2C_MasterClose
               _I2C_MasterDisableIrq
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterDisableIrq                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterClose                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterClearIrq                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _MyUART_ISR                                           5     5      0     199
                                              1 COMMON     5     5      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (7) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Receive_ISR                                   0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (6) _EUSART_DefaultOverrunErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_DefaultFramingErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_DefaultErrorHandler                           0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (6) _EUSART_RxDataHandler                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_SetRxInterruptHandler
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
     _I2C_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM3_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
   _TMR2_SetInterruptHandler
   _TMR2_StartTimer
     _TMR2_Start
   _TMR2_WriteTimer
     _TMR2_Counter8BitSet

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _MyUART_ISR *
     _EUSART_Write
   _TMR2_ISR *
     Absolute function(Fake) *
     _MyTimer2ISR *
       _EUSART_Write
       _I2C_Write1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
       _PWM3_LoadDutyValue
         ___lwdiv (ARG)
       ___lwdiv
     _TMR2_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      B      4B       5       93.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      4       A       7       12.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      63      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      63      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Mar 30 16:40:51 2020

                ?_EUSART_SetRxInterruptHandler 00A6                         ??_I2C_DO_SEND_ADR_READ 0070  
                                  MyUART_ISR@c 0075                    __size_of_I2C_MasterSendNack 0004  
                           __size_of_I2C_Close 0019               __end_of_TMR2_SetInterruptHandler 057C  
                      ??_I2C_DO_SEND_ADR_WRITE 0071                                    __CFG_CP$OFF 0000  
                          __size_of_I2C_Poller 000A                          ??_I2C_DO_SEND_RESTART 0070  
                                  __CFG_LVP$ON 0000                   __size_of_I2C_MasterOperation 001A  
                __size_of_I2C_MasterSendTxData 0005                                            _PR2 001B  
                       ??_EUSART_RxDataHandler 0070                         _I2C_MasterWaitForEvent 05EA  
               ?_EUSART_SetFramingErrorHandler 00A6                                _TMR2_Initialize 04B0  
                                 __CFG_BORV$LO 0000                                            wreg 0009  
                                 __CFG_IESO$ON 0000                   ??_I2C_SetAddressNackCallback 0078  
                       _I2C_Write1ByteRegister 0357                       ??_I2C_CallbackReturnStop 007A  
                                 _I2C_DO_RESET 05D3                                   __CFG_ZCD$OFF 0000  
                      ??_rd2RegCompleteHandler 007A                                           l3190 01AA  
                                         l3182 01BE                                           l3192 01B5  
                                         l3184 018E                                           l3188 019C  
                                         _LATA 010C                                           u1510 01B3  
                                         _LATB 010D                                           _LATC 010E  
                                         u1537 01A2                                           u1490 019A  
                                         _T2PR 001B                                           u1547 01B9  
                                         _TMR2 001A                                           _WPUA 020C  
                                         _WPUB 020D                                           _WPUC 020E  
                                         _Data 0053                        ??_wr2RegCompleteHandler 007A  
                                 __CFG_WRT$OFF 0000                                  __CFG_FCMEN$ON 0000  
                                         _Type 0052                                           _main 016E  
                     ?_I2C_CallbackReturnReset 0079                                           fsr0h 0005  
                                         fsr1h 0007                                           indf0 0000  
                                         fsr0l 0004                                           indf1 0001  
                                         fsr1l 0006                               __end_of_I2C_Open 02BB  
                                         btemp 007E                                  __CFG_BOREN$ON 0000  
                                         start 0024                                  __CFG_MCLRE$ON 0000  
                          _TMR2_Counter8BitSet 05AF               __size_of_rdBlkRegCompleteHandler 0017  
                                _I2C_DO_TX$794 007B                               ?_I2C_MasterClose 0070  
                                __CFG_PLLEN$ON 0000                                  ?_EUSART_Write 0070  
          __size_of_I2C_SetAddressNackCallback 000C                 __size_of_OSCILLATOR_Initialize 0007  
                             ?_I2C_MasterStart 0070                                  _I2C_DO_RX_ACK 05F6  
                             ?_I2C_MasterWrite 0070                  __end_of_OSCILLATOR_Initialize 059C  
                                        ?_main 0070                                  __CFG_WDTE$OFF 0000  
                                        _T2CON 001C                                          _T2HLT 001D  
                              __end_of___lwdiv 0325                                          i1l123 001F  
                                        _T2TMR 001A                                          i1l118 0017  
                                        i1l321 02B9                                          _T2RST 001F  
                                        i1l403 0264                                          i1l544 05EA  
                                        i1l635 058E                                          i1l387 01F0  
                                        i1l852 00B2                                          i1l862 00B9  
                                        i1l854 00B4                                          i1l846 00AF  
                                        i1l864 00BB                                          i1l857 00B6  
                                        i1l867 00BD                   __size_of_I2C_DO_RX_NACK_STOP 0004  
                            ??_I2C_DO_TX_EMPTY 007A                                          _TRISA 008C  
                                        _TRISB 008D                                          _TRISC 008E  
                                        u93_25 04A9                                          u95_25 02FC  
                                        _RXPPS 0E24                                          u97_25 0306  
                                        u98_25 0310                                          u99_25 0318  
                                        _Angle 0067                           ?_TMR2_Counter8BitSet 0070  
                            __end_of_I2C_DO_RX 0284                              __end_of_I2C_DO_TX 020F  
                             __end_of_TMR2_ISR 0530                                    ?_TMR2_Start 0070  
                            __end_of_I2C_Close 046C                         __size_of_I2C_MasterFsm 0027  
               I2C_MasterOperation@returnValue 005C                                     _MyUART_ISR 0041  
                      _I2C_MasterEnableRestart 0628                        __end_of_PWM3_Initialize 055F  
                                        pclath 000A                               ?_I2C_SetCallback 0070  
                 I2C_SetAddressNackCallback@cb 0075                                          status 0003  
                                        wtemp0 007E                              ?_I2C_DO_SEND_STOP 0070  
                       __size_of_I2C_SetBuffer 000E                                _TMR2_StartTimer 0616  
                           ??_I2C_DO_SEND_STOP 0070                                  _fsmStateTable 0419  
                              __initialization 0026                                  ??_MyTimer2ISR 0061  
                                 __end_of_main 01C4              __size_of_I2C_DO_SEND_RESTART_READ 0004  
                    ?_I2C_DO_SEND_RESTART_READ 0070                                 ??_EUSART_Write 0070  
                               ?_I2C_DO_RX_ACK 0070                        __end_of_TMR2_Initialize 04C4  
                               __CFG_LPBOR$OFF 0000                    ?_INTERRUPT_InterruptManager 0070  
               ??_EUSART_SetRxInterruptHandler 00A8                       _TMR2_SetInterruptHandler 0573  
                                       ??_main 00A8                              ?_I2C_MasterIsNack 0070  
                              _TMR2_WriteTimer 05A9                              ?_I2C_MasterSetIrq 0070  
                           ??_I2C_MasterIsNack 0070                          ??_TMR2_Counter8BitSet 00A6  
                           ??_I2C_MasterSetIrq 0070      __end_of_EUSART_DefaultFramingErrorHandler 0640  
   __size_of_EUSART_DefaultFramingErrorHandler 0001            ??_EUSART_DefaultFramingErrorHandler 0070  
           ?_EUSART_DefaultFramingErrorHandler 0070              _EUSART_DefaultFramingErrorHandler 063F  
                   _EUSART_OverrunErrorHandler 00A2                __end_of_I2C_CallbackReturnReset 063C  
              __size_of_I2C_CallbackReturnStop 0002                  I2C_SetDataCompleteCallback@cb 0075  
                                       _ANSELA 018C                                         _ANSELB 018D  
                                       _ANSELC 018E                                         _BORCON 0116  
                                 ??_I2C_Poller 007D                                         _RC1REG 0199  
                                       _RA2PPS 0E92                                         _RC1STA 019D  
                                       _RB4PPS 0E9C                                         _RB6PPS 0E9E  
                                       _RB7PPS 0E9F                                         _ODCONA 028C  
                                       i1l2402 03B0                                         _ODCONB 028D  
                                       _ODCONC 028E                                         i1l2412 03B7  
                                       i1l2340 01CB                                         i1l2500 044B  
                                       i1l2406 03B3                                         i1l2344 01CE  
                                       i1l2504 0450                                         i1l2418 03BA  
                                       i1l2362 0209                                         i1l2354 01D4  
                                       i1l2442 0400                                         i1l2196 03E8  
                                       i1l2348 01D1                                         i1l2380 0266  
                                       i1l2460 0397                                         i1l2390 026C  
                                       i1l2438 03FD                                         i1l2470 0569  
                                       i1l2622 0317                                         i1l2614 02F9  
                                       i1l2560 046A                                         i1l2384 0269  
                                       i1l2448 0403                                         i1l2616 0305  
                                       i1l2802 02DF                                         i1l2626 0320  
                                       i1l2830 0062                                         i1l2806 02EE  
                                       i1l2566 0359                                         i1l2840 008B  
                                       i1l2832 006B                                         i1l2576 037F  
                                       i1l2826 005A                                         i1l2818 004A  
                                       i1l2498 0447                                         i1l2770 0149  
                                       i1l2762 0133                                         i1l2844 0097  
                                       i1l2860 00DC                                         i1l2756 0125  
                                       i1l2772 0153                                         i1l2862 00E7  
                                       i1l2766 013F                                         i1l2864 00EA  
                                       i1l2856 00C3                                         i1l2848 00A5  
                                       i1l2858 00D2                                         i1l2778 0165  
                                       i1l2868 00EC                                         i1l2796 02D0  
                                       _INLVLA 038C                                         _INLVLB 038D  
                                       _INLVLC 038E                                         _OSCCON 0099  
                                       _SPBRGH 019C                                         _SPBRGL 019B  
                                       _TX1REG 019A                                         _TX1STA 019E  
                                       _CptBat 0051                                     _Validation 006A  
                               __CFG_PWRTE$OFF 0000                            _I2C_MasterGetRxData 061F  
                  __size_of_PWM3_LoadDutyValue 0016                                  _I2C_MasterFsm 0386  
                               __CFG_STVREN$ON 0000                                      ??___lwdiv 0074  
                          __size_of_TMR2_Start 0003                              I2C_SetCallback@cb 0070  
                      __size_of_I2C_MasterOpen 000C                        __size_of_I2C_MasterStop 0003  
                      __size_of_I2C_Initialize 000A                                  _I2C_SetBuffer 0516  
                          __end_of_MyTimer2ISR 016E                             __end_of_I2C_Poller 0573  
                 __end_of_I2C_MasterDisableIrq 0631                            _I2C_DO_ADDRESS_NACK 03F6  
                         ?_I2C_MasterGetRxData 0070                                      ?_I2C_Open 0070  
           __end_of_I2C_SetAddressNackCallback 053C                     _I2C_SetAddressNackCallback 0530  
                    ??_I2C_MasterEnableRestart 0070                        __end_of_TMR2_StartTimer 0619  
     TMR2_SetInterruptHandler@InterruptHandler 00A6                                    ?_MyUART_ISR 0070  
                             ?_PWM3_Initialize 0070                              _SYSTEM_Initialize 04C4  
                      __end_of__initialization 003D                            _I2C_MasterOperation 0439  
                           ?_SYSTEM_Initialize 0070                           ?_I2C_DO_ADDRESS_NACK 0070  
                      _rdBlkRegCompleteHandler 046C                                 __pcstackCOMMON 0070  
                               ?_I2C_MasterFsm 0070                                ??_I2C_DO_RX_ACK 0070  
                                 __pidataBANK0 05E2                         _I2C_CallbackReturnStop 063C  
                          ??_SYSTEM_Initialize 00A8                                      ?_TMR2_ISR 0070  
                      __end_of_TMR2_WriteTimer 05AF                               ?_TMR2_Initialize 0070  
                               ?_I2C_SetBuffer 0070                        ?_I2C_MasterWaitForEvent 0070  
               __size_of_I2C_DO_SEND_ADR_WRITE 0007             __size_of_I2C_DO_SEND_RESTART_WRITE 0004  
                __end_of_I2C_DO_SEND_ADR_WRITE 05A3                     ?_I2C_DO_SEND_RESTART_WRITE 0070  
                         ?_I2C_MasterOperation 0070                          ??_I2C_MasterGetRxData 0070  
                      ?_I2C_Write1ByteRegister 005D                                 _OPTION_REGbits 0095  
                                   ??_I2C_Open 0070                           _eusartRxStatusBuffer 003D  
                   __end_of_I2C_MasterClearIrq 0637                ??_EUSART_SetOverrunErrorHandler 00A8  
                    __end_of_SYSTEM_Initialize 04D6                              _I2C_MasterSendAck 060A  
                                   __pbssBANK0 0020                           __end_of_EUSART_Write 0595  
                                ??_I2C_DO_IDLE 0070                 __size_of_rd2RegCompleteHandler 0010  
                                ??_I2C_DO_RCEN 0070                  __end_of_rd2RegCompleteHandler 04F6  
                 __end_of_I2C_MasterSendTxData 05E2                             ?_I2C_MasterSendAck 0070  
                            _I2C_MasterStartRx 0622                 __size_of_wr2RegCompleteHandler 0010  
                        ??_I2C_DO_ADDRESS_NACK 007A                  __end_of_wr2RegCompleteHandler 0516  
                  __size_of_EUSART_Receive_ISR 0036                            _I2C_DO_RX_NACK_STOP 05F2  
                        _rd1RegCompleteHandler 04F6                             ?_I2C_MasterStartRx 0070  
                   __end_of_I2C_MasterSendNack 0612                          _wr1RegCompleteHandler 04D6  
                                   __pmaintext 016E                            ??_I2C_MasterSendAck 0070  
                     rd1RegCompleteHandler@ptr 0079                    __end_of_I2C_DO_SEND_RESTART 0602  
                                  _MyTimer2ISR 00F9                                _I2C_DO_TX_EMPTY 03AD  
                          I2C_SetBuffer@buffer 0073                                __CFG_PPS1WAY$ON 0000  
                                   ??_TMR2_ISR 007E                                     __pintentry 0004  
               __end_of_I2C_MasterWaitForEvent 05EE                            ??_I2C_MasterStartRx 0070  
                __size_of_I2C_DO_SEND_ADR_READ 0008                            __size_of_MyUART_ISR 00B8  
             __size_of_I2C_CallbackReturnReset 0002                   ??_EUSART_DefaultErrorHandler 0071  
                        ??_I2C_MasterOperation 007D                 I2C_SetDataCompleteCallback@ptr 0077  
               __end_of_I2C_Write1ByteRegister 0386                       ??_I2C_DO_RX_NACK_RESTART 0070  
            __end_of_I2C_DO_SEND_RESTART_WRITE 0606                           ?_I2C_DO_RX_NACK_STOP 0070  
                                _eusartRxCount 0055                                __CFG_WDTCCS$SWC 0000  
                __size_of_EUSART_RxDataHandler 0017                      __end_of_I2C_MasterSendAck 060E  
                                      _OSCTUNE 0098                                        _PWM3DCH 0618  
                                      _PWM3DCL 0617                                        _PWM3CON 0619  
                                      _SSP1ADD 0212                                        _SLRCONA 030C  
                                      _SLRCONB 030D                                        _SLRCONC 030E  
                                      _SSP1BUF 0211                                   ??_TMR2_Start 00A6  
                     ??_EUSART_SetErrorHandler 00A8                               ?_TMR2_StartTimer 0070  
                    __end_of_I2C_MasterStartRx 0625                           I2C_Close@returnValue 0071  
                 ?_I2C_SetDataCompleteCallback 0075                                      _I2C_DO_RX 024A  
                                    _I2C_DO_TX 01C4               __end_of_I2C_DO_SEND_RESTART_READ 060A  
                                    _I2C_Close 0453                      ??_rdBlkRegCompleteHandler 007A  
                         _I2C_MasterDisableIrq 062E                                ??_I2C_MasterFsm 0058  
          __size_of_EUSART_DefaultErrorHandler 0003                     ??_TMR2_SetInterruptHandler 00A8  
                                      _PosUart 0050                            __end_of_I2C_DO_IDLE 05DD  
                          __end_of_I2C_DO_RCEN 05CD                                        _Vitesse 004D  
                              ??_I2C_SetBuffer 0072                                        ___lwdiv 02F1  
                             ?_TMR2_WriteTimer 0070                        I2C_SetBuffer@bufferSize 0070  
                           __end_of_TMR2_Start 061C                                 _I2C_MasterOpen 053C  
                               _I2C_MasterStop 0625                                 _I2C_Initialize 055F  
                    __size_of_I2C_DO_SEND_STOP 0004                                        __ptext1 05A9  
                                      __ptext2 05AF                                        __ptext3 0616  
                                      __ptext4 0619                                        __ptext5 04C4  
                                      __ptext6 04B0                                        __ptext7 0573  
                                      __ptext8 0554                                        __ptext9 020F  
                        ??_I2C_DO_RX_NACK_STOP 0070                          _OSCILLATOR_Initialize 0595  
                                    _T2CONbits 001C                             I2C_SetCallback@idx 0074  
                     __size_of_I2C_MasterClose 0003                       ??_PIN_MANAGER_Initialize 00A6  
                I2C_CallbackReturnReset@funPtr 0079                                      _T2HLTbits 001D  
                           I2C_SetCallback@ptr 0072                       wr1RegCompleteHandler@ptr 0079  
                    I2C_Write1ByteRegister@reg 005D                       __size_of_I2C_MasterStart 0003  
                     __size_of_I2C_MasterWrite 0004                     __size_of_SYSTEM_Initialize 0012  
                                      clrloop0 05A4                           end_of_initialization 003D  
                                    _T2RSTbits 001F                                     ?_I2C_DO_RX 0070  
                                   ?_I2C_DO_TX 0070          __end_of_EUSART_SetOverrunErrorHandler 05BB  
       __size_of_EUSART_SetOverrunErrorHandler 0006                  _EUSART_SetOverrunErrorHandler 05B5  
                    __size_of_I2C_MasterIsNack 0006                                     ?_I2C_Close 0070  
                       ?_rd1RegCompleteHandler 0079                        __end_of_I2C_DO_TX_EMPTY 03D2  
                    __size_of_I2C_MasterSetIrq 0003                          ?_I2C_MasterDisableIrq 0070  
                            _EUSART_Initialize 0325                         ?_wr1RegCompleteHandler 0079  
                           ?_EUSART_Initialize 0070                       __size_of_I2C_SetCallback 0024  
                       __end_of_I2C_MasterOpen 0548                         __end_of_I2C_MasterStop 0628  
                       __end_of_I2C_Initialize 0569                    __end_of_TMR2_Counter8BitSet 05B5  
                          ??_EUSART_Initialize 00A8                                      _PORTAbits 000C  
              __end_of_rdBlkRegCompleteHandler 0483                           _I2C_MasterSendTxData 05DD  
                                    _SSPDATPPS 0E21                __size_of_I2C_DO_RX_NACK_RESTART 0004  
                                    _SSPCLKPPS 0E20                               __CFG_FOSC$INTOSC 0000  
                  ?_I2C_SetAddressNackCallback 0075                          __size_of_EUSART_Write 0008  
                   __size_of_I2C_MasterSendAck 0004                              __size_of_I2C_Open 0037  
                                 ??_MyUART_ISR 0071                __size_of_EUSART_SetErrorHandler 0006  
                   __size_of_I2C_MasterStartRx 0003                        TMR2_WriteTimer@timerVal 00A7  
                    __end_of_EUSART_Initialize 0357                                    _I2C_DO_IDLE 05D8  
                                  _I2C_DO_RCEN 05C7                     rdBlkRegCompleteHandler@ptr 0079  
                I2C_Write1ByteRegister@address 0060                        ?_I2C_CallbackReturnStop 0079  
                   __end_of_PWM3_LoadDutyValue 04B0                       _I2C_DO_SEND_RESTART_READ 0606  
                 I2C_CallbackReturnStop@funPtr 0079                                ?_I2C_MasterOpen 0070  
                              ?_I2C_MasterStop 0070                                ?_I2C_Initialize 0070  
         __end_of_TMR2_DefaultInterruptHandler 063F          __size_of_TMR2_DefaultInterruptHandler 0001  
                 _TMR2_DefaultInterruptHandler 063E                        _I2C_CallbackReturnReset 063A  
           __end_of_EUSART_DefaultErrorHandler 063A                     _EUSART_DefaultErrorHandler 0637  
         __size_of_I2C_SetDataCompleteCallback 000C                                   _EUSART_Write 058D  
                            __size_of_TMR2_ISR 000C                             __end_of_MyUART_ISR 00F9  
                        ?_I2C_MasterSendTxData 0070                         ?_OSCILLATOR_Initialize 0070  
                  ??_I2C_DO_SEND_RESTART_WRITE 0070                            start_initialization 0026  
              __size_of_PIN_MANAGER_Initialize 003B                                  ?_I2C_DO_RESET 0070  
 EUSART_SetRxInterruptHandler@interruptHandler 00A6                                    ??_I2C_DO_RX 007A  
                                  ??_I2C_DO_TX 007A                              ??_I2C_MasterClose 0070  
                       ??_I2C_MasterDisableIrq 0070                                    ??_I2C_Close 0070  
                            ??_I2C_MasterStart 0070                              ??_I2C_MasterWrite 007E  
               __end_of_I2C_CallbackReturnStop 063E                         _I2C_DO_RX_NACK_RESTART 05EE  
                             ?_I2C_DO_TX_EMPTY 0070                             _I2C_MasterClearIrq 0634  
               ?_EUSART_SetOverrunErrorHandler 00A6                       __size_of_PWM3_Initialize 000B  
                   _EUSART_FramingErrorHandler 00A4                                   ?_MyTimer2ISR 0070  
                       _EUSART_SetErrorHandler 05C1                                    _CCPTMRSbits 029E  
                          ?_I2C_MasterClearIrq 0070                    __end_of_I2C_MasterGetRxData 0622  
                                  __pdataBANK0 0067                          __end_of_I2C_DO_RX_ACK 05FA  
                                    _StateLeds 004F                  ?_TMR2_DefaultInterruptHandler 0070  
                             _I2C_DO_SEND_STOP 05FA                              ??_I2C_SetCallback 0073  
                          I2C_Open@returnValue 0072                             _I2C_MasterSendNack 060E  
                     ?_I2C_MasterEnableRestart 0070                          _I2C_DO_SEND_ADR_WRITE 059C  
                                    ___latbits 0002                                  __pcstackBANK0 0058  
                                __pcstackBANK1 00A6                                 ??_I2C_DO_RESET 0070  
                     __size_of_TMR2_Initialize 0014                            ?_I2C_MasterSendNack 0070  
                 __end_of_I2C_DO_SEND_ADR_READ 058D                           ??_I2C_MasterClearIrq 0070  
                  __end_of_I2C_DO_ADDRESS_NACK 0419                     __end_of_EUSART_Receive_ISR 02F1  
                             _I2C_MasterIsNack 05CD                     __size_of_EUSART_Initialize 0032  
                    _I2C_DO_SEND_RESTART_WRITE 0602               _EUSART_RxDefaultInterruptHandler 0065  
                             _I2C_MasterSetIrq 061C                                      __pnvBANK0 0063  
                                    __pnvBANK1 00A0                          _rd2RegCompleteHandler 04E6  
                        __end_of_fsmStateTable 0439                   __end_of_EUSART_RxDataHandler 049A  
                             ___lwdiv@dividend 0072                         _PIN_MANAGER_Initialize 020F  
                        _wr2RegCompleteHandler 0506                      ??_I2C_CallbackReturnReset 007A  
                  __end_of_I2C_MasterOperation 0453                           ??_I2C_MasterSendNack 0070  
                     rd2RegCompleteHandler@ptr 0079                                       ?___lwdiv 0070  
                                 _eusartRxHead 0057                                   _eusartRxTail 0056  
                       ??_I2C_MasterSendTxData 0070                   ??_INTERRUPT_InterruptManager 0062  
                 __size_of_I2C_DO_SEND_RESTART 0004                                       _BAUD1CON 019F  
                      I2C_MasterOperation@read 005B                                       _I2C_Open 0284  
                             ___lwdiv@quotient 0075                                       _T2CLKCON 001E  
                      ??_rd1RegCompleteHandler 007A                                 _eusartRxBuffer 0045  
                      ??_wr1RegCompleteHandler 007A                                       _LATAbits 010C  
       EUSART_SetErrorHandler@interruptHandler 00A6                                       _LATCbits 010E  
                                    clear_ram0 05A3                                       _PIE1bits 0090  
                            _eusartRxLastError 0054                       __size_of_TMR2_StartTimer 0003  
          __size_of_INTERRUPT_InterruptManager 0020                                       _PIR1bits 0010  
              ??_EUSART_SetFramingErrorHandler 00A8                                       _PIR2bits 0011  
                        __end_of_I2C_MasterFsm 03AD                    __end_of_I2C_DO_RX_NACK_STOP 05F6  
                         __CFG_WDTCPS$WDTCPS1F 0000                                       _SSP1CON1 0215  
                                     _SSP1CON2 0216      __end_of_EUSART_DefaultOverrunErrorHandler 0616  
   __size_of_EUSART_DefaultOverrunErrorHandler 0004            ??_EUSART_DefaultOverrunErrorHandler 0070  
           ?_EUSART_DefaultOverrunErrorHandler 0070              _EUSART_DefaultOverrunErrorHandler 0612  
                                     _TMR2_ISR 0524                __end_of_I2C_MasterEnableRestart 062B  
                                     _SSP1STAT 0214                          __end_of_I2C_SetBuffer 0524  
                            ??_PWM3_Initialize 00A6                         ?_I2C_DO_SEND_ADR_WRITE 0070  
                     I2C_MasterSendTxData@data 0070                 ??_TMR2_DefaultInterruptHandler 0070  
            __size_of_TMR2_SetInterruptHandler 0009                       __size_of_TMR2_WriteTimer 0006  
                    ?_TMR2_SetInterruptHandler 00A6                       wr2RegCompleteHandler@ptr 0079  
                   ??_I2C_DO_SEND_RESTART_READ 0070                       ?_rdBlkRegCompleteHandler 0079  
                                   _I2C_Poller 0569                                     _I2C_Status 0020  
                                 ?_I2C_DO_IDLE 0070                                   ?_I2C_DO_RCEN 0070  
                            ??_TMR2_Initialize 00A8                         ?_rd2RegCompleteHandler 0079  
                             ??_I2C_MasterOpen 0070                         ?_wr2RegCompleteHandler 0079  
                             ??_I2C_MasterStop 0070                       ??_I2C_MasterWaitForEvent 0070  
                             ??_I2C_Initialize 00A6                           __end_of_I2C_DO_RESET 05D8  
                     ??_I2C_Write1ByteRegister 005F                                       _StateBat 0069  
                      ??_OSCILLATOR_Initialize 00A6                            _EUSART_ErrorHandler 00A0  
                         _I2C_DO_SEND_ADR_READ 0585                           __size_of_MyTimer2ISR 0075  
                  ?_EUSART_DefaultErrorHandler 0070                               __size_of___lwdiv 0034  
                           _PWM3_LoadDutyValue 049A                                _I2C_MasterClose 0631  
                I2C_SetAddressNackCallback@ptr 0077                                I2C_Open@address 0071  
                              _I2C_MasterStart 062B                                _I2C_MasterWrite 05E6  
                              ___lwdiv@divisor 0070                           _EUSART_RxDataHandler 0483  
                 __size_of_TMR2_Counter8BitSet 0006                                ___lwdiv@counter 0077  
                                     __ptext10 0595                                       __ptext11 055F  
                                     __ptext20 063E                                       __ptext12 0325  
                                     __ptext21 02F1                                       __ptext13 057C  
                                     __ptext30 05EA                                       __ptext22 049A  
                                     __ptext14 05B5                                       __ptext31 0386  
                                     __ptext23 0357                                       __ptext15 05BB  
                                     __ptext40 0606                                       __ptext32 03F6  
                                     __ptext24 0530                                       __ptext16 05C1  
                                     __ptext41 05C7                                       __ptext33 05D3  
                                     __ptext25 0284                                       __ptext50 05DD  
                                     __ptext42 024A                                       __ptext34 05EE  
                                     __ptext26 053C                                       __ptext18 0524  
                                     __ptext51 060A                                       __ptext43 01C4  
                                     __ptext35 05F2                                       __ptext27 05E6  
                                     __ptext19 00F9                                       __ptext60 04F6  
                                     __ptext52 061F                                       __ptext44 059C  
                                     __ptext36 05F6                                       __ptext28 0439  
                                     __ptext61 0506                                       __ptext53 060E  
                                     __ptext45 0585                                       __ptext37 05FA  
                                     __ptext29 0569                                       __ptext70 0631  
                                     __ptext62 0548                                       __ptext54 0622  
                                     __ptext46 05D8                                       __ptext38 05FE  
                                     __ptext71 0634                                       __ptext63 03D2  
                                     __ptext55 063A                                       __ptext47 03AD  
                                     __ptext39 0602                                       __ptext72 02BB  
                                     __ptext64 0516                                       __ptext56 063C  
                                     __ptext48 061C                                       __ptext73 0041  
                                     __ptext65 0625                                       __ptext57 046C  
                                     __ptext49 05CD                                       __ptext74 058D  
                                     __ptext66 0628                                       __ptext58 04D6  
                          ?_PWM3_LoadDutyValue 0078                                       __ptext75 0612  
                                     __ptext67 062B                                       __ptext59 04E6  
                                     __ptext76 063F                                       __ptext68 0453  
                                     __ptext77 0637                                       __ptext69 062E  
                                     __ptext78 0483                                   _SSP1CON1bits 0215  
                                 _SSP1CON2bits 0216            __end_of_I2C_SetDataCompleteCallback 0554  
                  _I2C_SetDataCompleteCallback 0548                        ?_I2C_DO_RX_NACK_RESTART 0070  
                     __end_of_I2C_DO_SEND_STOP 05FE                                  __size_of_main 0056  
                         __CFG_WDTCWS$WDTCWSSW 0000                        ?_EUSART_SetErrorHandler 00A6  
                              _I2C_SetCallback 03D2                  ??_I2C_SetDataCompleteCallback 0078  
                                   _RC1STAbits 019D                     I2C_Write1ByteRegister@data 005E  
EUSART_SetOverrunErrorHandler@interruptHandler 00A6                           ??_PWM3_LoadDutyValue 007A  
                                     int$flags 007E                          ?_I2C_DO_SEND_ADR_READ 0070  
                            ??_TMR2_StartTimer 00A6             __end_of_INTERRUPT_InterruptManager 0024  
                   _INTERRUPT_InterruptManager 0004          __end_of_EUSART_SetFramingErrorHandler 05C1  
       __size_of_EUSART_SetFramingErrorHandler 0006                  _EUSART_SetFramingErrorHandler 05BB  
                                 _SSP1STATbits 0214                       __end_of_I2C_MasterIsNack 05D3  
                     __end_of_I2C_MasterSetIrq 061F                                     _INTCONbits 000B  
                        ?_EUSART_RxDataHandler 0070                 __end_of_I2C_DO_RX_NACK_RESTART 05F2  
                  TMR2_Counter8BitSet@timerVal 00A6                                       intlevel1 0000  
                                  ?_I2C_Poller 0070                              ??_TMR2_WriteTimer 00A7  
             __size_of_I2C_MasterEnableRestart 0003                        ?_PIN_MANAGER_Initialize 0070  
               __end_of_EUSART_SetErrorHandler 05C7                              __CFG_CLKOUTEN$OFF 0000  
                          _I2C_DO_SEND_RESTART 05FE                  __size_of_I2C_MasterDisableIrq 0003  
         __end_of_EUSART_SetRxInterruptHandler 0585          __size_of_EUSART_SetRxInterruptHandler 0009  
                 _EUSART_SetRxInterruptHandler 057C                __size_of_I2C_MasterWaitForEvent 0004  
              __size_of_I2C_Write1ByteRegister 002F                             _EUSART_Receive_ISR 02BB  
EUSART_SetFramingErrorHandler@interruptHandler 00A6                        __end_of_I2C_MasterClose 0634  
                     __size_of_I2C_DO_TX_EMPTY 0025                    PWM3_LoadDutyValue@dutyValue 0078  
                      __end_of_I2C_MasterStart 062E                        __end_of_I2C_MasterWrite 05EA  
                                __pstringtext1 0419                           ?_I2C_DO_SEND_RESTART 0070  
                          ?_EUSART_Receive_ISR 0070                   __size_of_I2C_MasterGetRxData 0003  
                                   _TX1STAbits 019E                                     _TMR2_Start 0619  
                  __size_of_I2C_MasterClearIrq 0003                             EUSART_Write@txData 0070  
                      __end_of_I2C_SetCallback 03F6                 __end_of_PIN_MANAGER_Initialize 024A  
               __size_of_rd1RegCompleteHandler 0010                  __end_of_rd1RegCompleteHandler 0506  
                       __size_of_I2C_DO_RX_ACK 0004                 __size_of_wr1RegCompleteHandler 0010  
                         ??_EUSART_Receive_ISR 0071                          __size_of_I2C_DO_RESET 0005  
                __end_of_wr1RegCompleteHandler 04E6                          _TMR2_InterruptHandler 0063  
                 __size_of_I2C_DO_ADDRESS_NACK 0023                           __size_of_I2C_DO_IDLE 0005  
                         __size_of_I2C_DO_RCEN 0006                                _PWM3_Initialize 0554  
                           __size_of_I2C_DO_RX 003A                             __size_of_I2C_DO_TX 004B  
