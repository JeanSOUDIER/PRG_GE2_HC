

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Mar 23 17:30:21 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	text36,local,class=CODE,merge=1,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    60                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text49,local,class=CODE,merge=1,delta=2
    65                           	psect	text50,local,class=CODE,merge=1,delta=2
    66                           	psect	text51,local,class=CODE,merge=1,delta=2
    67                           	psect	text52,local,class=CODE,merge=1,delta=2
    68                           	psect	text53,local,class=CODE,merge=1,delta=2
    69                           	psect	text54,local,class=CODE,merge=1,delta=2
    70                           	psect	text55,local,class=CODE,merge=1,delta=2
    71                           	psect	text56,local,class=CODE,merge=1,delta=2
    72                           	psect	text57,local,class=CODE,merge=1,delta=2
    73                           	psect	text58,local,class=CODE,merge=1,delta=2
    74                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text62,local,class=CODE,merge=1,delta=2
    78                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text65,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	intentry,global,class=CODE,delta=2
    82                           	psect	text67,local,class=CODE,merge=1,delta=2
    83                           	psect	text68,local,class=CODE,merge=1,delta=2
    84                           	psect	text69,local,class=CODE,merge=1,delta=2
    85                           	psect	text70,local,class=CODE,merge=1,delta=2
    86                           	psect	text71,local,class=CODE,merge=1,delta=2,group=1
    87                           	psect	text72,local,class=CODE,merge=1,delta=2
    88                           	psect	text73,local,class=CODE,merge=1,delta=2
    89                           	psect	text74,local,class=CODE,merge=1,delta=2
    90                           	psect	text75,local,class=CODE,merge=1,delta=2
    91                           	psect	text76,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text77,local,class=CODE,merge=1,delta=2
    93                           	psect	text78,local,class=CODE,merge=1,delta=2
    94                           	psect	text79,local,class=CODE,merge=1,delta=2
    95                           	psect	text80,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text81,local,class=CODE,merge=1,inline,delta=2
    97                           	psect	text82,local,class=CODE,merge=1,delta=2
    98                           	psect	text83,local,class=CODE,merge=1,delta=2
    99                           	psect	text84,local,class=CODE,merge=1,delta=2
   100                           	psect	text85,local,class=CODE,merge=1,delta=2
   101                           	psect	text86,local,class=CODE,merge=1,delta=2
   102                           	psect	text87,local,class=CODE,merge=1,delta=2
   103                           	psect	text88,local,class=CODE,merge=1,delta=2
   104                           	psect	text89,local,class=CODE,merge=1,delta=2
   105                           	psect	text90,local,class=CODE,merge=1,delta=2
   106                           	psect	text91,local,class=CODE,merge=1,delta=2
   107                           	psect	text92,local,class=CODE,merge=1,delta=2
   108                           	psect	text93,local,class=CODE,merge=1,delta=2
   109                           	psect	text94,local,class=CODE,merge=1,delta=2
   110                           	psect	text95,local,class=CODE,merge=1,delta=2
   111                           	psect	text96,local,class=CODE,merge=1,delta=2
   112                           	psect	text97,local,class=CODE,merge=1,delta=2
   113                           	psect	text98,local,class=CODE,merge=1,inline,delta=2
   114                           	psect	text99,local,class=CODE,merge=1,inline,delta=2
   115                           	psect	text100,local,class=CODE,merge=1,inline,delta=2
   116                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   120                           	psect	text105,local,class=CODE,merge=1,delta=2
   121                           	psect	text106,local,class=CODE,merge=1,delta=2
   122                           	psect	text107,local,class=CODE,merge=1,delta=2
   123                           	psect	text108,local,class=CODE,merge=1,delta=2
   124                           	psect	text109,local,class=CODE,merge=1,delta=2
   125                           	psect	text110,local,class=CODE,merge=1,delta=2
   126                           	psect	text111,local,class=CODE,merge=1,delta=2
   127                           	psect	text112,local,class=CODE,merge=1,delta=2
   128                           	psect	text113,local,class=CODE,merge=1,delta=2
   129                           	psect	text114,local,class=CODE,merge=1,delta=2
   130                           	psect	text115,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text116,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text118,local,class=CODE,merge=1,delta=2
   134                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   137                           	psect	text122,local,class=CODE,merge=1,delta=2
   138                           	psect	text123,local,class=CODE,merge=1,delta=2
   139                           	psect	text124,local,class=CODE,merge=1,delta=2
   140                           	psect	text125,local,class=CODE,merge=1,delta=2
   141                           	psect	text126,local,class=CODE,merge=1,delta=2
   142                           	psect	text127,local,class=CODE,merge=1,delta=2
   143                           	psect	text128,local,class=CODE,merge=1,delta=2
   144                           	dabs	1,0x7E,2
   145  0000                     
   146                           ; Version 1.45
   147                           ; Generated 16/11/2017 GMT
   148                           ; 
   149                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   150                           ; All rights reserved.
   151                           ; 
   152                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   153                           ; 
   154                           ; Redistribution and use in source and binary forms, with or without modification, are
   155                           ; permitted provided that the following conditions are met:
   156                           ; 
   157                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   158                           ;        conditions and the following disclaimer.
   159                           ; 
   160                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   161                           ;        of conditions and the following disclaimer in the documentation and/or other
   162                           ;        materials provided with the distribution.
   163                           ; 
   164                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   165                           ;        software without specific prior written permission.
   166                           ; 
   167                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   168                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   169                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   170                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   171                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   172                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   173                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   174                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   175                           ; 
   176                           ; 
   177                           ; Code-generator required, PIC16F1619 Definitions
   178                           ; 
   179                           ; SFR Addresses
   180  0000                     	;# 
   181  0001                     	;# 
   182  0002                     	;# 
   183  0003                     	;# 
   184  0004                     	;# 
   185  0005                     	;# 
   186  0006                     	;# 
   187  0007                     	;# 
   188  0008                     	;# 
   189  0009                     	;# 
   190  000A                     	;# 
   191  000B                     	;# 
   192  000C                     	;# 
   193  000D                     	;# 
   194  000E                     	;# 
   195  0010                     	;# 
   196  0011                     	;# 
   197  0012                     	;# 
   198  0013                     	;# 
   199  0014                     	;# 
   200  0015                     	;# 
   201  0016                     	;# 
   202  0016                     	;# 
   203  0017                     	;# 
   204  0018                     	;# 
   205  0019                     	;# 
   206  001A                     	;# 
   207  001A                     	;# 
   208  001B                     	;# 
   209  001B                     	;# 
   210  001C                     	;# 
   211  001D                     	;# 
   212  001E                     	;# 
   213  001F                     	;# 
   214  008C                     	;# 
   215  008D                     	;# 
   216  008E                     	;# 
   217  0090                     	;# 
   218  0091                     	;# 
   219  0092                     	;# 
   220  0093                     	;# 
   221  0094                     	;# 
   222  0095                     	;# 
   223  0096                     	;# 
   224  0098                     	;# 
   225  0099                     	;# 
   226  009A                     	;# 
   227  009B                     	;# 
   228  009B                     	;# 
   229  009C                     	;# 
   230  009D                     	;# 
   231  009E                     	;# 
   232  009F                     	;# 
   233  010C                     	;# 
   234  010D                     	;# 
   235  010E                     	;# 
   236  0111                     	;# 
   237  0112                     	;# 
   238  0113                     	;# 
   239  0114                     	;# 
   240  0115                     	;# 
   241  0116                     	;# 
   242  0117                     	;# 
   243  0118                     	;# 
   244  0119                     	;# 
   245  011C                     	;# 
   246  018C                     	;# 
   247  018D                     	;# 
   248  018E                     	;# 
   249  0191                     	;# 
   250  0191                     	;# 
   251  0192                     	;# 
   252  0193                     	;# 
   253  0193                     	;# 
   254  0194                     	;# 
   255  0195                     	;# 
   256  0196                     	;# 
   257  0197                     	;# 
   258  0199                     	;# 
   259  0199                     	;# 
   260  0199                     	;# 
   261  019A                     	;# 
   262  019A                     	;# 
   263  019A                     	;# 
   264  019B                     	;# 
   265  019B                     	;# 
   266  019B                     	;# 
   267  019B                     	;# 
   268  019B                     	;# 
   269  019C                     	;# 
   270  019C                     	;# 
   271  019C                     	;# 
   272  019D                     	;# 
   273  019D                     	;# 
   274  019D                     	;# 
   275  019E                     	;# 
   276  019E                     	;# 
   277  019E                     	;# 
   278  019F                     	;# 
   279  019F                     	;# 
   280  019F                     	;# 
   281  019F                     	;# 
   282  019F                     	;# 
   283  020C                     	;# 
   284  020D                     	;# 
   285  020E                     	;# 
   286  0211                     	;# 
   287  0211                     	;# 
   288  0212                     	;# 
   289  0212                     	;# 
   290  0213                     	;# 
   291  0213                     	;# 
   292  0214                     	;# 
   293  0214                     	;# 
   294  0215                     	;# 
   295  0215                     	;# 
   296  0215                     	;# 
   297  0215                     	;# 
   298  0216                     	;# 
   299  0216                     	;# 
   300  0217                     	;# 
   301  0217                     	;# 
   302  028C                     	;# 
   303  028D                     	;# 
   304  028E                     	;# 
   305  0291                     	;# 
   306  0291                     	;# 
   307  0292                     	;# 
   308  0293                     	;# 
   309  0294                     	;# 
   310  0298                     	;# 
   311  0298                     	;# 
   312  0299                     	;# 
   313  029A                     	;# 
   314  029B                     	;# 
   315  029E                     	;# 
   316  030C                     	;# 
   317  030D                     	;# 
   318  030E                     	;# 
   319  038C                     	;# 
   320  038D                     	;# 
   321  038E                     	;# 
   322  0391                     	;# 
   323  0392                     	;# 
   324  0393                     	;# 
   325  0394                     	;# 
   326  0395                     	;# 
   327  0396                     	;# 
   328  0397                     	;# 
   329  0398                     	;# 
   330  0399                     	;# 
   331  040E                     	;# 
   332  0413                     	;# 
   333  0413                     	;# 
   334  0414                     	;# 
   335  0414                     	;# 
   336  0415                     	;# 
   337  0416                     	;# 
   338  0417                     	;# 
   339  0418                     	;# 
   340  041A                     	;# 
   341  041A                     	;# 
   342  041B                     	;# 
   343  041B                     	;# 
   344  041C                     	;# 
   345  041D                     	;# 
   346  041E                     	;# 
   347  041F                     	;# 
   348  0493                     	;# 
   349  0494                     	;# 
   350  0495                     	;# 
   351  0496                     	;# 
   352  049A                     	;# 
   353  049B                     	;# 
   354  049C                     	;# 
   355  049D                     	;# 
   356  058C                     	;# 
   357  058C                     	;# 
   358  058D                     	;# 
   359  058E                     	;# 
   360  058E                     	;# 
   361  058F                     	;# 
   362  0590                     	;# 
   363  0590                     	;# 
   364  0591                     	;# 
   365  0592                     	;# 
   366  0592                     	;# 
   367  0593                     	;# 
   368  0594                     	;# 
   369  0594                     	;# 
   370  0595                     	;# 
   371  0596                     	;# 
   372  0596                     	;# 
   373  0597                     	;# 
   374  0598                     	;# 
   375  0599                     	;# 
   376  059A                     	;# 
   377  059B                     	;# 
   378  059B                     	;# 
   379  059C                     	;# 
   380  059D                     	;# 
   381  060C                     	;# 
   382  060C                     	;# 
   383  060D                     	;# 
   384  060E                     	;# 
   385  060F                     	;# 
   386  060F                     	;# 
   387  0610                     	;# 
   388  0611                     	;# 
   389  0612                     	;# 
   390  0613                     	;# 
   391  0614                     	;# 
   392  0617                     	;# 
   393  0618                     	;# 
   394  0619                     	;# 
   395  061A                     	;# 
   396  061B                     	;# 
   397  061C                     	;# 
   398  0691                     	;# 
   399  0692                     	;# 
   400  0693                     	;# 
   401  0694                     	;# 
   402  0695                     	;# 
   403  0696                     	;# 
   404  0697                     	;# 
   405  0699                     	;# 
   406  069A                     	;# 
   407  0711                     	;# 
   408  0712                     	;# 
   409  0713                     	;# 
   410  0714                     	;# 
   411  0715                     	;# 
   412  0718                     	;# 
   413  0718                     	;# 
   414  0719                     	;# 
   415  071A                     	;# 
   416  071A                     	;# 
   417  071B                     	;# 
   418  071C                     	;# 
   419  071D                     	;# 
   420  0791                     	;# 
   421  0791                     	;# 
   422  0792                     	;# 
   423  0793                     	;# 
   424  0793                     	;# 
   425  0794                     	;# 
   426  0795                     	;# 
   427  0795                     	;# 
   428  0796                     	;# 
   429  0797                     	;# 
   430  0797                     	;# 
   431  0798                     	;# 
   432  0799                     	;# 
   433  079A                     	;# 
   434  080C                     	;# 
   435  080C                     	;# 
   436  080D                     	;# 
   437  080E                     	;# 
   438  080E                     	;# 
   439  080F                     	;# 
   440  0810                     	;# 
   441  0810                     	;# 
   442  0811                     	;# 
   443  0812                     	;# 
   444  0812                     	;# 
   445  0813                     	;# 
   446  0814                     	;# 
   447  0815                     	;# 
   448  0816                     	;# 
   449  0817                     	;# 
   450  0818                     	;# 
   451  0819                     	;# 
   452  081A                     	;# 
   453  081A                     	;# 
   454  081B                     	;# 
   455  081C                     	;# 
   456  081C                     	;# 
   457  081D                     	;# 
   458  088C                     	;# 
   459  088D                     	;# 
   460  088E                     	;# 
   461  088F                     	;# 
   462  088F                     	;# 
   463  0890                     	;# 
   464  0891                     	;# 
   465  0892                     	;# 
   466  0893                     	;# 
   467  0893                     	;# 
   468  0894                     	;# 
   469  0895                     	;# 
   470  0896                     	;# 
   471  0897                     	;# 
   472  0897                     	;# 
   473  0898                     	;# 
   474  0899                     	;# 
   475  0D8C                     	;# 
   476  0D8C                     	;# 
   477  0D8D                     	;# 
   478  0D8E                     	;# 
   479  0D8F                     	;# 
   480  0D8F                     	;# 
   481  0D90                     	;# 
   482  0D91                     	;# 
   483  0D92                     	;# 
   484  0D92                     	;# 
   485  0D93                     	;# 
   486  0D94                     	;# 
   487  0D95                     	;# 
   488  0D95                     	;# 
   489  0D96                     	;# 
   490  0D97                     	;# 
   491  0D98                     	;# 
   492  0D99                     	;# 
   493  0D9A                     	;# 
   494  0D9B                     	;# 
   495  0D9C                     	;# 
   496  0D9D                     	;# 
   497  0D9E                     	;# 
   498  0D9E                     	;# 
   499  0D9F                     	;# 
   500  0DA0                     	;# 
   501  0DA1                     	;# 
   502  0DA1                     	;# 
   503  0DA2                     	;# 
   504  0DA3                     	;# 
   505  0DA4                     	;# 
   506  0DA4                     	;# 
   507  0DA5                     	;# 
   508  0DA6                     	;# 
   509  0DA7                     	;# 
   510  0DA7                     	;# 
   511  0DA8                     	;# 
   512  0DA9                     	;# 
   513  0DAA                     	;# 
   514  0DAB                     	;# 
   515  0DAC                     	;# 
   516  0DAD                     	;# 
   517  0DAE                     	;# 
   518  0DAF                     	;# 
   519  0E0F                     	;# 
   520  0E10                     	;# 
   521  0E11                     	;# 
   522  0E12                     	;# 
   523  0E13                     	;# 
   524  0E14                     	;# 
   525  0E15                     	;# 
   526  0E16                     	;# 
   527  0E17                     	;# 
   528  0E18                     	;# 
   529  0E19                     	;# 
   530  0E1A                     	;# 
   531  0E1B                     	;# 
   532  0E1C                     	;# 
   533  0E1D                     	;# 
   534  0E1E                     	;# 
   535  0E1F                     	;# 
   536  0E20                     	;# 
   537  0E21                     	;# 
   538  0E22                     	;# 
   539  0E23                     	;# 
   540  0E24                     	;# 
   541  0E25                     	;# 
   542  0E26                     	;# 
   543  0E27                     	;# 
   544  0E28                     	;# 
   545  0E29                     	;# 
   546  0E2A                     	;# 
   547  0E2B                     	;# 
   548  0E2C                     	;# 
   549  0E2D                     	;# 
   550  0E2E                     	;# 
   551  0E90                     	;# 
   552  0E91                     	;# 
   553  0E92                     	;# 
   554  0E94                     	;# 
   555  0E95                     	;# 
   556  0E9C                     	;# 
   557  0E9D                     	;# 
   558  0E9E                     	;# 
   559  0E9F                     	;# 
   560  0EA0                     	;# 
   561  0EA1                     	;# 
   562  0EA2                     	;# 
   563  0EA3                     	;# 
   564  0EA4                     	;# 
   565  0EA5                     	;# 
   566  0EA6                     	;# 
   567  0EA7                     	;# 
   568  0F0F                     	;# 
   569  0F10                     	;# 
   570  0F11                     	;# 
   571  0F12                     	;# 
   572  0F13                     	;# 
   573  0F14                     	;# 
   574  0F15                     	;# 
   575  0F16                     	;# 
   576  0F17                     	;# 
   577  0F18                     	;# 
   578  0F19                     	;# 
   579  0F1A                     	;# 
   580  0F1B                     	;# 
   581  0F1C                     	;# 
   582  0F1D                     	;# 
   583  0F1E                     	;# 
   584  0F1F                     	;# 
   585  0F20                     	;# 
   586  0F21                     	;# 
   587  0F22                     	;# 
   588  0F23                     	;# 
   589  0F24                     	;# 
   590  0F25                     	;# 
   591  0F26                     	;# 
   592  0F27                     	;# 
   593  0F28                     	;# 
   594  0F29                     	;# 
   595  0F2A                     	;# 
   596  0F2B                     	;# 
   597  0F2C                     	;# 
   598  0F2D                     	;# 
   599  0F2E                     	;# 
   600  0F2F                     	;# 
   601  0F30                     	;# 
   602  0F31                     	;# 
   603  0F32                     	;# 
   604  0F33                     	;# 
   605  0F34                     	;# 
   606  0F35                     	;# 
   607  0F36                     	;# 
   608  0F37                     	;# 
   609  0FE4                     	;# 
   610  0FE5                     	;# 
   611  0FE6                     	;# 
   612  0FE7                     	;# 
   613  0FE8                     	;# 
   614  0FE9                     	;# 
   615  0FEA                     	;# 
   616  0FEB                     	;# 
   617  0FED                     	;# 
   618  0FEE                     	;# 
   619  0FEF                     	;# 
   620  0000                     	;# 
   621  0001                     	;# 
   622  0002                     	;# 
   623  0003                     	;# 
   624  0004                     	;# 
   625  0005                     	;# 
   626  0006                     	;# 
   627  0007                     	;# 
   628  0008                     	;# 
   629  0009                     	;# 
   630  000A                     	;# 
   631  000B                     	;# 
   632  000C                     	;# 
   633  000D                     	;# 
   634  000E                     	;# 
   635  0010                     	;# 
   636  0011                     	;# 
   637  0012                     	;# 
   638  0013                     	;# 
   639  0014                     	;# 
   640  0015                     	;# 
   641  0016                     	;# 
   642  0016                     	;# 
   643  0017                     	;# 
   644  0018                     	;# 
   645  0019                     	;# 
   646  001A                     	;# 
   647  001A                     	;# 
   648  001B                     	;# 
   649  001B                     	;# 
   650  001C                     	;# 
   651  001D                     	;# 
   652  001E                     	;# 
   653  001F                     	;# 
   654  008C                     	;# 
   655  008D                     	;# 
   656  008E                     	;# 
   657  0090                     	;# 
   658  0091                     	;# 
   659  0092                     	;# 
   660  0093                     	;# 
   661  0094                     	;# 
   662  0095                     	;# 
   663  0096                     	;# 
   664  0098                     	;# 
   665  0099                     	;# 
   666  009A                     	;# 
   667  009B                     	;# 
   668  009B                     	;# 
   669  009C                     	;# 
   670  009D                     	;# 
   671  009E                     	;# 
   672  009F                     	;# 
   673  010C                     	;# 
   674  010D                     	;# 
   675  010E                     	;# 
   676  0111                     	;# 
   677  0112                     	;# 
   678  0113                     	;# 
   679  0114                     	;# 
   680  0115                     	;# 
   681  0116                     	;# 
   682  0117                     	;# 
   683  0118                     	;# 
   684  0119                     	;# 
   685  011C                     	;# 
   686  018C                     	;# 
   687  018D                     	;# 
   688  018E                     	;# 
   689  0191                     	;# 
   690  0191                     	;# 
   691  0192                     	;# 
   692  0193                     	;# 
   693  0193                     	;# 
   694  0194                     	;# 
   695  0195                     	;# 
   696  0196                     	;# 
   697  0197                     	;# 
   698  0199                     	;# 
   699  0199                     	;# 
   700  0199                     	;# 
   701  019A                     	;# 
   702  019A                     	;# 
   703  019A                     	;# 
   704  019B                     	;# 
   705  019B                     	;# 
   706  019B                     	;# 
   707  019B                     	;# 
   708  019B                     	;# 
   709  019C                     	;# 
   710  019C                     	;# 
   711  019C                     	;# 
   712  019D                     	;# 
   713  019D                     	;# 
   714  019D                     	;# 
   715  019E                     	;# 
   716  019E                     	;# 
   717  019E                     	;# 
   718  019F                     	;# 
   719  019F                     	;# 
   720  019F                     	;# 
   721  019F                     	;# 
   722  019F                     	;# 
   723  020C                     	;# 
   724  020D                     	;# 
   725  020E                     	;# 
   726  0211                     	;# 
   727  0211                     	;# 
   728  0212                     	;# 
   729  0212                     	;# 
   730  0213                     	;# 
   731  0213                     	;# 
   732  0214                     	;# 
   733  0214                     	;# 
   734  0215                     	;# 
   735  0215                     	;# 
   736  0215                     	;# 
   737  0215                     	;# 
   738  0216                     	;# 
   739  0216                     	;# 
   740  0217                     	;# 
   741  0217                     	;# 
   742  028C                     	;# 
   743  028D                     	;# 
   744  028E                     	;# 
   745  0291                     	;# 
   746  0291                     	;# 
   747  0292                     	;# 
   748  0293                     	;# 
   749  0294                     	;# 
   750  0298                     	;# 
   751  0298                     	;# 
   752  0299                     	;# 
   753  029A                     	;# 
   754  029B                     	;# 
   755  029E                     	;# 
   756  030C                     	;# 
   757  030D                     	;# 
   758  030E                     	;# 
   759  038C                     	;# 
   760  038D                     	;# 
   761  038E                     	;# 
   762  0391                     	;# 
   763  0392                     	;# 
   764  0393                     	;# 
   765  0394                     	;# 
   766  0395                     	;# 
   767  0396                     	;# 
   768  0397                     	;# 
   769  0398                     	;# 
   770  0399                     	;# 
   771  040E                     	;# 
   772  0413                     	;# 
   773  0413                     	;# 
   774  0414                     	;# 
   775  0414                     	;# 
   776  0415                     	;# 
   777  0416                     	;# 
   778  0417                     	;# 
   779  0418                     	;# 
   780  041A                     	;# 
   781  041A                     	;# 
   782  041B                     	;# 
   783  041B                     	;# 
   784  041C                     	;# 
   785  041D                     	;# 
   786  041E                     	;# 
   787  041F                     	;# 
   788  0493                     	;# 
   789  0494                     	;# 
   790  0495                     	;# 
   791  0496                     	;# 
   792  049A                     	;# 
   793  049B                     	;# 
   794  049C                     	;# 
   795  049D                     	;# 
   796  058C                     	;# 
   797  058C                     	;# 
   798  058D                     	;# 
   799  058E                     	;# 
   800  058E                     	;# 
   801  058F                     	;# 
   802  0590                     	;# 
   803  0590                     	;# 
   804  0591                     	;# 
   805  0592                     	;# 
   806  0592                     	;# 
   807  0593                     	;# 
   808  0594                     	;# 
   809  0594                     	;# 
   810  0595                     	;# 
   811  0596                     	;# 
   812  0596                     	;# 
   813  0597                     	;# 
   814  0598                     	;# 
   815  0599                     	;# 
   816  059A                     	;# 
   817  059B                     	;# 
   818  059B                     	;# 
   819  059C                     	;# 
   820  059D                     	;# 
   821  060C                     	;# 
   822  060C                     	;# 
   823  060D                     	;# 
   824  060E                     	;# 
   825  060F                     	;# 
   826  060F                     	;# 
   827  0610                     	;# 
   828  0611                     	;# 
   829  0612                     	;# 
   830  0613                     	;# 
   831  0614                     	;# 
   832  0617                     	;# 
   833  0618                     	;# 
   834  0619                     	;# 
   835  061A                     	;# 
   836  061B                     	;# 
   837  061C                     	;# 
   838  0691                     	;# 
   839  0692                     	;# 
   840  0693                     	;# 
   841  0694                     	;# 
   842  0695                     	;# 
   843  0696                     	;# 
   844  0697                     	;# 
   845  0699                     	;# 
   846  069A                     	;# 
   847  0711                     	;# 
   848  0712                     	;# 
   849  0713                     	;# 
   850  0714                     	;# 
   851  0715                     	;# 
   852  0718                     	;# 
   853  0718                     	;# 
   854  0719                     	;# 
   855  071A                     	;# 
   856  071A                     	;# 
   857  071B                     	;# 
   858  071C                     	;# 
   859  071D                     	;# 
   860  0791                     	;# 
   861  0791                     	;# 
   862  0792                     	;# 
   863  0793                     	;# 
   864  0793                     	;# 
   865  0794                     	;# 
   866  0795                     	;# 
   867  0795                     	;# 
   868  0796                     	;# 
   869  0797                     	;# 
   870  0797                     	;# 
   871  0798                     	;# 
   872  0799                     	;# 
   873  079A                     	;# 
   874  080C                     	;# 
   875  080C                     	;# 
   876  080D                     	;# 
   877  080E                     	;# 
   878  080E                     	;# 
   879  080F                     	;# 
   880  0810                     	;# 
   881  0810                     	;# 
   882  0811                     	;# 
   883  0812                     	;# 
   884  0812                     	;# 
   885  0813                     	;# 
   886  0814                     	;# 
   887  0815                     	;# 
   888  0816                     	;# 
   889  0817                     	;# 
   890  0818                     	;# 
   891  0819                     	;# 
   892  081A                     	;# 
   893  081A                     	;# 
   894  081B                     	;# 
   895  081C                     	;# 
   896  081C                     	;# 
   897  081D                     	;# 
   898  088C                     	;# 
   899  088D                     	;# 
   900  088E                     	;# 
   901  088F                     	;# 
   902  088F                     	;# 
   903  0890                     	;# 
   904  0891                     	;# 
   905  0892                     	;# 
   906  0893                     	;# 
   907  0893                     	;# 
   908  0894                     	;# 
   909  0895                     	;# 
   910  0896                     	;# 
   911  0897                     	;# 
   912  0897                     	;# 
   913  0898                     	;# 
   914  0899                     	;# 
   915  0D8C                     	;# 
   916  0D8C                     	;# 
   917  0D8D                     	;# 
   918  0D8E                     	;# 
   919  0D8F                     	;# 
   920  0D8F                     	;# 
   921  0D90                     	;# 
   922  0D91                     	;# 
   923  0D92                     	;# 
   924  0D92                     	;# 
   925  0D93                     	;# 
   926  0D94                     	;# 
   927  0D95                     	;# 
   928  0D95                     	;# 
   929  0D96                     	;# 
   930  0D97                     	;# 
   931  0D98                     	;# 
   932  0D99                     	;# 
   933  0D9A                     	;# 
   934  0D9B                     	;# 
   935  0D9C                     	;# 
   936  0D9D                     	;# 
   937  0D9E                     	;# 
   938  0D9E                     	;# 
   939  0D9F                     	;# 
   940  0DA0                     	;# 
   941  0DA1                     	;# 
   942  0DA1                     	;# 
   943  0DA2                     	;# 
   944  0DA3                     	;# 
   945  0DA4                     	;# 
   946  0DA4                     	;# 
   947  0DA5                     	;# 
   948  0DA6                     	;# 
   949  0DA7                     	;# 
   950  0DA7                     	;# 
   951  0DA8                     	;# 
   952  0DA9                     	;# 
   953  0DAA                     	;# 
   954  0DAB                     	;# 
   955  0DAC                     	;# 
   956  0DAD                     	;# 
   957  0DAE                     	;# 
   958  0DAF                     	;# 
   959  0E0F                     	;# 
   960  0E10                     	;# 
   961  0E11                     	;# 
   962  0E12                     	;# 
   963  0E13                     	;# 
   964  0E14                     	;# 
   965  0E15                     	;# 
   966  0E16                     	;# 
   967  0E17                     	;# 
   968  0E18                     	;# 
   969  0E19                     	;# 
   970  0E1A                     	;# 
   971  0E1B                     	;# 
   972  0E1C                     	;# 
   973  0E1D                     	;# 
   974  0E1E                     	;# 
   975  0E1F                     	;# 
   976  0E20                     	;# 
   977  0E21                     	;# 
   978  0E22                     	;# 
   979  0E23                     	;# 
   980  0E24                     	;# 
   981  0E25                     	;# 
   982  0E26                     	;# 
   983  0E27                     	;# 
   984  0E28                     	;# 
   985  0E29                     	;# 
   986  0E2A                     	;# 
   987  0E2B                     	;# 
   988  0E2C                     	;# 
   989  0E2D                     	;# 
   990  0E2E                     	;# 
   991  0E90                     	;# 
   992  0E91                     	;# 
   993  0E92                     	;# 
   994  0E94                     	;# 
   995  0E95                     	;# 
   996  0E9C                     	;# 
   997  0E9D                     	;# 
   998  0E9E                     	;# 
   999  0E9F                     	;# 
  1000  0EA0                     	;# 
  1001  0EA1                     	;# 
  1002  0EA2                     	;# 
  1003  0EA3                     	;# 
  1004  0EA4                     	;# 
  1005  0EA5                     	;# 
  1006  0EA6                     	;# 
  1007  0EA7                     	;# 
  1008  0F0F                     	;# 
  1009  0F10                     	;# 
  1010  0F11                     	;# 
  1011  0F12                     	;# 
  1012  0F13                     	;# 
  1013  0F14                     	;# 
  1014  0F15                     	;# 
  1015  0F16                     	;# 
  1016  0F17                     	;# 
  1017  0F18                     	;# 
  1018  0F19                     	;# 
  1019  0F1A                     	;# 
  1020  0F1B                     	;# 
  1021  0F1C                     	;# 
  1022  0F1D                     	;# 
  1023  0F1E                     	;# 
  1024  0F1F                     	;# 
  1025  0F20                     	;# 
  1026  0F21                     	;# 
  1027  0F22                     	;# 
  1028  0F23                     	;# 
  1029  0F24                     	;# 
  1030  0F25                     	;# 
  1031  0F26                     	;# 
  1032  0F27                     	;# 
  1033  0F28                     	;# 
  1034  0F29                     	;# 
  1035  0F2A                     	;# 
  1036  0F2B                     	;# 
  1037  0F2C                     	;# 
  1038  0F2D                     	;# 
  1039  0F2E                     	;# 
  1040  0F2F                     	;# 
  1041  0F30                     	;# 
  1042  0F31                     	;# 
  1043  0F32                     	;# 
  1044  0F33                     	;# 
  1045  0F34                     	;# 
  1046  0F35                     	;# 
  1047  0F36                     	;# 
  1048  0F37                     	;# 
  1049  0FE4                     	;# 
  1050  0FE5                     	;# 
  1051  0FE6                     	;# 
  1052  0FE7                     	;# 
  1053  0FE8                     	;# 
  1054  0FE9                     	;# 
  1055  0FEA                     	;# 
  1056  0FEB                     	;# 
  1057  0FED                     	;# 
  1058  0FEE                     	;# 
  1059  0FEF                     	;# 
  1060  0000                     	;# 
  1061  0001                     	;# 
  1062  0002                     	;# 
  1063  0003                     	;# 
  1064  0004                     	;# 
  1065  0005                     	;# 
  1066  0006                     	;# 
  1067  0007                     	;# 
  1068  0008                     	;# 
  1069  0009                     	;# 
  1070  000A                     	;# 
  1071  000B                     	;# 
  1072  000C                     	;# 
  1073  000D                     	;# 
  1074  000E                     	;# 
  1075  0010                     	;# 
  1076  0011                     	;# 
  1077  0012                     	;# 
  1078  0013                     	;# 
  1079  0014                     	;# 
  1080  0015                     	;# 
  1081  0016                     	;# 
  1082  0016                     	;# 
  1083  0017                     	;# 
  1084  0018                     	;# 
  1085  0019                     	;# 
  1086  001A                     	;# 
  1087  001A                     	;# 
  1088  001B                     	;# 
  1089  001B                     	;# 
  1090  001C                     	;# 
  1091  001D                     	;# 
  1092  001E                     	;# 
  1093  001F                     	;# 
  1094  008C                     	;# 
  1095  008D                     	;# 
  1096  008E                     	;# 
  1097  0090                     	;# 
  1098  0091                     	;# 
  1099  0092                     	;# 
  1100  0093                     	;# 
  1101  0094                     	;# 
  1102  0095                     	;# 
  1103  0096                     	;# 
  1104  0098                     	;# 
  1105  0099                     	;# 
  1106  009A                     	;# 
  1107  009B                     	;# 
  1108  009B                     	;# 
  1109  009C                     	;# 
  1110  009D                     	;# 
  1111  009E                     	;# 
  1112  009F                     	;# 
  1113  010C                     	;# 
  1114  010D                     	;# 
  1115  010E                     	;# 
  1116  0111                     	;# 
  1117  0112                     	;# 
  1118  0113                     	;# 
  1119  0114                     	;# 
  1120  0115                     	;# 
  1121  0116                     	;# 
  1122  0117                     	;# 
  1123  0118                     	;# 
  1124  0119                     	;# 
  1125  011C                     	;# 
  1126  018C                     	;# 
  1127  018D                     	;# 
  1128  018E                     	;# 
  1129  0191                     	;# 
  1130  0191                     	;# 
  1131  0192                     	;# 
  1132  0193                     	;# 
  1133  0193                     	;# 
  1134  0194                     	;# 
  1135  0195                     	;# 
  1136  0196                     	;# 
  1137  0197                     	;# 
  1138  0199                     	;# 
  1139  0199                     	;# 
  1140  0199                     	;# 
  1141  019A                     	;# 
  1142  019A                     	;# 
  1143  019A                     	;# 
  1144  019B                     	;# 
  1145  019B                     	;# 
  1146  019B                     	;# 
  1147  019B                     	;# 
  1148  019B                     	;# 
  1149  019C                     	;# 
  1150  019C                     	;# 
  1151  019C                     	;# 
  1152  019D                     	;# 
  1153  019D                     	;# 
  1154  019D                     	;# 
  1155  019E                     	;# 
  1156  019E                     	;# 
  1157  019E                     	;# 
  1158  019F                     	;# 
  1159  019F                     	;# 
  1160  019F                     	;# 
  1161  019F                     	;# 
  1162  019F                     	;# 
  1163  020C                     	;# 
  1164  020D                     	;# 
  1165  020E                     	;# 
  1166  0211                     	;# 
  1167  0211                     	;# 
  1168  0212                     	;# 
  1169  0212                     	;# 
  1170  0213                     	;# 
  1171  0213                     	;# 
  1172  0214                     	;# 
  1173  0214                     	;# 
  1174  0215                     	;# 
  1175  0215                     	;# 
  1176  0215                     	;# 
  1177  0215                     	;# 
  1178  0216                     	;# 
  1179  0216                     	;# 
  1180  0217                     	;# 
  1181  0217                     	;# 
  1182  028C                     	;# 
  1183  028D                     	;# 
  1184  028E                     	;# 
  1185  0291                     	;# 
  1186  0291                     	;# 
  1187  0292                     	;# 
  1188  0293                     	;# 
  1189  0294                     	;# 
  1190  0298                     	;# 
  1191  0298                     	;# 
  1192  0299                     	;# 
  1193  029A                     	;# 
  1194  029B                     	;# 
  1195  029E                     	;# 
  1196  030C                     	;# 
  1197  030D                     	;# 
  1198  030E                     	;# 
  1199  038C                     	;# 
  1200  038D                     	;# 
  1201  038E                     	;# 
  1202  0391                     	;# 
  1203  0392                     	;# 
  1204  0393                     	;# 
  1205  0394                     	;# 
  1206  0395                     	;# 
  1207  0396                     	;# 
  1208  0397                     	;# 
  1209  0398                     	;# 
  1210  0399                     	;# 
  1211  040E                     	;# 
  1212  0413                     	;# 
  1213  0413                     	;# 
  1214  0414                     	;# 
  1215  0414                     	;# 
  1216  0415                     	;# 
  1217  0416                     	;# 
  1218  0417                     	;# 
  1219  0418                     	;# 
  1220  041A                     	;# 
  1221  041A                     	;# 
  1222  041B                     	;# 
  1223  041B                     	;# 
  1224  041C                     	;# 
  1225  041D                     	;# 
  1226  041E                     	;# 
  1227  041F                     	;# 
  1228  0493                     	;# 
  1229  0494                     	;# 
  1230  0495                     	;# 
  1231  0496                     	;# 
  1232  049A                     	;# 
  1233  049B                     	;# 
  1234  049C                     	;# 
  1235  049D                     	;# 
  1236  058C                     	;# 
  1237  058C                     	;# 
  1238  058D                     	;# 
  1239  058E                     	;# 
  1240  058E                     	;# 
  1241  058F                     	;# 
  1242  0590                     	;# 
  1243  0590                     	;# 
  1244  0591                     	;# 
  1245  0592                     	;# 
  1246  0592                     	;# 
  1247  0593                     	;# 
  1248  0594                     	;# 
  1249  0594                     	;# 
  1250  0595                     	;# 
  1251  0596                     	;# 
  1252  0596                     	;# 
  1253  0597                     	;# 
  1254  0598                     	;# 
  1255  0599                     	;# 
  1256  059A                     	;# 
  1257  059B                     	;# 
  1258  059B                     	;# 
  1259  059C                     	;# 
  1260  059D                     	;# 
  1261  060C                     	;# 
  1262  060C                     	;# 
  1263  060D                     	;# 
  1264  060E                     	;# 
  1265  060F                     	;# 
  1266  060F                     	;# 
  1267  0610                     	;# 
  1268  0611                     	;# 
  1269  0612                     	;# 
  1270  0613                     	;# 
  1271  0614                     	;# 
  1272  0617                     	;# 
  1273  0618                     	;# 
  1274  0619                     	;# 
  1275  061A                     	;# 
  1276  061B                     	;# 
  1277  061C                     	;# 
  1278  0691                     	;# 
  1279  0692                     	;# 
  1280  0693                     	;# 
  1281  0694                     	;# 
  1282  0695                     	;# 
  1283  0696                     	;# 
  1284  0697                     	;# 
  1285  0699                     	;# 
  1286  069A                     	;# 
  1287  0711                     	;# 
  1288  0712                     	;# 
  1289  0713                     	;# 
  1290  0714                     	;# 
  1291  0715                     	;# 
  1292  0718                     	;# 
  1293  0718                     	;# 
  1294  0719                     	;# 
  1295  071A                     	;# 
  1296  071A                     	;# 
  1297  071B                     	;# 
  1298  071C                     	;# 
  1299  071D                     	;# 
  1300  0791                     	;# 
  1301  0791                     	;# 
  1302  0792                     	;# 
  1303  0793                     	;# 
  1304  0793                     	;# 
  1305  0794                     	;# 
  1306  0795                     	;# 
  1307  0795                     	;# 
  1308  0796                     	;# 
  1309  0797                     	;# 
  1310  0797                     	;# 
  1311  0798                     	;# 
  1312  0799                     	;# 
  1313  079A                     	;# 
  1314  080C                     	;# 
  1315  080C                     	;# 
  1316  080D                     	;# 
  1317  080E                     	;# 
  1318  080E                     	;# 
  1319  080F                     	;# 
  1320  0810                     	;# 
  1321  0810                     	;# 
  1322  0811                     	;# 
  1323  0812                     	;# 
  1324  0812                     	;# 
  1325  0813                     	;# 
  1326  0814                     	;# 
  1327  0815                     	;# 
  1328  0816                     	;# 
  1329  0817                     	;# 
  1330  0818                     	;# 
  1331  0819                     	;# 
  1332  081A                     	;# 
  1333  081A                     	;# 
  1334  081B                     	;# 
  1335  081C                     	;# 
  1336  081C                     	;# 
  1337  081D                     	;# 
  1338  088C                     	;# 
  1339  088D                     	;# 
  1340  088E                     	;# 
  1341  088F                     	;# 
  1342  088F                     	;# 
  1343  0890                     	;# 
  1344  0891                     	;# 
  1345  0892                     	;# 
  1346  0893                     	;# 
  1347  0893                     	;# 
  1348  0894                     	;# 
  1349  0895                     	;# 
  1350  0896                     	;# 
  1351  0897                     	;# 
  1352  0897                     	;# 
  1353  0898                     	;# 
  1354  0899                     	;# 
  1355  0D8C                     	;# 
  1356  0D8C                     	;# 
  1357  0D8D                     	;# 
  1358  0D8E                     	;# 
  1359  0D8F                     	;# 
  1360  0D8F                     	;# 
  1361  0D90                     	;# 
  1362  0D91                     	;# 
  1363  0D92                     	;# 
  1364  0D92                     	;# 
  1365  0D93                     	;# 
  1366  0D94                     	;# 
  1367  0D95                     	;# 
  1368  0D95                     	;# 
  1369  0D96                     	;# 
  1370  0D97                     	;# 
  1371  0D98                     	;# 
  1372  0D99                     	;# 
  1373  0D9A                     	;# 
  1374  0D9B                     	;# 
  1375  0D9C                     	;# 
  1376  0D9D                     	;# 
  1377  0D9E                     	;# 
  1378  0D9E                     	;# 
  1379  0D9F                     	;# 
  1380  0DA0                     	;# 
  1381  0DA1                     	;# 
  1382  0DA1                     	;# 
  1383  0DA2                     	;# 
  1384  0DA3                     	;# 
  1385  0DA4                     	;# 
  1386  0DA4                     	;# 
  1387  0DA5                     	;# 
  1388  0DA6                     	;# 
  1389  0DA7                     	;# 
  1390  0DA7                     	;# 
  1391  0DA8                     	;# 
  1392  0DA9                     	;# 
  1393  0DAA                     	;# 
  1394  0DAB                     	;# 
  1395  0DAC                     	;# 
  1396  0DAD                     	;# 
  1397  0DAE                     	;# 
  1398  0DAF                     	;# 
  1399  0E0F                     	;# 
  1400  0E10                     	;# 
  1401  0E11                     	;# 
  1402  0E12                     	;# 
  1403  0E13                     	;# 
  1404  0E14                     	;# 
  1405  0E15                     	;# 
  1406  0E16                     	;# 
  1407  0E17                     	;# 
  1408  0E18                     	;# 
  1409  0E19                     	;# 
  1410  0E1A                     	;# 
  1411  0E1B                     	;# 
  1412  0E1C                     	;# 
  1413  0E1D                     	;# 
  1414  0E1E                     	;# 
  1415  0E1F                     	;# 
  1416  0E20                     	;# 
  1417  0E21                     	;# 
  1418  0E22                     	;# 
  1419  0E23                     	;# 
  1420  0E24                     	;# 
  1421  0E25                     	;# 
  1422  0E26                     	;# 
  1423  0E27                     	;# 
  1424  0E28                     	;# 
  1425  0E29                     	;# 
  1426  0E2A                     	;# 
  1427  0E2B                     	;# 
  1428  0E2C                     	;# 
  1429  0E2D                     	;# 
  1430  0E2E                     	;# 
  1431  0E90                     	;# 
  1432  0E91                     	;# 
  1433  0E92                     	;# 
  1434  0E94                     	;# 
  1435  0E95                     	;# 
  1436  0E9C                     	;# 
  1437  0E9D                     	;# 
  1438  0E9E                     	;# 
  1439  0E9F                     	;# 
  1440  0EA0                     	;# 
  1441  0EA1                     	;# 
  1442  0EA2                     	;# 
  1443  0EA3                     	;# 
  1444  0EA4                     	;# 
  1445  0EA5                     	;# 
  1446  0EA6                     	;# 
  1447  0EA7                     	;# 
  1448  0F0F                     	;# 
  1449  0F10                     	;# 
  1450  0F11                     	;# 
  1451  0F12                     	;# 
  1452  0F13                     	;# 
  1453  0F14                     	;# 
  1454  0F15                     	;# 
  1455  0F16                     	;# 
  1456  0F17                     	;# 
  1457  0F18                     	;# 
  1458  0F19                     	;# 
  1459  0F1A                     	;# 
  1460  0F1B                     	;# 
  1461  0F1C                     	;# 
  1462  0F1D                     	;# 
  1463  0F1E                     	;# 
  1464  0F1F                     	;# 
  1465  0F20                     	;# 
  1466  0F21                     	;# 
  1467  0F22                     	;# 
  1468  0F23                     	;# 
  1469  0F24                     	;# 
  1470  0F25                     	;# 
  1471  0F26                     	;# 
  1472  0F27                     	;# 
  1473  0F28                     	;# 
  1474  0F29                     	;# 
  1475  0F2A                     	;# 
  1476  0F2B                     	;# 
  1477  0F2C                     	;# 
  1478  0F2D                     	;# 
  1479  0F2E                     	;# 
  1480  0F2F                     	;# 
  1481  0F30                     	;# 
  1482  0F31                     	;# 
  1483  0F32                     	;# 
  1484  0F33                     	;# 
  1485  0F34                     	;# 
  1486  0F35                     	;# 
  1487  0F36                     	;# 
  1488  0F37                     	;# 
  1489  0FE4                     	;# 
  1490  0FE5                     	;# 
  1491  0FE6                     	;# 
  1492  0FE7                     	;# 
  1493  0FE8                     	;# 
  1494  0FE9                     	;# 
  1495  0FEA                     	;# 
  1496  0FEB                     	;# 
  1497  0FED                     	;# 
  1498  0FEE                     	;# 
  1499  0FEF                     	;# 
  1500  0000                     	;# 
  1501  0001                     	;# 
  1502  0002                     	;# 
  1503  0003                     	;# 
  1504  0004                     	;# 
  1505  0005                     	;# 
  1506  0006                     	;# 
  1507  0007                     	;# 
  1508  0008                     	;# 
  1509  0009                     	;# 
  1510  000A                     	;# 
  1511  000B                     	;# 
  1512  000C                     	;# 
  1513  000D                     	;# 
  1514  000E                     	;# 
  1515  0010                     	;# 
  1516  0011                     	;# 
  1517  0012                     	;# 
  1518  0013                     	;# 
  1519  0014                     	;# 
  1520  0015                     	;# 
  1521  0016                     	;# 
  1522  0016                     	;# 
  1523  0017                     	;# 
  1524  0018                     	;# 
  1525  0019                     	;# 
  1526  001A                     	;# 
  1527  001A                     	;# 
  1528  001B                     	;# 
  1529  001B                     	;# 
  1530  001C                     	;# 
  1531  001D                     	;# 
  1532  001E                     	;# 
  1533  001F                     	;# 
  1534  008C                     	;# 
  1535  008D                     	;# 
  1536  008E                     	;# 
  1537  0090                     	;# 
  1538  0091                     	;# 
  1539  0092                     	;# 
  1540  0093                     	;# 
  1541  0094                     	;# 
  1542  0095                     	;# 
  1543  0096                     	;# 
  1544  0098                     	;# 
  1545  0099                     	;# 
  1546  009A                     	;# 
  1547  009B                     	;# 
  1548  009B                     	;# 
  1549  009C                     	;# 
  1550  009D                     	;# 
  1551  009E                     	;# 
  1552  009F                     	;# 
  1553  010C                     	;# 
  1554  010D                     	;# 
  1555  010E                     	;# 
  1556  0111                     	;# 
  1557  0112                     	;# 
  1558  0113                     	;# 
  1559  0114                     	;# 
  1560  0115                     	;# 
  1561  0116                     	;# 
  1562  0117                     	;# 
  1563  0118                     	;# 
  1564  0119                     	;# 
  1565  011C                     	;# 
  1566  018C                     	;# 
  1567  018D                     	;# 
  1568  018E                     	;# 
  1569  0191                     	;# 
  1570  0191                     	;# 
  1571  0192                     	;# 
  1572  0193                     	;# 
  1573  0193                     	;# 
  1574  0194                     	;# 
  1575  0195                     	;# 
  1576  0196                     	;# 
  1577  0197                     	;# 
  1578  0199                     	;# 
  1579  0199                     	;# 
  1580  0199                     	;# 
  1581  019A                     	;# 
  1582  019A                     	;# 
  1583  019A                     	;# 
  1584  019B                     	;# 
  1585  019B                     	;# 
  1586  019B                     	;# 
  1587  019B                     	;# 
  1588  019B                     	;# 
  1589  019C                     	;# 
  1590  019C                     	;# 
  1591  019C                     	;# 
  1592  019D                     	;# 
  1593  019D                     	;# 
  1594  019D                     	;# 
  1595  019E                     	;# 
  1596  019E                     	;# 
  1597  019E                     	;# 
  1598  019F                     	;# 
  1599  019F                     	;# 
  1600  019F                     	;# 
  1601  019F                     	;# 
  1602  019F                     	;# 
  1603  020C                     	;# 
  1604  020D                     	;# 
  1605  020E                     	;# 
  1606  0211                     	;# 
  1607  0211                     	;# 
  1608  0212                     	;# 
  1609  0212                     	;# 
  1610  0213                     	;# 
  1611  0213                     	;# 
  1612  0214                     	;# 
  1613  0214                     	;# 
  1614  0215                     	;# 
  1615  0215                     	;# 
  1616  0215                     	;# 
  1617  0215                     	;# 
  1618  0216                     	;# 
  1619  0216                     	;# 
  1620  0217                     	;# 
  1621  0217                     	;# 
  1622  028C                     	;# 
  1623  028D                     	;# 
  1624  028E                     	;# 
  1625  0291                     	;# 
  1626  0291                     	;# 
  1627  0292                     	;# 
  1628  0293                     	;# 
  1629  0294                     	;# 
  1630  0298                     	;# 
  1631  0298                     	;# 
  1632  0299                     	;# 
  1633  029A                     	;# 
  1634  029B                     	;# 
  1635  029E                     	;# 
  1636  030C                     	;# 
  1637  030D                     	;# 
  1638  030E                     	;# 
  1639  038C                     	;# 
  1640  038D                     	;# 
  1641  038E                     	;# 
  1642  0391                     	;# 
  1643  0392                     	;# 
  1644  0393                     	;# 
  1645  0394                     	;# 
  1646  0395                     	;# 
  1647  0396                     	;# 
  1648  0397                     	;# 
  1649  0398                     	;# 
  1650  0399                     	;# 
  1651  040E                     	;# 
  1652  0413                     	;# 
  1653  0413                     	;# 
  1654  0414                     	;# 
  1655  0414                     	;# 
  1656  0415                     	;# 
  1657  0416                     	;# 
  1658  0417                     	;# 
  1659  0418                     	;# 
  1660  041A                     	;# 
  1661  041A                     	;# 
  1662  041B                     	;# 
  1663  041B                     	;# 
  1664  041C                     	;# 
  1665  041D                     	;# 
  1666  041E                     	;# 
  1667  041F                     	;# 
  1668  0493                     	;# 
  1669  0494                     	;# 
  1670  0495                     	;# 
  1671  0496                     	;# 
  1672  049A                     	;# 
  1673  049B                     	;# 
  1674  049C                     	;# 
  1675  049D                     	;# 
  1676  058C                     	;# 
  1677  058C                     	;# 
  1678  058D                     	;# 
  1679  058E                     	;# 
  1680  058E                     	;# 
  1681  058F                     	;# 
  1682  0590                     	;# 
  1683  0590                     	;# 
  1684  0591                     	;# 
  1685  0592                     	;# 
  1686  0592                     	;# 
  1687  0593                     	;# 
  1688  0594                     	;# 
  1689  0594                     	;# 
  1690  0595                     	;# 
  1691  0596                     	;# 
  1692  0596                     	;# 
  1693  0597                     	;# 
  1694  0598                     	;# 
  1695  0599                     	;# 
  1696  059A                     	;# 
  1697  059B                     	;# 
  1698  059B                     	;# 
  1699  059C                     	;# 
  1700  059D                     	;# 
  1701  060C                     	;# 
  1702  060C                     	;# 
  1703  060D                     	;# 
  1704  060E                     	;# 
  1705  060F                     	;# 
  1706  060F                     	;# 
  1707  0610                     	;# 
  1708  0611                     	;# 
  1709  0612                     	;# 
  1710  0613                     	;# 
  1711  0614                     	;# 
  1712  0617                     	;# 
  1713  0618                     	;# 
  1714  0619                     	;# 
  1715  061A                     	;# 
  1716  061B                     	;# 
  1717  061C                     	;# 
  1718  0691                     	;# 
  1719  0692                     	;# 
  1720  0693                     	;# 
  1721  0694                     	;# 
  1722  0695                     	;# 
  1723  0696                     	;# 
  1724  0697                     	;# 
  1725  0699                     	;# 
  1726  069A                     	;# 
  1727  0711                     	;# 
  1728  0712                     	;# 
  1729  0713                     	;# 
  1730  0714                     	;# 
  1731  0715                     	;# 
  1732  0718                     	;# 
  1733  0718                     	;# 
  1734  0719                     	;# 
  1735  071A                     	;# 
  1736  071A                     	;# 
  1737  071B                     	;# 
  1738  071C                     	;# 
  1739  071D                     	;# 
  1740  0791                     	;# 
  1741  0791                     	;# 
  1742  0792                     	;# 
  1743  0793                     	;# 
  1744  0793                     	;# 
  1745  0794                     	;# 
  1746  0795                     	;# 
  1747  0795                     	;# 
  1748  0796                     	;# 
  1749  0797                     	;# 
  1750  0797                     	;# 
  1751  0798                     	;# 
  1752  0799                     	;# 
  1753  079A                     	;# 
  1754  080C                     	;# 
  1755  080C                     	;# 
  1756  080D                     	;# 
  1757  080E                     	;# 
  1758  080E                     	;# 
  1759  080F                     	;# 
  1760  0810                     	;# 
  1761  0810                     	;# 
  1762  0811                     	;# 
  1763  0812                     	;# 
  1764  0812                     	;# 
  1765  0813                     	;# 
  1766  0814                     	;# 
  1767  0815                     	;# 
  1768  0816                     	;# 
  1769  0817                     	;# 
  1770  0818                     	;# 
  1771  0819                     	;# 
  1772  081A                     	;# 
  1773  081A                     	;# 
  1774  081B                     	;# 
  1775  081C                     	;# 
  1776  081C                     	;# 
  1777  081D                     	;# 
  1778  088C                     	;# 
  1779  088D                     	;# 
  1780  088E                     	;# 
  1781  088F                     	;# 
  1782  088F                     	;# 
  1783  0890                     	;# 
  1784  0891                     	;# 
  1785  0892                     	;# 
  1786  0893                     	;# 
  1787  0893                     	;# 
  1788  0894                     	;# 
  1789  0895                     	;# 
  1790  0896                     	;# 
  1791  0897                     	;# 
  1792  0897                     	;# 
  1793  0898                     	;# 
  1794  0899                     	;# 
  1795  0D8C                     	;# 
  1796  0D8C                     	;# 
  1797  0D8D                     	;# 
  1798  0D8E                     	;# 
  1799  0D8F                     	;# 
  1800  0D8F                     	;# 
  1801  0D90                     	;# 
  1802  0D91                     	;# 
  1803  0D92                     	;# 
  1804  0D92                     	;# 
  1805  0D93                     	;# 
  1806  0D94                     	;# 
  1807  0D95                     	;# 
  1808  0D95                     	;# 
  1809  0D96                     	;# 
  1810  0D97                     	;# 
  1811  0D98                     	;# 
  1812  0D99                     	;# 
  1813  0D9A                     	;# 
  1814  0D9B                     	;# 
  1815  0D9C                     	;# 
  1816  0D9D                     	;# 
  1817  0D9E                     	;# 
  1818  0D9E                     	;# 
  1819  0D9F                     	;# 
  1820  0DA0                     	;# 
  1821  0DA1                     	;# 
  1822  0DA1                     	;# 
  1823  0DA2                     	;# 
  1824  0DA3                     	;# 
  1825  0DA4                     	;# 
  1826  0DA4                     	;# 
  1827  0DA5                     	;# 
  1828  0DA6                     	;# 
  1829  0DA7                     	;# 
  1830  0DA7                     	;# 
  1831  0DA8                     	;# 
  1832  0DA9                     	;# 
  1833  0DAA                     	;# 
  1834  0DAB                     	;# 
  1835  0DAC                     	;# 
  1836  0DAD                     	;# 
  1837  0DAE                     	;# 
  1838  0DAF                     	;# 
  1839  0E0F                     	;# 
  1840  0E10                     	;# 
  1841  0E11                     	;# 
  1842  0E12                     	;# 
  1843  0E13                     	;# 
  1844  0E14                     	;# 
  1845  0E15                     	;# 
  1846  0E16                     	;# 
  1847  0E17                     	;# 
  1848  0E18                     	;# 
  1849  0E19                     	;# 
  1850  0E1A                     	;# 
  1851  0E1B                     	;# 
  1852  0E1C                     	;# 
  1853  0E1D                     	;# 
  1854  0E1E                     	;# 
  1855  0E1F                     	;# 
  1856  0E20                     	;# 
  1857  0E21                     	;# 
  1858  0E22                     	;# 
  1859  0E23                     	;# 
  1860  0E24                     	;# 
  1861  0E25                     	;# 
  1862  0E26                     	;# 
  1863  0E27                     	;# 
  1864  0E28                     	;# 
  1865  0E29                     	;# 
  1866  0E2A                     	;# 
  1867  0E2B                     	;# 
  1868  0E2C                     	;# 
  1869  0E2D                     	;# 
  1870  0E2E                     	;# 
  1871  0E90                     	;# 
  1872  0E91                     	;# 
  1873  0E92                     	;# 
  1874  0E94                     	;# 
  1875  0E95                     	;# 
  1876  0E9C                     	;# 
  1877  0E9D                     	;# 
  1878  0E9E                     	;# 
  1879  0E9F                     	;# 
  1880  0EA0                     	;# 
  1881  0EA1                     	;# 
  1882  0EA2                     	;# 
  1883  0EA3                     	;# 
  1884  0EA4                     	;# 
  1885  0EA5                     	;# 
  1886  0EA6                     	;# 
  1887  0EA7                     	;# 
  1888  0F0F                     	;# 
  1889  0F10                     	;# 
  1890  0F11                     	;# 
  1891  0F12                     	;# 
  1892  0F13                     	;# 
  1893  0F14                     	;# 
  1894  0F15                     	;# 
  1895  0F16                     	;# 
  1896  0F17                     	;# 
  1897  0F18                     	;# 
  1898  0F19                     	;# 
  1899  0F1A                     	;# 
  1900  0F1B                     	;# 
  1901  0F1C                     	;# 
  1902  0F1D                     	;# 
  1903  0F1E                     	;# 
  1904  0F1F                     	;# 
  1905  0F20                     	;# 
  1906  0F21                     	;# 
  1907  0F22                     	;# 
  1908  0F23                     	;# 
  1909  0F24                     	;# 
  1910  0F25                     	;# 
  1911  0F26                     	;# 
  1912  0F27                     	;# 
  1913  0F28                     	;# 
  1914  0F29                     	;# 
  1915  0F2A                     	;# 
  1916  0F2B                     	;# 
  1917  0F2C                     	;# 
  1918  0F2D                     	;# 
  1919  0F2E                     	;# 
  1920  0F2F                     	;# 
  1921  0F30                     	;# 
  1922  0F31                     	;# 
  1923  0F32                     	;# 
  1924  0F33                     	;# 
  1925  0F34                     	;# 
  1926  0F35                     	;# 
  1927  0F36                     	;# 
  1928  0F37                     	;# 
  1929  0FE4                     	;# 
  1930  0FE5                     	;# 
  1931  0FE6                     	;# 
  1932  0FE7                     	;# 
  1933  0FE8                     	;# 
  1934  0FE9                     	;# 
  1935  0FEA                     	;# 
  1936  0FEB                     	;# 
  1937  0FED                     	;# 
  1938  0FEE                     	;# 
  1939  0FEF                     	;# 
  1940  0000                     	;# 
  1941  0001                     	;# 
  1942  0002                     	;# 
  1943  0003                     	;# 
  1944  0004                     	;# 
  1945  0005                     	;# 
  1946  0006                     	;# 
  1947  0007                     	;# 
  1948  0008                     	;# 
  1949  0009                     	;# 
  1950  000A                     	;# 
  1951  000B                     	;# 
  1952  000C                     	;# 
  1953  000D                     	;# 
  1954  000E                     	;# 
  1955  0010                     	;# 
  1956  0011                     	;# 
  1957  0012                     	;# 
  1958  0013                     	;# 
  1959  0014                     	;# 
  1960  0015                     	;# 
  1961  0016                     	;# 
  1962  0016                     	;# 
  1963  0017                     	;# 
  1964  0018                     	;# 
  1965  0019                     	;# 
  1966  001A                     	;# 
  1967  001A                     	;# 
  1968  001B                     	;# 
  1969  001B                     	;# 
  1970  001C                     	;# 
  1971  001D                     	;# 
  1972  001E                     	;# 
  1973  001F                     	;# 
  1974  008C                     	;# 
  1975  008D                     	;# 
  1976  008E                     	;# 
  1977  0090                     	;# 
  1978  0091                     	;# 
  1979  0092                     	;# 
  1980  0093                     	;# 
  1981  0094                     	;# 
  1982  0095                     	;# 
  1983  0096                     	;# 
  1984  0098                     	;# 
  1985  0099                     	;# 
  1986  009A                     	;# 
  1987  009B                     	;# 
  1988  009B                     	;# 
  1989  009C                     	;# 
  1990  009D                     	;# 
  1991  009E                     	;# 
  1992  009F                     	;# 
  1993  010C                     	;# 
  1994  010D                     	;# 
  1995  010E                     	;# 
  1996  0111                     	;# 
  1997  0112                     	;# 
  1998  0113                     	;# 
  1999  0114                     	;# 
  2000  0115                     	;# 
  2001  0116                     	;# 
  2002  0117                     	;# 
  2003  0118                     	;# 
  2004  0119                     	;# 
  2005  011C                     	;# 
  2006  018C                     	;# 
  2007  018D                     	;# 
  2008  018E                     	;# 
  2009  0191                     	;# 
  2010  0191                     	;# 
  2011  0192                     	;# 
  2012  0193                     	;# 
  2013  0193                     	;# 
  2014  0194                     	;# 
  2015  0195                     	;# 
  2016  0196                     	;# 
  2017  0197                     	;# 
  2018  0199                     	;# 
  2019  0199                     	;# 
  2020  0199                     	;# 
  2021  019A                     	;# 
  2022  019A                     	;# 
  2023  019A                     	;# 
  2024  019B                     	;# 
  2025  019B                     	;# 
  2026  019B                     	;# 
  2027  019B                     	;# 
  2028  019B                     	;# 
  2029  019C                     	;# 
  2030  019C                     	;# 
  2031  019C                     	;# 
  2032  019D                     	;# 
  2033  019D                     	;# 
  2034  019D                     	;# 
  2035  019E                     	;# 
  2036  019E                     	;# 
  2037  019E                     	;# 
  2038  019F                     	;# 
  2039  019F                     	;# 
  2040  019F                     	;# 
  2041  019F                     	;# 
  2042  019F                     	;# 
  2043  020C                     	;# 
  2044  020D                     	;# 
  2045  020E                     	;# 
  2046  0211                     	;# 
  2047  0211                     	;# 
  2048  0212                     	;# 
  2049  0212                     	;# 
  2050  0213                     	;# 
  2051  0213                     	;# 
  2052  0214                     	;# 
  2053  0214                     	;# 
  2054  0215                     	;# 
  2055  0215                     	;# 
  2056  0215                     	;# 
  2057  0215                     	;# 
  2058  0216                     	;# 
  2059  0216                     	;# 
  2060  0217                     	;# 
  2061  0217                     	;# 
  2062  028C                     	;# 
  2063  028D                     	;# 
  2064  028E                     	;# 
  2065  0291                     	;# 
  2066  0291                     	;# 
  2067  0292                     	;# 
  2068  0293                     	;# 
  2069  0294                     	;# 
  2070  0298                     	;# 
  2071  0298                     	;# 
  2072  0299                     	;# 
  2073  029A                     	;# 
  2074  029B                     	;# 
  2075  029E                     	;# 
  2076  030C                     	;# 
  2077  030D                     	;# 
  2078  030E                     	;# 
  2079  038C                     	;# 
  2080  038D                     	;# 
  2081  038E                     	;# 
  2082  0391                     	;# 
  2083  0392                     	;# 
  2084  0393                     	;# 
  2085  0394                     	;# 
  2086  0395                     	;# 
  2087  0396                     	;# 
  2088  0397                     	;# 
  2089  0398                     	;# 
  2090  0399                     	;# 
  2091  040E                     	;# 
  2092  0413                     	;# 
  2093  0413                     	;# 
  2094  0414                     	;# 
  2095  0414                     	;# 
  2096  0415                     	;# 
  2097  0416                     	;# 
  2098  0417                     	;# 
  2099  0418                     	;# 
  2100  041A                     	;# 
  2101  041A                     	;# 
  2102  041B                     	;# 
  2103  041B                     	;# 
  2104  041C                     	;# 
  2105  041D                     	;# 
  2106  041E                     	;# 
  2107  041F                     	;# 
  2108  0493                     	;# 
  2109  0494                     	;# 
  2110  0495                     	;# 
  2111  0496                     	;# 
  2112  049A                     	;# 
  2113  049B                     	;# 
  2114  049C                     	;# 
  2115  049D                     	;# 
  2116  058C                     	;# 
  2117  058C                     	;# 
  2118  058D                     	;# 
  2119  058E                     	;# 
  2120  058E                     	;# 
  2121  058F                     	;# 
  2122  0590                     	;# 
  2123  0590                     	;# 
  2124  0591                     	;# 
  2125  0592                     	;# 
  2126  0592                     	;# 
  2127  0593                     	;# 
  2128  0594                     	;# 
  2129  0594                     	;# 
  2130  0595                     	;# 
  2131  0596                     	;# 
  2132  0596                     	;# 
  2133  0597                     	;# 
  2134  0598                     	;# 
  2135  0599                     	;# 
  2136  059A                     	;# 
  2137  059B                     	;# 
  2138  059B                     	;# 
  2139  059C                     	;# 
  2140  059D                     	;# 
  2141  060C                     	;# 
  2142  060C                     	;# 
  2143  060D                     	;# 
  2144  060E                     	;# 
  2145  060F                     	;# 
  2146  060F                     	;# 
  2147  0610                     	;# 
  2148  0611                     	;# 
  2149  0612                     	;# 
  2150  0613                     	;# 
  2151  0614                     	;# 
  2152  0617                     	;# 
  2153  0618                     	;# 
  2154  0619                     	;# 
  2155  061A                     	;# 
  2156  061B                     	;# 
  2157  061C                     	;# 
  2158  0691                     	;# 
  2159  0692                     	;# 
  2160  0693                     	;# 
  2161  0694                     	;# 
  2162  0695                     	;# 
  2163  0696                     	;# 
  2164  0697                     	;# 
  2165  0699                     	;# 
  2166  069A                     	;# 
  2167  0711                     	;# 
  2168  0712                     	;# 
  2169  0713                     	;# 
  2170  0714                     	;# 
  2171  0715                     	;# 
  2172  0718                     	;# 
  2173  0718                     	;# 
  2174  0719                     	;# 
  2175  071A                     	;# 
  2176  071A                     	;# 
  2177  071B                     	;# 
  2178  071C                     	;# 
  2179  071D                     	;# 
  2180  0791                     	;# 
  2181  0791                     	;# 
  2182  0792                     	;# 
  2183  0793                     	;# 
  2184  0793                     	;# 
  2185  0794                     	;# 
  2186  0795                     	;# 
  2187  0795                     	;# 
  2188  0796                     	;# 
  2189  0797                     	;# 
  2190  0797                     	;# 
  2191  0798                     	;# 
  2192  0799                     	;# 
  2193  079A                     	;# 
  2194  080C                     	;# 
  2195  080C                     	;# 
  2196  080D                     	;# 
  2197  080E                     	;# 
  2198  080E                     	;# 
  2199  080F                     	;# 
  2200  0810                     	;# 
  2201  0810                     	;# 
  2202  0811                     	;# 
  2203  0812                     	;# 
  2204  0812                     	;# 
  2205  0813                     	;# 
  2206  0814                     	;# 
  2207  0815                     	;# 
  2208  0816                     	;# 
  2209  0817                     	;# 
  2210  0818                     	;# 
  2211  0819                     	;# 
  2212  081A                     	;# 
  2213  081A                     	;# 
  2214  081B                     	;# 
  2215  081C                     	;# 
  2216  081C                     	;# 
  2217  081D                     	;# 
  2218  088C                     	;# 
  2219  088D                     	;# 
  2220  088E                     	;# 
  2221  088F                     	;# 
  2222  088F                     	;# 
  2223  0890                     	;# 
  2224  0891                     	;# 
  2225  0892                     	;# 
  2226  0893                     	;# 
  2227  0893                     	;# 
  2228  0894                     	;# 
  2229  0895                     	;# 
  2230  0896                     	;# 
  2231  0897                     	;# 
  2232  0897                     	;# 
  2233  0898                     	;# 
  2234  0899                     	;# 
  2235  0D8C                     	;# 
  2236  0D8C                     	;# 
  2237  0D8D                     	;# 
  2238  0D8E                     	;# 
  2239  0D8F                     	;# 
  2240  0D8F                     	;# 
  2241  0D90                     	;# 
  2242  0D91                     	;# 
  2243  0D92                     	;# 
  2244  0D92                     	;# 
  2245  0D93                     	;# 
  2246  0D94                     	;# 
  2247  0D95                     	;# 
  2248  0D95                     	;# 
  2249  0D96                     	;# 
  2250  0D97                     	;# 
  2251  0D98                     	;# 
  2252  0D99                     	;# 
  2253  0D9A                     	;# 
  2254  0D9B                     	;# 
  2255  0D9C                     	;# 
  2256  0D9D                     	;# 
  2257  0D9E                     	;# 
  2258  0D9E                     	;# 
  2259  0D9F                     	;# 
  2260  0DA0                     	;# 
  2261  0DA1                     	;# 
  2262  0DA1                     	;# 
  2263  0DA2                     	;# 
  2264  0DA3                     	;# 
  2265  0DA4                     	;# 
  2266  0DA4                     	;# 
  2267  0DA5                     	;# 
  2268  0DA6                     	;# 
  2269  0DA7                     	;# 
  2270  0DA7                     	;# 
  2271  0DA8                     	;# 
  2272  0DA9                     	;# 
  2273  0DAA                     	;# 
  2274  0DAB                     	;# 
  2275  0DAC                     	;# 
  2276  0DAD                     	;# 
  2277  0DAE                     	;# 
  2278  0DAF                     	;# 
  2279  0E0F                     	;# 
  2280  0E10                     	;# 
  2281  0E11                     	;# 
  2282  0E12                     	;# 
  2283  0E13                     	;# 
  2284  0E14                     	;# 
  2285  0E15                     	;# 
  2286  0E16                     	;# 
  2287  0E17                     	;# 
  2288  0E18                     	;# 
  2289  0E19                     	;# 
  2290  0E1A                     	;# 
  2291  0E1B                     	;# 
  2292  0E1C                     	;# 
  2293  0E1D                     	;# 
  2294  0E1E                     	;# 
  2295  0E1F                     	;# 
  2296  0E20                     	;# 
  2297  0E21                     	;# 
  2298  0E22                     	;# 
  2299  0E23                     	;# 
  2300  0E24                     	;# 
  2301  0E25                     	;# 
  2302  0E26                     	;# 
  2303  0E27                     	;# 
  2304  0E28                     	;# 
  2305  0E29                     	;# 
  2306  0E2A                     	;# 
  2307  0E2B                     	;# 
  2308  0E2C                     	;# 
  2309  0E2D                     	;# 
  2310  0E2E                     	;# 
  2311  0E90                     	;# 
  2312  0E91                     	;# 
  2313  0E92                     	;# 
  2314  0E94                     	;# 
  2315  0E95                     	;# 
  2316  0E9C                     	;# 
  2317  0E9D                     	;# 
  2318  0E9E                     	;# 
  2319  0E9F                     	;# 
  2320  0EA0                     	;# 
  2321  0EA1                     	;# 
  2322  0EA2                     	;# 
  2323  0EA3                     	;# 
  2324  0EA4                     	;# 
  2325  0EA5                     	;# 
  2326  0EA6                     	;# 
  2327  0EA7                     	;# 
  2328  0F0F                     	;# 
  2329  0F10                     	;# 
  2330  0F11                     	;# 
  2331  0F12                     	;# 
  2332  0F13                     	;# 
  2333  0F14                     	;# 
  2334  0F15                     	;# 
  2335  0F16                     	;# 
  2336  0F17                     	;# 
  2337  0F18                     	;# 
  2338  0F19                     	;# 
  2339  0F1A                     	;# 
  2340  0F1B                     	;# 
  2341  0F1C                     	;# 
  2342  0F1D                     	;# 
  2343  0F1E                     	;# 
  2344  0F1F                     	;# 
  2345  0F20                     	;# 
  2346  0F21                     	;# 
  2347  0F22                     	;# 
  2348  0F23                     	;# 
  2349  0F24                     	;# 
  2350  0F25                     	;# 
  2351  0F26                     	;# 
  2352  0F27                     	;# 
  2353  0F28                     	;# 
  2354  0F29                     	;# 
  2355  0F2A                     	;# 
  2356  0F2B                     	;# 
  2357  0F2C                     	;# 
  2358  0F2D                     	;# 
  2359  0F2E                     	;# 
  2360  0F2F                     	;# 
  2361  0F30                     	;# 
  2362  0F31                     	;# 
  2363  0F32                     	;# 
  2364  0F33                     	;# 
  2365  0F34                     	;# 
  2366  0F35                     	;# 
  2367  0F36                     	;# 
  2368  0F37                     	;# 
  2369  0FE4                     	;# 
  2370  0FE5                     	;# 
  2371  0FE6                     	;# 
  2372  0FE7                     	;# 
  2373  0FE8                     	;# 
  2374  0FE9                     	;# 
  2375  0FEA                     	;# 
  2376  0FEB                     	;# 
  2377  0FED                     	;# 
  2378  0FEE                     	;# 
  2379  0FEF                     	;# 
  2380  0000                     	;# 
  2381  0001                     	;# 
  2382  0002                     	;# 
  2383  0003                     	;# 
  2384  0004                     	;# 
  2385  0005                     	;# 
  2386  0006                     	;# 
  2387  0007                     	;# 
  2388  0008                     	;# 
  2389  0009                     	;# 
  2390  000A                     	;# 
  2391  000B                     	;# 
  2392  000C                     	;# 
  2393  000D                     	;# 
  2394  000E                     	;# 
  2395  0010                     	;# 
  2396  0011                     	;# 
  2397  0012                     	;# 
  2398  0013                     	;# 
  2399  0014                     	;# 
  2400  0015                     	;# 
  2401  0016                     	;# 
  2402  0016                     	;# 
  2403  0017                     	;# 
  2404  0018                     	;# 
  2405  0019                     	;# 
  2406  001A                     	;# 
  2407  001A                     	;# 
  2408  001B                     	;# 
  2409  001B                     	;# 
  2410  001C                     	;# 
  2411  001D                     	;# 
  2412  001E                     	;# 
  2413  001F                     	;# 
  2414  008C                     	;# 
  2415  008D                     	;# 
  2416  008E                     	;# 
  2417  0090                     	;# 
  2418  0091                     	;# 
  2419  0092                     	;# 
  2420  0093                     	;# 
  2421  0094                     	;# 
  2422  0095                     	;# 
  2423  0096                     	;# 
  2424  0098                     	;# 
  2425  0099                     	;# 
  2426  009A                     	;# 
  2427  009B                     	;# 
  2428  009B                     	;# 
  2429  009C                     	;# 
  2430  009D                     	;# 
  2431  009E                     	;# 
  2432  009F                     	;# 
  2433  010C                     	;# 
  2434  010D                     	;# 
  2435  010E                     	;# 
  2436  0111                     	;# 
  2437  0112                     	;# 
  2438  0113                     	;# 
  2439  0114                     	;# 
  2440  0115                     	;# 
  2441  0116                     	;# 
  2442  0117                     	;# 
  2443  0118                     	;# 
  2444  0119                     	;# 
  2445  011C                     	;# 
  2446  018C                     	;# 
  2447  018D                     	;# 
  2448  018E                     	;# 
  2449  0191                     	;# 
  2450  0191                     	;# 
  2451  0192                     	;# 
  2452  0193                     	;# 
  2453  0193                     	;# 
  2454  0194                     	;# 
  2455  0195                     	;# 
  2456  0196                     	;# 
  2457  0197                     	;# 
  2458  0199                     	;# 
  2459  0199                     	;# 
  2460  0199                     	;# 
  2461  019A                     	;# 
  2462  019A                     	;# 
  2463  019A                     	;# 
  2464  019B                     	;# 
  2465  019B                     	;# 
  2466  019B                     	;# 
  2467  019B                     	;# 
  2468  019B                     	;# 
  2469  019C                     	;# 
  2470  019C                     	;# 
  2471  019C                     	;# 
  2472  019D                     	;# 
  2473  019D                     	;# 
  2474  019D                     	;# 
  2475  019E                     	;# 
  2476  019E                     	;# 
  2477  019E                     	;# 
  2478  019F                     	;# 
  2479  019F                     	;# 
  2480  019F                     	;# 
  2481  019F                     	;# 
  2482  019F                     	;# 
  2483  020C                     	;# 
  2484  020D                     	;# 
  2485  020E                     	;# 
  2486  0211                     	;# 
  2487  0211                     	;# 
  2488  0212                     	;# 
  2489  0212                     	;# 
  2490  0213                     	;# 
  2491  0213                     	;# 
  2492  0214                     	;# 
  2493  0214                     	;# 
  2494  0215                     	;# 
  2495  0215                     	;# 
  2496  0215                     	;# 
  2497  0215                     	;# 
  2498  0216                     	;# 
  2499  0216                     	;# 
  2500  0217                     	;# 
  2501  0217                     	;# 
  2502  028C                     	;# 
  2503  028D                     	;# 
  2504  028E                     	;# 
  2505  0291                     	;# 
  2506  0291                     	;# 
  2507  0292                     	;# 
  2508  0293                     	;# 
  2509  0294                     	;# 
  2510  0298                     	;# 
  2511  0298                     	;# 
  2512  0299                     	;# 
  2513  029A                     	;# 
  2514  029B                     	;# 
  2515  029E                     	;# 
  2516  030C                     	;# 
  2517  030D                     	;# 
  2518  030E                     	;# 
  2519  038C                     	;# 
  2520  038D                     	;# 
  2521  038E                     	;# 
  2522  0391                     	;# 
  2523  0392                     	;# 
  2524  0393                     	;# 
  2525  0394                     	;# 
  2526  0395                     	;# 
  2527  0396                     	;# 
  2528  0397                     	;# 
  2529  0398                     	;# 
  2530  0399                     	;# 
  2531  040E                     	;# 
  2532  0413                     	;# 
  2533  0413                     	;# 
  2534  0414                     	;# 
  2535  0414                     	;# 
  2536  0415                     	;# 
  2537  0416                     	;# 
  2538  0417                     	;# 
  2539  0418                     	;# 
  2540  041A                     	;# 
  2541  041A                     	;# 
  2542  041B                     	;# 
  2543  041B                     	;# 
  2544  041C                     	;# 
  2545  041D                     	;# 
  2546  041E                     	;# 
  2547  041F                     	;# 
  2548  0493                     	;# 
  2549  0494                     	;# 
  2550  0495                     	;# 
  2551  0496                     	;# 
  2552  049A                     	;# 
  2553  049B                     	;# 
  2554  049C                     	;# 
  2555  049D                     	;# 
  2556  058C                     	;# 
  2557  058C                     	;# 
  2558  058D                     	;# 
  2559  058E                     	;# 
  2560  058E                     	;# 
  2561  058F                     	;# 
  2562  0590                     	;# 
  2563  0590                     	;# 
  2564  0591                     	;# 
  2565  0592                     	;# 
  2566  0592                     	;# 
  2567  0593                     	;# 
  2568  0594                     	;# 
  2569  0594                     	;# 
  2570  0595                     	;# 
  2571  0596                     	;# 
  2572  0596                     	;# 
  2573  0597                     	;# 
  2574  0598                     	;# 
  2575  0599                     	;# 
  2576  059A                     	;# 
  2577  059B                     	;# 
  2578  059B                     	;# 
  2579  059C                     	;# 
  2580  059D                     	;# 
  2581  060C                     	;# 
  2582  060C                     	;# 
  2583  060D                     	;# 
  2584  060E                     	;# 
  2585  060F                     	;# 
  2586  060F                     	;# 
  2587  0610                     	;# 
  2588  0611                     	;# 
  2589  0612                     	;# 
  2590  0613                     	;# 
  2591  0614                     	;# 
  2592  0617                     	;# 
  2593  0618                     	;# 
  2594  0619                     	;# 
  2595  061A                     	;# 
  2596  061B                     	;# 
  2597  061C                     	;# 
  2598  0691                     	;# 
  2599  0692                     	;# 
  2600  0693                     	;# 
  2601  0694                     	;# 
  2602  0695                     	;# 
  2603  0696                     	;# 
  2604  0697                     	;# 
  2605  0699                     	;# 
  2606  069A                     	;# 
  2607  0711                     	;# 
  2608  0712                     	;# 
  2609  0713                     	;# 
  2610  0714                     	;# 
  2611  0715                     	;# 
  2612  0718                     	;# 
  2613  0718                     	;# 
  2614  0719                     	;# 
  2615  071A                     	;# 
  2616  071A                     	;# 
  2617  071B                     	;# 
  2618  071C                     	;# 
  2619  071D                     	;# 
  2620  0791                     	;# 
  2621  0791                     	;# 
  2622  0792                     	;# 
  2623  0793                     	;# 
  2624  0793                     	;# 
  2625  0794                     	;# 
  2626  0795                     	;# 
  2627  0795                     	;# 
  2628  0796                     	;# 
  2629  0797                     	;# 
  2630  0797                     	;# 
  2631  0798                     	;# 
  2632  0799                     	;# 
  2633  079A                     	;# 
  2634  080C                     	;# 
  2635  080C                     	;# 
  2636  080D                     	;# 
  2637  080E                     	;# 
  2638  080E                     	;# 
  2639  080F                     	;# 
  2640  0810                     	;# 
  2641  0810                     	;# 
  2642  0811                     	;# 
  2643  0812                     	;# 
  2644  0812                     	;# 
  2645  0813                     	;# 
  2646  0814                     	;# 
  2647  0815                     	;# 
  2648  0816                     	;# 
  2649  0817                     	;# 
  2650  0818                     	;# 
  2651  0819                     	;# 
  2652  081A                     	;# 
  2653  081A                     	;# 
  2654  081B                     	;# 
  2655  081C                     	;# 
  2656  081C                     	;# 
  2657  081D                     	;# 
  2658  088C                     	;# 
  2659  088D                     	;# 
  2660  088E                     	;# 
  2661  088F                     	;# 
  2662  088F                     	;# 
  2663  0890                     	;# 
  2664  0891                     	;# 
  2665  0892                     	;# 
  2666  0893                     	;# 
  2667  0893                     	;# 
  2668  0894                     	;# 
  2669  0895                     	;# 
  2670  0896                     	;# 
  2671  0897                     	;# 
  2672  0897                     	;# 
  2673  0898                     	;# 
  2674  0899                     	;# 
  2675  0D8C                     	;# 
  2676  0D8C                     	;# 
  2677  0D8D                     	;# 
  2678  0D8E                     	;# 
  2679  0D8F                     	;# 
  2680  0D8F                     	;# 
  2681  0D90                     	;# 
  2682  0D91                     	;# 
  2683  0D92                     	;# 
  2684  0D92                     	;# 
  2685  0D93                     	;# 
  2686  0D94                     	;# 
  2687  0D95                     	;# 
  2688  0D95                     	;# 
  2689  0D96                     	;# 
  2690  0D97                     	;# 
  2691  0D98                     	;# 
  2692  0D99                     	;# 
  2693  0D9A                     	;# 
  2694  0D9B                     	;# 
  2695  0D9C                     	;# 
  2696  0D9D                     	;# 
  2697  0D9E                     	;# 
  2698  0D9E                     	;# 
  2699  0D9F                     	;# 
  2700  0DA0                     	;# 
  2701  0DA1                     	;# 
  2702  0DA1                     	;# 
  2703  0DA2                     	;# 
  2704  0DA3                     	;# 
  2705  0DA4                     	;# 
  2706  0DA4                     	;# 
  2707  0DA5                     	;# 
  2708  0DA6                     	;# 
  2709  0DA7                     	;# 
  2710  0DA7                     	;# 
  2711  0DA8                     	;# 
  2712  0DA9                     	;# 
  2713  0DAA                     	;# 
  2714  0DAB                     	;# 
  2715  0DAC                     	;# 
  2716  0DAD                     	;# 
  2717  0DAE                     	;# 
  2718  0DAF                     	;# 
  2719  0E0F                     	;# 
  2720  0E10                     	;# 
  2721  0E11                     	;# 
  2722  0E12                     	;# 
  2723  0E13                     	;# 
  2724  0E14                     	;# 
  2725  0E15                     	;# 
  2726  0E16                     	;# 
  2727  0E17                     	;# 
  2728  0E18                     	;# 
  2729  0E19                     	;# 
  2730  0E1A                     	;# 
  2731  0E1B                     	;# 
  2732  0E1C                     	;# 
  2733  0E1D                     	;# 
  2734  0E1E                     	;# 
  2735  0E1F                     	;# 
  2736  0E20                     	;# 
  2737  0E21                     	;# 
  2738  0E22                     	;# 
  2739  0E23                     	;# 
  2740  0E24                     	;# 
  2741  0E25                     	;# 
  2742  0E26                     	;# 
  2743  0E27                     	;# 
  2744  0E28                     	;# 
  2745  0E29                     	;# 
  2746  0E2A                     	;# 
  2747  0E2B                     	;# 
  2748  0E2C                     	;# 
  2749  0E2D                     	;# 
  2750  0E2E                     	;# 
  2751  0E90                     	;# 
  2752  0E91                     	;# 
  2753  0E92                     	;# 
  2754  0E94                     	;# 
  2755  0E95                     	;# 
  2756  0E9C                     	;# 
  2757  0E9D                     	;# 
  2758  0E9E                     	;# 
  2759  0E9F                     	;# 
  2760  0EA0                     	;# 
  2761  0EA1                     	;# 
  2762  0EA2                     	;# 
  2763  0EA3                     	;# 
  2764  0EA4                     	;# 
  2765  0EA5                     	;# 
  2766  0EA6                     	;# 
  2767  0EA7                     	;# 
  2768  0F0F                     	;# 
  2769  0F10                     	;# 
  2770  0F11                     	;# 
  2771  0F12                     	;# 
  2772  0F13                     	;# 
  2773  0F14                     	;# 
  2774  0F15                     	;# 
  2775  0F16                     	;# 
  2776  0F17                     	;# 
  2777  0F18                     	;# 
  2778  0F19                     	;# 
  2779  0F1A                     	;# 
  2780  0F1B                     	;# 
  2781  0F1C                     	;# 
  2782  0F1D                     	;# 
  2783  0F1E                     	;# 
  2784  0F1F                     	;# 
  2785  0F20                     	;# 
  2786  0F21                     	;# 
  2787  0F22                     	;# 
  2788  0F23                     	;# 
  2789  0F24                     	;# 
  2790  0F25                     	;# 
  2791  0F26                     	;# 
  2792  0F27                     	;# 
  2793  0F28                     	;# 
  2794  0F29                     	;# 
  2795  0F2A                     	;# 
  2796  0F2B                     	;# 
  2797  0F2C                     	;# 
  2798  0F2D                     	;# 
  2799  0F2E                     	;# 
  2800  0F2F                     	;# 
  2801  0F30                     	;# 
  2802  0F31                     	;# 
  2803  0F32                     	;# 
  2804  0F33                     	;# 
  2805  0F34                     	;# 
  2806  0F35                     	;# 
  2807  0F36                     	;# 
  2808  0F37                     	;# 
  2809  0FE4                     	;# 
  2810  0FE5                     	;# 
  2811  0FE6                     	;# 
  2812  0FE7                     	;# 
  2813  0FE8                     	;# 
  2814  0FE9                     	;# 
  2815  0FEA                     	;# 
  2816  0FEB                     	;# 
  2817  0FED                     	;# 
  2818  0FEE                     	;# 
  2819  0FEF                     	;# 
  2820  0000                     	;# 
  2821  0001                     	;# 
  2822  0002                     	;# 
  2823  0003                     	;# 
  2824  0004                     	;# 
  2825  0005                     	;# 
  2826  0006                     	;# 
  2827  0007                     	;# 
  2828  0008                     	;# 
  2829  0009                     	;# 
  2830  000A                     	;# 
  2831  000B                     	;# 
  2832  000C                     	;# 
  2833  000D                     	;# 
  2834  000E                     	;# 
  2835  0010                     	;# 
  2836  0011                     	;# 
  2837  0012                     	;# 
  2838  0013                     	;# 
  2839  0014                     	;# 
  2840  0015                     	;# 
  2841  0016                     	;# 
  2842  0016                     	;# 
  2843  0017                     	;# 
  2844  0018                     	;# 
  2845  0019                     	;# 
  2846  001A                     	;# 
  2847  001A                     	;# 
  2848  001B                     	;# 
  2849  001B                     	;# 
  2850  001C                     	;# 
  2851  001D                     	;# 
  2852  001E                     	;# 
  2853  001F                     	;# 
  2854  008C                     	;# 
  2855  008D                     	;# 
  2856  008E                     	;# 
  2857  0090                     	;# 
  2858  0091                     	;# 
  2859  0092                     	;# 
  2860  0093                     	;# 
  2861  0094                     	;# 
  2862  0095                     	;# 
  2863  0096                     	;# 
  2864  0098                     	;# 
  2865  0099                     	;# 
  2866  009A                     	;# 
  2867  009B                     	;# 
  2868  009B                     	;# 
  2869  009C                     	;# 
  2870  009D                     	;# 
  2871  009E                     	;# 
  2872  009F                     	;# 
  2873  010C                     	;# 
  2874  010D                     	;# 
  2875  010E                     	;# 
  2876  0111                     	;# 
  2877  0112                     	;# 
  2878  0113                     	;# 
  2879  0114                     	;# 
  2880  0115                     	;# 
  2881  0116                     	;# 
  2882  0117                     	;# 
  2883  0118                     	;# 
  2884  0119                     	;# 
  2885  011C                     	;# 
  2886  018C                     	;# 
  2887  018D                     	;# 
  2888  018E                     	;# 
  2889  0191                     	;# 
  2890  0191                     	;# 
  2891  0192                     	;# 
  2892  0193                     	;# 
  2893  0193                     	;# 
  2894  0194                     	;# 
  2895  0195                     	;# 
  2896  0196                     	;# 
  2897  0197                     	;# 
  2898  0199                     	;# 
  2899  0199                     	;# 
  2900  0199                     	;# 
  2901  019A                     	;# 
  2902  019A                     	;# 
  2903  019A                     	;# 
  2904  019B                     	;# 
  2905  019B                     	;# 
  2906  019B                     	;# 
  2907  019B                     	;# 
  2908  019B                     	;# 
  2909  019C                     	;# 
  2910  019C                     	;# 
  2911  019C                     	;# 
  2912  019D                     	;# 
  2913  019D                     	;# 
  2914  019D                     	;# 
  2915  019E                     	;# 
  2916  019E                     	;# 
  2917  019E                     	;# 
  2918  019F                     	;# 
  2919  019F                     	;# 
  2920  019F                     	;# 
  2921  019F                     	;# 
  2922  019F                     	;# 
  2923  020C                     	;# 
  2924  020D                     	;# 
  2925  020E                     	;# 
  2926  0211                     	;# 
  2927  0211                     	;# 
  2928  0212                     	;# 
  2929  0212                     	;# 
  2930  0213                     	;# 
  2931  0213                     	;# 
  2932  0214                     	;# 
  2933  0214                     	;# 
  2934  0215                     	;# 
  2935  0215                     	;# 
  2936  0215                     	;# 
  2937  0215                     	;# 
  2938  0216                     	;# 
  2939  0216                     	;# 
  2940  0217                     	;# 
  2941  0217                     	;# 
  2942  028C                     	;# 
  2943  028D                     	;# 
  2944  028E                     	;# 
  2945  0291                     	;# 
  2946  0291                     	;# 
  2947  0292                     	;# 
  2948  0293                     	;# 
  2949  0294                     	;# 
  2950  0298                     	;# 
  2951  0298                     	;# 
  2952  0299                     	;# 
  2953  029A                     	;# 
  2954  029B                     	;# 
  2955  029E                     	;# 
  2956  030C                     	;# 
  2957  030D                     	;# 
  2958  030E                     	;# 
  2959  038C                     	;# 
  2960  038D                     	;# 
  2961  038E                     	;# 
  2962  0391                     	;# 
  2963  0392                     	;# 
  2964  0393                     	;# 
  2965  0394                     	;# 
  2966  0395                     	;# 
  2967  0396                     	;# 
  2968  0397                     	;# 
  2969  0398                     	;# 
  2970  0399                     	;# 
  2971  040E                     	;# 
  2972  0413                     	;# 
  2973  0413                     	;# 
  2974  0414                     	;# 
  2975  0414                     	;# 
  2976  0415                     	;# 
  2977  0416                     	;# 
  2978  0417                     	;# 
  2979  0418                     	;# 
  2980  041A                     	;# 
  2981  041A                     	;# 
  2982  041B                     	;# 
  2983  041B                     	;# 
  2984  041C                     	;# 
  2985  041D                     	;# 
  2986  041E                     	;# 
  2987  041F                     	;# 
  2988  0493                     	;# 
  2989  0494                     	;# 
  2990  0495                     	;# 
  2991  0496                     	;# 
  2992  049A                     	;# 
  2993  049B                     	;# 
  2994  049C                     	;# 
  2995  049D                     	;# 
  2996  058C                     	;# 
  2997  058C                     	;# 
  2998  058D                     	;# 
  2999  058E                     	;# 
  3000  058E                     	;# 
  3001  058F                     	;# 
  3002  0590                     	;# 
  3003  0590                     	;# 
  3004  0591                     	;# 
  3005  0592                     	;# 
  3006  0592                     	;# 
  3007  0593                     	;# 
  3008  0594                     	;# 
  3009  0594                     	;# 
  3010  0595                     	;# 
  3011  0596                     	;# 
  3012  0596                     	;# 
  3013  0597                     	;# 
  3014  0598                     	;# 
  3015  0599                     	;# 
  3016  059A                     	;# 
  3017  059B                     	;# 
  3018  059B                     	;# 
  3019  059C                     	;# 
  3020  059D                     	;# 
  3021  060C                     	;# 
  3022  060C                     	;# 
  3023  060D                     	;# 
  3024  060E                     	;# 
  3025  060F                     	;# 
  3026  060F                     	;# 
  3027  0610                     	;# 
  3028  0611                     	;# 
  3029  0612                     	;# 
  3030  0613                     	;# 
  3031  0614                     	;# 
  3032  0617                     	;# 
  3033  0618                     	;# 
  3034  0619                     	;# 
  3035  061A                     	;# 
  3036  061B                     	;# 
  3037  061C                     	;# 
  3038  0691                     	;# 
  3039  0692                     	;# 
  3040  0693                     	;# 
  3041  0694                     	;# 
  3042  0695                     	;# 
  3043  0696                     	;# 
  3044  0697                     	;# 
  3045  0699                     	;# 
  3046  069A                     	;# 
  3047  0711                     	;# 
  3048  0712                     	;# 
  3049  0713                     	;# 
  3050  0714                     	;# 
  3051  0715                     	;# 
  3052  0718                     	;# 
  3053  0718                     	;# 
  3054  0719                     	;# 
  3055  071A                     	;# 
  3056  071A                     	;# 
  3057  071B                     	;# 
  3058  071C                     	;# 
  3059  071D                     	;# 
  3060  0791                     	;# 
  3061  0791                     	;# 
  3062  0792                     	;# 
  3063  0793                     	;# 
  3064  0793                     	;# 
  3065  0794                     	;# 
  3066  0795                     	;# 
  3067  0795                     	;# 
  3068  0796                     	;# 
  3069  0797                     	;# 
  3070  0797                     	;# 
  3071  0798                     	;# 
  3072  0799                     	;# 
  3073  079A                     	;# 
  3074  080C                     	;# 
  3075  080C                     	;# 
  3076  080D                     	;# 
  3077  080E                     	;# 
  3078  080E                     	;# 
  3079  080F                     	;# 
  3080  0810                     	;# 
  3081  0810                     	;# 
  3082  0811                     	;# 
  3083  0812                     	;# 
  3084  0812                     	;# 
  3085  0813                     	;# 
  3086  0814                     	;# 
  3087  0815                     	;# 
  3088  0816                     	;# 
  3089  0817                     	;# 
  3090  0818                     	;# 
  3091  0819                     	;# 
  3092  081A                     	;# 
  3093  081A                     	;# 
  3094  081B                     	;# 
  3095  081C                     	;# 
  3096  081C                     	;# 
  3097  081D                     	;# 
  3098  088C                     	;# 
  3099  088D                     	;# 
  3100  088E                     	;# 
  3101  088F                     	;# 
  3102  088F                     	;# 
  3103  0890                     	;# 
  3104  0891                     	;# 
  3105  0892                     	;# 
  3106  0893                     	;# 
  3107  0893                     	;# 
  3108  0894                     	;# 
  3109  0895                     	;# 
  3110  0896                     	;# 
  3111  0897                     	;# 
  3112  0897                     	;# 
  3113  0898                     	;# 
  3114  0899                     	;# 
  3115  0D8C                     	;# 
  3116  0D8C                     	;# 
  3117  0D8D                     	;# 
  3118  0D8E                     	;# 
  3119  0D8F                     	;# 
  3120  0D8F                     	;# 
  3121  0D90                     	;# 
  3122  0D91                     	;# 
  3123  0D92                     	;# 
  3124  0D92                     	;# 
  3125  0D93                     	;# 
  3126  0D94                     	;# 
  3127  0D95                     	;# 
  3128  0D95                     	;# 
  3129  0D96                     	;# 
  3130  0D97                     	;# 
  3131  0D98                     	;# 
  3132  0D99                     	;# 
  3133  0D9A                     	;# 
  3134  0D9B                     	;# 
  3135  0D9C                     	;# 
  3136  0D9D                     	;# 
  3137  0D9E                     	;# 
  3138  0D9E                     	;# 
  3139  0D9F                     	;# 
  3140  0DA0                     	;# 
  3141  0DA1                     	;# 
  3142  0DA1                     	;# 
  3143  0DA2                     	;# 
  3144  0DA3                     	;# 
  3145  0DA4                     	;# 
  3146  0DA4                     	;# 
  3147  0DA5                     	;# 
  3148  0DA6                     	;# 
  3149  0DA7                     	;# 
  3150  0DA7                     	;# 
  3151  0DA8                     	;# 
  3152  0DA9                     	;# 
  3153  0DAA                     	;# 
  3154  0DAB                     	;# 
  3155  0DAC                     	;# 
  3156  0DAD                     	;# 
  3157  0DAE                     	;# 
  3158  0DAF                     	;# 
  3159  0E0F                     	;# 
  3160  0E10                     	;# 
  3161  0E11                     	;# 
  3162  0E12                     	;# 
  3163  0E13                     	;# 
  3164  0E14                     	;# 
  3165  0E15                     	;# 
  3166  0E16                     	;# 
  3167  0E17                     	;# 
  3168  0E18                     	;# 
  3169  0E19                     	;# 
  3170  0E1A                     	;# 
  3171  0E1B                     	;# 
  3172  0E1C                     	;# 
  3173  0E1D                     	;# 
  3174  0E1E                     	;# 
  3175  0E1F                     	;# 
  3176  0E20                     	;# 
  3177  0E21                     	;# 
  3178  0E22                     	;# 
  3179  0E23                     	;# 
  3180  0E24                     	;# 
  3181  0E25                     	;# 
  3182  0E26                     	;# 
  3183  0E27                     	;# 
  3184  0E28                     	;# 
  3185  0E29                     	;# 
  3186  0E2A                     	;# 
  3187  0E2B                     	;# 
  3188  0E2C                     	;# 
  3189  0E2D                     	;# 
  3190  0E2E                     	;# 
  3191  0E90                     	;# 
  3192  0E91                     	;# 
  3193  0E92                     	;# 
  3194  0E94                     	;# 
  3195  0E95                     	;# 
  3196  0E9C                     	;# 
  3197  0E9D                     	;# 
  3198  0E9E                     	;# 
  3199  0E9F                     	;# 
  3200  0EA0                     	;# 
  3201  0EA1                     	;# 
  3202  0EA2                     	;# 
  3203  0EA3                     	;# 
  3204  0EA4                     	;# 
  3205  0EA5                     	;# 
  3206  0EA6                     	;# 
  3207  0EA7                     	;# 
  3208  0F0F                     	;# 
  3209  0F10                     	;# 
  3210  0F11                     	;# 
  3211  0F12                     	;# 
  3212  0F13                     	;# 
  3213  0F14                     	;# 
  3214  0F15                     	;# 
  3215  0F16                     	;# 
  3216  0F17                     	;# 
  3217  0F18                     	;# 
  3218  0F19                     	;# 
  3219  0F1A                     	;# 
  3220  0F1B                     	;# 
  3221  0F1C                     	;# 
  3222  0F1D                     	;# 
  3223  0F1E                     	;# 
  3224  0F1F                     	;# 
  3225  0F20                     	;# 
  3226  0F21                     	;# 
  3227  0F22                     	;# 
  3228  0F23                     	;# 
  3229  0F24                     	;# 
  3230  0F25                     	;# 
  3231  0F26                     	;# 
  3232  0F27                     	;# 
  3233  0F28                     	;# 
  3234  0F29                     	;# 
  3235  0F2A                     	;# 
  3236  0F2B                     	;# 
  3237  0F2C                     	;# 
  3238  0F2D                     	;# 
  3239  0F2E                     	;# 
  3240  0F2F                     	;# 
  3241  0F30                     	;# 
  3242  0F31                     	;# 
  3243  0F32                     	;# 
  3244  0F33                     	;# 
  3245  0F34                     	;# 
  3246  0F35                     	;# 
  3247  0F36                     	;# 
  3248  0F37                     	;# 
  3249  0FE4                     	;# 
  3250  0FE5                     	;# 
  3251  0FE6                     	;# 
  3252  0FE7                     	;# 
  3253  0FE8                     	;# 
  3254  0FE9                     	;# 
  3255  0FEA                     	;# 
  3256  0FEB                     	;# 
  3257  0FED                     	;# 
  3258  0FEE                     	;# 
  3259  0FEF                     	;# 
  3260  0000                     	;# 
  3261  0001                     	;# 
  3262  0002                     	;# 
  3263  0003                     	;# 
  3264  0004                     	;# 
  3265  0005                     	;# 
  3266  0006                     	;# 
  3267  0007                     	;# 
  3268  0008                     	;# 
  3269  0009                     	;# 
  3270  000A                     	;# 
  3271  000B                     	;# 
  3272  000C                     	;# 
  3273  000D                     	;# 
  3274  000E                     	;# 
  3275  0010                     	;# 
  3276  0011                     	;# 
  3277  0012                     	;# 
  3278  0013                     	;# 
  3279  0014                     	;# 
  3280  0015                     	;# 
  3281  0016                     	;# 
  3282  0016                     	;# 
  3283  0017                     	;# 
  3284  0018                     	;# 
  3285  0019                     	;# 
  3286  001A                     	;# 
  3287  001A                     	;# 
  3288  001B                     	;# 
  3289  001B                     	;# 
  3290  001C                     	;# 
  3291  001D                     	;# 
  3292  001E                     	;# 
  3293  001F                     	;# 
  3294  008C                     	;# 
  3295  008D                     	;# 
  3296  008E                     	;# 
  3297  0090                     	;# 
  3298  0091                     	;# 
  3299  0092                     	;# 
  3300  0093                     	;# 
  3301  0094                     	;# 
  3302  0095                     	;# 
  3303  0096                     	;# 
  3304  0098                     	;# 
  3305  0099                     	;# 
  3306  009A                     	;# 
  3307  009B                     	;# 
  3308  009B                     	;# 
  3309  009C                     	;# 
  3310  009D                     	;# 
  3311  009E                     	;# 
  3312  009F                     	;# 
  3313  010C                     	;# 
  3314  010D                     	;# 
  3315  010E                     	;# 
  3316  0111                     	;# 
  3317  0112                     	;# 
  3318  0113                     	;# 
  3319  0114                     	;# 
  3320  0115                     	;# 
  3321  0116                     	;# 
  3322  0117                     	;# 
  3323  0118                     	;# 
  3324  0119                     	;# 
  3325  011C                     	;# 
  3326  018C                     	;# 
  3327  018D                     	;# 
  3328  018E                     	;# 
  3329  0191                     	;# 
  3330  0191                     	;# 
  3331  0192                     	;# 
  3332  0193                     	;# 
  3333  0193                     	;# 
  3334  0194                     	;# 
  3335  0195                     	;# 
  3336  0196                     	;# 
  3337  0197                     	;# 
  3338  0199                     	;# 
  3339  0199                     	;# 
  3340  0199                     	;# 
  3341  019A                     	;# 
  3342  019A                     	;# 
  3343  019A                     	;# 
  3344  019B                     	;# 
  3345  019B                     	;# 
  3346  019B                     	;# 
  3347  019B                     	;# 
  3348  019B                     	;# 
  3349  019C                     	;# 
  3350  019C                     	;# 
  3351  019C                     	;# 
  3352  019D                     	;# 
  3353  019D                     	;# 
  3354  019D                     	;# 
  3355  019E                     	;# 
  3356  019E                     	;# 
  3357  019E                     	;# 
  3358  019F                     	;# 
  3359  019F                     	;# 
  3360  019F                     	;# 
  3361  019F                     	;# 
  3362  019F                     	;# 
  3363  020C                     	;# 
  3364  020D                     	;# 
  3365  020E                     	;# 
  3366  0211                     	;# 
  3367  0211                     	;# 
  3368  0212                     	;# 
  3369  0212                     	;# 
  3370  0213                     	;# 
  3371  0213                     	;# 
  3372  0214                     	;# 
  3373  0214                     	;# 
  3374  0215                     	;# 
  3375  0215                     	;# 
  3376  0215                     	;# 
  3377  0215                     	;# 
  3378  0216                     	;# 
  3379  0216                     	;# 
  3380  0217                     	;# 
  3381  0217                     	;# 
  3382  028C                     	;# 
  3383  028D                     	;# 
  3384  028E                     	;# 
  3385  0291                     	;# 
  3386  0291                     	;# 
  3387  0292                     	;# 
  3388  0293                     	;# 
  3389  0294                     	;# 
  3390  0298                     	;# 
  3391  0298                     	;# 
  3392  0299                     	;# 
  3393  029A                     	;# 
  3394  029B                     	;# 
  3395  029E                     	;# 
  3396  030C                     	;# 
  3397  030D                     	;# 
  3398  030E                     	;# 
  3399  038C                     	;# 
  3400  038D                     	;# 
  3401  038E                     	;# 
  3402  0391                     	;# 
  3403  0392                     	;# 
  3404  0393                     	;# 
  3405  0394                     	;# 
  3406  0395                     	;# 
  3407  0396                     	;# 
  3408  0397                     	;# 
  3409  0398                     	;# 
  3410  0399                     	;# 
  3411  040E                     	;# 
  3412  0413                     	;# 
  3413  0413                     	;# 
  3414  0414                     	;# 
  3415  0414                     	;# 
  3416  0415                     	;# 
  3417  0416                     	;# 
  3418  0417                     	;# 
  3419  0418                     	;# 
  3420  041A                     	;# 
  3421  041A                     	;# 
  3422  041B                     	;# 
  3423  041B                     	;# 
  3424  041C                     	;# 
  3425  041D                     	;# 
  3426  041E                     	;# 
  3427  041F                     	;# 
  3428  0493                     	;# 
  3429  0494                     	;# 
  3430  0495                     	;# 
  3431  0496                     	;# 
  3432  049A                     	;# 
  3433  049B                     	;# 
  3434  049C                     	;# 
  3435  049D                     	;# 
  3436  058C                     	;# 
  3437  058C                     	;# 
  3438  058D                     	;# 
  3439  058E                     	;# 
  3440  058E                     	;# 
  3441  058F                     	;# 
  3442  0590                     	;# 
  3443  0590                     	;# 
  3444  0591                     	;# 
  3445  0592                     	;# 
  3446  0592                     	;# 
  3447  0593                     	;# 
  3448  0594                     	;# 
  3449  0594                     	;# 
  3450  0595                     	;# 
  3451  0596                     	;# 
  3452  0596                     	;# 
  3453  0597                     	;# 
  3454  0598                     	;# 
  3455  0599                     	;# 
  3456  059A                     	;# 
  3457  059B                     	;# 
  3458  059B                     	;# 
  3459  059C                     	;# 
  3460  059D                     	;# 
  3461  060C                     	;# 
  3462  060C                     	;# 
  3463  060D                     	;# 
  3464  060E                     	;# 
  3465  060F                     	;# 
  3466  060F                     	;# 
  3467  0610                     	;# 
  3468  0611                     	;# 
  3469  0612                     	;# 
  3470  0613                     	;# 
  3471  0614                     	;# 
  3472  0617                     	;# 
  3473  0618                     	;# 
  3474  0619                     	;# 
  3475  061A                     	;# 
  3476  061B                     	;# 
  3477  061C                     	;# 
  3478  0691                     	;# 
  3479  0692                     	;# 
  3480  0693                     	;# 
  3481  0694                     	;# 
  3482  0695                     	;# 
  3483  0696                     	;# 
  3484  0697                     	;# 
  3485  0699                     	;# 
  3486  069A                     	;# 
  3487  0711                     	;# 
  3488  0712                     	;# 
  3489  0713                     	;# 
  3490  0714                     	;# 
  3491  0715                     	;# 
  3492  0718                     	;# 
  3493  0718                     	;# 
  3494  0719                     	;# 
  3495  071A                     	;# 
  3496  071A                     	;# 
  3497  071B                     	;# 
  3498  071C                     	;# 
  3499  071D                     	;# 
  3500  0791                     	;# 
  3501  0791                     	;# 
  3502  0792                     	;# 
  3503  0793                     	;# 
  3504  0793                     	;# 
  3505  0794                     	;# 
  3506  0795                     	;# 
  3507  0795                     	;# 
  3508  0796                     	;# 
  3509  0797                     	;# 
  3510  0797                     	;# 
  3511  0798                     	;# 
  3512  0799                     	;# 
  3513  079A                     	;# 
  3514  080C                     	;# 
  3515  080C                     	;# 
  3516  080D                     	;# 
  3517  080E                     	;# 
  3518  080E                     	;# 
  3519  080F                     	;# 
  3520  0810                     	;# 
  3521  0810                     	;# 
  3522  0811                     	;# 
  3523  0812                     	;# 
  3524  0812                     	;# 
  3525  0813                     	;# 
  3526  0814                     	;# 
  3527  0815                     	;# 
  3528  0816                     	;# 
  3529  0817                     	;# 
  3530  0818                     	;# 
  3531  0819                     	;# 
  3532  081A                     	;# 
  3533  081A                     	;# 
  3534  081B                     	;# 
  3535  081C                     	;# 
  3536  081C                     	;# 
  3537  081D                     	;# 
  3538  088C                     	;# 
  3539  088D                     	;# 
  3540  088E                     	;# 
  3541  088F                     	;# 
  3542  088F                     	;# 
  3543  0890                     	;# 
  3544  0891                     	;# 
  3545  0892                     	;# 
  3546  0893                     	;# 
  3547  0893                     	;# 
  3548  0894                     	;# 
  3549  0895                     	;# 
  3550  0896                     	;# 
  3551  0897                     	;# 
  3552  0897                     	;# 
  3553  0898                     	;# 
  3554  0899                     	;# 
  3555  0D8C                     	;# 
  3556  0D8C                     	;# 
  3557  0D8D                     	;# 
  3558  0D8E                     	;# 
  3559  0D8F                     	;# 
  3560  0D8F                     	;# 
  3561  0D90                     	;# 
  3562  0D91                     	;# 
  3563  0D92                     	;# 
  3564  0D92                     	;# 
  3565  0D93                     	;# 
  3566  0D94                     	;# 
  3567  0D95                     	;# 
  3568  0D95                     	;# 
  3569  0D96                     	;# 
  3570  0D97                     	;# 
  3571  0D98                     	;# 
  3572  0D99                     	;# 
  3573  0D9A                     	;# 
  3574  0D9B                     	;# 
  3575  0D9C                     	;# 
  3576  0D9D                     	;# 
  3577  0D9E                     	;# 
  3578  0D9E                     	;# 
  3579  0D9F                     	;# 
  3580  0DA0                     	;# 
  3581  0DA1                     	;# 
  3582  0DA1                     	;# 
  3583  0DA2                     	;# 
  3584  0DA3                     	;# 
  3585  0DA4                     	;# 
  3586  0DA4                     	;# 
  3587  0DA5                     	;# 
  3588  0DA6                     	;# 
  3589  0DA7                     	;# 
  3590  0DA7                     	;# 
  3591  0DA8                     	;# 
  3592  0DA9                     	;# 
  3593  0DAA                     	;# 
  3594  0DAB                     	;# 
  3595  0DAC                     	;# 
  3596  0DAD                     	;# 
  3597  0DAE                     	;# 
  3598  0DAF                     	;# 
  3599  0E0F                     	;# 
  3600  0E10                     	;# 
  3601  0E11                     	;# 
  3602  0E12                     	;# 
  3603  0E13                     	;# 
  3604  0E14                     	;# 
  3605  0E15                     	;# 
  3606  0E16                     	;# 
  3607  0E17                     	;# 
  3608  0E18                     	;# 
  3609  0E19                     	;# 
  3610  0E1A                     	;# 
  3611  0E1B                     	;# 
  3612  0E1C                     	;# 
  3613  0E1D                     	;# 
  3614  0E1E                     	;# 
  3615  0E1F                     	;# 
  3616  0E20                     	;# 
  3617  0E21                     	;# 
  3618  0E22                     	;# 
  3619  0E23                     	;# 
  3620  0E24                     	;# 
  3621  0E25                     	;# 
  3622  0E26                     	;# 
  3623  0E27                     	;# 
  3624  0E28                     	;# 
  3625  0E29                     	;# 
  3626  0E2A                     	;# 
  3627  0E2B                     	;# 
  3628  0E2C                     	;# 
  3629  0E2D                     	;# 
  3630  0E2E                     	;# 
  3631  0E90                     	;# 
  3632  0E91                     	;# 
  3633  0E92                     	;# 
  3634  0E94                     	;# 
  3635  0E95                     	;# 
  3636  0E9C                     	;# 
  3637  0E9D                     	;# 
  3638  0E9E                     	;# 
  3639  0E9F                     	;# 
  3640  0EA0                     	;# 
  3641  0EA1                     	;# 
  3642  0EA2                     	;# 
  3643  0EA3                     	;# 
  3644  0EA4                     	;# 
  3645  0EA5                     	;# 
  3646  0EA6                     	;# 
  3647  0EA7                     	;# 
  3648  0F0F                     	;# 
  3649  0F10                     	;# 
  3650  0F11                     	;# 
  3651  0F12                     	;# 
  3652  0F13                     	;# 
  3653  0F14                     	;# 
  3654  0F15                     	;# 
  3655  0F16                     	;# 
  3656  0F17                     	;# 
  3657  0F18                     	;# 
  3658  0F19                     	;# 
  3659  0F1A                     	;# 
  3660  0F1B                     	;# 
  3661  0F1C                     	;# 
  3662  0F1D                     	;# 
  3663  0F1E                     	;# 
  3664  0F1F                     	;# 
  3665  0F20                     	;# 
  3666  0F21                     	;# 
  3667  0F22                     	;# 
  3668  0F23                     	;# 
  3669  0F24                     	;# 
  3670  0F25                     	;# 
  3671  0F26                     	;# 
  3672  0F27                     	;# 
  3673  0F28                     	;# 
  3674  0F29                     	;# 
  3675  0F2A                     	;# 
  3676  0F2B                     	;# 
  3677  0F2C                     	;# 
  3678  0F2D                     	;# 
  3679  0F2E                     	;# 
  3680  0F2F                     	;# 
  3681  0F30                     	;# 
  3682  0F31                     	;# 
  3683  0F32                     	;# 
  3684  0F33                     	;# 
  3685  0F34                     	;# 
  3686  0F35                     	;# 
  3687  0F36                     	;# 
  3688  0F37                     	;# 
  3689  0FE4                     	;# 
  3690  0FE5                     	;# 
  3691  0FE6                     	;# 
  3692  0FE7                     	;# 
  3693  0FE8                     	;# 
  3694  0FE9                     	;# 
  3695  0FEA                     	;# 
  3696  0FEB                     	;# 
  3697  0FED                     	;# 
  3698  0FEE                     	;# 
  3699  0FEF                     	;# 
  3700                           
  3701                           	psect	idataBANK1
  3702  0002                     __pidataBANK1:	
  3703                           
  3704                           ;initializer for _Angle
  3705  0002  340A               	retlw	10
  3706  0003  3400               	retlw	0
  3707                           
  3708                           	psect	stringtext1
  3709  05A6                     __pstringtext1:	
  3710  05A6                     _fsmStateTable:	
  3711  05A6  34A3               	retlw	low _I2C_DO_IDLE
  3712  05A7  340F               	retlw	high _I2C_DO_IDLE
  3713  05A8  34AA               	retlw	low _I2C_DO_SEND_ADR_READ
  3714  05A9  3407               	retlw	high _I2C_DO_SEND_ADR_READ
  3715  05AA  34E5               	retlw	low _I2C_DO_SEND_ADR_WRITE
  3716  05AB  3407               	retlw	high _I2C_DO_SEND_ADR_WRITE
  3717  05AC  341C               	retlw	low _I2C_DO_TX
  3718  05AD  3401               	retlw	high _I2C_DO_TX
  3719  05AE  3407               	retlw	low _I2C_DO_RX
  3720  05AF  3402               	retlw	high _I2C_DO_RX
  3721  05B0  34EC               	retlw	low _I2C_DO_RCEN
  3722  05B1  340F               	retlw	high _I2C_DO_RCEN
  3723  05B2  346F               	retlw	low _I2C_DO_TX_EMPTY
  3724  05B3  3404               	retlw	high _I2C_DO_TX_EMPTY
  3725  05B4  346B               	retlw	low _I2C_DO_SEND_RESTART_READ
  3726  05B5  340F               	retlw	high _I2C_DO_SEND_RESTART_READ
  3727  05B6  3473               	retlw	low _I2C_DO_SEND_RESTART_WRITE
  3728  05B7  340F               	retlw	high _I2C_DO_SEND_RESTART_WRITE
  3729  05B8  347B               	retlw	low _I2C_DO_SEND_RESTART
  3730  05B9  340F               	retlw	high _I2C_DO_SEND_RESTART
  3731  05BA  3483               	retlw	low _I2C_DO_SEND_STOP
  3732  05BB  340F               	retlw	high _I2C_DO_SEND_STOP
  3733  05BC  348B               	retlw	low _I2C_DO_RX_ACK
  3734  05BD  340F               	retlw	high _I2C_DO_RX_ACK
  3735  05BE  3493               	retlw	low _I2C_DO_RX_NACK_STOP
  3736  05BF  340F               	retlw	high _I2C_DO_RX_NACK_STOP
  3737  05C0  349B               	retlw	low _I2C_DO_RX_NACK_RESTART
  3738  05C1  340F               	retlw	high _I2C_DO_RX_NACK_RESTART
  3739  05C2  34AC               	retlw	low _I2C_DO_RESET
  3740  05C3  340F               	retlw	high _I2C_DO_RESET
  3741  05C4  34C4               	retlw	low _I2C_DO_ADDRESS_NACK
  3742  05C5  3404               	retlw	high _I2C_DO_ADDRESS_NACK
  3743  05C6                     __end_of_fsmStateTable:	
  3744                           
  3745                           	psect	nvBANK1
  3746  00C3                     __pnvBANK1:	
  3747  00C3                     _TMR2_InterruptHandler:	
  3748  00C3                     	ds	2
  3749  00C5                     _EUSART_ErrorHandler:	
  3750  00C5                     	ds	2
  3751  00C7                     _EUSART_OverrunErrorHandler:	
  3752  00C7                     	ds	2
  3753  00C9                     _EUSART_FramingErrorHandler:	
  3754  00C9                     	ds	2
  3755  00CB                     _EUSART_RxDefaultInterruptHandler:	
  3756  00CB                     	ds	2
  3757  000C                     _PORTAbits	set	12
  3758  001B                     _PR2	set	27
  3759  001A                     _TMR2	set	26
  3760  001C                     _T2CONbits	set	28
  3761  001F                     _T2RSTbits	set	31
  3762  001D                     _T2HLTbits	set	29
  3763  001C                     _T2CON	set	28
  3764  001A                     _T2TMR	set	26
  3765  001B                     _T2PR	set	27
  3766  001F                     _T2RST	set	31
  3767  001D                     _T2HLT	set	29
  3768  001E                     _T2CLKCON	set	30
  3769  0011                     _PIR2bits	set	17
  3770  0010                     _PIR1bits	set	16
  3771  000B                     _INTCONbits	set	11
  3772  0095                     _OPTION_REGbits	set	149
  3773  008E                     _TRISC	set	142
  3774  008D                     _TRISB	set	141
  3775  008C                     _TRISA	set	140
  3776  0098                     _OSCTUNE	set	152
  3777  0099                     _OSCCON	set	153
  3778  0090                     _PIE1bits	set	144
  3779  010C                     _LATAbits	set	268
  3780  010E                     _LATC	set	270
  3781  010D                     _LATB	set	269
  3782  010C                     _LATA	set	268
  3783  0116                     _BORCON	set	278
  3784  0199                     _RC1REG	set	409
  3785  019D                     _RC1STAbits	set	413
  3786  019A                     _TX1REG	set	410
  3787  019E                     _TX1STAbits	set	414
  3788  019C                     _SPBRGH	set	412
  3789  019B                     _SPBRGL	set	411
  3790  019E                     _TX1STA	set	414
  3791  019D                     _RC1STA	set	413
  3792  019F                     _BAUD1CON	set	415
  3793  018C                     _ANSELA	set	396
  3794  018D                     _ANSELB	set	397
  3795  018E                     _ANSELC	set	398
  3796  0214                     _SSP1STATbits	set	532
  3797  0216                     _SSP1CON2bits	set	534
  3798  0211                     _SSP1BUF	set	529
  3799  0215                     _SSP1CON1bits	set	533
  3800  0212                     _SSP1ADD	set	530
  3801  0216                     _SSP1CON2	set	534
  3802  0215                     _SSP1CON1	set	533
  3803  0214                     _SSP1STAT	set	532
  3804  020E                     _WPUC	set	526
  3805  020C                     _WPUA	set	524
  3806  020D                     _WPUB	set	525
  3807  029E                     _CCPTMRSbits	set	670
  3808  028E                     _ODCONC	set	654
  3809  028D                     _ODCONB	set	653
  3810  028C                     _ODCONA	set	652
  3811  030E                     _SLRCONC	set	782
  3812  030D                     _SLRCONB	set	781
  3813  030C                     _SLRCONA	set	780
  3814  038E                     _INLVLC	set	910
  3815  038D                     _INLVLB	set	909
  3816  038C                     _INLVLA	set	908
  3817  0617                     _PWM3DCL	set	1559
  3818  0618                     _PWM3DCH	set	1560
  3819  0619                     _PWM3CON	set	1561
  3820  0E20                     _SSPCLKPPS	set	3616
  3821  0E21                     _SSPDATPPS	set	3617
  3822  0E24                     _RXPPS	set	3620
  3823  0E92                     _RA2PPS	set	3730
  3824  0E9C                     _RB4PPS	set	3740
  3825  0E9F                     _RB7PPS	set	3743
  3826  0E9E                     _RB6PPS	set	3742
  3827                           
  3828                           ; #config settings
  3829  0000                     
  3830                           	psect	cinit
  3831  0027                     start_initialization:	
  3832  0027                     __initialization:	
  3833                           
  3834                           ; Initialize objects allocated to BANK1
  3835  0027  0021               	movlb	1	; select bank1
  3836  0028  3180  2002  3180   	fcall	__pidataBANK1	;fetch initializer
  3837  002B  00CD               	movwf	__pdataBANK1& (0+127)
  3838  002C  3180  2003  3180   	fcall	__pidataBANK1+1	;fetch initializer
  3839  002F  00CE               	movwf	(__pdataBANK1+1)& (0+127)
  3840                           
  3841                           ; Clear objects allocated to BANK0
  3842  0030  3020               	movlw	low __pbssBANK0
  3843  0031  0084               	movwf	4
  3844  0032  3000               	movlw	high __pbssBANK0
  3845  0033  0085               	movwf	5
  3846  0034  3024               	movlw	36
  3847  0035  3187  27FA  3180   	fcall	clear_ram0
  3848                           
  3849                           ; Clear objects allocated to BANK1
  3850  0038  30A0               	movlw	low __pbssBANK1
  3851  0039  0084               	movwf	4
  3852  003A  3000               	movlw	high __pbssBANK1
  3853  003B  0085               	movwf	5
  3854  003C  3012               	movlw	18
  3855  003D  3187  27FA         	fcall	clear_ram0
  3856  003F                     end_of_initialization:	
  3857                           ;End of C runtime variable initialization code
  3858                           
  3859  003F                     __end_of__initialization:	
  3860  003F  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3861  0040  0020               	movlb	0
  3862  0041  3181  296D         	ljmp	_main	;jump to C main() function
  3863                           
  3864                           	psect	bssBANK0
  3865  0020                     __pbssBANK0:	
  3866  0020                     _I2C_Status:	
  3867  0020                     	ds	29
  3868  003D                     _PosUart:	
  3869  003D                     	ds	1
  3870  003E                     _Type:	
  3871  003E                     	ds	1
  3872  003F                     _Data:	
  3873  003F                     	ds	1
  3874  0040                     _eusartRxLastError:	
  3875  0040                     	ds	1
  3876  0041                     _eusartRxCount:	
  3877  0041                     	ds	1
  3878  0042                     _eusartRxTail:	
  3879  0042                     	ds	1
  3880  0043                     _eusartRxHead:	
  3881  0043                     	ds	1
  3882                           
  3883                           	psect	bssBANK1
  3884  00A0                     __pbssBANK1:	
  3885  00A0                     _eusartRxStatusBuffer:	
  3886  00A0                     	ds	8
  3887  00A8                     _eusartRxBuffer:	
  3888  00A8                     	ds	8
  3889  00B0                     _Vitesse:	
  3890  00B0                     	ds	2
  3891                           
  3892                           	psect	dataBANK1
  3893  00CD                     __pdataBANK1:	
  3894  00CD                     _Angle:	
  3895  00CD                     	ds	2
  3896                           
  3897                           	psect	clrtext
  3898  07FA                     clear_ram0:	
  3899                           ;	Called with FSR0 containing the base address, and
  3900                           ;	WREG with the size to clear
  3901                           
  3902  07FA  0064               	clrwdt	;clear the watchdog before getting into this loop
  3903  07FB                     clrloop0:	
  3904  07FB  0180               	clrf	0	;clear RAM location pointed to by FSR
  3905  07FC  3101               	addfsr 0,1
  3906  07FD  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3907  07FE  2FFB               	goto	clrloop0	;have we reached the end yet?
  3908  07FF  3400               	retlw	0	;all done for this memory range, return
  3909                           
  3910                           	psect	cstackBANK1
  3911  00B2                     __pcstackBANK1:	
  3912  00B2                     ??_I2C_SetDataCompleteCallback:	
  3913  00B2                     ??_I2C_SetAddressNackCallback:	
  3914                           ; 1 bytes @ 0x0
  3915                           
  3916                           
  3917                           ; 1 bytes @ 0x0
  3918  00B2                     	ds	1
  3919  00B3                     ?_rd1RegCompleteHandler:	
  3920  00B3                     ?_rd2RegCompleteHandler:	
  3921                           ; 1 bytes @ 0x1
  3922                           
  3923  00B3                     ?_wr1RegCompleteHandler:	
  3924                           ; 1 bytes @ 0x1
  3925                           
  3926  00B3                     ?_wr2RegCompleteHandler:	
  3927                           ; 1 bytes @ 0x1
  3928                           
  3929  00B3                     ?_rdBlkRegCompleteHandler:	
  3930                           ; 1 bytes @ 0x1
  3931                           
  3932  00B3                     ?_I2C_CallbackReturnStop:	
  3933                           ; 1 bytes @ 0x1
  3934                           
  3935  00B3                     ?_I2C_CallbackReturnReset:	
  3936                           ; 1 bytes @ 0x1
  3937                           
  3938  00B3                     rd1RegCompleteHandler@ptr:	
  3939                           ; 1 bytes @ 0x1
  3940                           
  3941  00B3                     rd2RegCompleteHandler@ptr:	
  3942                           ; 1 bytes @ 0x1
  3943                           
  3944  00B3                     wr1RegCompleteHandler@ptr:	
  3945                           ; 1 bytes @ 0x1
  3946                           
  3947  00B3                     wr2RegCompleteHandler@ptr:	
  3948                           ; 1 bytes @ 0x1
  3949                           
  3950  00B3                     rdBlkRegCompleteHandler@ptr:	
  3951                           ; 1 bytes @ 0x1
  3952                           
  3953  00B3                     I2C_CallbackReturnStop@funPtr:	
  3954                           ; 1 bytes @ 0x1
  3955                           
  3956  00B3                     I2C_CallbackReturnReset@funPtr:	
  3957                           ; 1 bytes @ 0x1
  3958                           
  3959                           
  3960                           ; 1 bytes @ 0x1
  3961  00B3                     	ds	1
  3962  00B4                     ??_I2C_DO_TX:	
  3963  00B4                     ??_I2C_DO_RX:	
  3964                           ; 1 bytes @ 0x2
  3965                           
  3966  00B4                     ??_I2C_DO_TX_EMPTY:	
  3967                           ; 1 bytes @ 0x2
  3968                           
  3969  00B4                     ??_I2C_DO_ADDRESS_NACK:	
  3970                           ; 1 bytes @ 0x2
  3971                           
  3972                           
  3973                           ; 1 bytes @ 0x2
  3974  00B4                     	ds	1
  3975  00B5                     _I2C_DO_TX$794:	
  3976                           
  3977                           ; 2 bytes @ 0x3
  3978  00B5                     	ds	2
  3979  00B7                     ??_I2C_MasterFsm:	
  3980                           
  3981                           ; 1 bytes @ 0x5
  3982  00B7                     	ds	3
  3983  00BA                     ??_I2C_MasterOperation:	
  3984                           
  3985                           ; 1 bytes @ 0x8
  3986  00BA                     	ds	1
  3987  00BB                     I2C_MasterOperation@read:	
  3988                           
  3989                           ; 1 bytes @ 0x9
  3990  00BB                     	ds	1
  3991  00BC                     I2C_MasterOperation@returnValue:	
  3992                           
  3993                           ; 1 bytes @ 0xA
  3994  00BC                     	ds	1
  3995  00BD                     ?_I2C_Write1ByteRegister:	
  3996  00BD                     I2C_Write1ByteRegister@reg:	
  3997                           ; 1 bytes @ 0xB
  3998                           
  3999                           
  4000                           ; 1 bytes @ 0xB
  4001  00BD                     	ds	1
  4002  00BE                     I2C_Write1ByteRegister@data:	
  4003                           
  4004                           ; 1 bytes @ 0xC
  4005  00BE                     	ds	1
  4006  00BF                     ??_I2C_Write1ByteRegister:	
  4007                           
  4008                           ; 1 bytes @ 0xD
  4009  00BF                     	ds	1
  4010  00C0                     I2C_Write1ByteRegister@address:	
  4011                           
  4012                           ; 1 bytes @ 0xE
  4013  00C0                     	ds	1
  4014  00C1                     ??_main:	
  4015                           
  4016                           ; 1 bytes @ 0xF
  4017  00C1                     	ds	2
  4018                           
  4019                           	psect	cstackCOMMON
  4020  0070                     __pcstackCOMMON:	
  4021  0070                     ?_I2C_Open:	
  4022  0070                     ?_I2C_MasterWrite:	
  4023                           ; 1 bytes @ 0x0
  4024                           
  4025  0070                     ?_I2C_Close:	
  4026                           ; 1 bytes @ 0x0
  4027                           
  4028  0070                     ?_TMR2_ISR:	
  4029                           ; 1 bytes @ 0x0
  4030                           
  4031  0070                     ?_I2C_Initialize:	
  4032                           ; 1 bytes @ 0x0
  4033                           
  4034  0070                     ?_PIN_MANAGER_Initialize:	
  4035                           ; 1 bytes @ 0x0
  4036                           
  4037  0070                     ?_OSCILLATOR_Initialize:	
  4038                           ; 1 bytes @ 0x0
  4039                           
  4040  0070                     ?_PWM3_Initialize:	
  4041                           ; 1 bytes @ 0x0
  4042                           
  4043  0070                     ?_TMR2_Initialize:	
  4044                           ; 1 bytes @ 0x0
  4045                           
  4046  0070                     ?_EUSART_Initialize:	
  4047                           ; 1 bytes @ 0x0
  4048                           
  4049  0070                     ?_I2C_DO_IDLE:	
  4050                           ; 1 bytes @ 0x0
  4051                           
  4052  0070                     ?_I2C_DO_SEND_ADR_READ:	
  4053                           ; 1 bytes @ 0x0
  4054                           
  4055  0070                     ?_I2C_DO_SEND_ADR_WRITE:	
  4056                           ; 1 bytes @ 0x0
  4057                           
  4058  0070                     ?_I2C_DO_TX:	
  4059                           ; 1 bytes @ 0x0
  4060                           
  4061  0070                     ?_I2C_DO_RX:	
  4062                           ; 1 bytes @ 0x0
  4063                           
  4064  0070                     ?_I2C_DO_RCEN:	
  4065                           ; 1 bytes @ 0x0
  4066                           
  4067  0070                     ?_I2C_DO_TX_EMPTY:	
  4068                           ; 1 bytes @ 0x0
  4069                           
  4070  0070                     ?_I2C_DO_SEND_RESTART_READ:	
  4071                           ; 1 bytes @ 0x0
  4072                           
  4073  0070                     ?_I2C_DO_SEND_RESTART_WRITE:	
  4074                           ; 1 bytes @ 0x0
  4075                           
  4076  0070                     ?_I2C_DO_SEND_RESTART:	
  4077                           ; 1 bytes @ 0x0
  4078                           
  4079  0070                     ?_I2C_DO_SEND_STOP:	
  4080                           ; 1 bytes @ 0x0
  4081                           
  4082  0070                     ?_I2C_DO_RX_ACK:	
  4083                           ; 1 bytes @ 0x0
  4084                           
  4085  0070                     ?_I2C_DO_RX_NACK_STOP:	
  4086                           ; 1 bytes @ 0x0
  4087                           
  4088  0070                     ?_I2C_DO_RX_NACK_RESTART:	
  4089                           ; 1 bytes @ 0x0
  4090                           
  4091  0070                     ?_I2C_DO_RESET:	
  4092                           ; 1 bytes @ 0x0
  4093                           
  4094  0070                     ?_I2C_DO_ADDRESS_NACK:	
  4095                           ; 1 bytes @ 0x0
  4096                           
  4097  0070                     ?_I2C_MasterClearIrq:	
  4098                           ; 1 bytes @ 0x0
  4099                           
  4100  0070                     ?_I2C_MasterOpen:	
  4101                           ; 1 bytes @ 0x0
  4102                           
  4103  0070                     ?_I2C_MasterDisableIrq:	
  4104                           ; 1 bytes @ 0x0
  4105                           
  4106  0070                     ?_I2C_MasterClose:	
  4107                           ; 1 bytes @ 0x0
  4108                           
  4109  0070                     ?_I2C_MasterStart:	
  4110                           ; 1 bytes @ 0x0
  4111                           
  4112  0070                     ?_I2C_Poller:	
  4113                           ; 1 bytes @ 0x0
  4114                           
  4115  0070                     ?_I2C_MasterWaitForEvent:	
  4116                           ; 1 bytes @ 0x0
  4117                           
  4118  0070                     ?_I2C_MasterFsm:	
  4119                           ; 1 bytes @ 0x0
  4120                           
  4121  0070                     ?_I2C_MasterIsNack:	
  4122                           ; 1 bytes @ 0x0
  4123                           
  4124  0070                     ?_I2C_MasterSendTxData:	
  4125                           ; 1 bytes @ 0x0
  4126                           
  4127  0070                     ?_I2C_MasterGetRxData:	
  4128                           ; 1 bytes @ 0x0
  4129                           
  4130  0070                     ?_I2C_MasterSendAck:	
  4131                           ; 1 bytes @ 0x0
  4132                           
  4133  0070                     ?_I2C_MasterStartRx:	
  4134                           ; 1 bytes @ 0x0
  4135                           
  4136  0070                     ?_I2C_MasterSetIrq:	
  4137                           ; 1 bytes @ 0x0
  4138                           
  4139  0070                     ?_I2C_MasterEnableRestart:	
  4140                           ; 1 bytes @ 0x0
  4141                           
  4142  0070                     ?_I2C_MasterStop:	
  4143                           ; 1 bytes @ 0x0
  4144                           
  4145  0070                     ?_I2C_MasterSendNack:	
  4146                           ; 1 bytes @ 0x0
  4147                           
  4148  0070                     ?_EUSART_Receive_ISR:	
  4149                           ; 1 bytes @ 0x0
  4150                           
  4151  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  4152                           ; 1 bytes @ 0x0
  4153                           
  4154  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  4155                           ; 1 bytes @ 0x0
  4156                           
  4157  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  4158                           ; 1 bytes @ 0x0
  4159                           
  4160  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  4161                           ; 1 bytes @ 0x0
  4162                           
  4163  0070                     ?_EUSART_DefaultErrorHandler:	
  4164                           ; 1 bytes @ 0x0
  4165                           
  4166  0070                     ?_EUSART_RxDataHandler:	
  4167                           ; 1 bytes @ 0x0
  4168                           
  4169  0070                     ??_EUSART_RxDataHandler:	
  4170                           ; 1 bytes @ 0x0
  4171                           
  4172  0070                     ?_TMR2_DefaultInterruptHandler:	
  4173                           ; 1 bytes @ 0x0
  4174                           
  4175  0070                     ??_TMR2_DefaultInterruptHandler:	
  4176                           ; 1 bytes @ 0x0
  4177                           
  4178  0070                     ?_INTERRUPT_InterruptManager:	
  4179                           ; 1 bytes @ 0x0
  4180                           
  4181  0070                     ?_SYSTEM_Initialize:	
  4182                           ; 1 bytes @ 0x0
  4183                           
  4184  0070                     ?_I2C_MasterOperation:	
  4185                           ; 1 bytes @ 0x0
  4186                           
  4187  0070                     ?_EUSART_Write:	
  4188                           ; 1 bytes @ 0x0
  4189                           
  4190  0070                     ??_EUSART_Write:	
  4191                           ; 1 bytes @ 0x0
  4192                           
  4193  0070                     ?_TMR2_Start:	
  4194                           ; 1 bytes @ 0x0
  4195                           
  4196  0070                     ?_TMR2_StartTimer:	
  4197                           ; 1 bytes @ 0x0
  4198                           
  4199  0070                     ?_TMR2_Counter8BitSet:	
  4200                           ; 1 bytes @ 0x0
  4201                           
  4202  0070                     ?_TMR2_WriteTimer:	
  4203                           ; 1 bytes @ 0x0
  4204                           
  4205  0070                     ?_MyTimer2ISR:	
  4206                           ; 1 bytes @ 0x0
  4207                           
  4208  0070                     ?_MyUART_ISR:	
  4209                           ; 1 bytes @ 0x0
  4210                           
  4211  0070                     ?_main:	
  4212                           ; 1 bytes @ 0x0
  4213                           
  4214  0070                     ?i1_I2C_Open:	
  4215                           ; 1 bytes @ 0x0
  4216                           
  4217  0070                     ??i1_I2C_Open:	
  4218                           ; 1 bytes @ 0x0
  4219                           
  4220  0070                     ?i1_I2C_Close:	
  4221                           ; 1 bytes @ 0x0
  4222                           
  4223  0070                     ??i1_I2C_Close:	
  4224                           ; 1 bytes @ 0x0
  4225                           
  4226  0070                     ?i1_I2C_MasterOperation:	
  4227                           ; 1 bytes @ 0x0
  4228                           
  4229  0070                     ?i1_I2C_MasterWrite:	
  4230                           ; 1 bytes @ 0x0
  4231                           
  4232  0070                     ?i1_I2C_SetBuffer:	
  4233                           ; 1 bytes @ 0x0
  4234                           
  4235  0070                     ?i1_I2C_SetCallback:	
  4236                           ; 1 bytes @ 0x0
  4237                           
  4238  0070                     ?i1_I2C_Poller:	
  4239                           ; 1 bytes @ 0x0
  4240                           
  4241  0070                     ?i1_I2C_MasterFsm:	
  4242                           ; 1 bytes @ 0x0
  4243                           
  4244  0070                     ?i1_I2C_DO_IDLE:	
  4245                           ; 1 bytes @ 0x0
  4246                           
  4247  0070                     ??i1_I2C_DO_IDLE:	
  4248                           ; 1 bytes @ 0x0
  4249                           
  4250  0070                     ?i1_I2C_DO_SEND_ADR_READ:	
  4251                           ; 1 bytes @ 0x0
  4252                           
  4253  0070                     ??i1_I2C_DO_SEND_ADR_READ:	
  4254                           ; 1 bytes @ 0x0
  4255                           
  4256  0070                     ?i1_I2C_DO_SEND_ADR_WRITE:	
  4257                           ; 1 bytes @ 0x0
  4258                           
  4259  0070                     ??i1_I2C_DO_SEND_ADR_WRITE:	
  4260                           ; 1 bytes @ 0x0
  4261                           
  4262  0070                     ?i1_I2C_DO_TX:	
  4263                           ; 1 bytes @ 0x0
  4264                           
  4265  0070                     ?i1_I2C_DO_RX:	
  4266                           ; 1 bytes @ 0x0
  4267                           
  4268  0070                     ?i1_I2C_DO_RCEN:	
  4269                           ; 1 bytes @ 0x0
  4270                           
  4271  0070                     ??i1_I2C_DO_RCEN:	
  4272                           ; 1 bytes @ 0x0
  4273                           
  4274  0070                     ?i1_I2C_DO_TX_EMPTY:	
  4275                           ; 1 bytes @ 0x0
  4276                           
  4277  0070                     ?i1_I2C_DO_SEND_RESTART_READ:	
  4278                           ; 1 bytes @ 0x0
  4279                           
  4280  0070                     ??i1_I2C_DO_SEND_RESTART_READ:	
  4281                           ; 1 bytes @ 0x0
  4282                           
  4283  0070                     ?i1_I2C_DO_SEND_RESTART_WRITE:	
  4284                           ; 1 bytes @ 0x0
  4285                           
  4286  0070                     ??i1_I2C_DO_SEND_RESTART_WRITE:	
  4287                           ; 1 bytes @ 0x0
  4288                           
  4289  0070                     ?i1_I2C_DO_SEND_RESTART:	
  4290                           ; 1 bytes @ 0x0
  4291                           
  4292  0070                     ??i1_I2C_DO_SEND_RESTART:	
  4293                           ; 1 bytes @ 0x0
  4294                           
  4295  0070                     ?i1_I2C_DO_SEND_STOP:	
  4296                           ; 1 bytes @ 0x0
  4297                           
  4298  0070                     ??i1_I2C_DO_SEND_STOP:	
  4299                           ; 1 bytes @ 0x0
  4300                           
  4301  0070                     ?i1_I2C_DO_RX_ACK:	
  4302                           ; 1 bytes @ 0x0
  4303                           
  4304  0070                     ??i1_I2C_DO_RX_ACK:	
  4305                           ; 1 bytes @ 0x0
  4306                           
  4307  0070                     ?i1_I2C_DO_RX_NACK_STOP:	
  4308                           ; 1 bytes @ 0x0
  4309                           
  4310  0070                     ??i1_I2C_DO_RX_NACK_STOP:	
  4311                           ; 1 bytes @ 0x0
  4312                           
  4313  0070                     ?i1_I2C_DO_RX_NACK_RESTART:	
  4314                           ; 1 bytes @ 0x0
  4315                           
  4316  0070                     ??i1_I2C_DO_RX_NACK_RESTART:	
  4317                           ; 1 bytes @ 0x0
  4318                           
  4319  0070                     ?i1_I2C_DO_RESET:	
  4320                           ; 1 bytes @ 0x0
  4321                           
  4322  0070                     ??i1_I2C_DO_RESET:	
  4323                           ; 1 bytes @ 0x0
  4324                           
  4325  0070                     ?i1_I2C_DO_ADDRESS_NACK:	
  4326                           ; 1 bytes @ 0x0
  4327                           
  4328  0070                     ?i1_I2C_MasterOpen:	
  4329                           ; 1 bytes @ 0x0
  4330                           
  4331  0070                     ??i1_I2C_MasterOpen:	
  4332                           ; 1 bytes @ 0x0
  4333                           
  4334  0070                     ?i1_I2C_MasterClose:	
  4335                           ; 1 bytes @ 0x0
  4336                           
  4337  0070                     ??i1_I2C_MasterClose:	
  4338                           ; 1 bytes @ 0x0
  4339                           
  4340  0070                     ?i1_I2C_MasterGetRxData:	
  4341                           ; 1 bytes @ 0x0
  4342                           
  4343  0070                     ??i1_I2C_MasterGetRxData:	
  4344                           ; 1 bytes @ 0x0
  4345                           
  4346  0070                     ?i1_I2C_MasterSendTxData:	
  4347                           ; 1 bytes @ 0x0
  4348                           
  4349  0070                     ??i1_I2C_MasterSendTxData:	
  4350                           ; 1 bytes @ 0x0
  4351                           
  4352  0070                     ?i1_I2C_MasterEnableRestart:	
  4353                           ; 1 bytes @ 0x0
  4354                           
  4355  0070                     ??i1_I2C_MasterEnableRestart:	
  4356                           ; 1 bytes @ 0x0
  4357                           
  4358  0070                     ?i1_I2C_MasterStartRx:	
  4359                           ; 1 bytes @ 0x0
  4360                           
  4361  0070                     ??i1_I2C_MasterStartRx:	
  4362                           ; 1 bytes @ 0x0
  4363                           
  4364  0070                     ?i1_I2C_MasterStart:	
  4365                           ; 1 bytes @ 0x0
  4366                           
  4367  0070                     ??i1_I2C_MasterStart:	
  4368                           ; 1 bytes @ 0x0
  4369                           
  4370  0070                     ?i1_I2C_MasterStop:	
  4371                           ; 1 bytes @ 0x0
  4372                           
  4373  0070                     ??i1_I2C_MasterStop:	
  4374                           ; 1 bytes @ 0x0
  4375                           
  4376  0070                     ?i1_I2C_MasterIsNack:	
  4377                           ; 1 bytes @ 0x0
  4378                           
  4379  0070                     ??i1_I2C_MasterIsNack:	
  4380                           ; 1 bytes @ 0x0
  4381                           
  4382  0070                     ?i1_I2C_MasterSendAck:	
  4383                           ; 1 bytes @ 0x0
  4384                           
  4385  0070                     ??i1_I2C_MasterSendAck:	
  4386                           ; 1 bytes @ 0x0
  4387                           
  4388  0070                     ?i1_I2C_MasterSendNack:	
  4389                           ; 1 bytes @ 0x0
  4390                           
  4391  0070                     ??i1_I2C_MasterSendNack:	
  4392                           ; 1 bytes @ 0x0
  4393                           
  4394  0070                     ?i1_I2C_MasterDisableIrq:	
  4395                           ; 1 bytes @ 0x0
  4396                           
  4397  0070                     ??i1_I2C_MasterDisableIrq:	
  4398                           ; 1 bytes @ 0x0
  4399                           
  4400  0070                     ?i1_I2C_MasterClearIrq:	
  4401                           ; 1 bytes @ 0x0
  4402                           
  4403  0070                     ??i1_I2C_MasterClearIrq:	
  4404                           ; 1 bytes @ 0x0
  4405                           
  4406  0070                     ?i1_I2C_MasterSetIrq:	
  4407                           ; 1 bytes @ 0x0
  4408                           
  4409  0070                     ??i1_I2C_MasterSetIrq:	
  4410                           ; 1 bytes @ 0x0
  4411                           
  4412  0070                     ?i1_I2C_MasterWaitForEvent:	
  4413                           ; 1 bytes @ 0x0
  4414                           
  4415  0070                     ??i1_I2C_MasterWaitForEvent:	
  4416                           ; 1 bytes @ 0x0
  4417                           
  4418  0070                     ?___lwdiv:	
  4419                           ; 1 bytes @ 0x0
  4420                           
  4421  0070                     EUSART_Write@txData:	
  4422                           ; 2 bytes @ 0x0
  4423                           
  4424  0070                     i1I2C_MasterSendTxData@data:	
  4425                           ; 1 bytes @ 0x0
  4426                           
  4427  0070                     ___lwdiv@divisor:	
  4428                           ; 1 bytes @ 0x0
  4429                           
  4430  0070                     i1I2C_SetBuffer@bufferSize:	
  4431                           ; 2 bytes @ 0x0
  4432                           
  4433  0070                     i1I2C_SetCallback@cb:	
  4434                           ; 2 bytes @ 0x0
  4435                           
  4436                           
  4437                           ; 2 bytes @ 0x0
  4438  0070                     	ds	1
  4439  0071                     ??_EUSART_Receive_ISR:	
  4440  0071                     ??_EUSART_DefaultErrorHandler:	
  4441                           ; 1 bytes @ 0x1
  4442                           
  4443  0071                     ??_MyUART_ISR:	
  4444                           ; 1 bytes @ 0x1
  4445                           
  4446  0071                     i1I2C_Open@address:	
  4447                           ; 1 bytes @ 0x1
  4448                           
  4449  0071                     i1I2C_Close@returnValue:	
  4450                           ; 1 bytes @ 0x1
  4451                           
  4452                           
  4453                           ; 1 bytes @ 0x1
  4454  0071                     	ds	1
  4455  0072                     ??i1_I2C_SetBuffer:	
  4456  0072                     i1I2C_Open@returnValue:	
  4457                           ; 1 bytes @ 0x2
  4458                           
  4459  0072                     i1I2C_SetCallback@ptr:	
  4460                           ; 1 bytes @ 0x2
  4461                           
  4462  0072                     ___lwdiv@dividend:	
  4463                           ; 1 bytes @ 0x2
  4464                           
  4465                           
  4466                           ; 2 bytes @ 0x2
  4467  0072                     	ds	1
  4468  0073                     ??i1_I2C_SetCallback:	
  4469  0073                     i1I2C_SetBuffer@buffer:	
  4470                           ; 1 bytes @ 0x3
  4471                           
  4472                           
  4473                           ; 1 bytes @ 0x3
  4474  0073                     	ds	1
  4475  0074                     ??___lwdiv:	
  4476  0074                     i1I2C_SetCallback@idx:	
  4477                           ; 1 bytes @ 0x4
  4478                           
  4479                           
  4480                           ; 1 bytes @ 0x4
  4481  0074                     	ds	1
  4482  0075                     ?i1_I2C_SetDataCompleteCallback:	
  4483  0075                     ?i1_I2C_SetAddressNackCallback:	
  4484                           ; 1 bytes @ 0x5
  4485                           
  4486  0075                     MyUART_ISR@c:	
  4487                           ; 1 bytes @ 0x5
  4488                           
  4489  0075                     ___lwdiv@quotient:	
  4490                           ; 1 bytes @ 0x5
  4491                           
  4492  0075                     i1I2C_SetDataCompleteCallback@cb:	
  4493                           ; 2 bytes @ 0x5
  4494                           
  4495  0075                     i1I2C_SetAddressNackCallback@cb:	
  4496                           ; 2 bytes @ 0x5
  4497                           
  4498                           
  4499                           ; 2 bytes @ 0x5
  4500  0075                     	ds	2
  4501  0077                     ___lwdiv@counter:	
  4502  0077                     i1I2C_SetDataCompleteCallback@ptr:	
  4503                           ; 1 bytes @ 0x7
  4504                           
  4505  0077                     i1I2C_SetAddressNackCallback@ptr:	
  4506                           ; 1 bytes @ 0x7
  4507                           
  4508                           
  4509                           ; 1 bytes @ 0x7
  4510  0077                     	ds	1
  4511  0078                     ?_PWM3_LoadDutyValue:	
  4512  0078                     ??i1_I2C_SetDataCompleteCallback:	
  4513                           ; 1 bytes @ 0x8
  4514                           
  4515  0078                     ??i1_I2C_SetAddressNackCallback:	
  4516                           ; 1 bytes @ 0x8
  4517                           
  4518  0078                     PWM3_LoadDutyValue@dutyValue:	
  4519                           ; 1 bytes @ 0x8
  4520                           
  4521                           
  4522                           ; 2 bytes @ 0x8
  4523  0078                     	ds	1
  4524  0079                     ?i1_rd1RegCompleteHandler:	
  4525  0079                     ?i1_rd2RegCompleteHandler:	
  4526                           ; 1 bytes @ 0x9
  4527                           
  4528  0079                     ?i1_wr1RegCompleteHandler:	
  4529                           ; 1 bytes @ 0x9
  4530                           
  4531  0079                     ?i1_wr2RegCompleteHandler:	
  4532                           ; 1 bytes @ 0x9
  4533                           
  4534  0079                     ?i1_rdBlkRegCompleteHandler:	
  4535                           ; 1 bytes @ 0x9
  4536                           
  4537  0079                     ?i1_I2C_CallbackReturnStop:	
  4538                           ; 1 bytes @ 0x9
  4539                           
  4540  0079                     ?i1_I2C_CallbackReturnReset:	
  4541                           ; 1 bytes @ 0x9
  4542                           
  4543  0079                     i1rd1RegCompleteHandler@ptr:	
  4544                           ; 1 bytes @ 0x9
  4545                           
  4546  0079                     i1rd2RegCompleteHandler@ptr:	
  4547                           ; 1 bytes @ 0x9
  4548                           
  4549  0079                     i1wr1RegCompleteHandler@ptr:	
  4550                           ; 1 bytes @ 0x9
  4551                           
  4552  0079                     i1wr2RegCompleteHandler@ptr:	
  4553                           ; 1 bytes @ 0x9
  4554                           
  4555  0079                     i1rdBlkRegCompleteHandler@ptr:	
  4556                           ; 1 bytes @ 0x9
  4557                           
  4558  0079                     i1I2C_CallbackReturnStop@funPtr:	
  4559                           ; 1 bytes @ 0x9
  4560                           
  4561  0079                     i1I2C_CallbackReturnReset@funPtr:	
  4562                           ; 1 bytes @ 0x9
  4563                           
  4564                           
  4565                           ; 1 bytes @ 0x9
  4566  0079                     	ds	1
  4567  007A                     ??_PWM3_LoadDutyValue:	
  4568  007A                     ??i1_rd1RegCompleteHandler:	
  4569                           ; 1 bytes @ 0xA
  4570                           
  4571  007A                     ??i1_rd2RegCompleteHandler:	
  4572                           ; 1 bytes @ 0xA
  4573                           
  4574  007A                     ??i1_wr1RegCompleteHandler:	
  4575                           ; 1 bytes @ 0xA
  4576                           
  4577  007A                     ??i1_wr2RegCompleteHandler:	
  4578                           ; 1 bytes @ 0xA
  4579                           
  4580  007A                     ??i1_rdBlkRegCompleteHandler:	
  4581                           ; 1 bytes @ 0xA
  4582                           
  4583  007A                     ??i1_I2C_DO_TX:	
  4584                           ; 1 bytes @ 0xA
  4585                           
  4586  007A                     ??i1_I2C_DO_RX:	
  4587                           ; 1 bytes @ 0xA
  4588                           
  4589  007A                     ??i1_I2C_DO_TX_EMPTY:	
  4590                           ; 1 bytes @ 0xA
  4591                           
  4592  007A                     ??i1_I2C_DO_ADDRESS_NACK:	
  4593                           ; 1 bytes @ 0xA
  4594                           
  4595  007A                     ??i1_I2C_CallbackReturnStop:	
  4596                           ; 1 bytes @ 0xA
  4597                           
  4598  007A                     ??i1_I2C_CallbackReturnReset:	
  4599                           ; 1 bytes @ 0xA
  4600                           
  4601                           
  4602                           ; 1 bytes @ 0xA
  4603  007A                     	ds	1
  4604  007B                     i1_I2C_DO_TX$794:	
  4605                           
  4606                           ; 2 bytes @ 0xB
  4607  007B                     	ds	2
  4608  007D                     ??i1_I2C_MasterOperation:	
  4609  007D                     ??i1_I2C_Poller:	
  4610                           ; 1 bytes @ 0xD
  4611                           
  4612                           
  4613                           ; 1 bytes @ 0xD
  4614  007D                     	ds	1
  4615  007E                     ??_TMR2_ISR:	
  4616  007E                     ??i1_I2C_MasterWrite:	
  4617                           ; 1 bytes @ 0xE
  4618                           
  4619                           
  4620                           	psect	cstackBANK0
  4621  0044                     __pcstackBANK0:	
  4622                           ; 1 bytes @ 0xE
  4623                           
  4624  0044                     ??i1_I2C_MasterFsm:	
  4625                           
  4626                           ; 1 bytes @ 0x0
  4627  0044                     	ds	3
  4628  0047                     i1I2C_MasterOperation@read:	
  4629                           
  4630                           ; 1 bytes @ 0x3
  4631  0047                     	ds	1
  4632  0048                     i1I2C_MasterOperation@returnValue:	
  4633                           
  4634                           ; 1 bytes @ 0x4
  4635  0048                     	ds	1
  4636  0049                     ?i1_I2C_Write1ByteRegister:	
  4637  0049                     ?_I2C_Read2ByteRegister:	
  4638                           ; 1 bytes @ 0x5
  4639                           
  4640  0049                     I2C_Read2ByteRegister@reg:	
  4641                           ; 2 bytes @ 0x5
  4642                           
  4643  0049                     i1I2C_Write1ByteRegister@reg:	
  4644                           ; 1 bytes @ 0x5
  4645                           
  4646                           
  4647                           ; 1 bytes @ 0x5
  4648  0049                     	ds	1
  4649  004A                     i1I2C_Write1ByteRegister@data:	
  4650                           
  4651                           ; 1 bytes @ 0x6
  4652  004A                     	ds	1
  4653  004B                     ??_I2C_Read2ByteRegister:	
  4654  004B                     ??i1_I2C_Write1ByteRegister:	
  4655                           ; 1 bytes @ 0x7
  4656                           
  4657                           
  4658                           ; 1 bytes @ 0x7
  4659  004B                     	ds	1
  4660  004C                     i1I2C_Write1ByteRegister@address:	
  4661                           
  4662                           ; 1 bytes @ 0x8
  4663  004C                     	ds	3
  4664  004F                     I2C_Read2ByteRegister@address:	
  4665                           
  4666                           ; 1 bytes @ 0xB
  4667  004F                     	ds	1
  4668  0050                     I2C_Read2ByteRegister@returnValue:	
  4669                           
  4670                           ; 2 bytes @ 0xC
  4671  0050                     	ds	2
  4672  0052                     ??_MyTimer2ISR:	
  4673                           
  4674                           ; 1 bytes @ 0xE
  4675  0052                     	ds	1
  4676  0053                     MyTimer2ISR@g:	
  4677                           
  4678                           ; 2 bytes @ 0xF
  4679  0053                     	ds	2
  4680  0055                     ??_INTERRUPT_InterruptManager:	
  4681                           
  4682                           ; 1 bytes @ 0x11
  4683  0055                     	ds	1
  4684  0056                     ??_I2C_Open:	
  4685  0056                     ?_I2C_SetBuffer:	
  4686                           ; 1 bytes @ 0x12
  4687                           
  4688  0056                     ??_I2C_Close:	
  4689                           ; 1 bytes @ 0x12
  4690                           
  4691  0056                     ??_I2C_Initialize:	
  4692                           ; 1 bytes @ 0x12
  4693                           
  4694  0056                     ??_PIN_MANAGER_Initialize:	
  4695                           ; 1 bytes @ 0x12
  4696                           
  4697  0056                     ??_OSCILLATOR_Initialize:	
  4698                           ; 1 bytes @ 0x12
  4699                           
  4700  0056                     ??_PWM3_Initialize:	
  4701                           ; 1 bytes @ 0x12
  4702                           
  4703  0056                     ??_I2C_DO_IDLE:	
  4704                           ; 1 bytes @ 0x12
  4705                           
  4706  0056                     ??_I2C_DO_SEND_ADR_READ:	
  4707                           ; 1 bytes @ 0x12
  4708                           
  4709  0056                     ??_I2C_DO_RCEN:	
  4710                           ; 1 bytes @ 0x12
  4711                           
  4712  0056                     ??_I2C_DO_SEND_RESTART_READ:	
  4713                           ; 1 bytes @ 0x12
  4714                           
  4715  0056                     ??_I2C_DO_SEND_RESTART_WRITE:	
  4716                           ; 1 bytes @ 0x12
  4717                           
  4718  0056                     ??_I2C_DO_SEND_RESTART:	
  4719                           ; 1 bytes @ 0x12
  4720                           
  4721  0056                     ??_I2C_DO_SEND_STOP:	
  4722                           ; 1 bytes @ 0x12
  4723                           
  4724  0056                     ??_I2C_DO_RX_ACK:	
  4725                           ; 1 bytes @ 0x12
  4726                           
  4727  0056                     ??_I2C_DO_RX_NACK_STOP:	
  4728                           ; 1 bytes @ 0x12
  4729                           
  4730  0056                     ??_I2C_DO_RX_NACK_RESTART:	
  4731                           ; 1 bytes @ 0x12
  4732                           
  4733  0056                     ??_I2C_DO_RESET:	
  4734                           ; 1 bytes @ 0x12
  4735                           
  4736  0056                     ??_I2C_MasterClearIrq:	
  4737                           ; 1 bytes @ 0x12
  4738                           
  4739  0056                     ??_I2C_MasterOpen:	
  4740                           ; 1 bytes @ 0x12
  4741                           
  4742  0056                     ??_I2C_MasterDisableIrq:	
  4743                           ; 1 bytes @ 0x12
  4744                           
  4745  0056                     ??_I2C_MasterClose:	
  4746                           ; 1 bytes @ 0x12
  4747                           
  4748  0056                     ??_I2C_MasterStart:	
  4749                           ; 1 bytes @ 0x12
  4750                           
  4751  0056                     ?_I2C_SetCallback:	
  4752                           ; 1 bytes @ 0x12
  4753                           
  4754  0056                     ??_I2C_MasterWaitForEvent:	
  4755                           ; 1 bytes @ 0x12
  4756                           
  4757  0056                     ??_I2C_MasterIsNack:	
  4758                           ; 1 bytes @ 0x12
  4759                           
  4760  0056                     ??_I2C_MasterSendTxData:	
  4761                           ; 1 bytes @ 0x12
  4762                           
  4763  0056                     ??_I2C_MasterGetRxData:	
  4764                           ; 1 bytes @ 0x12
  4765                           
  4766  0056                     ??_I2C_MasterSendAck:	
  4767                           ; 1 bytes @ 0x12
  4768                           
  4769  0056                     ??_I2C_MasterStartRx:	
  4770                           ; 1 bytes @ 0x12
  4771                           
  4772  0056                     ??_I2C_MasterSetIrq:	
  4773                           ; 1 bytes @ 0x12
  4774                           
  4775  0056                     ??_I2C_MasterEnableRestart:	
  4776                           ; 1 bytes @ 0x12
  4777                           
  4778  0056                     ??_I2C_MasterStop:	
  4779                           ; 1 bytes @ 0x12
  4780                           
  4781  0056                     ??_I2C_MasterSendNack:	
  4782                           ; 1 bytes @ 0x12
  4783                           
  4784  0056                     ?_EUSART_SetRxInterruptHandler:	
  4785                           ; 1 bytes @ 0x12
  4786                           
  4787  0056                     ?_EUSART_SetFramingErrorHandler:	
  4788                           ; 1 bytes @ 0x12
  4789                           
  4790  0056                     ?_EUSART_SetOverrunErrorHandler:	
  4791                           ; 1 bytes @ 0x12
  4792                           
  4793  0056                     ?_EUSART_SetErrorHandler:	
  4794                           ; 1 bytes @ 0x12
  4795                           
  4796  0056                     ?_TMR2_SetInterruptHandler:	
  4797                           ; 1 bytes @ 0x12
  4798                           
  4799  0056                     ??_TMR2_Start:	
  4800                           ; 1 bytes @ 0x12
  4801                           
  4802  0056                     ??_TMR2_StartTimer:	
  4803                           ; 1 bytes @ 0x12
  4804                           
  4805  0056                     ??_TMR2_Counter8BitSet:	
  4806                           ; 1 bytes @ 0x12
  4807                           
  4808  0056                     I2C_MasterSendTxData@data:	
  4809                           ; 1 bytes @ 0x12
  4810                           
  4811  0056                     TMR2_Counter8BitSet@timerVal:	
  4812                           ; 1 bytes @ 0x12
  4813                           
  4814  0056                     I2C_SetBuffer@bufferSize:	
  4815                           ; 1 bytes @ 0x12
  4816                           
  4817  0056                     I2C_SetCallback@cb:	
  4818                           ; 2 bytes @ 0x12
  4819                           
  4820  0056                     EUSART_SetFramingErrorHandler@interruptHandler:	
  4821                           ; 2 bytes @ 0x12
  4822                           
  4823  0056                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  4824                           ; 2 bytes @ 0x12
  4825                           
  4826  0056                     EUSART_SetErrorHandler@interruptHandler:	
  4827                           ; 2 bytes @ 0x12
  4828                           
  4829  0056                     EUSART_SetRxInterruptHandler@interruptHandler:	
  4830                           ; 2 bytes @ 0x12
  4831                           
  4832  0056                     TMR2_SetInterruptHandler@InterruptHandler:	
  4833                           ; 2 bytes @ 0x12
  4834                           
  4835                           
  4836                           ; 2 bytes @ 0x12
  4837  0056                     	ds	1
  4838  0057                     ??_I2C_DO_SEND_ADR_WRITE:	
  4839  0057                     ??_TMR2_WriteTimer:	
  4840                           ; 1 bytes @ 0x13
  4841                           
  4842  0057                     I2C_Open@address:	
  4843                           ; 1 bytes @ 0x13
  4844                           
  4845  0057                     I2C_Close@returnValue:	
  4846                           ; 1 bytes @ 0x13
  4847                           
  4848  0057                     TMR2_WriteTimer@timerVal:	
  4849                           ; 1 bytes @ 0x13
  4850                           
  4851                           
  4852                           ; 1 bytes @ 0x13
  4853  0057                     	ds	1
  4854  0058                     ??_I2C_SetBuffer:	
  4855  0058                     ??_TMR2_Initialize:	
  4856                           ; 1 bytes @ 0x14
  4857                           
  4858  0058                     ??_EUSART_Initialize:	
  4859                           ; 1 bytes @ 0x14
  4860                           
  4861  0058                     ??_EUSART_SetRxInterruptHandler:	
  4862                           ; 1 bytes @ 0x14
  4863                           
  4864  0058                     ??_EUSART_SetFramingErrorHandler:	
  4865                           ; 1 bytes @ 0x14
  4866                           
  4867  0058                     ??_EUSART_SetOverrunErrorHandler:	
  4868                           ; 1 bytes @ 0x14
  4869                           
  4870  0058                     ??_EUSART_SetErrorHandler:	
  4871                           ; 1 bytes @ 0x14
  4872                           
  4873  0058                     ??_TMR2_SetInterruptHandler:	
  4874                           ; 1 bytes @ 0x14
  4875                           
  4876  0058                     ??_SYSTEM_Initialize:	
  4877                           ; 1 bytes @ 0x14
  4878                           
  4879  0058                     I2C_Open@returnValue:	
  4880                           ; 1 bytes @ 0x14
  4881                           
  4882  0058                     I2C_SetCallback@ptr:	
  4883                           ; 1 bytes @ 0x14
  4884                           
  4885                           
  4886                           ; 1 bytes @ 0x14
  4887  0058                     	ds	1
  4888  0059                     ??_I2C_SetCallback:	
  4889  0059                     I2C_SetBuffer@buffer:	
  4890                           ; 1 bytes @ 0x15
  4891                           
  4892                           
  4893                           ; 1 bytes @ 0x15
  4894  0059                     	ds	1
  4895  005A                     I2C_SetCallback@idx:	
  4896                           
  4897                           ; 1 bytes @ 0x16
  4898  005A                     	ds	1
  4899  005B                     ?_I2C_SetDataCompleteCallback:	
  4900  005B                     ?_I2C_SetAddressNackCallback:	
  4901                           ; 1 bytes @ 0x17
  4902                           
  4903  005B                     I2C_SetDataCompleteCallback@cb:	
  4904                           ; 1 bytes @ 0x17
  4905                           
  4906  005B                     I2C_SetAddressNackCallback@cb:	
  4907                           ; 2 bytes @ 0x17
  4908                           
  4909                           
  4910                           ; 2 bytes @ 0x17
  4911  005B                     	ds	2
  4912  005D                     I2C_SetDataCompleteCallback@ptr:	
  4913  005D                     I2C_SetAddressNackCallback@ptr:	
  4914                           ; 1 bytes @ 0x19
  4915                           
  4916                           
  4917                           ; 1 bytes @ 0x19
  4918  005D                     	ds	1
  4919  005E                     ??_rd1RegCompleteHandler:	
  4920  005E                     ??_I2C_MasterWrite:	
  4921                           ; 1 bytes @ 0x1A
  4922                           
  4923  005E                     ??_rd2RegCompleteHandler:	
  4924                           ; 1 bytes @ 0x1A
  4925                           
  4926  005E                     ??_wr1RegCompleteHandler:	
  4927                           ; 1 bytes @ 0x1A
  4928                           
  4929  005E                     ??_wr2RegCompleteHandler:	
  4930                           ; 1 bytes @ 0x1A
  4931                           
  4932  005E                     ??_rdBlkRegCompleteHandler:	
  4933                           ; 1 bytes @ 0x1A
  4934                           
  4935  005E                     ??_I2C_CallbackReturnStop:	
  4936                           ; 1 bytes @ 0x1A
  4937                           
  4938  005E                     ??_I2C_CallbackReturnReset:	
  4939                           ; 1 bytes @ 0x1A
  4940                           
  4941  005E                     ??_I2C_Poller:	
  4942                           ; 1 bytes @ 0x1A
  4943                           
  4944                           
  4945                           	psect	maintext
  4946  016D                     __pmaintext:	
  4947                           ; 1 bytes @ 0x1A
  4948 ;;
  4949 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4950 ;;
  4951 ;; *************** function _main *****************
  4952 ;; Defined at:
  4953 ;;		line 115 in file "main.c"
  4954 ;; Parameters:    Size  Location     Type
  4955 ;;		None
  4956 ;; Auto vars:     Size  Location     Type
  4957 ;;		None
  4958 ;; Return value:  Size  Location     Type
  4959 ;;                  1    wreg      void 
  4960 ;; Registers used:
  4961 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4962 ;; Tracked objects:
  4963 ;;		On entry : B1F/0
  4964 ;;		On exit  : 0/0
  4965 ;;		Unchanged: 0/0
  4966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4969 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4970 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4971 ;;Total ram usage:        2 bytes
  4972 ;; Hardware stack levels required when called:   21
  4973 ;; This function calls:
  4974 ;;		_EUSART_SetRxInterruptHandler
  4975 ;;		_I2C_Write1ByteRegister
  4976 ;;		_SYSTEM_Initialize
  4977 ;;		_TMR2_SetInterruptHandler
  4978 ;;		_TMR2_StartTimer
  4979 ;;		_TMR2_WriteTimer
  4980 ;; This function is called by:
  4981 ;;		Startup code after reset
  4982 ;; This function uses a non-reentrant model
  4983 ;;
  4984                           
  4985                           
  4986                           ;psect for function _main
  4987  016D                     _main:	
  4988                           
  4989                           ;main.c: 116: SYSTEM_Initialize();
  4990                           
  4991                           ;incstack = 0
  4992 ;; hardware stack exceeded
  4993                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4994  016D  3187  2705  3181   	fcall	_SYSTEM_Initialize
  4995                           
  4996                           ;main.c: 118: I2C_Write1ByteRegister(0x68, 0x26, 0x02);
  4997  0170  3026               	movlw	38
  4998  0171  0021               	movlb	1	; select bank1
  4999  0172  00C1               	movwf	??_main^(0+128)
  5000  0173  0841               	movf	??_main^(0+128),w
  5001  0174  00BD               	movwf	I2C_Write1ByteRegister@reg^(0+128)
  5002  0175  3002               	movlw	2
  5003  0176  00C2               	movwf	(??_main+1)^(0+128)
  5004  0177  0842               	movf	(??_main+1)^(0+128),w
  5005  0178  00BE               	movwf	I2C_Write1ByteRegister@data^(0+128)
  5006  0179  3068               	movlw	104
  5007  017A  3184  240D  3181   	fcall	_I2C_Write1ByteRegister
  5008                           
  5009                           ;main.c: 119: I2C_Write1ByteRegister(0x68, 0x27, 0x10);
  5010  017D  3027               	movlw	39
  5011  017E  0021               	movlb	1	; select bank1
  5012  017F  00C1               	movwf	??_main^(0+128)
  5013  0180  0841               	movf	??_main^(0+128),w
  5014  0181  00BD               	movwf	I2C_Write1ByteRegister@reg^(0+128)
  5015  0182  3010               	movlw	16
  5016  0183  00C2               	movwf	(??_main+1)^(0+128)
  5017  0184  0842               	movf	(??_main+1)^(0+128),w
  5018  0185  00BE               	movwf	I2C_Write1ByteRegister@data^(0+128)
  5019  0186  3068               	movlw	104
  5020  0187  3184  240D  3181   	fcall	_I2C_Write1ByteRegister
  5021                           
  5022                           ;main.c: 121: TMR2_SetInterruptHandler(MyTimer2ISR);
  5023  018A  30CA               	movlw	low _MyTimer2ISR
  5024  018B  0020               	movlb	0	; select bank0
  5025  018C  00D6               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  5026  018D  3000               	movlw	high _MyTimer2ISR
  5027  018E  00D7               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  5028  018F  318F  27D9  3181   	fcall	_TMR2_SetInterruptHandler
  5029                           
  5030                           ;main.c: 122: TMR2_WriteTimer(255);
  5031  0192  30FF               	movlw	255
  5032  0193  318F  2747  3181   	fcall	_TMR2_WriteTimer
  5033                           
  5034                           ;main.c: 123: TMR2_StartTimer();
  5035  0196  318E  26CC  3181   	fcall	_TMR2_StartTimer
  5036                           
  5037                           ;main.c: 125: EUSART_SetRxInterruptHandler(MyUART_ISR);
  5038  0199  3043               	movlw	low _MyUART_ISR
  5039  019A  0020               	movlb	0	; select bank0
  5040  019B  00D6               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  5041  019C  3000               	movlw	high _MyUART_ISR
  5042  019D  00D7               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  5043  019E  318F  27D0  3181   	fcall	_EUSART_SetRxInterruptHandler
  5044                           
  5045                           ;main.c: 127: (INTCONbits.PEIE = 1);
  5046  01A1  170B               	bsf	11,6	;volatile
  5047                           
  5048                           ;main.c: 128: (INTCONbits.GIE = 1);
  5049  01A2  178B               	bsf	11,7	;volatile
  5050  01A3                     l5907:	
  5051                           ;main.c: 131: do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  5052                           
  5053                           ;main.c: 130: while (1) {
  5054                           
  5055  01A3  1003               	clrc
  5056  01A4  0022               	movlb	2	; select bank2
  5057  01A5  1E8C               	btfss	12,5	;volatile
  5058  01A6  1403               	setc
  5059  01A7  1C03               	btfss	3,0
  5060  01A8  29AC               	goto	u3410
  5061  01A9  0022               	movlb	2	; select bank2
  5062  01AA  168C               	bsf	12,5	;volatile
  5063  01AB  29AE               	goto	l5909
  5064  01AC                     u3410:	
  5065  01AC  0022               	movlb	2	; select bank2
  5066  01AD  128C               	bcf	12,5	;volatile
  5067  01AE                     l5909:	
  5068                           
  5069                           ;main.c: 132: _delay((unsigned long)((500)*(4000000/4000.0)));
  5070  01AE  3003               	movlw	3
  5071  01AF  0021               	movlb	1	; select bank1
  5072  01B0  00C2               	movwf	(??_main^(0+128)+1)
  5073  01B1  308A               	movlw	138
  5074  01B2  00C1               	movwf	??_main^(0+128)
  5075  01B3  3055               	movlw	85
  5076  01B4                     u3437:	
  5077  01B4  0B89               	decfsz	9,f
  5078  01B5  29B4               	goto	u3437
  5079  01B6  0BC1               	decfsz	??_main^(0+128),f
  5080  01B7  29B4               	goto	u3437
  5081  01B8  0BC2               	decfsz	(??_main^(0+128)+1),f
  5082  01B9  29B4               	goto	u3437
  5083  01BA  3200               	nop2
  5084  01BB  29A3               	goto	l5907
  5085  01BC                     __end_of_main:	
  5086                           
  5087                           	psect	text1
  5088  0F47                     __ptext1:	
  5089 ;; *************** function _TMR2_WriteTimer *****************
  5090 ;; Defined at:
  5091 ;;		line 150 in file "mcc_generated_files/tmr2.c"
  5092 ;; Parameters:    Size  Location     Type
  5093 ;;  timerVal        1    wreg     unsigned char 
  5094 ;; Auto vars:     Size  Location     Type
  5095 ;;  timerVal        1   19[BANK0 ] unsigned char 
  5096 ;; Return value:  Size  Location     Type
  5097 ;;                  1    wreg      void 
  5098 ;; Registers used:
  5099 ;;		wreg, status,2, status,0, pclath, cstack
  5100 ;; Tracked objects:
  5101 ;;		On entry : 0/0
  5102 ;;		On exit  : 0/0
  5103 ;;		Unchanged: 0/0
  5104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5106 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5108 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5109 ;;Total ram usage:        1 bytes
  5110 ;; Hardware stack levels used:    1
  5111 ;; Hardware stack levels required when called:   13
  5112 ;; This function calls:
  5113 ;;		_TMR2_Counter8BitSet
  5114 ;; This function is called by:
  5115 ;;		_main
  5116 ;; This function uses a non-reentrant model
  5117 ;;
  5118                           
  5119                           
  5120                           ;psect for function _TMR2_WriteTimer
  5121  0F47                     _TMR2_WriteTimer:	
  5122                           
  5123                           ;incstack = 0
  5124                           ; Regs used in _TMR2_WriteTimer: [wreg+status,2+status,0+pclath+cstack]
  5125                           ;TMR2_WriteTimer@timerVal stored from wreg
  5126  0F47  0020               	movlb	0	; select bank0
  5127  0F48  00D7               	movwf	TMR2_WriteTimer@timerVal
  5128                           
  5129                           ;tmr2.c: 152: TMR2_Counter8BitSet(timerVal);
  5130  0F49  0857               	movf	TMR2_WriteTimer@timerVal,w
  5131  0F4A  318F  271E         	fcall	_TMR2_Counter8BitSet
  5132  0F4C  0008               	return
  5133  0F4D                     __end_of_TMR2_WriteTimer:	
  5134                           
  5135                           	psect	text2
  5136  0F1E                     __ptext2:	
  5137 ;; *************** function _TMR2_Counter8BitSet *****************
  5138 ;; Defined at:
  5139 ;;		line 144 in file "mcc_generated_files/tmr2.c"
  5140 ;; Parameters:    Size  Location     Type
  5141 ;;  timerVal        1    wreg     unsigned char 
  5142 ;; Auto vars:     Size  Location     Type
  5143 ;;  timerVal        1   18[BANK0 ] unsigned char 
  5144 ;; Return value:  Size  Location     Type
  5145 ;;                  1    wreg      void 
  5146 ;; Registers used:
  5147 ;;		wreg
  5148 ;; Tracked objects:
  5149 ;;		On entry : 0/0
  5150 ;;		On exit  : 0/0
  5151 ;;		Unchanged: 0/0
  5152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5154 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5156 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5157 ;;Total ram usage:        1 bytes
  5158 ;; Hardware stack levels used:    1
  5159 ;; Hardware stack levels required when called:   12
  5160 ;; This function calls:
  5161 ;;		Nothing
  5162 ;; This function is called by:
  5163 ;;		_TMR2_WriteTimer
  5164 ;; This function uses a non-reentrant model
  5165 ;;
  5166                           
  5167                           
  5168                           ;psect for function _TMR2_Counter8BitSet
  5169  0F1E                     _TMR2_Counter8BitSet:	
  5170                           
  5171                           ;incstack = 0
  5172                           ; Regs used in _TMR2_Counter8BitSet: [wreg]
  5173                           ;TMR2_Counter8BitSet@timerVal stored from wreg
  5174  0F1E  0020               	movlb	0	; select bank0
  5175  0F1F  00D6               	movwf	TMR2_Counter8BitSet@timerVal
  5176                           
  5177                           ;tmr2.c: 147: TMR2 = timerVal;
  5178  0F20  0856               	movf	TMR2_Counter8BitSet@timerVal,w
  5179  0F21  009A               	movwf	26	;volatile
  5180  0F22  0008               	return
  5181  0F23                     __end_of_TMR2_Counter8BitSet:	
  5182                           
  5183                           	psect	text3
  5184  0ECC                     __ptext3:	
  5185 ;; *************** function _TMR2_StartTimer *****************
  5186 ;; Defined at:
  5187 ;;		line 114 in file "mcc_generated_files/tmr2.c"
  5188 ;; Parameters:    Size  Location     Type
  5189 ;;		None
  5190 ;; Auto vars:     Size  Location     Type
  5191 ;;		None
  5192 ;; Return value:  Size  Location     Type
  5193 ;;                  1    wreg      void 
  5194 ;; Registers used:
  5195 ;;		status,2, status,0, pclath, cstack
  5196 ;; Tracked objects:
  5197 ;;		On entry : 0/0
  5198 ;;		On exit  : 0/0
  5199 ;;		Unchanged: 0/0
  5200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5204 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5205 ;;Total ram usage:        0 bytes
  5206 ;; Hardware stack levels used:    1
  5207 ;; Hardware stack levels required when called:   13
  5208 ;; This function calls:
  5209 ;;		_TMR2_Start
  5210 ;; This function is called by:
  5211 ;;		_main
  5212 ;; This function uses a non-reentrant model
  5213 ;;
  5214                           
  5215                           
  5216                           ;psect for function _TMR2_StartTimer
  5217  0ECC                     _TMR2_StartTimer:	
  5218                           
  5219                           ;tmr2.c: 116: TMR2_Start();
  5220                           
  5221                           ;incstack = 0
  5222                           ; Regs used in _TMR2_StartTimer: [status,2+status,0+pclath+cstack]
  5223  0ECC  318E  26C9         	fcall	_TMR2_Start
  5224  0ECE  0008               	return
  5225  0ECF                     __end_of_TMR2_StartTimer:	
  5226                           
  5227                           	psect	text4
  5228  0EC9                     __ptext4:	
  5229 ;; *************** function _TMR2_Start *****************
  5230 ;; Defined at:
  5231 ;;		line 108 in file "mcc_generated_files/tmr2.c"
  5232 ;; Parameters:    Size  Location     Type
  5233 ;;		None
  5234 ;; Auto vars:     Size  Location     Type
  5235 ;;		None
  5236 ;; Return value:  Size  Location     Type
  5237 ;;                  1    wreg      void 
  5238 ;; Registers used:
  5239 ;;		None
  5240 ;; Tracked objects:
  5241 ;;		On entry : 0/0
  5242 ;;		On exit  : 0/0
  5243 ;;		Unchanged: 0/0
  5244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5249 ;;Total ram usage:        0 bytes
  5250 ;; Hardware stack levels used:    1
  5251 ;; Hardware stack levels required when called:   12
  5252 ;; This function calls:
  5253 ;;		Nothing
  5254 ;; This function is called by:
  5255 ;;		_TMR2_StartTimer
  5256 ;; This function uses a non-reentrant model
  5257 ;;
  5258                           
  5259                           
  5260                           ;psect for function _TMR2_Start
  5261  0EC9                     _TMR2_Start:	
  5262                           
  5263                           ;tmr2.c: 111: T2CONbits.TMR2ON = 1;
  5264                           
  5265                           ;incstack = 0
  5266                           ; Regs used in _TMR2_Start: []
  5267  0EC9  0020               	movlb	0	; select bank0
  5268  0ECA  179C               	bsf	28,7	;volatile
  5269  0ECB  0008               	return
  5270  0ECC                     __end_of_TMR2_Start:	
  5271                           
  5272                           	psect	text5
  5273  0705                     __ptext5:	
  5274 ;; *************** function _SYSTEM_Initialize *****************
  5275 ;; Defined at:
  5276 ;;		line 50 in file "mcc_generated_files/mcc.c"
  5277 ;; Parameters:    Size  Location     Type
  5278 ;;		None
  5279 ;; Auto vars:     Size  Location     Type
  5280 ;;		None
  5281 ;; Return value:  Size  Location     Type
  5282 ;;                  1    wreg      void 
  5283 ;; Registers used:
  5284 ;;		wreg, status,2, status,0, pclath, cstack
  5285 ;; Tracked objects:
  5286 ;;		On entry : 0/0
  5287 ;;		On exit  : 0/0
  5288 ;;		Unchanged: 0/0
  5289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5293 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5294 ;;Total ram usage:        0 bytes
  5295 ;; Hardware stack levels used:    1
  5296 ;; Hardware stack levels required when called:   14
  5297 ;; This function calls:
  5298 ;;		_EUSART_Initialize
  5299 ;;		_I2C_Initialize
  5300 ;;		_OSCILLATOR_Initialize
  5301 ;;		_PIN_MANAGER_Initialize
  5302 ;;		_PWM3_Initialize
  5303 ;;		_TMR2_Initialize
  5304 ;; This function is called by:
  5305 ;;		_main
  5306 ;; This function uses a non-reentrant model
  5307 ;;
  5308                           
  5309                           
  5310                           ;psect for function _SYSTEM_Initialize
  5311  0705                     _SYSTEM_Initialize:	
  5312                           
  5313                           ;mcc.c: 52: I2C_Initialize();
  5314                           
  5315                           ;incstack = 0
  5316                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5317  0705  3187  27F0  3187   	fcall	_I2C_Initialize
  5318                           
  5319                           ;mcc.c: 53: PIN_MANAGER_Initialize();
  5320  0708  3182  228C  3187   	fcall	_PIN_MANAGER_Initialize
  5321                           
  5322                           ;mcc.c: 54: OSCILLATOR_Initialize();
  5323  070B  318F  2754  3187   	fcall	_OSCILLATOR_Initialize
  5324                           
  5325                           ;mcc.c: 55: PWM3_Initialize();
  5326  070E  3187  27DA  3187   	fcall	_PWM3_Initialize
  5327                           
  5328                           ;mcc.c: 56: TMR2_Initialize();
  5329  0711  3186  26F0  3187   	fcall	_TMR2_Initialize
  5330                           
  5331                           ;mcc.c: 57: EUSART_Initialize();
  5332  0714  3183  23DA         	fcall	_EUSART_Initialize
  5333  0716  0008               	return
  5334  0717                     __end_of_SYSTEM_Initialize:	
  5335                           
  5336                           	psect	text6
  5337  06F0                     __ptext6:	
  5338 ;; *************** function _TMR2_Initialize *****************
  5339 ;; Defined at:
  5340 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  5341 ;; Parameters:    Size  Location     Type
  5342 ;;		None
  5343 ;; Auto vars:     Size  Location     Type
  5344 ;;		None
  5345 ;; Return value:  Size  Location     Type
  5346 ;;                  1    wreg      void 
  5347 ;; Registers used:
  5348 ;;		wreg, status,2, status,0, pclath, cstack
  5349 ;; Tracked objects:
  5350 ;;		On entry : 0/0
  5351 ;;		On exit  : 0/0
  5352 ;;		Unchanged: 0/0
  5353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5358 ;;Total ram usage:        0 bytes
  5359 ;; Hardware stack levels used:    1
  5360 ;; Hardware stack levels required when called:   13
  5361 ;; This function calls:
  5362 ;;		_TMR2_SetInterruptHandler
  5363 ;; This function is called by:
  5364 ;;		_SYSTEM_Initialize
  5365 ;; This function uses a non-reentrant model
  5366 ;;
  5367                           
  5368                           
  5369                           ;psect for function _TMR2_Initialize
  5370  06F0                     _TMR2_Initialize:	
  5371                           
  5372                           ;tmr2.c: 69: T2CLKCON = 0x00;
  5373                           
  5374                           ;incstack = 0
  5375                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5376  06F0  0020               	movlb	0	; select bank0
  5377  06F1  019E               	clrf	30	;volatile
  5378                           
  5379                           ;tmr2.c: 72: T2HLT = 0x00;
  5380  06F2  019D               	clrf	29	;volatile
  5381                           
  5382                           ;tmr2.c: 75: T2RST = 0x00;
  5383  06F3  019F               	clrf	31	;volatile
  5384                           
  5385                           ;tmr2.c: 78: T2PR = 0x9B;
  5386  06F4  309B               	movlw	155
  5387  06F5  009B               	movwf	27	;volatile
  5388                           
  5389                           ;tmr2.c: 81: T2TMR = 0x00;
  5390  06F6  019A               	clrf	26	;volatile
  5391                           
  5392                           ;tmr2.c: 84: PIR1bits.TMR2IF = 0;
  5393  06F7  1090               	bcf	16,1	;volatile
  5394                           
  5395                           ;tmr2.c: 87: PIE1bits.TMR2IE = 1;
  5396  06F8  0021               	movlb	1	; select bank1
  5397  06F9  1490               	bsf	16,1	;volatile
  5398                           
  5399                           ;tmr2.c: 90: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
  5400  06FA  308B               	movlw	low _TMR2_DefaultInterruptHandler
  5401  06FB  0020               	movlb	0	; select bank0
  5402  06FC  00D6               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  5403  06FD  300E               	movlw	high _TMR2_DefaultInterruptHandler
  5404  06FE  00D7               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  5405  06FF  318F  27D9         	fcall	_TMR2_SetInterruptHandler
  5406                           
  5407                           ;tmr2.c: 93: T2CON = 0xF0;
  5408  0701  30F0               	movlw	240
  5409  0702  0020               	movlb	0	; select bank0
  5410  0703  009C               	movwf	28	;volatile
  5411  0704  0008               	return
  5412  0705                     __end_of_TMR2_Initialize:	
  5413                           
  5414                           	psect	text7
  5415  0FD9                     __ptext7:	
  5416 ;; *************** function _TMR2_SetInterruptHandler *****************
  5417 ;; Defined at:
  5418 ;;		line 178 in file "mcc_generated_files/tmr2.c"
  5419 ;; Parameters:    Size  Location     Type
  5420 ;;  InterruptHan    2   18[BANK0 ] PTR FTN()void 
  5421 ;;		 -> MyTimer2ISR(1), TMR2_DefaultInterruptHandler(1), 
  5422 ;; Auto vars:     Size  Location     Type
  5423 ;;		None
  5424 ;; Return value:  Size  Location     Type
  5425 ;;                  1    wreg      void 
  5426 ;; Registers used:
  5427 ;;		wreg
  5428 ;; Tracked objects:
  5429 ;;		On entry : 0/0
  5430 ;;		On exit  : 0/0
  5431 ;;		Unchanged: 0/0
  5432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5433 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5436 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5437 ;;Total ram usage:        2 bytes
  5438 ;; Hardware stack levels used:    1
  5439 ;; Hardware stack levels required when called:   12
  5440 ;; This function calls:
  5441 ;;		Nothing
  5442 ;; This function is called by:
  5443 ;;		_TMR2_Initialize
  5444 ;;		_main
  5445 ;; This function uses a non-reentrant model
  5446 ;;
  5447                           
  5448                           
  5449                           ;psect for function _TMR2_SetInterruptHandler
  5450  0FD9                     _TMR2_SetInterruptHandler:	
  5451                           
  5452                           ;tmr2.c: 179: TMR2_InterruptHandler = InterruptHandler;
  5453                           
  5454                           ;incstack = 0
  5455                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  5456  0FD9  0020               	movlb	0	; select bank0
  5457  0FDA  0857               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  5458  0FDB  0021               	movlb	1	; select bank1
  5459  0FDC  00C4               	movwf	(_TMR2_InterruptHandler+1)^(0+128)
  5460  0FDD  0020               	movlb	0	; select bank0
  5461  0FDE  0856               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  5462  0FDF  0021               	movlb	1	; select bank1
  5463  0FE0  00C3               	movwf	_TMR2_InterruptHandler^(0+128)
  5464  0FE1  0008               	return
  5465  0FE2                     __end_of_TMR2_SetInterruptHandler:	
  5466                           
  5467                           	psect	text8
  5468  07DA                     __ptext8:	
  5469 ;; *************** function _PWM3_Initialize *****************
  5470 ;; Defined at:
  5471 ;;		line 58 in file "mcc_generated_files/pwm3.c"
  5472 ;; Parameters:    Size  Location     Type
  5473 ;;		None
  5474 ;; Auto vars:     Size  Location     Type
  5475 ;;		None
  5476 ;; Return value:  Size  Location     Type
  5477 ;;                  1    wreg      void 
  5478 ;; Registers used:
  5479 ;;		wreg, status,2, status,0
  5480 ;; Tracked objects:
  5481 ;;		On entry : 0/0
  5482 ;;		On exit  : 0/0
  5483 ;;		Unchanged: 0/0
  5484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5489 ;;Total ram usage:        0 bytes
  5490 ;; Hardware stack levels used:    1
  5491 ;; Hardware stack levels required when called:   12
  5492 ;; This function calls:
  5493 ;;		Nothing
  5494 ;; This function is called by:
  5495 ;;		_SYSTEM_Initialize
  5496 ;; This function uses a non-reentrant model
  5497 ;;
  5498                           
  5499                           
  5500                           ;psect for function _PWM3_Initialize
  5501  07DA                     _PWM3_Initialize:	
  5502                           
  5503                           ;pwm3.c: 62: PWM3CON = 0x80;
  5504                           
  5505                           ;incstack = 0
  5506                           ; Regs used in _PWM3_Initialize: [wreg+status,2+status,0]
  5507  07DA  3080               	movlw	128
  5508  07DB  002C               	movlb	12	; select bank12
  5509  07DC  0099               	movwf	25	;volatile
  5510                           
  5511                           ;pwm3.c: 65: PWM3DCH = 0x0F;
  5512  07DD  300F               	movlw	15
  5513  07DE  0098               	movwf	24	;volatile
  5514                           
  5515                           ;pwm3.c: 68: PWM3DCL = 0x40;
  5516  07DF  3040               	movlw	64
  5517  07E0  0097               	movwf	23	;volatile
  5518                           
  5519                           ;pwm3.c: 71: CCPTMRSbits.P3TSEL = 0;
  5520  07E1  30CF               	movlw	-49
  5521  07E2  0025               	movlb	5	; select bank5
  5522  07E3  059E               	andwf	30,f	;volatile
  5523  07E4  0008               	return
  5524  07E5                     __end_of_PWM3_Initialize:	
  5525                           
  5526                           	psect	text9
  5527  028C                     __ptext9:	
  5528 ;; *************** function _PIN_MANAGER_Initialize *****************
  5529 ;; Defined at:
  5530 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  5531 ;; Parameters:    Size  Location     Type
  5532 ;;		None
  5533 ;; Auto vars:     Size  Location     Type
  5534 ;;		None
  5535 ;; Return value:  Size  Location     Type
  5536 ;;                  1    wreg      void 
  5537 ;; Registers used:
  5538 ;;		wreg, status,2
  5539 ;; Tracked objects:
  5540 ;;		On entry : 0/0
  5541 ;;		On exit  : 0/0
  5542 ;;		Unchanged: 0/0
  5543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5548 ;;Total ram usage:        0 bytes
  5549 ;; Hardware stack levels used:    1
  5550 ;; Hardware stack levels required when called:   12
  5551 ;; This function calls:
  5552 ;;		Nothing
  5553 ;; This function is called by:
  5554 ;;		_SYSTEM_Initialize
  5555 ;; This function uses a non-reentrant model
  5556 ;;
  5557                           
  5558                           
  5559                           ;psect for function _PIN_MANAGER_Initialize
  5560  028C                     _PIN_MANAGER_Initialize:	
  5561                           
  5562                           ;pin_manager.c: 60: LATA = 0x00;
  5563                           
  5564                           ;incstack = 0
  5565                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  5566  028C  0022               	movlb	2	; select bank2
  5567  028D  018C               	clrf	12	;volatile
  5568                           
  5569                           ;pin_manager.c: 61: LATB = 0x00;
  5570  028E  018D               	clrf	13	;volatile
  5571                           
  5572                           ;pin_manager.c: 62: LATC = 0x00;
  5573  028F  018E               	clrf	14	;volatile
  5574                           
  5575                           ;pin_manager.c: 67: TRISA = 0x13;
  5576  0290  3013               	movlw	19
  5577  0291  0021               	movlb	1	; select bank1
  5578  0292  008C               	movwf	12	;volatile
  5579                           
  5580                           ;pin_manager.c: 68: TRISB = 0x70;
  5581  0293  3070               	movlw	112
  5582  0294  008D               	movwf	13	;volatile
  5583                           
  5584                           ;pin_manager.c: 69: TRISC = 0xFF;
  5585  0295  30FF               	movlw	255
  5586  0296  008E               	movwf	14	;volatile
  5587                           
  5588                           ;pin_manager.c: 74: ANSELC = 0x8E;
  5589  0297  308E               	movlw	142
  5590  0298  0023               	movlb	3	; select bank3
  5591  0299  008E               	movwf	14	;volatile
  5592                           
  5593                           ;pin_manager.c: 75: ANSELB = 0x00;
  5594  029A  018D               	clrf	13	;volatile
  5595                           
  5596                           ;pin_manager.c: 76: ANSELA = 0x01;
  5597  029B  3001               	movlw	1
  5598  029C  008C               	movwf	12	;volatile
  5599                           
  5600                           ;pin_manager.c: 81: WPUB = 0x00;
  5601  029D  0024               	movlb	4	; select bank4
  5602  029E  018D               	clrf	13	;volatile
  5603                           
  5604                           ;pin_manager.c: 82: WPUA = 0x00;
  5605  029F  018C               	clrf	12	;volatile
  5606                           
  5607                           ;pin_manager.c: 83: WPUC = 0x00;
  5608  02A0  018E               	clrf	14	;volatile
  5609                           
  5610                           ;pin_manager.c: 84: OPTION_REGbits.nWPUEN = 1;
  5611  02A1  0021               	movlb	1	; select bank1
  5612  02A2  1795               	bsf	21,7	;volatile
  5613                           
  5614                           ;pin_manager.c: 89: ODCONA = 0x00;
  5615  02A3  0025               	movlb	5	; select bank5
  5616  02A4  018C               	clrf	12	;volatile
  5617                           
  5618                           ;pin_manager.c: 90: ODCONB = 0x00;
  5619  02A5  018D               	clrf	13	;volatile
  5620                           
  5621                           ;pin_manager.c: 91: ODCONC = 0x00;
  5622  02A6  018E               	clrf	14	;volatile
  5623                           
  5624                           ;pin_manager.c: 96: SLRCONA = 0x37;
  5625  02A7  3037               	movlw	55
  5626  02A8  0026               	movlb	6	; select bank6
  5627  02A9  008C               	movwf	12	;volatile
  5628                           
  5629                           ;pin_manager.c: 97: SLRCONB = 0xF0;
  5630  02AA  30F0               	movlw	240
  5631  02AB  008D               	movwf	13	;volatile
  5632                           
  5633                           ;pin_manager.c: 98: SLRCONC = 0xFF;
  5634  02AC  30FF               	movlw	255
  5635  02AD  008E               	movwf	14	;volatile
  5636                           
  5637                           ;pin_manager.c: 103: INLVLA = 0x3F;
  5638  02AE  303F               	movlw	63
  5639  02AF  0027               	movlb	7	; select bank7
  5640  02B0  008C               	movwf	12	;volatile
  5641                           
  5642                           ;pin_manager.c: 104: INLVLB = 0xF0;
  5643  02B1  30F0               	movlw	240
  5644  02B2  008D               	movwf	13	;volatile
  5645                           
  5646                           ;pin_manager.c: 105: INLVLC = 0xFF;
  5647  02B3  30FF               	movlw	255
  5648  02B4  008E               	movwf	14	;volatile
  5649                           
  5650                           ;pin_manager.c: 114: RXPPS = 0x0D;
  5651  02B5  300D               	movlw	13
  5652  02B6  003C               	movlb	28	; select bank28
  5653  02B7  00A4               	movwf	36	;volatile
  5654                           
  5655                           ;pin_manager.c: 115: SSPDATPPS = 0x0C;
  5656  02B8  300C               	movlw	12
  5657  02B9  00A1               	movwf	33	;volatile
  5658                           
  5659                           ;pin_manager.c: 116: RB6PPS = 0x10;
  5660  02BA  3010               	movlw	16
  5661  02BB  003D               	movlb	29	; select bank29
  5662  02BC  009E               	movwf	30	;volatile
  5663                           
  5664                           ;pin_manager.c: 117: RB7PPS = 0x12;
  5665  02BD  3012               	movlw	18
  5666  02BE  009F               	movwf	31	;volatile
  5667                           
  5668                           ;pin_manager.c: 118: RB4PPS = 0x11;
  5669  02BF  3011               	movlw	17
  5670  02C0  009C               	movwf	28	;volatile
  5671                           
  5672                           ;pin_manager.c: 119: RA2PPS = 0x0E;
  5673  02C1  300E               	movlw	14
  5674  02C2  0092               	movwf	18	;volatile
  5675                           
  5676                           ;pin_manager.c: 120: SSPCLKPPS = 0x0E;
  5677  02C3  300E               	movlw	14
  5678  02C4  003C               	movlb	28	; select bank28
  5679  02C5  00A0               	movwf	32	;volatile
  5680  02C6  0008               	return
  5681  02C7                     __end_of_PIN_MANAGER_Initialize:	
  5682                           
  5683                           	psect	text10
  5684  0F54                     __ptext10:	
  5685 ;; *************** function _OSCILLATOR_Initialize *****************
  5686 ;; Defined at:
  5687 ;;		line 60 in file "mcc_generated_files/mcc.c"
  5688 ;; Parameters:    Size  Location     Type
  5689 ;;		None
  5690 ;; Auto vars:     Size  Location     Type
  5691 ;;		None
  5692 ;; Return value:  Size  Location     Type
  5693 ;;                  1    wreg      void 
  5694 ;; Registers used:
  5695 ;;		wreg, status,2
  5696 ;; Tracked objects:
  5697 ;;		On entry : 0/0
  5698 ;;		On exit  : 0/0
  5699 ;;		Unchanged: 0/0
  5700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5705 ;;Total ram usage:        0 bytes
  5706 ;; Hardware stack levels used:    1
  5707 ;; Hardware stack levels required when called:   12
  5708 ;; This function calls:
  5709 ;;		Nothing
  5710 ;; This function is called by:
  5711 ;;		_SYSTEM_Initialize
  5712 ;; This function uses a non-reentrant model
  5713 ;;
  5714                           
  5715                           
  5716                           ;psect for function _OSCILLATOR_Initialize
  5717  0F54                     _OSCILLATOR_Initialize:	
  5718                           
  5719                           ;mcc.c: 63: OSCCON = 0x6A;
  5720                           
  5721                           ;incstack = 0
  5722                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5723  0F54  306A               	movlw	106
  5724  0F55  0021               	movlb	1	; select bank1
  5725  0F56  0099               	movwf	25	;volatile
  5726                           
  5727                           ;mcc.c: 65: OSCTUNE = 0x00;
  5728  0F57  0198               	clrf	24	;volatile
  5729                           
  5730                           ;mcc.c: 67: BORCON = 0x00;
  5731  0F58  0022               	movlb	2	; select bank2
  5732  0F59  0196               	clrf	22	;volatile
  5733  0F5A  0008               	return
  5734  0F5B                     __end_of_OSCILLATOR_Initialize:	
  5735                           
  5736                           	psect	text11
  5737  07F0                     __ptext11:	
  5738 ;; *************** function _I2C_Initialize *****************
  5739 ;; Defined at:
  5740 ;;		line 167 in file "mcc_generated_files/i2c_master.c"
  5741 ;; Parameters:    Size  Location     Type
  5742 ;;		None
  5743 ;; Auto vars:     Size  Location     Type
  5744 ;;		None
  5745 ;; Return value:  Size  Location     Type
  5746 ;;                  1    wreg      void 
  5747 ;; Registers used:
  5748 ;;		wreg, status,2
  5749 ;; Tracked objects:
  5750 ;;		On entry : 0/0
  5751 ;;		On exit  : 0/0
  5752 ;;		Unchanged: 0/0
  5753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5758 ;;Total ram usage:        0 bytes
  5759 ;; Hardware stack levels used:    1
  5760 ;; Hardware stack levels required when called:   12
  5761 ;; This function calls:
  5762 ;;		Nothing
  5763 ;; This function is called by:
  5764 ;;		_SYSTEM_Initialize
  5765 ;; This function uses a non-reentrant model
  5766 ;;
  5767                           
  5768                           
  5769                           ;psect for function _I2C_Initialize
  5770  07F0                     _I2C_Initialize:	
  5771                           
  5772                           ;i2c_master.c: 169: SSP1STAT = 0x80;
  5773                           
  5774                           ;incstack = 0
  5775                           ; Regs used in _I2C_Initialize: [wreg+status,2]
  5776  07F0  3080               	movlw	128
  5777  07F1  0024               	movlb	4	; select bank4
  5778  07F2  0094               	movwf	20	;volatile
  5779                           
  5780                           ;i2c_master.c: 170: SSP1CON1 = 0x08;
  5781  07F3  3008               	movlw	8
  5782  07F4  0095               	movwf	21	;volatile
  5783                           
  5784                           ;i2c_master.c: 171: SSP1CON2 = 0x00;
  5785  07F5  0196               	clrf	22	;volatile
  5786                           
  5787                           ;i2c_master.c: 172: SSP1ADD = 0x09;
  5788  07F6  3009               	movlw	9
  5789  07F7  0092               	movwf	18	;volatile
  5790                           
  5791                           ;i2c_master.c: 173: SSP1CON1bits.SSPEN = 0;
  5792  07F8  1295               	bcf	21,5	;volatile
  5793  07F9  0008               	return
  5794  07FA                     __end_of_I2C_Initialize:	
  5795                           
  5796                           	psect	text12
  5797  03DA                     __ptext12:	
  5798 ;; *************** function _EUSART_Initialize *****************
  5799 ;; Defined at:
  5800 ;;		line 83 in file "mcc_generated_files/eusart.c"
  5801 ;; Parameters:    Size  Location     Type
  5802 ;;		None
  5803 ;; Auto vars:     Size  Location     Type
  5804 ;;		None
  5805 ;; Return value:  Size  Location     Type
  5806 ;;                  1    wreg      void 
  5807 ;; Registers used:
  5808 ;;		wreg, status,2, status,0, pclath, cstack
  5809 ;; Tracked objects:
  5810 ;;		On entry : 0/0
  5811 ;;		On exit  : 0/0
  5812 ;;		Unchanged: 0/0
  5813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5817 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5818 ;;Total ram usage:        0 bytes
  5819 ;; Hardware stack levels used:    1
  5820 ;; Hardware stack levels required when called:   13
  5821 ;; This function calls:
  5822 ;;		_EUSART_SetErrorHandler
  5823 ;;		_EUSART_SetFramingErrorHandler
  5824 ;;		_EUSART_SetOverrunErrorHandler
  5825 ;;		_EUSART_SetRxInterruptHandler
  5826 ;; This function is called by:
  5827 ;;		_SYSTEM_Initialize
  5828 ;; This function uses a non-reentrant model
  5829 ;;
  5830                           
  5831                           
  5832                           ;psect for function _EUSART_Initialize
  5833  03DA                     _EUSART_Initialize:	
  5834                           
  5835                           ;eusart.c: 86: PIE1bits.RCIE = 0;
  5836                           
  5837                           ;incstack = 0
  5838                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5839  03DA  0021               	movlb	1	; select bank1
  5840  03DB  1290               	bcf	16,5	;volatile
  5841                           
  5842                           ;eusart.c: 87: EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  5843  03DC  3070               	movlw	low _EUSART_Receive_ISR
  5844  03DD  0020               	movlb	0	; select bank0
  5845  03DE  00D6               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  5846  03DF  3003               	movlw	high _EUSART_Receive_ISR
  5847  03E0  00D7               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  5848  03E1  318F  27D0  3183   	fcall	_EUSART_SetRxInterruptHandler
  5849                           
  5850                           ;eusart.c: 91: BAUD1CON = 0x09;
  5851  03E4  3009               	movlw	9
  5852  03E5  0023               	movlb	3	; select bank3
  5853  03E6  009F               	movwf	31	;volatile
  5854                           
  5855                           ;eusart.c: 94: RC1STA = 0x90;
  5856  03E7  3090               	movlw	144
  5857  03E8  009D               	movwf	29	;volatile
  5858                           
  5859                           ;eusart.c: 97: TX1STA = 0x24;
  5860  03E9  3024               	movlw	36
  5861  03EA  009E               	movwf	30	;volatile
  5862                           
  5863                           ;eusart.c: 100: SPBRGL = 0x67;
  5864  03EB  3067               	movlw	103
  5865  03EC  009B               	movwf	27	;volatile
  5866                           
  5867                           ;eusart.c: 103: SPBRGH = 0x00;
  5868  03ED  019C               	clrf	28	;volatile
  5869                           
  5870                           ;eusart.c: 106: EUSART_SetFramingErrorHandler(EUSART_DefaultFramingErrorHandler);
  5871  03EE  308A               	movlw	low _EUSART_DefaultFramingErrorHandler
  5872  03EF  0020               	movlb	0	; select bank0
  5873  03F0  00D6               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  5874  03F1  300E               	movlw	high _EUSART_DefaultFramingErrorHandler
  5875  03F2  00D7               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  5876  03F3  318F  27BE  3183   	fcall	_EUSART_SetFramingErrorHandler
  5877                           
  5878                           ;eusart.c: 107: EUSART_SetOverrunErrorHandler(EUSART_DefaultOverrunErrorHandler);
  5879  03F6  30CF               	movlw	low _EUSART_DefaultOverrunErrorHandler
  5880  03F7  0020               	movlb	0	; select bank0
  5881  03F8  00D6               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  5882  03F9  300E               	movlw	high _EUSART_DefaultOverrunErrorHandler
  5883  03FA  00D7               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  5884  03FB  318F  27C7  3183   	fcall	_EUSART_SetOverrunErrorHandler
  5885                           
  5886                           ;eusart.c: 108: EUSART_SetErrorHandler(EUSART_DefaultErrorHandler);
  5887  03FE  3090               	movlw	low _EUSART_DefaultErrorHandler
  5888  03FF  0020               	movlb	0	; select bank0
  5889  0400  00D6               	movwf	EUSART_SetErrorHandler@interruptHandler
  5890  0401  300E               	movlw	high _EUSART_DefaultErrorHandler
  5891  0402  00D7               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  5892  0403  318F  27B5         	fcall	_EUSART_SetErrorHandler
  5893                           
  5894                           ;eusart.c: 110: eusartRxLastError.status = 0;
  5895  0405  0020               	movlb	0	; select bank0
  5896  0406  01C0               	clrf	_eusartRxLastError	;volatile
  5897                           
  5898                           ;eusart.c: 113: eusartRxHead = 0;
  5899  0407  01C3               	clrf	_eusartRxHead	;volatile
  5900                           
  5901                           ;eusart.c: 114: eusartRxTail = 0;
  5902  0408  01C2               	clrf	_eusartRxTail	;volatile
  5903                           
  5904                           ;eusart.c: 115: eusartRxCount = 0;
  5905  0409  01C1               	clrf	_eusartRxCount	;volatile
  5906                           
  5907                           ;eusart.c: 118: PIE1bits.RCIE = 1;
  5908  040A  0021               	movlb	1	; select bank1
  5909  040B  1690               	bsf	16,5	;volatile
  5910  040C  0008               	return
  5911  040D                     __end_of_EUSART_Initialize:	
  5912                           
  5913                           	psect	text13
  5914  0FD0                     __ptext13:	
  5915 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  5916 ;; Defined at:
  5917 ;;		line 234 in file "mcc_generated_files/eusart.c"
  5918 ;; Parameters:    Size  Location     Type
  5919 ;;  interruptHan    2   18[BANK0 ] PTR FTN()void 
  5920 ;;		 -> MyUART_ISR(1), EUSART_Receive_ISR(1), 
  5921 ;; Auto vars:     Size  Location     Type
  5922 ;;		None
  5923 ;; Return value:  Size  Location     Type
  5924 ;;                  1    wreg      void 
  5925 ;; Registers used:
  5926 ;;		wreg
  5927 ;; Tracked objects:
  5928 ;;		On entry : 0/0
  5929 ;;		On exit  : 0/0
  5930 ;;		Unchanged: 0/0
  5931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5932 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5935 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5936 ;;Total ram usage:        2 bytes
  5937 ;; Hardware stack levels used:    1
  5938 ;; Hardware stack levels required when called:   12
  5939 ;; This function calls:
  5940 ;;		Nothing
  5941 ;; This function is called by:
  5942 ;;		_EUSART_Initialize
  5943 ;;		_main
  5944 ;; This function uses a non-reentrant model
  5945 ;;
  5946                           
  5947                           
  5948                           ;psect for function _EUSART_SetRxInterruptHandler
  5949  0FD0                     _EUSART_SetRxInterruptHandler:	
  5950                           
  5951                           ;eusart.c: 235: EUSART_RxDefaultInterruptHandler = interruptHandler;
  5952                           
  5953                           ;incstack = 0
  5954                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  5955  0FD0  0020               	movlb	0	; select bank0
  5956  0FD1  0857               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  5957  0FD2  0021               	movlb	1	; select bank1
  5958  0FD3  00CC               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
  5959  0FD4  0020               	movlb	0	; select bank0
  5960  0FD5  0856               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  5961  0FD6  0021               	movlb	1	; select bank1
  5962  0FD7  00CB               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
  5963  0FD8  0008               	return
  5964  0FD9                     __end_of_EUSART_SetRxInterruptHandler:	
  5965                           
  5966                           	psect	text14
  5967  0FC7                     __ptext14:	
  5968 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  5969 ;; Defined at:
  5970 ;;		line 225 in file "mcc_generated_files/eusart.c"
  5971 ;; Parameters:    Size  Location     Type
  5972 ;;  interruptHan    2   18[BANK0 ] PTR FTN()void 
  5973 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  5974 ;; Auto vars:     Size  Location     Type
  5975 ;;		None
  5976 ;; Return value:  Size  Location     Type
  5977 ;;                  1    wreg      void 
  5978 ;; Registers used:
  5979 ;;		wreg
  5980 ;; Tracked objects:
  5981 ;;		On entry : 0/0
  5982 ;;		On exit  : 0/0
  5983 ;;		Unchanged: 0/0
  5984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5985 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5988 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5989 ;;Total ram usage:        2 bytes
  5990 ;; Hardware stack levels used:    1
  5991 ;; Hardware stack levels required when called:   12
  5992 ;; This function calls:
  5993 ;;		Nothing
  5994 ;; This function is called by:
  5995 ;;		_EUSART_Initialize
  5996 ;; This function uses a non-reentrant model
  5997 ;;
  5998                           
  5999                           
  6000                           ;psect for function _EUSART_SetOverrunErrorHandler
  6001  0FC7                     _EUSART_SetOverrunErrorHandler:	
  6002                           
  6003                           ;eusart.c: 226: EUSART_OverrunErrorHandler = interruptHandler;
  6004                           
  6005                           ;incstack = 0
  6006                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  6007  0FC7  0020               	movlb	0	; select bank0
  6008  0FC8  0857               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  6009  0FC9  0021               	movlb	1	; select bank1
  6010  0FCA  00C8               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  6011  0FCB  0020               	movlb	0	; select bank0
  6012  0FCC  0856               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  6013  0FCD  0021               	movlb	1	; select bank1
  6014  0FCE  00C7               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  6015  0FCF  0008               	return
  6016  0FD0                     __end_of_EUSART_SetOverrunErrorHandler:	
  6017                           
  6018                           	psect	text15
  6019  0FBE                     __ptext15:	
  6020 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  6021 ;; Defined at:
  6022 ;;		line 221 in file "mcc_generated_files/eusart.c"
  6023 ;; Parameters:    Size  Location     Type
  6024 ;;  interruptHan    2   18[BANK0 ] PTR FTN()void 
  6025 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  6026 ;; Auto vars:     Size  Location     Type
  6027 ;;		None
  6028 ;; Return value:  Size  Location     Type
  6029 ;;                  1    wreg      void 
  6030 ;; Registers used:
  6031 ;;		wreg
  6032 ;; Tracked objects:
  6033 ;;		On entry : 0/0
  6034 ;;		On exit  : 0/0
  6035 ;;		Unchanged: 0/0
  6036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6037 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6040 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6041 ;;Total ram usage:        2 bytes
  6042 ;; Hardware stack levels used:    1
  6043 ;; Hardware stack levels required when called:   12
  6044 ;; This function calls:
  6045 ;;		Nothing
  6046 ;; This function is called by:
  6047 ;;		_EUSART_Initialize
  6048 ;; This function uses a non-reentrant model
  6049 ;;
  6050                           
  6051                           
  6052                           ;psect for function _EUSART_SetFramingErrorHandler
  6053  0FBE                     _EUSART_SetFramingErrorHandler:	
  6054                           
  6055                           ;eusart.c: 222: EUSART_FramingErrorHandler = interruptHandler;
  6056                           
  6057                           ;incstack = 0
  6058                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  6059  0FBE  0020               	movlb	0	; select bank0
  6060  0FBF  0857               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  6061  0FC0  0021               	movlb	1	; select bank1
  6062  0FC1  00CA               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  6063  0FC2  0020               	movlb	0	; select bank0
  6064  0FC3  0856               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  6065  0FC4  0021               	movlb	1	; select bank1
  6066  0FC5  00C9               	movwf	_EUSART_FramingErrorHandler^(0+128)
  6067  0FC6  0008               	return
  6068  0FC7                     __end_of_EUSART_SetFramingErrorHandler:	
  6069                           
  6070                           	psect	text16
  6071  0FB5                     __ptext16:	
  6072 ;; *************** function _EUSART_SetErrorHandler *****************
  6073 ;; Defined at:
  6074 ;;		line 229 in file "mcc_generated_files/eusart.c"
  6075 ;; Parameters:    Size  Location     Type
  6076 ;;  interruptHan    2   18[BANK0 ] PTR FTN()void 
  6077 ;;		 -> EUSART_DefaultErrorHandler(1), 
  6078 ;; Auto vars:     Size  Location     Type
  6079 ;;		None
  6080 ;; Return value:  Size  Location     Type
  6081 ;;                  1    wreg      void 
  6082 ;; Registers used:
  6083 ;;		wreg
  6084 ;; Tracked objects:
  6085 ;;		On entry : 0/0
  6086 ;;		On exit  : 0/0
  6087 ;;		Unchanged: 0/0
  6088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6089 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6092 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6093 ;;Total ram usage:        2 bytes
  6094 ;; Hardware stack levels used:    1
  6095 ;; Hardware stack levels required when called:   12
  6096 ;; This function calls:
  6097 ;;		Nothing
  6098 ;; This function is called by:
  6099 ;;		_EUSART_Initialize
  6100 ;; This function uses a non-reentrant model
  6101 ;;
  6102                           
  6103                           
  6104                           ;psect for function _EUSART_SetErrorHandler
  6105  0FB5                     _EUSART_SetErrorHandler:	
  6106                           
  6107                           ;eusart.c: 230: EUSART_ErrorHandler = interruptHandler;
  6108                           
  6109                           ;incstack = 0
  6110                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  6111  0FB5  0020               	movlb	0	; select bank0
  6112  0FB6  0857               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  6113  0FB7  0021               	movlb	1	; select bank1
  6114  0FB8  00C6               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  6115  0FB9  0020               	movlb	0	; select bank0
  6116  0FBA  0856               	movf	EUSART_SetErrorHandler@interruptHandler,w
  6117  0FBB  0021               	movlb	1	; select bank1
  6118  0FBC  00C5               	movwf	_EUSART_ErrorHandler^(0+128)
  6119  0FBD  0008               	return
  6120  0FBE                     __end_of_EUSART_SetErrorHandler:	
  6121                           
  6122                           	psect	text17
  6123  040D                     __ptext17:	
  6124 ;; *************** function _I2C_Write1ByteRegister *****************
  6125 ;; Defined at:
  6126 ;;		line 91 in file "mcc_generated_files/examples/i2c_master_example.c"
  6127 ;; Parameters:    Size  Location     Type
  6128 ;;  address         1    wreg     unsigned char 
  6129 ;;  reg             1   11[BANK1 ] unsigned char 
  6130 ;;  data            1   12[BANK1 ] unsigned char 
  6131 ;; Auto vars:     Size  Location     Type
  6132 ;;  address         1   14[BANK1 ] unsigned char 
  6133 ;; Return value:  Size  Location     Type
  6134 ;;                  1    wreg      void 
  6135 ;; Registers used:
  6136 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6137 ;; Tracked objects:
  6138 ;;		On entry : 0/0
  6139 ;;		On exit  : 0/0
  6140 ;;		Unchanged: 0/0
  6141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6142 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6143 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6144 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6145 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6146 ;;Total ram usage:        4 bytes
  6147 ;; Hardware stack levels used:    1
  6148 ;; Hardware stack levels required when called:   20
  6149 ;; This function calls:
  6150 ;;		_I2C_Close
  6151 ;;		_I2C_MasterWrite
  6152 ;;		_I2C_Open
  6153 ;;		_I2C_SetAddressNackCallback
  6154 ;;		_I2C_SetBuffer
  6155 ;;		_I2C_SetDataCompleteCallback
  6156 ;; This function is called by:
  6157 ;;		_main
  6158 ;; This function uses a non-reentrant model
  6159 ;;
  6160                           
  6161                           
  6162                           ;psect for function _I2C_Write1ByteRegister
  6163  040D                     _I2C_Write1ByteRegister:	
  6164                           
  6165                           ;incstack = 0
  6166 ;; hardware stack exceeded
  6167                           ; Regs used in _I2C_Write1ByteRegister: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6168                           ;I2C_Write1ByteRegister@address stored from wreg
  6169  040D  0021               	movlb	1	; select bank1
  6170  040E  00C0               	movwf	I2C_Write1ByteRegister@address^(0+128)
  6171  040F                     l5753:	
  6172                           ;i2c_master_example.c: 93: while(!I2C_Open(address));
  6173                           
  6174  040F  0021               	movlb	1	; select bank1
  6175  0410  0840               	movf	I2C_Write1ByteRegister@address^(0+128),w
  6176  0411  3183  2301  3184   	fcall	_I2C_Open
  6177  0414  3A00               	xorlw	0
  6178  0415  1903               	skipnz
  6179  0416  2C0F               	goto	l5753
  6180                           
  6181                           ;i2c_master_example.c: 94: I2C_SetDataCompleteCallback(wr1RegCompleteHandler,&data);
  6182  0417  3050               	movlw	low _wr1RegCompleteHandler
  6183  0418  0020               	movlb	0	; select bank0
  6184  0419  00DB               	movwf	I2C_SetDataCompleteCallback@cb
  6185  041A  3006               	movlw	high _wr1RegCompleteHandler
  6186  041B  00DC               	movwf	I2C_SetDataCompleteCallback@cb+1
  6187  041C  30BE               	movlw	(low (I2C_Write1ByteRegister@data| 0))& (0+255)
  6188  041D  0021               	movlb	1	; select bank1
  6189  041E  00BF               	movwf	??_I2C_Write1ByteRegister^(0+128)
  6190  041F  083F               	movf	??_I2C_Write1ByteRegister^(0+128),w
  6191  0420  0020               	movlb	0	; select bank0
  6192  0421  00DD               	movwf	I2C_SetDataCompleteCallback@ptr
  6193  0422  3187  2766  3184   	fcall	_I2C_SetDataCompleteCallback
  6194                           
  6195                           ;i2c_master_example.c: 95: I2C_SetBuffer(&reg,1);
  6196  0425  3001               	movlw	1
  6197  0426  0020               	movlb	0	; select bank0
  6198  0427  00D6               	movwf	I2C_SetBuffer@bufferSize
  6199  0428  3000               	movlw	0
  6200  0429  00D7               	movwf	I2C_SetBuffer@bufferSize+1
  6201  042A  30BD               	movlw	(low (I2C_Write1ByteRegister@reg| 0))& (0+255)
  6202  042B  3187  2775  3184   	fcall	_I2C_SetBuffer
  6203                           
  6204                           ;i2c_master_example.c: 96: I2C_SetAddressNackCallback((0),(0));
  6205  042E  3000               	movlw	0
  6206  042F  0020               	movlb	0	; select bank0
  6207  0430  00DB               	movwf	I2C_SetAddressNackCallback@cb
  6208  0431  00DC               	movwf	I2C_SetAddressNackCallback@cb+1
  6209  0432  01DD               	clrf	I2C_SetAddressNackCallback@ptr
  6210  0433  3187  2757  3184   	fcall	_I2C_SetAddressNackCallback
  6211                           
  6212                           ;i2c_master_example.c: 97: I2C_MasterWrite();
  6213  0436  318F  270B  3184   	fcall	_I2C_MasterWrite
  6214  0439                     l5763:	
  6215                           ;i2c_master_example.c: 98: while(I2C_BUSY == I2C_Close());
  6216                           
  6217  0439  3186  261E  3184   	fcall	_I2C_Close
  6218  043C  3A01               	xorlw	1
  6219  043D  1D03               	btfss	3,2
  6220  043E  0008               	return
  6221  043F  2C39               	goto	l5763
  6222  0440                     __end_of_I2C_Write1ByteRegister:	
  6223                           
  6224                           	psect	text18
  6225  0757                     __ptext18:	
  6226 ;; *************** function _I2C_SetAddressNackCallback *****************
  6227 ;; Defined at:
  6228 ;;		line 283 in file "mcc_generated_files/i2c_master.c"
  6229 ;; Parameters:    Size  Location     Type
  6230 ;;  cb              2   23[BANK0 ] PTR FTN(PTR void ,)enum 
  6231 ;;		 -> Absolute function(1), 
  6232 ;;  ptr             1   25[BANK0 ] PTR void 
  6233 ;;		 -> NULL(0), 
  6234 ;; Auto vars:     Size  Location     Type
  6235 ;;		None
  6236 ;; Return value:  Size  Location     Type
  6237 ;;                  1    wreg      void 
  6238 ;; Registers used:
  6239 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6240 ;; Tracked objects:
  6241 ;;		On entry : 0/0
  6242 ;;		On exit  : 0/0
  6243 ;;		Unchanged: 0/0
  6244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6245 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6247 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6248 ;;      Totals:         0       3       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6249 ;;Total ram usage:        4 bytes
  6250 ;; Hardware stack levels used:    1
  6251 ;; Hardware stack levels required when called:   13
  6252 ;; This function calls:
  6253 ;;		_I2C_SetCallback
  6254 ;; This function is called by:
  6255 ;;		_I2C_Write1ByteRegister
  6256 ;;		_I2C_Read1ByteRegister
  6257 ;;		_I2C_Write2ByteRegister
  6258 ;;		_I2C_WriteNBytes
  6259 ;;		_I2C_ReadDataBlock
  6260 ;; This function uses a non-reentrant model
  6261 ;;
  6262                           
  6263                           
  6264                           ;psect for function _I2C_SetAddressNackCallback
  6265  0757                     _I2C_SetAddressNackCallback:	
  6266                           
  6267                           ;i2c_master.c: 285: I2C_SetCallback(I2C_ADDR_NACK, cb, ptr);
  6268                           
  6269                           ;incstack = 0
  6270                           ; Regs used in _I2C_SetAddressNackCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6271  0757  0020               	movlb	0	; select bank0
  6272  0758  085C               	movf	I2C_SetAddressNackCallback@cb+1,w
  6273  0759  00D7               	movwf	I2C_SetCallback@cb+1
  6274  075A  085B               	movf	I2C_SetAddressNackCallback@cb,w
  6275  075B  00D6               	movwf	I2C_SetCallback@cb
  6276  075C  085D               	movf	I2C_SetAddressNackCallback@ptr,w
  6277  075D  0021               	movlb	1	; select bank1
  6278  075E  00B2               	movwf	??_I2C_SetAddressNackCallback^(0+128)
  6279  075F  0832               	movf	??_I2C_SetAddressNackCallback^(0+128),w
  6280  0760  0020               	movlb	0	; select bank0
  6281  0761  00D8               	movwf	I2C_SetCallback@ptr
  6282  0762  3002               	movlw	2
  6283  0763  3185  2515         	fcall	_I2C_SetCallback
  6284  0765  0008               	return
  6285  0766                     __end_of_I2C_SetAddressNackCallback:	
  6286                           
  6287                           	psect	text19
  6288  0301                     __ptext19:	
  6289 ;; *************** function _I2C_Open *****************
  6290 ;; Defined at:
  6291 ;;		line 176 in file "mcc_generated_files/i2c_master.c"
  6292 ;; Parameters:    Size  Location     Type
  6293 ;;  address         1    wreg     unsigned char 
  6294 ;; Auto vars:     Size  Location     Type
  6295 ;;  address         1   19[BANK0 ] unsigned char 
  6296 ;;  returnValue     1   20[BANK0 ] enum E92
  6297 ;; Return value:  Size  Location     Type
  6298 ;;                  1    wreg      enum E92
  6299 ;; Registers used:
  6300 ;;		wreg, status,2, status,0, pclath, cstack
  6301 ;; Tracked objects:
  6302 ;;		On entry : 0/0
  6303 ;;		On exit  : 0/0
  6304 ;;		Unchanged: 0/0
  6305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6307 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6308 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6309 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6310 ;;Total ram usage:        3 bytes
  6311 ;; Hardware stack levels used:    1
  6312 ;; Hardware stack levels required when called:   13
  6313 ;; This function calls:
  6314 ;;		_I2C_MasterClearIrq
  6315 ;;		_I2C_MasterOpen
  6316 ;; This function is called by:
  6317 ;;		_I2C_Write1ByteRegister
  6318 ;;		_I2C_Read1ByteRegister
  6319 ;;		_I2C_Write2ByteRegister
  6320 ;;		_I2C_WriteNBytes
  6321 ;;		_I2C_ReadNBytes
  6322 ;;		_I2C_ReadDataBlock
  6323 ;; This function uses a non-reentrant model
  6324 ;;
  6325                           
  6326                           
  6327                           ;psect for function _I2C_Open
  6328  0301                     _I2C_Open:	
  6329                           
  6330                           ;incstack = 0
  6331                           ; Regs used in _I2C_Open: [wreg+status,2+status,0+pclath+cstack]
  6332                           ;I2C_Open@address stored from wreg
  6333  0301  0020               	movlb	0	; select bank0
  6334  0302  00D7               	movwf	I2C_Open@address
  6335                           
  6336                           ;i2c_master.c: 178: i2c_error_t returnValue = I2C_BUSY;
  6337  0303  01D8               	clrf	I2C_Open@returnValue
  6338  0304  0AD8               	incf	I2C_Open@returnValue,f
  6339                           
  6340                           ;i2c_master.c: 180: if(!I2C_Status.inUse)
  6341  0305  193C               	btfsc	_I2C_Status+28,2
  6342  0306  2B37               	goto	l321
  6343                           
  6344                           ;i2c_master.c: 181: {
  6345                           ;i2c_master.c: 182: I2C_Status.address = address;
  6346  0307  0857               	movf	I2C_Open@address,w
  6347  0308  00D6               	movwf	??_I2C_Open
  6348  0309  0856               	movf	??_I2C_Open,w
  6349  030A  00B6               	movwf	_I2C_Status+22
  6350                           
  6351                           ;i2c_master.c: 183: I2C_Status.busy = 0;
  6352  030B  10BC               	bcf	_I2C_Status+28,1
  6353                           
  6354                           ;i2c_master.c: 184: I2C_Status.inUse = 1;
  6355  030C  153C               	bsf	_I2C_Status+28,2
  6356                           
  6357                           ;i2c_master.c: 185: I2C_Status.addressNackCheck = 0;
  6358  030D  103C               	bcf	_I2C_Status+28,0
  6359                           
  6360                           ;i2c_master.c: 186: I2C_Status.state = I2C_RESET;
  6361  030E  300E               	movlw	14
  6362  030F  00D6               	movwf	??_I2C_Open
  6363  0310  0856               	movf	??_I2C_Open,w
  6364  0311  00BA               	movwf	_I2C_Status+26
  6365                           
  6366                           ;i2c_master.c: 187: I2C_Status.time_out_value = 500;
  6367  0312  30F4               	movlw	244
  6368  0313  00B4               	movwf	_I2C_Status+20
  6369  0314  3001               	movlw	1
  6370  0315  00B5               	movwf	_I2C_Status+21
  6371                           
  6372                           ;i2c_master.c: 188: I2C_Status.bufferFree = 1;
  6373  0316  15BC               	bsf	_I2C_Status+28,3
  6374                           
  6375                           ;i2c_master.c: 191: I2C_Status.callbackTable[I2C_DATA_COMPLETE]=I2C_CallbackReturnStop;
  6376  0317  302F               	movlw	low _I2C_CallbackReturnStop
  6377  0318  00A0               	movwf	_I2C_Status
  6378  0319  300F               	movlw	high _I2C_CallbackReturnStop
  6379  031A  00A1               	movwf	_I2C_Status+1
  6380                           
  6381                           ;i2c_master.c: 192: I2C_Status.callbackPayload[I2C_DATA_COMPLETE] = (0);
  6382  031B  01AC               	clrf	low ((_I2C_Status| 0+12))
  6383                           
  6384                           ;i2c_master.c: 193: I2C_Status.callbackTable[I2C_WRITE_COLLISION]=I2C_CallbackReturnStop
      +                          ;
  6385  031C  302F               	movlw	low _I2C_CallbackReturnStop
  6386  031D  00A2               	movwf	low ((_I2C_Status| 0+2))
  6387  031E  300F               	movlw	high _I2C_CallbackReturnStop
  6388  031F  00A3               	movwf	(low ((_I2C_Status| 0+2))+1)
  6389                           
  6390                           ;i2c_master.c: 194: I2C_Status.callbackPayload[I2C_WRITE_COLLISION] = (0);
  6391  0320  01AD               	clrf	low ((_I2C_Status| 0+13))
  6392                           
  6393                           ;i2c_master.c: 195: I2C_Status.callbackTable[I2C_ADDR_NACK]=I2C_CallbackReturnStop;
  6394  0321  302F               	movlw	low _I2C_CallbackReturnStop
  6395  0322  00A4               	movwf	low ((_I2C_Status| 0+4))
  6396  0323  300F               	movlw	high _I2C_CallbackReturnStop
  6397  0324  00A5               	movwf	(low ((_I2C_Status| 0+4))+1)
  6398                           
  6399                           ;i2c_master.c: 196: I2C_Status.callbackPayload[I2C_ADDR_NACK] = (0);
  6400  0325  01AE               	clrf	low ((_I2C_Status| 0+14))
  6401                           
  6402                           ;i2c_master.c: 197: I2C_Status.callbackTable[I2C_DATA_NACK]=I2C_CallbackReturnStop;
  6403  0326  302F               	movlw	low _I2C_CallbackReturnStop
  6404  0327  00A6               	movwf	low ((_I2C_Status| 0+6))
  6405  0328  300F               	movlw	high _I2C_CallbackReturnStop
  6406  0329  00A7               	movwf	(low ((_I2C_Status| 0+6))+1)
  6407                           
  6408                           ;i2c_master.c: 198: I2C_Status.callbackPayload[I2C_DATA_NACK] = (0);
  6409  032A  01AF               	clrf	low ((_I2C_Status| 0+15))
  6410                           
  6411                           ;i2c_master.c: 199: I2C_Status.callbackTable[I2C_TIMEOUT]=I2C_CallbackReturnReset;
  6412  032B  3035               	movlw	low _I2C_CallbackReturnReset
  6413  032C  00A8               	movwf	low ((_I2C_Status| 0+8))
  6414  032D  300F               	movlw	high _I2C_CallbackReturnReset
  6415  032E  00A9               	movwf	(low ((_I2C_Status| 0+8))+1)
  6416                           
  6417                           ;i2c_master.c: 200: I2C_Status.callbackPayload[I2C_TIMEOUT] = (0);
  6418  032F  01B0               	clrf	low ((_I2C_Status| 0+16))
  6419                           
  6420                           ;i2c_master.c: 202: I2C_MasterClearIrq();
  6421  0330  318E  26AE  3183   	fcall	_I2C_MasterClearIrq
  6422                           
  6423                           ;i2c_master.c: 203: I2C_MasterOpen();
  6424  0333  3187  279E         	fcall	_I2C_MasterOpen
  6425                           
  6426                           ;i2c_master.c: 204: returnValue = I2C_NOERR;
  6427  0335  0020               	movlb	0	; select bank0
  6428  0336  01D8               	clrf	I2C_Open@returnValue
  6429  0337                     l321:	
  6430                           
  6431                           ;i2c_master.c: 205: }
  6432                           ;i2c_master.c: 206: return returnValue;
  6433  0337  0858               	movf	I2C_Open@returnValue,w
  6434  0338  0008               	return
  6435  0339                     __end_of_I2C_Open:	
  6436                           
  6437                           	psect	text20
  6438  079E                     __ptext20:	
  6439 ;; *************** function _I2C_MasterOpen *****************
  6440 ;; Defined at:
  6441 ;;		line 543 in file "mcc_generated_files/i2c_master.c"
  6442 ;; Parameters:    Size  Location     Type
  6443 ;;		None
  6444 ;; Auto vars:     Size  Location     Type
  6445 ;;		None
  6446 ;; Return value:  Size  Location     Type
  6447 ;;                  1    wreg      unsigned char 
  6448 ;; Registers used:
  6449 ;;		wreg, status,2
  6450 ;; Tracked objects:
  6451 ;;		On entry : 0/0
  6452 ;;		On exit  : 0/0
  6453 ;;		Unchanged: 0/0
  6454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6459 ;;Total ram usage:        0 bytes
  6460 ;; Hardware stack levels used:    1
  6461 ;; Hardware stack levels required when called:   12
  6462 ;; This function calls:
  6463 ;;		Nothing
  6464 ;; This function is called by:
  6465 ;;		_I2C_Open
  6466 ;; This function uses a non-reentrant model
  6467 ;;
  6468                           
  6469                           
  6470                           ;psect for function _I2C_MasterOpen
  6471  079E                     _I2C_MasterOpen:	
  6472                           
  6473                           ;i2c_master.c: 545: if(!SSP1CON1bits.SSPEN)
  6474                           
  6475                           ;incstack = 0
  6476                           ; Regs used in _I2C_MasterOpen: [wreg+status,2]
  6477  079E  0024               	movlb	4	; select bank4
  6478  079F  1A95               	btfsc	21,5	;volatile
  6479  07A0  0008               	return
  6480                           
  6481                           ;i2c_master.c: 546: {
  6482                           ;i2c_master.c: 547: SSP1STAT = 0x80;
  6483  07A1  3080               	movlw	128
  6484  07A2  0094               	movwf	20	;volatile
  6485                           
  6486                           ;i2c_master.c: 548: SSP1CON1 = 0x08;
  6487  07A3  3008               	movlw	8
  6488  07A4  0095               	movwf	21	;volatile
  6489                           
  6490                           ;i2c_master.c: 549: SSP1CON2 = 0x00;
  6491  07A5  0196               	clrf	22	;volatile
  6492                           
  6493                           ;i2c_master.c: 550: SSP1ADD = 0x09;
  6494  07A6  3009               	movlw	9
  6495  07A7  0092               	movwf	18	;volatile
  6496                           
  6497                           ;i2c_master.c: 551: SSP1CON1bits.SSPEN = 1;
  6498  07A8  1695               	bsf	21,5	;volatile
  6499                           
  6500                           ;i2c_master.c: 552: return 1;
  6501                           ;	Return value of _I2C_MasterOpen is never used
  6502  07A9  0008               	return
  6503  07AA                     __end_of_I2C_MasterOpen:	
  6504                           ;i2c_master.c: 553: }
  6505                           ;i2c_master.c: 554: return 0;
  6506                           ;	Return value of _I2C_MasterOpen is never used
  6507                           
  6508                           
  6509                           	psect	text21
  6510  0F0B                     __ptext21:	
  6511 ;; *************** function _I2C_MasterWrite *****************
  6512 ;; Defined at:
  6513 ;;		line 251 in file "mcc_generated_files/i2c_master.c"
  6514 ;; Parameters:    Size  Location     Type
  6515 ;;		None
  6516 ;; Auto vars:     Size  Location     Type
  6517 ;;		None
  6518 ;; Return value:  Size  Location     Type
  6519 ;;                  1    wreg      enum E92
  6520 ;; Registers used:
  6521 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6522 ;; Tracked objects:
  6523 ;;		On entry : 0/0
  6524 ;;		On exit  : 0/0
  6525 ;;		Unchanged: 0/0
  6526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6530 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6531 ;;Total ram usage:        0 bytes
  6532 ;; Hardware stack levels used:    1
  6533 ;; Hardware stack levels required when called:   19
  6534 ;; This function calls:
  6535 ;;		_I2C_MasterOperation
  6536 ;; This function is called by:
  6537 ;;		_I2C_Write1ByteRegister
  6538 ;;		_I2C_Read1ByteRegister
  6539 ;;		_I2C_Write2ByteRegister
  6540 ;;		_I2C_WriteNBytes
  6541 ;;		_I2C_ReadDataBlock
  6542 ;; This function uses a non-reentrant model
  6543 ;;
  6544                           
  6545                           
  6546                           ;psect for function _I2C_MasterWrite
  6547  0F0B                     _I2C_MasterWrite:	
  6548                           
  6549                           ;i2c_master.c: 253: return I2C_MasterOperation(0);
  6550                           ;	Return value of _I2C_MasterWrite is never used
  6551                           
  6552                           ;incstack = 0
  6553 ;; hardware stack exceeded
  6554                           ; Regs used in _I2C_MasterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6555  0F0B  3000               	movlw	0
  6556  0F0C  3185  25C6         	fcall	_I2C_MasterOperation
  6557  0F0E  0008               	return
  6558  0F0F                     __end_of_I2C_MasterWrite:	
  6559                           
  6560                           	psect	text22
  6561  05C6                     __ptext22:	
  6562 ;; *************** function _I2C_MasterOperation *****************
  6563 ;; Defined at:
  6564 ;;		line 224 in file "mcc_generated_files/i2c_master.c"
  6565 ;; Parameters:    Size  Location     Type
  6566 ;;  read            1    wreg     unsigned char 
  6567 ;; Auto vars:     Size  Location     Type
  6568 ;;  read            1    9[BANK1 ] unsigned char 
  6569 ;;  returnValue     1   10[BANK1 ] enum E92
  6570 ;; Return value:  Size  Location     Type
  6571 ;;                  1    wreg      enum E92
  6572 ;; Registers used:
  6573 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6574 ;; Tracked objects:
  6575 ;;		On entry : 0/0
  6576 ;;		On exit  : 0/0
  6577 ;;		Unchanged: 0/0
  6578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6580 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6581 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6582 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6583 ;;Total ram usage:        3 bytes
  6584 ;; Hardware stack levels used:    1
  6585 ;; Hardware stack levels required when called:   18
  6586 ;; This function calls:
  6587 ;;		_I2C_MasterStart
  6588 ;;		_I2C_Poller
  6589 ;; This function is called by:
  6590 ;;		_I2C_MasterWrite
  6591 ;;		_I2C_MasterRead
  6592 ;; This function uses a non-reentrant model
  6593 ;;
  6594                           
  6595                           
  6596                           ;psect for function _I2C_MasterOperation
  6597  05C6                     _I2C_MasterOperation:	
  6598                           
  6599                           ;incstack = 0
  6600 ;; hardware stack exceeded
  6601                           ; Regs used in _I2C_MasterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6602                           ;I2C_MasterOperation@read stored from wreg
  6603  05C6  0021               	movlb	1	; select bank1
  6604  05C7  00BB               	movwf	I2C_MasterOperation@read^(0+128)
  6605                           
  6606                           ;i2c_master.c: 226: i2c_error_t returnValue = I2C_BUSY;
  6607  05C8  01BC               	clrf	I2C_MasterOperation@returnValue^(0+128)
  6608  05C9  0ABC               	incf	I2C_MasterOperation@returnValue^(0+128),f
  6609                           
  6610                           ;i2c_master.c: 227: if(!I2C_Status.busy)
  6611  05CA  0020               	movlb	0	; select bank0
  6612  05CB  18BC               	btfsc	_I2C_Status+28,1
  6613  05CC  2DE2               	goto	l5693
  6614                           
  6615                           ;i2c_master.c: 228: {
  6616                           ;i2c_master.c: 229: I2C_Status.busy = 1;
  6617  05CD  14BC               	bsf	_I2C_Status+28,1
  6618                           
  6619                           ;i2c_master.c: 230: returnValue = I2C_NOERR;
  6620  05CE  0021               	movlb	1	; select bank1
  6621  05CF  01BC               	clrf	I2C_MasterOperation@returnValue^(0+128)
  6622                           
  6623                           ;i2c_master.c: 232: if(read)
  6624  05D0  083B               	movf	I2C_MasterOperation@read^(0+128),w
  6625  05D1  1903               	btfsc	3,2
  6626  05D2  2DD7               	goto	l5687
  6627                           
  6628                           ;i2c_master.c: 233: {
  6629                           ;i2c_master.c: 234: I2C_Status.state = I2C_SEND_ADR_READ;
  6630  05D3  0020               	movlb	0	; select bank0
  6631  05D4  01BA               	clrf	_I2C_Status+26
  6632  05D5  0ABA               	incf	_I2C_Status+26,f
  6633                           
  6634                           ;i2c_master.c: 235: }
  6635  05D6  2DDD               	goto	l5689
  6636  05D7                     l5687:	
  6637                           
  6638                           ;i2c_master.c: 236: else
  6639                           ;i2c_master.c: 237: {
  6640                           ;i2c_master.c: 238: I2C_Status.state = I2C_SEND_ADR_WRITE;
  6641  05D7  3002               	movlw	2
  6642  05D8  0021               	movlb	1	; select bank1
  6643  05D9  00BA               	movwf	??_I2C_MasterOperation^(0+128)
  6644  05DA  083A               	movf	??_I2C_MasterOperation^(0+128),w
  6645  05DB  0020               	movlb	0	; select bank0
  6646  05DC  00BA               	movwf	_I2C_Status+26
  6647  05DD                     l5689:	
  6648                           
  6649                           ;i2c_master.c: 239: }
  6650                           ;i2c_master.c: 240: I2C_MasterStart();
  6651  05DD  318E  26B7  3185   	fcall	_I2C_MasterStart
  6652                           
  6653                           ;i2c_master.c: 241: I2C_Poller();
  6654  05E0  318F  27F6         	fcall	_I2C_Poller
  6655  05E2                     l5693:	
  6656                           
  6657                           ;i2c_master.c: 242: }
  6658                           ;i2c_master.c: 243: return returnValue;
  6659  05E2  0021               	movlb	1	; select bank1
  6660  05E3  083C               	movf	I2C_MasterOperation@returnValue^(0+128),w
  6661  05E4  0008               	return
  6662  05E5                     __end_of_I2C_MasterOperation:	
  6663                           
  6664                           	psect	text23
  6665  0FF6                     __ptext23:	
  6666 ;; *************** function _I2C_Poller *****************
  6667 ;; Defined at:
  6668 ;;		line 312 in file "mcc_generated_files/i2c_master.c"
  6669 ;; Parameters:    Size  Location     Type
  6670 ;;		None
  6671 ;; Auto vars:     Size  Location     Type
  6672 ;;		None
  6673 ;; Return value:  Size  Location     Type
  6674 ;;                  1    wreg      void 
  6675 ;; Registers used:
  6676 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6677 ;; Tracked objects:
  6678 ;;		On entry : 0/0
  6679 ;;		On exit  : 0/0
  6680 ;;		Unchanged: 0/0
  6681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6686 ;;Total ram usage:        0 bytes
  6687 ;; Hardware stack levels used:    1
  6688 ;; Hardware stack levels required when called:   17
  6689 ;; This function calls:
  6690 ;;		_I2C_MasterFsm
  6691 ;;		_I2C_MasterWaitForEvent
  6692 ;; This function is called by:
  6693 ;;		_I2C_MasterOperation
  6694 ;; This function uses a non-reentrant model
  6695 ;;
  6696                           
  6697                           
  6698                           ;psect for function _I2C_Poller
  6699  0FF6                     _I2C_Poller:	
  6700  0FF6                     l5653:	
  6701                           ;i2c_master.c: 314: while(I2C_Status.busy)
  6702                           
  6703                           ;incstack = 0
  6704 ;; hardware stack exceeded
  6705                           ; Regs used in _I2C_Poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6706                           
  6707  0FF6  0020               	movlb	0	; select bank0
  6708  0FF7  1CBC               	btfss	_I2C_Status+28,1
  6709  0FF8  0008               	return
  6710                           
  6711                           ;i2c_master.c: 315: {
  6712                           ;i2c_master.c: 316: I2C_MasterWaitForEvent();
  6713  0FF9  318F  2707  318F   	fcall	_I2C_MasterWaitForEvent
  6714                           
  6715                           ;i2c_master.c: 317: I2C_MasterFsm();
  6716  0FFC  3184  249A  318F   	fcall	_I2C_MasterFsm
  6717  0FFF  2FF6               	goto	l5653
  6718  1000                     __end_of_I2C_Poller:	
  6719                           
  6720                           	psect	text24
  6721  0F07                     __ptext24:	
  6722 ;; *************** function _I2C_MasterWaitForEvent *****************
  6723 ;; Defined at:
  6724 ;;		line 650 in file "mcc_generated_files/i2c_master.c"
  6725 ;; Parameters:    Size  Location     Type
  6726 ;;		None
  6727 ;; Auto vars:     Size  Location     Type
  6728 ;;		None
  6729 ;; Return value:  Size  Location     Type
  6730 ;;                  1    wreg      void 
  6731 ;; Registers used:
  6732 ;;		None
  6733 ;; Tracked objects:
  6734 ;;		On entry : 0/0
  6735 ;;		On exit  : 0/0
  6736 ;;		Unchanged: 0/0
  6737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6741 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6742 ;;Total ram usage:        0 bytes
  6743 ;; Hardware stack levels used:    1
  6744 ;; Hardware stack levels required when called:   12
  6745 ;; This function calls:
  6746 ;;		Nothing
  6747 ;; This function is called by:
  6748 ;;		_I2C_Poller
  6749 ;; This function uses a non-reentrant model
  6750 ;;
  6751                           
  6752                           
  6753                           ;psect for function _I2C_MasterWaitForEvent
  6754  0F07                     _I2C_MasterWaitForEvent:	
  6755  0F07                     l544:	
  6756                           ;incstack = 0
  6757 ;; hardware stack exceeded
  6758                           ; Regs used in _I2C_MasterWaitForEvent: []
  6759                           ;i2c_master.c: 652: while(1)
  6760                           
  6761                           
  6762                           ;i2c_master.c: 653: {
  6763                           ;i2c_master.c: 654: if(PIR1bits.SSP1IF)
  6764  0F07  0020               	movlb	0	; select bank0
  6765  0F08  1990               	btfsc	16,3	;volatile
  6766  0F09  0008               	return
  6767  0F0A  2F07               	goto	l544
  6768  0F0B                     __end_of_I2C_MasterWaitForEvent:	
  6769                           ;i2c_master.c: 655: {
  6770                           ;i2c_master.c: 656: break;
  6771                           
  6772                           
  6773                           	psect	text25
  6774  049A                     __ptext25:	
  6775 ;; *************** function _I2C_MasterFsm *****************
  6776 ;; Defined at:
  6777 ;;		line 321 in file "mcc_generated_files/i2c_master.c"
  6778 ;; Parameters:    Size  Location     Type
  6779 ;;		None
  6780 ;; Auto vars:     Size  Location     Type
  6781 ;;		None
  6782 ;; Return value:  Size  Location     Type
  6783 ;;                  1    wreg      void 
  6784 ;; Registers used:
  6785 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6786 ;; Tracked objects:
  6787 ;;		On entry : 0/0
  6788 ;;		On exit  : 0/0
  6789 ;;		Unchanged: 0/0
  6790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6793 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6794 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6795 ;;Total ram usage:        3 bytes
  6796 ;; Hardware stack levels used:    1
  6797 ;; Hardware stack levels required when called:   16
  6798 ;; This function calls:
  6799 ;;		_I2C_DO_ADDRESS_NACK
  6800 ;;		_I2C_DO_IDLE
  6801 ;;		_I2C_DO_RCEN
  6802 ;;		_I2C_DO_RESET
  6803 ;;		_I2C_DO_RX
  6804 ;;		_I2C_DO_RX_ACK
  6805 ;;		_I2C_DO_RX_NACK_RESTART
  6806 ;;		_I2C_DO_RX_NACK_STOP
  6807 ;;		_I2C_DO_SEND_ADR_READ
  6808 ;;		_I2C_DO_SEND_ADR_WRITE
  6809 ;;		_I2C_DO_SEND_RESTART
  6810 ;;		_I2C_DO_SEND_RESTART_READ
  6811 ;;		_I2C_DO_SEND_RESTART_WRITE
  6812 ;;		_I2C_DO_SEND_STOP
  6813 ;;		_I2C_DO_TX
  6814 ;;		_I2C_DO_TX_EMPTY
  6815 ;;		_I2C_MasterClearIrq
  6816 ;;		_I2C_MasterIsNack
  6817 ;; This function is called by:
  6818 ;;		_I2C_Poller
  6819 ;; This function uses a non-reentrant model
  6820 ;;
  6821                           
  6822                           
  6823                           ;psect for function _I2C_MasterFsm
  6824  049A                     _I2C_MasterFsm:	
  6825                           
  6826                           ;i2c_master.c: 323: I2C_MasterClearIrq();
  6827                           
  6828                           ;incstack = 0
  6829 ;; hardware stack exceeded
  6830                           ; Regs used in _I2C_MasterFsm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6831  049A  318E  26AE  3184   	fcall	_I2C_MasterClearIrq
  6832                           
  6833                           ;i2c_master.c: 325: if(I2C_Status.addressNackCheck && I2C_MasterIsNack())
  6834  049D  0020               	movlb	0	; select bank0
  6835  049E  1C3C               	btfss	_I2C_Status+28,0
  6836  049F  2CAC               	goto	l5625
  6837  04A0  318F  2741  3184   	fcall	_I2C_MasterIsNack
  6838  04A3  3A00               	xorlw	0
  6839  04A4  1903               	skipnz
  6840  04A5  2CAC               	goto	l5625
  6841                           
  6842                           ;i2c_master.c: 326: {
  6843                           ;i2c_master.c: 327: I2C_Status.state = I2C_ADDRESS_NACK;
  6844  04A6  300F               	movlw	15
  6845  04A7  0021               	movlb	1	; select bank1
  6846  04A8  00B7               	movwf	??_I2C_MasterFsm^(0+128)
  6847  04A9  0837               	movf	??_I2C_MasterFsm^(0+128),w
  6848  04AA  0020               	movlb	0	; select bank0
  6849  04AB  00BA               	movwf	_I2C_Status+26
  6850  04AC                     l5625:	
  6851                           
  6852                           ;i2c_master.c: 328: }
  6853                           ;i2c_master.c: 329: I2C_Status.state = fsmStateTable[I2C_Status.state]();
  6854  04AC  0020               	movlb	0	; select bank0
  6855  04AD  083A               	movf	_I2C_Status+26,w
  6856  04AE  0021               	movlb	1	; select bank1
  6857  04AF  00B7               	movwf	??_I2C_MasterFsm^(0+128)
  6858  04B0  01B8               	clrf	(??_I2C_MasterFsm^(0+128)+1)
  6859  04B1  35B7               	lslf	??_I2C_MasterFsm^(0+128),f
  6860  04B2  0DB8               	rlf	(??_I2C_MasterFsm^(0+128)+1),f
  6861  04B3  30A6               	movlw	low (_fsmStateTable| (0+32768))
  6862  04B4  0737               	addwf	??_I2C_MasterFsm^(0+128),w
  6863  04B5  0084               	movwf	4
  6864  04B6  3085               	movlw	high (_fsmStateTable| (0+32768))
  6865  04B7  3D38               	addwfc	(??_I2C_MasterFsm+1)^(0+128),w
  6866  04B8  0085               	movwf	5
  6867  04B9  3F01               	moviw [1]fsr0
  6868  04BA  008A               	movwf	10
  6869  04BB  3F00               	moviw [0]fsr0
  6870  04BC  000A               	callw
  6871  04BD  3184               	pagesel	$
  6872  04BE  0021               	movlb	1	; select bank1
  6873  04BF  00B9               	movwf	(??_I2C_MasterFsm+2)^(0+128)
  6874  04C0  0839               	movf	(??_I2C_MasterFsm+2)^(0+128),w
  6875  04C1  0020               	movlb	0	; select bank0
  6876  04C2  00BA               	movwf	_I2C_Status+26
  6877  04C3  0008               	return
  6878  04C4                     __end_of_I2C_MasterFsm:	
  6879                           
  6880                           	psect	text26
  6881  04C4                     __ptext26:	
  6882 ;; *************** function _I2C_DO_ADDRESS_NACK *****************
  6883 ;; Defined at:
  6884 ;;		line 500 in file "mcc_generated_files/i2c_master.c"
  6885 ;; Parameters:    Size  Location     Type
  6886 ;;		None
  6887 ;; Auto vars:     Size  Location     Type
  6888 ;;		None
  6889 ;; Return value:  Size  Location     Type
  6890 ;;                  1    wreg      enum E12103
  6891 ;; Registers used:
  6892 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6893 ;; Tracked objects:
  6894 ;;		On entry : 0/0
  6895 ;;		On exit  : 0/0
  6896 ;;		Unchanged: 0/0
  6897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6900 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6901 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6902 ;;Total ram usage:        1 bytes
  6903 ;; Hardware stack levels used:    1
  6904 ;; Hardware stack levels required when called:   15
  6905 ;; This function calls:
  6906 ;;		Absolute function
  6907 ;;		_I2C_CallbackReturnReset
  6908 ;;		_I2C_CallbackReturnStop
  6909 ;;		_I2C_DO_SEND_RESTART
  6910 ;;		_I2C_DO_SEND_STOP
  6911 ;;		_rd1RegCompleteHandler
  6912 ;;		_rd2RegCompleteHandler
  6913 ;;		_rdBlkRegCompleteHandler
  6914 ;;		_wr1RegCompleteHandler
  6915 ;;		_wr2RegCompleteHandler
  6916 ;; This function is called by:
  6917 ;;		i1_I2C_MasterFsm
  6918 ;;		_I2C_MasterFsm
  6919 ;; This function uses a non-reentrant model
  6920 ;;
  6921                           
  6922                           
  6923                           ;psect for function _I2C_DO_ADDRESS_NACK
  6924  04C4                     _I2C_DO_ADDRESS_NACK:	
  6925                           
  6926                           ;Skip over the trampoline to the duplicate function for level 1
  6927  04C4  1C7E               	btfss	126,0
  6928  04C5  2CC8               	goto	l5593
  6929  04C6  3185  2D83         	ljmp	i1l5491
  6930  04C8                     _I2C_DO_ADDRESS_NACK$intlevel0:	
  6931  04C8                     l5593:	
  6932                           ;incstack = 0
  6933 ;; hardware stack exceeded
  6934                           ; Regs used in _I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6935                           
  6936                           
  6937                           ;i2c_master.c: 502: I2C_Status.addressNackCheck = 0;
  6938  04C8  0020               	movlb	0	; select bank0
  6939  04C9  103C               	bcf	_I2C_Status+28,0
  6940                           
  6941                           ;i2c_master.c: 503: I2C_Status.error = I2C_FAIL;
  6942  04CA  3002               	movlw	2
  6943  04CB  0021               	movlb	1	; select bank1
  6944  04CC  00B4               	movwf	??_I2C_DO_ADDRESS_NACK^(0+128)
  6945  04CD  0834               	movf	??_I2C_DO_ADDRESS_NACK^(0+128),w
  6946  04CE  0020               	movlb	0	; select bank0
  6947  04CF  00BB               	movwf	_I2C_Status+27
  6948                           
  6949                           ;i2c_master.c: 504: switch(I2C_Status.callbackTable[I2C_ADDR_NACK](I2C_Status.callbackPa
      +                          yload[I2C_ADDR_NACK]))
  6950  04D0  2CD7               	goto	l5607
  6951  04D1                     l5597:	
  6952                           ;i2c_master.c: 505: {
  6953                           ;i2c_master.c: 506: case I2C_RESTART_READ:
  6954                           
  6955                           
  6956                           ;i2c_master.c: 507: case I2C_RESTART_WRITE:
  6957                           ;i2c_master.c: 508: return I2C_DO_SEND_RESTART();
  6958  04D1  318F  277B         	fcall	_I2C_DO_SEND_RESTART
  6959  04D3  0008               	return
  6960  04D4                     l5601:	
  6961                           ;i2c_master.c: 509: default:
  6962                           
  6963                           
  6964                           ;i2c_master.c: 510: return I2C_DO_SEND_STOP();
  6965  04D4  318F  2783         	fcall	_I2C_DO_SEND_STOP
  6966                           
  6967                           ;i2c_master.c: 511: }
  6968  04D6  0008               	return
  6969  04D7                     l5607:	
  6970  04D7  0020               	movlb	0	; select bank0
  6971  04D8  082E               	movf	low ((_I2C_Status| 0+14)),w
  6972  04D9  0021               	movlb	1	; select bank1
  6973  04DA  00B4               	movwf	??_I2C_DO_ADDRESS_NACK^(0+128)
  6974  04DB  0834               	movf	??_I2C_DO_ADDRESS_NACK^(0+128),w
  6975  04DC  00B3               	movwf	I2C_CallbackReturnReset@funPtr^(0+128)
  6976  04DD  3004               	movlw	4
  6977  04DE  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
  6978  04DF  0086               	movwf	6
  6979  04E0  0187               	clrf	7
  6980  04E1  3F41               	moviw [1]fsr1
  6981  04E2  008A               	movwf	10
  6982  04E3  3F40               	moviw [0]fsr1
  6983  04E4  000A               	callw
  6984  04E5  3184               	pagesel	$
  6985                           
  6986                           ; Switch size 1, requested type "space"
  6987                           ; Number of cases is 2, Range of values is 2 to 3
  6988                           ; switch strategies available:
  6989                           ; Name         Instructions Cycles
  6990                           ; simple_byte            7     4 (average)
  6991                           ; direct_byte           13     9 (fixed)
  6992                           ; jumptable            263     9 (fixed)
  6993                           ;	Chosen strategy is simple_byte
  6994  04E6  3A02               	xorlw	2	; case 2
  6995  04E7  1903               	skipnz
  6996  04E8  2CD1               	goto	l5597
  6997  04E9  3A01               	xorlw	1	; case 3
  6998  04EA  1903               	skipnz
  6999  04EB  2CD1               	goto	l5597
  7000  04EC  2CD4               	goto	l5601
  7001  04ED  0008               	return
  7002  04EE                     __end_of_I2C_DO_ADDRESS_NACK:	
  7003                           
  7004                           	psect	text27
  7005  0FAC                     __ptext27:	
  7006 ;; *************** function _I2C_DO_RESET *****************
  7007 ;; Defined at:
  7008 ;;		line 494 in file "mcc_generated_files/i2c_master.c"
  7009 ;; Parameters:    Size  Location     Type
  7010 ;;		None
  7011 ;; Auto vars:     Size  Location     Type
  7012 ;;		None
  7013 ;; Return value:  Size  Location     Type
  7014 ;;                  1    wreg      enum E12103
  7015 ;; Registers used:
  7016 ;;		wreg, status,2
  7017 ;; Tracked objects:
  7018 ;;		On entry : 0/0
  7019 ;;		On exit  : 0/0
  7020 ;;		Unchanged: 0/0
  7021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7025 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7026 ;;Total ram usage:        0 bytes
  7027 ;; Hardware stack levels used:    1
  7028 ;; Hardware stack levels required when called:   12
  7029 ;; This function calls:
  7030 ;;		Nothing
  7031 ;; This function is called by:
  7032 ;;		i1_I2C_MasterFsm
  7033 ;;		_I2C_MasterFsm
  7034 ;; This function uses a non-reentrant model
  7035 ;;
  7036                           
  7037                           
  7038                           ;psect for function _I2C_DO_RESET
  7039  0FAC                     _I2C_DO_RESET:	
  7040                           
  7041                           ;Skip over the trampoline to the duplicate function for level 1
  7042  0FAC  1C7E               	btfss	126,0
  7043  0FAD  2FB0               	goto	l4013
  7044  0FAE  318F  2F19         	ljmp	i1l2733
  7045  0FB0                     _I2C_DO_RESET$intlevel0:	
  7046  0FB0                     l4013:	
  7047                           ;incstack = 0
  7048 ;; hardware stack exceeded
  7049                           ; Regs used in _I2C_DO_RESET: [wreg+status,2]
  7050                           
  7051                           
  7052                           ;i2c_master.c: 496: I2C_Status.busy = 0;
  7053  0FB0  0020               	movlb	0	; select bank0
  7054  0FB1  10BC               	bcf	_I2C_Status+28,1
  7055                           
  7056                           ;i2c_master.c: 497: I2C_Status.error = I2C_NOERR;
  7057  0FB2  01BB               	clrf	_I2C_Status+27
  7058                           
  7059                           ;i2c_master.c: 498: return I2C_RESET;
  7060  0FB3  300E               	movlw	14
  7061  0FB4  0008               	return
  7062  0FB5                     __end_of_I2C_DO_RESET:	
  7063                           
  7064                           	psect	text28
  7065  0F9B                     __ptext28:	
  7066 ;; *************** function _I2C_DO_RX_NACK_RESTART *****************
  7067 ;; Defined at:
  7068 ;;		line 488 in file "mcc_generated_files/i2c_master.c"
  7069 ;; Parameters:    Size  Location     Type
  7070 ;;		None
  7071 ;; Auto vars:     Size  Location     Type
  7072 ;;		None
  7073 ;; Return value:  Size  Location     Type
  7074 ;;                  1    wreg      enum E12103
  7075 ;; Registers used:
  7076 ;;		wreg, status,2, status,0, pclath, cstack
  7077 ;; Tracked objects:
  7078 ;;		On entry : 0/0
  7079 ;;		On exit  : 0/0
  7080 ;;		Unchanged: 0/0
  7081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7086 ;;Total ram usage:        0 bytes
  7087 ;; Hardware stack levels used:    1
  7088 ;; Hardware stack levels required when called:   13
  7089 ;; This function calls:
  7090 ;;		_I2C_MasterSendNack
  7091 ;; This function is called by:
  7092 ;;		_I2C_DO_RX
  7093 ;;		i1_I2C_MasterFsm
  7094 ;;		_I2C_MasterFsm
  7095 ;; This function uses a non-reentrant model
  7096 ;;
  7097                           
  7098                           
  7099                           ;psect for function _I2C_DO_RX_NACK_RESTART
  7100  0F9B                     _I2C_DO_RX_NACK_RESTART:	
  7101                           
  7102                           ;Skip over the trampoline to the duplicate function for level 1
  7103  0F9B  1C7E               	btfss	126,0
  7104  0F9C  2F9F               	goto	l3857
  7105  0F9D  318E  2EF3         	ljmp	i1l2575
  7106  0F9F                     _I2C_DO_RX_NACK_RESTART$intlevel0:	
  7107  0F9F                     l3857:	
  7108                           ;incstack = 0
  7109 ;; hardware stack exceeded
  7110                           ; Regs used in _I2C_DO_RX_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  7111                           
  7112                           
  7113                           ;i2c_master.c: 490: I2C_MasterSendNack();
  7114  0F9F  318E  26FF         	fcall	_I2C_MasterSendNack
  7115                           
  7116                           ;i2c_master.c: 491: return I2C_SEND_RESTART;
  7117  0FA1  3009               	movlw	9
  7118  0FA2  0008               	return
  7119  0FA3                     __end_of_I2C_DO_RX_NACK_RESTART:	
  7120                           
  7121                           	psect	text29
  7122  0F93                     __ptext29:	
  7123 ;; *************** function _I2C_DO_RX_NACK_STOP *****************
  7124 ;; Defined at:
  7125 ;;		line 482 in file "mcc_generated_files/i2c_master.c"
  7126 ;; Parameters:    Size  Location     Type
  7127 ;;		None
  7128 ;; Auto vars:     Size  Location     Type
  7129 ;;		None
  7130 ;; Return value:  Size  Location     Type
  7131 ;;                  1    wreg      enum E12103
  7132 ;; Registers used:
  7133 ;;		wreg, status,2, status,0, pclath, cstack
  7134 ;; Tracked objects:
  7135 ;;		On entry : 0/0
  7136 ;;		On exit  : 0/0
  7137 ;;		Unchanged: 0/0
  7138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7142 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7143 ;;Total ram usage:        0 bytes
  7144 ;; Hardware stack levels used:    1
  7145 ;; Hardware stack levels required when called:   13
  7146 ;; This function calls:
  7147 ;;		_I2C_MasterSendNack
  7148 ;; This function is called by:
  7149 ;;		_I2C_DO_RX
  7150 ;;		i1_I2C_MasterFsm
  7151 ;;		_I2C_MasterFsm
  7152 ;; This function uses a non-reentrant model
  7153 ;;
  7154                           
  7155                           
  7156                           ;psect for function _I2C_DO_RX_NACK_STOP
  7157  0F93                     _I2C_DO_RX_NACK_STOP:	
  7158                           
  7159                           ;Skip over the trampoline to the duplicate function for level 1
  7160  0F93  1C7E               	btfss	126,0
  7161  0F94  2F97               	goto	l3863
  7162  0F95  318E  2EEF         	ljmp	i1l2569
  7163  0F97                     _I2C_DO_RX_NACK_STOP$intlevel0:	
  7164  0F97                     l3863:	
  7165                           ;incstack = 0
  7166 ;; hardware stack exceeded
  7167                           ; Regs used in _I2C_DO_RX_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  7168                           
  7169                           
  7170                           ;i2c_master.c: 484: I2C_MasterSendNack();
  7171  0F97  318E  26FF         	fcall	_I2C_MasterSendNack
  7172                           
  7173                           ;i2c_master.c: 485: return I2C_SEND_STOP;
  7174  0F99  300A               	movlw	10
  7175  0F9A  0008               	return
  7176  0F9B                     __end_of_I2C_DO_RX_NACK_STOP:	
  7177                           
  7178                           	psect	text30
  7179  0F8B                     __ptext30:	
  7180 ;; *************** function _I2C_DO_RX_ACK *****************
  7181 ;; Defined at:
  7182 ;;		line 475 in file "mcc_generated_files/i2c_master.c"
  7183 ;; Parameters:    Size  Location     Type
  7184 ;;		None
  7185 ;; Auto vars:     Size  Location     Type
  7186 ;;		None
  7187 ;; Return value:  Size  Location     Type
  7188 ;;                  1    wreg      enum E12103
  7189 ;; Registers used:
  7190 ;;		wreg, status,2, status,0, pclath, cstack
  7191 ;; Tracked objects:
  7192 ;;		On entry : 0/0
  7193 ;;		On exit  : 0/0
  7194 ;;		Unchanged: 0/0
  7195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7200 ;;Total ram usage:        0 bytes
  7201 ;; Hardware stack levels used:    1
  7202 ;; Hardware stack levels required when called:   13
  7203 ;; This function calls:
  7204 ;;		_I2C_MasterSendAck
  7205 ;; This function is called by:
  7206 ;;		i1_I2C_MasterFsm
  7207 ;;		_I2C_MasterFsm
  7208 ;; This function uses a non-reentrant model
  7209 ;;
  7210                           
  7211                           
  7212                           ;psect for function _I2C_DO_RX_ACK
  7213  0F8B                     _I2C_DO_RX_ACK:	
  7214                           
  7215                           ;Skip over the trampoline to the duplicate function for level 1
  7216  0F8B  1C7E               	btfss	126,0
  7217  0F8C  2F8F               	goto	l4007
  7218  0F8D  318E  2EEB         	ljmp	i1l2727
  7219  0F8F                     _I2C_DO_RX_ACK$intlevel0:	
  7220  0F8F                     l4007:	
  7221                           ;incstack = 0
  7222 ;; hardware stack exceeded
  7223                           ; Regs used in _I2C_DO_RX_ACK: [wreg+status,2+status,0+pclath+cstack]
  7224                           
  7225                           
  7226                           ;i2c_master.c: 477: I2C_MasterSendAck();
  7227  0F8F  318F  2703         	fcall	_I2C_MasterSendAck
  7228                           
  7229                           ;i2c_master.c: 478: return I2C_RCEN;
  7230  0F91  3005               	movlw	5
  7231  0F92  0008               	return
  7232  0F93                     __end_of_I2C_DO_RX_ACK:	
  7233                           
  7234                           	psect	text31
  7235  0F83                     __ptext31:	
  7236 ;; *************** function _I2C_DO_SEND_STOP *****************
  7237 ;; Defined at:
  7238 ;;		line 469 in file "mcc_generated_files/i2c_master.c"
  7239 ;; Parameters:    Size  Location     Type
  7240 ;;		None
  7241 ;; Auto vars:     Size  Location     Type
  7242 ;;		None
  7243 ;; Return value:  Size  Location     Type
  7244 ;;                  1    wreg      enum E12103
  7245 ;; Registers used:
  7246 ;;		wreg, status,2, status,0, pclath, cstack
  7247 ;; Tracked objects:
  7248 ;;		On entry : 0/0
  7249 ;;		On exit  : 0/0
  7250 ;;		Unchanged: 0/0
  7251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7256 ;;Total ram usage:        0 bytes
  7257 ;; Hardware stack levels used:    1
  7258 ;; Hardware stack levels required when called:   13
  7259 ;; This function calls:
  7260 ;;		_I2C_MasterStop
  7261 ;; This function is called by:
  7262 ;;		_I2C_DO_TX
  7263 ;;		_I2C_DO_TX_EMPTY
  7264 ;;		_I2C_DO_ADDRESS_NACK
  7265 ;;		i1_I2C_MasterFsm
  7266 ;;		_I2C_MasterFsm
  7267 ;; This function uses a non-reentrant model
  7268 ;;
  7269                           
  7270                           
  7271                           ;psect for function _I2C_DO_SEND_STOP
  7272  0F83                     _I2C_DO_SEND_STOP:	
  7273                           
  7274                           ;Skip over the trampoline to the duplicate function for level 1
  7275  0F83  1C7E               	btfss	126,0
  7276  0F84  2F87               	goto	l3845
  7277  0F85  318E  2EE7         	ljmp	i1l2563
  7278  0F87                     _I2C_DO_SEND_STOP$intlevel0:	
  7279  0F87                     l3845:	
  7280                           ;incstack = 0
  7281 ;; hardware stack exceeded
  7282                           ; Regs used in _I2C_DO_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
  7283                           
  7284                           
  7285                           ;i2c_master.c: 471: I2C_MasterStop();
  7286  0F87  318E  26BD         	fcall	_I2C_MasterStop
  7287                           
  7288                           ;i2c_master.c: 472: return I2C_IDLE;
  7289  0F89  3000               	movlw	0
  7290  0F8A  0008               	return
  7291  0F8B                     __end_of_I2C_DO_SEND_STOP:	
  7292                           
  7293                           	psect	text32
  7294  0F7B                     __ptext32:	
  7295 ;; *************** function _I2C_DO_SEND_RESTART *****************
  7296 ;; Defined at:
  7297 ;;		line 463 in file "mcc_generated_files/i2c_master.c"
  7298 ;; Parameters:    Size  Location     Type
  7299 ;;		None
  7300 ;; Auto vars:     Size  Location     Type
  7301 ;;		None
  7302 ;; Return value:  Size  Location     Type
  7303 ;;                  1    wreg      enum E12103
  7304 ;; Registers used:
  7305 ;;		wreg, status,2, status,0, pclath, cstack
  7306 ;; Tracked objects:
  7307 ;;		On entry : 0/0
  7308 ;;		On exit  : 0/0
  7309 ;;		Unchanged: 0/0
  7310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7315 ;;Total ram usage:        0 bytes
  7316 ;; Hardware stack levels used:    1
  7317 ;; Hardware stack levels required when called:   13
  7318 ;; This function calls:
  7319 ;;		_I2C_MasterEnableRestart
  7320 ;; This function is called by:
  7321 ;;		_I2C_DO_TX_EMPTY
  7322 ;;		_I2C_DO_ADDRESS_NACK
  7323 ;;		i1_I2C_MasterFsm
  7324 ;;		_I2C_MasterFsm
  7325 ;; This function uses a non-reentrant model
  7326 ;;
  7327                           
  7328                           
  7329                           ;psect for function _I2C_DO_SEND_RESTART
  7330  0F7B                     _I2C_DO_SEND_RESTART:	
  7331                           
  7332                           ;Skip over the trampoline to the duplicate function for level 1
  7333  0F7B  1C7E               	btfss	126,0
  7334  0F7C  2F7F               	goto	l3871
  7335  0F7D  318E  2EE3         	ljmp	i1l2557
  7336  0F7F                     _I2C_DO_SEND_RESTART$intlevel0:	
  7337  0F7F                     l3871:	
  7338                           ;incstack = 0
  7339 ;; hardware stack exceeded
  7340                           ; Regs used in _I2C_DO_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
  7341                           
  7342                           
  7343                           ;i2c_master.c: 465: I2C_MasterEnableRestart();
  7344  0F7F  318E  26BA         	fcall	_I2C_MasterEnableRestart
  7345                           
  7346                           ;i2c_master.c: 466: return I2C_SEND_ADR_READ;
  7347  0F81  3001               	movlw	1
  7348  0F82  0008               	return
  7349  0F83                     __end_of_I2C_DO_SEND_RESTART:	
  7350                           
  7351                           	psect	text33
  7352  0F73                     __ptext33:	
  7353 ;; *************** function _I2C_DO_SEND_RESTART_WRITE *****************
  7354 ;; Defined at:
  7355 ;;		line 456 in file "mcc_generated_files/i2c_master.c"
  7356 ;; Parameters:    Size  Location     Type
  7357 ;;		None
  7358 ;; Auto vars:     Size  Location     Type
  7359 ;;		None
  7360 ;; Return value:  Size  Location     Type
  7361 ;;                  1    wreg      enum E12103
  7362 ;; Registers used:
  7363 ;;		wreg, status,2, status,0, pclath, cstack
  7364 ;; Tracked objects:
  7365 ;;		On entry : 0/0
  7366 ;;		On exit  : 0/0
  7367 ;;		Unchanged: 0/0
  7368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7373 ;;Total ram usage:        0 bytes
  7374 ;; Hardware stack levels used:    1
  7375 ;; Hardware stack levels required when called:   13
  7376 ;; This function calls:
  7377 ;;		_I2C_MasterEnableRestart
  7378 ;; This function is called by:
  7379 ;;		_I2C_DO_TX
  7380 ;;		i1_I2C_MasterFsm
  7381 ;;		_I2C_MasterFsm
  7382 ;; This function uses a non-reentrant model
  7383 ;;
  7384                           
  7385                           
  7386                           ;psect for function _I2C_DO_SEND_RESTART_WRITE
  7387  0F73                     _I2C_DO_SEND_RESTART_WRITE:	
  7388                           
  7389                           ;Skip over the trampoline to the duplicate function for level 1
  7390  0F73  1C7E               	btfss	126,0
  7391  0F74  2F77               	goto	l3839
  7392  0F75  318E  2EDF         	ljmp	i1l2551
  7393  0F77                     _I2C_DO_SEND_RESTART_WRITE$intlevel0:	
  7394  0F77                     l3839:	
  7395                           ;incstack = 0
  7396 ;; hardware stack exceeded
  7397                           ; Regs used in _I2C_DO_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
  7398                           
  7399                           
  7400                           ;i2c_master.c: 458: I2C_MasterEnableRestart();
  7401  0F77  318E  26BA         	fcall	_I2C_MasterEnableRestart
  7402                           
  7403                           ;i2c_master.c: 459: return I2C_SEND_ADR_WRITE;
  7404  0F79  3002               	movlw	2
  7405  0F7A  0008               	return
  7406  0F7B                     __end_of_I2C_DO_SEND_RESTART_WRITE:	
  7407                           
  7408                           	psect	text34
  7409  0F6B                     __ptext34:	
  7410 ;; *************** function _I2C_DO_SEND_RESTART_READ *****************
  7411 ;; Defined at:
  7412 ;;		line 450 in file "mcc_generated_files/i2c_master.c"
  7413 ;; Parameters:    Size  Location     Type
  7414 ;;		None
  7415 ;; Auto vars:     Size  Location     Type
  7416 ;;		None
  7417 ;; Return value:  Size  Location     Type
  7418 ;;                  1    wreg      enum E12103
  7419 ;; Registers used:
  7420 ;;		wreg, status,2, status,0, pclath, cstack
  7421 ;; Tracked objects:
  7422 ;;		On entry : 0/0
  7423 ;;		On exit  : 0/0
  7424 ;;		Unchanged: 0/0
  7425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7430 ;;Total ram usage:        0 bytes
  7431 ;; Hardware stack levels used:    1
  7432 ;; Hardware stack levels required when called:   13
  7433 ;; This function calls:
  7434 ;;		_I2C_MasterEnableRestart
  7435 ;; This function is called by:
  7436 ;;		_I2C_DO_TX
  7437 ;;		i1_I2C_MasterFsm
  7438 ;;		_I2C_MasterFsm
  7439 ;; This function uses a non-reentrant model
  7440 ;;
  7441                           
  7442                           
  7443                           ;psect for function _I2C_DO_SEND_RESTART_READ
  7444  0F6B                     _I2C_DO_SEND_RESTART_READ:	
  7445                           
  7446                           ;Skip over the trampoline to the duplicate function for level 1
  7447  0F6B  1C7E               	btfss	126,0
  7448  0F6C  2F6F               	goto	l3833
  7449  0F6D  318E  2EDB         	ljmp	i1l2545
  7450  0F6F                     _I2C_DO_SEND_RESTART_READ$intlevel0:	
  7451  0F6F                     l3833:	
  7452                           ;incstack = 0
  7453 ;; hardware stack exceeded
  7454                           ; Regs used in _I2C_DO_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
  7455                           
  7456                           
  7457                           ;i2c_master.c: 452: I2C_MasterEnableRestart();
  7458  0F6F  318E  26BA         	fcall	_I2C_MasterEnableRestart
  7459                           
  7460                           ;i2c_master.c: 453: return I2C_SEND_ADR_READ;
  7461  0F71  3001               	movlw	1
  7462  0F72  0008               	return
  7463  0F73                     __end_of_I2C_DO_SEND_RESTART_READ:	
  7464                           
  7465                           	psect	text35
  7466  0FEC                     __ptext35:	
  7467 ;; *************** function _I2C_DO_RCEN *****************
  7468 ;; Defined at:
  7469 ;;		line 402 in file "mcc_generated_files/i2c_master.c"
  7470 ;; Parameters:    Size  Location     Type
  7471 ;;		None
  7472 ;; Auto vars:     Size  Location     Type
  7473 ;;		None
  7474 ;; Return value:  Size  Location     Type
  7475 ;;                  1    wreg      enum E12103
  7476 ;; Registers used:
  7477 ;;		wreg, status,2, status,0, pclath, cstack
  7478 ;; Tracked objects:
  7479 ;;		On entry : 0/0
  7480 ;;		On exit  : 0/0
  7481 ;;		Unchanged: 0/0
  7482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7487 ;;Total ram usage:        0 bytes
  7488 ;; Hardware stack levels used:    1
  7489 ;; Hardware stack levels required when called:   13
  7490 ;; This function calls:
  7491 ;;		_I2C_MasterStartRx
  7492 ;; This function is called by:
  7493 ;;		i1_I2C_MasterFsm
  7494 ;;		_I2C_MasterFsm
  7495 ;; This function uses a non-reentrant model
  7496 ;;
  7497                           
  7498                           
  7499                           ;psect for function _I2C_DO_RCEN
  7500  0FEC                     _I2C_DO_RCEN:	
  7501                           
  7502                           ;Skip over the trampoline to the duplicate function for level 1
  7503  0FEC  1C7E               	btfss	126,0
  7504  0FED  2FF0               	goto	l3979
  7505  0FEE  318F  2F29         	ljmp	i1l2699
  7506  0FF0                     _I2C_DO_RCEN$intlevel0:	
  7507  0FF0                     l3979:	
  7508                           ;incstack = 0
  7509 ;; hardware stack exceeded
  7510                           ; Regs used in _I2C_DO_RCEN: [wreg+status,2+status,0+pclath+cstack]
  7511                           
  7512                           
  7513                           ;i2c_master.c: 404: I2C_Status.addressNackCheck = 0;
  7514  0FF0  0020               	movlb	0	; select bank0
  7515  0FF1  103C               	bcf	_I2C_Status+28,0
  7516                           
  7517                           ;i2c_master.c: 405: I2C_MasterStartRx();
  7518  0FF2  318E  26C0         	fcall	_I2C_MasterStartRx
  7519                           
  7520                           ;i2c_master.c: 406: return I2C_RX;
  7521  0FF4  3004               	movlw	4
  7522  0FF5  0008               	return
  7523  0FF6                     __end_of_I2C_DO_RCEN:	
  7524                           
  7525                           	psect	text36
  7526  0207                     __ptext36:	
  7527 ;; *************** function _I2C_DO_RX *****************
  7528 ;; Defined at:
  7529 ;;		line 378 in file "mcc_generated_files/i2c_master.c"
  7530 ;; Parameters:    Size  Location     Type
  7531 ;;		None
  7532 ;; Auto vars:     Size  Location     Type
  7533 ;;		None
  7534 ;; Return value:  Size  Location     Type
  7535 ;;                  1    wreg      enum E12103
  7536 ;; Registers used:
  7537 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7538 ;; Tracked objects:
  7539 ;;		On entry : 0/0
  7540 ;;		On exit  : 0/0
  7541 ;;		Unchanged: 0/0
  7542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7545 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7546 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7547 ;;Total ram usage:        1 bytes
  7548 ;; Hardware stack levels used:    1
  7549 ;; Hardware stack levels required when called:   15
  7550 ;; This function calls:
  7551 ;;		Absolute function
  7552 ;;		_I2C_CallbackReturnReset
  7553 ;;		_I2C_CallbackReturnStop
  7554 ;;		_I2C_DO_RX_NACK_RESTART
  7555 ;;		_I2C_DO_RX_NACK_STOP
  7556 ;;		_I2C_MasterGetRxData
  7557 ;;		_I2C_MasterSendAck
  7558 ;;		_rd1RegCompleteHandler
  7559 ;;		_rd2RegCompleteHandler
  7560 ;;		_rdBlkRegCompleteHandler
  7561 ;;		_wr1RegCompleteHandler
  7562 ;;		_wr2RegCompleteHandler
  7563 ;; This function is called by:
  7564 ;;		i1_I2C_MasterFsm
  7565 ;;		_I2C_MasterFsm
  7566 ;; This function uses a non-reentrant model
  7567 ;;
  7568                           
  7569                           
  7570                           ;psect for function _I2C_DO_RX
  7571  0207                     _I2C_DO_RX:	
  7572                           
  7573                           ;Skip over the trampoline to the duplicate function for level 1
  7574  0207  1C7E               	btfss	126,0
  7575  0208  2A0B               	goto	l5547
  7576  0209  3182  2AC7         	ljmp	i1l5445
  7577  020B                     _I2C_DO_RX$intlevel0:	
  7578  020B                     l5547:	
  7579                           ;incstack = 0
  7580 ;; hardware stack exceeded
  7581                           ; Regs used in _I2C_DO_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7582                           
  7583                           
  7584                           ;i2c_master.c: 380: *I2C_Status.data_ptr++ = I2C_MasterGetRxData();
  7585  020B  318E  26C3  3182   	fcall	_I2C_MasterGetRxData
  7586  020E  0021               	movlb	1	; select bank1
  7587  020F  00B4               	movwf	??_I2C_DO_RX^(0+128)
  7588  0210  0020               	movlb	0	; select bank0
  7589  0211  0837               	movf	low ((_I2C_Status| 0+23)),w
  7590  0212  0086               	movwf	6
  7591  0213  0187               	clrf	7
  7592  0214  0021               	movlb	1	; select bank1
  7593  0215  0834               	movf	??_I2C_DO_RX^(0+128),w
  7594  0216  0081               	movwf	1
  7595  0217  3001               	movlw	1
  7596  0218  00B4               	movwf	??_I2C_DO_RX^(0+128)
  7597  0219  0834               	movf	??_I2C_DO_RX^(0+128),w
  7598  021A  0020               	movlb	0	; select bank0
  7599  021B  07B7               	addwf	low ((_I2C_Status| 0+23)),f
  7600                           
  7601                           ;i2c_master.c: 381: if(--I2C_Status.data_length)
  7602  021C  3001               	movlw	1
  7603  021D  02B8               	subwf	_I2C_Status+24,f
  7604  021E  3000               	movlw	0
  7605  021F  3BB9               	subwfb	_I2C_Status+25,f
  7606  0220  0838               	movf	_I2C_Status+24,w
  7607  0221  0439               	iorwf	_I2C_Status+25,w
  7608  0222  1903               	btfsc	3,2
  7609  0223  2A28               	goto	l403
  7610                           
  7611                           ;i2c_master.c: 382: {
  7612                           ;i2c_master.c: 383: I2C_MasterSendAck();
  7613  0224  318F  2703         	fcall	_I2C_MasterSendAck
  7614                           
  7615                           ;i2c_master.c: 384: return I2C_RCEN;
  7616  0226  3005               	movlw	5
  7617                           
  7618                           ;i2c_master.c: 385: }
  7619  0227  0008               	return
  7620  0228                     l403:	
  7621                           
  7622                           ;i2c_master.c: 386: else
  7623                           ;i2c_master.c: 387: {
  7624                           ;i2c_master.c: 388: I2C_Status.bufferFree = 1;
  7625  0228  15BC               	bsf	_I2C_Status+28,3
  7626                           
  7627                           ;i2c_master.c: 389: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
  7628  0229  2A30               	goto	l5571
  7629  022A                     l5561:	
  7630                           ;i2c_master.c: 390: {
  7631                           ;i2c_master.c: 391: case I2C_RESTART_WRITE:
  7632                           
  7633                           
  7634                           ;i2c_master.c: 392: case I2C_RESTART_READ:
  7635                           ;i2c_master.c: 393: return I2C_DO_RX_NACK_RESTART();
  7636  022A  318F  279B         	fcall	_I2C_DO_RX_NACK_RESTART
  7637  022C  0008               	return
  7638  022D                     l5565:	
  7639                           ;i2c_master.c: 395: case I2C_CONTINUE:
  7640                           
  7641                           ;i2c_master.c: 394: default:
  7642                           
  7643                           
  7644                           ;i2c_master.c: 396: case I2C_STOP:
  7645                           ;i2c_master.c: 397: return I2C_DO_RX_NACK_STOP();
  7646  022D  318F  2793         	fcall	_I2C_DO_RX_NACK_STOP
  7647                           
  7648                           ;i2c_master.c: 398: }
  7649  022F  0008               	return
  7650  0230                     l5571:	
  7651  0230  0020               	movlb	0	; select bank0
  7652  0231  082C               	movf	low ((_I2C_Status| 0+12)),w
  7653  0232  0021               	movlb	1	; select bank1
  7654  0233  00B4               	movwf	??_I2C_DO_RX^(0+128)
  7655  0234  0834               	movf	??_I2C_DO_RX^(0+128),w
  7656  0235  00B3               	movwf	I2C_CallbackReturnReset@funPtr^(0+128)
  7657  0236  0020               	movlb	0	; select bank0
  7658  0237  0821               	movf	_I2C_Status+1,w
  7659  0238  008A               	movwf	10
  7660  0239  0820               	movf	_I2C_Status,w
  7661  023A  000A               	callw
  7662  023B  3182               	pagesel	$
  7663                           
  7664                           ; Switch size 1, requested type "space"
  7665                           ; Number of cases is 4, Range of values is 1 to 4
  7666                           ; switch strategies available:
  7667                           ; Name         Instructions Cycles
  7668                           ; simple_byte           13     7 (average)
  7669                           ; direct_byte           17     9 (fixed)
  7670                           ; jumptable            263     9 (fixed)
  7671                           ;	Chosen strategy is simple_byte
  7672  023C  3A01               	xorlw	1	; case 1
  7673  023D  1903               	skipnz
  7674  023E  2A2D               	goto	l5565
  7675  023F  3A03               	xorlw	3	; case 2
  7676  0240  1903               	skipnz
  7677  0241  2A2A               	goto	l5561
  7678  0242  3A01               	xorlw	1	; case 3
  7679  0243  1903               	skipnz
  7680  0244  2A2A               	goto	l5561
  7681  0245  3A07               	xorlw	7	; case 4
  7682  0246  1903               	skipnz
  7683  0247  2A2D               	goto	l5565
  7684  0248  2A2D               	goto	l5565
  7685  0249  0008               	return
  7686  024A                     __end_of_I2C_DO_RX:	
  7687                           
  7688                           	psect	text37
  7689  011C                     __ptext37:	
  7690 ;; *************** function _I2C_DO_TX *****************
  7691 ;; Defined at:
  7692 ;;		line 354 in file "mcc_generated_files/i2c_master.c"
  7693 ;; Parameters:    Size  Location     Type
  7694 ;;		None
  7695 ;; Auto vars:     Size  Location     Type
  7696 ;;		None
  7697 ;; Return value:  Size  Location     Type
  7698 ;;                  1    wreg      enum E12103
  7699 ;; Registers used:
  7700 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7701 ;; Tracked objects:
  7702 ;;		On entry : 0/0
  7703 ;;		On exit  : 0/0
  7704 ;;		Unchanged: 0/0
  7705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7707 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7708 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7709 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7710 ;;Total ram usage:        3 bytes
  7711 ;; Hardware stack levels used:    1
  7712 ;; Hardware stack levels required when called:   15
  7713 ;; This function calls:
  7714 ;;		Absolute function
  7715 ;;		_I2C_CallbackReturnReset
  7716 ;;		_I2C_CallbackReturnStop
  7717 ;;		_I2C_DO_SEND_RESTART_READ
  7718 ;;		_I2C_DO_SEND_RESTART_WRITE
  7719 ;;		_I2C_DO_SEND_STOP
  7720 ;;		_I2C_MasterIsNack
  7721 ;;		_I2C_MasterSendTxData
  7722 ;;		_rd1RegCompleteHandler
  7723 ;;		_rd2RegCompleteHandler
  7724 ;;		_rdBlkRegCompleteHandler
  7725 ;;		_wr1RegCompleteHandler
  7726 ;;		_wr2RegCompleteHandler
  7727 ;; This function is called by:
  7728 ;;		i1_I2C_MasterFsm
  7729 ;;		_I2C_MasterFsm
  7730 ;; This function uses a non-reentrant model
  7731 ;;
  7732                           
  7733                           
  7734                           ;psect for function _I2C_DO_TX
  7735  011C                     _I2C_DO_TX:	
  7736                           
  7737                           ;Skip over the trampoline to the duplicate function for level 1
  7738  011C  1C7E               	btfss	126,0
  7739  011D  2920               	goto	l5517
  7740  011E  3181  29BC         	ljmp	i1l5415
  7741  0120                     _I2C_DO_TX$intlevel0:	
  7742  0120                     l5517:	
  7743                           ;incstack = 0
  7744 ;; hardware stack exceeded
  7745                           ; Regs used in _I2C_DO_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7746                           
  7747                           
  7748                           ;i2c_master.c: 356: if(I2C_MasterIsNack())
  7749  0120  318F  2741  3181   	fcall	_I2C_MasterIsNack
  7750  0123  3A00               	xorlw	0
  7751  0124  1D03               	btfss	3,2
  7752  0125  2930               	goto	l5535
  7753  0126  294D               	goto	l387
  7754  0127                     l5521:	
  7755                           ;i2c_master.c: 359: {
  7756                           ;i2c_master.c: 360: case I2C_RESTART_READ:
  7757                           
  7758                           ;i2c_master.c: 357: {
  7759                           ;i2c_master.c: 358: switch(I2C_Status.callbackTable[I2C_DATA_NACK](I2C_Status.callbackPa
      +                          yload[I2C_DATA_NACK]))
  7760                           
  7761                           
  7762                           ;i2c_master.c: 361: return I2C_DO_SEND_RESTART_READ();
  7763  0127  318F  276B         	fcall	_I2C_DO_SEND_RESTART_READ
  7764  0129  0008               	return
  7765  012A                     l5525:	
  7766                           ;i2c_master.c: 362: case I2C_RESTART_WRITE:
  7767                           
  7768                           
  7769                           ;i2c_master.c: 363: return I2C_DO_SEND_RESTART_WRITE();
  7770  012A  318F  2773         	fcall	_I2C_DO_SEND_RESTART_WRITE
  7771  012C  0008               	return
  7772  012D                     l5529:	
  7773                           ;i2c_master.c: 365: case I2C_CONTINUE:
  7774                           
  7775                           ;i2c_master.c: 364: default:
  7776                           
  7777                           
  7778                           ;i2c_master.c: 366: case I2C_STOP:
  7779                           ;i2c_master.c: 367: return I2C_DO_SEND_STOP();
  7780  012D  318F  2783         	fcall	_I2C_DO_SEND_STOP
  7781                           
  7782                           ;i2c_master.c: 368: }
  7783  012F  0008               	return
  7784  0130                     l5535:	
  7785  0130  0020               	movlb	0	; select bank0
  7786  0131  082F               	movf	low ((_I2C_Status| 0+15)),w
  7787  0132  0021               	movlb	1	; select bank1
  7788  0133  00B4               	movwf	??_I2C_DO_TX^(0+128)
  7789  0134  0834               	movf	??_I2C_DO_TX^(0+128),w
  7790  0135  00B3               	movwf	I2C_CallbackReturnReset@funPtr^(0+128)
  7791  0136  3006               	movlw	6
  7792  0137  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
  7793  0138  0086               	movwf	6
  7794  0139  0187               	clrf	7
  7795  013A  3F41               	moviw [1]fsr1
  7796  013B  008A               	movwf	10
  7797  013C  3F40               	moviw [0]fsr1
  7798  013D  000A               	callw
  7799  013E  3181               	pagesel	$
  7800                           
  7801                           ; Switch size 1, requested type "space"
  7802                           ; Number of cases is 4, Range of values is 1 to 4
  7803                           ; switch strategies available:
  7804                           ; Name         Instructions Cycles
  7805                           ; simple_byte           13     7 (average)
  7806                           ; direct_byte           17     9 (fixed)
  7807                           ; jumptable            263     9 (fixed)
  7808                           ;	Chosen strategy is simple_byte
  7809  013F  3A01               	xorlw	1	; case 1
  7810  0140  1903               	skipnz
  7811  0141  292D               	goto	l5529
  7812  0142  3A03               	xorlw	3	; case 2
  7813  0143  1903               	skipnz
  7814  0144  2927               	goto	l5521
  7815  0145  3A01               	xorlw	1	; case 3
  7816  0146  1903               	skipnz
  7817  0147  292A               	goto	l5525
  7818  0148  3A07               	xorlw	7	; case 4
  7819  0149  1903               	skipnz
  7820  014A  292D               	goto	l5529
  7821  014B  292D               	goto	l5529
  7822                           
  7823                           ;i2c_master.c: 369: }
  7824  014C  0008               	return
  7825  014D                     l387:	
  7826                           
  7827                           ;i2c_master.c: 370: else
  7828                           ;i2c_master.c: 371: {
  7829                           ;i2c_master.c: 372: I2C_Status.addressNackCheck = 0;
  7830  014D  0020               	movlb	0	; select bank0
  7831  014E  103C               	bcf	_I2C_Status+28,0
  7832                           
  7833                           ;i2c_master.c: 373: I2C_MasterSendTxData(*I2C_Status.data_ptr++);
  7834  014F  3017               	movlw	23
  7835  0150  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
  7836  0151  0086               	movwf	6
  7837  0152  0187               	clrf	7
  7838  0153  3F40               	moviw [0]fsr1
  7839  0154  0084               	movwf	4
  7840  0155  0185               	clrf	5
  7841  0156  0A81               	incf	1,f
  7842  0157  0800               	movf	0,w
  7843  0158  318F  273B  3181   	fcall	_I2C_MasterSendTxData
  7844                           
  7845                           ;i2c_master.c: 374: return (--I2C_Status.data_length)?I2C_TX:I2C_TX_EMPTY;
  7846  015B  3001               	movlw	1
  7847  015C  0020               	movlb	0	; select bank0
  7848  015D  02B8               	subwf	_I2C_Status+24,f
  7849  015E  3000               	movlw	0
  7850  015F  3BB9               	subwfb	_I2C_Status+25,f
  7851  0160  0838               	movf	_I2C_Status+24,w
  7852  0161  0439               	iorwf	_I2C_Status+25,w
  7853  0162  1D03               	btfss	3,2
  7854  0163  2966               	goto	l5543
  7855  0164  3006               	movlw	6
  7856  0165  2967               	goto	L1
  7857  0166                     l5543:	
  7858  0166  3003               	movlw	3
  7859  0167                     L1:	
  7860  0167  0021               	movlb	1	; select bank1
  7861  0168  00B5               	movwf	_I2C_DO_TX$794^(0+128)
  7862  0169  3000               	movlw	0
  7863  016A  00B6               	movwf	(_I2C_DO_TX$794^(0+128)+1)
  7864  016B  0835               	movf	_I2C_DO_TX$794^(0+128),w
  7865  016C  0008               	return
  7866  016D                     __end_of_I2C_DO_TX:	
  7867                           
  7868                           	psect	text38
  7869  07E5                     __ptext38:	
  7870 ;; *************** function _I2C_DO_SEND_ADR_WRITE *****************
  7871 ;; Defined at:
  7872 ;;		line 347 in file "mcc_generated_files/i2c_master.c"
  7873 ;; Parameters:    Size  Location     Type
  7874 ;;		None
  7875 ;; Auto vars:     Size  Location     Type
  7876 ;;		None
  7877 ;; Return value:  Size  Location     Type
  7878 ;;                  1    wreg      enum E12103
  7879 ;; Registers used:
  7880 ;;		wreg, status,2, status,0, pclath, cstack
  7881 ;; Tracked objects:
  7882 ;;		On entry : 0/0
  7883 ;;		On exit  : 0/0
  7884 ;;		Unchanged: 0/0
  7885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7889 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7890 ;;Total ram usage:        0 bytes
  7891 ;; Hardware stack levels used:    1
  7892 ;; Hardware stack levels required when called:   13
  7893 ;; This function calls:
  7894 ;;		_I2C_MasterSendTxData
  7895 ;; This function is called by:
  7896 ;;		i1_I2C_MasterFsm
  7897 ;;		_I2C_MasterFsm
  7898 ;; This function uses a non-reentrant model
  7899 ;;
  7900                           
  7901                           
  7902                           ;psect for function _I2C_DO_SEND_ADR_WRITE
  7903  07E5                     _I2C_DO_SEND_ADR_WRITE:	
  7904                           
  7905                           ;Skip over the trampoline to the duplicate function for level 1
  7906  07E5  1C7E               	btfss	126,0
  7907  07E6  2FE9               	goto	l3915
  7908  07E7  318F  2F4D         	ljmp	i1l2635
  7909  07E9                     _I2C_DO_SEND_ADR_WRITE$intlevel0:	
  7910  07E9                     l3915:	
  7911                           ;incstack = 0
  7912 ;; hardware stack exceeded
  7913                           ; Regs used in _I2C_DO_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
  7914                           
  7915                           
  7916                           ;i2c_master.c: 349: I2C_Status.addressNackCheck = 1;
  7917  07E9  0020               	movlb	0	; select bank0
  7918  07EA  143C               	bsf	_I2C_Status+28,0
  7919                           
  7920                           ;i2c_master.c: 350: I2C_MasterSendTxData(I2C_Status.address << 1);
  7921  07EB  3536               	lslf	_I2C_Status+22,w
  7922  07EC  318F  273B         	fcall	_I2C_MasterSendTxData
  7923                           
  7924                           ;i2c_master.c: 351: return I2C_TX;
  7925  07EE  3003               	movlw	3
  7926  07EF  0008               	return
  7927  07F0                     __end_of_I2C_DO_SEND_ADR_WRITE:	
  7928                           
  7929                           	psect	text39
  7930  07AA                     __ptext39:	
  7931 ;; *************** function _I2C_DO_SEND_ADR_READ *****************
  7932 ;; Defined at:
  7933 ;;		line 340 in file "mcc_generated_files/i2c_master.c"
  7934 ;; Parameters:    Size  Location     Type
  7935 ;;		None
  7936 ;; Auto vars:     Size  Location     Type
  7937 ;;		None
  7938 ;; Return value:  Size  Location     Type
  7939 ;;                  1    wreg      enum E12103
  7940 ;; Registers used:
  7941 ;;		wreg, status,2, status,0, pclath, cstack
  7942 ;; Tracked objects:
  7943 ;;		On entry : 0/0
  7944 ;;		On exit  : 0/0
  7945 ;;		Unchanged: 0/0
  7946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7950 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7951 ;;Total ram usage:        0 bytes
  7952 ;; Hardware stack levels used:    1
  7953 ;; Hardware stack levels required when called:   13
  7954 ;; This function calls:
  7955 ;;		_I2C_MasterSendTxData
  7956 ;; This function is called by:
  7957 ;;		i1_I2C_MasterFsm
  7958 ;;		_I2C_MasterFsm
  7959 ;; This function uses a non-reentrant model
  7960 ;;
  7961                           
  7962                           
  7963                           ;psect for function _I2C_DO_SEND_ADR_READ
  7964  07AA                     _I2C_DO_SEND_ADR_READ:	
  7965                           
  7966                           ;Skip over the trampoline to the duplicate function for level 1
  7967  07AA  1C7E               	btfss	126,0
  7968  07AB  2FAE               	goto	l3907
  7969  07AC  318F  2F63         	ljmp	i1l2627
  7970  07AE                     _I2C_DO_SEND_ADR_READ$intlevel0:	
  7971  07AE                     l3907:	
  7972                           ;incstack = 0
  7973 ;; hardware stack exceeded
  7974                           ; Regs used in _I2C_DO_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
  7975                           
  7976                           
  7977                           ;i2c_master.c: 342: I2C_Status.addressNackCheck = 1;
  7978  07AE  0020               	movlb	0	; select bank0
  7979  07AF  143C               	bsf	_I2C_Status+28,0
  7980                           
  7981                           ;i2c_master.c: 343: I2C_MasterSendTxData(I2C_Status.address << 1 | 1);
  7982  07B0  1403               	setc
  7983  07B1  0D36               	rlf	_I2C_Status+22,w
  7984  07B2  318F  273B         	fcall	_I2C_MasterSendTxData
  7985                           
  7986                           ;i2c_master.c: 344: return I2C_RCEN;
  7987  07B4  3005               	movlw	5
  7988  07B5  0008               	return
  7989  07B6                     __end_of_I2C_DO_SEND_ADR_READ:	
  7990                           
  7991                           	psect	text40
  7992  0FA3                     __ptext40:	
  7993 ;; *************** function _I2C_DO_IDLE *****************
  7994 ;; Defined at:
  7995 ;;		line 333 in file "mcc_generated_files/i2c_master.c"
  7996 ;; Parameters:    Size  Location     Type
  7997 ;;		None
  7998 ;; Auto vars:     Size  Location     Type
  7999 ;;		None
  8000 ;; Return value:  Size  Location     Type
  8001 ;;                  1    wreg      enum E12103
  8002 ;; Registers used:
  8003 ;;		wreg, status,2
  8004 ;; Tracked objects:
  8005 ;;		On entry : 0/0
  8006 ;;		On exit  : 0/0
  8007 ;;		Unchanged: 0/0
  8008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8013 ;;Total ram usage:        0 bytes
  8014 ;; Hardware stack levels used:    1
  8015 ;; Hardware stack levels required when called:   12
  8016 ;; This function calls:
  8017 ;;		Nothing
  8018 ;; This function is called by:
  8019 ;;		i1_I2C_MasterFsm
  8020 ;;		_I2C_MasterFsm
  8021 ;; This function uses a non-reentrant model
  8022 ;;
  8023                           
  8024                           
  8025                           ;psect for function _I2C_DO_IDLE
  8026  0FA3                     _I2C_DO_IDLE:	
  8027                           
  8028                           ;Skip over the trampoline to the duplicate function for level 1
  8029  0FA3  1C7E               	btfss	126,0
  8030  0FA4  2FA7               	goto	l3899
  8031  0FA5  318F  2F14         	ljmp	i1l2619
  8032  0FA7                     _I2C_DO_IDLE$intlevel0:	
  8033  0FA7                     l3899:	
  8034                           ;incstack = 0
  8035 ;; hardware stack exceeded
  8036                           ; Regs used in _I2C_DO_IDLE: [wreg+status,2]
  8037                           
  8038                           
  8039                           ;i2c_master.c: 335: I2C_Status.busy = 0;
  8040  0FA7  0020               	movlb	0	; select bank0
  8041  0FA8  10BC               	bcf	_I2C_Status+28,1
  8042                           
  8043                           ;i2c_master.c: 336: I2C_Status.error = I2C_NOERR;
  8044  0FA9  01BB               	clrf	_I2C_Status+27
  8045                           
  8046                           ;i2c_master.c: 337: return I2C_RESET;
  8047  0FAA  300E               	movlw	14
  8048  0FAB  0008               	return
  8049  0FAC                     __end_of_I2C_DO_IDLE:	
  8050                           
  8051                           	psect	text41
  8052  046F                     __ptext41:	
  8053 ;; *************** function _I2C_DO_TX_EMPTY *****************
  8054 ;; Defined at:
  8055 ;;		line 409 in file "mcc_generated_files/i2c_master.c"
  8056 ;; Parameters:    Size  Location     Type
  8057 ;;		None
  8058 ;; Auto vars:     Size  Location     Type
  8059 ;;		None
  8060 ;; Return value:  Size  Location     Type
  8061 ;;                  1    wreg      enum E12103
  8062 ;; Registers used:
  8063 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8064 ;; Tracked objects:
  8065 ;;		On entry : 0/0
  8066 ;;		On exit  : 0/0
  8067 ;;		Unchanged: 0/0
  8068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8071 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8072 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8073 ;;Total ram usage:        1 bytes
  8074 ;; Hardware stack levels used:    1
  8075 ;; Hardware stack levels required when called:   15
  8076 ;; This function calls:
  8077 ;;		Absolute function
  8078 ;;		_I2C_CallbackReturnReset
  8079 ;;		_I2C_CallbackReturnStop
  8080 ;;		_I2C_DO_SEND_RESTART
  8081 ;;		_I2C_DO_SEND_STOP
  8082 ;;		_I2C_MasterSetIrq
  8083 ;;		_rd1RegCompleteHandler
  8084 ;;		_rd2RegCompleteHandler
  8085 ;;		_rdBlkRegCompleteHandler
  8086 ;;		_wr1RegCompleteHandler
  8087 ;;		_wr2RegCompleteHandler
  8088 ;; This function is called by:
  8089 ;;		i1_I2C_MasterFsm
  8090 ;;		_I2C_MasterFsm
  8091 ;; This function uses a non-reentrant model
  8092 ;;
  8093                           
  8094                           
  8095                           ;psect for function _I2C_DO_TX_EMPTY
  8096  046F                     _I2C_DO_TX_EMPTY:	
  8097                           
  8098                           ;Skip over the trampoline to the duplicate function for level 1
  8099  046F  1C7E               	btfss	126,0
  8100  0470  2C73               	goto	l5573
  8101  0471  3185  2D3A         	ljmp	i1l5471
  8102  0473                     _I2C_DO_TX_EMPTY$intlevel0:	
  8103  0473                     l5573:	
  8104                           ;incstack = 0
  8105 ;; hardware stack exceeded
  8106                           ; Regs used in _I2C_DO_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8107                           
  8108                           
  8109                           ;i2c_master.c: 411: I2C_Status.bufferFree = 1;
  8110  0473  0020               	movlb	0	; select bank0
  8111  0474  15BC               	bsf	_I2C_Status+28,3
  8112                           
  8113                           ;i2c_master.c: 412: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
  8114  0475  2C80               	goto	l5591
  8115  0476                     l5575:	
  8116                           ;i2c_master.c: 413: {
  8117                           ;i2c_master.c: 414: case I2C_RESTART_READ:
  8118                           
  8119                           
  8120                           ;i2c_master.c: 415: case I2C_RESTART_WRITE:
  8121                           ;i2c_master.c: 416: return I2C_DO_SEND_RESTART();
  8122  0476  318F  277B         	fcall	_I2C_DO_SEND_RESTART
  8123  0478  0008               	return
  8124  0479                     l5579:	
  8125                           ;i2c_master.c: 417: case I2C_CONTINUE:
  8126                           
  8127                           
  8128                           ;i2c_master.c: 418: I2C_MasterSetIrq();
  8129  0479  318E  26C6         	fcall	_I2C_MasterSetIrq
  8130                           
  8131                           ;i2c_master.c: 419: return I2C_TX;
  8132  047B  3003               	movlw	3
  8133  047C  0008               	return
  8134  047D                     l5585:	
  8135                           ;i2c_master.c: 421: case I2C_STOP:
  8136                           
  8137                           ;i2c_master.c: 420: default:
  8138                           
  8139                           
  8140                           ;i2c_master.c: 422: return I2C_DO_SEND_STOP();
  8141  047D  318F  2783         	fcall	_I2C_DO_SEND_STOP
  8142                           
  8143                           ;i2c_master.c: 423: }
  8144  047F  0008               	return
  8145  0480                     l5591:	
  8146  0480  0020               	movlb	0	; select bank0
  8147  0481  082C               	movf	low ((_I2C_Status| 0+12)),w
  8148  0482  0021               	movlb	1	; select bank1
  8149  0483  00B4               	movwf	??_I2C_DO_TX_EMPTY^(0+128)
  8150  0484  0834               	movf	??_I2C_DO_TX_EMPTY^(0+128),w
  8151  0485  00B3               	movwf	I2C_CallbackReturnReset@funPtr^(0+128)
  8152  0486  0020               	movlb	0	; select bank0
  8153  0487  0821               	movf	_I2C_Status+1,w
  8154  0488  008A               	movwf	10
  8155  0489  0820               	movf	_I2C_Status,w
  8156  048A  000A               	callw
  8157  048B  3184               	pagesel	$
  8158                           
  8159                           ; Switch size 1, requested type "space"
  8160                           ; Number of cases is 4, Range of values is 1 to 4
  8161                           ; switch strategies available:
  8162                           ; Name         Instructions Cycles
  8163                           ; simple_byte           13     7 (average)
  8164                           ; direct_byte           17     9 (fixed)
  8165                           ; jumptable            263     9 (fixed)
  8166                           ;	Chosen strategy is simple_byte
  8167  048C  3A01               	xorlw	1	; case 1
  8168  048D  1903               	skipnz
  8169  048E  2C7D               	goto	l5585
  8170  048F  3A03               	xorlw	3	; case 2
  8171  0490  1903               	skipnz
  8172  0491  2C76               	goto	l5575
  8173  0492  3A01               	xorlw	1	; case 3
  8174  0493  1903               	skipnz
  8175  0494  2C76               	goto	l5575
  8176  0495  3A07               	xorlw	7	; case 4
  8177  0496  1903               	skipnz
  8178  0497  2C79               	goto	l5579
  8179  0498  2C7D               	goto	l5585
  8180  0499  0008               	return
  8181  049A                     __end_of_I2C_DO_TX_EMPTY:	
  8182                           
  8183                           	psect	text42
  8184  0EC6                     __ptext42:	
  8185 ;; *************** function _I2C_MasterSetIrq *****************
  8186 ;; Defined at:
  8187 ;;		line 645 in file "mcc_generated_files/i2c_master.c"
  8188 ;; Parameters:    Size  Location     Type
  8189 ;;		None
  8190 ;; Auto vars:     Size  Location     Type
  8191 ;;		None
  8192 ;; Return value:  Size  Location     Type
  8193 ;;                  1    wreg      void 
  8194 ;; Registers used:
  8195 ;;		None
  8196 ;; Tracked objects:
  8197 ;;		On entry : 0/0
  8198 ;;		On exit  : 0/0
  8199 ;;		Unchanged: 0/0
  8200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8204 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8205 ;;Total ram usage:        0 bytes
  8206 ;; Hardware stack levels used:    1
  8207 ;; Hardware stack levels required when called:   12
  8208 ;; This function calls:
  8209 ;;		Nothing
  8210 ;; This function is called by:
  8211 ;;		_I2C_DO_TX_EMPTY
  8212 ;; This function uses a non-reentrant model
  8213 ;;
  8214                           
  8215                           
  8216                           ;psect for function _I2C_MasterSetIrq
  8217  0EC6                     _I2C_MasterSetIrq:	
  8218                           
  8219                           ;i2c_master.c: 647: PIR1bits.SSP1IF = 1;
  8220                           
  8221                           ;incstack = 0
  8222 ;; hardware stack exceeded
  8223                           ; Regs used in _I2C_MasterSetIrq: []
  8224  0EC6  0020               	movlb	0	; select bank0
  8225  0EC7  1590               	bsf	16,3	;volatile
  8226  0EC8  0008               	return
  8227  0EC9                     __end_of_I2C_MasterSetIrq:	
  8228                           
  8229                           	psect	text43
  8230  0F41                     __ptext43:	
  8231 ;; *************** function _I2C_MasterIsNack *****************
  8232 ;; Defined at:
  8233 ;;		line 598 in file "mcc_generated_files/i2c_master.c"
  8234 ;; Parameters:    Size  Location     Type
  8235 ;;		None
  8236 ;; Auto vars:     Size  Location     Type
  8237 ;;		None
  8238 ;; Return value:  Size  Location     Type
  8239 ;;                  1    wreg      unsigned char 
  8240 ;; Registers used:
  8241 ;;		wreg, status,2, status,0
  8242 ;; Tracked objects:
  8243 ;;		On entry : 0/0
  8244 ;;		On exit  : 0/0
  8245 ;;		Unchanged: 0/0
  8246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8250 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8251 ;;Total ram usage:        0 bytes
  8252 ;; Hardware stack levels used:    1
  8253 ;; Hardware stack levels required when called:   12
  8254 ;; This function calls:
  8255 ;;		Nothing
  8256 ;; This function is called by:
  8257 ;;		_I2C_MasterFsm
  8258 ;;		_I2C_DO_TX
  8259 ;; This function uses a non-reentrant model
  8260 ;;
  8261                           
  8262                           
  8263                           ;psect for function _I2C_MasterIsNack
  8264  0F41                     _I2C_MasterIsNack:	
  8265                           
  8266                           ;i2c_master.c: 600: return SSP1CON2bits.ACKSTAT;
  8267                           
  8268                           ;incstack = 0
  8269 ;; hardware stack exceeded
  8270                           ; Regs used in _I2C_MasterIsNack: [wreg+status,2+status,0]
  8271  0F41  0024               	movlb	4	; select bank4
  8272  0F42  0E16               	swapf	22,w	;volatile
  8273  0F43  0C89               	rrf	9,f
  8274  0F44  0C89               	rrf	9,f
  8275  0F45  3901               	andlw	1
  8276  0F46  0008               	return
  8277  0F47                     __end_of_I2C_MasterIsNack:	
  8278                           
  8279                           	psect	text44
  8280  0F3B                     __ptext44:	
  8281 ;; *************** function _I2C_MasterSendTxData *****************
  8282 ;; Defined at:
  8283 ;;		line 568 in file "mcc_generated_files/i2c_master.c"
  8284 ;; Parameters:    Size  Location     Type
  8285 ;;  data            1    wreg     unsigned char 
  8286 ;; Auto vars:     Size  Location     Type
  8287 ;;  data            1   18[BANK0 ] unsigned char 
  8288 ;; Return value:  Size  Location     Type
  8289 ;;                  1    wreg      void 
  8290 ;; Registers used:
  8291 ;;		wreg
  8292 ;; Tracked objects:
  8293 ;;		On entry : 0/0
  8294 ;;		On exit  : 0/0
  8295 ;;		Unchanged: 0/0
  8296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8298 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8300 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8301 ;;Total ram usage:        1 bytes
  8302 ;; Hardware stack levels used:    1
  8303 ;; Hardware stack levels required when called:   12
  8304 ;; This function calls:
  8305 ;;		Nothing
  8306 ;; This function is called by:
  8307 ;;		_I2C_DO_SEND_ADR_READ
  8308 ;;		_I2C_DO_SEND_ADR_WRITE
  8309 ;;		_I2C_DO_TX
  8310 ;; This function uses a non-reentrant model
  8311 ;;
  8312                           
  8313                           
  8314                           ;psect for function _I2C_MasterSendTxData
  8315  0F3B                     _I2C_MasterSendTxData:	
  8316                           
  8317                           ;incstack = 0
  8318 ;; hardware stack exceeded
  8319                           ; Regs used in _I2C_MasterSendTxData: [wreg]
  8320                           ;I2C_MasterSendTxData@data stored from wreg
  8321  0F3B  0020               	movlb	0	; select bank0
  8322  0F3C  00D6               	movwf	I2C_MasterSendTxData@data
  8323                           
  8324                           ;i2c_master.c: 570: SSP1BUF = data;
  8325  0F3D  0856               	movf	I2C_MasterSendTxData@data,w
  8326  0F3E  0024               	movlb	4	; select bank4
  8327  0F3F  0091               	movwf	17	;volatile
  8328  0F40  0008               	return
  8329  0F41                     __end_of_I2C_MasterSendTxData:	
  8330                           
  8331                           	psect	text45
  8332  0F03                     __ptext45:	
  8333 ;; *************** function _I2C_MasterSendAck *****************
  8334 ;; Defined at:
  8335 ;;		line 603 in file "mcc_generated_files/i2c_master.c"
  8336 ;; Parameters:    Size  Location     Type
  8337 ;;		None
  8338 ;; Auto vars:     Size  Location     Type
  8339 ;;		None
  8340 ;; Return value:  Size  Location     Type
  8341 ;;                  1    wreg      void 
  8342 ;; Registers used:
  8343 ;;		None
  8344 ;; Tracked objects:
  8345 ;;		On entry : 0/0
  8346 ;;		On exit  : 0/0
  8347 ;;		Unchanged: 0/0
  8348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8353 ;;Total ram usage:        0 bytes
  8354 ;; Hardware stack levels used:    1
  8355 ;; Hardware stack levels required when called:   12
  8356 ;; This function calls:
  8357 ;;		Nothing
  8358 ;; This function is called by:
  8359 ;;		_I2C_DO_RX
  8360 ;;		_I2C_DO_RX_ACK
  8361 ;; This function uses a non-reentrant model
  8362 ;;
  8363                           
  8364                           
  8365                           ;psect for function _I2C_MasterSendAck
  8366  0F03                     _I2C_MasterSendAck:	
  8367                           
  8368                           ;i2c_master.c: 605: SSP1CON2bits.ACKDT = 0;
  8369                           
  8370                           ;incstack = 0
  8371 ;; hardware stack exceeded
  8372                           ; Regs used in _I2C_MasterSendAck: []
  8373  0F03  0024               	movlb	4	; select bank4
  8374  0F04  1296               	bcf	22,5	;volatile
  8375                           
  8376                           ;i2c_master.c: 606: SSP1CON2bits.ACKEN = 1;
  8377  0F05  1616               	bsf	22,4	;volatile
  8378  0F06  0008               	return
  8379  0F07                     __end_of_I2C_MasterSendAck:	
  8380                           
  8381                           	psect	text46
  8382  0EC3                     __ptext46:	
  8383 ;; *************** function _I2C_MasterGetRxData *****************
  8384 ;; Defined at:
  8385 ;;		line 563 in file "mcc_generated_files/i2c_master.c"
  8386 ;; Parameters:    Size  Location     Type
  8387 ;;		None
  8388 ;; Auto vars:     Size  Location     Type
  8389 ;;		None
  8390 ;; Return value:  Size  Location     Type
  8391 ;;                  1    wreg      unsigned char 
  8392 ;; Registers used:
  8393 ;;		wreg
  8394 ;; Tracked objects:
  8395 ;;		On entry : 0/0
  8396 ;;		On exit  : 0/0
  8397 ;;		Unchanged: 0/0
  8398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8403 ;;Total ram usage:        0 bytes
  8404 ;; Hardware stack levels used:    1
  8405 ;; Hardware stack levels required when called:   12
  8406 ;; This function calls:
  8407 ;;		Nothing
  8408 ;; This function is called by:
  8409 ;;		_I2C_DO_RX
  8410 ;; This function uses a non-reentrant model
  8411 ;;
  8412                           
  8413                           
  8414                           ;psect for function _I2C_MasterGetRxData
  8415  0EC3                     _I2C_MasterGetRxData:	
  8416                           
  8417                           ;i2c_master.c: 565: return SSP1BUF;
  8418                           
  8419                           ;incstack = 0
  8420 ;; hardware stack exceeded
  8421                           ; Regs used in _I2C_MasterGetRxData: [wreg]
  8422  0EC3  0024               	movlb	4	; select bank4
  8423  0EC4  0811               	movf	17,w	;volatile
  8424  0EC5  0008               	return
  8425  0EC6                     __end_of_I2C_MasterGetRxData:	
  8426                           
  8427                           	psect	text47
  8428  0EFF                     __ptext47:	
  8429 ;; *************** function _I2C_MasterSendNack *****************
  8430 ;; Defined at:
  8431 ;;		line 609 in file "mcc_generated_files/i2c_master.c"
  8432 ;; Parameters:    Size  Location     Type
  8433 ;;		None
  8434 ;; Auto vars:     Size  Location     Type
  8435 ;;		None
  8436 ;; Return value:  Size  Location     Type
  8437 ;;                  1    wreg      void 
  8438 ;; Registers used:
  8439 ;;		None
  8440 ;; Tracked objects:
  8441 ;;		On entry : 0/0
  8442 ;;		On exit  : 0/0
  8443 ;;		Unchanged: 0/0
  8444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8449 ;;Total ram usage:        0 bytes
  8450 ;; Hardware stack levels used:    1
  8451 ;; Hardware stack levels required when called:   12
  8452 ;; This function calls:
  8453 ;;		Nothing
  8454 ;; This function is called by:
  8455 ;;		_I2C_DO_RX_NACK_STOP
  8456 ;;		_I2C_DO_RX_NACK_RESTART
  8457 ;; This function uses a non-reentrant model
  8458 ;;
  8459                           
  8460                           
  8461                           ;psect for function _I2C_MasterSendNack
  8462  0EFF                     _I2C_MasterSendNack:	
  8463                           
  8464                           ;i2c_master.c: 611: SSP1CON2bits.ACKDT = 1;
  8465                           
  8466                           ;incstack = 0
  8467 ;; hardware stack exceeded
  8468                           ; Regs used in _I2C_MasterSendNack: []
  8469  0EFF  0024               	movlb	4	; select bank4
  8470  0F00  1696               	bsf	22,5	;volatile
  8471                           
  8472                           ;i2c_master.c: 612: SSP1CON2bits.ACKEN = 1;
  8473  0F01  1616               	bsf	22,4	;volatile
  8474  0F02  0008               	return
  8475  0F03                     __end_of_I2C_MasterSendNack:	
  8476                           
  8477                           	psect	text48
  8478  0EC0                     __ptext48:	
  8479 ;; *************** function _I2C_MasterStartRx *****************
  8480 ;; Defined at:
  8481 ;;		line 583 in file "mcc_generated_files/i2c_master.c"
  8482 ;; Parameters:    Size  Location     Type
  8483 ;;		None
  8484 ;; Auto vars:     Size  Location     Type
  8485 ;;		None
  8486 ;; Return value:  Size  Location     Type
  8487 ;;                  1    wreg      void 
  8488 ;; Registers used:
  8489 ;;		None
  8490 ;; Tracked objects:
  8491 ;;		On entry : 0/0
  8492 ;;		On exit  : 0/0
  8493 ;;		Unchanged: 0/0
  8494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8499 ;;Total ram usage:        0 bytes
  8500 ;; Hardware stack levels used:    1
  8501 ;; Hardware stack levels required when called:   12
  8502 ;; This function calls:
  8503 ;;		Nothing
  8504 ;; This function is called by:
  8505 ;;		_I2C_DO_RCEN
  8506 ;; This function uses a non-reentrant model
  8507 ;;
  8508                           
  8509                           
  8510                           ;psect for function _I2C_MasterStartRx
  8511  0EC0                     _I2C_MasterStartRx:	
  8512                           
  8513                           ;i2c_master.c: 585: SSP1CON2bits.RCEN = 1;
  8514                           
  8515                           ;incstack = 0
  8516 ;; hardware stack exceeded
  8517                           ; Regs used in _I2C_MasterStartRx: []
  8518  0EC0  0024               	movlb	4	; select bank4
  8519  0EC1  1596               	bsf	22,3	;volatile
  8520  0EC2  0008               	return
  8521  0EC3                     __end_of_I2C_MasterStartRx:	
  8522                           
  8523                           	psect	text49
  8524  0F35                     __ptext49:	
  8525 ;; *************** function _I2C_CallbackReturnReset *****************
  8526 ;; Defined at:
  8527 ;;		line 525 in file "mcc_generated_files/i2c_master.c"
  8528 ;; Parameters:    Size  Location     Type
  8529 ;;  funPtr          1    1[BANK1 ] PTR void 
  8530 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8531 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8532 ;; Auto vars:     Size  Location     Type
  8533 ;;		None
  8534 ;; Return value:  Size  Location     Type
  8535 ;;                  1    wreg      enum E97
  8536 ;; Registers used:
  8537 ;;		wreg
  8538 ;; Tracked objects:
  8539 ;;		On entry : 0/0
  8540 ;;		On exit  : 0/0
  8541 ;;		Unchanged: 0/0
  8542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8543 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8546 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8547 ;;Total ram usage:        1 bytes
  8548 ;; Hardware stack levels used:    1
  8549 ;; Hardware stack levels required when called:   12
  8550 ;; This function calls:
  8551 ;;		Nothing
  8552 ;; This function is called by:
  8553 ;;		_I2C_Open
  8554 ;;		i1_I2C_DO_TX
  8555 ;;		i1_I2C_DO_RX
  8556 ;;		i1_I2C_DO_TX_EMPTY
  8557 ;;		i1_I2C_DO_ADDRESS_NACK
  8558 ;;		_I2C_DO_TX
  8559 ;;		_I2C_DO_RX
  8560 ;;		_I2C_DO_TX_EMPTY
  8561 ;;		_I2C_DO_ADDRESS_NACK
  8562 ;;		_I2C_DO_RX_EMPTY
  8563 ;; This function uses a non-reentrant model
  8564 ;;
  8565                           
  8566                           
  8567                           ;psect for function _I2C_CallbackReturnReset
  8568  0F35                     _I2C_CallbackReturnReset:	
  8569                           
  8570                           ;Skip over the trampoline to the duplicate function for level 1
  8571  0F35  1C7E               	btfss	126,0
  8572  0F36  2F39               	goto	l3883
  8573  0F37  318E  2E8E         	ljmp	i1l2585
  8574  0F39                     _I2C_CallbackReturnReset$intlevel0:	
  8575  0F39                     l3883:	
  8576                           ;incstack = 0
  8577 ;; hardware stack exceeded
  8578                           ; Regs used in _I2C_CallbackReturnReset: [wreg]
  8579                           
  8580                           
  8581                           ;i2c_master.c: 527: return I2C_RESET_LINK;
  8582  0F39  3005               	movlw	5
  8583  0F3A  0008               	return
  8584  0F3B                     __end_of_I2C_CallbackReturnReset:	
  8585                           
  8586                           	psect	text50
  8587  0F2F                     __ptext50:	
  8588 ;; *************** function _I2C_CallbackReturnStop *****************
  8589 ;; Defined at:
  8590 ;;		line 520 in file "mcc_generated_files/i2c_master.c"
  8591 ;; Parameters:    Size  Location     Type
  8592 ;;  funPtr          1    1[BANK1 ] PTR void 
  8593 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8594 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8595 ;; Auto vars:     Size  Location     Type
  8596 ;;		None
  8597 ;; Return value:  Size  Location     Type
  8598 ;;                  1    wreg      enum E97
  8599 ;; Registers used:
  8600 ;;		wreg
  8601 ;; Tracked objects:
  8602 ;;		On entry : 0/0
  8603 ;;		On exit  : 0/0
  8604 ;;		Unchanged: 0/0
  8605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8606 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8609 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8610 ;;Total ram usage:        1 bytes
  8611 ;; Hardware stack levels used:    1
  8612 ;; Hardware stack levels required when called:   12
  8613 ;; This function calls:
  8614 ;;		Nothing
  8615 ;; This function is called by:
  8616 ;;		_I2C_Open
  8617 ;;		_I2C_SetCallback
  8618 ;;		i1_I2C_DO_TX
  8619 ;;		i1_I2C_DO_RX
  8620 ;;		i1_I2C_DO_TX_EMPTY
  8621 ;;		i1_I2C_DO_ADDRESS_NACK
  8622 ;;		_I2C_DO_TX
  8623 ;;		_I2C_DO_RX
  8624 ;;		_I2C_DO_TX_EMPTY
  8625 ;;		_I2C_DO_ADDRESS_NACK
  8626 ;;		_I2C_DO_RX_EMPTY
  8627 ;; This function uses a non-reentrant model
  8628 ;;
  8629                           
  8630                           
  8631                           ;psect for function _I2C_CallbackReturnStop
  8632  0F2F                     _I2C_CallbackReturnStop:	
  8633                           
  8634                           ;Skip over the trampoline to the duplicate function for level 1
  8635  0F2F  1C7E               	btfss	126,0
  8636  0F30  2F33               	goto	l3879
  8637  0F31  318E  2E8C         	ljmp	i1l2581
  8638  0F33                     _I2C_CallbackReturnStop$intlevel0:	
  8639  0F33                     l3879:	
  8640                           ;incstack = 0
  8641 ;; hardware stack exceeded
  8642                           ; Regs used in _I2C_CallbackReturnStop: [wreg]
  8643                           
  8644                           
  8645                           ;i2c_master.c: 522: return I2C_STOP;
  8646  0F33  3001               	movlw	1
  8647  0F34  0008               	return
  8648  0F35                     __end_of_I2C_CallbackReturnStop:	
  8649                           
  8650                           	psect	text51
  8651  05E5                     __ptext51:	
  8652 ;; *************** function _rdBlkRegCompleteHandler *****************
  8653 ;; Defined at:
  8654 ;;		line 170 in file "mcc_generated_files/examples/i2c_master_example.c"
  8655 ;; Parameters:    Size  Location     Type
  8656 ;;  ptr             1    1[BANK1 ] PTR void 
  8657 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8658 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8659 ;; Auto vars:     Size  Location     Type
  8660 ;;		None
  8661 ;; Return value:  Size  Location     Type
  8662 ;;                  1    wreg      enum E97
  8663 ;; Registers used:
  8664 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8665 ;; Tracked objects:
  8666 ;;		On entry : 0/0
  8667 ;;		On exit  : 0/0
  8668 ;;		Unchanged: 0/0
  8669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8670 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8673 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8674 ;;Total ram usage:        1 bytes
  8675 ;; Hardware stack levels used:    1
  8676 ;; Hardware stack levels required when called:   14
  8677 ;; This function calls:
  8678 ;;		_I2C_SetBuffer
  8679 ;;		_I2C_SetDataCompleteCallback
  8680 ;; This function is called by:
  8681 ;;		_I2C_ReadDataBlock
  8682 ;;		i1_I2C_DO_TX
  8683 ;;		i1_I2C_DO_RX
  8684 ;;		i1_I2C_DO_TX_EMPTY
  8685 ;;		i1_I2C_DO_ADDRESS_NACK
  8686 ;;		_I2C_DO_TX
  8687 ;;		_I2C_DO_RX
  8688 ;;		_I2C_DO_TX_EMPTY
  8689 ;;		_I2C_DO_ADDRESS_NACK
  8690 ;;		_I2C_DO_RX_EMPTY
  8691 ;; This function uses a non-reentrant model
  8692 ;;
  8693                           
  8694                           
  8695                           ;psect for function _rdBlkRegCompleteHandler
  8696  05E5                     _rdBlkRegCompleteHandler:	
  8697                           
  8698                           ;Skip over the trampoline to the duplicate function for level 1
  8699  05E5  1C7E               	btfss	126,0
  8700  05E6  2DE9               	goto	l3821
  8701  05E7  3186  2EAC         	ljmp	i1l2539
  8702  05E9                     _rdBlkRegCompleteHandler$intlevel0:	
  8703  05E9                     l3821:	
  8704                           ;incstack = 0
  8705 ;; hardware stack exceeded
  8706                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  8707                           
  8708                           
  8709                           ;i2c_master_example.c: 172: I2C_SetBuffer(((i2c_buffer_t *)ptr)->data,((i2c_buffer_t*)pt
      +                          r)->len);
  8710  05E9  0021               	movlb	1	; select bank1
  8711  05EA  0833               	movf	rdBlkRegCompleteHandler@ptr^(0+128),w
  8712  05EB  0086               	movwf	6
  8713  05EC  0187               	clrf	7
  8714  05ED  3F40               	moviw [0]fsr1
  8715  05EE  0020               	movlb	0	; select bank0
  8716  05EF  00D6               	movwf	I2C_SetBuffer@bufferSize
  8717  05F0  3F41               	moviw [1]fsr1
  8718  05F1  00D7               	movwf	I2C_SetBuffer@bufferSize+1
  8719  05F2  0021               	movlb	1	; select bank1
  8720  05F3  0833               	movf	rdBlkRegCompleteHandler@ptr^(0+128),w
  8721  05F4  3E02               	addlw	2
  8722  05F5  0086               	movwf	6
  8723  05F6  0187               	clrf	7
  8724  05F7  0801               	movf	1,w
  8725  05F8  3187  2775  3185   	fcall	_I2C_SetBuffer
  8726                           
  8727                           ;i2c_master_example.c: 173: I2C_SetDataCompleteCallback((0),(0));
  8728  05FB  3000               	movlw	0
  8729  05FC  0020               	movlb	0	; select bank0
  8730  05FD  00DB               	movwf	I2C_SetDataCompleteCallback@cb
  8731  05FE  00DC               	movwf	I2C_SetDataCompleteCallback@cb+1
  8732  05FF  01DD               	clrf	I2C_SetDataCompleteCallback@ptr
  8733  0600  3187  2766         	fcall	_I2C_SetDataCompleteCallback
  8734                           
  8735                           ;i2c_master_example.c: 174: return I2C_RESTART_READ;
  8736  0602  3002               	movlw	2
  8737  0603  0008               	return
  8738  0604                     __end_of_rdBlkRegCompleteHandler:	
  8739                           
  8740                           	psect	text52
  8741  0650                     __ptext52:	
  8742 ;; *************** function _wr1RegCompleteHandler *****************
  8743 ;; Defined at:
  8744 ;;		line 156 in file "mcc_generated_files/examples/i2c_master_example.c"
  8745 ;; Parameters:    Size  Location     Type
  8746 ;;  ptr             1    1[BANK1 ] PTR void 
  8747 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8748 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8749 ;; Auto vars:     Size  Location     Type
  8750 ;;		None
  8751 ;; Return value:  Size  Location     Type
  8752 ;;                  1    wreg      enum E97
  8753 ;; Registers used:
  8754 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8755 ;; Tracked objects:
  8756 ;;		On entry : 0/0
  8757 ;;		On exit  : 0/0
  8758 ;;		Unchanged: 0/0
  8759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8760 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8763 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8764 ;;Total ram usage:        1 bytes
  8765 ;; Hardware stack levels used:    1
  8766 ;; Hardware stack levels required when called:   14
  8767 ;; This function calls:
  8768 ;;		_I2C_SetBuffer
  8769 ;;		_I2C_SetDataCompleteCallback
  8770 ;; This function is called by:
  8771 ;;		_I2C_Write1ByteRegister
  8772 ;;		i1_I2C_DO_TX
  8773 ;;		i1_I2C_DO_RX
  8774 ;;		i1_I2C_DO_TX_EMPTY
  8775 ;;		i1_I2C_DO_ADDRESS_NACK
  8776 ;;		_I2C_DO_TX
  8777 ;;		_I2C_DO_RX
  8778 ;;		_I2C_DO_TX_EMPTY
  8779 ;;		_I2C_DO_ADDRESS_NACK
  8780 ;;		_I2C_DO_RX_EMPTY
  8781 ;; This function uses a non-reentrant model
  8782 ;;
  8783                           
  8784                           
  8785                           ;psect for function _wr1RegCompleteHandler
  8786  0650                     _wr1RegCompleteHandler:	
  8787                           
  8788                           ;Skip over the trampoline to the duplicate function for level 1
  8789  0650  1C7E               	btfss	126,0
  8790  0651  2E54               	goto	l3805
  8791  0652  3187  2F17         	ljmp	i1l2523
  8792  0654                     _wr1RegCompleteHandler$intlevel0:	
  8793  0654                     l3805:	
  8794                           ;incstack = 0
  8795 ;; hardware stack exceeded
  8796                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8797                           
  8798                           
  8799                           ;i2c_master_example.c: 158: I2C_SetBuffer(ptr,1);
  8800  0654  3001               	movlw	1
  8801  0655  0020               	movlb	0	; select bank0
  8802  0656  00D6               	movwf	I2C_SetBuffer@bufferSize
  8803  0657  3000               	movlw	0
  8804  0658  00D7               	movwf	I2C_SetBuffer@bufferSize+1
  8805  0659  0021               	movlb	1	; select bank1
  8806  065A  0833               	movf	wr1RegCompleteHandler@ptr^(0+128),w
  8807  065B  3187  2775  3186   	fcall	_I2C_SetBuffer
  8808                           
  8809                           ;i2c_master_example.c: 159: I2C_SetDataCompleteCallback((0),(0));
  8810  065E  3000               	movlw	0
  8811  065F  0020               	movlb	0	; select bank0
  8812  0660  00DB               	movwf	I2C_SetDataCompleteCallback@cb
  8813  0661  00DC               	movwf	I2C_SetDataCompleteCallback@cb+1
  8814  0662  01DD               	clrf	I2C_SetDataCompleteCallback@ptr
  8815  0663  3187  2766         	fcall	_I2C_SetDataCompleteCallback
  8816                           
  8817                           ;i2c_master_example.c: 160: return I2C_CONTINUE;
  8818  0665  3004               	movlw	4
  8819  0666  0008               	return
  8820  0667                     __end_of_wr1RegCompleteHandler:	
  8821                           
  8822                           	psect	text53
  8823  0667                     __ptext53:	
  8824 ;; *************** function _rd2RegCompleteHandler *****************
  8825 ;; Defined at:
  8826 ;;		line 149 in file "mcc_generated_files/examples/i2c_master_example.c"
  8827 ;; Parameters:    Size  Location     Type
  8828 ;;  ptr             1    1[BANK1 ] PTR void 
  8829 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8830 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8831 ;; Auto vars:     Size  Location     Type
  8832 ;;		None
  8833 ;; Return value:  Size  Location     Type
  8834 ;;                  1    wreg      enum E97
  8835 ;; Registers used:
  8836 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8837 ;; Tracked objects:
  8838 ;;		On entry : 0/0
  8839 ;;		On exit  : 0/0
  8840 ;;		Unchanged: 0/0
  8841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8842 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8845 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8846 ;;Total ram usage:        1 bytes
  8847 ;; Hardware stack levels used:    1
  8848 ;; Hardware stack levels required when called:   14
  8849 ;; This function calls:
  8850 ;;		_I2C_SetBuffer
  8851 ;;		_I2C_SetDataCompleteCallback
  8852 ;; This function is called by:
  8853 ;;		i1_I2C_DO_TX
  8854 ;;		i1_I2C_DO_RX
  8855 ;;		i1_I2C_DO_TX_EMPTY
  8856 ;;		i1_I2C_DO_ADDRESS_NACK
  8857 ;;		_I2C_DO_TX
  8858 ;;		_I2C_DO_RX
  8859 ;;		_I2C_DO_TX_EMPTY
  8860 ;;		_I2C_DO_ADDRESS_NACK
  8861 ;;		_I2C_DO_RX_EMPTY
  8862 ;; This function uses a non-reentrant model
  8863 ;;
  8864                           
  8865                           
  8866                           ;psect for function _rd2RegCompleteHandler
  8867  0667                     _rd2RegCompleteHandler:	
  8868                           
  8869                           ;Skip over the trampoline to the duplicate function for level 1
  8870  0667  1C7E               	btfss	126,0
  8871  0668  2E6B               	goto	l3797
  8872  0669  3187  2F27         	ljmp	i1l2515
  8873  066B                     _rd2RegCompleteHandler$intlevel0:	
  8874  066B                     l3797:	
  8875                           ;incstack = 0
  8876 ;; hardware stack exceeded
  8877                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8878                           
  8879                           
  8880                           ;i2c_master_example.c: 151: I2C_SetBuffer(ptr,2);
  8881  066B  3002               	movlw	2
  8882  066C  0020               	movlb	0	; select bank0
  8883  066D  00D6               	movwf	I2C_SetBuffer@bufferSize
  8884  066E  3000               	movlw	0
  8885  066F  00D7               	movwf	I2C_SetBuffer@bufferSize+1
  8886  0670  0021               	movlb	1	; select bank1
  8887  0671  0833               	movf	rd2RegCompleteHandler@ptr^(0+128),w
  8888  0672  3187  2775  3186   	fcall	_I2C_SetBuffer
  8889                           
  8890                           ;i2c_master_example.c: 152: I2C_SetDataCompleteCallback((0),(0));
  8891  0675  3000               	movlw	0
  8892  0676  0020               	movlb	0	; select bank0
  8893  0677  00DB               	movwf	I2C_SetDataCompleteCallback@cb
  8894  0678  00DC               	movwf	I2C_SetDataCompleteCallback@cb+1
  8895  0679  01DD               	clrf	I2C_SetDataCompleteCallback@ptr
  8896  067A  3187  2766         	fcall	_I2C_SetDataCompleteCallback
  8897                           
  8898                           ;i2c_master_example.c: 153: return I2C_RESTART_READ;
  8899  067C  3002               	movlw	2
  8900  067D  0008               	return
  8901  067E                     __end_of_rd2RegCompleteHandler:	
  8902                           
  8903                           	psect	text54
  8904  067E                     __ptext54:	
  8905 ;; *************** function _rd1RegCompleteHandler *****************
  8906 ;; Defined at:
  8907 ;;		line 142 in file "mcc_generated_files/examples/i2c_master_example.c"
  8908 ;; Parameters:    Size  Location     Type
  8909 ;;  ptr             1    1[BANK1 ] PTR void 
  8910 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8911 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8912 ;; Auto vars:     Size  Location     Type
  8913 ;;		None
  8914 ;; Return value:  Size  Location     Type
  8915 ;;                  1    wreg      enum E97
  8916 ;; Registers used:
  8917 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8918 ;; Tracked objects:
  8919 ;;		On entry : 0/0
  8920 ;;		On exit  : 0/0
  8921 ;;		Unchanged: 0/0
  8922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8923 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8926 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8927 ;;Total ram usage:        1 bytes
  8928 ;; Hardware stack levels used:    1
  8929 ;; Hardware stack levels required when called:   14
  8930 ;; This function calls:
  8931 ;;		_I2C_SetBuffer
  8932 ;;		_I2C_SetDataCompleteCallback
  8933 ;; This function is called by:
  8934 ;;		_I2C_Read1ByteRegister
  8935 ;;		i1_I2C_DO_TX
  8936 ;;		i1_I2C_DO_RX
  8937 ;;		i1_I2C_DO_TX_EMPTY
  8938 ;;		i1_I2C_DO_ADDRESS_NACK
  8939 ;;		_I2C_DO_TX
  8940 ;;		_I2C_DO_RX
  8941 ;;		_I2C_DO_TX_EMPTY
  8942 ;;		_I2C_DO_ADDRESS_NACK
  8943 ;;		_I2C_DO_RX_EMPTY
  8944 ;; This function uses a non-reentrant model
  8945 ;;
  8946                           
  8947                           
  8948                           ;psect for function _rd1RegCompleteHandler
  8949  067E                     _rd1RegCompleteHandler:	
  8950                           
  8951                           ;Skip over the trampoline to the duplicate function for level 1
  8952  067E  1C7E               	btfss	126,0
  8953  067F  2E82               	goto	l3789
  8954  0680  3187  2F37         	ljmp	i1l2507
  8955  0682                     _rd1RegCompleteHandler$intlevel0:	
  8956  0682                     l3789:	
  8957                           ;incstack = 0
  8958 ;; hardware stack exceeded
  8959                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8960                           
  8961                           
  8962                           ;i2c_master_example.c: 144: I2C_SetBuffer(ptr,1);
  8963  0682  3001               	movlw	1
  8964  0683  0020               	movlb	0	; select bank0
  8965  0684  00D6               	movwf	I2C_SetBuffer@bufferSize
  8966  0685  3000               	movlw	0
  8967  0686  00D7               	movwf	I2C_SetBuffer@bufferSize+1
  8968  0687  0021               	movlb	1	; select bank1
  8969  0688  0833               	movf	rd1RegCompleteHandler@ptr^(0+128),w
  8970  0689  3187  2775  3186   	fcall	_I2C_SetBuffer
  8971                           
  8972                           ;i2c_master_example.c: 145: I2C_SetDataCompleteCallback((0),(0));
  8973  068C  3000               	movlw	0
  8974  068D  0020               	movlb	0	; select bank0
  8975  068E  00DB               	movwf	I2C_SetDataCompleteCallback@cb
  8976  068F  00DC               	movwf	I2C_SetDataCompleteCallback@cb+1
  8977  0690  01DD               	clrf	I2C_SetDataCompleteCallback@ptr
  8978  0691  3187  2766         	fcall	_I2C_SetDataCompleteCallback
  8979                           
  8980                           ;i2c_master_example.c: 146: return I2C_RESTART_READ;
  8981  0693  3002               	movlw	2
  8982  0694  0008               	return
  8983  0695                     __end_of_rd1RegCompleteHandler:	
  8984                           
  8985                           	psect	text55
  8986  0695                     __ptext55:	
  8987 ;; *************** function _wr2RegCompleteHandler *****************
  8988 ;; Defined at:
  8989 ;;		line 163 in file "mcc_generated_files/examples/i2c_master_example.c"
  8990 ;; Parameters:    Size  Location     Type
  8991 ;;  ptr             1    1[BANK1 ] PTR void 
  8992 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8993 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8994 ;; Auto vars:     Size  Location     Type
  8995 ;;		None
  8996 ;; Return value:  Size  Location     Type
  8997 ;;                  1    wreg      enum E97
  8998 ;; Registers used:
  8999 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9000 ;; Tracked objects:
  9001 ;;		On entry : 0/0
  9002 ;;		On exit  : 0/0
  9003 ;;		Unchanged: 0/0
  9004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9005 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9008 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9009 ;;Total ram usage:        1 bytes
  9010 ;; Hardware stack levels used:    1
  9011 ;; Hardware stack levels required when called:   14
  9012 ;; This function calls:
  9013 ;;		_I2C_SetBuffer
  9014 ;;		_I2C_SetDataCompleteCallback
  9015 ;; This function is called by:
  9016 ;;		_I2C_Write2ByteRegister
  9017 ;;		i1_I2C_DO_TX
  9018 ;;		i1_I2C_DO_RX
  9019 ;;		i1_I2C_DO_TX_EMPTY
  9020 ;;		i1_I2C_DO_ADDRESS_NACK
  9021 ;;		_I2C_DO_TX
  9022 ;;		_I2C_DO_RX
  9023 ;;		_I2C_DO_TX_EMPTY
  9024 ;;		_I2C_DO_ADDRESS_NACK
  9025 ;;		_I2C_DO_RX_EMPTY
  9026 ;; This function uses a non-reentrant model
  9027 ;;
  9028                           
  9029                           
  9030                           ;psect for function _wr2RegCompleteHandler
  9031  0695                     _wr2RegCompleteHandler:	
  9032                           
  9033                           ;Skip over the trampoline to the duplicate function for level 1
  9034  0695  1C7E               	btfss	126,0
  9035  0696  2E99               	goto	l3813
  9036  0697  3187  2F47         	ljmp	i1l2531
  9037  0699                     _wr2RegCompleteHandler$intlevel0:	
  9038  0699                     l3813:	
  9039                           ;incstack = 0
  9040 ;; hardware stack exceeded
  9041                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9042                           
  9043                           
  9044                           ;i2c_master_example.c: 165: I2C_SetBuffer(ptr,2);
  9045  0699  3002               	movlw	2
  9046  069A  0020               	movlb	0	; select bank0
  9047  069B  00D6               	movwf	I2C_SetBuffer@bufferSize
  9048  069C  3000               	movlw	0
  9049  069D  00D7               	movwf	I2C_SetBuffer@bufferSize+1
  9050  069E  0021               	movlb	1	; select bank1
  9051  069F  0833               	movf	wr2RegCompleteHandler@ptr^(0+128),w
  9052  06A0  3187  2775  3186   	fcall	_I2C_SetBuffer
  9053                           
  9054                           ;i2c_master_example.c: 166: I2C_SetDataCompleteCallback((0),(0));
  9055  06A3  3000               	movlw	0
  9056  06A4  0020               	movlb	0	; select bank0
  9057  06A5  00DB               	movwf	I2C_SetDataCompleteCallback@cb
  9058  06A6  00DC               	movwf	I2C_SetDataCompleteCallback@cb+1
  9059  06A7  01DD               	clrf	I2C_SetDataCompleteCallback@ptr
  9060  06A8  3187  2766         	fcall	_I2C_SetDataCompleteCallback
  9061                           
  9062                           ;i2c_master_example.c: 167: return I2C_CONTINUE;
  9063  06AA  3004               	movlw	4
  9064  06AB  0008               	return
  9065  06AC                     __end_of_wr2RegCompleteHandler:	
  9066                           
  9067                           	psect	text56
  9068  0766                     __ptext56:	
  9069 ;; *************** function _I2C_SetDataCompleteCallback *****************
  9070 ;; Defined at:
  9071 ;;		line 273 in file "mcc_generated_files/i2c_master.c"
  9072 ;; Parameters:    Size  Location     Type
  9073 ;;  cb              2   23[BANK0 ] PTR FTN(PTR void ,)enum 
  9074 ;;		 -> i1_wr1RegCompleteHandler(1), i1_rd2RegCompleteHandler(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), 
  9075 ;;		 -> wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), Absolute function(1), rd1RegCompleteHandler(1), 
  9076 ;;  ptr             1   25[BANK0 ] PTR void 
  9077 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  9078 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  9079 ;; Auto vars:     Size  Location     Type
  9080 ;;		None
  9081 ;; Return value:  Size  Location     Type
  9082 ;;                  1    wreg      void 
  9083 ;; Registers used:
  9084 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9085 ;; Tracked objects:
  9086 ;;		On entry : 0/0
  9087 ;;		On exit  : 0/0
  9088 ;;		Unchanged: 0/0
  9089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9090 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9092 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9093 ;;      Totals:         0       3       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9094 ;;Total ram usage:        4 bytes
  9095 ;; Hardware stack levels used:    1
  9096 ;; Hardware stack levels required when called:   13
  9097 ;; This function calls:
  9098 ;;		_I2C_SetCallback
  9099 ;; This function is called by:
  9100 ;;		_I2C_Write1ByteRegister
  9101 ;;		_rd1RegCompleteHandler
  9102 ;;		_rd2RegCompleteHandler
  9103 ;;		_wr1RegCompleteHandler
  9104 ;;		_wr2RegCompleteHandler
  9105 ;;		_rdBlkRegCompleteHandler
  9106 ;;		_I2C_Read1ByteRegister
  9107 ;;		_I2C_Write2ByteRegister
  9108 ;;		_I2C_ReadDataBlock
  9109 ;; This function uses a non-reentrant model
  9110 ;;
  9111                           
  9112                           
  9113                           ;psect for function _I2C_SetDataCompleteCallback
  9114  0766                     _I2C_SetDataCompleteCallback:	
  9115                           
  9116                           ;i2c_master.c: 275: I2C_SetCallback(I2C_DATA_COMPLETE, cb, ptr);
  9117                           
  9118                           ;incstack = 0
  9119                           ; Regs used in _I2C_SetDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  9120  0766  0020               	movlb	0	; select bank0
  9121  0767  085C               	movf	I2C_SetDataCompleteCallback@cb+1,w
  9122  0768  00D7               	movwf	I2C_SetCallback@cb+1
  9123  0769  085B               	movf	I2C_SetDataCompleteCallback@cb,w
  9124  076A  00D6               	movwf	I2C_SetCallback@cb
  9125  076B  085D               	movf	I2C_SetDataCompleteCallback@ptr,w
  9126  076C  0021               	movlb	1	; select bank1
  9127  076D  00B2               	movwf	??_I2C_SetDataCompleteCallback^(0+128)
  9128  076E  0832               	movf	??_I2C_SetDataCompleteCallback^(0+128),w
  9129  076F  0020               	movlb	0	; select bank0
  9130  0770  00D8               	movwf	I2C_SetCallback@ptr
  9131  0771  3000               	movlw	0
  9132  0772  3185  2515         	fcall	_I2C_SetCallback
  9133  0774  0008               	return
  9134  0775                     __end_of_I2C_SetDataCompleteCallback:	
  9135                           
  9136                           	psect	text57
  9137  0515                     __ptext57:	
  9138 ;; *************** function _I2C_SetCallback *****************
  9139 ;; Defined at:
  9140 ;;		line 298 in file "mcc_generated_files/i2c_master.c"
  9141 ;; Parameters:    Size  Location     Type
  9142 ;;  idx             1    wreg     enum E12121
  9143 ;;  cb              2   18[BANK0 ] PTR FTN(PTR void ,)enum 
  9144 ;;		 -> i1_wr1RegCompleteHandler(1), i1_rd2RegCompleteHandler(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), 
  9145 ;;		 -> wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), Absolute function(1), rd1RegCompleteHandler(1), 
  9146 ;;  ptr             1   20[BANK0 ] PTR void 
  9147 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  9148 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  9149 ;; Auto vars:     Size  Location     Type
  9150 ;;  idx             1   22[BANK0 ] enum E12121
  9151 ;; Return value:  Size  Location     Type
  9152 ;;                  1    wreg      void 
  9153 ;; Registers used:
  9154 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9155 ;; Tracked objects:
  9156 ;;		On entry : 0/0
  9157 ;;		On exit  : 0/0
  9158 ;;		Unchanged: 0/0
  9159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9160 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9161 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9162 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9163 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9164 ;;Total ram usage:        5 bytes
  9165 ;; Hardware stack levels used:    1
  9166 ;; Hardware stack levels required when called:   12
  9167 ;; This function calls:
  9168 ;;		Nothing
  9169 ;; This function is called by:
  9170 ;;		_I2C_SetDataCompleteCallback
  9171 ;;		_I2C_SetAddressNackCallback
  9172 ;;		_I2C_SetWriteCollisionCallback
  9173 ;;		_I2C_SetDataNackCallback
  9174 ;;		_I2C_SetTimeoutCallback
  9175 ;; This function uses a non-reentrant model
  9176 ;;
  9177                           
  9178                           
  9179                           ;psect for function _I2C_SetCallback
  9180  0515                     _I2C_SetCallback:	
  9181                           
  9182                           ;incstack = 0
  9183                           ; Regs used in _I2C_SetCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
  9184                           ;I2C_SetCallback@idx stored from wreg
  9185  0515  0020               	movlb	0	; select bank0
  9186  0516  00DA               	movwf	I2C_SetCallback@idx
  9187                           
  9188                           ;i2c_master.c: 300: if(cb)
  9189  0517  0856               	movf	I2C_SetCallback@cb,w
  9190  0518  0457               	iorwf	I2C_SetCallback@cb+1,w
  9191  0519  1903               	btfsc	3,2
  9192  051A  2D2C               	goto	l3681
  9193                           
  9194                           ;i2c_master.c: 301: {
  9195                           ;i2c_master.c: 302: I2C_Status.callbackTable[idx] = cb;
  9196  051B  355A               	lslf	I2C_SetCallback@idx,w
  9197  051C  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
  9198  051D  0086               	movwf	6
  9199  051E  0187               	clrf	7
  9200  051F  0856               	movf	I2C_SetCallback@cb,w
  9201  0520  3FC0               	movwi [0]fsr1
  9202  0521  0857               	movf	I2C_SetCallback@cb+1,w
  9203  0522  3FC1               	movwi [1]fsr1
  9204                           
  9205                           ;i2c_master.c: 303: I2C_Status.callbackPayload[idx] = ptr;
  9206  0523  0858               	movf	I2C_SetCallback@ptr,w
  9207  0524  00D9               	movwf	??_I2C_SetCallback
  9208  0525  085A               	movf	I2C_SetCallback@idx,w
  9209  0526  3E2C               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
  9210  0527  0086               	movwf	6
  9211  0528  0187               	clrf	7
  9212  0529  0859               	movf	??_I2C_SetCallback,w
  9213  052A  0081               	movwf	1
  9214                           
  9215                           ;i2c_master.c: 304: }
  9216  052B  0008               	return
  9217  052C                     l3681:	
  9218                           
  9219                           ;i2c_master.c: 305: else
  9220                           ;i2c_master.c: 306: {
  9221                           ;i2c_master.c: 307: I2C_Status.callbackTable[idx] = I2C_CallbackReturnStop;
  9222  052C  355A               	lslf	I2C_SetCallback@idx,w
  9223  052D  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
  9224  052E  0086               	movwf	6
  9225  052F  0187               	clrf	7
  9226  0530  302F               	movlw	low _I2C_CallbackReturnStop
  9227  0531  3FC0               	movwi [0]fsr1
  9228  0532  300F               	movlw	high _I2C_CallbackReturnStop
  9229  0533  3FC1               	movwi [1]fsr1
  9230                           
  9231                           ;i2c_master.c: 308: I2C_Status.callbackPayload[idx] = (0);
  9232  0534  085A               	movf	I2C_SetCallback@idx,w
  9233  0535  3E2C               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
  9234  0536  0086               	movwf	6
  9235  0537  0187               	clrf	7
  9236  0538  0181               	clrf	1
  9237  0539  0008               	return
  9238  053A                     __end_of_I2C_SetCallback:	
  9239                           
  9240                           	psect	text58
  9241  0775                     __ptext58:	
  9242 ;; *************** function _I2C_SetBuffer *****************
  9243 ;; Defined at:
  9244 ;;		line 263 in file "mcc_generated_files/i2c_master.c"
  9245 ;; Parameters:    Size  Location     Type
  9246 ;;  buffer          1    wreg     PTR void 
  9247 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
  9248 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
  9249 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
  9250 ;;  bufferSize      2   18[BANK0 ] unsigned int 
  9251 ;; Auto vars:     Size  Location     Type
  9252 ;;  buffer          1   21[BANK0 ] PTR void 
  9253 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
  9254 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
  9255 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
  9256 ;; Return value:  Size  Location     Type
  9257 ;;                  1    wreg      void 
  9258 ;; Registers used:
  9259 ;;		wreg
  9260 ;; Tracked objects:
  9261 ;;		On entry : 0/0
  9262 ;;		On exit  : 0/0
  9263 ;;		Unchanged: 0/0
  9264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9265 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9266 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9267 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9268 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9269 ;;Total ram usage:        4 bytes
  9270 ;; Hardware stack levels used:    1
  9271 ;; Hardware stack levels required when called:   12
  9272 ;; This function calls:
  9273 ;;		Nothing
  9274 ;; This function is called by:
  9275 ;;		_I2C_Write1ByteRegister
  9276 ;;		_rd1RegCompleteHandler
  9277 ;;		_rd2RegCompleteHandler
  9278 ;;		_wr1RegCompleteHandler
  9279 ;;		_wr2RegCompleteHandler
  9280 ;;		_rdBlkRegCompleteHandler
  9281 ;;		_I2C_Read1ByteRegister
  9282 ;;		_I2C_Write2ByteRegister
  9283 ;;		_I2C_WriteNBytes
  9284 ;;		_I2C_ReadNBytes
  9285 ;;		_I2C_ReadDataBlock
  9286 ;; This function uses a non-reentrant model
  9287 ;;
  9288                           
  9289                           
  9290                           ;psect for function _I2C_SetBuffer
  9291  0775                     _I2C_SetBuffer:	
  9292                           
  9293                           ;incstack = 0
  9294                           ; Regs used in _I2C_SetBuffer: [wreg]
  9295                           ;I2C_SetBuffer@buffer stored from wreg
  9296  0775  0020               	movlb	0	; select bank0
  9297  0776  00D9               	movwf	I2C_SetBuffer@buffer
  9298                           
  9299                           ;i2c_master.c: 265: if(I2C_Status.bufferFree)
  9300  0777  1DBC               	btfss	_I2C_Status+28,3
  9301  0778  0008               	return
  9302                           
  9303                           ;i2c_master.c: 266: {
  9304                           ;i2c_master.c: 267: I2C_Status.data_ptr = buffer;
  9305  0779  0859               	movf	I2C_SetBuffer@buffer,w
  9306  077A  00D8               	movwf	??_I2C_SetBuffer
  9307  077B  0858               	movf	??_I2C_SetBuffer,w
  9308  077C  00B7               	movwf	low ((_I2C_Status| 0+23))
  9309                           
  9310                           ;i2c_master.c: 268: I2C_Status.data_length = bufferSize;
  9311  077D  0857               	movf	I2C_SetBuffer@bufferSize+1,w
  9312  077E  00B9               	movwf	_I2C_Status+25
  9313  077F  0856               	movf	I2C_SetBuffer@bufferSize,w
  9314  0780  00B8               	movwf	_I2C_Status+24
  9315                           
  9316                           ;i2c_master.c: 269: I2C_Status.bufferFree = 0;
  9317  0781  11BC               	bcf	_I2C_Status+28,3
  9318  0782  0008               	return
  9319  0783                     __end_of_I2C_SetBuffer:	
  9320                           
  9321                           	psect	text59
  9322  0EBD                     __ptext59:	
  9323 ;; *************** function _I2C_MasterStop *****************
  9324 ;; Defined at:
  9325 ;;		line 593 in file "mcc_generated_files/i2c_master.c"
  9326 ;; Parameters:    Size  Location     Type
  9327 ;;		None
  9328 ;; Auto vars:     Size  Location     Type
  9329 ;;		None
  9330 ;; Return value:  Size  Location     Type
  9331 ;;                  1    wreg      void 
  9332 ;; Registers used:
  9333 ;;		None
  9334 ;; Tracked objects:
  9335 ;;		On entry : 0/0
  9336 ;;		On exit  : 0/0
  9337 ;;		Unchanged: 0/0
  9338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9343 ;;Total ram usage:        0 bytes
  9344 ;; Hardware stack levels used:    1
  9345 ;; Hardware stack levels required when called:   12
  9346 ;; This function calls:
  9347 ;;		Nothing
  9348 ;; This function is called by:
  9349 ;;		_I2C_DO_SEND_STOP
  9350 ;; This function uses a non-reentrant model
  9351 ;;
  9352                           
  9353                           
  9354                           ;psect for function _I2C_MasterStop
  9355  0EBD                     _I2C_MasterStop:	
  9356                           
  9357                           ;i2c_master.c: 595: SSP1CON2bits.PEN = 1;
  9358                           
  9359                           ;incstack = 0
  9360 ;; hardware stack exceeded
  9361                           ; Regs used in _I2C_MasterStop: []
  9362  0EBD  0024               	movlb	4	; select bank4
  9363  0EBE  1516               	bsf	22,2	;volatile
  9364  0EBF  0008               	return
  9365  0EC0                     __end_of_I2C_MasterStop:	
  9366                           
  9367                           	psect	text60
  9368  0EBA                     __ptext60:	
  9369 ;; *************** function _I2C_MasterEnableRestart *****************
  9370 ;; Defined at:
  9371 ;;		line 573 in file "mcc_generated_files/i2c_master.c"
  9372 ;; Parameters:    Size  Location     Type
  9373 ;;		None
  9374 ;; Auto vars:     Size  Location     Type
  9375 ;;		None
  9376 ;; Return value:  Size  Location     Type
  9377 ;;                  1    wreg      void 
  9378 ;; Registers used:
  9379 ;;		None
  9380 ;; Tracked objects:
  9381 ;;		On entry : 0/0
  9382 ;;		On exit  : 0/0
  9383 ;;		Unchanged: 0/0
  9384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9388 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9389 ;;Total ram usage:        0 bytes
  9390 ;; Hardware stack levels used:    1
  9391 ;; Hardware stack levels required when called:   12
  9392 ;; This function calls:
  9393 ;;		Nothing
  9394 ;; This function is called by:
  9395 ;;		_I2C_DO_SEND_RESTART_READ
  9396 ;;		_I2C_DO_SEND_RESTART_WRITE
  9397 ;;		_I2C_DO_SEND_RESTART
  9398 ;;		_I2C_DO_RX_EMPTY
  9399 ;; This function uses a non-reentrant model
  9400 ;;
  9401                           
  9402                           
  9403                           ;psect for function _I2C_MasterEnableRestart
  9404  0EBA                     _I2C_MasterEnableRestart:	
  9405                           
  9406                           ;i2c_master.c: 575: SSP1CON2bits.RSEN = 1;
  9407                           
  9408                           ;incstack = 0
  9409 ;; hardware stack exceeded
  9410                           ; Regs used in _I2C_MasterEnableRestart: []
  9411  0EBA  0024               	movlb	4	; select bank4
  9412  0EBB  1496               	bsf	22,1	;volatile
  9413  0EBC  0008               	return
  9414  0EBD                     __end_of_I2C_MasterEnableRestart:	
  9415                           
  9416                           	psect	text61
  9417  0EB7                     __ptext61:	
  9418 ;; *************** function _I2C_MasterStart *****************
  9419 ;; Defined at:
  9420 ;;		line 588 in file "mcc_generated_files/i2c_master.c"
  9421 ;; Parameters:    Size  Location     Type
  9422 ;;		None
  9423 ;; Auto vars:     Size  Location     Type
  9424 ;;		None
  9425 ;; Return value:  Size  Location     Type
  9426 ;;                  1    wreg      void 
  9427 ;; Registers used:
  9428 ;;		None
  9429 ;; Tracked objects:
  9430 ;;		On entry : 0/0
  9431 ;;		On exit  : 0/0
  9432 ;;		Unchanged: 0/0
  9433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9438 ;;Total ram usage:        0 bytes
  9439 ;; Hardware stack levels used:    1
  9440 ;; Hardware stack levels required when called:   12
  9441 ;; This function calls:
  9442 ;;		Nothing
  9443 ;; This function is called by:
  9444 ;;		_I2C_MasterOperation
  9445 ;; This function uses a non-reentrant model
  9446 ;;
  9447                           
  9448                           
  9449                           ;psect for function _I2C_MasterStart
  9450  0EB7                     _I2C_MasterStart:	
  9451                           
  9452                           ;i2c_master.c: 590: SSP1CON2bits.SEN = 1;
  9453                           
  9454                           ;incstack = 0
  9455                           ; Regs used in _I2C_MasterStart: []
  9456  0EB7  0024               	movlb	4	; select bank4
  9457  0EB8  1416               	bsf	22,0	;volatile
  9458  0EB9  0008               	return
  9459  0EBA                     __end_of_I2C_MasterStart:	
  9460                           
  9461                           	psect	text62
  9462  061E                     __ptext62:	
  9463 ;; *************** function _I2C_Close *****************
  9464 ;; Defined at:
  9465 ;;		line 209 in file "mcc_generated_files/i2c_master.c"
  9466 ;; Parameters:    Size  Location     Type
  9467 ;;		None
  9468 ;; Auto vars:     Size  Location     Type
  9469 ;;  returnValue     1   19[BANK0 ] enum E92
  9470 ;; Return value:  Size  Location     Type
  9471 ;;                  1    wreg      enum E92
  9472 ;; Registers used:
  9473 ;;		wreg, status,2, status,0, pclath, cstack
  9474 ;; Tracked objects:
  9475 ;;		On entry : 0/0
  9476 ;;		On exit  : 0/0
  9477 ;;		Unchanged: 0/0
  9478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9480 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9481 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9482 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9483 ;;Total ram usage:        2 bytes
  9484 ;; Hardware stack levels used:    1
  9485 ;; Hardware stack levels required when called:   13
  9486 ;; This function calls:
  9487 ;;		_I2C_MasterClearIrq
  9488 ;;		_I2C_MasterClose
  9489 ;;		_I2C_MasterDisableIrq
  9490 ;; This function is called by:
  9491 ;;		_I2C_Write1ByteRegister
  9492 ;;		_I2C_Read1ByteRegister
  9493 ;;		_I2C_Write2ByteRegister
  9494 ;;		_I2C_WriteNBytes
  9495 ;;		_I2C_ReadNBytes
  9496 ;;		_I2C_ReadDataBlock
  9497 ;; This function uses a non-reentrant model
  9498 ;;
  9499                           
  9500                           
  9501                           ;psect for function _I2C_Close
  9502  061E                     _I2C_Close:	
  9503                           
  9504                           ;i2c_master.c: 211: i2c_error_t returnValue = I2C_BUSY;
  9505                           
  9506                           ;incstack = 0
  9507                           ; Regs used in _I2C_Close: [wreg+status,2+status,0+pclath+cstack]
  9508  061E  0020               	movlb	0	; select bank0
  9509  061F  01D7               	clrf	I2C_Close@returnValue
  9510  0620  0AD7               	incf	I2C_Close@returnValue,f
  9511                           
  9512                           ;i2c_master.c: 212: if(!I2C_Status.busy)
  9513  0621  18BC               	btfsc	_I2C_Status+28,1
  9514  0622  2E35               	goto	l4211
  9515                           
  9516                           ;i2c_master.c: 213: {
  9517                           ;i2c_master.c: 214: I2C_Status.inUse = 0;
  9518  0623  113C               	bcf	_I2C_Status+28,2
  9519                           
  9520                           ;i2c_master.c: 215: I2C_Status.address = 0xff;
  9521  0624  30FF               	movlw	255
  9522  0625  00D6               	movwf	??_I2C_Close
  9523  0626  0856               	movf	??_I2C_Close,w
  9524  0627  00B6               	movwf	_I2C_Status+22
  9525                           
  9526                           ;i2c_master.c: 216: I2C_MasterClearIrq();
  9527  0628  318E  26AE  3186   	fcall	_I2C_MasterClearIrq
  9528                           
  9529                           ;i2c_master.c: 217: I2C_MasterDisableIrq();
  9530  062B  318E  26B4  3186   	fcall	_I2C_MasterDisableIrq
  9531                           
  9532                           ;i2c_master.c: 218: I2C_MasterClose();
  9533  062E  318E  26B1         	fcall	_I2C_MasterClose
  9534                           
  9535                           ;i2c_master.c: 219: returnValue = I2C_Status.error;
  9536  0630  0020               	movlb	0	; select bank0
  9537  0631  083B               	movf	_I2C_Status+27,w
  9538  0632  00D6               	movwf	??_I2C_Close
  9539  0633  0856               	movf	??_I2C_Close,w
  9540  0634  00D7               	movwf	I2C_Close@returnValue
  9541  0635                     l4211:	
  9542                           
  9543                           ;i2c_master.c: 220: }
  9544                           ;i2c_master.c: 221: return returnValue;
  9545  0635  0857               	movf	I2C_Close@returnValue,w
  9546  0636  0008               	return
  9547  0637                     __end_of_I2C_Close:	
  9548                           
  9549                           	psect	text63
  9550  0EB4                     __ptext63:	
  9551 ;; *************** function _I2C_MasterDisableIrq *****************
  9552 ;; Defined at:
  9553 ;;		line 635 in file "mcc_generated_files/i2c_master.c"
  9554 ;; Parameters:    Size  Location     Type
  9555 ;;		None
  9556 ;; Auto vars:     Size  Location     Type
  9557 ;;		None
  9558 ;; Return value:  Size  Location     Type
  9559 ;;                  1    wreg      void 
  9560 ;; Registers used:
  9561 ;;		None
  9562 ;; Tracked objects:
  9563 ;;		On entry : 0/0
  9564 ;;		On exit  : 0/0
  9565 ;;		Unchanged: 0/0
  9566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9571 ;;Total ram usage:        0 bytes
  9572 ;; Hardware stack levels used:    1
  9573 ;; Hardware stack levels required when called:   12
  9574 ;; This function calls:
  9575 ;;		Nothing
  9576 ;; This function is called by:
  9577 ;;		_I2C_Close
  9578 ;;		_I2C_SetTimeOut
  9579 ;; This function uses a non-reentrant model
  9580 ;;
  9581                           
  9582                           
  9583                           ;psect for function _I2C_MasterDisableIrq
  9584  0EB4                     _I2C_MasterDisableIrq:	
  9585                           
  9586                           ;i2c_master.c: 637: PIE1bits.SSP1IE = 0;
  9587                           
  9588                           ;incstack = 0
  9589                           ; Regs used in _I2C_MasterDisableIrq: []
  9590  0EB4  0021               	movlb	1	; select bank1
  9591  0EB5  1190               	bcf	16,3	;volatile
  9592  0EB6  0008               	return
  9593  0EB7                     __end_of_I2C_MasterDisableIrq:	
  9594                           
  9595                           	psect	text64
  9596  0EB1                     __ptext64:	
  9597 ;; *************** function _I2C_MasterClose *****************
  9598 ;; Defined at:
  9599 ;;		line 557 in file "mcc_generated_files/i2c_master.c"
  9600 ;; Parameters:    Size  Location     Type
  9601 ;;		None
  9602 ;; Auto vars:     Size  Location     Type
  9603 ;;		None
  9604 ;; Return value:  Size  Location     Type
  9605 ;;                  1    wreg      void 
  9606 ;; Registers used:
  9607 ;;		None
  9608 ;; Tracked objects:
  9609 ;;		On entry : 0/0
  9610 ;;		On exit  : 0/0
  9611 ;;		Unchanged: 0/0
  9612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9616 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9617 ;;Total ram usage:        0 bytes
  9618 ;; Hardware stack levels used:    1
  9619 ;; Hardware stack levels required when called:   12
  9620 ;; This function calls:
  9621 ;;		Nothing
  9622 ;; This function is called by:
  9623 ;;		_I2C_Close
  9624 ;; This function uses a non-reentrant model
  9625 ;;
  9626                           
  9627                           
  9628                           ;psect for function _I2C_MasterClose
  9629  0EB1                     _I2C_MasterClose:	
  9630                           
  9631                           ;i2c_master.c: 560: SSP1CON1bits.SSPEN = 0;
  9632                           
  9633                           ;incstack = 0
  9634                           ; Regs used in _I2C_MasterClose: []
  9635  0EB1  0024               	movlb	4	; select bank4
  9636  0EB2  1295               	bcf	21,5	;volatile
  9637  0EB3  0008               	return
  9638  0EB4                     __end_of_I2C_MasterClose:	
  9639                           
  9640                           	psect	text65
  9641  0EAE                     __ptext65:	
  9642 ;; *************** function _I2C_MasterClearIrq *****************
  9643 ;; Defined at:
  9644 ;;		line 640 in file "mcc_generated_files/i2c_master.c"
  9645 ;; Parameters:    Size  Location     Type
  9646 ;;		None
  9647 ;; Auto vars:     Size  Location     Type
  9648 ;;		None
  9649 ;; Return value:  Size  Location     Type
  9650 ;;                  1    wreg      void 
  9651 ;; Registers used:
  9652 ;;		None
  9653 ;; Tracked objects:
  9654 ;;		On entry : 0/0
  9655 ;;		On exit  : 0/0
  9656 ;;		Unchanged: 0/0
  9657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9662 ;;Total ram usage:        0 bytes
  9663 ;; Hardware stack levels used:    1
  9664 ;; Hardware stack levels required when called:   12
  9665 ;; This function calls:
  9666 ;;		Nothing
  9667 ;; This function is called by:
  9668 ;;		_I2C_Open
  9669 ;;		_I2C_Close
  9670 ;;		_I2C_MasterFsm
  9671 ;; This function uses a non-reentrant model
  9672 ;;
  9673                           
  9674                           
  9675                           ;psect for function _I2C_MasterClearIrq
  9676  0EAE                     _I2C_MasterClearIrq:	
  9677                           
  9678                           ;i2c_master.c: 642: PIR1bits.SSP1IF = 0;
  9679                           
  9680                           ;incstack = 0
  9681                           ; Regs used in _I2C_MasterClearIrq: []
  9682  0EAE  0020               	movlb	0	; select bank0
  9683  0EAF  1190               	bcf	16,3	;volatile
  9684  0EB0  0008               	return
  9685  0EB1                     __end_of_I2C_MasterClearIrq:	
  9686                           
  9687                           	psect	intentry
  9688  0004                     __pintentry:	
  9689 ;; *************** function _INTERRUPT_InterruptManager *****************
  9690 ;; Defined at:
  9691 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  9692 ;; Parameters:    Size  Location     Type
  9693 ;;		None
  9694 ;; Auto vars:     Size  Location     Type
  9695 ;;		None
  9696 ;; Return value:  Size  Location     Type
  9697 ;;                  1    wreg      void 
  9698 ;; Registers used:
  9699 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9700 ;; Tracked objects:
  9701 ;;		On entry : 0/0
  9702 ;;		On exit  : 0/0
  9703 ;;		Unchanged: 0/0
  9704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9707 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9708 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9709 ;;Total ram usage:        1 bytes
  9710 ;; Hardware stack levels used:    1
  9711 ;; Hardware stack levels required when called:   11
  9712 ;; This function calls:
  9713 ;;		Absolute function
  9714 ;;		_EUSART_Receive_ISR
  9715 ;;		_MyUART_ISR
  9716 ;;		_TMR2_ISR
  9717 ;; This function is called by:
  9718 ;;		Interrupt level 1
  9719 ;; This function uses a non-reentrant model
  9720 ;;
  9721                           
  9722  0004                     _INTERRUPT_InterruptManager:	
  9723                           
  9724                           ;incstack = 0
  9725 ;; hardware stack exceeded
  9726  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9727                           
  9728                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9729  0005  3180               	pagesel	$
  9730  0006  0020               	movlb	0	; select bank0
  9731  0007  087F               	movf	127,w
  9732  0008  00D5               	movwf	??_INTERRUPT_InterruptManager
  9733                           
  9734                           ;interrupt_manager.c: 55: if(INTCONbits.PEIE == 1)
  9735  0009  1F0B               	btfss	11,6	;volatile
  9736  000A  2820               	goto	i1l123
  9737                           
  9738                           ;interrupt_manager.c: 56: {
  9739                           ;interrupt_manager.c: 57: if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
  9740  000B  0021               	movlb	1	; select bank1
  9741  000C  1E90               	btfss	16,5	;volatile
  9742  000D  2818               	goto	i1l118
  9743  000E  0020               	movlb	0	; select bank0
  9744  000F  1E90               	btfss	16,5	;volatile
  9745  0010  2818               	goto	i1l118
  9746                           
  9747                           ;interrupt_manager.c: 58: {
  9748                           ;interrupt_manager.c: 59: EUSART_RxDefaultInterruptHandler();
  9749  0011  0021               	movlb	1	; select bank1
  9750  0012  084C               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
  9751  0013  008A               	movwf	10
  9752  0014  084B               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
  9753  0015  000A               	callw
  9754  0016  3180               	pagesel	$
  9755                           
  9756                           ;interrupt_manager.c: 60: }
  9757  0017  2820               	goto	i1l123
  9758  0018                     i1l118:	
  9759                           
  9760                           ;interrupt_manager.c: 61: else if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
  9761  0018  0021               	movlb	1	; select bank1
  9762  0019  1C90               	btfss	16,1	;volatile
  9763  001A  2820               	goto	i1l123
  9764  001B  0020               	movlb	0	; select bank0
  9765  001C  1C90               	btfss	16,1	;volatile
  9766  001D  2820               	goto	i1l123
  9767                           
  9768                           ;interrupt_manager.c: 62: {
  9769                           ;interrupt_manager.c: 63: TMR2_ISR();
  9770  001E  3187  2791         	fcall	_TMR2_ISR
  9771  0020                     i1l123:	
  9772                           ;interrupt_manager.c: 70: else
  9773                           ;interrupt_manager.c: 71: {
  9774                           
  9775                           ;interrupt_manager.c: 68: }
  9776                           ;interrupt_manager.c: 69: }
  9777                           
  9778                           ;interrupt_manager.c: 65: else
  9779                           ;interrupt_manager.c: 66: {
  9780                           
  9781                           ;interrupt_manager.c: 64: }
  9782                           
  9783  0020  0020               	movlb	0	; select bank0
  9784  0021  0855               	movf	??_INTERRUPT_InterruptManager,w
  9785  0022  00FF               	movwf	127
  9786  0023  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9787  0024  0009               	retfie
  9788  0025                     __end_of_INTERRUPT_InterruptManager:	
  9789                           
  9790                           	psect	text67
  9791  0791                     __ptext67:	
  9792 ;; *************** function _TMR2_ISR *****************
  9793 ;; Defined at:
  9794 ;;		line 165 in file "mcc_generated_files/tmr2.c"
  9795 ;; Parameters:    Size  Location     Type
  9796 ;;		None
  9797 ;; Auto vars:     Size  Location     Type
  9798 ;;		None
  9799 ;; Return value:  Size  Location     Type
  9800 ;;                  1    wreg      void 
  9801 ;; Registers used:
  9802 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9803 ;; Tracked objects:
  9804 ;;		On entry : 0/0
  9805 ;;		On exit  : 0/0
  9806 ;;		Unchanged: 0/0
  9807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9812 ;;Total ram usage:        0 bytes
  9813 ;; Hardware stack levels used:    1
  9814 ;; Hardware stack levels required when called:   10
  9815 ;; This function calls:
  9816 ;;		Absolute function
  9817 ;;		_MyTimer2ISR
  9818 ;;		_TMR2_DefaultInterruptHandler
  9819 ;; This function is called by:
  9820 ;;		_INTERRUPT_InterruptManager
  9821 ;; This function uses a non-reentrant model
  9822 ;;
  9823                           
  9824                           
  9825                           ;psect for function _TMR2_ISR
  9826  0791                     _TMR2_ISR:	
  9827                           
  9828                           ;tmr2.c: 169: PIR1bits.TMR2IF = 0;
  9829                           
  9830                           ;incstack = 0
  9831 ;; hardware stack exceeded
  9832                           ; Regs used in _TMR2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9833  0791  0020               	movlb	0	; select bank0
  9834  0792  1090               	bcf	16,1	;volatile
  9835                           
  9836                           ;tmr2.c: 171: if(TMR2_InterruptHandler)
  9837  0793  0021               	movlb	1	; select bank1
  9838  0794  0843               	movf	_TMR2_InterruptHandler^(0+128),w
  9839  0795  0444               	iorwf	(_TMR2_InterruptHandler+1)^(0+128),w
  9840  0796  1903               	btfsc	3,2
  9841  0797  0008               	return
  9842                           
  9843                           ;tmr2.c: 172: {
  9844                           ;tmr2.c: 173: TMR2_InterruptHandler();
  9845  0798  0844               	movf	(_TMR2_InterruptHandler+1)^(0+128),w
  9846  0799  008A               	movwf	10
  9847  079A  0843               	movf	_TMR2_InterruptHandler^(0+128),w
  9848  079B  000A               	callw
  9849  079C  3187               	pagesel	$
  9850  079D  0008               	return
  9851  079E                     __end_of_TMR2_ISR:	
  9852                           
  9853                           	psect	text68
  9854  00CA                     __ptext68:	
  9855 ;; *************** function _MyTimer2ISR *****************
  9856 ;; Defined at:
  9857 ;;		line 54 in file "main.c"
  9858 ;; Parameters:    Size  Location     Type
  9859 ;;		None
  9860 ;; Auto vars:     Size  Location     Type
  9861 ;;  g               2   15[BANK0 ] unsigned int 
  9862 ;; Return value:  Size  Location     Type
  9863 ;;                  1    wreg      void 
  9864 ;; Registers used:
  9865 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9866 ;; Tracked objects:
  9867 ;;		On entry : 0/0
  9868 ;;		On exit  : 0/0
  9869 ;;		Unchanged: 0/0
  9870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9872 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9873 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9874 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9875 ;;Total ram usage:        3 bytes
  9876 ;; Hardware stack levels used:    1
  9877 ;; Hardware stack levels required when called:    9
  9878 ;; This function calls:
  9879 ;;		_EUSART_Write
  9880 ;;		_I2C_Read2ByteRegister
  9881 ;;		_PWM3_LoadDutyValue
  9882 ;;		___lwdiv
  9883 ;;		i1_I2C_Write1ByteRegister
  9884 ;; This function is called by:
  9885 ;;		_main
  9886 ;;		_TMR2_ISR
  9887 ;; This function uses a non-reentrant model
  9888 ;;
  9889                           
  9890                           
  9891                           ;psect for function _MyTimer2ISR
  9892  00CA                     _MyTimer2ISR:	
  9893                           
  9894                           ;main.c: 55: uint16_t g = I2C_Read2ByteRegister(0xE8, 0x48-1);
  9895                           
  9896                           ;incstack = 0
  9897 ;; hardware stack exceeded
  9898                           ; Regs used in _MyTimer2ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9899  00CA  3047               	movlw	71
  9900  00CB  0020               	movlb	0	; select bank0
  9901  00CC  00D2               	movwf	??_MyTimer2ISR
  9902  00CD  0852               	movf	??_MyTimer2ISR,w
  9903  00CE  00C9               	movwf	I2C_Read2ByteRegister@reg
  9904  00CF  30E8               	movlw	232
  9905  00D0  3182  224A  3180   	fcall	_I2C_Read2ByteRegister
  9906  00D3  0020               	movlb	0	; select bank0
  9907  00D4  084A               	movf	?_I2C_Read2ByteRegister+1,w
  9908  00D5  00D4               	movwf	MyTimer2ISR@g+1
  9909  00D6  0849               	movf	?_I2C_Read2ByteRegister,w
  9910  00D7  00D3               	movwf	MyTimer2ISR@g
  9911                           
  9912                           ;main.c: 58: PWM3_LoadDutyValue((uint8_t)(Angle/3)+31);
  9913  00D8  3003               	movlw	3
  9914  00D9  00F0               	movwf	___lwdiv@divisor
  9915  00DA  3000               	movlw	0
  9916  00DB  00F1               	movwf	___lwdiv@divisor+1
  9917  00DC  0021               	movlb	1	; select bank1
  9918  00DD  084E               	movf	(_Angle+1)^(0+128),w
  9919  00DE  00F3               	movwf	___lwdiv@dividend+1
  9920  00DF  084D               	movf	_Angle^(0+128),w
  9921  00E0  00F2               	movwf	___lwdiv@dividend
  9922  00E1  3183  23A6  3180   	fcall	___lwdiv
  9923  00E4  0870               	movf	?___lwdiv,w
  9924  00E5  3E1F               	addlw	31
  9925  00E6  00F8               	movwf	PWM3_LoadDutyValue@dutyValue
  9926  00E7  3000               	movlw	0
  9927  00E8  1803               	skipnc
  9928  00E9  3001               	movlw	1
  9929  00EA  00F9               	movwf	PWM3_LoadDutyValue@dutyValue+1
  9930  00EB  3186  26DA  3180   	fcall	_PWM3_LoadDutyValue
  9931                           
  9932                           ;main.c: 59: if(PORTAbits.RA4) {
  9933  00EE  0020               	movlb	0	; select bank0
  9934  00EF  1E0C               	btfss	12,4	;volatile
  9935  00F0  2908               	goto	i1l5747
  9936                           
  9937                           ;main.c: 60: EUSART_Write('B');
  9938  00F1  3042               	movlw	66
  9939  00F2  318F  275B  3180   	fcall	_EUSART_Write
  9940                           
  9941                           ;main.c: 61: EUSART_Write('1');
  9942  00F5  3031               	movlw	49
  9943  00F6  318F  275B  3180   	fcall	_EUSART_Write
  9944                           
  9945                           ;main.c: 62: EUSART_Write('s');
  9946  00F9  3073               	movlw	115
  9947  00FA  318F  275B  3180   	fcall	_EUSART_Write
  9948                           
  9949                           ;main.c: 63: I2C_Write1ByteRegister(0x80, 0x01, 0x05);
  9950  00FD  0020               	movlb	0	; select bank0
  9951  00FE  01C9               	clrf	i1I2C_Write1ByteRegister@reg
  9952  00FF  0AC9               	incf	i1I2C_Write1ByteRegister@reg,f
  9953  0100  3005               	movlw	5
  9954  0101  00D2               	movwf	??_MyTimer2ISR
  9955  0102  0852               	movf	??_MyTimer2ISR,w
  9956  0103  00CA               	movwf	i1I2C_Write1ByteRegister@data
  9957  0104  3080               	movlw	128
  9958  0105  3184  2440         	fcall	i1_I2C_Write1ByteRegister
  9959                           
  9960                           ;main.c: 64: } else {
  9961  0107  0008               	return
  9962  0108                     i1l5747:	
  9963                           
  9964                           ;main.c: 65: EUSART_Write('B');
  9965  0108  3042               	movlw	66
  9966  0109  318F  275B  3180   	fcall	_EUSART_Write
  9967                           
  9968                           ;main.c: 66: EUSART_Write('0');
  9969  010C  3030               	movlw	48
  9970  010D  318F  275B  3180   	fcall	_EUSART_Write
  9971                           
  9972                           ;main.c: 67: EUSART_Write('r');
  9973  0110  3072               	movlw	114
  9974  0111  318F  275B  3180   	fcall	_EUSART_Write
  9975                           
  9976                           ;main.c: 68: I2C_Write1ByteRegister(0x80, 0x01, 0x00);
  9977  0114  0020               	movlb	0	; select bank0
  9978  0115  01C9               	clrf	i1I2C_Write1ByteRegister@reg
  9979  0116  0AC9               	incf	i1I2C_Write1ByteRegister@reg,f
  9980  0117  01CA               	clrf	i1I2C_Write1ByteRegister@data
  9981  0118  3080               	movlw	128
  9982  0119  3184  2440         	fcall	i1_I2C_Write1ByteRegister
  9983  011B  0008               	return
  9984  011C                     __end_of_MyTimer2ISR:	
  9985                           
  9986                           	psect	text69
  9987  0E8B                     __ptext69:	
  9988 ;; *************** function _TMR2_DefaultInterruptHandler *****************
  9989 ;; Defined at:
  9990 ;;		line 182 in file "mcc_generated_files/tmr2.c"
  9991 ;; Parameters:    Size  Location     Type
  9992 ;;		None
  9993 ;; Auto vars:     Size  Location     Type
  9994 ;;		None
  9995 ;; Return value:  Size  Location     Type
  9996 ;;                  1    wreg      void 
  9997 ;; Registers used:
  9998 ;;		None
  9999 ;; Tracked objects:
 10000 ;;		On entry : 0/0
 10001 ;;		On exit  : 0/0
 10002 ;;		Unchanged: 0/0
 10003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10007 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10008 ;;Total ram usage:        0 bytes
 10009 ;; Hardware stack levels used:    1
 10010 ;; This function calls:
 10011 ;;		Nothing
 10012 ;; This function is called by:
 10013 ;;		_TMR2_Initialize
 10014 ;;		_TMR2_ISR
 10015 ;; This function uses a non-reentrant model
 10016 ;;
 10017                           
 10018                           
 10019                           ;psect for function _TMR2_DefaultInterruptHandler
 10020  0E8B                     _TMR2_DefaultInterruptHandler:	
 10021                           
 10022                           ;incstack = 0
 10023                           ; Regs used in _TMR2_DefaultInterruptHandler: []
 10024  0E8B  0008               	return
 10025  0E8C                     __end_of_TMR2_DefaultInterruptHandler:	
 10026                           
 10027                           	psect	text70
 10028  0440                     __ptext70:	
 10029 ;; *************** function i1_I2C_Write1ByteRegister *****************
 10030 ;; Defined at:
 10031 ;;		line 91 in file "mcc_generated_files/examples/i2c_master_example.c"
 10032 ;; Parameters:    Size  Location     Type
 10033 ;;  address         1    wreg     unsigned char 
 10034 ;;  reg             1    5[BANK0 ] unsigned char 
 10035 ;;  data            1    6[BANK0 ] unsigned char 
 10036 ;; Auto vars:     Size  Location     Type
 10037 ;;  address         1    8[BANK0 ] unsigned char 
 10038 ;; Return value:  Size  Location     Type
 10039 ;;                  1    wreg      void 
 10040 ;; Registers used:
 10041 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10042 ;; Tracked objects:
 10043 ;;		On entry : 0/0
 10044 ;;		On exit  : 0/0
 10045 ;;		Unchanged: 0/0
 10046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10047 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10048 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10049 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10050 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10051 ;;Total ram usage:        4 bytes
 10052 ;; Hardware stack levels used:    1
 10053 ;; Hardware stack levels required when called:    8
 10054 ;; This function calls:
 10055 ;;		i1_I2C_Close
 10056 ;;		i1_I2C_MasterWrite
 10057 ;;		i1_I2C_Open
 10058 ;;		i1_I2C_SetAddressNackCallback
 10059 ;;		i1_I2C_SetBuffer
 10060 ;;		i1_I2C_SetDataCompleteCallback
 10061 ;; This function is called by:
 10062 ;;		_MyTimer2ISR
 10063 ;; This function uses a non-reentrant model
 10064 ;;
 10065                           
 10066                           
 10067                           ;psect for function i1_I2C_Write1ByteRegister
 10068  0440                     i1_I2C_Write1ByteRegister:	
 10069                           
 10070                           ;incstack = 0
 10071 ;; hardware stack exceeded
 10072                           ; Regs used in i1_I2C_Write1ByteRegister: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10073                           ;i1I2C_Write1ByteRegister@address stored from wreg
 10074  0440  0020               	movlb	0	; select bank0
 10075  0441  00CC               	movwf	i1I2C_Write1ByteRegister@address
 10076  0442                     i1l5699:	
 10077                           ;i2c_master_example.c: 93: while(!I2C_Open(address));
 10078                           
 10079  0442  0020               	movlb	0	; select bank0
 10080  0443  084C               	movf	i1I2C_Write1ByteRegister@address,w
 10081  0444  3183  2339  3184   	fcall	i1_I2C_Open
 10082  0447  3A00               	xorlw	0
 10083  0448  1903               	skipnz
 10084  0449  2C42               	goto	i1l5699
 10085                           
 10086                           ;i2c_master_example.c: 94: I2C_SetDataCompleteCallback(wr1RegCompleteHandler,&data);
 10087  044A  3050               	movlw	low _wr1RegCompleteHandler
 10088  044B  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 10089  044C  3006               	movlw	high _wr1RegCompleteHandler
 10090  044D  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 10091  044E  304A               	movlw	(low (i1I2C_Write1ByteRegister@data| 0))& (0+255)
 10092  044F  0020               	movlb	0	; select bank0
 10093  0450  00CB               	movwf	??i1_I2C_Write1ByteRegister
 10094  0451  084B               	movf	??i1_I2C_Write1ByteRegister,w
 10095  0452  00F7               	movwf	i1I2C_SetDataCompleteCallback@ptr
 10096  0453  3187  27CE  3184   	fcall	i1_I2C_SetDataCompleteCallback
 10097                           
 10098                           ;i2c_master_example.c: 95: I2C_SetBuffer(&reg,1);
 10099  0456  3001               	movlw	1
 10100  0457  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 10101  0458  3000               	movlw	0
 10102  0459  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 10103  045A  3049               	movlw	(low (i1I2C_Write1ByteRegister@reg| 0))& (0+255)
 10104  045B  3187  2783  3184   	fcall	i1_I2C_SetBuffer
 10105                           
 10106                           ;i2c_master_example.c: 96: I2C_SetAddressNackCallback((0),(0));
 10107  045E  3000               	movlw	0
 10108  045F  00F5               	movwf	i1I2C_SetAddressNackCallback@cb
 10109  0460  00F6               	movwf	i1I2C_SetAddressNackCallback@cb+1
 10110  0461  01F7               	clrf	i1I2C_SetAddressNackCallback@ptr
 10111  0462  3187  27B6  3184   	fcall	i1_I2C_SetAddressNackCallback
 10112                           
 10113                           ;i2c_master_example.c: 97: I2C_MasterWrite();
 10114  0465  318E  26FB  3184   	fcall	i1_I2C_MasterWrite
 10115  0468                     i1l5709:	
 10116                           ;i2c_master_example.c: 98: while(I2C_BUSY == I2C_Close());
 10117                           
 10118  0468  3186  2637  3184   	fcall	i1_I2C_Close
 10119  046B  3A01               	xorlw	1
 10120  046C  1D03               	btfss	3,2
 10121  046D  0008               	return
 10122  046E  2C68               	goto	i1l5709
 10123  046F                     __end_ofi1_I2C_Write1ByteRegister:	
 10124                           
 10125                           	psect	text71
 10126  03A6                     __ptext71:	
 10127 ;; *************** function ___lwdiv *****************
 10128 ;; Defined at:
 10129 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 10130 ;; Parameters:    Size  Location     Type
 10131 ;;  divisor         2    0[COMMON] unsigned int 
 10132 ;;  dividend        2    2[COMMON] unsigned int 
 10133 ;; Auto vars:     Size  Location     Type
 10134 ;;  quotient        2    5[COMMON] unsigned int 
 10135 ;;  counter         1    7[COMMON] unsigned char 
 10136 ;; Return value:  Size  Location     Type
 10137 ;;                  2    0[COMMON] unsigned int 
 10138 ;; Registers used:
 10139 ;;		wreg, status,2, status,0
 10140 ;; Tracked objects:
 10141 ;;		On entry : 0/0
 10142 ;;		On exit  : 0/0
 10143 ;;		Unchanged: 0/0
 10144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10145 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10146 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10147 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10148 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10149 ;;Total ram usage:        8 bytes
 10150 ;; Hardware stack levels used:    1
 10151 ;; This function calls:
 10152 ;;		Nothing
 10153 ;; This function is called by:
 10154 ;;		_MyTimer2ISR
 10155 ;; This function uses a non-reentrant model
 10156 ;;
 10157                           
 10158                           
 10159                           ;psect for function ___lwdiv
 10160  03A6                     ___lwdiv:	
 10161                           
 10162                           ;incstack = 0
 10163                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 10164  03A6  01F5               	clrf	___lwdiv@quotient
 10165  03A7  01F6               	clrf	___lwdiv@quotient+1
 10166  03A8  0870               	movf	___lwdiv@divisor,w
 10167  03A9  0471               	iorwf	___lwdiv@divisor+1,w
 10168  03AA  1903               	btfsc	3,2
 10169  03AB  2BD5               	goto	i1l3235
 10170  03AC  01F7               	clrf	___lwdiv@counter
 10171  03AD  0AF7               	incf	___lwdiv@counter,f
 10172  03AE                     i1l3223:	
 10173  03AE  1BF1               	btfsc	___lwdiv@divisor+1,7
 10174  03AF  2BBA               	goto	i1l3225
 10175  03B0  3001               	movlw	1
 10176  03B1                     u112_25:	
 10177  03B1  35F0               	lslf	___lwdiv@divisor,f
 10178  03B2  0DF1               	rlf	___lwdiv@divisor+1,f
 10179  03B3  0B89               	decfsz	9,f
 10180  03B4  2BB1               	goto	u112_25
 10181  03B5  3001               	movlw	1
 10182  03B6  00F4               	movwf	??___lwdiv
 10183  03B7  0874               	movf	??___lwdiv,w
 10184  03B8  07F7               	addwf	___lwdiv@counter,f
 10185  03B9  2BAE               	goto	i1l3223
 10186  03BA                     i1l3225:	
 10187  03BA  3001               	movlw	1
 10188  03BB                     u114_25:	
 10189  03BB  35F5               	lslf	___lwdiv@quotient,f
 10190  03BC  0DF6               	rlf	___lwdiv@quotient+1,f
 10191  03BD  0B89               	decfsz	9,f
 10192  03BE  2BBB               	goto	u114_25
 10193  03BF  0871               	movf	___lwdiv@divisor+1,w
 10194  03C0  0273               	subwf	___lwdiv@dividend+1,w
 10195  03C1  1D03               	skipz
 10196  03C2  2BC5               	goto	u115_25
 10197  03C3  0870               	movf	___lwdiv@divisor,w
 10198  03C4  0272               	subwf	___lwdiv@dividend,w
 10199  03C5                     u115_25:	
 10200  03C5  1C03               	skipc
 10201  03C6  2BCC               	goto	i1l3231
 10202  03C7  0870               	movf	___lwdiv@divisor,w
 10203  03C8  02F2               	subwf	___lwdiv@dividend,f
 10204  03C9  0871               	movf	___lwdiv@divisor+1,w
 10205  03CA  3BF3               	subwfb	___lwdiv@dividend+1,f
 10206  03CB  1475               	bsf	___lwdiv@quotient,0
 10207  03CC                     i1l3231:	
 10208  03CC  3001               	movlw	1
 10209  03CD                     u116_25:	
 10210  03CD  36F1               	lsrf	___lwdiv@divisor+1,f
 10211  03CE  0CF0               	rrf	___lwdiv@divisor,f
 10212  03CF  0B89               	decfsz	9,f
 10213  03D0  2BCD               	goto	u116_25
 10214  03D1  3001               	movlw	1
 10215  03D2  02F7               	subwf	___lwdiv@counter,f
 10216  03D3  1D03               	btfss	3,2
 10217  03D4  2BBA               	goto	i1l3225
 10218  03D5                     i1l3235:	
 10219  03D5  0876               	movf	___lwdiv@quotient+1,w
 10220  03D6  00F1               	movwf	?___lwdiv+1
 10221  03D7  0875               	movf	___lwdiv@quotient,w
 10222  03D8  00F0               	movwf	?___lwdiv
 10223  03D9  0008               	return
 10224  03DA                     __end_of___lwdiv:	
 10225                           
 10226                           	psect	text72
 10227  06DA                     __ptext72:	
 10228 ;; *************** function _PWM3_LoadDutyValue *****************
 10229 ;; Defined at:
 10230 ;;		line 74 in file "mcc_generated_files/pwm3.c"
 10231 ;; Parameters:    Size  Location     Type
 10232 ;;  dutyValue       2    8[COMMON] unsigned int 
 10233 ;; Auto vars:     Size  Location     Type
 10234 ;;		None
 10235 ;; Return value:  Size  Location     Type
 10236 ;;                  1    wreg      void 
 10237 ;; Registers used:
 10238 ;;		wreg, status,2, status,0
 10239 ;; Tracked objects:
 10240 ;;		On entry : 0/0
 10241 ;;		On exit  : 0/0
 10242 ;;		Unchanged: 0/0
 10243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10244 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10246 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10247 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10248 ;;Total ram usage:        4 bytes
 10249 ;; Hardware stack levels used:    1
 10250 ;; This function calls:
 10251 ;;		Nothing
 10252 ;; This function is called by:
 10253 ;;		_MyTimer2ISR
 10254 ;; This function uses a non-reentrant model
 10255 ;;
 10256                           
 10257                           
 10258                           ;psect for function _PWM3_LoadDutyValue
 10259  06DA                     _PWM3_LoadDutyValue:	
 10260                           
 10261                           ;pwm3.c: 77: PWM3DCH = (dutyValue & 0x03FC)>>2;
 10262                           
 10263                           ;incstack = 0
 10264                           ; Regs used in _PWM3_LoadDutyValue: [wreg+status,2+status,0]
 10265  06DA  0879               	movf	PWM3_LoadDutyValue@dutyValue+1,w
 10266  06DB  00FB               	movwf	??_PWM3_LoadDutyValue+1
 10267  06DC  0878               	movf	PWM3_LoadDutyValue@dutyValue,w
 10268  06DD  00FA               	movwf	??_PWM3_LoadDutyValue
 10269  06DE  36FB               	lsrf	??_PWM3_LoadDutyValue+1,f
 10270  06DF  0CFA               	rrf	??_PWM3_LoadDutyValue,f
 10271  06E0  36FB               	lsrf	??_PWM3_LoadDutyValue+1,f
 10272  06E1  0CFA               	rrf	??_PWM3_LoadDutyValue,f
 10273  06E2  087A               	movf	??_PWM3_LoadDutyValue,w
 10274  06E3  002C               	movlb	12	; select bank12
 10275  06E4  0098               	movwf	24	;volatile
 10276                           
 10277                           ;pwm3.c: 80: PWM3DCL = (dutyValue & 0x0003)<<6;
 10278  06E5  0878               	movf	PWM3_LoadDutyValue@dutyValue,w
 10279  06E6  3903               	andlw	3
 10280  06E7  00FA               	movwf	??_PWM3_LoadDutyValue
 10281  06E8  3005               	movlw	5
 10282  06E9                     u110_25:	
 10283  06E9  35FA               	lslf	??_PWM3_LoadDutyValue,f
 10284  06EA  3EFF               	addlw	-1
 10285  06EB  1D03               	skipz
 10286  06EC  2EE9               	goto	u110_25
 10287  06ED  357A               	lslf	??_PWM3_LoadDutyValue,w
 10288  06EE  0097               	movwf	23	;volatile
 10289  06EF  0008               	return
 10290  06F0                     __end_of_PWM3_LoadDutyValue:	
 10291                           
 10292                           	psect	text73
 10293  024A                     __ptext73:	
 10294 ;; *************** function _I2C_Read2ByteRegister *****************
 10295 ;; Defined at:
 10296 ;;		line 77 in file "mcc_generated_files/examples/i2c_master_example.c"
 10297 ;; Parameters:    Size  Location     Type
 10298 ;;  address         1    wreg     unsigned char 
 10299 ;;  reg             1    5[BANK0 ] unsigned char 
 10300 ;; Auto vars:     Size  Location     Type
 10301 ;;  address         1   11[BANK0 ] unsigned char 
 10302 ;;  returnValue     2   12[BANK0 ] unsigned int 
 10303 ;; Return value:  Size  Location     Type
 10304 ;;                  2    5[BANK0 ] unsigned int 
 10305 ;; Registers used:
 10306 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10307 ;; Tracked objects:
 10308 ;;		On entry : 0/0
 10309 ;;		On exit  : 0/0
 10310 ;;		Unchanged: 0/0
 10311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10312 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10313 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10314 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10315 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10316 ;;Total ram usage:        9 bytes
 10317 ;; Hardware stack levels used:    1
 10318 ;; Hardware stack levels required when called:    8
 10319 ;; This function calls:
 10320 ;;		i1_I2C_Close
 10321 ;;		i1_I2C_MasterWrite
 10322 ;;		i1_I2C_Open
 10323 ;;		i1_I2C_SetAddressNackCallback
 10324 ;;		i1_I2C_SetBuffer
 10325 ;;		i1_I2C_SetDataCompleteCallback
 10326 ;; This function is called by:
 10327 ;;		_MyTimer2ISR
 10328 ;; This function uses a non-reentrant model
 10329 ;;
 10330                           
 10331                           
 10332                           ;psect for function _I2C_Read2ByteRegister
 10333  024A                     _I2C_Read2ByteRegister:	
 10334                           
 10335                           ;incstack = 0
 10336 ;; hardware stack exceeded
 10337                           ; Regs used in _I2C_Read2ByteRegister: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10338                           ;I2C_Read2ByteRegister@address stored from wreg
 10339  024A  0020               	movlb	0	; select bank0
 10340  024B  00CF               	movwf	I2C_Read2ByteRegister@address
 10341                           
 10342                           ;i2c_master_example.c: 79: uint16_t returnValue =0x00;
 10343  024C  01D0               	clrf	I2C_Read2ByteRegister@returnValue
 10344  024D  01D1               	clrf	I2C_Read2ByteRegister@returnValue+1
 10345  024E                     i1l5661:	
 10346                           ;i2c_master_example.c: 81: while(!I2C_Open(address));
 10347                           
 10348  024E  0020               	movlb	0	; select bank0
 10349  024F  084F               	movf	I2C_Read2ByteRegister@address,w
 10350  0250  3183  2339  3182   	fcall	i1_I2C_Open
 10351  0253  3A00               	xorlw	0
 10352  0254  1903               	skipnz
 10353  0255  2A4E               	goto	i1l5661
 10354                           
 10355                           ;i2c_master_example.c: 82: I2C_SetDataCompleteCallback(rd2RegCompleteHandler,&returnValu
      +                          e);
 10356  0256  3067               	movlw	low _rd2RegCompleteHandler
 10357  0257  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 10358  0258  3006               	movlw	high _rd2RegCompleteHandler
 10359  0259  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 10360  025A  3050               	movlw	(low (I2C_Read2ByteRegister@returnValue| 0))& (0+255)
 10361  025B  0020               	movlb	0	; select bank0
 10362  025C  00CB               	movwf	??_I2C_Read2ByteRegister
 10363  025D  084B               	movf	??_I2C_Read2ByteRegister,w
 10364  025E  00F7               	movwf	i1I2C_SetDataCompleteCallback@ptr
 10365  025F  3187  27CE  3182   	fcall	i1_I2C_SetDataCompleteCallback
 10366                           
 10367                           ;i2c_master_example.c: 83: I2C_SetBuffer(&reg,1);
 10368  0262  3001               	movlw	1
 10369  0263  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 10370  0264  3000               	movlw	0
 10371  0265  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 10372  0266  3049               	movlw	(low (I2C_Read2ByteRegister@reg| 0))& (0+255)
 10373  0267  3187  2783  3182   	fcall	i1_I2C_SetBuffer
 10374                           
 10375                           ;i2c_master_example.c: 84: I2C_SetAddressNackCallback((0),(0));
 10376  026A  3000               	movlw	0
 10377  026B  00F5               	movwf	i1I2C_SetAddressNackCallback@cb
 10378  026C  00F6               	movwf	i1I2C_SetAddressNackCallback@cb+1
 10379  026D  01F7               	clrf	i1I2C_SetAddressNackCallback@ptr
 10380  026E  3187  27B6  3182   	fcall	i1_I2C_SetAddressNackCallback
 10381                           
 10382                           ;i2c_master_example.c: 85: I2C_MasterWrite();
 10383  0271  318E  26FB  3182   	fcall	i1_I2C_MasterWrite
 10384  0274                     i1l5671:	
 10385                           ;i2c_master_example.c: 86: while(I2C_BUSY == I2C_Close());
 10386                           
 10387  0274  3186  2637  3182   	fcall	i1_I2C_Close
 10388  0277  3A01               	xorlw	1
 10389  0278  1903               	skipnz
 10390  0279  2A74               	goto	i1l5671
 10391                           
 10392                           ;i2c_master_example.c: 88: return (returnValue << 8 | returnValue >> 8);
 10393  027A  0020               	movlb	0	; select bank0
 10394  027B  0851               	movf	I2C_Read2ByteRegister@returnValue+1,w
 10395  027C  00CC               	movwf	??_I2C_Read2ByteRegister+1
 10396  027D  0850               	movf	I2C_Read2ByteRegister@returnValue,w
 10397  027E  00CB               	movwf	??_I2C_Read2ByteRegister
 10398  027F  084C               	movf	??_I2C_Read2ByteRegister+1,w
 10399  0280  00CB               	movwf	??_I2C_Read2ByteRegister
 10400  0281  01CC               	clrf	??_I2C_Read2ByteRegister+1
 10401  0282  0850               	movf	I2C_Read2ByteRegister@returnValue,w
 10402  0283  00CE               	movwf	??_I2C_Read2ByteRegister+3
 10403  0284  01CD               	clrf	??_I2C_Read2ByteRegister+2
 10404  0285  084B               	movf	??_I2C_Read2ByteRegister,w
 10405  0286  044D               	iorwf	??_I2C_Read2ByteRegister+2,w
 10406  0287  00C9               	movwf	?_I2C_Read2ByteRegister
 10407  0288  084C               	movf	??_I2C_Read2ByteRegister+1,w
 10408  0289  044E               	iorwf	??_I2C_Read2ByteRegister+3,w
 10409  028A  00CA               	movwf	?_I2C_Read2ByteRegister+1
 10410  028B  0008               	return
 10411  028C                     __end_of_I2C_Read2ByteRegister:	
 10412                           
 10413                           	psect	text74
 10414  07B6                     __ptext74:	
 10415 ;; *************** function i1_I2C_SetAddressNackCallback *****************
 10416 ;; Defined at:
 10417 ;;		line 283 in file "mcc_generated_files/i2c_master.c"
 10418 ;; Parameters:    Size  Location     Type
 10419 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
 10420 ;;		 -> Absolute function(1), 
 10421 ;;  ptr             1    7[COMMON] PTR void 
 10422 ;;		 -> NULL(0), 
 10423 ;; Auto vars:     Size  Location     Type
 10424 ;;		None
 10425 ;; Return value:  Size  Location     Type
 10426 ;;                  1    wreg      void 
 10427 ;; Registers used:
 10428 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10429 ;; Tracked objects:
 10430 ;;		On entry : 0/0
 10431 ;;		On exit  : 0/0
 10432 ;;		Unchanged: 0/0
 10433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10434 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10436 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10437 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10438 ;;Total ram usage:        4 bytes
 10439 ;; Hardware stack levels used:    1
 10440 ;; Hardware stack levels required when called:    1
 10441 ;; This function calls:
 10442 ;;		i1_I2C_SetCallback
 10443 ;; This function is called by:
 10444 ;;		_I2C_Read2ByteRegister
 10445 ;;		i1_I2C_Write1ByteRegister
 10446 ;; This function uses a non-reentrant model
 10447 ;;
 10448                           
 10449                           
 10450                           ;psect for function i1_I2C_SetAddressNackCallback
 10451  07B6                     i1_I2C_SetAddressNackCallback:	
 10452                           
 10453                           ;i2c_master.c: 285: I2C_SetCallback(I2C_ADDR_NACK, cb, ptr);
 10454                           
 10455                           ;incstack = 0
 10456                           ; Regs used in i1_I2C_SetAddressNackCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 10457  07B6  0876               	movf	i1I2C_SetAddressNackCallback@cb+1,w
 10458  07B7  00F1               	movwf	i1I2C_SetCallback@cb+1
 10459  07B8  0875               	movf	i1I2C_SetAddressNackCallback@cb,w
 10460  07B9  00F0               	movwf	i1I2C_SetCallback@cb
 10461  07BA  0877               	movf	i1I2C_SetAddressNackCallback@ptr,w
 10462  07BB  00F8               	movwf	??i1_I2C_SetAddressNackCallback
 10463  07BC  0878               	movf	??i1_I2C_SetAddressNackCallback,w
 10464  07BD  00F2               	movwf	i1I2C_SetCallback@ptr
 10465  07BE  3002               	movlw	2
 10466  07BF  3185  255F         	fcall	i1_I2C_SetCallback
 10467  07C1  0008               	return
 10468  07C2                     __end_ofi1_I2C_SetAddressNackCallback:	
 10469                           
 10470                           	psect	text75
 10471  0339                     __ptext75:	
 10472 ;; *************** function i1_I2C_Open *****************
 10473 ;; Defined at:
 10474 ;;		line 176 in file "mcc_generated_files/i2c_master.c"
 10475 ;; Parameters:    Size  Location     Type
 10476 ;;  address         1    wreg     unsigned char 
 10477 ;; Auto vars:     Size  Location     Type
 10478 ;;  address         1    1[COMMON] unsigned char 
 10479 ;;  I2C_Open        1    2[COMMON] enum E92
 10480 ;; Return value:  Size  Location     Type
 10481 ;;                  1    wreg      enum E92
 10482 ;; Registers used:
 10483 ;;		wreg, status,2, status,0, pclath, cstack
 10484 ;; Tracked objects:
 10485 ;;		On entry : 0/0
 10486 ;;		On exit  : 0/0
 10487 ;;		Unchanged: 0/0
 10488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10490 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10491 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10492 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10493 ;;Total ram usage:        3 bytes
 10494 ;; Hardware stack levels used:    1
 10495 ;; Hardware stack levels required when called:    1
 10496 ;; This function calls:
 10497 ;;		i1_I2C_MasterClearIrq
 10498 ;;		i1_I2C_MasterOpen
 10499 ;; This function is called by:
 10500 ;;		_I2C_Read2ByteRegister
 10501 ;;		i1_I2C_Write1ByteRegister
 10502 ;; This function uses a non-reentrant model
 10503 ;;
 10504                           
 10505                           
 10506                           ;psect for function i1_I2C_Open
 10507  0339                     i1_I2C_Open:	
 10508                           
 10509                           ;incstack = 0
 10510                           ; Regs used in i1_I2C_Open: [wreg+status,2+status,0+pclath+cstack]
 10511                           ;i1I2C_Open@address stored from wreg
 10512  0339  00F1               	movwf	i1I2C_Open@address
 10513                           
 10514                           ;i2c_master.c: 178: i2c_error_t returnValue = I2C_BUSY;
 10515  033A  01F2               	clrf	i1I2C_Open@returnValue
 10516  033B  0AF2               	incf	i1I2C_Open@returnValue,f
 10517                           
 10518                           ;i2c_master.c: 180: if(!I2C_Status.inUse)
 10519  033C  0020               	movlb	0	; select bank0
 10520  033D  193C               	btfsc	_I2C_Status+28,2
 10521  033E  2B6E               	goto	i1l321
 10522                           
 10523                           ;i2c_master.c: 181: {
 10524                           ;i2c_master.c: 182: I2C_Status.address = address;
 10525  033F  0871               	movf	i1I2C_Open@address,w
 10526  0340  00F0               	movwf	??i1_I2C_Open
 10527  0341  0870               	movf	??i1_I2C_Open,w
 10528  0342  00B6               	movwf	_I2C_Status+22
 10529                           
 10530                           ;i2c_master.c: 183: I2C_Status.busy = 0;
 10531  0343  10BC               	bcf	_I2C_Status+28,1
 10532                           
 10533                           ;i2c_master.c: 184: I2C_Status.inUse = 1;
 10534  0344  153C               	bsf	_I2C_Status+28,2
 10535                           
 10536                           ;i2c_master.c: 185: I2C_Status.addressNackCheck = 0;
 10537  0345  103C               	bcf	_I2C_Status+28,0
 10538                           
 10539                           ;i2c_master.c: 186: I2C_Status.state = I2C_RESET;
 10540  0346  300E               	movlw	14
 10541  0347  00F0               	movwf	??i1_I2C_Open
 10542  0348  0870               	movf	??i1_I2C_Open,w
 10543  0349  00BA               	movwf	_I2C_Status+26
 10544                           
 10545                           ;i2c_master.c: 187: I2C_Status.time_out_value = 500;
 10546  034A  30F4               	movlw	244
 10547  034B  00B4               	movwf	_I2C_Status+20
 10548  034C  3001               	movlw	1
 10549  034D  00B5               	movwf	_I2C_Status+21
 10550                           
 10551                           ;i2c_master.c: 188: I2C_Status.bufferFree = 1;
 10552  034E  15BC               	bsf	_I2C_Status+28,3
 10553                           
 10554                           ;i2c_master.c: 191: I2C_Status.callbackTable[I2C_DATA_COMPLETE]=I2C_CallbackReturnStop;
 10555  034F  302F               	movlw	low _I2C_CallbackReturnStop
 10556  0350  00A0               	movwf	_I2C_Status
 10557  0351  300F               	movlw	high _I2C_CallbackReturnStop
 10558  0352  00A1               	movwf	_I2C_Status+1
 10559                           
 10560                           ;i2c_master.c: 192: I2C_Status.callbackPayload[I2C_DATA_COMPLETE] = (0);
 10561  0353  01AC               	clrf	low ((_I2C_Status| 0+12))
 10562                           
 10563                           ;i2c_master.c: 193: I2C_Status.callbackTable[I2C_WRITE_COLLISION]=I2C_CallbackReturnStop
      +                          ;
 10564  0354  302F               	movlw	low _I2C_CallbackReturnStop
 10565  0355  00A2               	movwf	low ((_I2C_Status| 0+2))
 10566  0356  300F               	movlw	high _I2C_CallbackReturnStop
 10567  0357  00A3               	movwf	(low ((_I2C_Status| 0+2))+1)
 10568                           
 10569                           ;i2c_master.c: 194: I2C_Status.callbackPayload[I2C_WRITE_COLLISION] = (0);
 10570  0358  01AD               	clrf	low ((_I2C_Status| 0+13))
 10571                           
 10572                           ;i2c_master.c: 195: I2C_Status.callbackTable[I2C_ADDR_NACK]=I2C_CallbackReturnStop;
 10573  0359  302F               	movlw	low _I2C_CallbackReturnStop
 10574  035A  00A4               	movwf	low ((_I2C_Status| 0+4))
 10575  035B  300F               	movlw	high _I2C_CallbackReturnStop
 10576  035C  00A5               	movwf	(low ((_I2C_Status| 0+4))+1)
 10577                           
 10578                           ;i2c_master.c: 196: I2C_Status.callbackPayload[I2C_ADDR_NACK] = (0);
 10579  035D  01AE               	clrf	low ((_I2C_Status| 0+14))
 10580                           
 10581                           ;i2c_master.c: 197: I2C_Status.callbackTable[I2C_DATA_NACK]=I2C_CallbackReturnStop;
 10582  035E  302F               	movlw	low _I2C_CallbackReturnStop
 10583  035F  00A6               	movwf	low ((_I2C_Status| 0+6))
 10584  0360  300F               	movlw	high _I2C_CallbackReturnStop
 10585  0361  00A7               	movwf	(low ((_I2C_Status| 0+6))+1)
 10586                           
 10587                           ;i2c_master.c: 198: I2C_Status.callbackPayload[I2C_DATA_NACK] = (0);
 10588  0362  01AF               	clrf	low ((_I2C_Status| 0+15))
 10589                           
 10590                           ;i2c_master.c: 199: I2C_Status.callbackTable[I2C_TIMEOUT]=I2C_CallbackReturnReset;
 10591  0363  3035               	movlw	low _I2C_CallbackReturnReset
 10592  0364  00A8               	movwf	low ((_I2C_Status| 0+8))
 10593  0365  300F               	movlw	high _I2C_CallbackReturnReset
 10594  0366  00A9               	movwf	(low ((_I2C_Status| 0+8))+1)
 10595                           
 10596                           ;i2c_master.c: 200: I2C_Status.callbackPayload[I2C_TIMEOUT] = (0);
 10597  0367  01B0               	clrf	low ((_I2C_Status| 0+16))
 10598                           
 10599                           ;i2c_master.c: 202: I2C_MasterClearIrq();
 10600  0368  318E  2693  3183   	fcall	i1_I2C_MasterClearIrq
 10601                           
 10602                           ;i2c_master.c: 203: I2C_MasterOpen();
 10603  036B  3187  27C2         	fcall	i1_I2C_MasterOpen
 10604                           
 10605                           ;i2c_master.c: 204: returnValue = I2C_NOERR;
 10606  036D  01F2               	clrf	i1I2C_Open@returnValue
 10607  036E                     i1l321:	
 10608                           
 10609                           ;i2c_master.c: 205: }
 10610                           ;i2c_master.c: 206: return returnValue;
 10611  036E  0872               	movf	i1I2C_Open@returnValue,w
 10612  036F  0008               	return
 10613  0370                     __end_ofi1_I2C_Open:	
 10614                           
 10615                           	psect	text76
 10616  07C2                     __ptext76:	
 10617 ;; *************** function i1_I2C_MasterOpen *****************
 10618 ;; Defined at:
 10619 ;;		line 543 in file "mcc_generated_files/i2c_master.c"
 10620 ;; Parameters:    Size  Location     Type
 10621 ;;		None
 10622 ;; Auto vars:     Size  Location     Type
 10623 ;;		None
 10624 ;; Return value:  Size  Location     Type
 10625 ;;                  1    wreg      unsigned char 
 10626 ;; Registers used:
 10627 ;;		wreg, status,2
 10628 ;; Tracked objects:
 10629 ;;		On entry : 0/0
 10630 ;;		On exit  : 0/0
 10631 ;;		Unchanged: 0/0
 10632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10636 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10637 ;;Total ram usage:        0 bytes
 10638 ;; Hardware stack levels used:    1
 10639 ;; This function calls:
 10640 ;;		Nothing
 10641 ;; This function is called by:
 10642 ;;		i1_I2C_Open
 10643 ;; This function uses a non-reentrant model
 10644 ;;
 10645                           
 10646                           
 10647                           ;psect for function i1_I2C_MasterOpen
 10648  07C2                     i1_I2C_MasterOpen:	
 10649                           
 10650                           ;i2c_master.c: 545: if(!SSP1CON1bits.SSPEN)
 10651                           
 10652                           ;incstack = 0
 10653                           ; Regs used in i1_I2C_MasterOpen: [wreg+status,2]
 10654  07C2  0024               	movlb	4	; select bank4
 10655  07C3  1A95               	btfsc	21,5	;volatile
 10656  07C4  0008               	return
 10657                           
 10658                           ;i2c_master.c: 546: {
 10659                           ;i2c_master.c: 547: SSP1STAT = 0x80;
 10660  07C5  3080               	movlw	128
 10661  07C6  0094               	movwf	20	;volatile
 10662                           
 10663                           ;i2c_master.c: 548: SSP1CON1 = 0x08;
 10664  07C7  3008               	movlw	8
 10665  07C8  0095               	movwf	21	;volatile
 10666                           
 10667                           ;i2c_master.c: 549: SSP1CON2 = 0x00;
 10668  07C9  0196               	clrf	22	;volatile
 10669                           
 10670                           ;i2c_master.c: 550: SSP1ADD = 0x09;
 10671  07CA  3009               	movlw	9
 10672  07CB  0092               	movwf	18	;volatile
 10673                           
 10674                           ;i2c_master.c: 551: SSP1CON1bits.SSPEN = 1;
 10675  07CC  1695               	bsf	21,5	;volatile
 10676                           
 10677                           ;i2c_master.c: 552: return 1;
 10678                           ;	Return value of i1_I2C_MasterOpen is never used
 10679  07CD  0008               	return
 10680  07CE                     __end_ofi1_I2C_MasterOpen:	
 10681                           ;i2c_master.c: 553: }
 10682                           ;i2c_master.c: 554: return 0;
 10683                           ;	Return value of i1_I2C_MasterOpen is never used
 10684                           
 10685                           
 10686                           	psect	text77
 10687  0EFB                     __ptext77:	
 10688 ;; *************** function i1_I2C_MasterWrite *****************
 10689 ;; Defined at:
 10690 ;;		line 251 in file "mcc_generated_files/i2c_master.c"
 10691 ;; Parameters:    Size  Location     Type
 10692 ;;		None
 10693 ;; Auto vars:     Size  Location     Type
 10694 ;;		None
 10695 ;; Return value:  Size  Location     Type
 10696 ;;                  1    wreg      enum E92
 10697 ;; Registers used:
 10698 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10699 ;; Tracked objects:
 10700 ;;		On entry : 0/0
 10701 ;;		On exit  : 0/0
 10702 ;;		Unchanged: 0/0
 10703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10707 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10708 ;;Total ram usage:        0 bytes
 10709 ;; Hardware stack levels used:    1
 10710 ;; Hardware stack levels required when called:    7
 10711 ;; This function calls:
 10712 ;;		i1_I2C_MasterOperation
 10713 ;; This function is called by:
 10714 ;;		_I2C_Read2ByteRegister
 10715 ;;		i1_I2C_Write1ByteRegister
 10716 ;; This function uses a non-reentrant model
 10717 ;;
 10718                           
 10719                           
 10720                           ;psect for function i1_I2C_MasterWrite
 10721  0EFB                     i1_I2C_MasterWrite:	
 10722                           
 10723                           ;i2c_master.c: 253: return I2C_MasterOperation(0);
 10724                           ;	Return value of i1_I2C_MasterWrite is never used
 10725                           
 10726                           ;incstack = 0
 10727 ;; hardware stack exceeded
 10728                           ; Regs used in i1_I2C_MasterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10729  0EFB  3000               	movlw	0
 10730  0EFC  3186  2604         	fcall	i1_I2C_MasterOperation
 10731  0EFE  0008               	return
 10732  0EFF                     __end_ofi1_I2C_MasterWrite:	
 10733                           
 10734                           	psect	text78
 10735  0604                     __ptext78:	
 10736 ;; *************** function i1_I2C_MasterOperation *****************
 10737 ;; Defined at:
 10738 ;;		line 224 in file "mcc_generated_files/i2c_master.c"
 10739 ;; Parameters:    Size  Location     Type
 10740 ;;  read            1    wreg     unsigned char 
 10741 ;; Auto vars:     Size  Location     Type
 10742 ;;  read            1    3[BANK0 ] unsigned char 
 10743 ;;  I2C_MasterOp    1    4[BANK0 ] enum E92
 10744 ;; Return value:  Size  Location     Type
 10745 ;;                  1    wreg      enum E92
 10746 ;; Registers used:
 10747 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10748 ;; Tracked objects:
 10749 ;;		On entry : 0/0
 10750 ;;		On exit  : 0/0
 10751 ;;		Unchanged: 0/0
 10752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10754 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10755 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10756 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10757 ;;Total ram usage:        3 bytes
 10758 ;; Hardware stack levels used:    1
 10759 ;; Hardware stack levels required when called:    6
 10760 ;; This function calls:
 10761 ;;		i1_I2C_MasterStart
 10762 ;;		i1_I2C_Poller
 10763 ;; This function is called by:
 10764 ;;		i1_I2C_MasterWrite
 10765 ;; This function uses a non-reentrant model
 10766 ;;
 10767                           
 10768                           
 10769                           ;psect for function i1_I2C_MasterOperation
 10770  0604                     i1_I2C_MasterOperation:	
 10771                           
 10772                           ;incstack = 0
 10773 ;; hardware stack exceeded
 10774                           ; Regs used in i1_I2C_MasterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10775                           ;i1I2C_MasterOperation@read stored from wreg
 10776  0604  0020               	movlb	0	; select bank0
 10777  0605  00C7               	movwf	i1I2C_MasterOperation@read
 10778                           
 10779                           ;i2c_master.c: 226: i2c_error_t returnValue = I2C_BUSY;
 10780  0606  01C8               	clrf	i1I2C_MasterOperation@returnValue
 10781  0607  0AC8               	incf	i1I2C_MasterOperation@returnValue,f
 10782                           
 10783                           ;i2c_master.c: 227: if(!I2C_Status.busy)
 10784  0608  18BC               	btfsc	_I2C_Status+28,1
 10785  0609  2E1B               	goto	i1l5643
 10786                           
 10787                           ;i2c_master.c: 228: {
 10788                           ;i2c_master.c: 229: I2C_Status.busy = 1;
 10789  060A  14BC               	bsf	_I2C_Status+28,1
 10790                           
 10791                           ;i2c_master.c: 230: returnValue = I2C_NOERR;
 10792  060B  01C8               	clrf	i1I2C_MasterOperation@returnValue
 10793                           
 10794                           ;i2c_master.c: 232: if(read)
 10795  060C  0847               	movf	i1I2C_MasterOperation@read,w
 10796  060D  1903               	btfsc	3,2
 10797  060E  2E12               	goto	i1l5637
 10798                           
 10799                           ;i2c_master.c: 233: {
 10800                           ;i2c_master.c: 234: I2C_Status.state = I2C_SEND_ADR_READ;
 10801  060F  01BA               	clrf	_I2C_Status+26
 10802  0610  0ABA               	incf	_I2C_Status+26,f
 10803                           
 10804                           ;i2c_master.c: 235: }
 10805  0611  2E16               	goto	i1l5639
 10806  0612                     i1l5637:	
 10807                           
 10808                           ;i2c_master.c: 236: else
 10809                           ;i2c_master.c: 237: {
 10810                           ;i2c_master.c: 238: I2C_Status.state = I2C_SEND_ADR_WRITE;
 10811  0612  3002               	movlw	2
 10812  0613  00FD               	movwf	??i1_I2C_MasterOperation
 10813  0614  087D               	movf	??i1_I2C_MasterOperation,w
 10814  0615  00BA               	movwf	_I2C_Status+26
 10815  0616                     i1l5639:	
 10816                           
 10817                           ;i2c_master.c: 239: }
 10818                           ;i2c_master.c: 240: I2C_MasterStart();
 10819  0616  318E  269C  3186   	fcall	i1_I2C_MasterStart
 10820                           
 10821                           ;i2c_master.c: 241: I2C_Poller();
 10822  0619  318F  27E2         	fcall	i1_I2C_Poller
 10823  061B                     i1l5643:	
 10824                           
 10825                           ;i2c_master.c: 242: }
 10826                           ;i2c_master.c: 243: return returnValue;
 10827  061B  0020               	movlb	0	; select bank0
 10828  061C  0848               	movf	i1I2C_MasterOperation@returnValue,w
 10829  061D  0008               	return
 10830  061E                     __end_ofi1_I2C_MasterOperation:	
 10831                           
 10832                           	psect	text79
 10833  0FE2                     __ptext79:	
 10834 ;; *************** function i1_I2C_Poller *****************
 10835 ;; Defined at:
 10836 ;;		line 312 in file "mcc_generated_files/i2c_master.c"
 10837 ;; Parameters:    Size  Location     Type
 10838 ;;		None
 10839 ;; Auto vars:     Size  Location     Type
 10840 ;;		None
 10841 ;; Return value:  Size  Location     Type
 10842 ;;                  1    wreg      void 
 10843 ;; Registers used:
 10844 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10845 ;; Tracked objects:
 10846 ;;		On entry : 0/0
 10847 ;;		On exit  : 0/0
 10848 ;;		Unchanged: 0/0
 10849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10854 ;;Total ram usage:        0 bytes
 10855 ;; Hardware stack levels used:    1
 10856 ;; Hardware stack levels required when called:    5
 10857 ;; This function calls:
 10858 ;;		i1_I2C_MasterFsm
 10859 ;;		i1_I2C_MasterWaitForEvent
 10860 ;; This function is called by:
 10861 ;;		i1_I2C_MasterOperation
 10862 ;; This function uses a non-reentrant model
 10863 ;;
 10864                           
 10865                           
 10866                           ;psect for function i1_I2C_Poller
 10867  0FE2                     i1_I2C_Poller:	
 10868  0FE2                     i1l5615:	
 10869                           ;i2c_master.c: 314: while(I2C_Status.busy)
 10870                           
 10871                           ;incstack = 0
 10872 ;; hardware stack exceeded
 10873                           ; Regs used in i1_I2C_Poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10874                           
 10875  0FE2  0020               	movlb	0	; select bank0
 10876  0FE3  1CBC               	btfss	_I2C_Status+28,1
 10877  0FE4  0008               	return
 10878                           
 10879                           ;i2c_master.c: 315: {
 10880                           ;i2c_master.c: 316: I2C_MasterWaitForEvent();
 10881  0FE5  318E  26F7  318F   	fcall	i1_I2C_MasterWaitForEvent
 10882                           
 10883                           ;i2c_master.c: 317: I2C_MasterFsm();
 10884  0FE8  3184  24EE  318F   	fcall	i1_I2C_MasterFsm
 10885  0FEB  2FE2               	goto	i1l5615
 10886  0FEC                     __end_ofi1_I2C_Poller:	
 10887                           
 10888                           	psect	text80
 10889  0EF7                     __ptext80:	
 10890 ;; *************** function i1_I2C_MasterWaitForEvent *****************
 10891 ;; Defined at:
 10892 ;;		line 650 in file "mcc_generated_files/i2c_master.c"
 10893 ;; Parameters:    Size  Location     Type
 10894 ;;		None
 10895 ;; Auto vars:     Size  Location     Type
 10896 ;;		None
 10897 ;; Return value:  Size  Location     Type
 10898 ;;                  1    wreg      void 
 10899 ;; Registers used:
 10900 ;;		None
 10901 ;; Tracked objects:
 10902 ;;		On entry : 0/0
 10903 ;;		On exit  : 0/0
 10904 ;;		Unchanged: 0/0
 10905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10910 ;;Total ram usage:        0 bytes
 10911 ;; Hardware stack levels used:    1
 10912 ;; This function calls:
 10913 ;;		Nothing
 10914 ;; This function is called by:
 10915 ;;		i1_I2C_Poller
 10916 ;; This function uses a non-reentrant model
 10917 ;;
 10918                           
 10919                           
 10920                           ;psect for function i1_I2C_MasterWaitForEvent
 10921  0EF7                     i1_I2C_MasterWaitForEvent:	
 10922  0EF7                     i1l544:	
 10923                           ;incstack = 0
 10924 ;; hardware stack exceeded
 10925                           ; Regs used in i1_I2C_MasterWaitForEvent: []
 10926                           ;i2c_master.c: 652: while(1)
 10927                           
 10928                           
 10929                           ;i2c_master.c: 653: {
 10930                           ;i2c_master.c: 654: if(PIR1bits.SSP1IF)
 10931  0EF7  0020               	movlb	0	; select bank0
 10932  0EF8  1990               	btfsc	16,3	;volatile
 10933  0EF9  0008               	return
 10934  0EFA  2EF7               	goto	i1l544
 10935  0EFB                     __end_ofi1_I2C_MasterWaitForEvent:	
 10936                           ;i2c_master.c: 655: {
 10937                           ;i2c_master.c: 656: break;
 10938                           
 10939                           
 10940                           	psect	text81
 10941  04EE                     __ptext81:	
 10942 ;; *************** function i1_I2C_MasterFsm *****************
 10943 ;; Defined at:
 10944 ;;		line 321 in file "mcc_generated_files/i2c_master.c"
 10945 ;; Parameters:    Size  Location     Type
 10946 ;;		None
 10947 ;; Auto vars:     Size  Location     Type
 10948 ;;		None
 10949 ;; Return value:  Size  Location     Type
 10950 ;;                  1    wreg      void 
 10951 ;; Registers used:
 10952 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10953 ;; Tracked objects:
 10954 ;;		On entry : 0/0
 10955 ;;		On exit  : 0/0
 10956 ;;		Unchanged: 0/0
 10957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10960 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10961 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10962 ;;Total ram usage:        3 bytes
 10963 ;; Hardware stack levels used:    1
 10964 ;; Hardware stack levels required when called:    4
 10965 ;; This function calls:
 10966 ;;		i1_I2C_DO_ADDRESS_NACK
 10967 ;;		i1_I2C_DO_IDLE
 10968 ;;		i1_I2C_DO_RCEN
 10969 ;;		i1_I2C_DO_RESET
 10970 ;;		i1_I2C_DO_RX
 10971 ;;		i1_I2C_DO_RX_ACK
 10972 ;;		i1_I2C_DO_RX_NACK_RESTART
 10973 ;;		i1_I2C_DO_RX_NACK_STOP
 10974 ;;		i1_I2C_DO_SEND_ADR_READ
 10975 ;;		i1_I2C_DO_SEND_ADR_WRITE
 10976 ;;		i1_I2C_DO_SEND_RESTART
 10977 ;;		i1_I2C_DO_SEND_RESTART_READ
 10978 ;;		i1_I2C_DO_SEND_RESTART_WRITE
 10979 ;;		i1_I2C_DO_SEND_STOP
 10980 ;;		i1_I2C_DO_TX
 10981 ;;		i1_I2C_DO_TX_EMPTY
 10982 ;;		i1_I2C_MasterClearIrq
 10983 ;;		i1_I2C_MasterIsNack
 10984 ;; This function is called by:
 10985 ;;		i1_I2C_Poller
 10986 ;; This function uses a non-reentrant model
 10987 ;;
 10988                           
 10989                           
 10990                           ;psect for function i1_I2C_MasterFsm
 10991  04EE                     i1_I2C_MasterFsm:	
 10992                           
 10993                           ;i2c_master.c: 323: I2C_MasterClearIrq();
 10994                           
 10995                           ;incstack = 0
 10996 ;; hardware stack exceeded
 10997                           ; Regs used in i1_I2C_MasterFsm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10998  04EE  318E  2693  3184   	fcall	i1_I2C_MasterClearIrq
 10999                           
 11000                           ;i2c_master.c: 325: if(I2C_Status.addressNackCheck && I2C_MasterIsNack())
 11001  04F1  0020               	movlb	0	; select bank0
 11002  04F2  1C3C               	btfss	_I2C_Status+28,0
 11003  04F3  2CFF               	goto	i1l5515
 11004  04F4  318F  2723  3184   	fcall	i1_I2C_MasterIsNack
 11005  04F7  3A00               	xorlw	0
 11006  04F8  1903               	skipnz
 11007  04F9  2CFF               	goto	i1l5515
 11008                           
 11009                           ;i2c_master.c: 326: {
 11010                           ;i2c_master.c: 327: I2C_Status.state = I2C_ADDRESS_NACK;
 11011  04FA  300F               	movlw	15
 11012  04FB  0020               	movlb	0	; select bank0
 11013  04FC  00C4               	movwf	??i1_I2C_MasterFsm
 11014  04FD  0844               	movf	??i1_I2C_MasterFsm,w
 11015  04FE  00BA               	movwf	_I2C_Status+26
 11016  04FF                     i1l5515:	
 11017                           
 11018                           ;i2c_master.c: 328: }
 11019                           ;i2c_master.c: 329: I2C_Status.state = fsmStateTable[I2C_Status.state]();
 11020  04FF  0020               	movlb	0	; select bank0
 11021  0500  083A               	movf	_I2C_Status+26,w
 11022  0501  00C4               	movwf	??i1_I2C_MasterFsm
 11023  0502  01C5               	clrf	??i1_I2C_MasterFsm+1
 11024  0503  35C4               	lslf	??i1_I2C_MasterFsm,f
 11025  0504  0DC5               	rlf	??i1_I2C_MasterFsm+1,f
 11026  0505  30A6               	movlw	low (_fsmStateTable| (0+32768))
 11027  0506  0744               	addwf	??i1_I2C_MasterFsm,w
 11028  0507  0084               	movwf	4
 11029  0508  3085               	movlw	high (_fsmStateTable| (0+32768))
 11030  0509  3D45               	addwfc	??i1_I2C_MasterFsm+1,w
 11031  050A  0085               	movwf	5
 11032  050B  3F01               	moviw [1]fsr0
 11033  050C  008A               	movwf	10
 11034  050D  3F00               	moviw [0]fsr0
 11035  050E  000A               	callw
 11036  050F  3184               	pagesel	$
 11037  0510  0020               	movlb	0	; select bank0
 11038  0511  00C6               	movwf	??i1_I2C_MasterFsm+2
 11039  0512  0846               	movf	??i1_I2C_MasterFsm+2,w
 11040  0513  00BA               	movwf	_I2C_Status+26
 11041  0514  0008               	return
 11042  0515                     __end_ofi1_I2C_MasterFsm:	
 11043                           
 11044                           	psect	text82
 11045  0583                     __ptext82:	
 11046 ;; *************** function i1_I2C_DO_ADDRESS_NACK *****************
 11047 ;; Defined at:
 11048 ;;		line 500 in file "mcc_generated_files/i2c_master.c"
 11049 ;; Parameters:    Size  Location     Type
 11050 ;;		None
 11051 ;; Auto vars:     Size  Location     Type
 11052 ;;		None
 11053 ;; Return value:  Size  Location     Type
 11054 ;;                  1    wreg      enum E12103
 11055 ;; Registers used:
 11056 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11057 ;; Tracked objects:
 11058 ;;		On entry : 0/0
 11059 ;;		On exit  : 0/0
 11060 ;;		Unchanged: 0/0
 11061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11064 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11065 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11066 ;;Total ram usage:        1 bytes
 11067 ;; Hardware stack levels used:    1
 11068 ;; Hardware stack levels required when called:    3
 11069 ;; This function calls:
 11070 ;;		Absolute function
 11071 ;;		i1_I2C_CallbackReturnReset
 11072 ;;		i1_I2C_CallbackReturnStop
 11073 ;;		i1_I2C_DO_SEND_RESTART
 11074 ;;		i1_I2C_DO_SEND_STOP
 11075 ;;		i1_rd1RegCompleteHandler
 11076 ;;		i1_rd2RegCompleteHandler
 11077 ;;		i1_rdBlkRegCompleteHandler
 11078 ;;		i1_wr1RegCompleteHandler
 11079 ;;		i1_wr2RegCompleteHandler
 11080 ;; This function is called by:
 11081 ;; This function uses a non-reentrant model
 11082 ;;
 11083                           
 11084                           
 11085                           ;psect for function i1_I2C_DO_ADDRESS_NACK
 11086  0583                     i1_I2C_DO_ADDRESS_NACK:	
 11087  0583                     i1l5491:	
 11088                           ;incstack = 0
 11089 ;; hardware stack exceeded
 11090                           ; Regs used in i1_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11091                           
 11092                           
 11093                           ;i2c_master.c: 502: I2C_Status.addressNackCheck = 0;
 11094  0583  0020               	movlb	0	; select bank0
 11095  0584  103C               	bcf	_I2C_Status+28,0
 11096                           
 11097                           ;i2c_master.c: 503: I2C_Status.error = I2C_FAIL;
 11098  0585  3002               	movlw	2
 11099  0586  00FA               	movwf	??i1_I2C_DO_ADDRESS_NACK
 11100  0587  087A               	movf	??i1_I2C_DO_ADDRESS_NACK,w
 11101  0588  00BB               	movwf	_I2C_Status+27
 11102                           
 11103                           ;i2c_master.c: 504: switch(I2C_Status.callbackTable[I2C_ADDR_NACK](I2C_Status.callbackPa
      +                          yload[I2C_ADDR_NACK]))
 11104  0589  2D90               	goto	i1l5505
 11105  058A                     i1l5495:	
 11106                           ;i2c_master.c: 505: {
 11107                           ;i2c_master.c: 506: case I2C_RESTART_READ:
 11108                           
 11109                           
 11110                           ;i2c_master.c: 507: case I2C_RESTART_WRITE:
 11111                           ;i2c_master.c: 508: return I2C_DO_SEND_RESTART();
 11112  058A  318E  26E3         	fcall	i1_I2C_DO_SEND_RESTART
 11113  058C  0008               	return
 11114  058D                     i1l5499:	
 11115                           ;i2c_master.c: 509: default:
 11116                           
 11117                           
 11118                           ;i2c_master.c: 510: return I2C_DO_SEND_STOP();
 11119  058D  318E  26E7         	fcall	i1_I2C_DO_SEND_STOP
 11120                           
 11121                           ;i2c_master.c: 511: }
 11122  058F  0008               	return
 11123  0590                     i1l5505:	
 11124  0590  0020               	movlb	0	; select bank0
 11125  0591  082E               	movf	low ((_I2C_Status| 0+14)),w
 11126  0592  00FA               	movwf	??i1_I2C_DO_ADDRESS_NACK
 11127  0593  087A               	movf	??i1_I2C_DO_ADDRESS_NACK,w
 11128  0594  00F9               	movwf	i1I2C_CallbackReturnReset@funPtr
 11129  0595  3004               	movlw	4
 11130  0596  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
 11131  0597  0086               	movwf	6
 11132  0598  0187               	clrf	7
 11133  0599  3F41               	moviw [1]fsr1
 11134  059A  008A               	movwf	10
 11135  059B  3F40               	moviw [0]fsr1
 11136  059C  000A               	callw
 11137  059D  3185               	pagesel	$
 11138                           
 11139                           ; Switch size 1, requested type "space"
 11140                           ; Number of cases is 2, Range of values is 2 to 3
 11141                           ; switch strategies available:
 11142                           ; Name         Instructions Cycles
 11143                           ; simple_byte            7     4 (average)
 11144                           ; direct_byte           13     9 (fixed)
 11145                           ; jumptable            263     9 (fixed)
 11146                           ;	Chosen strategy is simple_byte
 11147  059E  3A02               	xorlw	2	; case 2
 11148  059F  1903               	skipnz
 11149  05A0  2D8A               	goto	i1l5495
 11150  05A1  3A01               	xorlw	1	; case 3
 11151  05A2  1903               	skipnz
 11152  05A3  2D8A               	goto	i1l5495
 11153  05A4  2D8D               	goto	i1l5499
 11154  05A5  0008               	return
 11155  05A6                     __end_ofi1_I2C_DO_ADDRESS_NACK:	
 11156                           
 11157                           	psect	text83
 11158  0F19                     __ptext83:	
 11159 ;; *************** function i1_I2C_DO_RESET *****************
 11160 ;; Defined at:
 11161 ;;		line 494 in file "mcc_generated_files/i2c_master.c"
 11162 ;; Parameters:    Size  Location     Type
 11163 ;;		None
 11164 ;; Auto vars:     Size  Location     Type
 11165 ;;		None
 11166 ;; Return value:  Size  Location     Type
 11167 ;;                  1    wreg      enum E12103
 11168 ;; Registers used:
 11169 ;;		wreg, status,2
 11170 ;; Tracked objects:
 11171 ;;		On entry : 0/0
 11172 ;;		On exit  : 0/0
 11173 ;;		Unchanged: 0/0
 11174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11179 ;;Total ram usage:        0 bytes
 11180 ;; Hardware stack levels used:    1
 11181 ;; This function calls:
 11182 ;;		Nothing
 11183 ;; This function is called by:
 11184 ;; This function uses a non-reentrant model
 11185 ;;
 11186                           
 11187                           
 11188                           ;psect for function i1_I2C_DO_RESET
 11189  0F19                     i1_I2C_DO_RESET:	
 11190  0F19                     i1l2733:	
 11191                           ;incstack = 0
 11192 ;; hardware stack exceeded
 11193                           ; Regs used in i1_I2C_DO_RESET: [wreg+status,2]
 11194                           
 11195                           
 11196                           ;i2c_master.c: 496: I2C_Status.busy = 0;
 11197  0F19  0020               	movlb	0	; select bank0
 11198  0F1A  10BC               	bcf	_I2C_Status+28,1
 11199                           
 11200                           ;i2c_master.c: 497: I2C_Status.error = I2C_NOERR;
 11201  0F1B  01BB               	clrf	_I2C_Status+27
 11202                           
 11203                           ;i2c_master.c: 498: return I2C_RESET;
 11204  0F1C  300E               	movlw	14
 11205  0F1D  0008               	return
 11206  0F1E                     __end_ofi1_I2C_DO_RESET:	
 11207                           
 11208                           	psect	text84
 11209  0EF3                     __ptext84:	
 11210 ;; *************** function i1_I2C_DO_RX_NACK_RESTART *****************
 11211 ;; Defined at:
 11212 ;;		line 488 in file "mcc_generated_files/i2c_master.c"
 11213 ;; Parameters:    Size  Location     Type
 11214 ;;		None
 11215 ;; Auto vars:     Size  Location     Type
 11216 ;;		None
 11217 ;; Return value:  Size  Location     Type
 11218 ;;                  1    wreg      enum E12103
 11219 ;; Registers used:
 11220 ;;		wreg, status,2, status,0, pclath, cstack
 11221 ;; Tracked objects:
 11222 ;;		On entry : 0/0
 11223 ;;		On exit  : 0/0
 11224 ;;		Unchanged: 0/0
 11225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11229 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11230 ;;Total ram usage:        0 bytes
 11231 ;; Hardware stack levels used:    1
 11232 ;; Hardware stack levels required when called:    1
 11233 ;; This function calls:
 11234 ;;		i1_I2C_MasterSendNack
 11235 ;; This function is called by:
 11236 ;;		i1_I2C_DO_RX
 11237 ;; This function uses a non-reentrant model
 11238 ;;
 11239                           
 11240                           
 11241                           ;psect for function i1_I2C_DO_RX_NACK_RESTART
 11242  0EF3                     i1_I2C_DO_RX_NACK_RESTART:	
 11243  0EF3                     i1l2575:	
 11244                           ;incstack = 0
 11245 ;; hardware stack exceeded
 11246                           ; Regs used in i1_I2C_DO_RX_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 11247                           
 11248                           
 11249                           ;i2c_master.c: 490: I2C_MasterSendNack();
 11250  0EF3  318E  26D3         	fcall	i1_I2C_MasterSendNack
 11251                           
 11252                           ;i2c_master.c: 491: return I2C_SEND_RESTART;
 11253  0EF5  3009               	movlw	9
 11254  0EF6  0008               	return
 11255  0EF7                     __end_ofi1_I2C_DO_RX_NACK_RESTART:	
 11256                           
 11257                           	psect	text85
 11258  0EEF                     __ptext85:	
 11259 ;; *************** function i1_I2C_DO_RX_NACK_STOP *****************
 11260 ;; Defined at:
 11261 ;;		line 482 in file "mcc_generated_files/i2c_master.c"
 11262 ;; Parameters:    Size  Location     Type
 11263 ;;		None
 11264 ;; Auto vars:     Size  Location     Type
 11265 ;;		None
 11266 ;; Return value:  Size  Location     Type
 11267 ;;                  1    wreg      enum E12103
 11268 ;; Registers used:
 11269 ;;		wreg, status,2, status,0, pclath, cstack
 11270 ;; Tracked objects:
 11271 ;;		On entry : 0/0
 11272 ;;		On exit  : 0/0
 11273 ;;		Unchanged: 0/0
 11274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11279 ;;Total ram usage:        0 bytes
 11280 ;; Hardware stack levels used:    1
 11281 ;; Hardware stack levels required when called:    1
 11282 ;; This function calls:
 11283 ;;		i1_I2C_MasterSendNack
 11284 ;; This function is called by:
 11285 ;;		i1_I2C_DO_RX
 11286 ;; This function uses a non-reentrant model
 11287 ;;
 11288                           
 11289                           
 11290                           ;psect for function i1_I2C_DO_RX_NACK_STOP
 11291  0EEF                     i1_I2C_DO_RX_NACK_STOP:	
 11292  0EEF                     i1l2569:	
 11293                           ;incstack = 0
 11294 ;; hardware stack exceeded
 11295                           ; Regs used in i1_I2C_DO_RX_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 11296                           
 11297                           
 11298                           ;i2c_master.c: 484: I2C_MasterSendNack();
 11299  0EEF  318E  26D3         	fcall	i1_I2C_MasterSendNack
 11300                           
 11301                           ;i2c_master.c: 485: return I2C_SEND_STOP;
 11302  0EF1  300A               	movlw	10
 11303  0EF2  0008               	return
 11304  0EF3                     __end_ofi1_I2C_DO_RX_NACK_STOP:	
 11305                           
 11306                           	psect	text86
 11307  0EEB                     __ptext86:	
 11308 ;; *************** function i1_I2C_DO_RX_ACK *****************
 11309 ;; Defined at:
 11310 ;;		line 475 in file "mcc_generated_files/i2c_master.c"
 11311 ;; Parameters:    Size  Location     Type
 11312 ;;		None
 11313 ;; Auto vars:     Size  Location     Type
 11314 ;;		None
 11315 ;; Return value:  Size  Location     Type
 11316 ;;                  1    wreg      enum E12103
 11317 ;; Registers used:
 11318 ;;		wreg, status,2, status,0, pclath, cstack
 11319 ;; Tracked objects:
 11320 ;;		On entry : 0/0
 11321 ;;		On exit  : 0/0
 11322 ;;		Unchanged: 0/0
 11323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11327 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11328 ;;Total ram usage:        0 bytes
 11329 ;; Hardware stack levels used:    1
 11330 ;; Hardware stack levels required when called:    1
 11331 ;; This function calls:
 11332 ;;		i1_I2C_MasterSendAck
 11333 ;; This function is called by:
 11334 ;; This function uses a non-reentrant model
 11335 ;;
 11336                           
 11337                           
 11338                           ;psect for function i1_I2C_DO_RX_ACK
 11339  0EEB                     i1_I2C_DO_RX_ACK:	
 11340  0EEB                     i1l2727:	
 11341                           ;incstack = 0
 11342 ;; hardware stack exceeded
 11343                           ; Regs used in i1_I2C_DO_RX_ACK: [wreg+status,2+status,0+pclath+cstack]
 11344                           
 11345                           
 11346                           ;i2c_master.c: 477: I2C_MasterSendAck();
 11347  0EEB  318E  26D7         	fcall	i1_I2C_MasterSendAck
 11348                           
 11349                           ;i2c_master.c: 478: return I2C_RCEN;
 11350  0EED  3005               	movlw	5
 11351  0EEE  0008               	return
 11352  0EEF                     __end_ofi1_I2C_DO_RX_ACK:	
 11353                           
 11354                           	psect	text87
 11355  0EE7                     __ptext87:	
 11356 ;; *************** function i1_I2C_DO_SEND_STOP *****************
 11357 ;; Defined at:
 11358 ;;		line 469 in file "mcc_generated_files/i2c_master.c"
 11359 ;; Parameters:    Size  Location     Type
 11360 ;;		None
 11361 ;; Auto vars:     Size  Location     Type
 11362 ;;		None
 11363 ;; Return value:  Size  Location     Type
 11364 ;;                  1    wreg      enum E12103
 11365 ;; Registers used:
 11366 ;;		wreg, status,2, status,0, pclath, cstack
 11367 ;; Tracked objects:
 11368 ;;		On entry : 0/0
 11369 ;;		On exit  : 0/0
 11370 ;;		Unchanged: 0/0
 11371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11376 ;;Total ram usage:        0 bytes
 11377 ;; Hardware stack levels used:    1
 11378 ;; Hardware stack levels required when called:    1
 11379 ;; This function calls:
 11380 ;;		i1_I2C_MasterStop
 11381 ;; This function is called by:
 11382 ;;		i1_I2C_DO_TX
 11383 ;;		i1_I2C_DO_TX_EMPTY
 11384 ;;		i1_I2C_DO_ADDRESS_NACK
 11385 ;; This function uses a non-reentrant model
 11386 ;;
 11387                           
 11388                           
 11389                           ;psect for function i1_I2C_DO_SEND_STOP
 11390  0EE7                     i1_I2C_DO_SEND_STOP:	
 11391  0EE7                     i1l2563:	
 11392                           ;incstack = 0
 11393 ;; hardware stack exceeded
 11394                           ; Regs used in i1_I2C_DO_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 11395                           
 11396                           
 11397                           ;i2c_master.c: 471: I2C_MasterStop();
 11398  0EE7  318E  26A2         	fcall	i1_I2C_MasterStop
 11399                           
 11400                           ;i2c_master.c: 472: return I2C_IDLE;
 11401  0EE9  3000               	movlw	0
 11402  0EEA  0008               	return
 11403  0EEB                     __end_ofi1_I2C_DO_SEND_STOP:	
 11404                           
 11405                           	psect	text88
 11406  0EE3                     __ptext88:	
 11407 ;; *************** function i1_I2C_DO_SEND_RESTART *****************
 11408 ;; Defined at:
 11409 ;;		line 463 in file "mcc_generated_files/i2c_master.c"
 11410 ;; Parameters:    Size  Location     Type
 11411 ;;		None
 11412 ;; Auto vars:     Size  Location     Type
 11413 ;;		None
 11414 ;; Return value:  Size  Location     Type
 11415 ;;                  1    wreg      enum E12103
 11416 ;; Registers used:
 11417 ;;		wreg, status,2, status,0, pclath, cstack
 11418 ;; Tracked objects:
 11419 ;;		On entry : 0/0
 11420 ;;		On exit  : 0/0
 11421 ;;		Unchanged: 0/0
 11422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11426 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11427 ;;Total ram usage:        0 bytes
 11428 ;; Hardware stack levels used:    1
 11429 ;; Hardware stack levels required when called:    1
 11430 ;; This function calls:
 11431 ;;		i1_I2C_MasterEnableRestart
 11432 ;; This function is called by:
 11433 ;;		i1_I2C_DO_TX_EMPTY
 11434 ;;		i1_I2C_DO_ADDRESS_NACK
 11435 ;; This function uses a non-reentrant model
 11436 ;;
 11437                           
 11438                           
 11439                           ;psect for function i1_I2C_DO_SEND_RESTART
 11440  0EE3                     i1_I2C_DO_SEND_RESTART:	
 11441  0EE3                     i1l2557:	
 11442                           ;incstack = 0
 11443 ;; hardware stack exceeded
 11444                           ; Regs used in i1_I2C_DO_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 11445                           
 11446                           
 11447                           ;i2c_master.c: 465: I2C_MasterEnableRestart();
 11448  0EE3  318E  269F         	fcall	i1_I2C_MasterEnableRestart
 11449                           
 11450                           ;i2c_master.c: 466: return I2C_SEND_ADR_READ;
 11451  0EE5  3001               	movlw	1
 11452  0EE6  0008               	return
 11453  0EE7                     __end_ofi1_I2C_DO_SEND_RESTART:	
 11454                           
 11455                           	psect	text89
 11456  0EDF                     __ptext89:	
 11457 ;; *************** function i1_I2C_DO_SEND_RESTART_WRITE *****************
 11458 ;; Defined at:
 11459 ;;		line 456 in file "mcc_generated_files/i2c_master.c"
 11460 ;; Parameters:    Size  Location     Type
 11461 ;;		None
 11462 ;; Auto vars:     Size  Location     Type
 11463 ;;		None
 11464 ;; Return value:  Size  Location     Type
 11465 ;;                  1    wreg      enum E12103
 11466 ;; Registers used:
 11467 ;;		wreg, status,2, status,0, pclath, cstack
 11468 ;; Tracked objects:
 11469 ;;		On entry : 0/0
 11470 ;;		On exit  : 0/0
 11471 ;;		Unchanged: 0/0
 11472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11476 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11477 ;;Total ram usage:        0 bytes
 11478 ;; Hardware stack levels used:    1
 11479 ;; Hardware stack levels required when called:    1
 11480 ;; This function calls:
 11481 ;;		i1_I2C_MasterEnableRestart
 11482 ;; This function is called by:
 11483 ;;		i1_I2C_DO_TX
 11484 ;; This function uses a non-reentrant model
 11485 ;;
 11486                           
 11487                           
 11488                           ;psect for function i1_I2C_DO_SEND_RESTART_WRITE
 11489  0EDF                     i1_I2C_DO_SEND_RESTART_WRITE:	
 11490  0EDF                     i1l2551:	
 11491                           ;incstack = 0
 11492 ;; hardware stack exceeded
 11493                           ; Regs used in i1_I2C_DO_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 11494                           
 11495                           
 11496                           ;i2c_master.c: 458: I2C_MasterEnableRestart();
 11497  0EDF  318E  269F         	fcall	i1_I2C_MasterEnableRestart
 11498                           
 11499                           ;i2c_master.c: 459: return I2C_SEND_ADR_WRITE;
 11500  0EE1  3002               	movlw	2
 11501  0EE2  0008               	return
 11502  0EE3                     __end_ofi1_I2C_DO_SEND_RESTART_WRITE:	
 11503                           
 11504                           	psect	text90
 11505  0EDB                     __ptext90:	
 11506 ;; *************** function i1_I2C_DO_SEND_RESTART_READ *****************
 11507 ;; Defined at:
 11508 ;;		line 450 in file "mcc_generated_files/i2c_master.c"
 11509 ;; Parameters:    Size  Location     Type
 11510 ;;		None
 11511 ;; Auto vars:     Size  Location     Type
 11512 ;;		None
 11513 ;; Return value:  Size  Location     Type
 11514 ;;                  1    wreg      enum E12103
 11515 ;; Registers used:
 11516 ;;		wreg, status,2, status,0, pclath, cstack
 11517 ;; Tracked objects:
 11518 ;;		On entry : 0/0
 11519 ;;		On exit  : 0/0
 11520 ;;		Unchanged: 0/0
 11521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11526 ;;Total ram usage:        0 bytes
 11527 ;; Hardware stack levels used:    1
 11528 ;; Hardware stack levels required when called:    1
 11529 ;; This function calls:
 11530 ;;		i1_I2C_MasterEnableRestart
 11531 ;; This function is called by:
 11532 ;;		i1_I2C_DO_TX
 11533 ;; This function uses a non-reentrant model
 11534 ;;
 11535                           
 11536                           
 11537                           ;psect for function i1_I2C_DO_SEND_RESTART_READ
 11538  0EDB                     i1_I2C_DO_SEND_RESTART_READ:	
 11539  0EDB                     i1l2545:	
 11540                           ;incstack = 0
 11541 ;; hardware stack exceeded
 11542                           ; Regs used in i1_I2C_DO_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 11543                           
 11544                           
 11545                           ;i2c_master.c: 452: I2C_MasterEnableRestart();
 11546  0EDB  318E  269F         	fcall	i1_I2C_MasterEnableRestart
 11547                           
 11548                           ;i2c_master.c: 453: return I2C_SEND_ADR_READ;
 11549  0EDD  3001               	movlw	1
 11550  0EDE  0008               	return
 11551  0EDF                     __end_ofi1_I2C_DO_SEND_RESTART_READ:	
 11552                           
 11553                           	psect	text91
 11554  0F29                     __ptext91:	
 11555 ;; *************** function i1_I2C_DO_RCEN *****************
 11556 ;; Defined at:
 11557 ;;		line 402 in file "mcc_generated_files/i2c_master.c"
 11558 ;; Parameters:    Size  Location     Type
 11559 ;;		None
 11560 ;; Auto vars:     Size  Location     Type
 11561 ;;		None
 11562 ;; Return value:  Size  Location     Type
 11563 ;;                  1    wreg      enum E12103
 11564 ;; Registers used:
 11565 ;;		wreg, status,2, status,0, pclath, cstack
 11566 ;; Tracked objects:
 11567 ;;		On entry : 0/0
 11568 ;;		On exit  : 0/0
 11569 ;;		Unchanged: 0/0
 11570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11575 ;;Total ram usage:        0 bytes
 11576 ;; Hardware stack levels used:    1
 11577 ;; Hardware stack levels required when called:    1
 11578 ;; This function calls:
 11579 ;;		i1_I2C_MasterStartRx
 11580 ;; This function is called by:
 11581 ;; This function uses a non-reentrant model
 11582 ;;
 11583                           
 11584                           
 11585                           ;psect for function i1_I2C_DO_RCEN
 11586  0F29                     i1_I2C_DO_RCEN:	
 11587  0F29                     i1l2699:	
 11588                           ;incstack = 0
 11589 ;; hardware stack exceeded
 11590                           ; Regs used in i1_I2C_DO_RCEN: [wreg+status,2+status,0+pclath+cstack]
 11591                           
 11592                           
 11593                           ;i2c_master.c: 404: I2C_Status.addressNackCheck = 0;
 11594  0F29  0020               	movlb	0	; select bank0
 11595  0F2A  103C               	bcf	_I2C_Status+28,0
 11596                           
 11597                           ;i2c_master.c: 405: I2C_MasterStartRx();
 11598  0F2B  318E  26A5         	fcall	i1_I2C_MasterStartRx
 11599                           
 11600                           ;i2c_master.c: 406: return I2C_RX;
 11601  0F2D  3004               	movlw	4
 11602  0F2E  0008               	return
 11603  0F2F                     __end_ofi1_I2C_DO_RCEN:	
 11604                           
 11605                           	psect	text92
 11606  02C7                     __ptext92:	
 11607 ;; *************** function i1_I2C_DO_RX *****************
 11608 ;; Defined at:
 11609 ;;		line 378 in file "mcc_generated_files/i2c_master.c"
 11610 ;; Parameters:    Size  Location     Type
 11611 ;;		None
 11612 ;; Auto vars:     Size  Location     Type
 11613 ;;		None
 11614 ;; Return value:  Size  Location     Type
 11615 ;;                  1    wreg      enum E12103
 11616 ;; Registers used:
 11617 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11618 ;; Tracked objects:
 11619 ;;		On entry : 0/0
 11620 ;;		On exit  : 0/0
 11621 ;;		Unchanged: 0/0
 11622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11625 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11626 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11627 ;;Total ram usage:        1 bytes
 11628 ;; Hardware stack levels used:    1
 11629 ;; Hardware stack levels required when called:    3
 11630 ;; This function calls:
 11631 ;;		Absolute function
 11632 ;;		i1_I2C_CallbackReturnReset
 11633 ;;		i1_I2C_CallbackReturnStop
 11634 ;;		i1_I2C_DO_RX_NACK_RESTART
 11635 ;;		i1_I2C_DO_RX_NACK_STOP
 11636 ;;		i1_I2C_MasterGetRxData
 11637 ;;		i1_I2C_MasterSendAck
 11638 ;;		i1_rd1RegCompleteHandler
 11639 ;;		i1_rd2RegCompleteHandler
 11640 ;;		i1_rdBlkRegCompleteHandler
 11641 ;;		i1_wr1RegCompleteHandler
 11642 ;;		i1_wr2RegCompleteHandler
 11643 ;; This function is called by:
 11644 ;; This function uses a non-reentrant model
 11645 ;;
 11646                           
 11647                           
 11648                           ;psect for function i1_I2C_DO_RX
 11649  02C7                     i1_I2C_DO_RX:	
 11650  02C7                     i1l5445:	
 11651                           ;incstack = 0
 11652 ;; hardware stack exceeded
 11653                           ; Regs used in i1_I2C_DO_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11654                           
 11655                           
 11656                           ;i2c_master.c: 380: *I2C_Status.data_ptr++ = I2C_MasterGetRxData();
 11657  02C7  318E  26A8  3182   	fcall	i1_I2C_MasterGetRxData
 11658  02CA  00FA               	movwf	??i1_I2C_DO_RX
 11659  02CB  0020               	movlb	0	; select bank0
 11660  02CC  0837               	movf	low ((_I2C_Status| 0+23)),w
 11661  02CD  0086               	movwf	6
 11662  02CE  0187               	clrf	7
 11663  02CF  087A               	movf	??i1_I2C_DO_RX,w
 11664  02D0  0081               	movwf	1
 11665  02D1  3001               	movlw	1
 11666  02D2  00FA               	movwf	??i1_I2C_DO_RX
 11667  02D3  087A               	movf	??i1_I2C_DO_RX,w
 11668  02D4  07B7               	addwf	low ((_I2C_Status| 0+23)),f
 11669                           
 11670                           ;i2c_master.c: 381: if(--I2C_Status.data_length)
 11671  02D5  3001               	movlw	1
 11672  02D6  02B8               	subwf	_I2C_Status+24,f
 11673  02D7  3000               	movlw	0
 11674  02D8  3BB9               	subwfb	_I2C_Status+25,f
 11675  02D9  0838               	movf	_I2C_Status+24,w
 11676  02DA  0439               	iorwf	_I2C_Status+25,w
 11677  02DB  1903               	btfsc	3,2
 11678  02DC  2AE1               	goto	i1l403
 11679                           
 11680                           ;i2c_master.c: 382: {
 11681                           ;i2c_master.c: 383: I2C_MasterSendAck();
 11682  02DD  318E  26D7         	fcall	i1_I2C_MasterSendAck
 11683                           
 11684                           ;i2c_master.c: 384: return I2C_RCEN;
 11685  02DF  3005               	movlw	5
 11686                           
 11687                           ;i2c_master.c: 385: }
 11688  02E0  0008               	return
 11689  02E1                     i1l403:	
 11690                           
 11691                           ;i2c_master.c: 386: else
 11692                           ;i2c_master.c: 387: {
 11693                           ;i2c_master.c: 388: I2C_Status.bufferFree = 1;
 11694  02E1  15BC               	bsf	_I2C_Status+28,3
 11695                           
 11696                           ;i2c_master.c: 389: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
 11697  02E2  2AE9               	goto	i1l5469
 11698  02E3                     i1l5459:	
 11699                           ;i2c_master.c: 390: {
 11700                           ;i2c_master.c: 391: case I2C_RESTART_WRITE:
 11701                           
 11702                           
 11703                           ;i2c_master.c: 392: case I2C_RESTART_READ:
 11704                           ;i2c_master.c: 393: return I2C_DO_RX_NACK_RESTART();
 11705  02E3  318E  26F3         	fcall	i1_I2C_DO_RX_NACK_RESTART
 11706  02E5  0008               	return
 11707  02E6                     i1l5463:	
 11708                           ;i2c_master.c: 395: case I2C_CONTINUE:
 11709                           
 11710                           ;i2c_master.c: 394: default:
 11711                           
 11712                           
 11713                           ;i2c_master.c: 396: case I2C_STOP:
 11714                           ;i2c_master.c: 397: return I2C_DO_RX_NACK_STOP();
 11715  02E6  318E  26EF         	fcall	i1_I2C_DO_RX_NACK_STOP
 11716                           
 11717                           ;i2c_master.c: 398: }
 11718  02E8  0008               	return
 11719  02E9                     i1l5469:	
 11720  02E9  0020               	movlb	0	; select bank0
 11721  02EA  082C               	movf	low ((_I2C_Status| 0+12)),w
 11722  02EB  00FA               	movwf	??i1_I2C_DO_RX
 11723  02EC  087A               	movf	??i1_I2C_DO_RX,w
 11724  02ED  00F9               	movwf	i1I2C_CallbackReturnReset@funPtr
 11725  02EE  0821               	movf	_I2C_Status+1,w
 11726  02EF  008A               	movwf	10
 11727  02F0  0820               	movf	_I2C_Status,w
 11728  02F1  000A               	callw
 11729  02F2  3182               	pagesel	$
 11730                           
 11731                           ; Switch size 1, requested type "space"
 11732                           ; Number of cases is 4, Range of values is 1 to 4
 11733                           ; switch strategies available:
 11734                           ; Name         Instructions Cycles
 11735                           ; simple_byte           13     7 (average)
 11736                           ; direct_byte           17     9 (fixed)
 11737                           ; jumptable            263     9 (fixed)
 11738                           ;	Chosen strategy is simple_byte
 11739  02F3  3A01               	xorlw	1	; case 1
 11740  02F4  1903               	skipnz
 11741  02F5  2AE6               	goto	i1l5463
 11742  02F6  3A03               	xorlw	3	; case 2
 11743  02F7  1903               	skipnz
 11744  02F8  2AE3               	goto	i1l5459
 11745  02F9  3A01               	xorlw	1	; case 3
 11746  02FA  1903               	skipnz
 11747  02FB  2AE3               	goto	i1l5459
 11748  02FC  3A07               	xorlw	7	; case 4
 11749  02FD  1903               	skipnz
 11750  02FE  2AE6               	goto	i1l5463
 11751  02FF  2AE6               	goto	i1l5463
 11752  0300  0008               	return
 11753  0301                     __end_ofi1_I2C_DO_RX:	
 11754                           
 11755                           	psect	text93
 11756  01BC                     __ptext93:	
 11757 ;; *************** function i1_I2C_DO_TX *****************
 11758 ;; Defined at:
 11759 ;;		line 354 in file "mcc_generated_files/i2c_master.c"
 11760 ;; Parameters:    Size  Location     Type
 11761 ;;		None
 11762 ;; Auto vars:     Size  Location     Type
 11763 ;;		None
 11764 ;; Return value:  Size  Location     Type
 11765 ;;                  1    wreg      enum E12103
 11766 ;; Registers used:
 11767 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11768 ;; Tracked objects:
 11769 ;;		On entry : 0/0
 11770 ;;		On exit  : 0/0
 11771 ;;		Unchanged: 0/0
 11772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11774 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11775 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11776 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11777 ;;Total ram usage:        3 bytes
 11778 ;; Hardware stack levels used:    1
 11779 ;; Hardware stack levels required when called:    3
 11780 ;; This function calls:
 11781 ;;		Absolute function
 11782 ;;		i1_I2C_CallbackReturnReset
 11783 ;;		i1_I2C_CallbackReturnStop
 11784 ;;		i1_I2C_DO_SEND_RESTART_READ
 11785 ;;		i1_I2C_DO_SEND_RESTART_WRITE
 11786 ;;		i1_I2C_DO_SEND_STOP
 11787 ;;		i1_I2C_MasterIsNack
 11788 ;;		i1_I2C_MasterSendTxData
 11789 ;;		i1_rd1RegCompleteHandler
 11790 ;;		i1_rd2RegCompleteHandler
 11791 ;;		i1_rdBlkRegCompleteHandler
 11792 ;;		i1_wr1RegCompleteHandler
 11793 ;;		i1_wr2RegCompleteHandler
 11794 ;; This function is called by:
 11795 ;; This function uses a non-reentrant model
 11796 ;;
 11797                           
 11798                           
 11799                           ;psect for function i1_I2C_DO_TX
 11800  01BC                     i1_I2C_DO_TX:	
 11801  01BC                     i1l5415:	
 11802                           ;incstack = 0
 11803 ;; hardware stack exceeded
 11804                           ; Regs used in i1_I2C_DO_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11805                           
 11806                           
 11807                           ;i2c_master.c: 356: if(I2C_MasterIsNack())
 11808  01BC  318F  2723  3181   	fcall	i1_I2C_MasterIsNack
 11809  01BF  3A00               	xorlw	0
 11810  01C0  1D03               	btfss	3,2
 11811  01C1  29CC               	goto	i1l5433
 11812  01C2  29E8               	goto	i1l387
 11813  01C3                     i1l5419:	
 11814                           ;i2c_master.c: 359: {
 11815                           ;i2c_master.c: 360: case I2C_RESTART_READ:
 11816                           
 11817                           ;i2c_master.c: 357: {
 11818                           ;i2c_master.c: 358: switch(I2C_Status.callbackTable[I2C_DATA_NACK](I2C_Status.callbackPa
      +                          yload[I2C_DATA_NACK]))
 11819                           
 11820                           
 11821                           ;i2c_master.c: 361: return I2C_DO_SEND_RESTART_READ();
 11822  01C3  318E  26DB         	fcall	i1_I2C_DO_SEND_RESTART_READ
 11823  01C5  0008               	return
 11824  01C6                     i1l5423:	
 11825                           ;i2c_master.c: 362: case I2C_RESTART_WRITE:
 11826                           
 11827                           
 11828                           ;i2c_master.c: 363: return I2C_DO_SEND_RESTART_WRITE();
 11829  01C6  318E  26DF         	fcall	i1_I2C_DO_SEND_RESTART_WRITE
 11830  01C8  0008               	return
 11831  01C9                     i1l5427:	
 11832                           ;i2c_master.c: 365: case I2C_CONTINUE:
 11833                           
 11834                           ;i2c_master.c: 364: default:
 11835                           
 11836                           
 11837                           ;i2c_master.c: 366: case I2C_STOP:
 11838                           ;i2c_master.c: 367: return I2C_DO_SEND_STOP();
 11839  01C9  318E  26E7         	fcall	i1_I2C_DO_SEND_STOP
 11840                           
 11841                           ;i2c_master.c: 368: }
 11842  01CB  0008               	return
 11843  01CC                     i1l5433:	
 11844  01CC  0020               	movlb	0	; select bank0
 11845  01CD  082F               	movf	low ((_I2C_Status| 0+15)),w
 11846  01CE  00FA               	movwf	??i1_I2C_DO_TX
 11847  01CF  087A               	movf	??i1_I2C_DO_TX,w
 11848  01D0  00F9               	movwf	i1I2C_CallbackReturnReset@funPtr
 11849  01D1  3006               	movlw	6
 11850  01D2  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
 11851  01D3  0086               	movwf	6
 11852  01D4  0187               	clrf	7
 11853  01D5  3F41               	moviw [1]fsr1
 11854  01D6  008A               	movwf	10
 11855  01D7  3F40               	moviw [0]fsr1
 11856  01D8  000A               	callw
 11857  01D9  3181               	pagesel	$
 11858                           
 11859                           ; Switch size 1, requested type "space"
 11860                           ; Number of cases is 4, Range of values is 1 to 4
 11861                           ; switch strategies available:
 11862                           ; Name         Instructions Cycles
 11863                           ; simple_byte           13     7 (average)
 11864                           ; direct_byte           17     9 (fixed)
 11865                           ; jumptable            263     9 (fixed)
 11866                           ;	Chosen strategy is simple_byte
 11867  01DA  3A01               	xorlw	1	; case 1
 11868  01DB  1903               	skipnz
 11869  01DC  29C9               	goto	i1l5427
 11870  01DD  3A03               	xorlw	3	; case 2
 11871  01DE  1903               	skipnz
 11872  01DF  29C3               	goto	i1l5419
 11873  01E0  3A01               	xorlw	1	; case 3
 11874  01E1  1903               	skipnz
 11875  01E2  29C6               	goto	i1l5423
 11876  01E3  3A07               	xorlw	7	; case 4
 11877  01E4  1903               	skipnz
 11878  01E5  29C9               	goto	i1l5427
 11879  01E6  29C9               	goto	i1l5427
 11880                           
 11881                           ;i2c_master.c: 369: }
 11882  01E7  0008               	return
 11883  01E8                     i1l387:	
 11884                           
 11885                           ;i2c_master.c: 370: else
 11886                           ;i2c_master.c: 371: {
 11887                           ;i2c_master.c: 372: I2C_Status.addressNackCheck = 0;
 11888  01E8  0020               	movlb	0	; select bank0
 11889  01E9  103C               	bcf	_I2C_Status+28,0
 11890                           
 11891                           ;i2c_master.c: 373: I2C_MasterSendTxData(*I2C_Status.data_ptr++);
 11892  01EA  3017               	movlw	23
 11893  01EB  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
 11894  01EC  0086               	movwf	6
 11895  01ED  0187               	clrf	7
 11896  01EE  3F40               	moviw [0]fsr1
 11897  01EF  0084               	movwf	4
 11898  01F0  0185               	clrf	5
 11899  01F1  0A81               	incf	1,f
 11900  01F2  0800               	movf	0,w
 11901  01F3  318F  270F  3181   	fcall	i1_I2C_MasterSendTxData
 11902                           
 11903                           ;i2c_master.c: 374: return (--I2C_Status.data_length)?I2C_TX:I2C_TX_EMPTY;
 11904  01F6  3001               	movlw	1
 11905  01F7  0020               	movlb	0	; select bank0
 11906  01F8  02B8               	subwf	_I2C_Status+24,f
 11907  01F9  3000               	movlw	0
 11908  01FA  3BB9               	subwfb	_I2C_Status+25,f
 11909  01FB  0838               	movf	_I2C_Status+24,w
 11910  01FC  0439               	iorwf	_I2C_Status+25,w
 11911  01FD  1D03               	btfss	3,2
 11912  01FE  2A01               	goto	i1l5441
 11913  01FF  3006               	movlw	6
 11914  0200  2A02               	goto	L2
 11915  0201                     i1l5441:	
 11916  0201  3003               	movlw	3
 11917  0202                     L2:	
 11918  0202  00FB               	movwf	i1_I2C_DO_TX$794
 11919  0203  3000               	movlw	0
 11920  0204  00FC               	movwf	i1_I2C_DO_TX$794+1
 11921  0205  087B               	movf	i1_I2C_DO_TX$794,w
 11922  0206  0008               	return
 11923  0207                     __end_ofi1_I2C_DO_TX:	
 11924                           
 11925                           	psect	text94
 11926  0F4D                     __ptext94:	
 11927 ;; *************** function i1_I2C_DO_SEND_ADR_WRITE *****************
 11928 ;; Defined at:
 11929 ;;		line 347 in file "mcc_generated_files/i2c_master.c"
 11930 ;; Parameters:    Size  Location     Type
 11931 ;;		None
 11932 ;; Auto vars:     Size  Location     Type
 11933 ;;		None
 11934 ;; Return value:  Size  Location     Type
 11935 ;;                  1    wreg      enum E12103
 11936 ;; Registers used:
 11937 ;;		wreg, status,2, status,0, pclath, cstack
 11938 ;; Tracked objects:
 11939 ;;		On entry : 0/0
 11940 ;;		On exit  : 0/0
 11941 ;;		Unchanged: 0/0
 11942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11947 ;;Total ram usage:        0 bytes
 11948 ;; Hardware stack levels used:    1
 11949 ;; Hardware stack levels required when called:    1
 11950 ;; This function calls:
 11951 ;;		i1_I2C_MasterSendTxData
 11952 ;; This function is called by:
 11953 ;; This function uses a non-reentrant model
 11954 ;;
 11955                           
 11956                           
 11957                           ;psect for function i1_I2C_DO_SEND_ADR_WRITE
 11958  0F4D                     i1_I2C_DO_SEND_ADR_WRITE:	
 11959  0F4D                     i1l2635:	
 11960                           ;incstack = 0
 11961 ;; hardware stack exceeded
 11962                           ; Regs used in i1_I2C_DO_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 11963                           
 11964                           
 11965                           ;i2c_master.c: 349: I2C_Status.addressNackCheck = 1;
 11966  0F4D  0020               	movlb	0	; select bank0
 11967  0F4E  143C               	bsf	_I2C_Status+28,0
 11968                           
 11969                           ;i2c_master.c: 350: I2C_MasterSendTxData(I2C_Status.address << 1);
 11970  0F4F  3536               	lslf	_I2C_Status+22,w
 11971  0F50  318F  270F         	fcall	i1_I2C_MasterSendTxData
 11972                           
 11973                           ;i2c_master.c: 351: return I2C_TX;
 11974  0F52  3003               	movlw	3
 11975  0F53  0008               	return
 11976  0F54                     __end_ofi1_I2C_DO_SEND_ADR_WRITE:	
 11977                           
 11978                           	psect	text95
 11979  0F63                     __ptext95:	
 11980 ;; *************** function i1_I2C_DO_SEND_ADR_READ *****************
 11981 ;; Defined at:
 11982 ;;		line 340 in file "mcc_generated_files/i2c_master.c"
 11983 ;; Parameters:    Size  Location     Type
 11984 ;;		None
 11985 ;; Auto vars:     Size  Location     Type
 11986 ;;		None
 11987 ;; Return value:  Size  Location     Type
 11988 ;;                  1    wreg      enum E12103
 11989 ;; Registers used:
 11990 ;;		wreg, status,2, status,0, pclath, cstack
 11991 ;; Tracked objects:
 11992 ;;		On entry : 0/0
 11993 ;;		On exit  : 0/0
 11994 ;;		Unchanged: 0/0
 11995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12000 ;;Total ram usage:        0 bytes
 12001 ;; Hardware stack levels used:    1
 12002 ;; Hardware stack levels required when called:    1
 12003 ;; This function calls:
 12004 ;;		i1_I2C_MasterSendTxData
 12005 ;; This function is called by:
 12006 ;; This function uses a non-reentrant model
 12007 ;;
 12008                           
 12009                           
 12010                           ;psect for function i1_I2C_DO_SEND_ADR_READ
 12011  0F63                     i1_I2C_DO_SEND_ADR_READ:	
 12012  0F63                     i1l2627:	
 12013                           ;incstack = 0
 12014 ;; hardware stack exceeded
 12015                           ; Regs used in i1_I2C_DO_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 12016                           
 12017                           
 12018                           ;i2c_master.c: 342: I2C_Status.addressNackCheck = 1;
 12019  0F63  0020               	movlb	0	; select bank0
 12020  0F64  143C               	bsf	_I2C_Status+28,0
 12021                           
 12022                           ;i2c_master.c: 343: I2C_MasterSendTxData(I2C_Status.address << 1 | 1);
 12023  0F65  1403               	setc
 12024  0F66  0D36               	rlf	_I2C_Status+22,w
 12025  0F67  318F  270F         	fcall	i1_I2C_MasterSendTxData
 12026                           
 12027                           ;i2c_master.c: 344: return I2C_RCEN;
 12028  0F69  3005               	movlw	5
 12029  0F6A  0008               	return
 12030  0F6B                     __end_ofi1_I2C_DO_SEND_ADR_READ:	
 12031                           
 12032                           	psect	text96
 12033  0F14                     __ptext96:	
 12034 ;; *************** function i1_I2C_DO_IDLE *****************
 12035 ;; Defined at:
 12036 ;;		line 333 in file "mcc_generated_files/i2c_master.c"
 12037 ;; Parameters:    Size  Location     Type
 12038 ;;		None
 12039 ;; Auto vars:     Size  Location     Type
 12040 ;;		None
 12041 ;; Return value:  Size  Location     Type
 12042 ;;                  1    wreg      enum E12103
 12043 ;; Registers used:
 12044 ;;		wreg, status,2
 12045 ;; Tracked objects:
 12046 ;;		On entry : 0/0
 12047 ;;		On exit  : 0/0
 12048 ;;		Unchanged: 0/0
 12049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12053 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12054 ;;Total ram usage:        0 bytes
 12055 ;; Hardware stack levels used:    1
 12056 ;; This function calls:
 12057 ;;		Nothing
 12058 ;; This function is called by:
 12059 ;; This function uses a non-reentrant model
 12060 ;;
 12061                           
 12062                           
 12063                           ;psect for function i1_I2C_DO_IDLE
 12064  0F14                     i1_I2C_DO_IDLE:	
 12065  0F14                     i1l2619:	
 12066                           ;incstack = 0
 12067 ;; hardware stack exceeded
 12068                           ; Regs used in i1_I2C_DO_IDLE: [wreg+status,2]
 12069                           
 12070                           
 12071                           ;i2c_master.c: 335: I2C_Status.busy = 0;
 12072  0F14  0020               	movlb	0	; select bank0
 12073  0F15  10BC               	bcf	_I2C_Status+28,1
 12074                           
 12075                           ;i2c_master.c: 336: I2C_Status.error = I2C_NOERR;
 12076  0F16  01BB               	clrf	_I2C_Status+27
 12077                           
 12078                           ;i2c_master.c: 337: return I2C_RESET;
 12079  0F17  300E               	movlw	14
 12080  0F18  0008               	return
 12081  0F19                     __end_ofi1_I2C_DO_IDLE:	
 12082                           
 12083                           	psect	text97
 12084  053A                     __ptext97:	
 12085 ;; *************** function i1_I2C_DO_TX_EMPTY *****************
 12086 ;; Defined at:
 12087 ;;		line 409 in file "mcc_generated_files/i2c_master.c"
 12088 ;; Parameters:    Size  Location     Type
 12089 ;;		None
 12090 ;; Auto vars:     Size  Location     Type
 12091 ;;		None
 12092 ;; Return value:  Size  Location     Type
 12093 ;;                  1    wreg      enum E12103
 12094 ;; Registers used:
 12095 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12096 ;; Tracked objects:
 12097 ;;		On entry : 0/0
 12098 ;;		On exit  : 0/0
 12099 ;;		Unchanged: 0/0
 12100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12103 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12104 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12105 ;;Total ram usage:        1 bytes
 12106 ;; Hardware stack levels used:    1
 12107 ;; Hardware stack levels required when called:    3
 12108 ;; This function calls:
 12109 ;;		Absolute function
 12110 ;;		i1_I2C_CallbackReturnReset
 12111 ;;		i1_I2C_CallbackReturnStop
 12112 ;;		i1_I2C_DO_SEND_RESTART
 12113 ;;		i1_I2C_DO_SEND_STOP
 12114 ;;		i1_I2C_MasterSetIrq
 12115 ;;		i1_rd1RegCompleteHandler
 12116 ;;		i1_rd2RegCompleteHandler
 12117 ;;		i1_rdBlkRegCompleteHandler
 12118 ;;		i1_wr1RegCompleteHandler
 12119 ;;		i1_wr2RegCompleteHandler
 12120 ;; This function is called by:
 12121 ;; This function uses a non-reentrant model
 12122 ;;
 12123                           
 12124                           
 12125                           ;psect for function i1_I2C_DO_TX_EMPTY
 12126  053A                     i1_I2C_DO_TX_EMPTY:	
 12127  053A                     i1l5471:	
 12128                           ;incstack = 0
 12129 ;; hardware stack exceeded
 12130                           ; Regs used in i1_I2C_DO_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12131                           
 12132                           
 12133                           ;i2c_master.c: 411: I2C_Status.bufferFree = 1;
 12134  053A  0020               	movlb	0	; select bank0
 12135  053B  15BC               	bsf	_I2C_Status+28,3
 12136                           
 12137                           ;i2c_master.c: 412: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
 12138  053C  2D47               	goto	i1l5489
 12139  053D                     i1l5473:	
 12140                           ;i2c_master.c: 413: {
 12141                           ;i2c_master.c: 414: case I2C_RESTART_READ:
 12142                           
 12143                           
 12144                           ;i2c_master.c: 415: case I2C_RESTART_WRITE:
 12145                           ;i2c_master.c: 416: return I2C_DO_SEND_RESTART();
 12146  053D  318E  26E3         	fcall	i1_I2C_DO_SEND_RESTART
 12147  053F  0008               	return
 12148  0540                     i1l5477:	
 12149                           ;i2c_master.c: 417: case I2C_CONTINUE:
 12150                           
 12151                           
 12152                           ;i2c_master.c: 418: I2C_MasterSetIrq();
 12153  0540  318E  26AB         	fcall	i1_I2C_MasterSetIrq
 12154                           
 12155                           ;i2c_master.c: 419: return I2C_TX;
 12156  0542  3003               	movlw	3
 12157  0543  0008               	return
 12158  0544                     i1l5483:	
 12159                           ;i2c_master.c: 421: case I2C_STOP:
 12160                           
 12161                           ;i2c_master.c: 420: default:
 12162                           
 12163                           
 12164                           ;i2c_master.c: 422: return I2C_DO_SEND_STOP();
 12165  0544  318E  26E7         	fcall	i1_I2C_DO_SEND_STOP
 12166                           
 12167                           ;i2c_master.c: 423: }
 12168  0546  0008               	return
 12169  0547                     i1l5489:	
 12170  0547  0020               	movlb	0	; select bank0
 12171  0548  082C               	movf	low ((_I2C_Status| 0+12)),w
 12172  0549  00FA               	movwf	??i1_I2C_DO_TX_EMPTY
 12173  054A  087A               	movf	??i1_I2C_DO_TX_EMPTY,w
 12174  054B  00F9               	movwf	i1I2C_CallbackReturnReset@funPtr
 12175  054C  0821               	movf	_I2C_Status+1,w
 12176  054D  008A               	movwf	10
 12177  054E  0820               	movf	_I2C_Status,w
 12178  054F  000A               	callw
 12179  0550  3185               	pagesel	$
 12180                           
 12181                           ; Switch size 1, requested type "space"
 12182                           ; Number of cases is 4, Range of values is 1 to 4
 12183                           ; switch strategies available:
 12184                           ; Name         Instructions Cycles
 12185                           ; simple_byte           13     7 (average)
 12186                           ; direct_byte           17     9 (fixed)
 12187                           ; jumptable            263     9 (fixed)
 12188                           ;	Chosen strategy is simple_byte
 12189  0551  3A01               	xorlw	1	; case 1
 12190  0552  1903               	skipnz
 12191  0553  2D44               	goto	i1l5483
 12192  0554  3A03               	xorlw	3	; case 2
 12193  0555  1903               	skipnz
 12194  0556  2D3D               	goto	i1l5473
 12195  0557  3A01               	xorlw	1	; case 3
 12196  0558  1903               	skipnz
 12197  0559  2D3D               	goto	i1l5473
 12198  055A  3A07               	xorlw	7	; case 4
 12199  055B  1903               	skipnz
 12200  055C  2D40               	goto	i1l5477
 12201  055D  2D44               	goto	i1l5483
 12202  055E  0008               	return
 12203  055F                     __end_ofi1_I2C_DO_TX_EMPTY:	
 12204                           
 12205                           	psect	text98
 12206  0EAB                     __ptext98:	
 12207 ;; *************** function i1_I2C_MasterSetIrq *****************
 12208 ;; Defined at:
 12209 ;;		line 645 in file "mcc_generated_files/i2c_master.c"
 12210 ;; Parameters:    Size  Location     Type
 12211 ;;		None
 12212 ;; Auto vars:     Size  Location     Type
 12213 ;;		None
 12214 ;; Return value:  Size  Location     Type
 12215 ;;                  1    wreg      void 
 12216 ;; Registers used:
 12217 ;;		None
 12218 ;; Tracked objects:
 12219 ;;		On entry : 0/0
 12220 ;;		On exit  : 0/0
 12221 ;;		Unchanged: 0/0
 12222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12226 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12227 ;;Total ram usage:        0 bytes
 12228 ;; Hardware stack levels used:    1
 12229 ;; This function calls:
 12230 ;;		Nothing
 12231 ;; This function is called by:
 12232 ;;		i1_I2C_DO_TX_EMPTY
 12233 ;; This function uses a non-reentrant model
 12234 ;;
 12235                           
 12236                           
 12237                           ;psect for function i1_I2C_MasterSetIrq
 12238  0EAB                     i1_I2C_MasterSetIrq:	
 12239                           
 12240                           ;i2c_master.c: 647: PIR1bits.SSP1IF = 1;
 12241                           
 12242                           ;incstack = 0
 12243 ;; hardware stack exceeded
 12244                           ; Regs used in i1_I2C_MasterSetIrq: []
 12245  0EAB  0020               	movlb	0	; select bank0
 12246  0EAC  1590               	bsf	16,3	;volatile
 12247  0EAD  0008               	return
 12248  0EAE                     __end_ofi1_I2C_MasterSetIrq:	
 12249                           
 12250                           	psect	text99
 12251  0F23                     __ptext99:	
 12252 ;; *************** function i1_I2C_MasterIsNack *****************
 12253 ;; Defined at:
 12254 ;;		line 598 in file "mcc_generated_files/i2c_master.c"
 12255 ;; Parameters:    Size  Location     Type
 12256 ;;		None
 12257 ;; Auto vars:     Size  Location     Type
 12258 ;;		None
 12259 ;; Return value:  Size  Location     Type
 12260 ;;                  1    wreg      unsigned char 
 12261 ;; Registers used:
 12262 ;;		wreg, status,2, status,0
 12263 ;; Tracked objects:
 12264 ;;		On entry : 0/0
 12265 ;;		On exit  : 0/0
 12266 ;;		Unchanged: 0/0
 12267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12271 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12272 ;;Total ram usage:        0 bytes
 12273 ;; Hardware stack levels used:    1
 12274 ;; This function calls:
 12275 ;;		Nothing
 12276 ;; This function is called by:
 12277 ;;		i1_I2C_MasterFsm
 12278 ;;		i1_I2C_DO_TX
 12279 ;; This function uses a non-reentrant model
 12280 ;;
 12281                           
 12282                           
 12283                           ;psect for function i1_I2C_MasterIsNack
 12284  0F23                     i1_I2C_MasterIsNack:	
 12285                           
 12286                           ;i2c_master.c: 600: return SSP1CON2bits.ACKSTAT;
 12287                           
 12288                           ;incstack = 0
 12289 ;; hardware stack exceeded
 12290                           ; Regs used in i1_I2C_MasterIsNack: [wreg+status,2+status,0]
 12291  0F23  0024               	movlb	4	; select bank4
 12292  0F24  0E16               	swapf	22,w	;volatile
 12293  0F25  0C89               	rrf	9,f
 12294  0F26  0C89               	rrf	9,f
 12295  0F27  3901               	andlw	1
 12296  0F28  0008               	return
 12297  0F29                     __end_ofi1_I2C_MasterIsNack:	
 12298                           
 12299                           	psect	text100
 12300  0F0F                     __ptext100:	
 12301 ;; *************** function i1_I2C_MasterSendTxData *****************
 12302 ;; Defined at:
 12303 ;;		line 568 in file "mcc_generated_files/i2c_master.c"
 12304 ;; Parameters:    Size  Location     Type
 12305 ;;  data            1    wreg     unsigned char 
 12306 ;; Auto vars:     Size  Location     Type
 12307 ;;  data            1    0[COMMON] unsigned char 
 12308 ;; Return value:  Size  Location     Type
 12309 ;;                  1    wreg      void 
 12310 ;; Registers used:
 12311 ;;		wreg
 12312 ;; Tracked objects:
 12313 ;;		On entry : 0/0
 12314 ;;		On exit  : 0/0
 12315 ;;		Unchanged: 0/0
 12316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12318 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12320 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12321 ;;Total ram usage:        1 bytes
 12322 ;; Hardware stack levels used:    1
 12323 ;; This function calls:
 12324 ;;		Nothing
 12325 ;; This function is called by:
 12326 ;;		i1_I2C_DO_SEND_ADR_READ
 12327 ;;		i1_I2C_DO_SEND_ADR_WRITE
 12328 ;;		i1_I2C_DO_TX
 12329 ;; This function uses a non-reentrant model
 12330 ;;
 12331                           
 12332                           
 12333                           ;psect for function i1_I2C_MasterSendTxData
 12334  0F0F                     i1_I2C_MasterSendTxData:	
 12335                           
 12336                           ;incstack = 0
 12337 ;; hardware stack exceeded
 12338                           ; Regs used in i1_I2C_MasterSendTxData: [wreg]
 12339                           ;i1I2C_MasterSendTxData@data stored from wreg
 12340  0F0F  00F0               	movwf	i1I2C_MasterSendTxData@data
 12341                           
 12342                           ;i2c_master.c: 570: SSP1BUF = data;
 12343  0F10  0870               	movf	i1I2C_MasterSendTxData@data,w
 12344  0F11  0024               	movlb	4	; select bank4
 12345  0F12  0091               	movwf	17	;volatile
 12346  0F13  0008               	return
 12347  0F14                     __end_ofi1_I2C_MasterSendTxData:	
 12348                           
 12349                           	psect	text101
 12350  0ED7                     __ptext101:	
 12351 ;; *************** function i1_I2C_MasterSendAck *****************
 12352 ;; Defined at:
 12353 ;;		line 603 in file "mcc_generated_files/i2c_master.c"
 12354 ;; Parameters:    Size  Location     Type
 12355 ;;		None
 12356 ;; Auto vars:     Size  Location     Type
 12357 ;;		None
 12358 ;; Return value:  Size  Location     Type
 12359 ;;                  1    wreg      void 
 12360 ;; Registers used:
 12361 ;;		None
 12362 ;; Tracked objects:
 12363 ;;		On entry : 0/0
 12364 ;;		On exit  : 0/0
 12365 ;;		Unchanged: 0/0
 12366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12370 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12371 ;;Total ram usage:        0 bytes
 12372 ;; Hardware stack levels used:    1
 12373 ;; This function calls:
 12374 ;;		Nothing
 12375 ;; This function is called by:
 12376 ;;		i1_I2C_DO_RX
 12377 ;;		i1_I2C_DO_RX_ACK
 12378 ;; This function uses a non-reentrant model
 12379 ;;
 12380                           
 12381                           
 12382                           ;psect for function i1_I2C_MasterSendAck
 12383  0ED7                     i1_I2C_MasterSendAck:	
 12384                           
 12385                           ;i2c_master.c: 605: SSP1CON2bits.ACKDT = 0;
 12386                           
 12387                           ;incstack = 0
 12388 ;; hardware stack exceeded
 12389                           ; Regs used in i1_I2C_MasterSendAck: []
 12390  0ED7  0024               	movlb	4	; select bank4
 12391  0ED8  1296               	bcf	22,5	;volatile
 12392                           
 12393                           ;i2c_master.c: 606: SSP1CON2bits.ACKEN = 1;
 12394  0ED9  1616               	bsf	22,4	;volatile
 12395  0EDA  0008               	return
 12396  0EDB                     __end_ofi1_I2C_MasterSendAck:	
 12397                           
 12398                           	psect	text102
 12399  0EA8                     __ptext102:	
 12400 ;; *************** function i1_I2C_MasterGetRxData *****************
 12401 ;; Defined at:
 12402 ;;		line 563 in file "mcc_generated_files/i2c_master.c"
 12403 ;; Parameters:    Size  Location     Type
 12404 ;;		None
 12405 ;; Auto vars:     Size  Location     Type
 12406 ;;		None
 12407 ;; Return value:  Size  Location     Type
 12408 ;;                  1    wreg      unsigned char 
 12409 ;; Registers used:
 12410 ;;		wreg
 12411 ;; Tracked objects:
 12412 ;;		On entry : 0/0
 12413 ;;		On exit  : 0/0
 12414 ;;		Unchanged: 0/0
 12415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12419 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12420 ;;Total ram usage:        0 bytes
 12421 ;; Hardware stack levels used:    1
 12422 ;; This function calls:
 12423 ;;		Nothing
 12424 ;; This function is called by:
 12425 ;;		i1_I2C_DO_RX
 12426 ;; This function uses a non-reentrant model
 12427 ;;
 12428                           
 12429                           
 12430                           ;psect for function i1_I2C_MasterGetRxData
 12431  0EA8                     i1_I2C_MasterGetRxData:	
 12432                           
 12433                           ;i2c_master.c: 565: return SSP1BUF;
 12434                           
 12435                           ;incstack = 0
 12436 ;; hardware stack exceeded
 12437                           ; Regs used in i1_I2C_MasterGetRxData: [wreg]
 12438  0EA8  0024               	movlb	4	; select bank4
 12439  0EA9  0811               	movf	17,w	;volatile
 12440  0EAA  0008               	return
 12441  0EAB                     __end_ofi1_I2C_MasterGetRxData:	
 12442                           
 12443                           	psect	text103
 12444  0ED3                     __ptext103:	
 12445 ;; *************** function i1_I2C_MasterSendNack *****************
 12446 ;; Defined at:
 12447 ;;		line 609 in file "mcc_generated_files/i2c_master.c"
 12448 ;; Parameters:    Size  Location     Type
 12449 ;;		None
 12450 ;; Auto vars:     Size  Location     Type
 12451 ;;		None
 12452 ;; Return value:  Size  Location     Type
 12453 ;;                  1    wreg      void 
 12454 ;; Registers used:
 12455 ;;		None
 12456 ;; Tracked objects:
 12457 ;;		On entry : 0/0
 12458 ;;		On exit  : 0/0
 12459 ;;		Unchanged: 0/0
 12460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12465 ;;Total ram usage:        0 bytes
 12466 ;; Hardware stack levels used:    1
 12467 ;; This function calls:
 12468 ;;		Nothing
 12469 ;; This function is called by:
 12470 ;;		i1_I2C_DO_RX_NACK_STOP
 12471 ;;		i1_I2C_DO_RX_NACK_RESTART
 12472 ;; This function uses a non-reentrant model
 12473 ;;
 12474                           
 12475                           
 12476                           ;psect for function i1_I2C_MasterSendNack
 12477  0ED3                     i1_I2C_MasterSendNack:	
 12478                           
 12479                           ;i2c_master.c: 611: SSP1CON2bits.ACKDT = 1;
 12480                           
 12481                           ;incstack = 0
 12482 ;; hardware stack exceeded
 12483                           ; Regs used in i1_I2C_MasterSendNack: []
 12484  0ED3  0024               	movlb	4	; select bank4
 12485  0ED4  1696               	bsf	22,5	;volatile
 12486                           
 12487                           ;i2c_master.c: 612: SSP1CON2bits.ACKEN = 1;
 12488  0ED5  1616               	bsf	22,4	;volatile
 12489  0ED6  0008               	return
 12490  0ED7                     __end_ofi1_I2C_MasterSendNack:	
 12491                           
 12492                           	psect	text104
 12493  0EA5                     __ptext104:	
 12494 ;; *************** function i1_I2C_MasterStartRx *****************
 12495 ;; Defined at:
 12496 ;;		line 583 in file "mcc_generated_files/i2c_master.c"
 12497 ;; Parameters:    Size  Location     Type
 12498 ;;		None
 12499 ;; Auto vars:     Size  Location     Type
 12500 ;;		None
 12501 ;; Return value:  Size  Location     Type
 12502 ;;                  1    wreg      void 
 12503 ;; Registers used:
 12504 ;;		None
 12505 ;; Tracked objects:
 12506 ;;		On entry : 0/0
 12507 ;;		On exit  : 0/0
 12508 ;;		Unchanged: 0/0
 12509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12514 ;;Total ram usage:        0 bytes
 12515 ;; Hardware stack levels used:    1
 12516 ;; This function calls:
 12517 ;;		Nothing
 12518 ;; This function is called by:
 12519 ;;		i1_I2C_DO_RCEN
 12520 ;; This function uses a non-reentrant model
 12521 ;;
 12522                           
 12523                           
 12524                           ;psect for function i1_I2C_MasterStartRx
 12525  0EA5                     i1_I2C_MasterStartRx:	
 12526                           
 12527                           ;i2c_master.c: 585: SSP1CON2bits.RCEN = 1;
 12528                           
 12529                           ;incstack = 0
 12530 ;; hardware stack exceeded
 12531                           ; Regs used in i1_I2C_MasterStartRx: []
 12532  0EA5  0024               	movlb	4	; select bank4
 12533  0EA6  1596               	bsf	22,3	;volatile
 12534  0EA7  0008               	return
 12535  0EA8                     __end_ofi1_I2C_MasterStartRx:	
 12536                           
 12537                           	psect	text105
 12538  0E8E                     __ptext105:	
 12539 ;; *************** function i1_I2C_CallbackReturnReset *****************
 12540 ;; Defined at:
 12541 ;;		line 525 in file "mcc_generated_files/i2c_master.c"
 12542 ;; Parameters:    Size  Location     Type
 12543 ;;  funPtr          1    9[COMMON] PTR void 
 12544 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 12545 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 12546 ;; Auto vars:     Size  Location     Type
 12547 ;;		None
 12548 ;; Return value:  Size  Location     Type
 12549 ;;                  1    wreg      enum E97
 12550 ;; Registers used:
 12551 ;;		wreg
 12552 ;; Tracked objects:
 12553 ;;		On entry : 0/0
 12554 ;;		On exit  : 0/0
 12555 ;;		Unchanged: 0/0
 12556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12557 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12560 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12561 ;;Total ram usage:        1 bytes
 12562 ;; Hardware stack levels used:    1
 12563 ;; This function calls:
 12564 ;;		Nothing
 12565 ;; This function is called by:
 12566 ;;		i1_I2C_Open
 12567 ;;		i1_I2C_DO_TX
 12568 ;;		i1_I2C_DO_RX
 12569 ;;		i1_I2C_DO_TX_EMPTY
 12570 ;;		i1_I2C_DO_ADDRESS_NACK
 12571 ;;		_I2C_DO_TX
 12572 ;;		_I2C_DO_RX
 12573 ;;		_I2C_DO_TX_EMPTY
 12574 ;;		_I2C_DO_ADDRESS_NACK
 12575 ;;		_I2C_DO_RX_EMPTY
 12576 ;; This function uses a non-reentrant model
 12577 ;;
 12578                           
 12579                           
 12580                           ;psect for function i1_I2C_CallbackReturnReset
 12581  0E8E                     i1_I2C_CallbackReturnReset:	
 12582  0E8E                     i1l2585:	
 12583                           ;incstack = 0
 12584 ;; hardware stack exceeded
 12585                           ; Regs used in i1_I2C_CallbackReturnReset: [wreg]
 12586                           
 12587                           
 12588                           ;i2c_master.c: 527: return I2C_RESET_LINK;
 12589  0E8E  3005               	movlw	5
 12590  0E8F  0008               	return
 12591  0E90                     __end_ofi1_I2C_CallbackReturnReset:	
 12592                           
 12593                           	psect	text106
 12594  0E8C                     __ptext106:	
 12595 ;; *************** function i1_I2C_CallbackReturnStop *****************
 12596 ;; Defined at:
 12597 ;;		line 520 in file "mcc_generated_files/i2c_master.c"
 12598 ;; Parameters:    Size  Location     Type
 12599 ;;  funPtr          1    9[COMMON] PTR void 
 12600 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 12601 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 12602 ;; Auto vars:     Size  Location     Type
 12603 ;;		None
 12604 ;; Return value:  Size  Location     Type
 12605 ;;                  1    wreg      enum E97
 12606 ;; Registers used:
 12607 ;;		wreg
 12608 ;; Tracked objects:
 12609 ;;		On entry : 0/0
 12610 ;;		On exit  : 0/0
 12611 ;;		Unchanged: 0/0
 12612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12613 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12616 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12617 ;;Total ram usage:        1 bytes
 12618 ;; Hardware stack levels used:    1
 12619 ;; This function calls:
 12620 ;;		Nothing
 12621 ;; This function is called by:
 12622 ;;		i1_I2C_Open
 12623 ;;		i1_I2C_SetCallback
 12624 ;;		i1_I2C_DO_TX
 12625 ;;		i1_I2C_DO_RX
 12626 ;;		i1_I2C_DO_TX_EMPTY
 12627 ;;		i1_I2C_DO_ADDRESS_NACK
 12628 ;;		_I2C_DO_TX
 12629 ;;		_I2C_DO_RX
 12630 ;;		_I2C_DO_TX_EMPTY
 12631 ;;		_I2C_DO_ADDRESS_NACK
 12632 ;;		_I2C_DO_RX_EMPTY
 12633 ;; This function uses a non-reentrant model
 12634 ;;
 12635                           
 12636                           
 12637                           ;psect for function i1_I2C_CallbackReturnStop
 12638  0E8C                     i1_I2C_CallbackReturnStop:	
 12639  0E8C                     i1l2581:	
 12640                           ;incstack = 0
 12641 ;; hardware stack exceeded
 12642                           ; Regs used in i1_I2C_CallbackReturnStop: [wreg]
 12643                           
 12644                           
 12645                           ;i2c_master.c: 522: return I2C_STOP;
 12646  0E8C  3001               	movlw	1
 12647  0E8D  0008               	return
 12648  0E8E                     __end_ofi1_I2C_CallbackReturnStop:	
 12649                           
 12650                           	psect	text107
 12651  06AC                     __ptext107:	
 12652 ;; *************** function i1_rdBlkRegCompleteHandler *****************
 12653 ;; Defined at:
 12654 ;;		line 170 in file "mcc_generated_files/examples/i2c_master_example.c"
 12655 ;; Parameters:    Size  Location     Type
 12656 ;;  ptr             1    9[COMMON] PTR void 
 12657 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 12658 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 12659 ;; Auto vars:     Size  Location     Type
 12660 ;;		None
 12661 ;; Return value:  Size  Location     Type
 12662 ;;                  1    wreg      enum E97
 12663 ;; Registers used:
 12664 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12665 ;; Tracked objects:
 12666 ;;		On entry : 0/0
 12667 ;;		On exit  : 0/0
 12668 ;;		Unchanged: 0/0
 12669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12670 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12673 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12674 ;;Total ram usage:        1 bytes
 12675 ;; Hardware stack levels used:    1
 12676 ;; Hardware stack levels required when called:    2
 12677 ;; This function calls:
 12678 ;;		i1_I2C_SetBuffer
 12679 ;;		i1_I2C_SetDataCompleteCallback
 12680 ;; This function is called by:
 12681 ;; This function uses a non-reentrant model
 12682 ;;
 12683                           
 12684                           
 12685                           ;psect for function i1_rdBlkRegCompleteHandler
 12686  06AC                     i1_rdBlkRegCompleteHandler:	
 12687  06AC                     i1l2539:	
 12688                           ;incstack = 0
 12689 ;; hardware stack exceeded
 12690                           ; Regs used in i1_rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 12691                           
 12692                           
 12693                           ;i2c_master_example.c: 172: I2C_SetBuffer(((i2c_buffer_t *)ptr)->data,((i2c_buffer_t*)pt
      +                          r)->len);
 12694  06AC  0879               	movf	i1rdBlkRegCompleteHandler@ptr,w
 12695  06AD  0086               	movwf	6
 12696  06AE  0187               	clrf	7
 12697  06AF  3F40               	moviw [0]fsr1
 12698  06B0  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 12699  06B1  3F41               	moviw [1]fsr1
 12700  06B2  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 12701  06B3  0879               	movf	i1rdBlkRegCompleteHandler@ptr,w
 12702  06B4  3E02               	addlw	2
 12703  06B5  0086               	movwf	6
 12704  06B6  0187               	clrf	7
 12705  06B7  0801               	movf	1,w
 12706  06B8  3187  2783  3186   	fcall	i1_I2C_SetBuffer
 12707                           
 12708                           ;i2c_master_example.c: 173: I2C_SetDataCompleteCallback((0),(0));
 12709  06BB  3000               	movlw	0
 12710  06BC  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 12711  06BD  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 12712  06BE  01F7               	clrf	i1I2C_SetDataCompleteCallback@ptr
 12713  06BF  3187  27CE         	fcall	i1_I2C_SetDataCompleteCallback
 12714                           
 12715                           ;i2c_master_example.c: 174: return I2C_RESTART_READ;
 12716  06C1  3002               	movlw	2
 12717  06C2  0008               	return
 12718  06C3                     __end_ofi1_rdBlkRegCompleteHandler:	
 12719                           
 12720                           	psect	text108
 12721  0717                     __ptext108:	
 12722 ;; *************** function i1_wr1RegCompleteHandler *****************
 12723 ;; Defined at:
 12724 ;;		line 156 in file "mcc_generated_files/examples/i2c_master_example.c"
 12725 ;; Parameters:    Size  Location     Type
 12726 ;;  ptr             1    9[COMMON] PTR void 
 12727 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 12728 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 12729 ;; Auto vars:     Size  Location     Type
 12730 ;;		None
 12731 ;; Return value:  Size  Location     Type
 12732 ;;                  1    wreg      enum E97
 12733 ;; Registers used:
 12734 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12735 ;; Tracked objects:
 12736 ;;		On entry : 0/0
 12737 ;;		On exit  : 0/0
 12738 ;;		Unchanged: 0/0
 12739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12740 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12743 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12744 ;;Total ram usage:        1 bytes
 12745 ;; Hardware stack levels used:    1
 12746 ;; Hardware stack levels required when called:    2
 12747 ;; This function calls:
 12748 ;;		i1_I2C_SetBuffer
 12749 ;;		i1_I2C_SetDataCompleteCallback
 12750 ;; This function is called by:
 12751 ;;		i1_I2C_Write1ByteRegister
 12752 ;;		i1_I2C_DO_TX
 12753 ;;		i1_I2C_DO_RX
 12754 ;;		i1_I2C_DO_TX_EMPTY
 12755 ;;		i1_I2C_DO_ADDRESS_NACK
 12756 ;;		_I2C_DO_TX
 12757 ;;		_I2C_DO_RX
 12758 ;;		_I2C_DO_TX_EMPTY
 12759 ;;		_I2C_DO_ADDRESS_NACK
 12760 ;;		_I2C_DO_RX_EMPTY
 12761 ;; This function uses a non-reentrant model
 12762 ;;
 12763                           
 12764                           
 12765                           ;psect for function i1_wr1RegCompleteHandler
 12766  0717                     i1_wr1RegCompleteHandler:	
 12767  0717                     i1l2523:	
 12768                           ;incstack = 0
 12769 ;; hardware stack exceeded
 12770                           ; Regs used in i1_wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12771                           
 12772                           
 12773                           ;i2c_master_example.c: 158: I2C_SetBuffer(ptr,1);
 12774  0717  3001               	movlw	1
 12775  0718  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 12776  0719  3000               	movlw	0
 12777  071A  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 12778  071B  0879               	movf	i1wr1RegCompleteHandler@ptr,w
 12779  071C  3187  2783  3187   	fcall	i1_I2C_SetBuffer
 12780                           
 12781                           ;i2c_master_example.c: 159: I2C_SetDataCompleteCallback((0),(0));
 12782  071F  3000               	movlw	0
 12783  0720  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 12784  0721  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 12785  0722  01F7               	clrf	i1I2C_SetDataCompleteCallback@ptr
 12786  0723  3187  27CE         	fcall	i1_I2C_SetDataCompleteCallback
 12787                           
 12788                           ;i2c_master_example.c: 160: return I2C_CONTINUE;
 12789  0725  3004               	movlw	4
 12790  0726  0008               	return
 12791  0727                     __end_ofi1_wr1RegCompleteHandler:	
 12792                           
 12793                           	psect	text109
 12794  0727                     __ptext109:	
 12795 ;; *************** function i1_rd2RegCompleteHandler *****************
 12796 ;; Defined at:
 12797 ;;		line 149 in file "mcc_generated_files/examples/i2c_master_example.c"
 12798 ;; Parameters:    Size  Location     Type
 12799 ;;  ptr             1    9[COMMON] PTR void 
 12800 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 12801 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 12802 ;; Auto vars:     Size  Location     Type
 12803 ;;		None
 12804 ;; Return value:  Size  Location     Type
 12805 ;;                  1    wreg      enum E97
 12806 ;; Registers used:
 12807 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12808 ;; Tracked objects:
 12809 ;;		On entry : 0/0
 12810 ;;		On exit  : 0/0
 12811 ;;		Unchanged: 0/0
 12812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12813 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12816 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12817 ;;Total ram usage:        1 bytes
 12818 ;; Hardware stack levels used:    1
 12819 ;; Hardware stack levels required when called:    2
 12820 ;; This function calls:
 12821 ;;		i1_I2C_SetBuffer
 12822 ;;		i1_I2C_SetDataCompleteCallback
 12823 ;; This function is called by:
 12824 ;;		_I2C_Read2ByteRegister
 12825 ;;		i1_I2C_DO_TX
 12826 ;;		i1_I2C_DO_RX
 12827 ;;		i1_I2C_DO_TX_EMPTY
 12828 ;;		i1_I2C_DO_ADDRESS_NACK
 12829 ;;		_I2C_DO_TX
 12830 ;;		_I2C_DO_RX
 12831 ;;		_I2C_DO_TX_EMPTY
 12832 ;;		_I2C_DO_ADDRESS_NACK
 12833 ;;		_I2C_DO_RX_EMPTY
 12834 ;; This function uses a non-reentrant model
 12835 ;;
 12836                           
 12837                           
 12838                           ;psect for function i1_rd2RegCompleteHandler
 12839  0727                     i1_rd2RegCompleteHandler:	
 12840  0727                     i1l2515:	
 12841                           ;incstack = 0
 12842 ;; hardware stack exceeded
 12843                           ; Regs used in i1_rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12844                           
 12845                           
 12846                           ;i2c_master_example.c: 151: I2C_SetBuffer(ptr,2);
 12847  0727  3002               	movlw	2
 12848  0728  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 12849  0729  3000               	movlw	0
 12850  072A  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 12851  072B  0879               	movf	i1rd2RegCompleteHandler@ptr,w
 12852  072C  3187  2783  3187   	fcall	i1_I2C_SetBuffer
 12853                           
 12854                           ;i2c_master_example.c: 152: I2C_SetDataCompleteCallback((0),(0));
 12855  072F  3000               	movlw	0
 12856  0730  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 12857  0731  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 12858  0732  01F7               	clrf	i1I2C_SetDataCompleteCallback@ptr
 12859  0733  3187  27CE         	fcall	i1_I2C_SetDataCompleteCallback
 12860                           
 12861                           ;i2c_master_example.c: 153: return I2C_RESTART_READ;
 12862  0735  3002               	movlw	2
 12863  0736  0008               	return
 12864  0737                     __end_ofi1_rd2RegCompleteHandler:	
 12865                           
 12866                           	psect	text110
 12867  0737                     __ptext110:	
 12868 ;; *************** function i1_rd1RegCompleteHandler *****************
 12869 ;; Defined at:
 12870 ;;		line 142 in file "mcc_generated_files/examples/i2c_master_example.c"
 12871 ;; Parameters:    Size  Location     Type
 12872 ;;  ptr             1    9[COMMON] PTR void 
 12873 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 12874 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 12875 ;; Auto vars:     Size  Location     Type
 12876 ;;		None
 12877 ;; Return value:  Size  Location     Type
 12878 ;;                  1    wreg      enum E97
 12879 ;; Registers used:
 12880 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12881 ;; Tracked objects:
 12882 ;;		On entry : 0/0
 12883 ;;		On exit  : 0/0
 12884 ;;		Unchanged: 0/0
 12885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12886 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12889 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12890 ;;Total ram usage:        1 bytes
 12891 ;; Hardware stack levels used:    1
 12892 ;; Hardware stack levels required when called:    2
 12893 ;; This function calls:
 12894 ;;		i1_I2C_SetBuffer
 12895 ;;		i1_I2C_SetDataCompleteCallback
 12896 ;; This function is called by:
 12897 ;; This function uses a non-reentrant model
 12898 ;;
 12899                           
 12900                           
 12901                           ;psect for function i1_rd1RegCompleteHandler
 12902  0737                     i1_rd1RegCompleteHandler:	
 12903  0737                     i1l2507:	
 12904                           ;incstack = 0
 12905 ;; hardware stack exceeded
 12906                           ; Regs used in i1_rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12907                           
 12908                           
 12909                           ;i2c_master_example.c: 144: I2C_SetBuffer(ptr,1);
 12910  0737  3001               	movlw	1
 12911  0738  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 12912  0739  3000               	movlw	0
 12913  073A  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 12914  073B  0879               	movf	i1rd1RegCompleteHandler@ptr,w
 12915  073C  3187  2783  3187   	fcall	i1_I2C_SetBuffer
 12916                           
 12917                           ;i2c_master_example.c: 145: I2C_SetDataCompleteCallback((0),(0));
 12918  073F  3000               	movlw	0
 12919  0740  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 12920  0741  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 12921  0742  01F7               	clrf	i1I2C_SetDataCompleteCallback@ptr
 12922  0743  3187  27CE         	fcall	i1_I2C_SetDataCompleteCallback
 12923                           
 12924                           ;i2c_master_example.c: 146: return I2C_RESTART_READ;
 12925  0745  3002               	movlw	2
 12926  0746  0008               	return
 12927  0747                     __end_ofi1_rd1RegCompleteHandler:	
 12928                           
 12929                           	psect	text111
 12930  0747                     __ptext111:	
 12931 ;; *************** function i1_wr2RegCompleteHandler *****************
 12932 ;; Defined at:
 12933 ;;		line 163 in file "mcc_generated_files/examples/i2c_master_example.c"
 12934 ;; Parameters:    Size  Location     Type
 12935 ;;  ptr             1    9[COMMON] PTR void 
 12936 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 12937 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 12938 ;; Auto vars:     Size  Location     Type
 12939 ;;		None
 12940 ;; Return value:  Size  Location     Type
 12941 ;;                  1    wreg      enum E97
 12942 ;; Registers used:
 12943 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12944 ;; Tracked objects:
 12945 ;;		On entry : 0/0
 12946 ;;		On exit  : 0/0
 12947 ;;		Unchanged: 0/0
 12948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12949 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12952 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12953 ;;Total ram usage:        1 bytes
 12954 ;; Hardware stack levels used:    1
 12955 ;; Hardware stack levels required when called:    2
 12956 ;; This function calls:
 12957 ;;		i1_I2C_SetBuffer
 12958 ;;		i1_I2C_SetDataCompleteCallback
 12959 ;; This function is called by:
 12960 ;; This function uses a non-reentrant model
 12961 ;;
 12962                           
 12963                           
 12964                           ;psect for function i1_wr2RegCompleteHandler
 12965  0747                     i1_wr2RegCompleteHandler:	
 12966  0747                     i1l2531:	
 12967                           ;incstack = 0
 12968 ;; hardware stack exceeded
 12969                           ; Regs used in i1_wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12970                           
 12971                           
 12972                           ;i2c_master_example.c: 165: I2C_SetBuffer(ptr,2);
 12973  0747  3002               	movlw	2
 12974  0748  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 12975  0749  3000               	movlw	0
 12976  074A  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 12977  074B  0879               	movf	i1wr2RegCompleteHandler@ptr,w
 12978  074C  3187  2783  3187   	fcall	i1_I2C_SetBuffer
 12979                           
 12980                           ;i2c_master_example.c: 166: I2C_SetDataCompleteCallback((0),(0));
 12981  074F  3000               	movlw	0
 12982  0750  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 12983  0751  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 12984  0752  01F7               	clrf	i1I2C_SetDataCompleteCallback@ptr
 12985  0753  3187  27CE         	fcall	i1_I2C_SetDataCompleteCallback
 12986                           
 12987                           ;i2c_master_example.c: 167: return I2C_CONTINUE;
 12988  0755  3004               	movlw	4
 12989  0756  0008               	return
 12990  0757                     __end_ofi1_wr2RegCompleteHandler:	
 12991                           
 12992                           	psect	text112
 12993  07CE                     __ptext112:	
 12994 ;; *************** function i1_I2C_SetDataCompleteCallback *****************
 12995 ;; Defined at:
 12996 ;;		line 273 in file "mcc_generated_files/i2c_master.c"
 12997 ;; Parameters:    Size  Location     Type
 12998 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
 12999 ;;		 -> i1_wr1RegCompleteHandler(1), i1_rd2RegCompleteHandler(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), 
 13000 ;;		 -> wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), Absolute function(1), rd1RegCompleteHandler(1), 
 13001 ;;  ptr             1    7[COMMON] PTR void 
 13002 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 13003 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 13004 ;; Auto vars:     Size  Location     Type
 13005 ;;		None
 13006 ;; Return value:  Size  Location     Type
 13007 ;;                  1    wreg      void 
 13008 ;; Registers used:
 13009 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13010 ;; Tracked objects:
 13011 ;;		On entry : 0/0
 13012 ;;		On exit  : 0/0
 13013 ;;		Unchanged: 0/0
 13014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13015 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13017 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13018 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13019 ;;Total ram usage:        4 bytes
 13020 ;; Hardware stack levels used:    1
 13021 ;; Hardware stack levels required when called:    1
 13022 ;; This function calls:
 13023 ;;		i1_I2C_SetCallback
 13024 ;; This function is called by:
 13025 ;;		_I2C_Read2ByteRegister
 13026 ;;		i1_I2C_Write1ByteRegister
 13027 ;;		i1_rd1RegCompleteHandler
 13028 ;;		i1_rd2RegCompleteHandler
 13029 ;;		i1_wr1RegCompleteHandler
 13030 ;;		i1_wr2RegCompleteHandler
 13031 ;;		i1_rdBlkRegCompleteHandler
 13032 ;; This function uses a non-reentrant model
 13033 ;;
 13034                           
 13035                           
 13036                           ;psect for function i1_I2C_SetDataCompleteCallback
 13037  07CE                     i1_I2C_SetDataCompleteCallback:	
 13038                           
 13039                           ;i2c_master.c: 275: I2C_SetCallback(I2C_DATA_COMPLETE, cb, ptr);
 13040                           
 13041                           ;incstack = 0
 13042                           ; Regs used in i1_I2C_SetDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclat
      +                          h+cstack]
 13043  07CE  0876               	movf	i1I2C_SetDataCompleteCallback@cb+1,w
 13044  07CF  00F1               	movwf	i1I2C_SetCallback@cb+1
 13045  07D0  0875               	movf	i1I2C_SetDataCompleteCallback@cb,w
 13046  07D1  00F0               	movwf	i1I2C_SetCallback@cb
 13047  07D2  0877               	movf	i1I2C_SetDataCompleteCallback@ptr,w
 13048  07D3  00F8               	movwf	??i1_I2C_SetDataCompleteCallback
 13049  07D4  0878               	movf	??i1_I2C_SetDataCompleteCallback,w
 13050  07D5  00F2               	movwf	i1I2C_SetCallback@ptr
 13051  07D6  3000               	movlw	0
 13052  07D7  3185  255F         	fcall	i1_I2C_SetCallback
 13053  07D9  0008               	return
 13054  07DA                     __end_ofi1_I2C_SetDataCompleteCallback:	
 13055                           
 13056                           	psect	text113
 13057  055F                     __ptext113:	
 13058 ;; *************** function i1_I2C_SetCallback *****************
 13059 ;; Defined at:
 13060 ;;		line 298 in file "mcc_generated_files/i2c_master.c"
 13061 ;; Parameters:    Size  Location     Type
 13062 ;;  idx             1    wreg     enum E12121
 13063 ;;  cb              2    0[COMMON] PTR FTN(PTR void ,)enum 
 13064 ;;		 -> i1_wr1RegCompleteHandler(1), i1_rd2RegCompleteHandler(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), 
 13065 ;;		 -> wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), Absolute function(1), rd1RegCompleteHandler(1), 
 13066 ;;  ptr             1    2[COMMON] PTR void 
 13067 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 13068 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 13069 ;; Auto vars:     Size  Location     Type
 13070 ;;  idx             1    4[COMMON] enum E12121
 13071 ;; Return value:  Size  Location     Type
 13072 ;;                  1    wreg      void 
 13073 ;; Registers used:
 13074 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13075 ;; Tracked objects:
 13076 ;;		On entry : 0/0
 13077 ;;		On exit  : 0/0
 13078 ;;		Unchanged: 0/0
 13079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13080 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13081 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13082 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13083 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13084 ;;Total ram usage:        5 bytes
 13085 ;; Hardware stack levels used:    1
 13086 ;; This function calls:
 13087 ;;		Nothing
 13088 ;; This function is called by:
 13089 ;;		i1_I2C_SetDataCompleteCallback
 13090 ;;		i1_I2C_SetAddressNackCallback
 13091 ;; This function uses a non-reentrant model
 13092 ;;
 13093                           
 13094                           
 13095                           ;psect for function i1_I2C_SetCallback
 13096  055F                     i1_I2C_SetCallback:	
 13097                           
 13098                           ;incstack = 0
 13099                           ; Regs used in i1_I2C_SetCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
 13100                           ;i1I2C_SetCallback@idx stored from wreg
 13101  055F  00F4               	movwf	i1I2C_SetCallback@idx
 13102                           
 13103                           ;i2c_master.c: 300: if(cb)
 13104  0560  0870               	movf	i1I2C_SetCallback@cb,w
 13105  0561  0471               	iorwf	i1I2C_SetCallback@cb+1,w
 13106  0562  1903               	btfsc	3,2
 13107  0563  2D75               	goto	i1l2485
 13108                           
 13109                           ;i2c_master.c: 301: {
 13110                           ;i2c_master.c: 302: I2C_Status.callbackTable[idx] = cb;
 13111  0564  3574               	lslf	i1I2C_SetCallback@idx,w
 13112  0565  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
 13113  0566  0086               	movwf	6
 13114  0567  0187               	clrf	7
 13115  0568  0870               	movf	i1I2C_SetCallback@cb,w
 13116  0569  3FC0               	movwi [0]fsr1
 13117  056A  0871               	movf	i1I2C_SetCallback@cb+1,w
 13118  056B  3FC1               	movwi [1]fsr1
 13119                           
 13120                           ;i2c_master.c: 303: I2C_Status.callbackPayload[idx] = ptr;
 13121  056C  0872               	movf	i1I2C_SetCallback@ptr,w
 13122  056D  00F3               	movwf	??i1_I2C_SetCallback
 13123  056E  0874               	movf	i1I2C_SetCallback@idx,w
 13124  056F  3E2C               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
 13125  0570  0086               	movwf	6
 13126  0571  0187               	clrf	7
 13127  0572  0873               	movf	??i1_I2C_SetCallback,w
 13128  0573  0081               	movwf	1
 13129                           
 13130                           ;i2c_master.c: 304: }
 13131  0574  0008               	return
 13132  0575                     i1l2485:	
 13133                           
 13134                           ;i2c_master.c: 305: else
 13135                           ;i2c_master.c: 306: {
 13136                           ;i2c_master.c: 307: I2C_Status.callbackTable[idx] = I2C_CallbackReturnStop;
 13137  0575  3574               	lslf	i1I2C_SetCallback@idx,w
 13138  0576  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
 13139  0577  0086               	movwf	6
 13140  0578  0187               	clrf	7
 13141  0579  302F               	movlw	low _I2C_CallbackReturnStop
 13142  057A  3FC0               	movwi [0]fsr1
 13143  057B  300F               	movlw	high _I2C_CallbackReturnStop
 13144  057C  3FC1               	movwi [1]fsr1
 13145                           
 13146                           ;i2c_master.c: 308: I2C_Status.callbackPayload[idx] = (0);
 13147  057D  0874               	movf	i1I2C_SetCallback@idx,w
 13148  057E  3E2C               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
 13149  057F  0086               	movwf	6
 13150  0580  0187               	clrf	7
 13151  0581  0181               	clrf	1
 13152  0582  0008               	return
 13153  0583                     __end_ofi1_I2C_SetCallback:	
 13154                           
 13155                           	psect	text114
 13156  0783                     __ptext114:	
 13157 ;; *************** function i1_I2C_SetBuffer *****************
 13158 ;; Defined at:
 13159 ;;		line 263 in file "mcc_generated_files/i2c_master.c"
 13160 ;; Parameters:    Size  Location     Type
 13161 ;;  buffer          1    wreg     PTR void 
 13162 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
 13163 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
 13164 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
 13165 ;;  bufferSize      2    0[COMMON] unsigned int 
 13166 ;; Auto vars:     Size  Location     Type
 13167 ;;  buffer          1    3[COMMON] PTR void 
 13168 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
 13169 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
 13170 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
 13171 ;; Return value:  Size  Location     Type
 13172 ;;                  1    wreg      void 
 13173 ;; Registers used:
 13174 ;;		wreg
 13175 ;; Tracked objects:
 13176 ;;		On entry : 0/0
 13177 ;;		On exit  : 0/0
 13178 ;;		Unchanged: 0/0
 13179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13180 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13181 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13182 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13183 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13184 ;;Total ram usage:        4 bytes
 13185 ;; Hardware stack levels used:    1
 13186 ;; This function calls:
 13187 ;;		Nothing
 13188 ;; This function is called by:
 13189 ;;		_I2C_Read2ByteRegister
 13190 ;;		i1_I2C_Write1ByteRegister
 13191 ;;		i1_rd1RegCompleteHandler
 13192 ;;		i1_rd2RegCompleteHandler
 13193 ;;		i1_wr1RegCompleteHandler
 13194 ;;		i1_wr2RegCompleteHandler
 13195 ;;		i1_rdBlkRegCompleteHandler
 13196 ;; This function uses a non-reentrant model
 13197 ;;
 13198                           
 13199                           
 13200                           ;psect for function i1_I2C_SetBuffer
 13201  0783                     i1_I2C_SetBuffer:	
 13202                           
 13203                           ;incstack = 0
 13204                           ; Regs used in i1_I2C_SetBuffer: [wreg]
 13205                           ;i1I2C_SetBuffer@buffer stored from wreg
 13206  0783  00F3               	movwf	i1I2C_SetBuffer@buffer
 13207                           
 13208                           ;i2c_master.c: 265: if(I2C_Status.bufferFree)
 13209  0784  0020               	movlb	0	; select bank0
 13210  0785  1DBC               	btfss	_I2C_Status+28,3
 13211  0786  0008               	return
 13212                           
 13213                           ;i2c_master.c: 266: {
 13214                           ;i2c_master.c: 267: I2C_Status.data_ptr = buffer;
 13215  0787  0873               	movf	i1I2C_SetBuffer@buffer,w
 13216  0788  00F2               	movwf	??i1_I2C_SetBuffer
 13217  0789  0872               	movf	??i1_I2C_SetBuffer,w
 13218  078A  00B7               	movwf	low ((_I2C_Status| 0+23))
 13219                           
 13220                           ;i2c_master.c: 268: I2C_Status.data_length = bufferSize;
 13221  078B  0871               	movf	i1I2C_SetBuffer@bufferSize+1,w
 13222  078C  00B9               	movwf	_I2C_Status+25
 13223  078D  0870               	movf	i1I2C_SetBuffer@bufferSize,w
 13224  078E  00B8               	movwf	_I2C_Status+24
 13225                           
 13226                           ;i2c_master.c: 269: I2C_Status.bufferFree = 0;
 13227  078F  11BC               	bcf	_I2C_Status+28,3
 13228  0790  0008               	return
 13229  0791                     __end_ofi1_I2C_SetBuffer:	
 13230                           
 13231                           	psect	text115
 13232  0EA2                     __ptext115:	
 13233 ;; *************** function i1_I2C_MasterStop *****************
 13234 ;; Defined at:
 13235 ;;		line 593 in file "mcc_generated_files/i2c_master.c"
 13236 ;; Parameters:    Size  Location     Type
 13237 ;;		None
 13238 ;; Auto vars:     Size  Location     Type
 13239 ;;		None
 13240 ;; Return value:  Size  Location     Type
 13241 ;;                  1    wreg      void 
 13242 ;; Registers used:
 13243 ;;		None
 13244 ;; Tracked objects:
 13245 ;;		On entry : 0/0
 13246 ;;		On exit  : 0/0
 13247 ;;		Unchanged: 0/0
 13248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13253 ;;Total ram usage:        0 bytes
 13254 ;; Hardware stack levels used:    1
 13255 ;; This function calls:
 13256 ;;		Nothing
 13257 ;; This function is called by:
 13258 ;;		i1_I2C_DO_SEND_STOP
 13259 ;; This function uses a non-reentrant model
 13260 ;;
 13261                           
 13262                           
 13263                           ;psect for function i1_I2C_MasterStop
 13264  0EA2                     i1_I2C_MasterStop:	
 13265                           
 13266                           ;i2c_master.c: 595: SSP1CON2bits.PEN = 1;
 13267                           
 13268                           ;incstack = 0
 13269 ;; hardware stack exceeded
 13270                           ; Regs used in i1_I2C_MasterStop: []
 13271  0EA2  0024               	movlb	4	; select bank4
 13272  0EA3  1516               	bsf	22,2	;volatile
 13273  0EA4  0008               	return
 13274  0EA5                     __end_ofi1_I2C_MasterStop:	
 13275                           
 13276                           	psect	text116
 13277  0E9F                     __ptext116:	
 13278 ;; *************** function i1_I2C_MasterEnableRestart *****************
 13279 ;; Defined at:
 13280 ;;		line 573 in file "mcc_generated_files/i2c_master.c"
 13281 ;; Parameters:    Size  Location     Type
 13282 ;;		None
 13283 ;; Auto vars:     Size  Location     Type
 13284 ;;		None
 13285 ;; Return value:  Size  Location     Type
 13286 ;;                  1    wreg      void 
 13287 ;; Registers used:
 13288 ;;		None
 13289 ;; Tracked objects:
 13290 ;;		On entry : 0/0
 13291 ;;		On exit  : 0/0
 13292 ;;		Unchanged: 0/0
 13293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13297 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13298 ;;Total ram usage:        0 bytes
 13299 ;; Hardware stack levels used:    1
 13300 ;; This function calls:
 13301 ;;		Nothing
 13302 ;; This function is called by:
 13303 ;;		i1_I2C_DO_SEND_RESTART_READ
 13304 ;;		i1_I2C_DO_SEND_RESTART_WRITE
 13305 ;;		i1_I2C_DO_SEND_RESTART
 13306 ;; This function uses a non-reentrant model
 13307 ;;
 13308                           
 13309                           
 13310                           ;psect for function i1_I2C_MasterEnableRestart
 13311  0E9F                     i1_I2C_MasterEnableRestart:	
 13312                           
 13313                           ;i2c_master.c: 575: SSP1CON2bits.RSEN = 1;
 13314                           
 13315                           ;incstack = 0
 13316 ;; hardware stack exceeded
 13317                           ; Regs used in i1_I2C_MasterEnableRestart: []
 13318  0E9F  0024               	movlb	4	; select bank4
 13319  0EA0  1496               	bsf	22,1	;volatile
 13320  0EA1  0008               	return
 13321  0EA2                     __end_ofi1_I2C_MasterEnableRestart:	
 13322                           
 13323                           	psect	text117
 13324  0E9C                     __ptext117:	
 13325 ;; *************** function i1_I2C_MasterStart *****************
 13326 ;; Defined at:
 13327 ;;		line 588 in file "mcc_generated_files/i2c_master.c"
 13328 ;; Parameters:    Size  Location     Type
 13329 ;;		None
 13330 ;; Auto vars:     Size  Location     Type
 13331 ;;		None
 13332 ;; Return value:  Size  Location     Type
 13333 ;;                  1    wreg      void 
 13334 ;; Registers used:
 13335 ;;		None
 13336 ;; Tracked objects:
 13337 ;;		On entry : 0/0
 13338 ;;		On exit  : 0/0
 13339 ;;		Unchanged: 0/0
 13340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13344 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13345 ;;Total ram usage:        0 bytes
 13346 ;; Hardware stack levels used:    1
 13347 ;; This function calls:
 13348 ;;		Nothing
 13349 ;; This function is called by:
 13350 ;;		i1_I2C_MasterOperation
 13351 ;; This function uses a non-reentrant model
 13352 ;;
 13353                           
 13354                           
 13355                           ;psect for function i1_I2C_MasterStart
 13356  0E9C                     i1_I2C_MasterStart:	
 13357                           
 13358                           ;i2c_master.c: 590: SSP1CON2bits.SEN = 1;
 13359                           
 13360                           ;incstack = 0
 13361                           ; Regs used in i1_I2C_MasterStart: []
 13362  0E9C  0024               	movlb	4	; select bank4
 13363  0E9D  1416               	bsf	22,0	;volatile
 13364  0E9E  0008               	return
 13365  0E9F                     __end_ofi1_I2C_MasterStart:	
 13366                           
 13367                           	psect	text118
 13368  0637                     __ptext118:	
 13369 ;; *************** function i1_I2C_Close *****************
 13370 ;; Defined at:
 13371 ;;		line 209 in file "mcc_generated_files/i2c_master.c"
 13372 ;; Parameters:    Size  Location     Type
 13373 ;;		None
 13374 ;; Auto vars:     Size  Location     Type
 13375 ;;  I2C_Close       1    1[COMMON] enum E92
 13376 ;; Return value:  Size  Location     Type
 13377 ;;                  1    wreg      enum E92
 13378 ;; Registers used:
 13379 ;;		wreg, status,2, status,0, pclath, cstack
 13380 ;; Tracked objects:
 13381 ;;		On entry : 0/0
 13382 ;;		On exit  : 0/0
 13383 ;;		Unchanged: 0/0
 13384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13386 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13387 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13388 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13389 ;;Total ram usage:        2 bytes
 13390 ;; Hardware stack levels used:    1
 13391 ;; Hardware stack levels required when called:    1
 13392 ;; This function calls:
 13393 ;;		i1_I2C_MasterClearIrq
 13394 ;;		i1_I2C_MasterClose
 13395 ;;		i1_I2C_MasterDisableIrq
 13396 ;; This function is called by:
 13397 ;;		_I2C_Read2ByteRegister
 13398 ;;		i1_I2C_Write1ByteRegister
 13399 ;; This function uses a non-reentrant model
 13400 ;;
 13401                           
 13402                           
 13403                           ;psect for function i1_I2C_Close
 13404  0637                     i1_I2C_Close:	
 13405                           
 13406                           ;i2c_master.c: 211: i2c_error_t returnValue = I2C_BUSY;
 13407                           
 13408                           ;incstack = 0
 13409                           ; Regs used in i1_I2C_Close: [wreg+status,2+status,0+pclath+cstack]
 13410  0637  01F1               	clrf	i1I2C_Close@returnValue
 13411  0638  0AF1               	incf	i1I2C_Close@returnValue,f
 13412                           
 13413                           ;i2c_master.c: 212: if(!I2C_Status.busy)
 13414  0639  0020               	movlb	0	; select bank0
 13415  063A  18BC               	btfsc	_I2C_Status+28,1
 13416  063B  2E4E               	goto	i1l3123
 13417                           
 13418                           ;i2c_master.c: 213: {
 13419                           ;i2c_master.c: 214: I2C_Status.inUse = 0;
 13420  063C  113C               	bcf	_I2C_Status+28,2
 13421                           
 13422                           ;i2c_master.c: 215: I2C_Status.address = 0xff;
 13423  063D  30FF               	movlw	255
 13424  063E  00F0               	movwf	??i1_I2C_Close
 13425  063F  0870               	movf	??i1_I2C_Close,w
 13426  0640  00B6               	movwf	_I2C_Status+22
 13427                           
 13428                           ;i2c_master.c: 216: I2C_MasterClearIrq();
 13429  0641  318E  2693  3186   	fcall	i1_I2C_MasterClearIrq
 13430                           
 13431                           ;i2c_master.c: 217: I2C_MasterDisableIrq();
 13432  0644  318E  2699  3186   	fcall	i1_I2C_MasterDisableIrq
 13433                           
 13434                           ;i2c_master.c: 218: I2C_MasterClose();
 13435  0647  318E  2696         	fcall	i1_I2C_MasterClose
 13436                           
 13437                           ;i2c_master.c: 219: returnValue = I2C_Status.error;
 13438  0649  0020               	movlb	0	; select bank0
 13439  064A  083B               	movf	_I2C_Status+27,w
 13440  064B  00F0               	movwf	??i1_I2C_Close
 13441  064C  0870               	movf	??i1_I2C_Close,w
 13442  064D  00F1               	movwf	i1I2C_Close@returnValue
 13443  064E                     i1l3123:	
 13444                           
 13445                           ;i2c_master.c: 220: }
 13446                           ;i2c_master.c: 221: return returnValue;
 13447  064E  0871               	movf	i1I2C_Close@returnValue,w
 13448  064F  0008               	return
 13449  0650                     __end_ofi1_I2C_Close:	
 13450                           
 13451                           	psect	text119
 13452  0E99                     __ptext119:	
 13453 ;; *************** function i1_I2C_MasterDisableIrq *****************
 13454 ;; Defined at:
 13455 ;;		line 635 in file "mcc_generated_files/i2c_master.c"
 13456 ;; Parameters:    Size  Location     Type
 13457 ;;		None
 13458 ;; Auto vars:     Size  Location     Type
 13459 ;;		None
 13460 ;; Return value:  Size  Location     Type
 13461 ;;                  1    wreg      void 
 13462 ;; Registers used:
 13463 ;;		None
 13464 ;; Tracked objects:
 13465 ;;		On entry : 0/0
 13466 ;;		On exit  : 0/0
 13467 ;;		Unchanged: 0/0
 13468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13473 ;;Total ram usage:        0 bytes
 13474 ;; Hardware stack levels used:    1
 13475 ;; This function calls:
 13476 ;;		Nothing
 13477 ;; This function is called by:
 13478 ;;		i1_I2C_Close
 13479 ;; This function uses a non-reentrant model
 13480 ;;
 13481                           
 13482                           
 13483                           ;psect for function i1_I2C_MasterDisableIrq
 13484  0E99                     i1_I2C_MasterDisableIrq:	
 13485                           
 13486                           ;i2c_master.c: 637: PIE1bits.SSP1IE = 0;
 13487                           
 13488                           ;incstack = 0
 13489                           ; Regs used in i1_I2C_MasterDisableIrq: []
 13490  0E99  0021               	movlb	1	; select bank1
 13491  0E9A  1190               	bcf	16,3	;volatile
 13492  0E9B  0008               	return
 13493  0E9C                     __end_ofi1_I2C_MasterDisableIrq:	
 13494                           
 13495                           	psect	text120
 13496  0E96                     __ptext120:	
 13497 ;; *************** function i1_I2C_MasterClose *****************
 13498 ;; Defined at:
 13499 ;;		line 557 in file "mcc_generated_files/i2c_master.c"
 13500 ;; Parameters:    Size  Location     Type
 13501 ;;		None
 13502 ;; Auto vars:     Size  Location     Type
 13503 ;;		None
 13504 ;; Return value:  Size  Location     Type
 13505 ;;                  1    wreg      void 
 13506 ;; Registers used:
 13507 ;;		None
 13508 ;; Tracked objects:
 13509 ;;		On entry : 0/0
 13510 ;;		On exit  : 0/0
 13511 ;;		Unchanged: 0/0
 13512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13516 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13517 ;;Total ram usage:        0 bytes
 13518 ;; Hardware stack levels used:    1
 13519 ;; This function calls:
 13520 ;;		Nothing
 13521 ;; This function is called by:
 13522 ;;		i1_I2C_Close
 13523 ;; This function uses a non-reentrant model
 13524 ;;
 13525                           
 13526                           
 13527                           ;psect for function i1_I2C_MasterClose
 13528  0E96                     i1_I2C_MasterClose:	
 13529                           
 13530                           ;i2c_master.c: 560: SSP1CON1bits.SSPEN = 0;
 13531                           
 13532                           ;incstack = 0
 13533                           ; Regs used in i1_I2C_MasterClose: []
 13534  0E96  0024               	movlb	4	; select bank4
 13535  0E97  1295               	bcf	21,5	;volatile
 13536  0E98  0008               	return
 13537  0E99                     __end_ofi1_I2C_MasterClose:	
 13538                           
 13539                           	psect	text121
 13540  0E93                     __ptext121:	
 13541 ;; *************** function i1_I2C_MasterClearIrq *****************
 13542 ;; Defined at:
 13543 ;;		line 640 in file "mcc_generated_files/i2c_master.c"
 13544 ;; Parameters:    Size  Location     Type
 13545 ;;		None
 13546 ;; Auto vars:     Size  Location     Type
 13547 ;;		None
 13548 ;; Return value:  Size  Location     Type
 13549 ;;                  1    wreg      void 
 13550 ;; Registers used:
 13551 ;;		None
 13552 ;; Tracked objects:
 13553 ;;		On entry : 0/0
 13554 ;;		On exit  : 0/0
 13555 ;;		Unchanged: 0/0
 13556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13561 ;;Total ram usage:        0 bytes
 13562 ;; Hardware stack levels used:    1
 13563 ;; This function calls:
 13564 ;;		Nothing
 13565 ;; This function is called by:
 13566 ;;		i1_I2C_Open
 13567 ;;		i1_I2C_Close
 13568 ;;		i1_I2C_MasterFsm
 13569 ;; This function uses a non-reentrant model
 13570 ;;
 13571                           
 13572                           
 13573                           ;psect for function i1_I2C_MasterClearIrq
 13574  0E93                     i1_I2C_MasterClearIrq:	
 13575                           
 13576                           ;i2c_master.c: 642: PIR1bits.SSP1IF = 0;
 13577                           
 13578                           ;incstack = 0
 13579                           ; Regs used in i1_I2C_MasterClearIrq: []
 13580  0E93  0020               	movlb	0	; select bank0
 13581  0E94  1190               	bcf	16,3	;volatile
 13582  0E95  0008               	return
 13583  0E96                     __end_ofi1_I2C_MasterClearIrq:	
 13584                           
 13585                           	psect	text122
 13586  0370                     __ptext122:	
 13587 ;; *************** function _EUSART_Receive_ISR *****************
 13588 ;; Defined at:
 13589 ;;		line 173 in file "mcc_generated_files/eusart.c"
 13590 ;; Parameters:    Size  Location     Type
 13591 ;;		None
 13592 ;; Auto vars:     Size  Location     Type
 13593 ;;		None
 13594 ;; Return value:  Size  Location     Type
 13595 ;;                  1    wreg      void 
 13596 ;; Registers used:
 13597 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13598 ;; Tracked objects:
 13599 ;;		On entry : 0/0
 13600 ;;		On exit  : 0/0
 13601 ;;		Unchanged: 0/0
 13602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13606 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13607 ;;Total ram usage:        0 bytes
 13608 ;; Hardware stack levels used:    1
 13609 ;; Hardware stack levels required when called:    2
 13610 ;; This function calls:
 13611 ;;		Absolute function
 13612 ;;		_EUSART_DefaultErrorHandler
 13613 ;;		_EUSART_DefaultFramingErrorHandler
 13614 ;;		_EUSART_DefaultOverrunErrorHandler
 13615 ;;		_EUSART_RxDataHandler
 13616 ;; This function is called by:
 13617 ;;		_EUSART_Initialize
 13618 ;;		_INTERRUPT_InterruptManager
 13619 ;; This function uses a non-reentrant model
 13620 ;;
 13621                           
 13622                           
 13623                           ;psect for function _EUSART_Receive_ISR
 13624  0370                     _EUSART_Receive_ISR:	
 13625                           
 13626                           ;eusart.c: 176: eusartRxStatusBuffer[eusartRxHead].status = 0;
 13627                           
 13628                           ;incstack = 0
 13629                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13630  0370  0020               	movlb	0	; select bank0
 13631  0371  0843               	movf	_eusartRxHead,w	;volatile
 13632  0372  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13633  0373  0086               	movwf	6
 13634  0374  0187               	clrf	7
 13635  0375  0181               	clrf	1
 13636                           
 13637                           ;eusart.c: 178: if(RC1STAbits.FERR){
 13638  0376  0023               	movlb	3	; select bank3
 13639  0377  1D1D               	btfss	29,2	;volatile
 13640  0378  2B85               	goto	i1l5781
 13641                           
 13642                           ;eusart.c: 179: eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 13643  0379  0020               	movlb	0	; select bank0
 13644  037A  0843               	movf	_eusartRxHead,w	;volatile
 13645  037B  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13646  037C  0086               	movwf	6
 13647  037D  0187               	clrf	7
 13648  037E  1481               	bsf	1,1
 13649                           
 13650                           ;eusart.c: 180: EUSART_FramingErrorHandler();
 13651  037F  0021               	movlb	1	; select bank1
 13652  0380  084A               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
 13653  0381  008A               	movwf	10
 13654  0382  0849               	movf	_EUSART_FramingErrorHandler^(0+128),w
 13655  0383  000A               	callw
 13656  0384  3183               	pagesel	$
 13657  0385                     i1l5781:	
 13658                           
 13659                           ;eusart.c: 181: }
 13660                           ;eusart.c: 183: if(RC1STAbits.OERR){
 13661  0385  0023               	movlb	3	; select bank3
 13662  0386  1C9D               	btfss	29,1	;volatile
 13663  0387  2B94               	goto	i1l5787
 13664                           
 13665                           ;eusart.c: 184: eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 13666  0388  0020               	movlb	0	; select bank0
 13667  0389  0843               	movf	_eusartRxHead,w	;volatile
 13668  038A  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13669  038B  0086               	movwf	6
 13670  038C  0187               	clrf	7
 13671  038D  1501               	bsf	1,2
 13672                           
 13673                           ;eusart.c: 185: EUSART_OverrunErrorHandler();
 13674  038E  0021               	movlb	1	; select bank1
 13675  038F  0848               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
 13676  0390  008A               	movwf	10
 13677  0391  0847               	movf	_EUSART_OverrunErrorHandler^(0+128),w
 13678  0392  000A               	callw
 13679  0393  3183               	pagesel	$
 13680  0394                     i1l5787:	
 13681                           
 13682                           ;eusart.c: 186: }
 13683                           ;eusart.c: 188: if(eusartRxStatusBuffer[eusartRxHead].status){
 13684  0394  0020               	movlb	0	; select bank0
 13685  0395  0843               	movf	_eusartRxHead,w	;volatile
 13686  0396  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13687  0397  0086               	movwf	6
 13688  0398  0187               	clrf	7
 13689  0399  0801               	movf	1,w
 13690  039A  1903               	btfsc	3,2
 13691  039B  2BA3               	goto	i1l5791
 13692                           
 13693                           ;eusart.c: 189: EUSART_ErrorHandler();
 13694  039C  0021               	movlb	1	; select bank1
 13695  039D  0846               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
 13696  039E  008A               	movwf	10
 13697  039F  0845               	movf	_EUSART_ErrorHandler^(0+128),w
 13698  03A0  000A               	callw
 13699  03A1  3183               	pagesel	$
 13700                           
 13701                           ;eusart.c: 190: } else {
 13702  03A2  0008               	return
 13703  03A3                     i1l5791:	
 13704                           
 13705                           ;eusart.c: 191: EUSART_RxDataHandler();
 13706  03A3  3186  26C3         	fcall	_EUSART_RxDataHandler
 13707  03A5  0008               	return
 13708  03A6                     __end_of_EUSART_Receive_ISR:	
 13709                           
 13710                           	psect	text123
 13711  0043                     __ptext123:	
 13712 ;; *************** function _MyUART_ISR *****************
 13713 ;; Defined at:
 13714 ;;		line 72 in file "main.c"
 13715 ;; Parameters:    Size  Location     Type
 13716 ;;		None
 13717 ;; Auto vars:     Size  Location     Type
 13718 ;;  c               1    5[COMMON] unsigned char 
 13719 ;; Return value:  Size  Location     Type
 13720 ;;                  1    wreg      void 
 13721 ;; Registers used:
 13722 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13723 ;; Tracked objects:
 13724 ;;		On entry : 0/0
 13725 ;;		On exit  : 0/0
 13726 ;;		Unchanged: 0/0
 13727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13729 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13730 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13731 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13732 ;;Total ram usage:        5 bytes
 13733 ;; Hardware stack levels used:    1
 13734 ;; Hardware stack levels required when called:    1
 13735 ;; This function calls:
 13736 ;;		_EUSART_Write
 13737 ;; This function is called by:
 13738 ;;		_main
 13739 ;;		_INTERRUPT_InterruptManager
 13740 ;; This function uses a non-reentrant model
 13741 ;;
 13742                           
 13743                           
 13744                           ;psect for function _MyUART_ISR
 13745  0043                     _MyUART_ISR:	
 13746                           
 13747                           ;main.c: 73: unsigned char c = RC1REG;
 13748                           
 13749                           ;incstack = 0
 13750                           ; Regs used in _MyUART_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13751  0043  0023               	movlb	3	; select bank3
 13752  0044  0819               	movf	25,w	;volatile
 13753  0045  00F1               	movwf	??_MyUART_ISR
 13754  0046  0871               	movf	??_MyUART_ISR,w
 13755  0047  00F5               	movwf	MyUART_ISR@c
 13756                           
 13757                           ;main.c: 74: if(c) {
 13758  0048  0875               	movf	MyUART_ISR@c,w
 13759  0049  1903               	btfsc	3,2
 13760  004A  0008               	return
 13761  004B  28BD               	goto	i1l3525
 13762  004C                     i1l3489:	
 13763                           ;main.c: 76: case S_Idle:
 13764                           
 13765                           ;main.c: 75: switch(PosUart) {
 13766                           
 13767                           
 13768                           ;main.c: 77: if(c == 'V' || c == 'A' || c == 'P') {
 13769  004C  3056               	movlw	86
 13770  004D  0675               	xorwf	MyUART_ISR@c,w
 13771  004E  1903               	btfsc	3,2
 13772  004F  2858               	goto	i1l3495
 13773  0050  3041               	movlw	65
 13774  0051  0675               	xorwf	MyUART_ISR@c,w
 13775  0052  1903               	btfsc	3,2
 13776  0053  2858               	goto	i1l3495
 13777  0054  3050               	movlw	80
 13778  0055  0675               	xorwf	MyUART_ISR@c,w
 13779  0056  1D03               	btfss	3,2
 13780  0057  0008               	return
 13781  0058                     i1l3495:	
 13782                           
 13783                           ;main.c: 78: Type = c;
 13784  0058  0875               	movf	MyUART_ISR@c,w
 13785  0059  00F1               	movwf	??_MyUART_ISR
 13786  005A  0871               	movf	??_MyUART_ISR,w
 13787  005B  0020               	movlb	0	; select bank0
 13788  005C  00BE               	movwf	_Type
 13789                           
 13790                           ;main.c: 79: PosUart = S_Data;
 13791  005D  01BD               	clrf	_PosUart
 13792  005E  0ABD               	incf	_PosUart,f
 13793                           
 13794                           ;main.c: 80: }
 13795                           ;main.c: 81: break;
 13796  005F  0008               	return
 13797  0060                     i1l3499:	
 13798                           ;main.c: 82: case S_Data:
 13799                           
 13800                           
 13801                           ;main.c: 83: Data = c;
 13802  0060  0875               	movf	MyUART_ISR@c,w
 13803  0061  00F1               	movwf	??_MyUART_ISR
 13804  0062  0871               	movf	??_MyUART_ISR,w
 13805  0063  00BF               	movwf	_Data
 13806                           
 13807                           ;main.c: 84: PosUart = S_Check;
 13808  0064  3002               	movlw	2
 13809  0065  00F1               	movwf	??_MyUART_ISR
 13810  0066  0871               	movf	??_MyUART_ISR,w
 13811  0067  00BD               	movwf	_PosUart
 13812                           
 13813                           ;main.c: 85: break;
 13814  0068  0008               	return
 13815  0069                     i1l3501:	
 13816                           ;main.c: 86: case S_Check:
 13817                           
 13818                           
 13819                           ;main.c: 87: if((Type+Data)%256 == c) {
 13820  0069  083E               	movf	_Type,w
 13821  006A  073F               	addwf	_Data,w
 13822  006B  00F1               	movwf	??_MyUART_ISR
 13823  006C  01F2               	clrf	??_MyUART_ISR+1
 13824  006D  0DF2               	rlf	??_MyUART_ISR+1,f
 13825  006E  30FF               	movlw	255
 13826  006F  0571               	andwf	??_MyUART_ISR,w
 13827  0070  00F3               	movwf	??_MyUART_ISR+2
 13828  0071  3000               	movlw	0
 13829  0072  0572               	andwf	??_MyUART_ISR+1,w
 13830  0073  00F4               	movwf	??_MyUART_ISR+3
 13831  0074  0875               	movf	MyUART_ISR@c,w
 13832  0075  0673               	xorwf	??_MyUART_ISR+2,w
 13833  0076  0474               	iorwf	??_MyUART_ISR+3,w
 13834  0077  1D03               	skipz
 13835  0078  28AD               	goto	i1l3517
 13836                           
 13837                           ;main.c: 88: if(Type == 'V') {
 13838  0079  3056               	movlw	86
 13839  007A  063E               	xorwf	_Type,w
 13840  007B  1D03               	btfss	3,2
 13841  007C  2886               	goto	i1l3507
 13842                           
 13843                           ;main.c: 89: Vitesse = Data;
 13844  007D  083F               	movf	_Data,w
 13845  007E  00F1               	movwf	??_MyUART_ISR
 13846  007F  01F2               	clrf	??_MyUART_ISR+1
 13847  0080  0871               	movf	??_MyUART_ISR,w
 13848  0081  0021               	movlb	1	; select bank1
 13849  0082  00B0               	movwf	_Vitesse^(0+128)
 13850  0083  0872               	movf	??_MyUART_ISR+1,w
 13851  0084  00B1               	movwf	(_Vitesse+1)^(0+128)
 13852                           
 13853                           ;main.c: 90: } else if(Type == 'A') {
 13854  0085  28B8               	goto	i1l3519
 13855  0086                     i1l3507:	
 13856  0086  3041               	movlw	65
 13857  0087  0020               	movlb	0	; select bank0
 13858  0088  063E               	xorwf	_Type,w
 13859  0089  1D03               	btfss	3,2
 13860  008A  2894               	goto	i1l3511
 13861                           
 13862                           ;main.c: 91: Angle = Data;
 13863  008B  083F               	movf	_Data,w
 13864  008C  00F1               	movwf	??_MyUART_ISR
 13865  008D  01F2               	clrf	??_MyUART_ISR+1
 13866  008E  0871               	movf	??_MyUART_ISR,w
 13867  008F  0021               	movlb	1	; select bank1
 13868  0090  00CD               	movwf	_Angle^(0+128)
 13869  0091  0872               	movf	??_MyUART_ISR+1,w
 13870  0092  00CE               	movwf	(_Angle+1)^(0+128)
 13871                           
 13872                           ;main.c: 92: } else if(Type == 'P') {
 13873  0093  28B8               	goto	i1l3519
 13874  0094                     i1l3511:	
 13875  0094  3050               	movlw	80
 13876  0095  0020               	movlb	0	; select bank0
 13877  0096  063E               	xorwf	_Type,w
 13878  0097  1D03               	btfss	3,2
 13879  0098  28A3               	goto	i1l3515
 13880                           
 13881                           ;main.c: 93: EUSART_Write('P');
 13882  0099  3050               	movlw	80
 13883  009A  318F  275B  3180   	fcall	_EUSART_Write
 13884                           
 13885                           ;main.c: 94: EUSART_Write('+');
 13886  009D  302B               	movlw	43
 13887  009E  318F  275B  3180   	fcall	_EUSART_Write
 13888                           
 13889                           ;main.c: 95: EUSART_Write('{');
 13890  00A1  307B               	movlw	123
 13891  00A2  28B6               	goto	L3
 13892  00A3                     i1l3515:	
 13893                           ;main.c: 96: } else {
 13894                           
 13895                           
 13896                           ;main.c: 97: EUSART_Write('$');
 13897  00A3  3024               	movlw	36
 13898  00A4  318F  275B  3180   	fcall	_EUSART_Write
 13899                           
 13900                           ;main.c: 98: EUSART_Write('M');
 13901  00A7  304D               	movlw	77
 13902  00A8  318F  275B  3180   	fcall	_EUSART_Write
 13903                           
 13904                           ;main.c: 99: EUSART_Write('q');
 13905  00AB  3071               	movlw	113
 13906  00AC  28B6               	goto	L3
 13907  00AD                     i1l3517:	
 13908                           ;main.c: 100: }
 13909                           ;main.c: 101: } else {
 13910                           
 13911                           
 13912                           ;main.c: 102: EUSART_Write('$');
 13913  00AD  3024               	movlw	36
 13914  00AE  318F  275B  3180   	fcall	_EUSART_Write
 13915                           
 13916                           ;main.c: 103: EUSART_Write('C');
 13917  00B1  3043               	movlw	67
 13918  00B2  318F  275B  3180   	fcall	_EUSART_Write
 13919                           
 13920                           ;main.c: 104: EUSART_Write('g');
 13921  00B5  3067               	movlw	103
 13922  00B6                     L3:	
 13923  00B6  318F  275B         	fcall	_EUSART_Write
 13924  00B8                     i1l3519:	
 13925                           
 13926                           ;main.c: 105: }
 13927                           ;main.c: 106: PosUart = S_Idle;
 13928  00B8  0020               	movlb	0	; select bank0
 13929  00B9  01BD               	clrf	_PosUart
 13930                           
 13931                           ;main.c: 107: break;
 13932  00BA  0008               	return
 13933  00BB                     i1l3521:	
 13934                           ;main.c: 108: default:
 13935                           
 13936                           
 13937                           ;main.c: 109: PosUart = S_Idle;
 13938  00BB  01BD               	clrf	_PosUart
 13939                           
 13940                           ;main.c: 111: }
 13941                           
 13942                           ;main.c: 110: break;
 13943  00BC  0008               	return
 13944  00BD                     i1l3525:	
 13945  00BD  0020               	movlb	0	; select bank0
 13946  00BE  083D               	movf	_PosUart,w
 13947                           
 13948                           ; Switch size 1, requested type "space"
 13949                           ; Number of cases is 3, Range of values is 0 to 2
 13950                           ; switch strategies available:
 13951                           ; Name         Instructions Cycles
 13952                           ; simple_byte           10     6 (average)
 13953                           ; direct_byte           12     6 (fixed)
 13954                           ; jumptable            260     6 (fixed)
 13955                           ;	Chosen strategy is simple_byte
 13956  00BF  3A00               	xorlw	0	; case 0
 13957  00C0  1903               	skipnz
 13958  00C1  284C               	goto	i1l3489
 13959  00C2  3A01               	xorlw	1	; case 1
 13960  00C3  1903               	skipnz
 13961  00C4  2860               	goto	i1l3499
 13962  00C5  3A03               	xorlw	3	; case 2
 13963  00C6  1903               	skipnz
 13964  00C7  2869               	goto	i1l3501
 13965  00C8  28BB               	goto	i1l3521
 13966  00C9  0008               	return
 13967  00CA                     __end_of_MyUART_ISR:	
 13968                           
 13969                           	psect	text124
 13970  0F5B                     __ptext124:	
 13971 ;; *************** function _EUSART_Write *****************
 13972 ;; Defined at:
 13973 ;;		line 162 in file "mcc_generated_files/eusart.c"
 13974 ;; Parameters:    Size  Location     Type
 13975 ;;  txData          1    wreg     unsigned char 
 13976 ;; Auto vars:     Size  Location     Type
 13977 ;;  txData          1    0[COMMON] unsigned char 
 13978 ;; Return value:  Size  Location     Type
 13979 ;;                  1    wreg      void 
 13980 ;; Registers used:
 13981 ;;		wreg
 13982 ;; Tracked objects:
 13983 ;;		On entry : 0/0
 13984 ;;		On exit  : 0/0
 13985 ;;		Unchanged: 0/0
 13986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13988 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13990 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13991 ;;Total ram usage:        1 bytes
 13992 ;; Hardware stack levels used:    1
 13993 ;; This function calls:
 13994 ;;		Nothing
 13995 ;; This function is called by:
 13996 ;;		_MyTimer2ISR
 13997 ;;		_MyUART_ISR
 13998 ;; This function uses a non-reentrant model
 13999 ;;
 14000                           
 14001                           
 14002                           ;psect for function _EUSART_Write
 14003  0F5B                     _EUSART_Write:	
 14004                           
 14005                           ;incstack = 0
 14006                           ; Regs used in _EUSART_Write: [wreg]
 14007                           ;EUSART_Write@txData stored from wreg
 14008  0F5B  00F0               	movwf	EUSART_Write@txData
 14009  0F5C                     i1l635:	
 14010                           ;eusart.c: 165: {
 14011                           
 14012                           ;eusart.c: 164: while(0 == PIR1bits.TXIF)
 14013                           
 14014  0F5C  0020               	movlb	0	; select bank0
 14015  0F5D  1E10               	btfss	16,4	;volatile
 14016  0F5E  2F5C               	goto	i1l635
 14017                           
 14018                           ;eusart.c: 166: }
 14019                           ;eusart.c: 168: TX1REG = txData;
 14020  0F5F  0870               	movf	EUSART_Write@txData,w
 14021  0F60  0023               	movlb	3	; select bank3
 14022  0F61  009A               	movwf	26	;volatile
 14023  0F62  0008               	return
 14024  0F63                     __end_of_EUSART_Write:	
 14025                           
 14026                           	psect	text125
 14027  0ECF                     __ptext125:	
 14028 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 14029 ;; Defined at:
 14030 ;;		line 209 in file "mcc_generated_files/eusart.c"
 14031 ;; Parameters:    Size  Location     Type
 14032 ;;		None
 14033 ;; Auto vars:     Size  Location     Type
 14034 ;;		None
 14035 ;; Return value:  Size  Location     Type
 14036 ;;                  1    wreg      void 
 14037 ;; Registers used:
 14038 ;;		None
 14039 ;; Tracked objects:
 14040 ;;		On entry : 0/0
 14041 ;;		On exit  : 0/0
 14042 ;;		Unchanged: 0/0
 14043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14047 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14048 ;;Total ram usage:        0 bytes
 14049 ;; Hardware stack levels used:    1
 14050 ;; This function calls:
 14051 ;;		Nothing
 14052 ;; This function is called by:
 14053 ;;		_EUSART_Initialize
 14054 ;;		_EUSART_Receive_ISR
 14055 ;; This function uses a non-reentrant model
 14056 ;;
 14057                           
 14058                           
 14059                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 14060  0ECF                     _EUSART_DefaultOverrunErrorHandler:	
 14061                           
 14062                           ;eusart.c: 212: RC1STAbits.CREN = 0;
 14063                           
 14064                           ;incstack = 0
 14065                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 14066  0ECF  0023               	movlb	3	; select bank3
 14067  0ED0  121D               	bcf	29,4	;volatile
 14068                           
 14069                           ;eusart.c: 213: RC1STAbits.CREN = 1;
 14070  0ED1  161D               	bsf	29,4	;volatile
 14071  0ED2  0008               	return
 14072  0ED3                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 14073                           
 14074                           	psect	text126
 14075  0E8A                     __ptext126:	
 14076 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 14077 ;; Defined at:
 14078 ;;		line 207 in file "mcc_generated_files/eusart.c"
 14079 ;; Parameters:    Size  Location     Type
 14080 ;;		None
 14081 ;; Auto vars:     Size  Location     Type
 14082 ;;		None
 14083 ;; Return value:  Size  Location     Type
 14084 ;;                  1    wreg      void 
 14085 ;; Registers used:
 14086 ;;		None
 14087 ;; Tracked objects:
 14088 ;;		On entry : 0/0
 14089 ;;		On exit  : 0/0
 14090 ;;		Unchanged: 0/0
 14091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14095 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14096 ;;Total ram usage:        0 bytes
 14097 ;; Hardware stack levels used:    1
 14098 ;; This function calls:
 14099 ;;		Nothing
 14100 ;; This function is called by:
 14101 ;;		_EUSART_Initialize
 14102 ;;		_EUSART_Receive_ISR
 14103 ;; This function uses a non-reentrant model
 14104 ;;
 14105                           
 14106                           
 14107                           ;psect for function _EUSART_DefaultFramingErrorHandler
 14108  0E8A                     _EUSART_DefaultFramingErrorHandler:	
 14109                           
 14110                           ;incstack = 0
 14111                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 14112  0E8A  0008               	return
 14113  0E8B                     __end_of_EUSART_DefaultFramingErrorHandler:	
 14114                           
 14115                           	psect	text127
 14116  0E90                     __ptext127:	
 14117 ;; *************** function _EUSART_DefaultErrorHandler *****************
 14118 ;; Defined at:
 14119 ;;		line 217 in file "mcc_generated_files/eusart.c"
 14120 ;; Parameters:    Size  Location     Type
 14121 ;;		None
 14122 ;; Auto vars:     Size  Location     Type
 14123 ;;		None
 14124 ;; Return value:  Size  Location     Type
 14125 ;;                  1    wreg      void 
 14126 ;; Registers used:
 14127 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14128 ;; Tracked objects:
 14129 ;;		On entry : 0/0
 14130 ;;		On exit  : 0/0
 14131 ;;		Unchanged: 0/0
 14132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14136 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14137 ;;Total ram usage:        0 bytes
 14138 ;; Hardware stack levels used:    1
 14139 ;; Hardware stack levels required when called:    1
 14140 ;; This function calls:
 14141 ;;		_EUSART_RxDataHandler
 14142 ;; This function is called by:
 14143 ;;		_EUSART_Initialize
 14144 ;;		_EUSART_Receive_ISR
 14145 ;; This function uses a non-reentrant model
 14146 ;;
 14147                           
 14148                           
 14149                           ;psect for function _EUSART_DefaultErrorHandler
 14150  0E90                     _EUSART_DefaultErrorHandler:	
 14151                           
 14152                           ;eusart.c: 218: EUSART_RxDataHandler();
 14153                           
 14154                           ;incstack = 0
 14155                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 14156  0E90  3186  26C3         	fcall	_EUSART_RxDataHandler
 14157  0E92  0008               	return
 14158  0E93                     __end_of_EUSART_DefaultErrorHandler:	
 14159                           
 14160                           	psect	text128
 14161  06C3                     __ptext128:	
 14162 ;; *************** function _EUSART_RxDataHandler *****************
 14163 ;; Defined at:
 14164 ;;		line 197 in file "mcc_generated_files/eusart.c"
 14165 ;; Parameters:    Size  Location     Type
 14166 ;;		None
 14167 ;; Auto vars:     Size  Location     Type
 14168 ;;		None
 14169 ;; Return value:  Size  Location     Type
 14170 ;;                  1    wreg      void 
 14171 ;; Registers used:
 14172 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14173 ;; Tracked objects:
 14174 ;;		On entry : 0/0
 14175 ;;		On exit  : 0/0
 14176 ;;		Unchanged: 0/0
 14177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14180 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14181 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14182 ;;Total ram usage:        1 bytes
 14183 ;; Hardware stack levels used:    1
 14184 ;; This function calls:
 14185 ;;		Nothing
 14186 ;; This function is called by:
 14187 ;;		_EUSART_Receive_ISR
 14188 ;;		_EUSART_DefaultErrorHandler
 14189 ;; This function uses a non-reentrant model
 14190 ;;
 14191                           
 14192                           
 14193                           ;psect for function _EUSART_RxDataHandler
 14194  06C3                     _EUSART_RxDataHandler:	
 14195                           
 14196                           ;eusart.c: 199: eusartRxBuffer[eusartRxHead++] = RC1REG;
 14197                           
 14198                           ;incstack = 0
 14199                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 14200  06C3  0023               	movlb	3	; select bank3
 14201  06C4  0819               	movf	25,w	;volatile
 14202  06C5  00F0               	movwf	??_EUSART_RxDataHandler
 14203  06C6  0020               	movlb	0	; select bank0
 14204  06C7  0843               	movf	_eusartRxHead,w
 14205  06C8  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 14206  06C9  0086               	movwf	6
 14207  06CA  0187               	clrf	7
 14208  06CB  0870               	movf	??_EUSART_RxDataHandler,w
 14209  06CC  0081               	movwf	1
 14210  06CD  3001               	movlw	1
 14211  06CE  00F0               	movwf	??_EUSART_RxDataHandler
 14212  06CF  0870               	movf	??_EUSART_RxDataHandler,w
 14213  06D0  07C3               	addwf	_eusartRxHead,f	;volatile
 14214                           
 14215                           ;eusart.c: 200: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 14216  06D1  3008               	movlw	8
 14217  06D2  0243               	subwf	_eusartRxHead,w	;volatile
 14218  06D3  1803               	btfsc	3,0
 14219                           
 14220                           ;eusart.c: 201: {
 14221                           ;eusart.c: 202: eusartRxHead = 0;
 14222  06D4  01C3               	clrf	_eusartRxHead	;volatile
 14223                           
 14224                           ;eusart.c: 203: }
 14225                           ;eusart.c: 204: eusartRxCount++;
 14226  06D5  3001               	movlw	1
 14227  06D6  00F0               	movwf	??_EUSART_RxDataHandler
 14228  06D7  0870               	movf	??_EUSART_RxDataHandler,w
 14229  06D8  07C1               	addwf	_eusartRxCount,f	;volatile
 14230  06D9  0008               	return
 14231  06DA                     __end_of_EUSART_RxDataHandler:	
 14232  007E                     btemp	set	126	;btemp
 14233  007E                     int$flags	set	126
 14234  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    32
    Data        2
    BSS         54
    Persistent  10
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     26      62
    BANK1            80     17      47
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    I2C_Read1ByteRegister@returnValue.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Read2ByteRegister@returnValue.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Write1ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Write2ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    I2C_DO_TX$1871$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_RX$1877$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX_EMPTY$1883$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_RX_EMPTY$1889$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX_EMPTY$1888	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX_EMPTY$1883	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_DO_RX$1882	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_RX$1877	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_DO_TX$1876	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX$1871	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_MasterFsm$1870	const PTR FTN()enum E12103 size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    I2C_CallbackReturnStop@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_CallbackReturnReset@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    Absolute function$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S443$0$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyTimer2ISR(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyTimer2ISR(), TMR2_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyUART_ISR(), EUSART_Receive_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), Absolute function(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), Absolute function(), 

    I2C_SetCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_SetCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> i1_wr1RegCompleteHandler(), i1_rd2RegCompleteHandler(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_SetAddressNackCallback@ptr	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    I2C_SetAddressNackCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> Absolute function(), 

    I2C_SetDataCompleteCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_SetDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> i1_wr1RegCompleteHandler(), i1_rd2RegCompleteHandler(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_SetBuffer@buffer	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(BANK1[1]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@reg(BANK0[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S443$data_ptr	PTR unsigned char  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(BANK1[1]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@reg(BANK0[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_Status.data_ptr	PTR unsigned char  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(BANK1[1]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@reg(BANK0[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S443$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_Status.callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S443$callbackTable	PTR FTN(PTR void ,)enum E97[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_Status.callbackTable	PTR FTN(PTR void ,)enum E97[6] size(2) Largest target is 1
		 -> i1_I2C_CallbackReturnReset(), i1_I2C_CallbackReturnStop(), i1_wr1RegCompleteHandler(), i1_rd2RegCompleteHandler(), 
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    fsmStateTable	const PTR FTN()enum E12103[16] size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyUART_ISR(), EUSART_Receive_ISR(), Absolute function(), 

    rdBlkRegCompleteHandler@ptr.data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    wr2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    wr1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    rd2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    rd1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S85$data	PTR unsigned char  size(1) Largest target is 0

    bufferBlock.data	PTR unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _PWM3_LoadDutyValue->___lwdiv
    i1_I2C_SetAddressNackCallback->i1_I2C_SetCallback
    i1_I2C_MasterWrite->i1_I2C_MasterOperation
    i1_I2C_MasterFsm->i1_I2C_DO_TX
    i1_I2C_DO_TX_EMPTY->i1_I2C_CallbackReturnReset
    i1_I2C_DO_TX_EMPTY->i1_I2C_CallbackReturnStop
    i1_I2C_DO_TX_EMPTY->i1_rd1RegCompleteHandler
    i1_I2C_DO_TX_EMPTY->i1_rd2RegCompleteHandler
    i1_I2C_DO_TX_EMPTY->i1_rdBlkRegCompleteHandler
    i1_I2C_DO_TX_EMPTY->i1_wr1RegCompleteHandler
    i1_I2C_DO_TX_EMPTY->i1_wr2RegCompleteHandler
    i1_I2C_DO_TX->i1_I2C_CallbackReturnReset
    i1_I2C_DO_TX->i1_I2C_CallbackReturnStop
    i1_I2C_DO_TX->i1_rd1RegCompleteHandler
    i1_I2C_DO_TX->i1_rd2RegCompleteHandler
    i1_I2C_DO_TX->i1_rdBlkRegCompleteHandler
    i1_I2C_DO_TX->i1_wr1RegCompleteHandler
    i1_I2C_DO_TX->i1_wr2RegCompleteHandler
    i1_I2C_DO_RX->i1_I2C_CallbackReturnReset
    i1_I2C_DO_RX->i1_I2C_CallbackReturnStop
    i1_I2C_DO_RX->i1_rd1RegCompleteHandler
    i1_I2C_DO_RX->i1_rd2RegCompleteHandler
    i1_I2C_DO_RX->i1_rdBlkRegCompleteHandler
    i1_I2C_DO_RX->i1_wr1RegCompleteHandler
    i1_I2C_DO_RX->i1_wr2RegCompleteHandler
    i1_I2C_DO_ADDRESS_NACK->i1_I2C_CallbackReturnReset
    i1_I2C_DO_ADDRESS_NACK->i1_I2C_CallbackReturnStop
    i1_I2C_DO_ADDRESS_NACK->i1_rd1RegCompleteHandler
    i1_I2C_DO_ADDRESS_NACK->i1_rd2RegCompleteHandler
    i1_I2C_DO_ADDRESS_NACK->i1_rdBlkRegCompleteHandler
    i1_I2C_DO_ADDRESS_NACK->i1_wr1RegCompleteHandler
    i1_I2C_DO_ADDRESS_NACK->i1_wr2RegCompleteHandler
    i1_wr2RegCompleteHandler->i1_I2C_SetDataCompleteCallback
    i1_wr1RegCompleteHandler->i1_I2C_SetDataCompleteCallback
    i1_rdBlkRegCompleteHandler->i1_I2C_SetDataCompleteCallback
    i1_rd2RegCompleteHandler->i1_I2C_SetDataCompleteCallback
    i1_rd1RegCompleteHandler->i1_I2C_SetDataCompleteCallback
    i1_I2C_SetDataCompleteCallback->i1_I2C_SetCallback
    _MyUART_ISR->_EUSART_Write
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _TMR2_WriteTimer->_TMR2_Counter8BitSet
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _I2C_Write1ByteRegister->_I2C_SetAddressNackCallback
    _I2C_Write1ByteRegister->_I2C_SetDataCompleteCallback
    _I2C_SetAddressNackCallback->_I2C_SetCallback
    _I2C_DO_SEND_ADR_WRITE->_I2C_MasterSendTxData
    _wr2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _wr1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rdBlkRegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _I2C_SetDataCompleteCallback->_I2C_SetCallback

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _TMR2_ISR->_MyTimer2ISR
    _MyTimer2ISR->_I2C_Read2ByteRegister
    i1_I2C_MasterWrite->i1_I2C_MasterOperation
    i1_I2C_Poller->i1_I2C_MasterFsm

Critical Paths under _main in BANK1

    _main->_I2C_Write1ByteRegister
    _I2C_MasterWrite->_I2C_MasterOperation
    _I2C_Poller->_I2C_MasterFsm
    _I2C_MasterFsm->_I2C_DO_TX
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnReset
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnStop
    _I2C_DO_TX_EMPTY->_rd1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rd2RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rdBlkRegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr2RegCompleteHandler
    _I2C_DO_TX->_I2C_CallbackReturnReset
    _I2C_DO_TX->_I2C_CallbackReturnStop
    _I2C_DO_TX->_rd1RegCompleteHandler
    _I2C_DO_TX->_rd2RegCompleteHandler
    _I2C_DO_TX->_rdBlkRegCompleteHandler
    _I2C_DO_TX->_wr1RegCompleteHandler
    _I2C_DO_TX->_wr2RegCompleteHandler
    _I2C_DO_RX->_I2C_CallbackReturnReset
    _I2C_DO_RX->_I2C_CallbackReturnStop
    _I2C_DO_RX->_rd1RegCompleteHandler
    _I2C_DO_RX->_rd2RegCompleteHandler
    _I2C_DO_RX->_rdBlkRegCompleteHandler
    _I2C_DO_RX->_wr1RegCompleteHandler
    _I2C_DO_RX->_wr2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnReset
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnStop
    _I2C_DO_ADDRESS_NACK->_rd1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rd2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rdBlkRegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr2RegCompleteHandler
    _wr2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _wr1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rdBlkRegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd1RegCompleteHandler->_I2C_SetDataCompleteCallback

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  100431
                                             15 BANK1      2     2      0
       _EUSART_SetRxInterruptHandler
             _I2C_Write1ByteRegister
                  _SYSTEM_Initialize
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
                    _TMR2_WriteTimer
 ---------------------------------------------------------------------------------
 (1) _TMR2_WriteTimer                                      1     1      0      44
                                             19 BANK0      1     1      0
                _TMR2_Counter8BitSet
 ---------------------------------------------------------------------------------
 (2) _TMR2_Counter8BitSet                                  1     1      0      22
                                             18 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
                         _TMR2_Start
 ---------------------------------------------------------------------------------
 (2) _TMR2_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     642
                  _EUSART_Initialize
                     _I2C_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM3_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     174
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR2_SetInterruptHandler                             2     0      2     174
                                             18 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     468
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     174
                                             18 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                             18 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                             18 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                             18 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _I2C_Write1ByteRegister                               4     2      2   99397
                                             11 BANK1      4     2      2
                          _I2C_Close
                    _I2C_MasterWrite
                           _I2C_Open
         _I2C_SetAddressNackCallback
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (2) _I2C_SetAddressNackCallback                           4     1      3    2189
                                             23 BANK0      3     0      3
                                              0 BANK1      1     1      0
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (2) _I2C_Open                                             3     3      0      68
                                             18 BANK0      3     3      0
                 _I2C_MasterClearIrq
                     _I2C_MasterOpen
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterOpen                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_MasterWrite                                      0     0      0   91367
                _I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterOperation                                  3     3      0   91367
                                              8 BANK1      3     3      0
                    _I2C_MasterStart
                         _I2C_Poller
 ---------------------------------------------------------------------------------
 (4) _I2C_Poller                                           0     0      0   91197
                      _I2C_MasterFsm
             _I2C_MasterWaitForEvent
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterWaitForEvent                               0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterFsm                                        3     3      0   91197
                                              5 BANK1      3     3      0
                _I2C_DO_ADDRESS_NACK *
                        _I2C_DO_IDLE *
                        _I2C_DO_RCEN *
                       _I2C_DO_RESET *
                          _I2C_DO_RX *
                      _I2C_DO_RX_ACK *
             _I2C_DO_RX_NACK_RESTART *
                _I2C_DO_RX_NACK_STOP *
               _I2C_DO_SEND_ADR_READ *
              _I2C_DO_SEND_ADR_WRITE *
                _I2C_DO_SEND_RESTART *
           _I2C_DO_SEND_RESTART_READ *
          _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_DO_SEND_STOP *
                          _I2C_DO_TX *
                    _I2C_DO_TX_EMPTY *
                 _I2C_MasterClearIrq
                   _I2C_MasterIsNack
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_TX_EMPTY                                      1     1      0   22751
                                              2 BANK1      1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
                   _I2C_MasterSetIrq
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterSetIrq                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_TX                                            3     3      0   22882
                                              2 BANK1      3     3      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
           _I2C_DO_SEND_RESTART_READ
          _I2C_DO_SEND_RESTART_WRITE
                   _I2C_DO_SEND_STOP
                   _I2C_MasterIsNack
               _I2C_MasterSendTxData
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterIsNack                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_SEND_RESTART_WRITE                            0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_SEND_RESTART_READ                             0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_SEND_ADR_WRITE                                0     0      0      31
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_SEND_ADR_READ                                 0     0      0      31
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterSendTxData                                 1     1      0      31
                                             18 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RX_ACK                                        0     0      0       0
                  _I2C_MasterSendAck
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RX                                            1     1      0   22751
                                              2 BANK1      1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
             _I2C_DO_RX_NACK_RESTART
                _I2C_DO_RX_NACK_STOP
                _I2C_MasterGetRxData
                  _I2C_MasterSendAck
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterSendAck                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterGetRxData                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RX_NACK_STOP                                  0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RX_NACK_RESTART                               0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterSendNack                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RESET                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RCEN                                          0     0      0       0
                  _I2C_MasterStartRx
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterStartRx                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_ADDRESS_NACK                                  1     1      0   22751
                                              2 BANK1      1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _wr2RegCompleteHandler                                1     0      1    4479
                                              1 BANK1      1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _wr1RegCompleteHandler                                1     0      1    4479
                                              1 BANK1      1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _rdBlkRegCompleteHandler                              1     0      1    4510
                                              1 BANK1      1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _rd2RegCompleteHandler                                1     0      1    4519
                                              1 BANK1      1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _rd1RegCompleteHandler                                1     0      1    4479
                                              1 BANK1      1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (2) _I2C_SetDataCompleteCallback                          4     1      3    2909
                                             23 BANK0      3     0      3
                                              0 BANK1      1     1      0
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (3) _I2C_SetCallback                                      5     2      3    1117
                                             18 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (2) _I2C_SetBuffer                                        4     2      2    1539
                                             18 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_SEND_STOP                                     0     0      0       0
                     _I2C_MasterStop
 ---------------------------------------------------------------------------------
 (8) _I2C_MasterStop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_SEND_RESTART                                  0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (8) _I2C_MasterEnableRestart                              0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_CallbackReturnStop                               1     0      1       0
                                              1 BANK1      1     0      1
 ---------------------------------------------------------------------------------
 (7) _I2C_CallbackReturnReset                              1     0      1     285
                                              1 BANK1      1     0      1
 ---------------------------------------------------------------------------------
 (19) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (4) _I2C_MasterStart                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Close                                            2     2      0      37
                                             18 BANK0      2     2      0
                 _I2C_MasterClearIrq
                    _I2C_MasterClose
               _I2C_MasterDisableIrq
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterDisableIrq                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterClose                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterClearIrq                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 19
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                          1     1      0   42861
                                             17 BANK0      1     1      0
                   Absolute function *
                 _EUSART_Receive_ISR *
                         _MyUART_ISR *
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (11) _TMR2_ISR                                            0     0      0   42684
                   Absolute function *
                        _MyTimer2ISR *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (12) _TMR2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _MyTimer2ISR                                         3     3      0   42684
                                             14 BANK0      3     3      0
                       _EUSART_Write
              _I2C_Read2ByteRegister
                 _PWM3_LoadDutyValue
                            ___lwdiv
           i1_I2C_Write1ByteRegister
 ---------------------------------------------------------------------------------
 (13) i1_I2C_Write1ByteRegister                            4     2      2   20994
                                              5 BANK0      4     2      2
                        i1_I2C_Close
                  i1_I2C_MasterWrite
                         i1_I2C_Open
       i1_I2C_SetAddressNackCallback
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (13) ___lwdiv                                             8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (13) _PWM3_LoadDutyValue                                  4     2      2     120
                                              8 COMMON     4     2      2
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (13) _I2C_Read2ByteRegister                               9     7      2   21219
                                              5 BANK0      9     7      2
                        i1_I2C_Close
                  i1_I2C_MasterWrite
                         i1_I2C_Open
       i1_I2C_SetAddressNackCallback
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_I2C_SetAddressNackCallback                        4     1      3     406
                                              5 COMMON     4     1      3
                  i1_I2C_SetCallback
 ---------------------------------------------------------------------------------
 (14) i1_I2C_Open                                          3     3      0      46
                                              0 COMMON     3     3      0
               i1_I2C_MasterClearIrq
                   i1_I2C_MasterOpen
 ---------------------------------------------------------------------------------
 (15) i1_I2C_MasterOpen                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_I2C_MasterWrite                                   0     0      0   19120
              i1_I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (15) i1_I2C_MasterOperation                               3     3      0   19120
                                             13 COMMON     1     1      0
                                              3 BANK0      2     2      0
                  i1_I2C_MasterStart
                       i1_I2C_Poller
 ---------------------------------------------------------------------------------
 (16) i1_I2C_Poller                                        0     0      0   18950
                    i1_I2C_MasterFsm
           i1_I2C_MasterWaitForEvent
 ---------------------------------------------------------------------------------
 (17) i1_I2C_MasterWaitForEvent                            0     0      0       0
 ---------------------------------------------------------------------------------
 (17) i1_I2C_MasterFsm                                     3     3      0   18950
                                              0 BANK0      3     3      0
              i1_I2C_DO_ADDRESS_NACK *
                      i1_I2C_DO_IDLE *
                      i1_I2C_DO_RCEN *
                     i1_I2C_DO_RESET *
                        i1_I2C_DO_RX *
                    i1_I2C_DO_RX_ACK *
           i1_I2C_DO_RX_NACK_RESTART *
              i1_I2C_DO_RX_NACK_STOP *
             i1_I2C_DO_SEND_ADR_READ *
            i1_I2C_DO_SEND_ADR_WRITE *
              i1_I2C_DO_SEND_RESTART *
         i1_I2C_DO_SEND_RESTART_READ *
        i1_I2C_DO_SEND_RESTART_WRITE *
                 i1_I2C_DO_SEND_STOP *
                        i1_I2C_DO_TX *
                  i1_I2C_DO_TX_EMPTY *
               i1_I2C_MasterClearIrq
                 i1_I2C_MasterIsNack
 ---------------------------------------------------------------------------------
 (18) i1_I2C_DO_TX_EMPTY                                   1     1      0    4696
                                             10 COMMON     1     1      0
                   Absolute function *
          i1_I2C_CallbackReturnReset *
           i1_I2C_CallbackReturnStop *
              i1_I2C_DO_SEND_RESTART
                 i1_I2C_DO_SEND_STOP
                 i1_I2C_MasterSetIrq
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (19) i1_I2C_MasterSetIrq                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i1_I2C_DO_TX                                         3     3      0    4818
                                             10 COMMON     3     3      0
                   Absolute function *
          i1_I2C_CallbackReturnReset *
           i1_I2C_CallbackReturnStop *
         i1_I2C_DO_SEND_RESTART_READ
        i1_I2C_DO_SEND_RESTART_WRITE
                 i1_I2C_DO_SEND_STOP
                 i1_I2C_MasterIsNack
             i1_I2C_MasterSendTxData
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (18) i1_I2C_MasterIsNack                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_SEND_RESTART_WRITE                         0     0      0       0
          i1_I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_SEND_RESTART_READ                          0     0      0       0
          i1_I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (18) i1_I2C_DO_SEND_ADR_WRITE                             0     0      0      22
             i1_I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (18) i1_I2C_DO_SEND_ADR_READ                              0     0      0      22
             i1_I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (19) i1_I2C_MasterSendTxData                              1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (18) i1_I2C_DO_RX_ACK                                     0     0      0       0
                i1_I2C_MasterSendAck
 ---------------------------------------------------------------------------------
 (18) i1_I2C_DO_RX                                         1     1      0    4696
                                             10 COMMON     1     1      0
                   Absolute function *
          i1_I2C_CallbackReturnReset *
           i1_I2C_CallbackReturnStop *
           i1_I2C_DO_RX_NACK_RESTART
              i1_I2C_DO_RX_NACK_STOP
              i1_I2C_MasterGetRxData
                i1_I2C_MasterSendAck
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (19) i1_I2C_MasterSendAck                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (19) i1_I2C_MasterGetRxData                               0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i1_I2C_DO_RX_NACK_STOP                               0     0      0       0
               i1_I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (18) i1_I2C_DO_RX_NACK_RESTART                            0     0      0       0
               i1_I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (19) i1_I2C_MasterSendNack                                0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i1_I2C_DO_RESET                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i1_I2C_DO_RCEN                                       0     0      0       0
                i1_I2C_MasterStartRx
 ---------------------------------------------------------------------------------
 (19) i1_I2C_MasterStartRx                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i1_I2C_DO_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i1_I2C_DO_ADDRESS_NACK                               1     1      0    4696
                                             10 COMMON     1     1      0
                   Absolute function *
          i1_I2C_CallbackReturnReset *
           i1_I2C_CallbackReturnStop *
              i1_I2C_DO_SEND_RESTART
                 i1_I2C_DO_SEND_STOP
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (19) i1_wr2RegCompleteHandler                             1     0      1     914
                                              9 COMMON     1     0      1
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (19) i1_wr1RegCompleteHandler                             1     0      1     914
                                              9 COMMON     1     0      1
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (19) i1_rdBlkRegCompleteHandler                           1     0      1     936
                                              9 COMMON     1     0      1
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (19) i1_rd2RegCompleteHandler                             1     0      1     914
                                              9 COMMON     1     0      1
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (19) i1_rd1RegCompleteHandler                             1     0      1     914
                                              9 COMMON     1     0      1
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_I2C_SetDataCompleteCallback                       4     1      3     666
                                              5 COMMON     4     1      3
                  i1_I2C_SetCallback
 ---------------------------------------------------------------------------------
 (15) i1_I2C_SetCallback                                   5     2      3     258
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (14) i1_I2C_SetBuffer                                     4     2      2     226
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_SEND_STOP                                  0     0      0       0
                   i1_I2C_MasterStop
 ---------------------------------------------------------------------------------
 (20) i1_I2C_MasterStop                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_SEND_RESTART                               0     0      0       0
          i1_I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (20) i1_I2C_MasterEnableRestart                           0     0      0       0
 ---------------------------------------------------------------------------------
 (19) i1_I2C_CallbackReturnStop                            1     0      1       0
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (19) i1_I2C_CallbackReturnReset                           1     0      1     104
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (16) i1_I2C_MasterStart                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_I2C_Close                                         2     2      0      24
                                              0 COMMON     2     2      0
               i1_I2C_MasterClearIrq
                  i1_I2C_MasterClose
             i1_I2C_MasterDisableIrq
 ---------------------------------------------------------------------------------
 (15) i1_I2C_MasterDisableIrq                              0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i1_I2C_MasterClose                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i1_I2C_MasterClearIrq                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _MyUART_ISR                                          5     5      0     177
                                              1 COMMON     5     5      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (13) _EUSART_Write                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (12) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (12) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (19) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 20
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_SetRxInterruptHandler
   _I2C_Write1ByteRegister
     _I2C_Close
       _I2C_MasterClearIrq
       _I2C_MasterClose
       _I2C_MasterDisableIrq
     _I2C_MasterWrite
       _I2C_MasterOperation
         _I2C_MasterStart
         _I2C_Poller
           _I2C_MasterFsm
             _I2C_DO_ADDRESS_NACK *
               Absolute function(Fake) *
               _I2C_CallbackReturnReset *
               _I2C_CallbackReturnStop *
               _I2C_DO_SEND_RESTART *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_STOP *
                 _I2C_MasterStop
               _rd1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rd2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rdBlkRegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
             _I2C_DO_IDLE *
             _I2C_DO_RCEN *
               _I2C_MasterStartRx
             _I2C_DO_RESET *
             _I2C_DO_RX *
               Absolute function(Fake) *
               _I2C_CallbackReturnReset *
               _I2C_CallbackReturnStop *
               _I2C_DO_RX_NACK_RESTART *
                 _I2C_MasterSendNack
               _I2C_DO_RX_NACK_STOP *
                 _I2C_MasterSendNack
               _I2C_MasterGetRxData *
               _I2C_MasterSendAck *
               _rd1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rd2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rdBlkRegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
             _I2C_DO_RX_ACK *
               _I2C_MasterSendAck
             _I2C_DO_RX_NACK_RESTART *
               _I2C_MasterSendNack
             _I2C_DO_RX_NACK_STOP *
               _I2C_MasterSendNack
             _I2C_DO_SEND_ADR_READ *
               _I2C_MasterSendTxData
             _I2C_DO_SEND_ADR_WRITE *
               _I2C_MasterSendTxData
             _I2C_DO_SEND_RESTART *
               _I2C_MasterEnableRestart
             _I2C_DO_SEND_RESTART_READ *
               _I2C_MasterEnableRestart
             _I2C_DO_SEND_RESTART_WRITE *
               _I2C_MasterEnableRestart
             _I2C_DO_SEND_STOP *
               _I2C_MasterStop
             _I2C_DO_TX *
               Absolute function(Fake) *
               _I2C_CallbackReturnReset *
               _I2C_CallbackReturnStop *
               _I2C_DO_SEND_RESTART_READ *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_RESTART_WRITE *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_STOP *
                 _I2C_MasterStop
               _I2C_MasterIsNack *
               _I2C_MasterSendTxData *
               _rd1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rd2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rdBlkRegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
             _I2C_DO_TX_EMPTY *
               Absolute function(Fake) *
               _I2C_CallbackReturnReset *
               _I2C_CallbackReturnStop *
               _I2C_DO_SEND_RESTART *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_STOP *
                 _I2C_MasterStop
               _I2C_MasterSetIrq *
               _rd1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rd2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rdBlkRegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
             _I2C_MasterClearIrq *
             _I2C_MasterIsNack *
           _I2C_MasterWaitForEvent
     _I2C_Open
       _I2C_MasterClearIrq
       _I2C_MasterOpen
     _I2C_SetAddressNackCallback
       _I2C_SetCallback
     _I2C_SetBuffer
     _I2C_SetDataCompleteCallback
       _I2C_SetCallback
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
     _I2C_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM3_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
   _TMR2_SetInterruptHandler
   _TMR2_StartTimer
     _TMR2_Start
   _TMR2_WriteTimer
     _TMR2_Counter8BitSet

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _MyUART_ISR *
     _EUSART_Write
   _TMR2_ISR *
     Absolute function(Fake) *
     _MyTimer2ISR *
       _EUSART_Write
       _I2C_Read2ByteRegister
         i1_I2C_Close
           i1_I2C_MasterClearIrq
           i1_I2C_MasterClose
           i1_I2C_MasterDisableIrq
         i1_I2C_MasterWrite
           i1_I2C_MasterOperation
             i1_I2C_MasterStart
             i1_I2C_Poller
               i1_I2C_MasterFsm
                 i1_I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   i1_I2C_CallbackReturnReset *
                   i1_I2C_CallbackReturnStop *
                   i1_I2C_DO_SEND_RESTART *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_STOP *
                     i1_I2C_MasterStop
                   i1_rd1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rd2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rdBlkRegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                 i1_I2C_DO_IDLE *
                 i1_I2C_DO_RCEN *
                   i1_I2C_MasterStartRx
                 i1_I2C_DO_RESET *
                 i1_I2C_DO_RX *
                   Absolute function(Fake) *
                   i1_I2C_CallbackReturnReset *
                   i1_I2C_CallbackReturnStop *
                   i1_I2C_DO_RX_NACK_RESTART *
                     i1_I2C_MasterSendNack
                   i1_I2C_DO_RX_NACK_STOP *
                     i1_I2C_MasterSendNack
                   i1_I2C_MasterGetRxData *
                   i1_I2C_MasterSendAck *
                   i1_rd1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rd2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rdBlkRegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                 i1_I2C_DO_RX_ACK *
                   i1_I2C_MasterSendAck
                 i1_I2C_DO_RX_NACK_RESTART *
                   i1_I2C_MasterSendNack
                 i1_I2C_DO_RX_NACK_STOP *
                   i1_I2C_MasterSendNack
                 i1_I2C_DO_SEND_ADR_READ *
                   i1_I2C_MasterSendTxData
                 i1_I2C_DO_SEND_ADR_WRITE *
                   i1_I2C_MasterSendTxData
                 i1_I2C_DO_SEND_RESTART *
                   i1_I2C_MasterEnableRestart
                 i1_I2C_DO_SEND_RESTART_READ *
                   i1_I2C_MasterEnableRestart
                 i1_I2C_DO_SEND_RESTART_WRITE *
                   i1_I2C_MasterEnableRestart
                 i1_I2C_DO_SEND_STOP *
                   i1_I2C_MasterStop
                 i1_I2C_DO_TX *
                   Absolute function(Fake) *
                   i1_I2C_CallbackReturnReset *
                   i1_I2C_CallbackReturnStop *
                   i1_I2C_DO_SEND_RESTART_READ *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_RESTART_WRITE *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_STOP *
                     i1_I2C_MasterStop
                   i1_I2C_MasterIsNack *
                   i1_I2C_MasterSendTxData *
                   i1_rd1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rd2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rdBlkRegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                 i1_I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   i1_I2C_CallbackReturnReset *
                   i1_I2C_CallbackReturnStop *
                   i1_I2C_DO_SEND_RESTART *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_STOP *
                     i1_I2C_MasterStop
                   i1_I2C_MasterSetIrq *
                   i1_rd1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rd2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rdBlkRegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                 i1_I2C_MasterClearIrq *
                 i1_I2C_MasterIsNack *
               i1_I2C_MasterWaitForEvent
         i1_I2C_Open
           i1_I2C_MasterClearIrq
           i1_I2C_MasterOpen
         i1_I2C_SetAddressNackCallback
           i1_I2C_SetCallback
         i1_I2C_SetBuffer
         i1_I2C_SetDataCompleteCallback
           i1_I2C_SetCallback
       _PWM3_LoadDutyValue
         ___lwdiv (ARG)
       ___lwdiv
       i1_I2C_Write1ByteRegister
         i1_I2C_Close
           i1_I2C_MasterClearIrq
           i1_I2C_MasterClose
           i1_I2C_MasterDisableIrq
         i1_I2C_MasterWrite
           i1_I2C_MasterOperation
             i1_I2C_MasterStart
             i1_I2C_Poller
               i1_I2C_MasterFsm
                 i1_I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   i1_I2C_CallbackReturnReset *
                   i1_I2C_CallbackReturnStop *
                   i1_I2C_DO_SEND_RESTART *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_STOP *
                     i1_I2C_MasterStop
                   i1_rd1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rd2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rdBlkRegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                 i1_I2C_DO_IDLE *
                 i1_I2C_DO_RCEN *
                   i1_I2C_MasterStartRx
                 i1_I2C_DO_RESET *
                 i1_I2C_DO_RX *
                   Absolute function(Fake) *
                   i1_I2C_CallbackReturnReset *
                   i1_I2C_CallbackReturnStop *
                   i1_I2C_DO_RX_NACK_RESTART *
                     i1_I2C_MasterSendNack
                   i1_I2C_DO_RX_NACK_STOP *
                     i1_I2C_MasterSendNack
                   i1_I2C_MasterGetRxData *
                   i1_I2C_MasterSendAck *
                   i1_rd1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rd2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rdBlkRegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                 i1_I2C_DO_RX_ACK *
                   i1_I2C_MasterSendAck
                 i1_I2C_DO_RX_NACK_RESTART *
                   i1_I2C_MasterSendNack
                 i1_I2C_DO_RX_NACK_STOP *
                   i1_I2C_MasterSendNack
                 i1_I2C_DO_SEND_ADR_READ *
                   i1_I2C_MasterSendTxData
                 i1_I2C_DO_SEND_ADR_WRITE *
                   i1_I2C_MasterSendTxData
                 i1_I2C_DO_SEND_RESTART *
                   i1_I2C_MasterEnableRestart
                 i1_I2C_DO_SEND_RESTART_READ *
                   i1_I2C_MasterEnableRestart
                 i1_I2C_DO_SEND_RESTART_WRITE *
                   i1_I2C_MasterEnableRestart
                 i1_I2C_DO_SEND_STOP *
                   i1_I2C_MasterStop
                 i1_I2C_DO_TX *
                   Absolute function(Fake) *
                   i1_I2C_CallbackReturnReset *
                   i1_I2C_CallbackReturnStop *
                   i1_I2C_DO_SEND_RESTART_READ *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_RESTART_WRITE *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_STOP *
                     i1_I2C_MasterStop
                   i1_I2C_MasterIsNack *
                   i1_I2C_MasterSendTxData *
                   i1_rd1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rd2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rdBlkRegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                 i1_I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   i1_I2C_CallbackReturnReset *
                   i1_I2C_CallbackReturnStop *
                   i1_I2C_DO_SEND_RESTART *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_STOP *
                     i1_I2C_MasterStop
                   i1_I2C_MasterSetIrq *
                   i1_rd1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rd2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rdBlkRegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                 i1_I2C_MasterClearIrq *
                 i1_I2C_MasterIsNack *
               i1_I2C_MasterWaitForEvent
         i1_I2C_Open
           i1_I2C_MasterClearIrq
           i1_I2C_MasterOpen
         i1_I2C_SetAddressNackCallback
           i1_I2C_SetCallback
         i1_I2C_SetBuffer
         i1_I2C_SetDataCompleteCallback
           i1_I2C_SetCallback
     _TMR2_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1A      3E       5       77.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     11      2F       7       58.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      7B      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      7B      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Mar 23 17:30:21 2020

                ?_EUSART_SetRxInterruptHandler 0056                         ??_I2C_DO_SEND_ADR_READ 0056  
                                  MyUART_ISR@c 0075                    __size_of_I2C_MasterSendNack 0004  
                           __size_of_I2C_Close 0019               __end_of_TMR2_SetInterruptHandler 0FE2  
                      ??_I2C_DO_SEND_ADR_WRITE 0057                                    __CFG_CP$OFF 0000  
                          __size_of_I2C_Poller 000A                          ??_I2C_DO_SEND_RESTART 0056  
                                  ?i1_I2C_Open 0070                                    __CFG_LVP$ON 0000  
                 __size_of_I2C_MasterOperation 001F                  __size_of_I2C_MasterSendTxData 0006  
                                          l321 0337                                            l403 0228  
                                          l544 0F07                                            l387 014D  
                                          _PR2 001B                         ??_EUSART_RxDataHandler 0070  
                       _I2C_MasterWaitForEvent 0F07                 ?_EUSART_SetFramingErrorHandler 0056  
                     ?i1_rd2RegCompleteHandler 0079                                _TMR2_Initialize 06F0  
                                 __CFG_BORV$LO 0000                                            wreg 0009  
                                 ?i1_I2C_DO_RX 0070                                   ?i1_I2C_DO_TX 0070  
                                 __CFG_IESO$ON 0000                          _I2C_DO_RCEN$intlevel0 0FF0  
                 ??_I2C_SetAddressNackCallback 00B2                       ?i1_wr2RegCompleteHandler 0079  
                                 ?i1_I2C_Close 0070                         _I2C_Write1ByteRegister 040D  
                  ??i1_I2C_MasterEnableRestart 0070                       ??_I2C_CallbackReturnStop 005E  
                                 _I2C_DO_RESET 0FAC                                   __CFG_ZCD$OFF 0000  
                      ??_rd2RegCompleteHandler 005E                                           l4013 0FB0  
                                         l4007 0F8F                                           l4211 0635  
                                         l3813 0699                                           l3805 0654  
                                         l3821 05E9                                           l3681 052C  
                                         l5521 0127                                           l3833 0F6F  
                                         l5601 04D4                        ??i1_I2C_MasterGetRxData 0070  
                                         l3907 07AE                                           l3915 07E9  
                                         l5525 012A                                           l5517 0120  
                                         l3845 0F87                                           l5543 0166  
                                         l5535 0130                                           l3839 0F77  
                                         l3871 0F7F                                           l3863 0F97  
                                         l5607 04D7                                           l5529 012D  
                                         l5561 022A                                           l3857 0F9F  
                                         l5625 04AC                                           l3883 0F39  
                                         l5571 0230                                           l5547 020B  
                                         l3789 0682                                           l3797 066B  
                                         l5573 0473                                           l5565 022D  
                                         l5653 0FF6                                           l3879 0F33  
                                         l5575 0476                                           l5591 0480  
                                         l5585 047D                                           l5593 04C8  
                                         l5753 040F                                           l5579 0479  
                                         l3899 0FA7                                           l3979 0FF0  
                                         l5763 0439                                           l5907 01A3  
                                         l5597 04D1                                           l5693 05E2  
                                         l5909 01AE                                           l5687 05D7  
                                         l5689 05DD                 __size_ofi1_I2C_DO_SEND_RESTART 0004  
                                         _LATA 010C                                           _LATB 010D  
                                         _LATC 010E                                           u3410 01AC  
                                         _T2PR 001B                                           u3437 01B4  
                __end_ofi1_I2C_DO_SEND_RESTART 0EE7                                           _TMR2 001A  
                                         _WPUA 020C                                           _WPUB 020D  
                                         _WPUC 020E                                           _Data 003F  
                      ??_wr2RegCompleteHandler 005E                                   __CFG_WRT$OFF 0000  
                                __CFG_FCMEN$ON 0000                                           _Type 003E  
                                         _main 016D                       ?_I2C_CallbackReturnReset 00B3  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                             __end_of_I2C_Open 0339                                  i1_I2C_DO_IDLE 0F14  
                                         btemp 007E                                  i1_I2C_DO_RCEN 0F29  
               __end_ofi1_I2C_DO_SEND_ADR_READ 0F6B                                  __CFG_BOREN$ON 0000  
                                         start 0025                   i1I2C_Write1ByteRegister@data 004A  
                                __CFG_MCLRE$ON 0000                            _TMR2_Counter8BitSet 0F1E  
             __size_of_rdBlkRegCompleteHandler 001F                  _I2C_DO_RX_NACK_STOP$intlevel0 0F97  
                      ??i1_I2C_DO_ADDRESS_NACK 007A                                  _I2C_DO_TX$794 00B5  
                             ?_I2C_MasterClose 0070                                  ?i1_I2C_Poller 0070  
                                __CFG_PLLEN$ON 0000                                  ?_EUSART_Write 0070  
          __size_of_I2C_SetAddressNackCallback 000F                 __size_of_OSCILLATOR_Initialize 0007  
                             ?_I2C_MasterStart 0070                                  _I2C_DO_RX_ACK 0F8B  
                             ?_I2C_MasterWrite 0070                  __end_of_OSCILLATOR_Initialize 0F5B  
              ??i1_I2C_SetDataCompleteCallback 0078                          i1I2C_Open@returnValue 0072  
                                        ?_main 0070                                  __CFG_WDTE$OFF 0000  
                                        _T2CON 001C                       ??i1_I2C_MasterDisableIrq 0070  
                                        _T2HLT 001D                                __end_of___lwdiv 03DA  
                                        i1l123 0020                                          _T2TMR 001A  
                                        i1l118 0018                                          i1l321 036E  
                                        _T2RST 001F                                          i1l403 02E1  
                  __end_ofi1_I2C_MasterSendAck 0EDB                                          i1l544 0EF7  
                                        i1l635 0F5C                                          i1l387 01E8  
                 __size_of_I2C_DO_RX_NACK_STOP 0008                              ??_I2C_DO_TX_EMPTY 00B4  
                                        _TRISA 008C                                          _TRISB 008D  
                                        _TRISC 008E                                          _RXPPS 0E24  
                                        _Angle 00CD                    __end_ofi1_I2C_MasterStartRx 0EA8  
                         ?_TMR2_Counter8BitSet 0070                              __end_of_I2C_DO_RX 024A  
                            __end_of_I2C_DO_TX 016D                               __end_of_TMR2_ISR 079E  
                      ??i1_I2C_MasterOperation 007D                                    ?_TMR2_Start 0070  
                            __end_of_I2C_Close 0637                         __size_of_I2C_MasterFsm 002A  
               I2C_MasterOperation@returnValue 00BC                                     _MyUART_ISR 0043  
                            ??i1_I2C_MasterFsm 0044                        _I2C_MasterEnableRestart 0EBA  
                          _I2C_DO_RX$intlevel0 020B                        __end_of_PWM3_Initialize 07E5  
           _I2C_DO_SEND_RESTART_READ$intlevel0 0F6F                                 i1_I2C_DO_RESET 0F19  
                                        pclath 000A                               ?_I2C_SetCallback 0056  
              __end_ofi1_I2C_DO_SEND_ADR_WRITE 0F54                   I2C_SetAddressNackCallback@cb 005B  
                               ?i1_I2C_DO_IDLE 0070                                 ?i1_I2C_DO_RCEN 0070  
                                        status 0003                                          wtemp0 007E  
                            ?_I2C_DO_SEND_STOP 0070                     __size_ofi1_I2C_DO_TX_EMPTY 0025  
                       __size_of_I2C_SetBuffer 000E                                _TMR2_StartTimer 0ECC  
                            ??i1_I2C_SetBuffer 0072                            __size_ofi1_I2C_Open 0037  
                           ??_I2C_DO_SEND_STOP 0056                                  _fsmStateTable 05A6  
                              __initialization 0027                                  ??_MyTimer2ISR 0052  
                    i1_I2C_MasterEnableRestart 0E9F                                   __end_of_main 01BC  
            __size_of_I2C_DO_SEND_RESTART_READ 0008                      ?_I2C_DO_SEND_RESTART_READ 0070  
                               ??i1_I2C_Poller 007D                                 ??_EUSART_Write 0070  
                               ?_I2C_DO_RX_ACK 0070                        __end_of_TMR2_Initialize 0705  
                               __CFG_LPBOR$OFF 0000                    ?_INTERRUPT_InterruptManager 0070  
              __end_ofi1_rd2RegCompleteHandler 0737                 ??_EUSART_SetRxInterruptHandler 0058  
                     _TMR2_SetInterruptHandler 0FD9                                         ??_main 00C1  
                 __end_ofi1_I2C_MasterClearIrq 0E96                              ?_I2C_MasterIsNack 0070  
              __end_ofi1_wr2RegCompleteHandler 0757                          _I2C_Read2ByteRegister 024A  
                              _TMR2_WriteTimer 0F47               __end_ofi1_I2C_DO_RX_NACK_RESTART 0EF7  
                            ?_I2C_MasterSetIrq 0070               I2C_Read2ByteRegister@returnValue 0050  
                           ??_I2C_MasterIsNack 0056                           i1I2C_SetCallback@idx 0074  
                         i1I2C_SetCallback@ptr 0072                          ??_TMR2_Counter8BitSet 0056  
                           ??_I2C_MasterSetIrq 0056      __end_of_EUSART_DefaultFramingErrorHandler 0E8B  
   __size_of_EUSART_DefaultFramingErrorHandler 0001            ??_EUSART_DefaultFramingErrorHandler 0070  
           ?_EUSART_DefaultFramingErrorHandler 0070              _EUSART_DefaultFramingErrorHandler 0E8A  
                       __end_ofi1_I2C_DO_RESET 0F1E                     _EUSART_OverrunErrorHandler 00C7  
                      ??i1_I2C_DO_RX_NACK_STOP 0070                __end_of_I2C_CallbackReturnReset 0F3B  
              __size_of_I2C_CallbackReturnStop 0006                  I2C_SetDataCompleteCallback@cb 005B  
                                       _ANSELA 018C                                         _ANSELB 018D  
                                       _ANSELC 018E                                         _BORCON 0116  
                                 ??_I2C_Poller 005E                                         _RC1REG 0199  
                                       _RA2PPS 0E92                                         _RC1STA 019D  
                                       _RB4PPS 0E9C                                         _RB6PPS 0E9E  
                                       u110_25 06E9                                         _RB7PPS 0E9F  
                                       _ODCONA 028C                                         _ODCONB 028D  
                                       i1l3123 064E                                         _ODCONC 028E  
                                       u112_25 03B1                                         i1l3231 03CC  
                                       i1l3223 03AE                                         i1l3225 03BA  
                                       i1l2531 0747                                         i1l2507 0737  
                                       i1l2515 0727                                         i1l2523 0717  
                                       i1l3235 03D5                            _I2C_DO_TX$intlevel0 0120  
                                       i1l3501 0069                                         i1l3511 0094  
                                       i1l2551 0EDF                                         i1l3521 00BB  
                                       i1l2545 0EDB                                         i1l3515 00A3  
                                       i1l3507 0086                                         i1l2539 06AC  
                                       i1l2619 0F14                                         i1l2627 0F63  
                                       i1l2635 0F4D                                         i1l2563 0EE7  
                                       i1l3517 00AD                                         i1l3525 00BD  
                                       i1l2485 0575                                         i1l2581 0E8C  
                                       i1l2557 0EE3                                         i1l2733 0F19  
                                       u114_25 03BB                                         i1l3519 00B8  
                                       i1l2727 0EEB                                         i1l2575 0EF3  
                                       i1l2585 0E8E                                         i1l2569 0EEF  
                                       u115_25 03C5                                         i1l3495 0058  
                                       i1l5423 01C6                                         i1l5415 01BC  
                                       i1l3489 004C                                         i1l5441 0201  
                                       i1l5433 01CC                                         i1l5505 0590  
                                       i1l3499 0060                                         i1l5427 01C9  
                                       i1l5419 01C3                                         i1l2699 0F29  
                                       i1l5515 04FF                                         i1l5445 02C7  
                                       u116_25 03CD                                         i1l5471 053A  
                                       i1l5463 02E6                                         i1l5615 0FE2  
                                       i1l5473 053D                                         i1l5483 0544  
                                       i1l5459 02E3                                         i1l5491 0583  
                                       i1l5643 061B                                         i1l5477 0540  
                                       i1l5469 02E9                                         i1l5637 0612  
                                       i1l5661 024E                                         i1l5709 0468  
                                       i1l5495 058A                                         i1l5639 0616  
                                       i1l5671 0274                                         i1l5489 0547  
                                       i1l5499 058D                                         i1l5747 0108  
                                       i1l5781 0385                                         i1l5791 03A3  
                                       i1l5787 0394                                         i1l5699 0442  
                                       _INLVLA 038C                                         _INLVLB 038D  
                                       _INLVLC 038E                   __end_ofi1_I2C_MasterSendNack 0ED7  
                  __size_ofi1_I2C_DO_SEND_STOP 0004                                         _OSCCON 0099  
                      i1_rd1RegCompleteHandler 0737                       ??i1_I2C_MasterSendTxData 0070  
                                       _SPBRGH 019C                                         _SPBRGL 019B  
                       _I2C_DO_RESET$intlevel0 0FB0                                         _TX1REG 019A  
                                       _TX1STA 019E                        i1_wr1RegCompleteHandler 0717  
              _I2C_DO_SEND_ADR_WRITE$intlevel0 07E9                    ??i1_rdBlkRegCompleteHandler 007A  
                               __CFG_PWRTE$OFF 0000                            _I2C_MasterGetRxData 0EC3  
           __size_ofi1_I2C_CallbackReturnReset 0002                     ?i1_I2C_CallbackReturnReset 0079  
                   _I2C_DO_SEND_STOP$intlevel0 0F87                    __size_of_PWM3_LoadDutyValue 0016  
                                _I2C_MasterFsm 049A                                 __CFG_STVREN$ON 0000  
                                    ??___lwdiv 0074                            __size_of_TMR2_Start 0003  
                            ?i1_I2C_MasterOpen 0070                              I2C_SetCallback@cb 0056  
                            ?i1_I2C_MasterStop 0070                    __size_ofi1_I2C_MasterIsNack 0006  
                      __size_of_I2C_MasterOpen 000C                        __size_of_I2C_MasterStop 0003  
                      __size_of_I2C_Initialize 000A                                  _I2C_SetBuffer 0775  
                          __end_of_MyTimer2ISR 011C                             __end_of_I2C_Poller 1000  
                           ??i1_I2C_MasterOpen 0070                    __size_ofi1_I2C_MasterSetIrq 0003  
                 __end_of_I2C_MasterDisableIrq 0EB7                                i1_I2C_DO_TX$794 007B  
                           ??i1_I2C_MasterStop 0070                __size_ofi1_I2C_MasterDisableIrq 0003  
               _I2C_DO_SEND_ADR_READ$intlevel0 07AE                            _I2C_DO_ADDRESS_NACK 04C4  
                         ?_I2C_MasterGetRxData 0070                                      ?_I2C_Open 0070  
           __end_of_I2C_SetAddressNackCallback 0766                     _I2C_SetAddressNackCallback 0757  
                              i1_I2C_DO_RX_ACK 0EEB          __end_ofi1_I2C_SetDataCompleteCallback 07DA  
       __size_ofi1_I2C_SetDataCompleteCallback 000C                  i1_I2C_SetDataCompleteCallback 07CE  
                    ??_I2C_MasterEnableRestart 0056                     ??i1_I2C_CallbackReturnStop 007A  
                              ?i1_I2C_DO_RESET 0070                        __end_of_TMR2_StartTimer 0ECF  
     TMR2_SetInterruptHandler@InterruptHandler 0056                           __size_ofi1_I2C_DO_RX 003A  
                         __size_ofi1_I2C_DO_TX 004B                                    ?_MyUART_ISR 0070  
                              ??i1_I2C_DO_IDLE 0070                                ??i1_I2C_DO_RCEN 0070  
                         __size_ofi1_I2C_Close 0019                               ?_PWM3_Initialize 0070  
                            _SYSTEM_Initialize 0705                        __end_of__initialization 003F  
                _I2C_DO_ADDRESS_NACK$intlevel0 04C8                            _I2C_MasterOperation 05C6  
                           ?_SYSTEM_Initialize 0070                           ?_I2C_DO_ADDRESS_NACK 0070  
            _rdBlkRegCompleteHandler$intlevel0 05E9                        _rdBlkRegCompleteHandler 05E5  
                               __pcstackCOMMON 0070                                 ?_I2C_MasterFsm 0070  
            __end_ofi1_I2C_CallbackReturnReset 0E90                                ??_I2C_DO_RX_ACK 0056  
                                 __pidataBANK1 0002                         _I2C_CallbackReturnStop 0F2F  
                          ??_SYSTEM_Initialize 0058                                      ?_TMR2_ISR 0070  
                      __end_of_TMR2_WriteTimer 0F4D                               ?_TMR2_Initialize 0070  
                               ?_I2C_SetBuffer 0056                        ?_I2C_MasterWaitForEvent 0070  
               __size_of_I2C_DO_SEND_ADR_WRITE 000B             __size_of_I2C_DO_SEND_RESTART_WRITE 0008  
                       ?_I2C_Read2ByteRegister 0049                  __end_of_I2C_DO_SEND_ADR_WRITE 07F0  
                                 ??i1_I2C_Open 0070                   ?i1_I2C_DO_SEND_RESTART_WRITE 0070  
                   ?_I2C_DO_SEND_RESTART_WRITE 0070                           ?_I2C_MasterOperation 0070  
                    i1_rdBlkRegCompleteHandler 06AC               __size_ofi1_I2C_DO_SEND_ADR_WRITE 0007  
                        ??_I2C_MasterGetRxData 0056                        ?_I2C_Write1ByteRegister 00BD  
                               _OPTION_REGbits 0095                                     ??_I2C_Open 0056  
                         _eusartRxStatusBuffer 00A0                     __end_of_I2C_MasterClearIrq 0EB1  
              ??_EUSART_SetOverrunErrorHandler 0058                       i1_I2C_DO_RX_NACK_RESTART 0EF3  
                    __end_of_SYSTEM_Initialize 0717                      ??i1_rd1RegCompleteHandler 007A  
                       i1I2C_Close@returnValue 0071                              _I2C_MasterSendAck 0F03  
                                   __pbssBANK0 0020                                     __pbssBANK1 00A0  
                         __end_ofi1_I2C_Poller 0FEC                      ??i1_wr1RegCompleteHandler 007A  
                         __end_of_EUSART_Write 0F63                                  ??_I2C_DO_IDLE 0056  
               __size_of_rd2RegCompleteHandler 0017                 __size_ofi1_I2C_MasterGetRxData 0003  
                                ??_I2C_DO_RCEN 0056                 i1I2C_CallbackReturnStop@funPtr 0079  
                __end_of_rd2RegCompleteHandler 067E                   __end_of_I2C_MasterSendTxData 0F41  
                __end_ofi1_I2C_MasterGetRxData 0EAB                             ?_I2C_MasterSendAck 0070  
                            _I2C_MasterStartRx 0EC0                __size_ofi1_I2C_MasterSendTxData 0005  
               __size_of_wr2RegCompleteHandler 0017                          ??_I2C_DO_ADDRESS_NACK 00B4  
                       i1_I2C_MasterDisableIrq 0E99                i1I2C_SetDataCompleteCallback@cb 0075  
             __size_ofi1_rd2RegCompleteHandler 0010                  __end_of_wr2RegCompleteHandler 06AC  
                  __size_of_EUSART_Receive_ISR 0036                            _I2C_DO_RX_NACK_STOP 0F93  
                         i1_I2C_MasterClearIrq 0E93                          _rd1RegCompleteHandler 067E  
                           ?_I2C_MasterStartRx 0070                             __end_ofi1_I2C_Open 0370  
                   __end_of_I2C_MasterSendNack 0F03               __size_ofi1_wr2RegCompleteHandler 0010  
                        _wr1RegCompleteHandler 0650                _rd1RegCompleteHandler$intlevel0 0682  
              _wr1RegCompleteHandler$intlevel0 0654                                     __pmaintext 016D  
                          ??_I2C_MasterSendAck 0056                       rd1RegCompleteHandler@ptr 00B3  
                  __end_of_I2C_DO_SEND_RESTART 0F83                                    _MyTimer2ISR 00CA  
                              _I2C_DO_TX_EMPTY 046F                            I2C_SetBuffer@buffer 0059  
                              __CFG_PPS1WAY$ON 0000                                     ??_TMR2_ISR 007E  
                                   __pintentry 0004                 __end_of_I2C_MasterWaitForEvent 0F0B  
                          ??_I2C_MasterStartRx 0056                  __size_of_I2C_DO_SEND_ADR_READ 000C  
                          __size_of_MyUART_ISR 0087                 __size_ofi1_I2C_DO_ADDRESS_NACK 0023  
             __size_of_I2C_CallbackReturnReset 0006                        __end_ofi1_I2C_DO_RX_ACK 0EEF  
                      _I2C_DO_RX_ACK$intlevel0 0F8F                  __end_ofi1_I2C_DO_ADDRESS_NACK 05A6  
                 ??_EUSART_DefaultErrorHandler 0071                          ??_I2C_MasterOperation 00BA  
               I2C_SetDataCompleteCallback@ptr 005D                 __end_of_I2C_Write1ByteRegister 0440  
                         i1_I2C_MasterSendNack 0ED3                                i1_I2C_MasterFsm 04EE  
            __size_ofi1_I2C_MasterWaitForEvent 0004                       ??_I2C_DO_RX_NACK_RESTART 0056  
                    ?i1_I2C_MasterWaitForEvent 0070              __end_of_I2C_DO_SEND_RESTART_WRITE 0F7B  
                         ?_I2C_DO_RX_NACK_STOP 0070                                  _eusartRxCount 0041  
                ??i1_I2C_DO_SEND_RESTART_WRITE 0070                                __CFG_WDTCCS$SWC 0000  
            __size_ofi1_I2C_Write1ByteRegister 002F                      ?i1_I2C_Write1ByteRegister 0049  
                __size_of_EUSART_RxDataHandler 0017                                i1_I2C_SetBuffer 0783  
                    __end_of_I2C_MasterSendAck 0F07                                        _OSCTUNE 0098  
                                      _PWM3DCH 0618                                        _PWM3DCL 0617  
                                      _PWM3CON 0619                                        _SSP1ADD 0212  
                                      _SLRCONA 030C                                        _SLRCONB 030D  
                                      _SLRCONC 030E                                        _SSP1BUF 0211  
                                 ??_TMR2_Start 0056                       ??_EUSART_SetErrorHandler 0058  
                             ?_TMR2_StartTimer 0070            _I2C_DO_SEND_RESTART_WRITE$intlevel0 0F77  
               __size_ofi1_I2C_MasterOperation 001A                  __end_ofi1_I2C_MasterOperation 061E  
                    __end_of_I2C_MasterStartRx 0EC3                           I2C_Close@returnValue 0057  
                 ?_I2C_SetDataCompleteCallback 005B                 ?i1_I2C_SetDataCompleteCallback 0075  
                                    _I2C_DO_RX 0207                                      _I2C_DO_TX 011C  
             __end_of_I2C_DO_SEND_RESTART_READ 0F73                     i1rd1RegCompleteHandler@ptr 0079  
                 ??i1_I2C_DO_SEND_RESTART_READ 0070                                      _I2C_Close 061E  
                        i1_I2C_DO_SEND_RESTART 0EE3                      ??_rdBlkRegCompleteHandler 005E  
                        ?i1_I2C_MasterClearIrq 0070                           _I2C_MasterDisableIrq 0EB4  
                              ??_I2C_MasterFsm 00B7            __size_of_EUSART_DefaultErrorHandler 0003  
                   ??_TMR2_SetInterruptHandler 0058                                        _PosUart 003D  
                          __end_of_I2C_DO_IDLE 0FAC                            __end_of_I2C_DO_RCEN 0FF6  
                                      _Vitesse 00B0                                ??_I2C_SetBuffer 0058  
                                      ___lwdiv 03A6                               ?_TMR2_WriteTimer 0070  
                      I2C_SetBuffer@bufferSize 0056                             __end_of_TMR2_Start 0ECC  
                               _I2C_MasterOpen 079E                                 _I2C_MasterStop 0EBD  
                               _I2C_Initialize 07F0                              i1_I2C_MasterClose 0E96  
                        ?i1_I2C_MasterSendNack 0070                      __size_of_I2C_DO_SEND_STOP 0008  
                       i1_I2C_MasterSendTxData 0F0F                                        __ptext1 0F47  
                                      __ptext2 0F1E                                        __ptext3 0ECC  
                                      __ptext4 0EC9                                        __ptext5 0705  
                                      __ptext6 06F0                                        __ptext7 0FD9  
                                      __ptext8 07DA                                        __ptext9 028C  
                            i1I2C_Open@address 0071                          ??_I2C_DO_RX_NACK_STOP 0056  
                            i1_I2C_MasterStart 0E9C                              i1_I2C_MasterWrite 0EFB  
         __end_ofi1_I2C_SetAddressNackCallback 07C2          __size_ofi1_I2C_SetAddressNackCallback 000C  
                 i1_I2C_SetAddressNackCallback 07B6                             ?i1_I2C_MasterClose 0070  
                        _OSCILLATOR_Initialize 0F54                                      _T2CONbits 001C  
                           ?i1_I2C_MasterStart 0070            __size_ofi1_I2C_DO_SEND_RESTART_READ 0004  
                           I2C_SetCallback@idx 005A                       __size_of_I2C_MasterClose 0003  
                           ?i1_I2C_MasterWrite 0070                       ??_PIN_MANAGER_Initialize 0056  
                I2C_CallbackReturnReset@funPtr 00B3                                      _T2HLTbits 001D  
                           I2C_SetCallback@ptr 0058                       wr1RegCompleteHandler@ptr 00B3  
                    I2C_Write1ByteRegister@reg 00BD                       __size_of_I2C_MasterStart 0003  
                    i1I2C_SetBuffer@bufferSize 0070                       __size_of_I2C_MasterWrite 0004  
                   __size_of_SYSTEM_Initialize 0012                            ??i1_I2C_MasterClose 0070  
                                      clrloop0 07FB               _I2C_CallbackReturnStop$intlevel0 0F33  
                 __size_ofi1_I2C_MasterSendAck 0004                           end_of_initialization 003F  
                          ??i1_I2C_MasterStart 0070                                      _T2RSTbits 001F  
               __size_ofi1_I2C_DO_RX_NACK_STOP 0004                            ??i1_I2C_MasterWrite 007E  
                                   ?_I2C_DO_RX 0070                                     ?_I2C_DO_TX 0070  
                __end_ofi1_I2C_DO_RX_NACK_STOP 0EF3          __end_of_EUSART_SetOverrunErrorHandler 0FD0  
       __size_of_EUSART_SetOverrunErrorHandler 0009                  _EUSART_SetOverrunErrorHandler 0FC7  
                    __size_of_I2C_MasterIsNack 0006                   __size_ofi1_I2C_MasterStartRx 0003  
                                   ?_I2C_Close 0070                         ?_rd1RegCompleteHandler 00B3  
                            i1_I2C_SetCallback 055F           __size_ofi1_I2C_DO_SEND_RESTART_WRITE 0004  
                      __end_of_I2C_DO_TX_EMPTY 049A                      __size_of_I2C_MasterSetIrq 0003  
                        ?_I2C_MasterDisableIrq 0070                              _EUSART_Initialize 03DA  
                       ?_wr1RegCompleteHandler 00B3                             ?i1_I2C_SetCallback 0070  
                           ?_EUSART_Initialize 0070                       __size_of_I2C_SetCallback 0025  
                  ??i1_I2C_CallbackReturnReset 007A                        __end_ofi1_I2C_MasterFsm 0515  
                       __end_of_I2C_MasterOpen 07AA                         __end_of_I2C_MasterStop 0EC0  
                       __end_of_I2C_Initialize 07FA                      __end_ofi1_I2C_MasterClose 0E99  
                          ??i1_I2C_SetCallback 0073                      __end_ofi1_I2C_MasterStart 0E9F  
                   i1wr1RegCompleteHandler@ptr 0079                      __end_ofi1_I2C_MasterWrite 0EFF  
                             ?i1_I2C_DO_RX_ACK 0070                    __end_of_TMR2_Counter8BitSet 0F23  
                          ??_EUSART_Initialize 0058                                   MyTimer2ISR@g 0053  
                      __end_ofi1_I2C_SetBuffer 0791                        i1_I2C_DO_SEND_ADR_WRITE 0F4D  
                                    _PORTAbits 000C                 i1I2C_SetAddressNackCallback@cb 0075  
              __end_of_rdBlkRegCompleteHandler 0604                           _I2C_MasterSendTxData 0F3B  
                             ??i1_I2C_DO_RESET 0070                                      _SSPDATPPS 0E21  
              __size_of_I2C_DO_RX_NACK_RESTART 0008                                      _SSPCLKPPS 0E20  
                             __CFG_FOSC$INTOSC 0000                  _I2C_DO_SEND_RESTART$intlevel0 0F7F  
                  ?_I2C_SetAddressNackCallback 005B                  ?i1_I2C_SetAddressNackCallback 0075  
                        __size_ofi1_I2C_Poller 000A                          __size_of_EUSART_Write 0008  
                   __size_of_I2C_MasterSendAck 0004                              __size_of_I2C_Open 0038  
                   __end_ofi1_I2C_DO_SEND_STOP 0EEB                       ??i1_I2C_DO_SEND_ADR_READ 0070  
                                 ??_MyUART_ISR 0071                __size_of_EUSART_SetErrorHandler 0009  
                    __size_ofi1_I2C_MasterOpen 000C                     __size_of_I2C_MasterStartRx 0003  
           __size_ofi1_rdBlkRegCompleteHandler 0017                      __size_ofi1_I2C_MasterStop 0003  
                    __end_ofi1_I2C_SetCallback 0583                        TMR2_WriteTimer@timerVal 0057  
                       ?i1_I2C_DO_SEND_RESTART 0070                         ??i1_I2C_MasterClearIrq 0070  
                    __end_of_EUSART_Initialize 040D                        i1_rd2RegCompleteHandler 0727  
                                  _I2C_DO_IDLE 0FA3                                    _I2C_DO_RCEN 0FEC  
                   rdBlkRegCompleteHandler@ptr 00B3                  I2C_Write1ByteRegister@address 00C0  
                      i1_wr2RegCompleteHandler 0747                        ?_I2C_CallbackReturnStop 00B3  
                   __end_of_PWM3_LoadDutyValue 06F0                       _I2C_DO_SEND_RESTART_READ 0F6B  
                  i1I2C_Write1ByteRegister@reg 0049                   I2C_CallbackReturnStop@funPtr 00B3  
                      ??_I2C_Read2ByteRegister 004B                                ?_I2C_MasterOpen 0070  
                   __end_ofi1_I2C_MasterIsNack 0F29                                ?_I2C_MasterStop 0070  
                              ?_I2C_Initialize 0070           __end_of_TMR2_DefaultInterruptHandler 0E8C  
        __size_of_TMR2_DefaultInterruptHandler 0001                   _TMR2_DefaultInterruptHandler 0E8B  
                      _I2C_CallbackReturnReset 0F35             __end_of_EUSART_DefaultErrorHandler 0E93  
                   _EUSART_DefaultErrorHandler 0E90                         ??i1_I2C_MasterSendNack 0070  
                   __end_ofi1_I2C_MasterSetIrq 0EAE           __size_of_I2C_SetDataCompleteCallback 000F  
                                 i1_I2C_Poller 0FE2                                   _EUSART_Write 0F5B  
                            __size_of_TMR2_ISR 000D                             __end_of_MyUART_ISR 00CA  
                   ??i1_I2C_DO_RX_NACK_RESTART 0070                          ?_I2C_MasterSendTxData 0070  
                       ?_OSCILLATOR_Initialize 0070                    ??_I2C_DO_SEND_RESTART_WRITE 0056  
                                ??i1_I2C_DO_RX 007A                                  ??i1_I2C_DO_TX 007A  
                          start_initialization 0027                      i1_I2C_CallbackReturnReset 0E8E  
              __size_of_PIN_MANAGER_Initialize 003B                                  ??i1_I2C_Close 0070  
                                ?_I2C_DO_RESET 0070   EUSART_SetRxInterruptHandler@interruptHandler 0056  
           __end_ofi1_I2C_DO_SEND_RESTART_READ 0EDF                     i1_I2C_DO_SEND_RESTART_READ 0EDB  
                      ?i1_I2C_MasterDisableIrq 0070                                    ??_I2C_DO_RX 00B4  
                                  ??_I2C_DO_TX 00B4                            i1I2C_SetCallback@cb 0070  
                            ??_I2C_MasterClose 0056                          __end_ofi1_I2C_DO_IDLE 0F19  
                       ??_I2C_MasterDisableIrq 0056                          __end_ofi1_I2C_DO_RCEN 0F2F  
                                  ??_I2C_Close 0056                              ??_I2C_MasterStart 0056  
                            ??_I2C_MasterWrite 005E                 __end_of_I2C_CallbackReturnStop 0F35  
                       _I2C_DO_RX_NACK_RESTART 0F9B                               ?_I2C_DO_TX_EMPTY 0070  
                           _I2C_MasterClearIrq 0EAE               __end_ofi1_I2C_MasterWaitForEvent 0EFB  
               ?_EUSART_SetOverrunErrorHandler 0056              __size_ofi1_I2C_CallbackReturnStop 0002  
                     __size_of_PWM3_Initialize 000B                      ?i1_I2C_CallbackReturnStop 0079  
                   _EUSART_FramingErrorHandler 00C9                                   ?_MyTimer2ISR 0070  
                       _EUSART_SetErrorHandler 0FB5                               ?i1_I2C_MasterFsm 0070  
             __end_ofi1_I2C_Write1ByteRegister 046F                                    _CCPTMRSbits 029E  
                   __size_ofi1_I2C_MasterClose 0003                      ??i1_I2C_DO_SEND_ADR_WRITE 0070  
                          ?_I2C_MasterClearIrq 0070                    __end_of_I2C_MasterGetRxData 0EC6  
                                  __pdataBANK1 00CD                          __end_of_I2C_DO_RX_ACK 0F93  
                   __size_ofi1_I2C_MasterStart 0003                     __size_ofi1_I2C_MasterWrite 0004  
                ?_TMR2_DefaultInterruptHandler 0070                               _I2C_DO_SEND_STOP 0F83  
                            ??_I2C_SetCallback 0059                               ?i1_I2C_SetBuffer 0070  
                          I2C_Open@returnValue 0058                             _I2C_MasterSendNack 0EFF  
                     ?_I2C_MasterEnableRestart 0070                       I2C_Read2ByteRegister@reg 0049  
                        _I2C_DO_SEND_ADR_WRITE 07E5                                      ___latbits 0002  
                                __pcstackBANK0 0044                                  __pcstackBANK1 00B2  
                               ??_I2C_DO_RESET 0056                       __size_of_TMR2_Initialize 0015  
                          ?_I2C_MasterSendNack 0070                 __end_ofi1_I2C_MasterDisableIrq 0E9C  
                 __end_of_I2C_DO_SEND_ADR_READ 07B6                           ??_I2C_MasterClearIrq 0056  
                  __end_of_I2C_DO_ADDRESS_NACK 04EE                      ??i1_rd2RegCompleteHandler 007A  
              __size_ofi1_I2C_DO_SEND_ADR_READ 0008                 ??i1_I2C_SetAddressNackCallback 0078  
                   __size_ofi1_I2C_SetCallback 0024                            __end_ofi1_I2C_DO_RX 0301  
                    ??i1_wr2RegCompleteHandler 007A                            __end_ofi1_I2C_DO_TX 0207  
             i1I2C_SetDataCompleteCallback@ptr 0077                     __end_of_EUSART_Receive_ISR 03A6  
                             _I2C_MasterIsNack 0F41                     __size_of_EUSART_Initialize 0033  
                    _I2C_DO_SEND_RESTART_WRITE 0F73                            __end_ofi1_I2C_Close 0650  
             _EUSART_RxDefaultInterruptHandler 00CB                               _I2C_MasterSetIrq 0EC6  
                                    __pnvBANK1 00C3                          _rd2RegCompleteHandler 0667  
                        i1_I2C_MasterGetRxData 0EA8                          __end_of_fsmStateTable 05C6  
                 __end_of_EUSART_RxDataHandler 06DA                               ___lwdiv@dividend 0072  
                       _PIN_MANAGER_Initialize 028C                          _wr2RegCompleteHandler 0695  
                    ??_I2C_CallbackReturnReset 005E                    __end_of_I2C_MasterOperation 05E5  
                         ??_I2C_MasterSendNack 0056                i1I2C_Write1ByteRegister@address 004C  
                     rd2RegCompleteHandler@ptr 00B3                        ?i1_I2C_MasterSendTxData 0070  
                                    __ptext100 0F0F                                      __ptext101 0ED7  
                                    __ptext110 0737                                      __ptext102 0EA8  
                                    __ptext111 0747                                      __ptext103 0ED3  
                                    __ptext120 0E96                                      __ptext112 07CE  
                                    __ptext104 0EA5                                      __ptext121 0E93  
                                    __ptext113 055F                                      __ptext105 0E8E  
                                    __ptext122 0370                                      __ptext114 0783  
                                    __ptext106 0E8C                                      __ptext123 0043  
                                    __ptext115 0EA2                                      __ptext107 06AC  
                                    __ptext124 0F5B                                      __ptext116 0E9F  
                                    __ptext108 0717                                      __ptext125 0ECF  
                                    __ptext117 0E9C                                      __ptext109 0727  
                                    __ptext126 0E8A                                      __ptext118 0637  
                                    __ptext127 0E90                                      __ptext119 0E99  
                                    __ptext128 06C3                            i1_I2C_MasterSendAck 0ED7  
                                     ?___lwdiv 0070                                   _eusartRxHead 0043  
                                 _eusartRxTail 0042                         ??_I2C_MasterSendTxData 0056  
                 ??_INTERRUPT_InterruptManager 0055                            i1_I2C_MasterStartRx 0EA5  
                 __size_of_I2C_DO_SEND_RESTART 0008                                       _BAUD1CON 019F  
                        i1_I2C_DO_ADDRESS_NACK 0583                        I2C_MasterOperation@read 00BB  
                                     _I2C_Open 0301                       ?i1_rd1RegCompleteHandler 0079  
                     ?i1_wr1RegCompleteHandler 0079                               ___lwdiv@quotient 0075  
                         ?i1_I2C_MasterSendAck 0070                                       _T2CLKCON 001E  
                      ??_rd1RegCompleteHandler 005E                               i1_I2C_MasterOpen 07C2  
                             i1_I2C_MasterStop 0EA2                                 _eusartRxBuffer 00A8  
                 i1rdBlkRegCompleteHandler@ptr 0079                        ??_wr1RegCompleteHandler 005E  
                 I2C_Read2ByteRegister@address 004F                           ?i1_I2C_MasterStartRx 0070  
                   i1rd2RegCompleteHandler@ptr 0079                      i1I2C_MasterOperation@read 0047  
                        i1_I2C_MasterOperation 0604                                       _LATAbits 010C  
       EUSART_SetErrorHandler@interruptHandler 0056                                      clear_ram0 07FA  
                                     _PIE1bits 0090                              _eusartRxLastError 0040  
                     __size_of_TMR2_StartTimer 0003            __size_of_INTERRUPT_InterruptManager 0021  
                                     _PIR1bits 0010                ??_EUSART_SetFramingErrorHandler 0058  
                                     _PIR2bits 0011                 __end_ofi1_I2C_MasterSendTxData 0F14  
                        __end_of_I2C_MasterFsm 04C4                    __end_of_I2C_DO_RX_NACK_STOP 0F9B  
                         __CFG_WDTCPS$WDTCPS1F 0000                                       _SSP1CON1 0215  
                                     _SSP1CON2 0216      __end_of_EUSART_DefaultOverrunErrorHandler 0ED3  
   __size_of_EUSART_DefaultOverrunErrorHandler 0004            ??_EUSART_DefaultOverrunErrorHandler 0070  
           ?_EUSART_DefaultOverrunErrorHandler 0070              _EUSART_DefaultOverrunErrorHandler 0ECF  
                       i1_I2C_DO_SEND_ADR_READ 0F63                                       _TMR2_ISR 0791  
              __end_of_I2C_MasterEnableRestart 0EBD                                       _SSP1STAT 0214  
                     i1_I2C_MasterWaitForEvent 0EF7                          __end_of_I2C_SetBuffer 0783  
          __end_ofi1_I2C_DO_SEND_RESTART_WRITE 0EE3                    i1_I2C_DO_SEND_RESTART_WRITE 0EDF  
                            ??_PWM3_Initialize 0056                       i1_I2C_Write1ByteRegister 0440  
                       ?_I2C_DO_SEND_ADR_WRITE 0070                       I2C_MasterSendTxData@data 0056  
               ??_TMR2_DefaultInterruptHandler 0070              __size_of_TMR2_SetInterruptHandler 0009  
                     __size_of_TMR2_WriteTimer 0006                                    i1_I2C_DO_RX 02C7  
                                  i1_I2C_DO_TX 01BC                      ?_TMR2_SetInterruptHandler 0056  
           __size_ofi1_I2C_MasterEnableRestart 0003                       wr2RegCompleteHandler@ptr 00B3  
                   ?i1_I2C_MasterEnableRestart 0070                                    i1_I2C_Close 0637  
                      ??i1_I2C_DO_SEND_RESTART 0070                          ??i1_I2C_MasterSendAck 0070  
                   ??_I2C_DO_SEND_RESTART_READ 0056                       ?_rdBlkRegCompleteHandler 00B3  
                                   _I2C_Poller 0FF6                          ??i1_I2C_MasterStartRx 0070  
                                   _I2C_Status 0020                                   ?_I2C_DO_IDLE 0070  
                                 ?_I2C_DO_RCEN 0070                              ??_TMR2_Initialize 0058  
                       ?_rd2RegCompleteHandler 00B3                         ?i1_I2C_MasterGetRxData 0070  
                        i1_I2C_DO_RX_NACK_STOP 0EEF                               ??_I2C_MasterOpen 0056  
                    _I2C_DO_TX_EMPTY$intlevel0 0473                         ?_wr2RegCompleteHandler 00B3  
                             ??_I2C_MasterStop 0056                       ??_I2C_MasterWaitForEvent 0056  
                             ??_I2C_Initialize 0056                _wr2RegCompleteHandler$intlevel0 0699  
              _rd2RegCompleteHandler$intlevel0 066B                             i1_I2C_DO_SEND_STOP 0EE7  
                        i1I2C_SetBuffer@buffer 0073                           __end_of_I2C_DO_RESET 0FB5  
                     ??_I2C_Write1ByteRegister 00BF                     i1I2C_MasterSendTxData@data 0070  
                      ??_OSCILLATOR_Initialize 0056                            _EUSART_ErrorHandler 00C5  
                         _I2C_DO_SEND_ADR_READ 07AA                 __size_of_I2C_Read2ByteRegister 0042  
                         __size_of_MyTimer2ISR 0052                    ?_EUSART_DefaultErrorHandler 0070  
             i1I2C_MasterOperation@returnValue 0048                  __end_of_I2C_Read2ByteRegister 028C  
                             __size_of___lwdiv 0034                __end_ofi1_rd1RegCompleteHandler 0747  
                   i1wr2RegCompleteHandler@ptr 0079                            ?i1_I2C_DO_SEND_STOP 0070  
            _I2C_CallbackReturnReset$intlevel0 0F39                         ?i1_I2C_DO_ADDRESS_NACK 0070  
              __end_ofi1_wr1RegCompleteHandler 0727                             _PWM3_LoadDutyValue 06DA  
                              _I2C_MasterClose 0EB1                  I2C_SetAddressNackCallback@ptr 005D  
                              I2C_Open@address 0057                                _I2C_MasterStart 0EB7  
                              _I2C_MasterWrite 0F0B                             i1_I2C_MasterIsNack 0F23  
                              ___lwdiv@divisor 0070                           _EUSART_RxDataHandler 06C3  
                 __size_of_TMR2_Counter8BitSet 0005                                ___lwdiv@counter 0077  
                     __size_ofi1_I2C_DO_RX_ACK 0004                                       __ptext10 0F54  
                                     __ptext11 07F0                                       __ptext20 079E  
                                     __ptext12 03DA                                       __ptext21 0F0B  
                                     __ptext13 0FD0                                       __ptext30 0F8B  
                                     __ptext22 05C6                                       __ptext14 0FC7  
                                     __ptext31 0F83                                       __ptext23 0FF6  
                                     __ptext15 0FBE                                       __ptext40 0FA3  
                                     __ptext32 0F7B                                       __ptext24 0F07  
                                     __ptext16 0FB5                                       __ptext41 046F  
                                     __ptext33 0F73                                       __ptext25 049A  
                                     __ptext17 040D                                       __ptext50 0F2F  
                                     __ptext42 0EC6                                       __ptext34 0F6B  
                                     __ptext26 04C4                                       __ptext18 0757  
                                     __ptext51 05E5                                       __ptext43 0F41  
                                     __ptext35 0FEC                                       __ptext27 0FAC  
                                     __ptext19 0301                                       __ptext60 0EBA  
                                     __ptext52 0650                                       __ptext44 0F3B  
                                     __ptext36 0207                                       __ptext28 0F9B  
                                     __ptext61 0EB7                                       __ptext53 0667  
                                     __ptext45 0F03                                       __ptext37 011C  
                                     __ptext29 0F93                                       __ptext70 0440  
                                     __ptext62 061E                                       __ptext54 067E  
                                     __ptext46 0EC3                                       __ptext38 07E5  
                                     __ptext71 03A6                                       __ptext63 0EB4  
                                     __ptext55 0695                                       __ptext47 0EFF  
                                     __ptext39 07AA                                       __ptext80 0EF7  
                                     __ptext72 06DA                                       __ptext64 0EB1  
                                     __ptext56 0766                                       __ptext48 0EC0  
                                     __ptext81 04EE                                       __ptext73 024A  
                                     __ptext65 0EAE                                       __ptext57 0515  
                                     __ptext49 0F35                                       __ptext90 0EDB  
                                     __ptext82 0583                                       __ptext74 07B6  
                                     __ptext58 0775                            ?_PWM3_LoadDutyValue 0078  
                                     __ptext91 0F29                                       __ptext83 0F19  
                                     __ptext75 0339                                       __ptext67 0791  
                                     __ptext59 0EBD                                       __ptext92 02C7  
                                     __ptext84 0EF3                                       __ptext76 07C2  
                                     __ptext68 00CA                                       __ptext93 01BC  
                                     __ptext85 0EEF                                       __ptext77 0EFB  
                                     __ptext69 0E8B                                       __ptext94 0F4D  
                                     __ptext86 0EEB                                       __ptext78 0604  
                                     __ptext95 0F63                                       __ptext87 0EE7  
                                     __ptext79 0FE2                                       __ptext96 0F14  
                                     __ptext88 0EE3                                       __ptext97 053A  
                                     __ptext89 0EDF                                       __ptext98 0EAB  
                                     __ptext99 0F23                             i1_I2C_MasterSetIrq 0EAB  
                                 _SSP1CON1bits 0215                                   _SSP1CON2bits 0216  
            __end_ofi1_I2C_MasterEnableRestart 0EA2               __end_ofi1_I2C_CallbackReturnStop 0E8E  
          __end_of_I2C_SetDataCompleteCallback 0775                    _I2C_SetDataCompleteCallback 0766  
                      ?_I2C_DO_RX_NACK_RESTART 0070                    ?i1_I2C_DO_SEND_RESTART_READ 0070  
                       ?i1_I2C_MasterOperation 0070                           ??i1_I2C_DO_SEND_STOP 0070  
                          ?i1_I2C_MasterIsNack 0070                       __end_of_I2C_DO_SEND_STOP 0F8B  
                                __size_of_main 004F                            ?i1_I2C_MasterSetIrq 0070  
                __size_ofi1_I2C_MasterClearIrq 0003               _I2C_DO_RX_NACK_RESTART$intlevel0 0F9F  
                         __CFG_WDTCWS$WDTCWSSW 0000                        ?_EUSART_SetErrorHandler 0056  
                              _I2C_SetCallback 0515                  ??_I2C_SetDataCompleteCallback 00B2  
                                   _RC1STAbits 019D                     I2C_Write1ByteRegister@data 00BE  
EUSART_SetOverrunErrorHandler@interruptHandler 0056                           ??_PWM3_LoadDutyValue 007A  
                                     int$flags 007E                          ?_I2C_DO_SEND_ADR_READ 0070  
                            ??_TMR2_StartTimer 0056             __end_of_INTERRUPT_InterruptManager 0025  
                   _INTERRUPT_InterruptManager 0004          __end_of_EUSART_SetFramingErrorHandler 0FC7  
       __size_of_EUSART_SetFramingErrorHandler 0009                  _EUSART_SetFramingErrorHandler 0FBE  
                                 _SSP1STATbits 0214                           ??i1_I2C_MasterIsNack 0070  
                     __end_of_I2C_MasterIsNack 0F47                  __size_ofi1_I2C_MasterSendNack 0004  
                         ??i1_I2C_MasterSetIrq 0070                                     i1_I2C_Open 0339  
                     __end_of_I2C_MasterSetIrq 0EC9                                     _INTCONbits 000B  
                        ?_EUSART_RxDataHandler 0070                 __end_of_I2C_DO_RX_NACK_RESTART 0FA3  
                  TMR2_Counter8BitSet@timerVal 0056                                       intlevel1 0000  
                                  ?_I2C_Poller 0070                              ??_TMR2_WriteTimer 0057  
                      __size_ofi1_I2C_DO_RESET 0005               __size_of_I2C_MasterEnableRestart 0003  
            __size_ofi1_I2C_DO_RX_NACK_RESTART 0004                         ?i1_I2C_DO_RX_NACK_STOP 0070  
                    ?i1_I2C_DO_RX_NACK_RESTART 0070                        ?_PIN_MANAGER_Initialize 0070  
               __end_of_EUSART_SetErrorHandler 0FBE                              __CFG_CLKOUTEN$OFF 0000  
                          _I2C_DO_SEND_RESTART 0F7B                     ?i1_rdBlkRegCompleteHandler 0079  
                __size_of_I2C_MasterDisableIrq 0003                              i1_I2C_DO_TX_EMPTY 053A  
         __end_of_EUSART_SetRxInterruptHandler 0FD9          __size_of_EUSART_SetRxInterruptHandler 0009  
                 _EUSART_SetRxInterruptHandler 0FD0                __size_of_I2C_MasterWaitForEvent 0004  
                           ?i1_I2C_DO_TX_EMPTY 0070                __size_of_I2C_Write1ByteRegister 0033  
                           _EUSART_Receive_ISR 0370  EUSART_SetFramingErrorHandler@interruptHandler 0056  
                      __end_of_I2C_MasterClose 0EB4                       __size_of_I2C_DO_TX_EMPTY 002B  
                     __end_ofi1_I2C_MasterOpen 07CE                    PWM3_LoadDutyValue@dutyValue 0078  
                     __end_ofi1_I2C_MasterStop 0EA5                        __end_of_I2C_MasterStart 0EBA  
                      __end_of_I2C_MasterWrite 0F0F                                  __pstringtext1 05A6  
                          ??i1_I2C_DO_TX_EMPTY 007A                           ?_I2C_DO_SEND_RESTART 0070  
                       __size_ofi1_I2C_DO_IDLE 0005                            ?_EUSART_Receive_ISR 0070  
                       __size_ofi1_I2C_DO_RCEN 0006                       __size_ofi1_I2C_MasterFsm 0027  
                 __size_of_I2C_MasterGetRxData 0003                          _I2C_DO_IDLE$intlevel0 0FA7  
                                   _TX1STAbits 019E                       __size_ofi1_I2C_SetBuffer 000E  
                                   _TMR2_Start 0EC9                i1I2C_SetAddressNackCallback@ptr 0077  
                  __size_of_I2C_MasterClearIrq 0003                             EUSART_Write@txData 0070  
                      __end_of_I2C_SetCallback 053A                 __end_of_PIN_MANAGER_Initialize 02C7  
               __size_of_rd1RegCompleteHandler 0017                  __end_of_rd1RegCompleteHandler 0695  
                       __size_of_I2C_DO_RX_ACK 0008                              ??i1_I2C_DO_RX_ACK 0070  
                    __end_ofi1_I2C_DO_TX_EMPTY 055F                 __size_of_wr1RegCompleteHandler 0017  
              i1I2C_CallbackReturnReset@funPtr 0079                           ??_EUSART_Receive_ISR 0071  
                     i1_I2C_CallbackReturnStop 0E8C                          __size_of_I2C_DO_RESET 0009  
             __size_ofi1_rd1RegCompleteHandler 0010                  __end_of_wr1RegCompleteHandler 0667  
                   ??i1_I2C_MasterWaitForEvent 0070                          _TMR2_InterruptHandler 00C3  
                 __size_of_I2C_DO_ADDRESS_NACK 002A                           __size_of_I2C_DO_IDLE 0009  
                         __size_of_I2C_DO_RCEN 000A              __end_ofi1_rdBlkRegCompleteHandler 06C3  
                              _PWM3_Initialize 07DA               __size_ofi1_wr1RegCompleteHandler 0010  
                     ?i1_I2C_DO_SEND_ADR_WRITE 0070                        ?i1_I2C_DO_SEND_ADR_READ 0070  
                           __size_of_I2C_DO_RX 0043                             __size_of_I2C_DO_TX 0051  
                   ??i1_I2C_Write1ByteRegister 004B  
