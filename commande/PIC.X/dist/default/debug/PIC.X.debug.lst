

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Mar 30 18:22:57 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	text36,local,class=CODE,merge=1,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    60                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text49,local,class=CODE,merge=1,delta=2
    65                           	psect	text50,local,class=CODE,merge=1,delta=2
    66                           	psect	text51,local,class=CODE,merge=1,delta=2
    67                           	psect	text52,local,class=CODE,merge=1,delta=2
    68                           	psect	text53,local,class=CODE,merge=1,delta=2
    69                           	psect	text54,local,class=CODE,merge=1,delta=2
    70                           	psect	text55,local,class=CODE,merge=1,delta=2
    71                           	psect	text56,local,class=CODE,merge=1,delta=2
    72                           	psect	text57,local,class=CODE,merge=1,delta=2
    73                           	psect	text58,local,class=CODE,merge=1,delta=2
    74                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text62,local,class=CODE,merge=1,delta=2
    78                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text65,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	intentry,global,class=CODE,delta=2
    82                           	psect	text67,local,class=CODE,merge=1,delta=2
    83                           	psect	text68,local,class=CODE,merge=1,delta=2
    84                           	psect	text69,local,class=CODE,merge=1,delta=2
    85                           	psect	text70,local,class=CODE,merge=1,delta=2
    86                           	psect	text71,local,class=CODE,merge=1,delta=2
    87                           	psect	text72,local,class=CODE,merge=1,delta=2
    88                           	psect	text73,local,class=CODE,merge=1,delta=2
    89                           	psect	text74,local,class=CODE,merge=1,delta=2
    90                           	psect	text75,local,class=CODE,merge=1,delta=2
    91                           	psect	text76,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text77,local,class=CODE,merge=1,delta=2
    93                           	psect	text78,local,class=CODE,merge=1,delta=2
    94                           	psect	text79,local,class=CODE,merge=1,delta=2
    95                           	psect	text80,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text81,local,class=CODE,merge=1,inline,delta=2
    97                           	psect	text82,local,class=CODE,merge=1,delta=2
    98                           	psect	text83,local,class=CODE,merge=1,delta=2
    99                           	psect	text84,local,class=CODE,merge=1,delta=2
   100                           	psect	text85,local,class=CODE,merge=1,delta=2
   101                           	psect	text86,local,class=CODE,merge=1,delta=2
   102                           	psect	text87,local,class=CODE,merge=1,delta=2
   103                           	psect	text88,local,class=CODE,merge=1,delta=2
   104                           	psect	text89,local,class=CODE,merge=1,delta=2
   105                           	psect	text90,local,class=CODE,merge=1,delta=2
   106                           	psect	text91,local,class=CODE,merge=1,delta=2
   107                           	psect	text92,local,class=CODE,merge=1,delta=2
   108                           	psect	text93,local,class=CODE,merge=1,delta=2
   109                           	psect	text94,local,class=CODE,merge=1,delta=2
   110                           	psect	text95,local,class=CODE,merge=1,delta=2
   111                           	psect	text96,local,class=CODE,merge=1,delta=2
   112                           	psect	text97,local,class=CODE,merge=1,delta=2
   113                           	psect	text98,local,class=CODE,merge=1,inline,delta=2
   114                           	psect	text99,local,class=CODE,merge=1,inline,delta=2
   115                           	psect	text100,local,class=CODE,merge=1,inline,delta=2
   116                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   120                           	psect	text105,local,class=CODE,merge=1,delta=2
   121                           	psect	text106,local,class=CODE,merge=1,delta=2
   122                           	psect	text107,local,class=CODE,merge=1,delta=2
   123                           	psect	text108,local,class=CODE,merge=1,delta=2
   124                           	psect	text109,local,class=CODE,merge=1,delta=2
   125                           	psect	text110,local,class=CODE,merge=1,delta=2
   126                           	psect	text111,local,class=CODE,merge=1,delta=2
   127                           	psect	text112,local,class=CODE,merge=1,delta=2
   128                           	psect	text113,local,class=CODE,merge=1,delta=2
   129                           	psect	text114,local,class=CODE,merge=1,delta=2
   130                           	psect	text115,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text116,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text118,local,class=CODE,merge=1,delta=2
   134                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   137                           	psect	text122,local,class=CODE,merge=1,delta=2
   138                           	psect	text123,local,class=CODE,merge=1,delta=2
   139                           	psect	text124,local,class=CODE,merge=1,delta=2
   140                           	psect	text125,local,class=CODE,merge=1,delta=2
   141                           	psect	text126,local,class=CODE,merge=1,delta=2
   142                           	psect	text127,local,class=CODE,merge=1,delta=2
   143                           	psect	text128,local,class=CODE,merge=1,delta=2
   144                           	dabs	1,0x7E,2
   145  0000                     
   146                           ; Version 1.45
   147                           ; Generated 16/11/2017 GMT
   148                           ; 
   149                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   150                           ; All rights reserved.
   151                           ; 
   152                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   153                           ; 
   154                           ; Redistribution and use in source and binary forms, with or without modification, are
   155                           ; permitted provided that the following conditions are met:
   156                           ; 
   157                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   158                           ;        conditions and the following disclaimer.
   159                           ; 
   160                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   161                           ;        of conditions and the following disclaimer in the documentation and/or other
   162                           ;        materials provided with the distribution.
   163                           ; 
   164                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   165                           ;        software without specific prior written permission.
   166                           ; 
   167                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   168                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   169                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   170                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   171                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   172                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   173                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   174                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   175                           ; 
   176                           ; 
   177                           ; Code-generator required, PIC16F1619 Definitions
   178                           ; 
   179                           ; SFR Addresses
   180  0000                     	;# 
   181  0001                     	;# 
   182  0002                     	;# 
   183  0003                     	;# 
   184  0004                     	;# 
   185  0005                     	;# 
   186  0006                     	;# 
   187  0007                     	;# 
   188  0008                     	;# 
   189  0009                     	;# 
   190  000A                     	;# 
   191  000B                     	;# 
   192  000C                     	;# 
   193  000D                     	;# 
   194  000E                     	;# 
   195  0010                     	;# 
   196  0011                     	;# 
   197  0012                     	;# 
   198  0013                     	;# 
   199  0014                     	;# 
   200  0015                     	;# 
   201  0016                     	;# 
   202  0016                     	;# 
   203  0017                     	;# 
   204  0018                     	;# 
   205  0019                     	;# 
   206  001A                     	;# 
   207  001A                     	;# 
   208  001B                     	;# 
   209  001B                     	;# 
   210  001C                     	;# 
   211  001D                     	;# 
   212  001E                     	;# 
   213  001F                     	;# 
   214  008C                     	;# 
   215  008D                     	;# 
   216  008E                     	;# 
   217  0090                     	;# 
   218  0091                     	;# 
   219  0092                     	;# 
   220  0093                     	;# 
   221  0094                     	;# 
   222  0095                     	;# 
   223  0096                     	;# 
   224  0098                     	;# 
   225  0099                     	;# 
   226  009A                     	;# 
   227  009B                     	;# 
   228  009B                     	;# 
   229  009C                     	;# 
   230  009D                     	;# 
   231  009E                     	;# 
   232  009F                     	;# 
   233  010C                     	;# 
   234  010D                     	;# 
   235  010E                     	;# 
   236  0111                     	;# 
   237  0112                     	;# 
   238  0113                     	;# 
   239  0114                     	;# 
   240  0115                     	;# 
   241  0116                     	;# 
   242  0117                     	;# 
   243  0118                     	;# 
   244  0119                     	;# 
   245  011C                     	;# 
   246  018C                     	;# 
   247  018D                     	;# 
   248  018E                     	;# 
   249  0191                     	;# 
   250  0191                     	;# 
   251  0192                     	;# 
   252  0193                     	;# 
   253  0193                     	;# 
   254  0194                     	;# 
   255  0195                     	;# 
   256  0196                     	;# 
   257  0197                     	;# 
   258  0199                     	;# 
   259  0199                     	;# 
   260  0199                     	;# 
   261  019A                     	;# 
   262  019A                     	;# 
   263  019A                     	;# 
   264  019B                     	;# 
   265  019B                     	;# 
   266  019B                     	;# 
   267  019B                     	;# 
   268  019B                     	;# 
   269  019C                     	;# 
   270  019C                     	;# 
   271  019C                     	;# 
   272  019D                     	;# 
   273  019D                     	;# 
   274  019D                     	;# 
   275  019E                     	;# 
   276  019E                     	;# 
   277  019E                     	;# 
   278  019F                     	;# 
   279  019F                     	;# 
   280  019F                     	;# 
   281  019F                     	;# 
   282  019F                     	;# 
   283  020C                     	;# 
   284  020D                     	;# 
   285  020E                     	;# 
   286  0211                     	;# 
   287  0211                     	;# 
   288  0212                     	;# 
   289  0212                     	;# 
   290  0213                     	;# 
   291  0213                     	;# 
   292  0214                     	;# 
   293  0214                     	;# 
   294  0215                     	;# 
   295  0215                     	;# 
   296  0215                     	;# 
   297  0215                     	;# 
   298  0216                     	;# 
   299  0216                     	;# 
   300  0217                     	;# 
   301  0217                     	;# 
   302  028C                     	;# 
   303  028D                     	;# 
   304  028E                     	;# 
   305  0291                     	;# 
   306  0291                     	;# 
   307  0292                     	;# 
   308  0293                     	;# 
   309  0294                     	;# 
   310  0298                     	;# 
   311  0298                     	;# 
   312  0299                     	;# 
   313  029A                     	;# 
   314  029B                     	;# 
   315  029E                     	;# 
   316  030C                     	;# 
   317  030D                     	;# 
   318  030E                     	;# 
   319  038C                     	;# 
   320  038D                     	;# 
   321  038E                     	;# 
   322  0391                     	;# 
   323  0392                     	;# 
   324  0393                     	;# 
   325  0394                     	;# 
   326  0395                     	;# 
   327  0396                     	;# 
   328  0397                     	;# 
   329  0398                     	;# 
   330  0399                     	;# 
   331  040E                     	;# 
   332  0413                     	;# 
   333  0413                     	;# 
   334  0414                     	;# 
   335  0414                     	;# 
   336  0415                     	;# 
   337  0416                     	;# 
   338  0417                     	;# 
   339  0418                     	;# 
   340  041A                     	;# 
   341  041A                     	;# 
   342  041B                     	;# 
   343  041B                     	;# 
   344  041C                     	;# 
   345  041D                     	;# 
   346  041E                     	;# 
   347  041F                     	;# 
   348  0493                     	;# 
   349  0494                     	;# 
   350  0495                     	;# 
   351  0496                     	;# 
   352  049A                     	;# 
   353  049B                     	;# 
   354  049C                     	;# 
   355  049D                     	;# 
   356  058C                     	;# 
   357  058C                     	;# 
   358  058D                     	;# 
   359  058E                     	;# 
   360  058E                     	;# 
   361  058F                     	;# 
   362  0590                     	;# 
   363  0590                     	;# 
   364  0591                     	;# 
   365  0592                     	;# 
   366  0592                     	;# 
   367  0593                     	;# 
   368  0594                     	;# 
   369  0594                     	;# 
   370  0595                     	;# 
   371  0596                     	;# 
   372  0596                     	;# 
   373  0597                     	;# 
   374  0598                     	;# 
   375  0599                     	;# 
   376  059A                     	;# 
   377  059B                     	;# 
   378  059B                     	;# 
   379  059C                     	;# 
   380  059D                     	;# 
   381  060C                     	;# 
   382  060C                     	;# 
   383  060D                     	;# 
   384  060E                     	;# 
   385  060F                     	;# 
   386  060F                     	;# 
   387  0610                     	;# 
   388  0611                     	;# 
   389  0612                     	;# 
   390  0613                     	;# 
   391  0614                     	;# 
   392  0617                     	;# 
   393  0618                     	;# 
   394  0619                     	;# 
   395  061A                     	;# 
   396  061B                     	;# 
   397  061C                     	;# 
   398  0691                     	;# 
   399  0692                     	;# 
   400  0693                     	;# 
   401  0694                     	;# 
   402  0695                     	;# 
   403  0696                     	;# 
   404  0697                     	;# 
   405  0699                     	;# 
   406  069A                     	;# 
   407  0711                     	;# 
   408  0712                     	;# 
   409  0713                     	;# 
   410  0714                     	;# 
   411  0715                     	;# 
   412  0718                     	;# 
   413  0718                     	;# 
   414  0719                     	;# 
   415  071A                     	;# 
   416  071A                     	;# 
   417  071B                     	;# 
   418  071C                     	;# 
   419  071D                     	;# 
   420  0791                     	;# 
   421  0791                     	;# 
   422  0792                     	;# 
   423  0793                     	;# 
   424  0793                     	;# 
   425  0794                     	;# 
   426  0795                     	;# 
   427  0795                     	;# 
   428  0796                     	;# 
   429  0797                     	;# 
   430  0797                     	;# 
   431  0798                     	;# 
   432  0799                     	;# 
   433  079A                     	;# 
   434  080C                     	;# 
   435  080C                     	;# 
   436  080D                     	;# 
   437  080E                     	;# 
   438  080E                     	;# 
   439  080F                     	;# 
   440  0810                     	;# 
   441  0810                     	;# 
   442  0811                     	;# 
   443  0812                     	;# 
   444  0812                     	;# 
   445  0813                     	;# 
   446  0814                     	;# 
   447  0815                     	;# 
   448  0816                     	;# 
   449  0817                     	;# 
   450  0818                     	;# 
   451  0819                     	;# 
   452  081A                     	;# 
   453  081A                     	;# 
   454  081B                     	;# 
   455  081C                     	;# 
   456  081C                     	;# 
   457  081D                     	;# 
   458  088C                     	;# 
   459  088D                     	;# 
   460  088E                     	;# 
   461  088F                     	;# 
   462  088F                     	;# 
   463  0890                     	;# 
   464  0891                     	;# 
   465  0892                     	;# 
   466  0893                     	;# 
   467  0893                     	;# 
   468  0894                     	;# 
   469  0895                     	;# 
   470  0896                     	;# 
   471  0897                     	;# 
   472  0897                     	;# 
   473  0898                     	;# 
   474  0899                     	;# 
   475  0D8C                     	;# 
   476  0D8C                     	;# 
   477  0D8D                     	;# 
   478  0D8E                     	;# 
   479  0D8F                     	;# 
   480  0D8F                     	;# 
   481  0D90                     	;# 
   482  0D91                     	;# 
   483  0D92                     	;# 
   484  0D92                     	;# 
   485  0D93                     	;# 
   486  0D94                     	;# 
   487  0D95                     	;# 
   488  0D95                     	;# 
   489  0D96                     	;# 
   490  0D97                     	;# 
   491  0D98                     	;# 
   492  0D99                     	;# 
   493  0D9A                     	;# 
   494  0D9B                     	;# 
   495  0D9C                     	;# 
   496  0D9D                     	;# 
   497  0D9E                     	;# 
   498  0D9E                     	;# 
   499  0D9F                     	;# 
   500  0DA0                     	;# 
   501  0DA1                     	;# 
   502  0DA1                     	;# 
   503  0DA2                     	;# 
   504  0DA3                     	;# 
   505  0DA4                     	;# 
   506  0DA4                     	;# 
   507  0DA5                     	;# 
   508  0DA6                     	;# 
   509  0DA7                     	;# 
   510  0DA7                     	;# 
   511  0DA8                     	;# 
   512  0DA9                     	;# 
   513  0DAA                     	;# 
   514  0DAB                     	;# 
   515  0DAC                     	;# 
   516  0DAD                     	;# 
   517  0DAE                     	;# 
   518  0DAF                     	;# 
   519  0E0F                     	;# 
   520  0E10                     	;# 
   521  0E11                     	;# 
   522  0E12                     	;# 
   523  0E13                     	;# 
   524  0E14                     	;# 
   525  0E15                     	;# 
   526  0E16                     	;# 
   527  0E17                     	;# 
   528  0E18                     	;# 
   529  0E19                     	;# 
   530  0E1A                     	;# 
   531  0E1B                     	;# 
   532  0E1C                     	;# 
   533  0E1D                     	;# 
   534  0E1E                     	;# 
   535  0E1F                     	;# 
   536  0E20                     	;# 
   537  0E21                     	;# 
   538  0E22                     	;# 
   539  0E23                     	;# 
   540  0E24                     	;# 
   541  0E25                     	;# 
   542  0E26                     	;# 
   543  0E27                     	;# 
   544  0E28                     	;# 
   545  0E29                     	;# 
   546  0E2A                     	;# 
   547  0E2B                     	;# 
   548  0E2C                     	;# 
   549  0E2D                     	;# 
   550  0E2E                     	;# 
   551  0E90                     	;# 
   552  0E91                     	;# 
   553  0E92                     	;# 
   554  0E94                     	;# 
   555  0E95                     	;# 
   556  0E9C                     	;# 
   557  0E9D                     	;# 
   558  0E9E                     	;# 
   559  0E9F                     	;# 
   560  0EA0                     	;# 
   561  0EA1                     	;# 
   562  0EA2                     	;# 
   563  0EA3                     	;# 
   564  0EA4                     	;# 
   565  0EA5                     	;# 
   566  0EA6                     	;# 
   567  0EA7                     	;# 
   568  0F0F                     	;# 
   569  0F10                     	;# 
   570  0F11                     	;# 
   571  0F12                     	;# 
   572  0F13                     	;# 
   573  0F14                     	;# 
   574  0F15                     	;# 
   575  0F16                     	;# 
   576  0F17                     	;# 
   577  0F18                     	;# 
   578  0F19                     	;# 
   579  0F1A                     	;# 
   580  0F1B                     	;# 
   581  0F1C                     	;# 
   582  0F1D                     	;# 
   583  0F1E                     	;# 
   584  0F1F                     	;# 
   585  0F20                     	;# 
   586  0F21                     	;# 
   587  0F22                     	;# 
   588  0F23                     	;# 
   589  0F24                     	;# 
   590  0F25                     	;# 
   591  0F26                     	;# 
   592  0F27                     	;# 
   593  0F28                     	;# 
   594  0F29                     	;# 
   595  0F2A                     	;# 
   596  0F2B                     	;# 
   597  0F2C                     	;# 
   598  0F2D                     	;# 
   599  0F2E                     	;# 
   600  0F2F                     	;# 
   601  0F30                     	;# 
   602  0F31                     	;# 
   603  0F32                     	;# 
   604  0F33                     	;# 
   605  0F34                     	;# 
   606  0F35                     	;# 
   607  0F36                     	;# 
   608  0F37                     	;# 
   609  0FE4                     	;# 
   610  0FE5                     	;# 
   611  0FE6                     	;# 
   612  0FE7                     	;# 
   613  0FE8                     	;# 
   614  0FE9                     	;# 
   615  0FEA                     	;# 
   616  0FEB                     	;# 
   617  0FED                     	;# 
   618  0FEE                     	;# 
   619  0FEF                     	;# 
   620  0000                     	;# 
   621  0001                     	;# 
   622  0002                     	;# 
   623  0003                     	;# 
   624  0004                     	;# 
   625  0005                     	;# 
   626  0006                     	;# 
   627  0007                     	;# 
   628  0008                     	;# 
   629  0009                     	;# 
   630  000A                     	;# 
   631  000B                     	;# 
   632  000C                     	;# 
   633  000D                     	;# 
   634  000E                     	;# 
   635  0010                     	;# 
   636  0011                     	;# 
   637  0012                     	;# 
   638  0013                     	;# 
   639  0014                     	;# 
   640  0015                     	;# 
   641  0016                     	;# 
   642  0016                     	;# 
   643  0017                     	;# 
   644  0018                     	;# 
   645  0019                     	;# 
   646  001A                     	;# 
   647  001A                     	;# 
   648  001B                     	;# 
   649  001B                     	;# 
   650  001C                     	;# 
   651  001D                     	;# 
   652  001E                     	;# 
   653  001F                     	;# 
   654  008C                     	;# 
   655  008D                     	;# 
   656  008E                     	;# 
   657  0090                     	;# 
   658  0091                     	;# 
   659  0092                     	;# 
   660  0093                     	;# 
   661  0094                     	;# 
   662  0095                     	;# 
   663  0096                     	;# 
   664  0098                     	;# 
   665  0099                     	;# 
   666  009A                     	;# 
   667  009B                     	;# 
   668  009B                     	;# 
   669  009C                     	;# 
   670  009D                     	;# 
   671  009E                     	;# 
   672  009F                     	;# 
   673  010C                     	;# 
   674  010D                     	;# 
   675  010E                     	;# 
   676  0111                     	;# 
   677  0112                     	;# 
   678  0113                     	;# 
   679  0114                     	;# 
   680  0115                     	;# 
   681  0116                     	;# 
   682  0117                     	;# 
   683  0118                     	;# 
   684  0119                     	;# 
   685  011C                     	;# 
   686  018C                     	;# 
   687  018D                     	;# 
   688  018E                     	;# 
   689  0191                     	;# 
   690  0191                     	;# 
   691  0192                     	;# 
   692  0193                     	;# 
   693  0193                     	;# 
   694  0194                     	;# 
   695  0195                     	;# 
   696  0196                     	;# 
   697  0197                     	;# 
   698  0199                     	;# 
   699  0199                     	;# 
   700  0199                     	;# 
   701  019A                     	;# 
   702  019A                     	;# 
   703  019A                     	;# 
   704  019B                     	;# 
   705  019B                     	;# 
   706  019B                     	;# 
   707  019B                     	;# 
   708  019B                     	;# 
   709  019C                     	;# 
   710  019C                     	;# 
   711  019C                     	;# 
   712  019D                     	;# 
   713  019D                     	;# 
   714  019D                     	;# 
   715  019E                     	;# 
   716  019E                     	;# 
   717  019E                     	;# 
   718  019F                     	;# 
   719  019F                     	;# 
   720  019F                     	;# 
   721  019F                     	;# 
   722  019F                     	;# 
   723  020C                     	;# 
   724  020D                     	;# 
   725  020E                     	;# 
   726  0211                     	;# 
   727  0211                     	;# 
   728  0212                     	;# 
   729  0212                     	;# 
   730  0213                     	;# 
   731  0213                     	;# 
   732  0214                     	;# 
   733  0214                     	;# 
   734  0215                     	;# 
   735  0215                     	;# 
   736  0215                     	;# 
   737  0215                     	;# 
   738  0216                     	;# 
   739  0216                     	;# 
   740  0217                     	;# 
   741  0217                     	;# 
   742  028C                     	;# 
   743  028D                     	;# 
   744  028E                     	;# 
   745  0291                     	;# 
   746  0291                     	;# 
   747  0292                     	;# 
   748  0293                     	;# 
   749  0294                     	;# 
   750  0298                     	;# 
   751  0298                     	;# 
   752  0299                     	;# 
   753  029A                     	;# 
   754  029B                     	;# 
   755  029E                     	;# 
   756  030C                     	;# 
   757  030D                     	;# 
   758  030E                     	;# 
   759  038C                     	;# 
   760  038D                     	;# 
   761  038E                     	;# 
   762  0391                     	;# 
   763  0392                     	;# 
   764  0393                     	;# 
   765  0394                     	;# 
   766  0395                     	;# 
   767  0396                     	;# 
   768  0397                     	;# 
   769  0398                     	;# 
   770  0399                     	;# 
   771  040E                     	;# 
   772  0413                     	;# 
   773  0413                     	;# 
   774  0414                     	;# 
   775  0414                     	;# 
   776  0415                     	;# 
   777  0416                     	;# 
   778  0417                     	;# 
   779  0418                     	;# 
   780  041A                     	;# 
   781  041A                     	;# 
   782  041B                     	;# 
   783  041B                     	;# 
   784  041C                     	;# 
   785  041D                     	;# 
   786  041E                     	;# 
   787  041F                     	;# 
   788  0493                     	;# 
   789  0494                     	;# 
   790  0495                     	;# 
   791  0496                     	;# 
   792  049A                     	;# 
   793  049B                     	;# 
   794  049C                     	;# 
   795  049D                     	;# 
   796  058C                     	;# 
   797  058C                     	;# 
   798  058D                     	;# 
   799  058E                     	;# 
   800  058E                     	;# 
   801  058F                     	;# 
   802  0590                     	;# 
   803  0590                     	;# 
   804  0591                     	;# 
   805  0592                     	;# 
   806  0592                     	;# 
   807  0593                     	;# 
   808  0594                     	;# 
   809  0594                     	;# 
   810  0595                     	;# 
   811  0596                     	;# 
   812  0596                     	;# 
   813  0597                     	;# 
   814  0598                     	;# 
   815  0599                     	;# 
   816  059A                     	;# 
   817  059B                     	;# 
   818  059B                     	;# 
   819  059C                     	;# 
   820  059D                     	;# 
   821  060C                     	;# 
   822  060C                     	;# 
   823  060D                     	;# 
   824  060E                     	;# 
   825  060F                     	;# 
   826  060F                     	;# 
   827  0610                     	;# 
   828  0611                     	;# 
   829  0612                     	;# 
   830  0613                     	;# 
   831  0614                     	;# 
   832  0617                     	;# 
   833  0618                     	;# 
   834  0619                     	;# 
   835  061A                     	;# 
   836  061B                     	;# 
   837  061C                     	;# 
   838  0691                     	;# 
   839  0692                     	;# 
   840  0693                     	;# 
   841  0694                     	;# 
   842  0695                     	;# 
   843  0696                     	;# 
   844  0697                     	;# 
   845  0699                     	;# 
   846  069A                     	;# 
   847  0711                     	;# 
   848  0712                     	;# 
   849  0713                     	;# 
   850  0714                     	;# 
   851  0715                     	;# 
   852  0718                     	;# 
   853  0718                     	;# 
   854  0719                     	;# 
   855  071A                     	;# 
   856  071A                     	;# 
   857  071B                     	;# 
   858  071C                     	;# 
   859  071D                     	;# 
   860  0791                     	;# 
   861  0791                     	;# 
   862  0792                     	;# 
   863  0793                     	;# 
   864  0793                     	;# 
   865  0794                     	;# 
   866  0795                     	;# 
   867  0795                     	;# 
   868  0796                     	;# 
   869  0797                     	;# 
   870  0797                     	;# 
   871  0798                     	;# 
   872  0799                     	;# 
   873  079A                     	;# 
   874  080C                     	;# 
   875  080C                     	;# 
   876  080D                     	;# 
   877  080E                     	;# 
   878  080E                     	;# 
   879  080F                     	;# 
   880  0810                     	;# 
   881  0810                     	;# 
   882  0811                     	;# 
   883  0812                     	;# 
   884  0812                     	;# 
   885  0813                     	;# 
   886  0814                     	;# 
   887  0815                     	;# 
   888  0816                     	;# 
   889  0817                     	;# 
   890  0818                     	;# 
   891  0819                     	;# 
   892  081A                     	;# 
   893  081A                     	;# 
   894  081B                     	;# 
   895  081C                     	;# 
   896  081C                     	;# 
   897  081D                     	;# 
   898  088C                     	;# 
   899  088D                     	;# 
   900  088E                     	;# 
   901  088F                     	;# 
   902  088F                     	;# 
   903  0890                     	;# 
   904  0891                     	;# 
   905  0892                     	;# 
   906  0893                     	;# 
   907  0893                     	;# 
   908  0894                     	;# 
   909  0895                     	;# 
   910  0896                     	;# 
   911  0897                     	;# 
   912  0897                     	;# 
   913  0898                     	;# 
   914  0899                     	;# 
   915  0D8C                     	;# 
   916  0D8C                     	;# 
   917  0D8D                     	;# 
   918  0D8E                     	;# 
   919  0D8F                     	;# 
   920  0D8F                     	;# 
   921  0D90                     	;# 
   922  0D91                     	;# 
   923  0D92                     	;# 
   924  0D92                     	;# 
   925  0D93                     	;# 
   926  0D94                     	;# 
   927  0D95                     	;# 
   928  0D95                     	;# 
   929  0D96                     	;# 
   930  0D97                     	;# 
   931  0D98                     	;# 
   932  0D99                     	;# 
   933  0D9A                     	;# 
   934  0D9B                     	;# 
   935  0D9C                     	;# 
   936  0D9D                     	;# 
   937  0D9E                     	;# 
   938  0D9E                     	;# 
   939  0D9F                     	;# 
   940  0DA0                     	;# 
   941  0DA1                     	;# 
   942  0DA1                     	;# 
   943  0DA2                     	;# 
   944  0DA3                     	;# 
   945  0DA4                     	;# 
   946  0DA4                     	;# 
   947  0DA5                     	;# 
   948  0DA6                     	;# 
   949  0DA7                     	;# 
   950  0DA7                     	;# 
   951  0DA8                     	;# 
   952  0DA9                     	;# 
   953  0DAA                     	;# 
   954  0DAB                     	;# 
   955  0DAC                     	;# 
   956  0DAD                     	;# 
   957  0DAE                     	;# 
   958  0DAF                     	;# 
   959  0E0F                     	;# 
   960  0E10                     	;# 
   961  0E11                     	;# 
   962  0E12                     	;# 
   963  0E13                     	;# 
   964  0E14                     	;# 
   965  0E15                     	;# 
   966  0E16                     	;# 
   967  0E17                     	;# 
   968  0E18                     	;# 
   969  0E19                     	;# 
   970  0E1A                     	;# 
   971  0E1B                     	;# 
   972  0E1C                     	;# 
   973  0E1D                     	;# 
   974  0E1E                     	;# 
   975  0E1F                     	;# 
   976  0E20                     	;# 
   977  0E21                     	;# 
   978  0E22                     	;# 
   979  0E23                     	;# 
   980  0E24                     	;# 
   981  0E25                     	;# 
   982  0E26                     	;# 
   983  0E27                     	;# 
   984  0E28                     	;# 
   985  0E29                     	;# 
   986  0E2A                     	;# 
   987  0E2B                     	;# 
   988  0E2C                     	;# 
   989  0E2D                     	;# 
   990  0E2E                     	;# 
   991  0E90                     	;# 
   992  0E91                     	;# 
   993  0E92                     	;# 
   994  0E94                     	;# 
   995  0E95                     	;# 
   996  0E9C                     	;# 
   997  0E9D                     	;# 
   998  0E9E                     	;# 
   999  0E9F                     	;# 
  1000  0EA0                     	;# 
  1001  0EA1                     	;# 
  1002  0EA2                     	;# 
  1003  0EA3                     	;# 
  1004  0EA4                     	;# 
  1005  0EA5                     	;# 
  1006  0EA6                     	;# 
  1007  0EA7                     	;# 
  1008  0F0F                     	;# 
  1009  0F10                     	;# 
  1010  0F11                     	;# 
  1011  0F12                     	;# 
  1012  0F13                     	;# 
  1013  0F14                     	;# 
  1014  0F15                     	;# 
  1015  0F16                     	;# 
  1016  0F17                     	;# 
  1017  0F18                     	;# 
  1018  0F19                     	;# 
  1019  0F1A                     	;# 
  1020  0F1B                     	;# 
  1021  0F1C                     	;# 
  1022  0F1D                     	;# 
  1023  0F1E                     	;# 
  1024  0F1F                     	;# 
  1025  0F20                     	;# 
  1026  0F21                     	;# 
  1027  0F22                     	;# 
  1028  0F23                     	;# 
  1029  0F24                     	;# 
  1030  0F25                     	;# 
  1031  0F26                     	;# 
  1032  0F27                     	;# 
  1033  0F28                     	;# 
  1034  0F29                     	;# 
  1035  0F2A                     	;# 
  1036  0F2B                     	;# 
  1037  0F2C                     	;# 
  1038  0F2D                     	;# 
  1039  0F2E                     	;# 
  1040  0F2F                     	;# 
  1041  0F30                     	;# 
  1042  0F31                     	;# 
  1043  0F32                     	;# 
  1044  0F33                     	;# 
  1045  0F34                     	;# 
  1046  0F35                     	;# 
  1047  0F36                     	;# 
  1048  0F37                     	;# 
  1049  0FE4                     	;# 
  1050  0FE5                     	;# 
  1051  0FE6                     	;# 
  1052  0FE7                     	;# 
  1053  0FE8                     	;# 
  1054  0FE9                     	;# 
  1055  0FEA                     	;# 
  1056  0FEB                     	;# 
  1057  0FED                     	;# 
  1058  0FEE                     	;# 
  1059  0FEF                     	;# 
  1060  0000                     	;# 
  1061  0001                     	;# 
  1062  0002                     	;# 
  1063  0003                     	;# 
  1064  0004                     	;# 
  1065  0005                     	;# 
  1066  0006                     	;# 
  1067  0007                     	;# 
  1068  0008                     	;# 
  1069  0009                     	;# 
  1070  000A                     	;# 
  1071  000B                     	;# 
  1072  000C                     	;# 
  1073  000D                     	;# 
  1074  000E                     	;# 
  1075  0010                     	;# 
  1076  0011                     	;# 
  1077  0012                     	;# 
  1078  0013                     	;# 
  1079  0014                     	;# 
  1080  0015                     	;# 
  1081  0016                     	;# 
  1082  0016                     	;# 
  1083  0017                     	;# 
  1084  0018                     	;# 
  1085  0019                     	;# 
  1086  001A                     	;# 
  1087  001A                     	;# 
  1088  001B                     	;# 
  1089  001B                     	;# 
  1090  001C                     	;# 
  1091  001D                     	;# 
  1092  001E                     	;# 
  1093  001F                     	;# 
  1094  008C                     	;# 
  1095  008D                     	;# 
  1096  008E                     	;# 
  1097  0090                     	;# 
  1098  0091                     	;# 
  1099  0092                     	;# 
  1100  0093                     	;# 
  1101  0094                     	;# 
  1102  0095                     	;# 
  1103  0096                     	;# 
  1104  0098                     	;# 
  1105  0099                     	;# 
  1106  009A                     	;# 
  1107  009B                     	;# 
  1108  009B                     	;# 
  1109  009C                     	;# 
  1110  009D                     	;# 
  1111  009E                     	;# 
  1112  009F                     	;# 
  1113  010C                     	;# 
  1114  010D                     	;# 
  1115  010E                     	;# 
  1116  0111                     	;# 
  1117  0112                     	;# 
  1118  0113                     	;# 
  1119  0114                     	;# 
  1120  0115                     	;# 
  1121  0116                     	;# 
  1122  0117                     	;# 
  1123  0118                     	;# 
  1124  0119                     	;# 
  1125  011C                     	;# 
  1126  018C                     	;# 
  1127  018D                     	;# 
  1128  018E                     	;# 
  1129  0191                     	;# 
  1130  0191                     	;# 
  1131  0192                     	;# 
  1132  0193                     	;# 
  1133  0193                     	;# 
  1134  0194                     	;# 
  1135  0195                     	;# 
  1136  0196                     	;# 
  1137  0197                     	;# 
  1138  0199                     	;# 
  1139  0199                     	;# 
  1140  0199                     	;# 
  1141  019A                     	;# 
  1142  019A                     	;# 
  1143  019A                     	;# 
  1144  019B                     	;# 
  1145  019B                     	;# 
  1146  019B                     	;# 
  1147  019B                     	;# 
  1148  019B                     	;# 
  1149  019C                     	;# 
  1150  019C                     	;# 
  1151  019C                     	;# 
  1152  019D                     	;# 
  1153  019D                     	;# 
  1154  019D                     	;# 
  1155  019E                     	;# 
  1156  019E                     	;# 
  1157  019E                     	;# 
  1158  019F                     	;# 
  1159  019F                     	;# 
  1160  019F                     	;# 
  1161  019F                     	;# 
  1162  019F                     	;# 
  1163  020C                     	;# 
  1164  020D                     	;# 
  1165  020E                     	;# 
  1166  0211                     	;# 
  1167  0211                     	;# 
  1168  0212                     	;# 
  1169  0212                     	;# 
  1170  0213                     	;# 
  1171  0213                     	;# 
  1172  0214                     	;# 
  1173  0214                     	;# 
  1174  0215                     	;# 
  1175  0215                     	;# 
  1176  0215                     	;# 
  1177  0215                     	;# 
  1178  0216                     	;# 
  1179  0216                     	;# 
  1180  0217                     	;# 
  1181  0217                     	;# 
  1182  028C                     	;# 
  1183  028D                     	;# 
  1184  028E                     	;# 
  1185  0291                     	;# 
  1186  0291                     	;# 
  1187  0292                     	;# 
  1188  0293                     	;# 
  1189  0294                     	;# 
  1190  0298                     	;# 
  1191  0298                     	;# 
  1192  0299                     	;# 
  1193  029A                     	;# 
  1194  029B                     	;# 
  1195  029E                     	;# 
  1196  030C                     	;# 
  1197  030D                     	;# 
  1198  030E                     	;# 
  1199  038C                     	;# 
  1200  038D                     	;# 
  1201  038E                     	;# 
  1202  0391                     	;# 
  1203  0392                     	;# 
  1204  0393                     	;# 
  1205  0394                     	;# 
  1206  0395                     	;# 
  1207  0396                     	;# 
  1208  0397                     	;# 
  1209  0398                     	;# 
  1210  0399                     	;# 
  1211  040E                     	;# 
  1212  0413                     	;# 
  1213  0413                     	;# 
  1214  0414                     	;# 
  1215  0414                     	;# 
  1216  0415                     	;# 
  1217  0416                     	;# 
  1218  0417                     	;# 
  1219  0418                     	;# 
  1220  041A                     	;# 
  1221  041A                     	;# 
  1222  041B                     	;# 
  1223  041B                     	;# 
  1224  041C                     	;# 
  1225  041D                     	;# 
  1226  041E                     	;# 
  1227  041F                     	;# 
  1228  0493                     	;# 
  1229  0494                     	;# 
  1230  0495                     	;# 
  1231  0496                     	;# 
  1232  049A                     	;# 
  1233  049B                     	;# 
  1234  049C                     	;# 
  1235  049D                     	;# 
  1236  058C                     	;# 
  1237  058C                     	;# 
  1238  058D                     	;# 
  1239  058E                     	;# 
  1240  058E                     	;# 
  1241  058F                     	;# 
  1242  0590                     	;# 
  1243  0590                     	;# 
  1244  0591                     	;# 
  1245  0592                     	;# 
  1246  0592                     	;# 
  1247  0593                     	;# 
  1248  0594                     	;# 
  1249  0594                     	;# 
  1250  0595                     	;# 
  1251  0596                     	;# 
  1252  0596                     	;# 
  1253  0597                     	;# 
  1254  0598                     	;# 
  1255  0599                     	;# 
  1256  059A                     	;# 
  1257  059B                     	;# 
  1258  059B                     	;# 
  1259  059C                     	;# 
  1260  059D                     	;# 
  1261  060C                     	;# 
  1262  060C                     	;# 
  1263  060D                     	;# 
  1264  060E                     	;# 
  1265  060F                     	;# 
  1266  060F                     	;# 
  1267  0610                     	;# 
  1268  0611                     	;# 
  1269  0612                     	;# 
  1270  0613                     	;# 
  1271  0614                     	;# 
  1272  0617                     	;# 
  1273  0618                     	;# 
  1274  0619                     	;# 
  1275  061A                     	;# 
  1276  061B                     	;# 
  1277  061C                     	;# 
  1278  0691                     	;# 
  1279  0692                     	;# 
  1280  0693                     	;# 
  1281  0694                     	;# 
  1282  0695                     	;# 
  1283  0696                     	;# 
  1284  0697                     	;# 
  1285  0699                     	;# 
  1286  069A                     	;# 
  1287  0711                     	;# 
  1288  0712                     	;# 
  1289  0713                     	;# 
  1290  0714                     	;# 
  1291  0715                     	;# 
  1292  0718                     	;# 
  1293  0718                     	;# 
  1294  0719                     	;# 
  1295  071A                     	;# 
  1296  071A                     	;# 
  1297  071B                     	;# 
  1298  071C                     	;# 
  1299  071D                     	;# 
  1300  0791                     	;# 
  1301  0791                     	;# 
  1302  0792                     	;# 
  1303  0793                     	;# 
  1304  0793                     	;# 
  1305  0794                     	;# 
  1306  0795                     	;# 
  1307  0795                     	;# 
  1308  0796                     	;# 
  1309  0797                     	;# 
  1310  0797                     	;# 
  1311  0798                     	;# 
  1312  0799                     	;# 
  1313  079A                     	;# 
  1314  080C                     	;# 
  1315  080C                     	;# 
  1316  080D                     	;# 
  1317  080E                     	;# 
  1318  080E                     	;# 
  1319  080F                     	;# 
  1320  0810                     	;# 
  1321  0810                     	;# 
  1322  0811                     	;# 
  1323  0812                     	;# 
  1324  0812                     	;# 
  1325  0813                     	;# 
  1326  0814                     	;# 
  1327  0815                     	;# 
  1328  0816                     	;# 
  1329  0817                     	;# 
  1330  0818                     	;# 
  1331  0819                     	;# 
  1332  081A                     	;# 
  1333  081A                     	;# 
  1334  081B                     	;# 
  1335  081C                     	;# 
  1336  081C                     	;# 
  1337  081D                     	;# 
  1338  088C                     	;# 
  1339  088D                     	;# 
  1340  088E                     	;# 
  1341  088F                     	;# 
  1342  088F                     	;# 
  1343  0890                     	;# 
  1344  0891                     	;# 
  1345  0892                     	;# 
  1346  0893                     	;# 
  1347  0893                     	;# 
  1348  0894                     	;# 
  1349  0895                     	;# 
  1350  0896                     	;# 
  1351  0897                     	;# 
  1352  0897                     	;# 
  1353  0898                     	;# 
  1354  0899                     	;# 
  1355  0D8C                     	;# 
  1356  0D8C                     	;# 
  1357  0D8D                     	;# 
  1358  0D8E                     	;# 
  1359  0D8F                     	;# 
  1360  0D8F                     	;# 
  1361  0D90                     	;# 
  1362  0D91                     	;# 
  1363  0D92                     	;# 
  1364  0D92                     	;# 
  1365  0D93                     	;# 
  1366  0D94                     	;# 
  1367  0D95                     	;# 
  1368  0D95                     	;# 
  1369  0D96                     	;# 
  1370  0D97                     	;# 
  1371  0D98                     	;# 
  1372  0D99                     	;# 
  1373  0D9A                     	;# 
  1374  0D9B                     	;# 
  1375  0D9C                     	;# 
  1376  0D9D                     	;# 
  1377  0D9E                     	;# 
  1378  0D9E                     	;# 
  1379  0D9F                     	;# 
  1380  0DA0                     	;# 
  1381  0DA1                     	;# 
  1382  0DA1                     	;# 
  1383  0DA2                     	;# 
  1384  0DA3                     	;# 
  1385  0DA4                     	;# 
  1386  0DA4                     	;# 
  1387  0DA5                     	;# 
  1388  0DA6                     	;# 
  1389  0DA7                     	;# 
  1390  0DA7                     	;# 
  1391  0DA8                     	;# 
  1392  0DA9                     	;# 
  1393  0DAA                     	;# 
  1394  0DAB                     	;# 
  1395  0DAC                     	;# 
  1396  0DAD                     	;# 
  1397  0DAE                     	;# 
  1398  0DAF                     	;# 
  1399  0E0F                     	;# 
  1400  0E10                     	;# 
  1401  0E11                     	;# 
  1402  0E12                     	;# 
  1403  0E13                     	;# 
  1404  0E14                     	;# 
  1405  0E15                     	;# 
  1406  0E16                     	;# 
  1407  0E17                     	;# 
  1408  0E18                     	;# 
  1409  0E19                     	;# 
  1410  0E1A                     	;# 
  1411  0E1B                     	;# 
  1412  0E1C                     	;# 
  1413  0E1D                     	;# 
  1414  0E1E                     	;# 
  1415  0E1F                     	;# 
  1416  0E20                     	;# 
  1417  0E21                     	;# 
  1418  0E22                     	;# 
  1419  0E23                     	;# 
  1420  0E24                     	;# 
  1421  0E25                     	;# 
  1422  0E26                     	;# 
  1423  0E27                     	;# 
  1424  0E28                     	;# 
  1425  0E29                     	;# 
  1426  0E2A                     	;# 
  1427  0E2B                     	;# 
  1428  0E2C                     	;# 
  1429  0E2D                     	;# 
  1430  0E2E                     	;# 
  1431  0E90                     	;# 
  1432  0E91                     	;# 
  1433  0E92                     	;# 
  1434  0E94                     	;# 
  1435  0E95                     	;# 
  1436  0E9C                     	;# 
  1437  0E9D                     	;# 
  1438  0E9E                     	;# 
  1439  0E9F                     	;# 
  1440  0EA0                     	;# 
  1441  0EA1                     	;# 
  1442  0EA2                     	;# 
  1443  0EA3                     	;# 
  1444  0EA4                     	;# 
  1445  0EA5                     	;# 
  1446  0EA6                     	;# 
  1447  0EA7                     	;# 
  1448  0F0F                     	;# 
  1449  0F10                     	;# 
  1450  0F11                     	;# 
  1451  0F12                     	;# 
  1452  0F13                     	;# 
  1453  0F14                     	;# 
  1454  0F15                     	;# 
  1455  0F16                     	;# 
  1456  0F17                     	;# 
  1457  0F18                     	;# 
  1458  0F19                     	;# 
  1459  0F1A                     	;# 
  1460  0F1B                     	;# 
  1461  0F1C                     	;# 
  1462  0F1D                     	;# 
  1463  0F1E                     	;# 
  1464  0F1F                     	;# 
  1465  0F20                     	;# 
  1466  0F21                     	;# 
  1467  0F22                     	;# 
  1468  0F23                     	;# 
  1469  0F24                     	;# 
  1470  0F25                     	;# 
  1471  0F26                     	;# 
  1472  0F27                     	;# 
  1473  0F28                     	;# 
  1474  0F29                     	;# 
  1475  0F2A                     	;# 
  1476  0F2B                     	;# 
  1477  0F2C                     	;# 
  1478  0F2D                     	;# 
  1479  0F2E                     	;# 
  1480  0F2F                     	;# 
  1481  0F30                     	;# 
  1482  0F31                     	;# 
  1483  0F32                     	;# 
  1484  0F33                     	;# 
  1485  0F34                     	;# 
  1486  0F35                     	;# 
  1487  0F36                     	;# 
  1488  0F37                     	;# 
  1489  0FE4                     	;# 
  1490  0FE5                     	;# 
  1491  0FE6                     	;# 
  1492  0FE7                     	;# 
  1493  0FE8                     	;# 
  1494  0FE9                     	;# 
  1495  0FEA                     	;# 
  1496  0FEB                     	;# 
  1497  0FED                     	;# 
  1498  0FEE                     	;# 
  1499  0FEF                     	;# 
  1500  0000                     	;# 
  1501  0001                     	;# 
  1502  0002                     	;# 
  1503  0003                     	;# 
  1504  0004                     	;# 
  1505  0005                     	;# 
  1506  0006                     	;# 
  1507  0007                     	;# 
  1508  0008                     	;# 
  1509  0009                     	;# 
  1510  000A                     	;# 
  1511  000B                     	;# 
  1512  000C                     	;# 
  1513  000D                     	;# 
  1514  000E                     	;# 
  1515  0010                     	;# 
  1516  0011                     	;# 
  1517  0012                     	;# 
  1518  0013                     	;# 
  1519  0014                     	;# 
  1520  0015                     	;# 
  1521  0016                     	;# 
  1522  0016                     	;# 
  1523  0017                     	;# 
  1524  0018                     	;# 
  1525  0019                     	;# 
  1526  001A                     	;# 
  1527  001A                     	;# 
  1528  001B                     	;# 
  1529  001B                     	;# 
  1530  001C                     	;# 
  1531  001D                     	;# 
  1532  001E                     	;# 
  1533  001F                     	;# 
  1534  008C                     	;# 
  1535  008D                     	;# 
  1536  008E                     	;# 
  1537  0090                     	;# 
  1538  0091                     	;# 
  1539  0092                     	;# 
  1540  0093                     	;# 
  1541  0094                     	;# 
  1542  0095                     	;# 
  1543  0096                     	;# 
  1544  0098                     	;# 
  1545  0099                     	;# 
  1546  009A                     	;# 
  1547  009B                     	;# 
  1548  009B                     	;# 
  1549  009C                     	;# 
  1550  009D                     	;# 
  1551  009E                     	;# 
  1552  009F                     	;# 
  1553  010C                     	;# 
  1554  010D                     	;# 
  1555  010E                     	;# 
  1556  0111                     	;# 
  1557  0112                     	;# 
  1558  0113                     	;# 
  1559  0114                     	;# 
  1560  0115                     	;# 
  1561  0116                     	;# 
  1562  0117                     	;# 
  1563  0118                     	;# 
  1564  0119                     	;# 
  1565  011C                     	;# 
  1566  018C                     	;# 
  1567  018D                     	;# 
  1568  018E                     	;# 
  1569  0191                     	;# 
  1570  0191                     	;# 
  1571  0192                     	;# 
  1572  0193                     	;# 
  1573  0193                     	;# 
  1574  0194                     	;# 
  1575  0195                     	;# 
  1576  0196                     	;# 
  1577  0197                     	;# 
  1578  0199                     	;# 
  1579  0199                     	;# 
  1580  0199                     	;# 
  1581  019A                     	;# 
  1582  019A                     	;# 
  1583  019A                     	;# 
  1584  019B                     	;# 
  1585  019B                     	;# 
  1586  019B                     	;# 
  1587  019B                     	;# 
  1588  019B                     	;# 
  1589  019C                     	;# 
  1590  019C                     	;# 
  1591  019C                     	;# 
  1592  019D                     	;# 
  1593  019D                     	;# 
  1594  019D                     	;# 
  1595  019E                     	;# 
  1596  019E                     	;# 
  1597  019E                     	;# 
  1598  019F                     	;# 
  1599  019F                     	;# 
  1600  019F                     	;# 
  1601  019F                     	;# 
  1602  019F                     	;# 
  1603  020C                     	;# 
  1604  020D                     	;# 
  1605  020E                     	;# 
  1606  0211                     	;# 
  1607  0211                     	;# 
  1608  0212                     	;# 
  1609  0212                     	;# 
  1610  0213                     	;# 
  1611  0213                     	;# 
  1612  0214                     	;# 
  1613  0214                     	;# 
  1614  0215                     	;# 
  1615  0215                     	;# 
  1616  0215                     	;# 
  1617  0215                     	;# 
  1618  0216                     	;# 
  1619  0216                     	;# 
  1620  0217                     	;# 
  1621  0217                     	;# 
  1622  028C                     	;# 
  1623  028D                     	;# 
  1624  028E                     	;# 
  1625  0291                     	;# 
  1626  0291                     	;# 
  1627  0292                     	;# 
  1628  0293                     	;# 
  1629  0294                     	;# 
  1630  0298                     	;# 
  1631  0298                     	;# 
  1632  0299                     	;# 
  1633  029A                     	;# 
  1634  029B                     	;# 
  1635  029E                     	;# 
  1636  030C                     	;# 
  1637  030D                     	;# 
  1638  030E                     	;# 
  1639  038C                     	;# 
  1640  038D                     	;# 
  1641  038E                     	;# 
  1642  0391                     	;# 
  1643  0392                     	;# 
  1644  0393                     	;# 
  1645  0394                     	;# 
  1646  0395                     	;# 
  1647  0396                     	;# 
  1648  0397                     	;# 
  1649  0398                     	;# 
  1650  0399                     	;# 
  1651  040E                     	;# 
  1652  0413                     	;# 
  1653  0413                     	;# 
  1654  0414                     	;# 
  1655  0414                     	;# 
  1656  0415                     	;# 
  1657  0416                     	;# 
  1658  0417                     	;# 
  1659  0418                     	;# 
  1660  041A                     	;# 
  1661  041A                     	;# 
  1662  041B                     	;# 
  1663  041B                     	;# 
  1664  041C                     	;# 
  1665  041D                     	;# 
  1666  041E                     	;# 
  1667  041F                     	;# 
  1668  0493                     	;# 
  1669  0494                     	;# 
  1670  0495                     	;# 
  1671  0496                     	;# 
  1672  049A                     	;# 
  1673  049B                     	;# 
  1674  049C                     	;# 
  1675  049D                     	;# 
  1676  058C                     	;# 
  1677  058C                     	;# 
  1678  058D                     	;# 
  1679  058E                     	;# 
  1680  058E                     	;# 
  1681  058F                     	;# 
  1682  0590                     	;# 
  1683  0590                     	;# 
  1684  0591                     	;# 
  1685  0592                     	;# 
  1686  0592                     	;# 
  1687  0593                     	;# 
  1688  0594                     	;# 
  1689  0594                     	;# 
  1690  0595                     	;# 
  1691  0596                     	;# 
  1692  0596                     	;# 
  1693  0597                     	;# 
  1694  0598                     	;# 
  1695  0599                     	;# 
  1696  059A                     	;# 
  1697  059B                     	;# 
  1698  059B                     	;# 
  1699  059C                     	;# 
  1700  059D                     	;# 
  1701  060C                     	;# 
  1702  060C                     	;# 
  1703  060D                     	;# 
  1704  060E                     	;# 
  1705  060F                     	;# 
  1706  060F                     	;# 
  1707  0610                     	;# 
  1708  0611                     	;# 
  1709  0612                     	;# 
  1710  0613                     	;# 
  1711  0614                     	;# 
  1712  0617                     	;# 
  1713  0618                     	;# 
  1714  0619                     	;# 
  1715  061A                     	;# 
  1716  061B                     	;# 
  1717  061C                     	;# 
  1718  0691                     	;# 
  1719  0692                     	;# 
  1720  0693                     	;# 
  1721  0694                     	;# 
  1722  0695                     	;# 
  1723  0696                     	;# 
  1724  0697                     	;# 
  1725  0699                     	;# 
  1726  069A                     	;# 
  1727  0711                     	;# 
  1728  0712                     	;# 
  1729  0713                     	;# 
  1730  0714                     	;# 
  1731  0715                     	;# 
  1732  0718                     	;# 
  1733  0718                     	;# 
  1734  0719                     	;# 
  1735  071A                     	;# 
  1736  071A                     	;# 
  1737  071B                     	;# 
  1738  071C                     	;# 
  1739  071D                     	;# 
  1740  0791                     	;# 
  1741  0791                     	;# 
  1742  0792                     	;# 
  1743  0793                     	;# 
  1744  0793                     	;# 
  1745  0794                     	;# 
  1746  0795                     	;# 
  1747  0795                     	;# 
  1748  0796                     	;# 
  1749  0797                     	;# 
  1750  0797                     	;# 
  1751  0798                     	;# 
  1752  0799                     	;# 
  1753  079A                     	;# 
  1754  080C                     	;# 
  1755  080C                     	;# 
  1756  080D                     	;# 
  1757  080E                     	;# 
  1758  080E                     	;# 
  1759  080F                     	;# 
  1760  0810                     	;# 
  1761  0810                     	;# 
  1762  0811                     	;# 
  1763  0812                     	;# 
  1764  0812                     	;# 
  1765  0813                     	;# 
  1766  0814                     	;# 
  1767  0815                     	;# 
  1768  0816                     	;# 
  1769  0817                     	;# 
  1770  0818                     	;# 
  1771  0819                     	;# 
  1772  081A                     	;# 
  1773  081A                     	;# 
  1774  081B                     	;# 
  1775  081C                     	;# 
  1776  081C                     	;# 
  1777  081D                     	;# 
  1778  088C                     	;# 
  1779  088D                     	;# 
  1780  088E                     	;# 
  1781  088F                     	;# 
  1782  088F                     	;# 
  1783  0890                     	;# 
  1784  0891                     	;# 
  1785  0892                     	;# 
  1786  0893                     	;# 
  1787  0893                     	;# 
  1788  0894                     	;# 
  1789  0895                     	;# 
  1790  0896                     	;# 
  1791  0897                     	;# 
  1792  0897                     	;# 
  1793  0898                     	;# 
  1794  0899                     	;# 
  1795  0D8C                     	;# 
  1796  0D8C                     	;# 
  1797  0D8D                     	;# 
  1798  0D8E                     	;# 
  1799  0D8F                     	;# 
  1800  0D8F                     	;# 
  1801  0D90                     	;# 
  1802  0D91                     	;# 
  1803  0D92                     	;# 
  1804  0D92                     	;# 
  1805  0D93                     	;# 
  1806  0D94                     	;# 
  1807  0D95                     	;# 
  1808  0D95                     	;# 
  1809  0D96                     	;# 
  1810  0D97                     	;# 
  1811  0D98                     	;# 
  1812  0D99                     	;# 
  1813  0D9A                     	;# 
  1814  0D9B                     	;# 
  1815  0D9C                     	;# 
  1816  0D9D                     	;# 
  1817  0D9E                     	;# 
  1818  0D9E                     	;# 
  1819  0D9F                     	;# 
  1820  0DA0                     	;# 
  1821  0DA1                     	;# 
  1822  0DA1                     	;# 
  1823  0DA2                     	;# 
  1824  0DA3                     	;# 
  1825  0DA4                     	;# 
  1826  0DA4                     	;# 
  1827  0DA5                     	;# 
  1828  0DA6                     	;# 
  1829  0DA7                     	;# 
  1830  0DA7                     	;# 
  1831  0DA8                     	;# 
  1832  0DA9                     	;# 
  1833  0DAA                     	;# 
  1834  0DAB                     	;# 
  1835  0DAC                     	;# 
  1836  0DAD                     	;# 
  1837  0DAE                     	;# 
  1838  0DAF                     	;# 
  1839  0E0F                     	;# 
  1840  0E10                     	;# 
  1841  0E11                     	;# 
  1842  0E12                     	;# 
  1843  0E13                     	;# 
  1844  0E14                     	;# 
  1845  0E15                     	;# 
  1846  0E16                     	;# 
  1847  0E17                     	;# 
  1848  0E18                     	;# 
  1849  0E19                     	;# 
  1850  0E1A                     	;# 
  1851  0E1B                     	;# 
  1852  0E1C                     	;# 
  1853  0E1D                     	;# 
  1854  0E1E                     	;# 
  1855  0E1F                     	;# 
  1856  0E20                     	;# 
  1857  0E21                     	;# 
  1858  0E22                     	;# 
  1859  0E23                     	;# 
  1860  0E24                     	;# 
  1861  0E25                     	;# 
  1862  0E26                     	;# 
  1863  0E27                     	;# 
  1864  0E28                     	;# 
  1865  0E29                     	;# 
  1866  0E2A                     	;# 
  1867  0E2B                     	;# 
  1868  0E2C                     	;# 
  1869  0E2D                     	;# 
  1870  0E2E                     	;# 
  1871  0E90                     	;# 
  1872  0E91                     	;# 
  1873  0E92                     	;# 
  1874  0E94                     	;# 
  1875  0E95                     	;# 
  1876  0E9C                     	;# 
  1877  0E9D                     	;# 
  1878  0E9E                     	;# 
  1879  0E9F                     	;# 
  1880  0EA0                     	;# 
  1881  0EA1                     	;# 
  1882  0EA2                     	;# 
  1883  0EA3                     	;# 
  1884  0EA4                     	;# 
  1885  0EA5                     	;# 
  1886  0EA6                     	;# 
  1887  0EA7                     	;# 
  1888  0F0F                     	;# 
  1889  0F10                     	;# 
  1890  0F11                     	;# 
  1891  0F12                     	;# 
  1892  0F13                     	;# 
  1893  0F14                     	;# 
  1894  0F15                     	;# 
  1895  0F16                     	;# 
  1896  0F17                     	;# 
  1897  0F18                     	;# 
  1898  0F19                     	;# 
  1899  0F1A                     	;# 
  1900  0F1B                     	;# 
  1901  0F1C                     	;# 
  1902  0F1D                     	;# 
  1903  0F1E                     	;# 
  1904  0F1F                     	;# 
  1905  0F20                     	;# 
  1906  0F21                     	;# 
  1907  0F22                     	;# 
  1908  0F23                     	;# 
  1909  0F24                     	;# 
  1910  0F25                     	;# 
  1911  0F26                     	;# 
  1912  0F27                     	;# 
  1913  0F28                     	;# 
  1914  0F29                     	;# 
  1915  0F2A                     	;# 
  1916  0F2B                     	;# 
  1917  0F2C                     	;# 
  1918  0F2D                     	;# 
  1919  0F2E                     	;# 
  1920  0F2F                     	;# 
  1921  0F30                     	;# 
  1922  0F31                     	;# 
  1923  0F32                     	;# 
  1924  0F33                     	;# 
  1925  0F34                     	;# 
  1926  0F35                     	;# 
  1927  0F36                     	;# 
  1928  0F37                     	;# 
  1929  0FE4                     	;# 
  1930  0FE5                     	;# 
  1931  0FE6                     	;# 
  1932  0FE7                     	;# 
  1933  0FE8                     	;# 
  1934  0FE9                     	;# 
  1935  0FEA                     	;# 
  1936  0FEB                     	;# 
  1937  0FED                     	;# 
  1938  0FEE                     	;# 
  1939  0FEF                     	;# 
  1940  0000                     	;# 
  1941  0001                     	;# 
  1942  0002                     	;# 
  1943  0003                     	;# 
  1944  0004                     	;# 
  1945  0005                     	;# 
  1946  0006                     	;# 
  1947  0007                     	;# 
  1948  0008                     	;# 
  1949  0009                     	;# 
  1950  000A                     	;# 
  1951  000B                     	;# 
  1952  000C                     	;# 
  1953  000D                     	;# 
  1954  000E                     	;# 
  1955  0010                     	;# 
  1956  0011                     	;# 
  1957  0012                     	;# 
  1958  0013                     	;# 
  1959  0014                     	;# 
  1960  0015                     	;# 
  1961  0016                     	;# 
  1962  0016                     	;# 
  1963  0017                     	;# 
  1964  0018                     	;# 
  1965  0019                     	;# 
  1966  001A                     	;# 
  1967  001A                     	;# 
  1968  001B                     	;# 
  1969  001B                     	;# 
  1970  001C                     	;# 
  1971  001D                     	;# 
  1972  001E                     	;# 
  1973  001F                     	;# 
  1974  008C                     	;# 
  1975  008D                     	;# 
  1976  008E                     	;# 
  1977  0090                     	;# 
  1978  0091                     	;# 
  1979  0092                     	;# 
  1980  0093                     	;# 
  1981  0094                     	;# 
  1982  0095                     	;# 
  1983  0096                     	;# 
  1984  0098                     	;# 
  1985  0099                     	;# 
  1986  009A                     	;# 
  1987  009B                     	;# 
  1988  009B                     	;# 
  1989  009C                     	;# 
  1990  009D                     	;# 
  1991  009E                     	;# 
  1992  009F                     	;# 
  1993  010C                     	;# 
  1994  010D                     	;# 
  1995  010E                     	;# 
  1996  0111                     	;# 
  1997  0112                     	;# 
  1998  0113                     	;# 
  1999  0114                     	;# 
  2000  0115                     	;# 
  2001  0116                     	;# 
  2002  0117                     	;# 
  2003  0118                     	;# 
  2004  0119                     	;# 
  2005  011C                     	;# 
  2006  018C                     	;# 
  2007  018D                     	;# 
  2008  018E                     	;# 
  2009  0191                     	;# 
  2010  0191                     	;# 
  2011  0192                     	;# 
  2012  0193                     	;# 
  2013  0193                     	;# 
  2014  0194                     	;# 
  2015  0195                     	;# 
  2016  0196                     	;# 
  2017  0197                     	;# 
  2018  0199                     	;# 
  2019  0199                     	;# 
  2020  0199                     	;# 
  2021  019A                     	;# 
  2022  019A                     	;# 
  2023  019A                     	;# 
  2024  019B                     	;# 
  2025  019B                     	;# 
  2026  019B                     	;# 
  2027  019B                     	;# 
  2028  019B                     	;# 
  2029  019C                     	;# 
  2030  019C                     	;# 
  2031  019C                     	;# 
  2032  019D                     	;# 
  2033  019D                     	;# 
  2034  019D                     	;# 
  2035  019E                     	;# 
  2036  019E                     	;# 
  2037  019E                     	;# 
  2038  019F                     	;# 
  2039  019F                     	;# 
  2040  019F                     	;# 
  2041  019F                     	;# 
  2042  019F                     	;# 
  2043  020C                     	;# 
  2044  020D                     	;# 
  2045  020E                     	;# 
  2046  0211                     	;# 
  2047  0211                     	;# 
  2048  0212                     	;# 
  2049  0212                     	;# 
  2050  0213                     	;# 
  2051  0213                     	;# 
  2052  0214                     	;# 
  2053  0214                     	;# 
  2054  0215                     	;# 
  2055  0215                     	;# 
  2056  0215                     	;# 
  2057  0215                     	;# 
  2058  0216                     	;# 
  2059  0216                     	;# 
  2060  0217                     	;# 
  2061  0217                     	;# 
  2062  028C                     	;# 
  2063  028D                     	;# 
  2064  028E                     	;# 
  2065  0291                     	;# 
  2066  0291                     	;# 
  2067  0292                     	;# 
  2068  0293                     	;# 
  2069  0294                     	;# 
  2070  0298                     	;# 
  2071  0298                     	;# 
  2072  0299                     	;# 
  2073  029A                     	;# 
  2074  029B                     	;# 
  2075  029E                     	;# 
  2076  030C                     	;# 
  2077  030D                     	;# 
  2078  030E                     	;# 
  2079  038C                     	;# 
  2080  038D                     	;# 
  2081  038E                     	;# 
  2082  0391                     	;# 
  2083  0392                     	;# 
  2084  0393                     	;# 
  2085  0394                     	;# 
  2086  0395                     	;# 
  2087  0396                     	;# 
  2088  0397                     	;# 
  2089  0398                     	;# 
  2090  0399                     	;# 
  2091  040E                     	;# 
  2092  0413                     	;# 
  2093  0413                     	;# 
  2094  0414                     	;# 
  2095  0414                     	;# 
  2096  0415                     	;# 
  2097  0416                     	;# 
  2098  0417                     	;# 
  2099  0418                     	;# 
  2100  041A                     	;# 
  2101  041A                     	;# 
  2102  041B                     	;# 
  2103  041B                     	;# 
  2104  041C                     	;# 
  2105  041D                     	;# 
  2106  041E                     	;# 
  2107  041F                     	;# 
  2108  0493                     	;# 
  2109  0494                     	;# 
  2110  0495                     	;# 
  2111  0496                     	;# 
  2112  049A                     	;# 
  2113  049B                     	;# 
  2114  049C                     	;# 
  2115  049D                     	;# 
  2116  058C                     	;# 
  2117  058C                     	;# 
  2118  058D                     	;# 
  2119  058E                     	;# 
  2120  058E                     	;# 
  2121  058F                     	;# 
  2122  0590                     	;# 
  2123  0590                     	;# 
  2124  0591                     	;# 
  2125  0592                     	;# 
  2126  0592                     	;# 
  2127  0593                     	;# 
  2128  0594                     	;# 
  2129  0594                     	;# 
  2130  0595                     	;# 
  2131  0596                     	;# 
  2132  0596                     	;# 
  2133  0597                     	;# 
  2134  0598                     	;# 
  2135  0599                     	;# 
  2136  059A                     	;# 
  2137  059B                     	;# 
  2138  059B                     	;# 
  2139  059C                     	;# 
  2140  059D                     	;# 
  2141  060C                     	;# 
  2142  060C                     	;# 
  2143  060D                     	;# 
  2144  060E                     	;# 
  2145  060F                     	;# 
  2146  060F                     	;# 
  2147  0610                     	;# 
  2148  0611                     	;# 
  2149  0612                     	;# 
  2150  0613                     	;# 
  2151  0614                     	;# 
  2152  0617                     	;# 
  2153  0618                     	;# 
  2154  0619                     	;# 
  2155  061A                     	;# 
  2156  061B                     	;# 
  2157  061C                     	;# 
  2158  0691                     	;# 
  2159  0692                     	;# 
  2160  0693                     	;# 
  2161  0694                     	;# 
  2162  0695                     	;# 
  2163  0696                     	;# 
  2164  0697                     	;# 
  2165  0699                     	;# 
  2166  069A                     	;# 
  2167  0711                     	;# 
  2168  0712                     	;# 
  2169  0713                     	;# 
  2170  0714                     	;# 
  2171  0715                     	;# 
  2172  0718                     	;# 
  2173  0718                     	;# 
  2174  0719                     	;# 
  2175  071A                     	;# 
  2176  071A                     	;# 
  2177  071B                     	;# 
  2178  071C                     	;# 
  2179  071D                     	;# 
  2180  0791                     	;# 
  2181  0791                     	;# 
  2182  0792                     	;# 
  2183  0793                     	;# 
  2184  0793                     	;# 
  2185  0794                     	;# 
  2186  0795                     	;# 
  2187  0795                     	;# 
  2188  0796                     	;# 
  2189  0797                     	;# 
  2190  0797                     	;# 
  2191  0798                     	;# 
  2192  0799                     	;# 
  2193  079A                     	;# 
  2194  080C                     	;# 
  2195  080C                     	;# 
  2196  080D                     	;# 
  2197  080E                     	;# 
  2198  080E                     	;# 
  2199  080F                     	;# 
  2200  0810                     	;# 
  2201  0810                     	;# 
  2202  0811                     	;# 
  2203  0812                     	;# 
  2204  0812                     	;# 
  2205  0813                     	;# 
  2206  0814                     	;# 
  2207  0815                     	;# 
  2208  0816                     	;# 
  2209  0817                     	;# 
  2210  0818                     	;# 
  2211  0819                     	;# 
  2212  081A                     	;# 
  2213  081A                     	;# 
  2214  081B                     	;# 
  2215  081C                     	;# 
  2216  081C                     	;# 
  2217  081D                     	;# 
  2218  088C                     	;# 
  2219  088D                     	;# 
  2220  088E                     	;# 
  2221  088F                     	;# 
  2222  088F                     	;# 
  2223  0890                     	;# 
  2224  0891                     	;# 
  2225  0892                     	;# 
  2226  0893                     	;# 
  2227  0893                     	;# 
  2228  0894                     	;# 
  2229  0895                     	;# 
  2230  0896                     	;# 
  2231  0897                     	;# 
  2232  0897                     	;# 
  2233  0898                     	;# 
  2234  0899                     	;# 
  2235  0D8C                     	;# 
  2236  0D8C                     	;# 
  2237  0D8D                     	;# 
  2238  0D8E                     	;# 
  2239  0D8F                     	;# 
  2240  0D8F                     	;# 
  2241  0D90                     	;# 
  2242  0D91                     	;# 
  2243  0D92                     	;# 
  2244  0D92                     	;# 
  2245  0D93                     	;# 
  2246  0D94                     	;# 
  2247  0D95                     	;# 
  2248  0D95                     	;# 
  2249  0D96                     	;# 
  2250  0D97                     	;# 
  2251  0D98                     	;# 
  2252  0D99                     	;# 
  2253  0D9A                     	;# 
  2254  0D9B                     	;# 
  2255  0D9C                     	;# 
  2256  0D9D                     	;# 
  2257  0D9E                     	;# 
  2258  0D9E                     	;# 
  2259  0D9F                     	;# 
  2260  0DA0                     	;# 
  2261  0DA1                     	;# 
  2262  0DA1                     	;# 
  2263  0DA2                     	;# 
  2264  0DA3                     	;# 
  2265  0DA4                     	;# 
  2266  0DA4                     	;# 
  2267  0DA5                     	;# 
  2268  0DA6                     	;# 
  2269  0DA7                     	;# 
  2270  0DA7                     	;# 
  2271  0DA8                     	;# 
  2272  0DA9                     	;# 
  2273  0DAA                     	;# 
  2274  0DAB                     	;# 
  2275  0DAC                     	;# 
  2276  0DAD                     	;# 
  2277  0DAE                     	;# 
  2278  0DAF                     	;# 
  2279  0E0F                     	;# 
  2280  0E10                     	;# 
  2281  0E11                     	;# 
  2282  0E12                     	;# 
  2283  0E13                     	;# 
  2284  0E14                     	;# 
  2285  0E15                     	;# 
  2286  0E16                     	;# 
  2287  0E17                     	;# 
  2288  0E18                     	;# 
  2289  0E19                     	;# 
  2290  0E1A                     	;# 
  2291  0E1B                     	;# 
  2292  0E1C                     	;# 
  2293  0E1D                     	;# 
  2294  0E1E                     	;# 
  2295  0E1F                     	;# 
  2296  0E20                     	;# 
  2297  0E21                     	;# 
  2298  0E22                     	;# 
  2299  0E23                     	;# 
  2300  0E24                     	;# 
  2301  0E25                     	;# 
  2302  0E26                     	;# 
  2303  0E27                     	;# 
  2304  0E28                     	;# 
  2305  0E29                     	;# 
  2306  0E2A                     	;# 
  2307  0E2B                     	;# 
  2308  0E2C                     	;# 
  2309  0E2D                     	;# 
  2310  0E2E                     	;# 
  2311  0E90                     	;# 
  2312  0E91                     	;# 
  2313  0E92                     	;# 
  2314  0E94                     	;# 
  2315  0E95                     	;# 
  2316  0E9C                     	;# 
  2317  0E9D                     	;# 
  2318  0E9E                     	;# 
  2319  0E9F                     	;# 
  2320  0EA0                     	;# 
  2321  0EA1                     	;# 
  2322  0EA2                     	;# 
  2323  0EA3                     	;# 
  2324  0EA4                     	;# 
  2325  0EA5                     	;# 
  2326  0EA6                     	;# 
  2327  0EA7                     	;# 
  2328  0F0F                     	;# 
  2329  0F10                     	;# 
  2330  0F11                     	;# 
  2331  0F12                     	;# 
  2332  0F13                     	;# 
  2333  0F14                     	;# 
  2334  0F15                     	;# 
  2335  0F16                     	;# 
  2336  0F17                     	;# 
  2337  0F18                     	;# 
  2338  0F19                     	;# 
  2339  0F1A                     	;# 
  2340  0F1B                     	;# 
  2341  0F1C                     	;# 
  2342  0F1D                     	;# 
  2343  0F1E                     	;# 
  2344  0F1F                     	;# 
  2345  0F20                     	;# 
  2346  0F21                     	;# 
  2347  0F22                     	;# 
  2348  0F23                     	;# 
  2349  0F24                     	;# 
  2350  0F25                     	;# 
  2351  0F26                     	;# 
  2352  0F27                     	;# 
  2353  0F28                     	;# 
  2354  0F29                     	;# 
  2355  0F2A                     	;# 
  2356  0F2B                     	;# 
  2357  0F2C                     	;# 
  2358  0F2D                     	;# 
  2359  0F2E                     	;# 
  2360  0F2F                     	;# 
  2361  0F30                     	;# 
  2362  0F31                     	;# 
  2363  0F32                     	;# 
  2364  0F33                     	;# 
  2365  0F34                     	;# 
  2366  0F35                     	;# 
  2367  0F36                     	;# 
  2368  0F37                     	;# 
  2369  0FE4                     	;# 
  2370  0FE5                     	;# 
  2371  0FE6                     	;# 
  2372  0FE7                     	;# 
  2373  0FE8                     	;# 
  2374  0FE9                     	;# 
  2375  0FEA                     	;# 
  2376  0FEB                     	;# 
  2377  0FED                     	;# 
  2378  0FEE                     	;# 
  2379  0FEF                     	;# 
  2380  0000                     	;# 
  2381  0001                     	;# 
  2382  0002                     	;# 
  2383  0003                     	;# 
  2384  0004                     	;# 
  2385  0005                     	;# 
  2386  0006                     	;# 
  2387  0007                     	;# 
  2388  0008                     	;# 
  2389  0009                     	;# 
  2390  000A                     	;# 
  2391  000B                     	;# 
  2392  000C                     	;# 
  2393  000D                     	;# 
  2394  000E                     	;# 
  2395  0010                     	;# 
  2396  0011                     	;# 
  2397  0012                     	;# 
  2398  0013                     	;# 
  2399  0014                     	;# 
  2400  0015                     	;# 
  2401  0016                     	;# 
  2402  0016                     	;# 
  2403  0017                     	;# 
  2404  0018                     	;# 
  2405  0019                     	;# 
  2406  001A                     	;# 
  2407  001A                     	;# 
  2408  001B                     	;# 
  2409  001B                     	;# 
  2410  001C                     	;# 
  2411  001D                     	;# 
  2412  001E                     	;# 
  2413  001F                     	;# 
  2414  008C                     	;# 
  2415  008D                     	;# 
  2416  008E                     	;# 
  2417  0090                     	;# 
  2418  0091                     	;# 
  2419  0092                     	;# 
  2420  0093                     	;# 
  2421  0094                     	;# 
  2422  0095                     	;# 
  2423  0096                     	;# 
  2424  0098                     	;# 
  2425  0099                     	;# 
  2426  009A                     	;# 
  2427  009B                     	;# 
  2428  009B                     	;# 
  2429  009C                     	;# 
  2430  009D                     	;# 
  2431  009E                     	;# 
  2432  009F                     	;# 
  2433  010C                     	;# 
  2434  010D                     	;# 
  2435  010E                     	;# 
  2436  0111                     	;# 
  2437  0112                     	;# 
  2438  0113                     	;# 
  2439  0114                     	;# 
  2440  0115                     	;# 
  2441  0116                     	;# 
  2442  0117                     	;# 
  2443  0118                     	;# 
  2444  0119                     	;# 
  2445  011C                     	;# 
  2446  018C                     	;# 
  2447  018D                     	;# 
  2448  018E                     	;# 
  2449  0191                     	;# 
  2450  0191                     	;# 
  2451  0192                     	;# 
  2452  0193                     	;# 
  2453  0193                     	;# 
  2454  0194                     	;# 
  2455  0195                     	;# 
  2456  0196                     	;# 
  2457  0197                     	;# 
  2458  0199                     	;# 
  2459  0199                     	;# 
  2460  0199                     	;# 
  2461  019A                     	;# 
  2462  019A                     	;# 
  2463  019A                     	;# 
  2464  019B                     	;# 
  2465  019B                     	;# 
  2466  019B                     	;# 
  2467  019B                     	;# 
  2468  019B                     	;# 
  2469  019C                     	;# 
  2470  019C                     	;# 
  2471  019C                     	;# 
  2472  019D                     	;# 
  2473  019D                     	;# 
  2474  019D                     	;# 
  2475  019E                     	;# 
  2476  019E                     	;# 
  2477  019E                     	;# 
  2478  019F                     	;# 
  2479  019F                     	;# 
  2480  019F                     	;# 
  2481  019F                     	;# 
  2482  019F                     	;# 
  2483  020C                     	;# 
  2484  020D                     	;# 
  2485  020E                     	;# 
  2486  0211                     	;# 
  2487  0211                     	;# 
  2488  0212                     	;# 
  2489  0212                     	;# 
  2490  0213                     	;# 
  2491  0213                     	;# 
  2492  0214                     	;# 
  2493  0214                     	;# 
  2494  0215                     	;# 
  2495  0215                     	;# 
  2496  0215                     	;# 
  2497  0215                     	;# 
  2498  0216                     	;# 
  2499  0216                     	;# 
  2500  0217                     	;# 
  2501  0217                     	;# 
  2502  028C                     	;# 
  2503  028D                     	;# 
  2504  028E                     	;# 
  2505  0291                     	;# 
  2506  0291                     	;# 
  2507  0292                     	;# 
  2508  0293                     	;# 
  2509  0294                     	;# 
  2510  0298                     	;# 
  2511  0298                     	;# 
  2512  0299                     	;# 
  2513  029A                     	;# 
  2514  029B                     	;# 
  2515  029E                     	;# 
  2516  030C                     	;# 
  2517  030D                     	;# 
  2518  030E                     	;# 
  2519  038C                     	;# 
  2520  038D                     	;# 
  2521  038E                     	;# 
  2522  0391                     	;# 
  2523  0392                     	;# 
  2524  0393                     	;# 
  2525  0394                     	;# 
  2526  0395                     	;# 
  2527  0396                     	;# 
  2528  0397                     	;# 
  2529  0398                     	;# 
  2530  0399                     	;# 
  2531  040E                     	;# 
  2532  0413                     	;# 
  2533  0413                     	;# 
  2534  0414                     	;# 
  2535  0414                     	;# 
  2536  0415                     	;# 
  2537  0416                     	;# 
  2538  0417                     	;# 
  2539  0418                     	;# 
  2540  041A                     	;# 
  2541  041A                     	;# 
  2542  041B                     	;# 
  2543  041B                     	;# 
  2544  041C                     	;# 
  2545  041D                     	;# 
  2546  041E                     	;# 
  2547  041F                     	;# 
  2548  0493                     	;# 
  2549  0494                     	;# 
  2550  0495                     	;# 
  2551  0496                     	;# 
  2552  049A                     	;# 
  2553  049B                     	;# 
  2554  049C                     	;# 
  2555  049D                     	;# 
  2556  058C                     	;# 
  2557  058C                     	;# 
  2558  058D                     	;# 
  2559  058E                     	;# 
  2560  058E                     	;# 
  2561  058F                     	;# 
  2562  0590                     	;# 
  2563  0590                     	;# 
  2564  0591                     	;# 
  2565  0592                     	;# 
  2566  0592                     	;# 
  2567  0593                     	;# 
  2568  0594                     	;# 
  2569  0594                     	;# 
  2570  0595                     	;# 
  2571  0596                     	;# 
  2572  0596                     	;# 
  2573  0597                     	;# 
  2574  0598                     	;# 
  2575  0599                     	;# 
  2576  059A                     	;# 
  2577  059B                     	;# 
  2578  059B                     	;# 
  2579  059C                     	;# 
  2580  059D                     	;# 
  2581  060C                     	;# 
  2582  060C                     	;# 
  2583  060D                     	;# 
  2584  060E                     	;# 
  2585  060F                     	;# 
  2586  060F                     	;# 
  2587  0610                     	;# 
  2588  0611                     	;# 
  2589  0612                     	;# 
  2590  0613                     	;# 
  2591  0614                     	;# 
  2592  0617                     	;# 
  2593  0618                     	;# 
  2594  0619                     	;# 
  2595  061A                     	;# 
  2596  061B                     	;# 
  2597  061C                     	;# 
  2598  0691                     	;# 
  2599  0692                     	;# 
  2600  0693                     	;# 
  2601  0694                     	;# 
  2602  0695                     	;# 
  2603  0696                     	;# 
  2604  0697                     	;# 
  2605  0699                     	;# 
  2606  069A                     	;# 
  2607  0711                     	;# 
  2608  0712                     	;# 
  2609  0713                     	;# 
  2610  0714                     	;# 
  2611  0715                     	;# 
  2612  0718                     	;# 
  2613  0718                     	;# 
  2614  0719                     	;# 
  2615  071A                     	;# 
  2616  071A                     	;# 
  2617  071B                     	;# 
  2618  071C                     	;# 
  2619  071D                     	;# 
  2620  0791                     	;# 
  2621  0791                     	;# 
  2622  0792                     	;# 
  2623  0793                     	;# 
  2624  0793                     	;# 
  2625  0794                     	;# 
  2626  0795                     	;# 
  2627  0795                     	;# 
  2628  0796                     	;# 
  2629  0797                     	;# 
  2630  0797                     	;# 
  2631  0798                     	;# 
  2632  0799                     	;# 
  2633  079A                     	;# 
  2634  080C                     	;# 
  2635  080C                     	;# 
  2636  080D                     	;# 
  2637  080E                     	;# 
  2638  080E                     	;# 
  2639  080F                     	;# 
  2640  0810                     	;# 
  2641  0810                     	;# 
  2642  0811                     	;# 
  2643  0812                     	;# 
  2644  0812                     	;# 
  2645  0813                     	;# 
  2646  0814                     	;# 
  2647  0815                     	;# 
  2648  0816                     	;# 
  2649  0817                     	;# 
  2650  0818                     	;# 
  2651  0819                     	;# 
  2652  081A                     	;# 
  2653  081A                     	;# 
  2654  081B                     	;# 
  2655  081C                     	;# 
  2656  081C                     	;# 
  2657  081D                     	;# 
  2658  088C                     	;# 
  2659  088D                     	;# 
  2660  088E                     	;# 
  2661  088F                     	;# 
  2662  088F                     	;# 
  2663  0890                     	;# 
  2664  0891                     	;# 
  2665  0892                     	;# 
  2666  0893                     	;# 
  2667  0893                     	;# 
  2668  0894                     	;# 
  2669  0895                     	;# 
  2670  0896                     	;# 
  2671  0897                     	;# 
  2672  0897                     	;# 
  2673  0898                     	;# 
  2674  0899                     	;# 
  2675  0D8C                     	;# 
  2676  0D8C                     	;# 
  2677  0D8D                     	;# 
  2678  0D8E                     	;# 
  2679  0D8F                     	;# 
  2680  0D8F                     	;# 
  2681  0D90                     	;# 
  2682  0D91                     	;# 
  2683  0D92                     	;# 
  2684  0D92                     	;# 
  2685  0D93                     	;# 
  2686  0D94                     	;# 
  2687  0D95                     	;# 
  2688  0D95                     	;# 
  2689  0D96                     	;# 
  2690  0D97                     	;# 
  2691  0D98                     	;# 
  2692  0D99                     	;# 
  2693  0D9A                     	;# 
  2694  0D9B                     	;# 
  2695  0D9C                     	;# 
  2696  0D9D                     	;# 
  2697  0D9E                     	;# 
  2698  0D9E                     	;# 
  2699  0D9F                     	;# 
  2700  0DA0                     	;# 
  2701  0DA1                     	;# 
  2702  0DA1                     	;# 
  2703  0DA2                     	;# 
  2704  0DA3                     	;# 
  2705  0DA4                     	;# 
  2706  0DA4                     	;# 
  2707  0DA5                     	;# 
  2708  0DA6                     	;# 
  2709  0DA7                     	;# 
  2710  0DA7                     	;# 
  2711  0DA8                     	;# 
  2712  0DA9                     	;# 
  2713  0DAA                     	;# 
  2714  0DAB                     	;# 
  2715  0DAC                     	;# 
  2716  0DAD                     	;# 
  2717  0DAE                     	;# 
  2718  0DAF                     	;# 
  2719  0E0F                     	;# 
  2720  0E10                     	;# 
  2721  0E11                     	;# 
  2722  0E12                     	;# 
  2723  0E13                     	;# 
  2724  0E14                     	;# 
  2725  0E15                     	;# 
  2726  0E16                     	;# 
  2727  0E17                     	;# 
  2728  0E18                     	;# 
  2729  0E19                     	;# 
  2730  0E1A                     	;# 
  2731  0E1B                     	;# 
  2732  0E1C                     	;# 
  2733  0E1D                     	;# 
  2734  0E1E                     	;# 
  2735  0E1F                     	;# 
  2736  0E20                     	;# 
  2737  0E21                     	;# 
  2738  0E22                     	;# 
  2739  0E23                     	;# 
  2740  0E24                     	;# 
  2741  0E25                     	;# 
  2742  0E26                     	;# 
  2743  0E27                     	;# 
  2744  0E28                     	;# 
  2745  0E29                     	;# 
  2746  0E2A                     	;# 
  2747  0E2B                     	;# 
  2748  0E2C                     	;# 
  2749  0E2D                     	;# 
  2750  0E2E                     	;# 
  2751  0E90                     	;# 
  2752  0E91                     	;# 
  2753  0E92                     	;# 
  2754  0E94                     	;# 
  2755  0E95                     	;# 
  2756  0E9C                     	;# 
  2757  0E9D                     	;# 
  2758  0E9E                     	;# 
  2759  0E9F                     	;# 
  2760  0EA0                     	;# 
  2761  0EA1                     	;# 
  2762  0EA2                     	;# 
  2763  0EA3                     	;# 
  2764  0EA4                     	;# 
  2765  0EA5                     	;# 
  2766  0EA6                     	;# 
  2767  0EA7                     	;# 
  2768  0F0F                     	;# 
  2769  0F10                     	;# 
  2770  0F11                     	;# 
  2771  0F12                     	;# 
  2772  0F13                     	;# 
  2773  0F14                     	;# 
  2774  0F15                     	;# 
  2775  0F16                     	;# 
  2776  0F17                     	;# 
  2777  0F18                     	;# 
  2778  0F19                     	;# 
  2779  0F1A                     	;# 
  2780  0F1B                     	;# 
  2781  0F1C                     	;# 
  2782  0F1D                     	;# 
  2783  0F1E                     	;# 
  2784  0F1F                     	;# 
  2785  0F20                     	;# 
  2786  0F21                     	;# 
  2787  0F22                     	;# 
  2788  0F23                     	;# 
  2789  0F24                     	;# 
  2790  0F25                     	;# 
  2791  0F26                     	;# 
  2792  0F27                     	;# 
  2793  0F28                     	;# 
  2794  0F29                     	;# 
  2795  0F2A                     	;# 
  2796  0F2B                     	;# 
  2797  0F2C                     	;# 
  2798  0F2D                     	;# 
  2799  0F2E                     	;# 
  2800  0F2F                     	;# 
  2801  0F30                     	;# 
  2802  0F31                     	;# 
  2803  0F32                     	;# 
  2804  0F33                     	;# 
  2805  0F34                     	;# 
  2806  0F35                     	;# 
  2807  0F36                     	;# 
  2808  0F37                     	;# 
  2809  0FE4                     	;# 
  2810  0FE5                     	;# 
  2811  0FE6                     	;# 
  2812  0FE7                     	;# 
  2813  0FE8                     	;# 
  2814  0FE9                     	;# 
  2815  0FEA                     	;# 
  2816  0FEB                     	;# 
  2817  0FED                     	;# 
  2818  0FEE                     	;# 
  2819  0FEF                     	;# 
  2820  0000                     	;# 
  2821  0001                     	;# 
  2822  0002                     	;# 
  2823  0003                     	;# 
  2824  0004                     	;# 
  2825  0005                     	;# 
  2826  0006                     	;# 
  2827  0007                     	;# 
  2828  0008                     	;# 
  2829  0009                     	;# 
  2830  000A                     	;# 
  2831  000B                     	;# 
  2832  000C                     	;# 
  2833  000D                     	;# 
  2834  000E                     	;# 
  2835  0010                     	;# 
  2836  0011                     	;# 
  2837  0012                     	;# 
  2838  0013                     	;# 
  2839  0014                     	;# 
  2840  0015                     	;# 
  2841  0016                     	;# 
  2842  0016                     	;# 
  2843  0017                     	;# 
  2844  0018                     	;# 
  2845  0019                     	;# 
  2846  001A                     	;# 
  2847  001A                     	;# 
  2848  001B                     	;# 
  2849  001B                     	;# 
  2850  001C                     	;# 
  2851  001D                     	;# 
  2852  001E                     	;# 
  2853  001F                     	;# 
  2854  008C                     	;# 
  2855  008D                     	;# 
  2856  008E                     	;# 
  2857  0090                     	;# 
  2858  0091                     	;# 
  2859  0092                     	;# 
  2860  0093                     	;# 
  2861  0094                     	;# 
  2862  0095                     	;# 
  2863  0096                     	;# 
  2864  0098                     	;# 
  2865  0099                     	;# 
  2866  009A                     	;# 
  2867  009B                     	;# 
  2868  009B                     	;# 
  2869  009C                     	;# 
  2870  009D                     	;# 
  2871  009E                     	;# 
  2872  009F                     	;# 
  2873  010C                     	;# 
  2874  010D                     	;# 
  2875  010E                     	;# 
  2876  0111                     	;# 
  2877  0112                     	;# 
  2878  0113                     	;# 
  2879  0114                     	;# 
  2880  0115                     	;# 
  2881  0116                     	;# 
  2882  0117                     	;# 
  2883  0118                     	;# 
  2884  0119                     	;# 
  2885  011C                     	;# 
  2886  018C                     	;# 
  2887  018D                     	;# 
  2888  018E                     	;# 
  2889  0191                     	;# 
  2890  0191                     	;# 
  2891  0192                     	;# 
  2892  0193                     	;# 
  2893  0193                     	;# 
  2894  0194                     	;# 
  2895  0195                     	;# 
  2896  0196                     	;# 
  2897  0197                     	;# 
  2898  0199                     	;# 
  2899  0199                     	;# 
  2900  0199                     	;# 
  2901  019A                     	;# 
  2902  019A                     	;# 
  2903  019A                     	;# 
  2904  019B                     	;# 
  2905  019B                     	;# 
  2906  019B                     	;# 
  2907  019B                     	;# 
  2908  019B                     	;# 
  2909  019C                     	;# 
  2910  019C                     	;# 
  2911  019C                     	;# 
  2912  019D                     	;# 
  2913  019D                     	;# 
  2914  019D                     	;# 
  2915  019E                     	;# 
  2916  019E                     	;# 
  2917  019E                     	;# 
  2918  019F                     	;# 
  2919  019F                     	;# 
  2920  019F                     	;# 
  2921  019F                     	;# 
  2922  019F                     	;# 
  2923  020C                     	;# 
  2924  020D                     	;# 
  2925  020E                     	;# 
  2926  0211                     	;# 
  2927  0211                     	;# 
  2928  0212                     	;# 
  2929  0212                     	;# 
  2930  0213                     	;# 
  2931  0213                     	;# 
  2932  0214                     	;# 
  2933  0214                     	;# 
  2934  0215                     	;# 
  2935  0215                     	;# 
  2936  0215                     	;# 
  2937  0215                     	;# 
  2938  0216                     	;# 
  2939  0216                     	;# 
  2940  0217                     	;# 
  2941  0217                     	;# 
  2942  028C                     	;# 
  2943  028D                     	;# 
  2944  028E                     	;# 
  2945  0291                     	;# 
  2946  0291                     	;# 
  2947  0292                     	;# 
  2948  0293                     	;# 
  2949  0294                     	;# 
  2950  0298                     	;# 
  2951  0298                     	;# 
  2952  0299                     	;# 
  2953  029A                     	;# 
  2954  029B                     	;# 
  2955  029E                     	;# 
  2956  030C                     	;# 
  2957  030D                     	;# 
  2958  030E                     	;# 
  2959  038C                     	;# 
  2960  038D                     	;# 
  2961  038E                     	;# 
  2962  0391                     	;# 
  2963  0392                     	;# 
  2964  0393                     	;# 
  2965  0394                     	;# 
  2966  0395                     	;# 
  2967  0396                     	;# 
  2968  0397                     	;# 
  2969  0398                     	;# 
  2970  0399                     	;# 
  2971  040E                     	;# 
  2972  0413                     	;# 
  2973  0413                     	;# 
  2974  0414                     	;# 
  2975  0414                     	;# 
  2976  0415                     	;# 
  2977  0416                     	;# 
  2978  0417                     	;# 
  2979  0418                     	;# 
  2980  041A                     	;# 
  2981  041A                     	;# 
  2982  041B                     	;# 
  2983  041B                     	;# 
  2984  041C                     	;# 
  2985  041D                     	;# 
  2986  041E                     	;# 
  2987  041F                     	;# 
  2988  0493                     	;# 
  2989  0494                     	;# 
  2990  0495                     	;# 
  2991  0496                     	;# 
  2992  049A                     	;# 
  2993  049B                     	;# 
  2994  049C                     	;# 
  2995  049D                     	;# 
  2996  058C                     	;# 
  2997  058C                     	;# 
  2998  058D                     	;# 
  2999  058E                     	;# 
  3000  058E                     	;# 
  3001  058F                     	;# 
  3002  0590                     	;# 
  3003  0590                     	;# 
  3004  0591                     	;# 
  3005  0592                     	;# 
  3006  0592                     	;# 
  3007  0593                     	;# 
  3008  0594                     	;# 
  3009  0594                     	;# 
  3010  0595                     	;# 
  3011  0596                     	;# 
  3012  0596                     	;# 
  3013  0597                     	;# 
  3014  0598                     	;# 
  3015  0599                     	;# 
  3016  059A                     	;# 
  3017  059B                     	;# 
  3018  059B                     	;# 
  3019  059C                     	;# 
  3020  059D                     	;# 
  3021  060C                     	;# 
  3022  060C                     	;# 
  3023  060D                     	;# 
  3024  060E                     	;# 
  3025  060F                     	;# 
  3026  060F                     	;# 
  3027  0610                     	;# 
  3028  0611                     	;# 
  3029  0612                     	;# 
  3030  0613                     	;# 
  3031  0614                     	;# 
  3032  0617                     	;# 
  3033  0618                     	;# 
  3034  0619                     	;# 
  3035  061A                     	;# 
  3036  061B                     	;# 
  3037  061C                     	;# 
  3038  0691                     	;# 
  3039  0692                     	;# 
  3040  0693                     	;# 
  3041  0694                     	;# 
  3042  0695                     	;# 
  3043  0696                     	;# 
  3044  0697                     	;# 
  3045  0699                     	;# 
  3046  069A                     	;# 
  3047  0711                     	;# 
  3048  0712                     	;# 
  3049  0713                     	;# 
  3050  0714                     	;# 
  3051  0715                     	;# 
  3052  0718                     	;# 
  3053  0718                     	;# 
  3054  0719                     	;# 
  3055  071A                     	;# 
  3056  071A                     	;# 
  3057  071B                     	;# 
  3058  071C                     	;# 
  3059  071D                     	;# 
  3060  0791                     	;# 
  3061  0791                     	;# 
  3062  0792                     	;# 
  3063  0793                     	;# 
  3064  0793                     	;# 
  3065  0794                     	;# 
  3066  0795                     	;# 
  3067  0795                     	;# 
  3068  0796                     	;# 
  3069  0797                     	;# 
  3070  0797                     	;# 
  3071  0798                     	;# 
  3072  0799                     	;# 
  3073  079A                     	;# 
  3074  080C                     	;# 
  3075  080C                     	;# 
  3076  080D                     	;# 
  3077  080E                     	;# 
  3078  080E                     	;# 
  3079  080F                     	;# 
  3080  0810                     	;# 
  3081  0810                     	;# 
  3082  0811                     	;# 
  3083  0812                     	;# 
  3084  0812                     	;# 
  3085  0813                     	;# 
  3086  0814                     	;# 
  3087  0815                     	;# 
  3088  0816                     	;# 
  3089  0817                     	;# 
  3090  0818                     	;# 
  3091  0819                     	;# 
  3092  081A                     	;# 
  3093  081A                     	;# 
  3094  081B                     	;# 
  3095  081C                     	;# 
  3096  081C                     	;# 
  3097  081D                     	;# 
  3098  088C                     	;# 
  3099  088D                     	;# 
  3100  088E                     	;# 
  3101  088F                     	;# 
  3102  088F                     	;# 
  3103  0890                     	;# 
  3104  0891                     	;# 
  3105  0892                     	;# 
  3106  0893                     	;# 
  3107  0893                     	;# 
  3108  0894                     	;# 
  3109  0895                     	;# 
  3110  0896                     	;# 
  3111  0897                     	;# 
  3112  0897                     	;# 
  3113  0898                     	;# 
  3114  0899                     	;# 
  3115  0D8C                     	;# 
  3116  0D8C                     	;# 
  3117  0D8D                     	;# 
  3118  0D8E                     	;# 
  3119  0D8F                     	;# 
  3120  0D8F                     	;# 
  3121  0D90                     	;# 
  3122  0D91                     	;# 
  3123  0D92                     	;# 
  3124  0D92                     	;# 
  3125  0D93                     	;# 
  3126  0D94                     	;# 
  3127  0D95                     	;# 
  3128  0D95                     	;# 
  3129  0D96                     	;# 
  3130  0D97                     	;# 
  3131  0D98                     	;# 
  3132  0D99                     	;# 
  3133  0D9A                     	;# 
  3134  0D9B                     	;# 
  3135  0D9C                     	;# 
  3136  0D9D                     	;# 
  3137  0D9E                     	;# 
  3138  0D9E                     	;# 
  3139  0D9F                     	;# 
  3140  0DA0                     	;# 
  3141  0DA1                     	;# 
  3142  0DA1                     	;# 
  3143  0DA2                     	;# 
  3144  0DA3                     	;# 
  3145  0DA4                     	;# 
  3146  0DA4                     	;# 
  3147  0DA5                     	;# 
  3148  0DA6                     	;# 
  3149  0DA7                     	;# 
  3150  0DA7                     	;# 
  3151  0DA8                     	;# 
  3152  0DA9                     	;# 
  3153  0DAA                     	;# 
  3154  0DAB                     	;# 
  3155  0DAC                     	;# 
  3156  0DAD                     	;# 
  3157  0DAE                     	;# 
  3158  0DAF                     	;# 
  3159  0E0F                     	;# 
  3160  0E10                     	;# 
  3161  0E11                     	;# 
  3162  0E12                     	;# 
  3163  0E13                     	;# 
  3164  0E14                     	;# 
  3165  0E15                     	;# 
  3166  0E16                     	;# 
  3167  0E17                     	;# 
  3168  0E18                     	;# 
  3169  0E19                     	;# 
  3170  0E1A                     	;# 
  3171  0E1B                     	;# 
  3172  0E1C                     	;# 
  3173  0E1D                     	;# 
  3174  0E1E                     	;# 
  3175  0E1F                     	;# 
  3176  0E20                     	;# 
  3177  0E21                     	;# 
  3178  0E22                     	;# 
  3179  0E23                     	;# 
  3180  0E24                     	;# 
  3181  0E25                     	;# 
  3182  0E26                     	;# 
  3183  0E27                     	;# 
  3184  0E28                     	;# 
  3185  0E29                     	;# 
  3186  0E2A                     	;# 
  3187  0E2B                     	;# 
  3188  0E2C                     	;# 
  3189  0E2D                     	;# 
  3190  0E2E                     	;# 
  3191  0E90                     	;# 
  3192  0E91                     	;# 
  3193  0E92                     	;# 
  3194  0E94                     	;# 
  3195  0E95                     	;# 
  3196  0E9C                     	;# 
  3197  0E9D                     	;# 
  3198  0E9E                     	;# 
  3199  0E9F                     	;# 
  3200  0EA0                     	;# 
  3201  0EA1                     	;# 
  3202  0EA2                     	;# 
  3203  0EA3                     	;# 
  3204  0EA4                     	;# 
  3205  0EA5                     	;# 
  3206  0EA6                     	;# 
  3207  0EA7                     	;# 
  3208  0F0F                     	;# 
  3209  0F10                     	;# 
  3210  0F11                     	;# 
  3211  0F12                     	;# 
  3212  0F13                     	;# 
  3213  0F14                     	;# 
  3214  0F15                     	;# 
  3215  0F16                     	;# 
  3216  0F17                     	;# 
  3217  0F18                     	;# 
  3218  0F19                     	;# 
  3219  0F1A                     	;# 
  3220  0F1B                     	;# 
  3221  0F1C                     	;# 
  3222  0F1D                     	;# 
  3223  0F1E                     	;# 
  3224  0F1F                     	;# 
  3225  0F20                     	;# 
  3226  0F21                     	;# 
  3227  0F22                     	;# 
  3228  0F23                     	;# 
  3229  0F24                     	;# 
  3230  0F25                     	;# 
  3231  0F26                     	;# 
  3232  0F27                     	;# 
  3233  0F28                     	;# 
  3234  0F29                     	;# 
  3235  0F2A                     	;# 
  3236  0F2B                     	;# 
  3237  0F2C                     	;# 
  3238  0F2D                     	;# 
  3239  0F2E                     	;# 
  3240  0F2F                     	;# 
  3241  0F30                     	;# 
  3242  0F31                     	;# 
  3243  0F32                     	;# 
  3244  0F33                     	;# 
  3245  0F34                     	;# 
  3246  0F35                     	;# 
  3247  0F36                     	;# 
  3248  0F37                     	;# 
  3249  0FE4                     	;# 
  3250  0FE5                     	;# 
  3251  0FE6                     	;# 
  3252  0FE7                     	;# 
  3253  0FE8                     	;# 
  3254  0FE9                     	;# 
  3255  0FEA                     	;# 
  3256  0FEB                     	;# 
  3257  0FED                     	;# 
  3258  0FEE                     	;# 
  3259  0FEF                     	;# 
  3260  0000                     	;# 
  3261  0001                     	;# 
  3262  0002                     	;# 
  3263  0003                     	;# 
  3264  0004                     	;# 
  3265  0005                     	;# 
  3266  0006                     	;# 
  3267  0007                     	;# 
  3268  0008                     	;# 
  3269  0009                     	;# 
  3270  000A                     	;# 
  3271  000B                     	;# 
  3272  000C                     	;# 
  3273  000D                     	;# 
  3274  000E                     	;# 
  3275  0010                     	;# 
  3276  0011                     	;# 
  3277  0012                     	;# 
  3278  0013                     	;# 
  3279  0014                     	;# 
  3280  0015                     	;# 
  3281  0016                     	;# 
  3282  0016                     	;# 
  3283  0017                     	;# 
  3284  0018                     	;# 
  3285  0019                     	;# 
  3286  001A                     	;# 
  3287  001A                     	;# 
  3288  001B                     	;# 
  3289  001B                     	;# 
  3290  001C                     	;# 
  3291  001D                     	;# 
  3292  001E                     	;# 
  3293  001F                     	;# 
  3294  008C                     	;# 
  3295  008D                     	;# 
  3296  008E                     	;# 
  3297  0090                     	;# 
  3298  0091                     	;# 
  3299  0092                     	;# 
  3300  0093                     	;# 
  3301  0094                     	;# 
  3302  0095                     	;# 
  3303  0096                     	;# 
  3304  0098                     	;# 
  3305  0099                     	;# 
  3306  009A                     	;# 
  3307  009B                     	;# 
  3308  009B                     	;# 
  3309  009C                     	;# 
  3310  009D                     	;# 
  3311  009E                     	;# 
  3312  009F                     	;# 
  3313  010C                     	;# 
  3314  010D                     	;# 
  3315  010E                     	;# 
  3316  0111                     	;# 
  3317  0112                     	;# 
  3318  0113                     	;# 
  3319  0114                     	;# 
  3320  0115                     	;# 
  3321  0116                     	;# 
  3322  0117                     	;# 
  3323  0118                     	;# 
  3324  0119                     	;# 
  3325  011C                     	;# 
  3326  018C                     	;# 
  3327  018D                     	;# 
  3328  018E                     	;# 
  3329  0191                     	;# 
  3330  0191                     	;# 
  3331  0192                     	;# 
  3332  0193                     	;# 
  3333  0193                     	;# 
  3334  0194                     	;# 
  3335  0195                     	;# 
  3336  0196                     	;# 
  3337  0197                     	;# 
  3338  0199                     	;# 
  3339  0199                     	;# 
  3340  0199                     	;# 
  3341  019A                     	;# 
  3342  019A                     	;# 
  3343  019A                     	;# 
  3344  019B                     	;# 
  3345  019B                     	;# 
  3346  019B                     	;# 
  3347  019B                     	;# 
  3348  019B                     	;# 
  3349  019C                     	;# 
  3350  019C                     	;# 
  3351  019C                     	;# 
  3352  019D                     	;# 
  3353  019D                     	;# 
  3354  019D                     	;# 
  3355  019E                     	;# 
  3356  019E                     	;# 
  3357  019E                     	;# 
  3358  019F                     	;# 
  3359  019F                     	;# 
  3360  019F                     	;# 
  3361  019F                     	;# 
  3362  019F                     	;# 
  3363  020C                     	;# 
  3364  020D                     	;# 
  3365  020E                     	;# 
  3366  0211                     	;# 
  3367  0211                     	;# 
  3368  0212                     	;# 
  3369  0212                     	;# 
  3370  0213                     	;# 
  3371  0213                     	;# 
  3372  0214                     	;# 
  3373  0214                     	;# 
  3374  0215                     	;# 
  3375  0215                     	;# 
  3376  0215                     	;# 
  3377  0215                     	;# 
  3378  0216                     	;# 
  3379  0216                     	;# 
  3380  0217                     	;# 
  3381  0217                     	;# 
  3382  028C                     	;# 
  3383  028D                     	;# 
  3384  028E                     	;# 
  3385  0291                     	;# 
  3386  0291                     	;# 
  3387  0292                     	;# 
  3388  0293                     	;# 
  3389  0294                     	;# 
  3390  0298                     	;# 
  3391  0298                     	;# 
  3392  0299                     	;# 
  3393  029A                     	;# 
  3394  029B                     	;# 
  3395  029E                     	;# 
  3396  030C                     	;# 
  3397  030D                     	;# 
  3398  030E                     	;# 
  3399  038C                     	;# 
  3400  038D                     	;# 
  3401  038E                     	;# 
  3402  0391                     	;# 
  3403  0392                     	;# 
  3404  0393                     	;# 
  3405  0394                     	;# 
  3406  0395                     	;# 
  3407  0396                     	;# 
  3408  0397                     	;# 
  3409  0398                     	;# 
  3410  0399                     	;# 
  3411  040E                     	;# 
  3412  0413                     	;# 
  3413  0413                     	;# 
  3414  0414                     	;# 
  3415  0414                     	;# 
  3416  0415                     	;# 
  3417  0416                     	;# 
  3418  0417                     	;# 
  3419  0418                     	;# 
  3420  041A                     	;# 
  3421  041A                     	;# 
  3422  041B                     	;# 
  3423  041B                     	;# 
  3424  041C                     	;# 
  3425  041D                     	;# 
  3426  041E                     	;# 
  3427  041F                     	;# 
  3428  0493                     	;# 
  3429  0494                     	;# 
  3430  0495                     	;# 
  3431  0496                     	;# 
  3432  049A                     	;# 
  3433  049B                     	;# 
  3434  049C                     	;# 
  3435  049D                     	;# 
  3436  058C                     	;# 
  3437  058C                     	;# 
  3438  058D                     	;# 
  3439  058E                     	;# 
  3440  058E                     	;# 
  3441  058F                     	;# 
  3442  0590                     	;# 
  3443  0590                     	;# 
  3444  0591                     	;# 
  3445  0592                     	;# 
  3446  0592                     	;# 
  3447  0593                     	;# 
  3448  0594                     	;# 
  3449  0594                     	;# 
  3450  0595                     	;# 
  3451  0596                     	;# 
  3452  0596                     	;# 
  3453  0597                     	;# 
  3454  0598                     	;# 
  3455  0599                     	;# 
  3456  059A                     	;# 
  3457  059B                     	;# 
  3458  059B                     	;# 
  3459  059C                     	;# 
  3460  059D                     	;# 
  3461  060C                     	;# 
  3462  060C                     	;# 
  3463  060D                     	;# 
  3464  060E                     	;# 
  3465  060F                     	;# 
  3466  060F                     	;# 
  3467  0610                     	;# 
  3468  0611                     	;# 
  3469  0612                     	;# 
  3470  0613                     	;# 
  3471  0614                     	;# 
  3472  0617                     	;# 
  3473  0618                     	;# 
  3474  0619                     	;# 
  3475  061A                     	;# 
  3476  061B                     	;# 
  3477  061C                     	;# 
  3478  0691                     	;# 
  3479  0692                     	;# 
  3480  0693                     	;# 
  3481  0694                     	;# 
  3482  0695                     	;# 
  3483  0696                     	;# 
  3484  0697                     	;# 
  3485  0699                     	;# 
  3486  069A                     	;# 
  3487  0711                     	;# 
  3488  0712                     	;# 
  3489  0713                     	;# 
  3490  0714                     	;# 
  3491  0715                     	;# 
  3492  0718                     	;# 
  3493  0718                     	;# 
  3494  0719                     	;# 
  3495  071A                     	;# 
  3496  071A                     	;# 
  3497  071B                     	;# 
  3498  071C                     	;# 
  3499  071D                     	;# 
  3500  0791                     	;# 
  3501  0791                     	;# 
  3502  0792                     	;# 
  3503  0793                     	;# 
  3504  0793                     	;# 
  3505  0794                     	;# 
  3506  0795                     	;# 
  3507  0795                     	;# 
  3508  0796                     	;# 
  3509  0797                     	;# 
  3510  0797                     	;# 
  3511  0798                     	;# 
  3512  0799                     	;# 
  3513  079A                     	;# 
  3514  080C                     	;# 
  3515  080C                     	;# 
  3516  080D                     	;# 
  3517  080E                     	;# 
  3518  080E                     	;# 
  3519  080F                     	;# 
  3520  0810                     	;# 
  3521  0810                     	;# 
  3522  0811                     	;# 
  3523  0812                     	;# 
  3524  0812                     	;# 
  3525  0813                     	;# 
  3526  0814                     	;# 
  3527  0815                     	;# 
  3528  0816                     	;# 
  3529  0817                     	;# 
  3530  0818                     	;# 
  3531  0819                     	;# 
  3532  081A                     	;# 
  3533  081A                     	;# 
  3534  081B                     	;# 
  3535  081C                     	;# 
  3536  081C                     	;# 
  3537  081D                     	;# 
  3538  088C                     	;# 
  3539  088D                     	;# 
  3540  088E                     	;# 
  3541  088F                     	;# 
  3542  088F                     	;# 
  3543  0890                     	;# 
  3544  0891                     	;# 
  3545  0892                     	;# 
  3546  0893                     	;# 
  3547  0893                     	;# 
  3548  0894                     	;# 
  3549  0895                     	;# 
  3550  0896                     	;# 
  3551  0897                     	;# 
  3552  0897                     	;# 
  3553  0898                     	;# 
  3554  0899                     	;# 
  3555  0D8C                     	;# 
  3556  0D8C                     	;# 
  3557  0D8D                     	;# 
  3558  0D8E                     	;# 
  3559  0D8F                     	;# 
  3560  0D8F                     	;# 
  3561  0D90                     	;# 
  3562  0D91                     	;# 
  3563  0D92                     	;# 
  3564  0D92                     	;# 
  3565  0D93                     	;# 
  3566  0D94                     	;# 
  3567  0D95                     	;# 
  3568  0D95                     	;# 
  3569  0D96                     	;# 
  3570  0D97                     	;# 
  3571  0D98                     	;# 
  3572  0D99                     	;# 
  3573  0D9A                     	;# 
  3574  0D9B                     	;# 
  3575  0D9C                     	;# 
  3576  0D9D                     	;# 
  3577  0D9E                     	;# 
  3578  0D9E                     	;# 
  3579  0D9F                     	;# 
  3580  0DA0                     	;# 
  3581  0DA1                     	;# 
  3582  0DA1                     	;# 
  3583  0DA2                     	;# 
  3584  0DA3                     	;# 
  3585  0DA4                     	;# 
  3586  0DA4                     	;# 
  3587  0DA5                     	;# 
  3588  0DA6                     	;# 
  3589  0DA7                     	;# 
  3590  0DA7                     	;# 
  3591  0DA8                     	;# 
  3592  0DA9                     	;# 
  3593  0DAA                     	;# 
  3594  0DAB                     	;# 
  3595  0DAC                     	;# 
  3596  0DAD                     	;# 
  3597  0DAE                     	;# 
  3598  0DAF                     	;# 
  3599  0E0F                     	;# 
  3600  0E10                     	;# 
  3601  0E11                     	;# 
  3602  0E12                     	;# 
  3603  0E13                     	;# 
  3604  0E14                     	;# 
  3605  0E15                     	;# 
  3606  0E16                     	;# 
  3607  0E17                     	;# 
  3608  0E18                     	;# 
  3609  0E19                     	;# 
  3610  0E1A                     	;# 
  3611  0E1B                     	;# 
  3612  0E1C                     	;# 
  3613  0E1D                     	;# 
  3614  0E1E                     	;# 
  3615  0E1F                     	;# 
  3616  0E20                     	;# 
  3617  0E21                     	;# 
  3618  0E22                     	;# 
  3619  0E23                     	;# 
  3620  0E24                     	;# 
  3621  0E25                     	;# 
  3622  0E26                     	;# 
  3623  0E27                     	;# 
  3624  0E28                     	;# 
  3625  0E29                     	;# 
  3626  0E2A                     	;# 
  3627  0E2B                     	;# 
  3628  0E2C                     	;# 
  3629  0E2D                     	;# 
  3630  0E2E                     	;# 
  3631  0E90                     	;# 
  3632  0E91                     	;# 
  3633  0E92                     	;# 
  3634  0E94                     	;# 
  3635  0E95                     	;# 
  3636  0E9C                     	;# 
  3637  0E9D                     	;# 
  3638  0E9E                     	;# 
  3639  0E9F                     	;# 
  3640  0EA0                     	;# 
  3641  0EA1                     	;# 
  3642  0EA2                     	;# 
  3643  0EA3                     	;# 
  3644  0EA4                     	;# 
  3645  0EA5                     	;# 
  3646  0EA6                     	;# 
  3647  0EA7                     	;# 
  3648  0F0F                     	;# 
  3649  0F10                     	;# 
  3650  0F11                     	;# 
  3651  0F12                     	;# 
  3652  0F13                     	;# 
  3653  0F14                     	;# 
  3654  0F15                     	;# 
  3655  0F16                     	;# 
  3656  0F17                     	;# 
  3657  0F18                     	;# 
  3658  0F19                     	;# 
  3659  0F1A                     	;# 
  3660  0F1B                     	;# 
  3661  0F1C                     	;# 
  3662  0F1D                     	;# 
  3663  0F1E                     	;# 
  3664  0F1F                     	;# 
  3665  0F20                     	;# 
  3666  0F21                     	;# 
  3667  0F22                     	;# 
  3668  0F23                     	;# 
  3669  0F24                     	;# 
  3670  0F25                     	;# 
  3671  0F26                     	;# 
  3672  0F27                     	;# 
  3673  0F28                     	;# 
  3674  0F29                     	;# 
  3675  0F2A                     	;# 
  3676  0F2B                     	;# 
  3677  0F2C                     	;# 
  3678  0F2D                     	;# 
  3679  0F2E                     	;# 
  3680  0F2F                     	;# 
  3681  0F30                     	;# 
  3682  0F31                     	;# 
  3683  0F32                     	;# 
  3684  0F33                     	;# 
  3685  0F34                     	;# 
  3686  0F35                     	;# 
  3687  0F36                     	;# 
  3688  0F37                     	;# 
  3689  0FE4                     	;# 
  3690  0FE5                     	;# 
  3691  0FE6                     	;# 
  3692  0FE7                     	;# 
  3693  0FE8                     	;# 
  3694  0FE9                     	;# 
  3695  0FEA                     	;# 
  3696  0FEB                     	;# 
  3697  0FED                     	;# 
  3698  0FEE                     	;# 
  3699  0FEF                     	;# 
  3700                           
  3701                           	psect	idataBANK0
  3702  0E86                     __pidataBANK0:	
  3703                           
  3704                           ;initializer for _StateBat
  3705  0E86  3401               	retlw	1
  3706                           
  3707                           ;initializer for _Angle
  3708  0E87  342D               	retlw	45
  3709                           
  3710                           ;initializer for _Validation
  3711  0E88  3404               	retlw	4
  3712                           
  3713                           	psect	stringtext1
  3714  05F5                     __pstringtext1:	
  3715  05F5                     _fsmStateTable:	
  3716  05F5  3481               	retlw	low _I2C_DO_IDLE
  3717  05F6  340F               	retlw	high _I2C_DO_IDLE
  3718  05F7  34EF               	retlw	low _I2C_DO_SEND_ADR_READ
  3719  05F8  3407               	retlw	high _I2C_DO_SEND_ADR_READ
  3720  05F9  34C6               	retlw	low _I2C_DO_SEND_ADR_WRITE
  3721  05FA  340F               	retlw	high _I2C_DO_SEND_ADR_WRITE
  3722  05FB  34FB               	retlw	low _I2C_DO_TX
  3723  05FC  3401               	retlw	high _I2C_DO_TX
  3724  05FD  3497               	retlw	low _I2C_DO_RX
  3725  05FE  3402               	retlw	high _I2C_DO_RX
  3726  05FF  349D               	retlw	low _I2C_DO_RCEN
  3727  0600  340F               	retlw	high _I2C_DO_RCEN
  3728  0601  34BE               	retlw	low _I2C_DO_TX_EMPTY
  3729  0602  3404               	retlw	high _I2C_DO_TX_EMPTY
  3730  0603  3449               	retlw	low _I2C_DO_SEND_RESTART_READ
  3731  0604  340F               	retlw	high _I2C_DO_SEND_RESTART_READ
  3732  0605  3451               	retlw	low _I2C_DO_SEND_RESTART_WRITE
  3733  0606  340F               	retlw	high _I2C_DO_SEND_RESTART_WRITE
  3734  0607  3459               	retlw	low _I2C_DO_SEND_RESTART
  3735  0608  340F               	retlw	high _I2C_DO_SEND_RESTART
  3736  0609  3461               	retlw	low _I2C_DO_SEND_STOP
  3737  060A  340F               	retlw	high _I2C_DO_SEND_STOP
  3738  060B  3469               	retlw	low _I2C_DO_RX_ACK
  3739  060C  340F               	retlw	high _I2C_DO_RX_ACK
  3740  060D  3471               	retlw	low _I2C_DO_RX_NACK_STOP
  3741  060E  340F               	retlw	high _I2C_DO_RX_NACK_STOP
  3742  060F  3479               	retlw	low _I2C_DO_RX_NACK_RESTART
  3743  0610  340F               	retlw	high _I2C_DO_RX_NACK_RESTART
  3744  0611  348A               	retlw	low _I2C_DO_RESET
  3745  0612  340F               	retlw	high _I2C_DO_RESET
  3746  0613  34E9               	retlw	low _I2C_DO_ADDRESS_NACK
  3747  0614  3404               	retlw	high _I2C_DO_ADDRESS_NACK
  3748  0615                     __end_of_fsmStateTable:	
  3749                           
  3750                           	psect	nvBANK0
  3751  0057                     __pnvBANK0:	
  3752  0057                     _TMR2_InterruptHandler:	
  3753  0057                     	ds	2
  3754  0059                     _EUSART_ErrorHandler:	
  3755  0059                     	ds	2
  3756  005B                     _EUSART_OverrunErrorHandler:	
  3757  005B                     	ds	2
  3758  005D                     _EUSART_FramingErrorHandler:	
  3759  005D                     	ds	2
  3760  005F                     _EUSART_RxDefaultInterruptHandler:	
  3761  005F                     	ds	2
  3762  000C                     _PORTAbits	set	12
  3763  001B                     _PR2	set	27
  3764  001A                     _TMR2	set	26
  3765  001C                     _T2CONbits	set	28
  3766  001F                     _T2RSTbits	set	31
  3767  001D                     _T2HLTbits	set	29
  3768  001C                     _T2CON	set	28
  3769  001A                     _T2TMR	set	26
  3770  001B                     _T2PR	set	27
  3771  001F                     _T2RST	set	31
  3772  001D                     _T2HLT	set	29
  3773  001E                     _T2CLKCON	set	30
  3774  0011                     _PIR2bits	set	17
  3775  0010                     _PIR1bits	set	16
  3776  000B                     _INTCONbits	set	11
  3777  0095                     _OPTION_REGbits	set	149
  3778  008E                     _TRISC	set	142
  3779  008D                     _TRISB	set	141
  3780  008C                     _TRISA	set	140
  3781  0098                     _OSCTUNE	set	152
  3782  0099                     _OSCCON	set	153
  3783  0090                     _PIE1bits	set	144
  3784  010C                     _LATAbits	set	268
  3785  010E                     _LATCbits	set	270
  3786  010E                     _LATC	set	270
  3787  010D                     _LATB	set	269
  3788  010C                     _LATA	set	268
  3789  0116                     _BORCON	set	278
  3790  0199                     _RC1REG	set	409
  3791  019D                     _RC1STAbits	set	413
  3792  019A                     _TX1REG	set	410
  3793  019E                     _TX1STAbits	set	414
  3794  019C                     _SPBRGH	set	412
  3795  019B                     _SPBRGL	set	411
  3796  019E                     _TX1STA	set	414
  3797  019D                     _RC1STA	set	413
  3798  019F                     _BAUD1CON	set	415
  3799  018C                     _ANSELA	set	396
  3800  018D                     _ANSELB	set	397
  3801  018E                     _ANSELC	set	398
  3802  0214                     _SSP1STATbits	set	532
  3803  0216                     _SSP1CON2bits	set	534
  3804  0211                     _SSP1BUF	set	529
  3805  0215                     _SSP1CON1bits	set	533
  3806  0212                     _SSP1ADD	set	530
  3807  0216                     _SSP1CON2	set	534
  3808  0215                     _SSP1CON1	set	533
  3809  0214                     _SSP1STAT	set	532
  3810  020E                     _WPUC	set	526
  3811  020C                     _WPUA	set	524
  3812  020D                     _WPUB	set	525
  3813  029E                     _CCPTMRSbits	set	670
  3814  028E                     _ODCONC	set	654
  3815  028D                     _ODCONB	set	653
  3816  028C                     _ODCONA	set	652
  3817  030E                     _SLRCONC	set	782
  3818  030D                     _SLRCONB	set	781
  3819  030C                     _SLRCONA	set	780
  3820  038E                     _INLVLC	set	910
  3821  038D                     _INLVLB	set	909
  3822  038C                     _INLVLA	set	908
  3823  0617                     _PWM3DCL	set	1559
  3824  0618                     _PWM3DCH	set	1560
  3825  0619                     _PWM3CON	set	1561
  3826  0E20                     _SSPCLKPPS	set	3616
  3827  0E21                     _SSPDATPPS	set	3617
  3828  0E24                     _RXPPS	set	3620
  3829  0E92                     _RA2PPS	set	3730
  3830  0E9C                     _RB4PPS	set	3740
  3831  0E9F                     _RB7PPS	set	3743
  3832  0E9E                     _RB6PPS	set	3742
  3833                           
  3834                           ; #config settings
  3835  0000                     
  3836                           	psect	cinit
  3837  0026                     start_initialization:	
  3838  0026                     __initialization:	
  3839                           
  3840                           ; Initialize objects allocated to BANK0
  3841  0026  318E  2686  3180   	fcall	__pidataBANK0	;fetch initializer
  3842  0029  00E1               	movwf	__pdataBANK0& (0+127)
  3843  002A  318E  2687  3180   	fcall	__pidataBANK0+1	;fetch initializer
  3844  002D  00E2               	movwf	(__pdataBANK0+1)& (0+127)
  3845  002E  318E  2688  3180   	fcall	__pidataBANK0+2	;fetch initializer
  3846  0031  00E3               	movwf	(__pdataBANK0+2)& (0+127)
  3847                           
  3848                           ; Clear objects allocated to BANK0
  3849  0032  3020               	movlw	low __pbssBANK0
  3850  0033  0084               	movwf	4
  3851  0034  3000               	movlw	high __pbssBANK0
  3852  0035  0085               	movwf	5
  3853  0036  301D               	movlw	29
  3854  0037  318F  2725  3180   	fcall	clear_ram0
  3855                           
  3856                           ; Clear objects allocated to BANK1
  3857  003A  30A0               	movlw	low __pbssBANK1
  3858  003B  0084               	movwf	4
  3859  003C  3000               	movlw	high __pbssBANK1
  3860  003D  0085               	movwf	5
  3861  003E  301D               	movlw	29
  3862  003F  318F  2725         	fcall	clear_ram0
  3863  0041                     end_of_initialization:	
  3864                           ;End of C runtime variable initialization code
  3865                           
  3866  0041                     __end_of__initialization:	
  3867  0041  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3868  0042  0020               	movlb	0
  3869  0043  3181  298B         	ljmp	_main	;jump to C main() function
  3870                           
  3871                           	psect	bssBANK0
  3872  0020                     __pbssBANK0:	
  3873  0020                     _eusartRxStatusBuffer:	
  3874  0020                     	ds	8
  3875  0028                     _eusartRxBuffer:	
  3876  0028                     	ds	8
  3877  0030                     _StateLeds:	
  3878  0030                     	ds	1
  3879  0031                     _PosUart:	
  3880  0031                     	ds	1
  3881  0032                     _Pos:	
  3882  0032                     	ds	1
  3883  0033                     _TestState:	
  3884  0033                     	ds	1
  3885  0034                     _Vitesse:	
  3886  0034                     	ds	1
  3887  0035                     _G:	
  3888  0035                     	ds	1
  3889  0036                     _CptBat:	
  3890  0036                     	ds	1
  3891  0037                     _Type:	
  3892  0037                     	ds	1
  3893  0038                     _Data:	
  3894  0038                     	ds	1
  3895  0039                     _eusartRxLastError:	
  3896  0039                     	ds	1
  3897  003A                     _eusartRxCount:	
  3898  003A                     	ds	1
  3899  003B                     _eusartRxTail:	
  3900  003B                     	ds	1
  3901  003C                     _eusartRxHead:	
  3902  003C                     	ds	1
  3903                           
  3904                           	psect	dataBANK0
  3905  0061                     __pdataBANK0:	
  3906  0061                     _StateBat:	
  3907  0061                     	ds	1
  3908  0062                     _Angle:	
  3909  0062                     	ds	1
  3910  0063                     _Validation:	
  3911  0063                     	ds	1
  3912                           
  3913                           	psect	bssBANK1
  3914  00A0                     __pbssBANK1:	
  3915  00A0                     _I2C_Status:	
  3916  00A0                     	ds	29
  3917                           
  3918                           	psect	clrtext
  3919  0F25                     clear_ram0:	
  3920                           ;	Called with FSR0 containing the base address, and
  3921                           ;	WREG with the size to clear
  3922                           
  3923  0F25  0064               	clrwdt	;clear the watchdog before getting into this loop
  3924  0F26                     clrloop0:	
  3925  0F26  0180               	clrf	0	;clear RAM location pointed to by FSR
  3926  0F27  3101               	addfsr 0,1
  3927  0F28  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3928  0F29  2F26               	goto	clrloop0	;have we reached the end yet?
  3929  0F2A  3400               	retlw	0	;all done for this memory range, return
  3930                           
  3931                           	psect	cstackBANK1
  3932  00BD                     __pcstackBANK1:	
  3933  00BD                     ??_I2C_MasterFsm:	
  3934                           
  3935                           ; 1 bytes @ 0x0
  3936  00BD                     	ds	3
  3937  00C0                     I2C_MasterOperation@read:	
  3938                           
  3939                           ; 1 bytes @ 0x3
  3940  00C0                     	ds	1
  3941  00C1                     I2C_MasterOperation@returnValue:	
  3942                           
  3943                           ; 1 bytes @ 0x4
  3944  00C1                     	ds	1
  3945  00C2                     ?_I2C_Write1ByteRegister:	
  3946  00C2                     I2C_Write1ByteRegister@reg:	
  3947                           ; 1 bytes @ 0x5
  3948                           
  3949                           
  3950                           ; 1 bytes @ 0x5
  3951  00C2                     	ds	1
  3952  00C3                     I2C_Write1ByteRegister@data:	
  3953                           
  3954                           ; 1 bytes @ 0x6
  3955  00C3                     	ds	1
  3956  00C4                     ??_I2C_Write1ByteRegister:	
  3957                           
  3958                           ; 1 bytes @ 0x7
  3959  00C4                     	ds	1
  3960  00C5                     I2C_Write1ByteRegister@address:	
  3961                           
  3962                           ; 1 bytes @ 0x8
  3963  00C5                     	ds	1
  3964  00C6                     ??_main:	
  3965                           
  3966                           ; 1 bytes @ 0x9
  3967  00C6                     	ds	2
  3968                           
  3969                           	psect	cstackCOMMON
  3970  0070                     __pcstackCOMMON:	
  3971  0070                     ?_I2C_Open:	
  3972  0070                     ?_I2C_MasterWrite:	
  3973                           ; 1 bytes @ 0x0
  3974                           
  3975  0070                     ?_I2C_Close:	
  3976                           ; 1 bytes @ 0x0
  3977                           
  3978  0070                     ?_TMR2_ISR:	
  3979                           ; 1 bytes @ 0x0
  3980                           
  3981  0070                     ?_I2C_Initialize:	
  3982                           ; 1 bytes @ 0x0
  3983                           
  3984  0070                     ?_PIN_MANAGER_Initialize:	
  3985                           ; 1 bytes @ 0x0
  3986                           
  3987  0070                     ?_OSCILLATOR_Initialize:	
  3988                           ; 1 bytes @ 0x0
  3989                           
  3990  0070                     ?_PWM3_Initialize:	
  3991                           ; 1 bytes @ 0x0
  3992                           
  3993  0070                     ?_TMR2_Initialize:	
  3994                           ; 1 bytes @ 0x0
  3995                           
  3996  0070                     ?_EUSART_Initialize:	
  3997                           ; 1 bytes @ 0x0
  3998                           
  3999  0070                     ?_I2C_DO_IDLE:	
  4000                           ; 1 bytes @ 0x0
  4001                           
  4002  0070                     ?_I2C_DO_SEND_ADR_READ:	
  4003                           ; 1 bytes @ 0x0
  4004                           
  4005  0070                     ?_I2C_DO_SEND_ADR_WRITE:	
  4006                           ; 1 bytes @ 0x0
  4007                           
  4008  0070                     ?_I2C_DO_TX:	
  4009                           ; 1 bytes @ 0x0
  4010                           
  4011  0070                     ?_I2C_DO_RX:	
  4012                           ; 1 bytes @ 0x0
  4013                           
  4014  0070                     ?_I2C_DO_RCEN:	
  4015                           ; 1 bytes @ 0x0
  4016                           
  4017  0070                     ?_I2C_DO_TX_EMPTY:	
  4018                           ; 1 bytes @ 0x0
  4019                           
  4020  0070                     ?_I2C_DO_SEND_RESTART_READ:	
  4021                           ; 1 bytes @ 0x0
  4022                           
  4023  0070                     ?_I2C_DO_SEND_RESTART_WRITE:	
  4024                           ; 1 bytes @ 0x0
  4025                           
  4026  0070                     ?_I2C_DO_SEND_RESTART:	
  4027                           ; 1 bytes @ 0x0
  4028                           
  4029  0070                     ?_I2C_DO_SEND_STOP:	
  4030                           ; 1 bytes @ 0x0
  4031                           
  4032  0070                     ?_I2C_DO_RX_ACK:	
  4033                           ; 1 bytes @ 0x0
  4034                           
  4035  0070                     ?_I2C_DO_RX_NACK_STOP:	
  4036                           ; 1 bytes @ 0x0
  4037                           
  4038  0070                     ?_I2C_DO_RX_NACK_RESTART:	
  4039                           ; 1 bytes @ 0x0
  4040                           
  4041  0070                     ?_I2C_DO_RESET:	
  4042                           ; 1 bytes @ 0x0
  4043                           
  4044  0070                     ?_I2C_DO_ADDRESS_NACK:	
  4045                           ; 1 bytes @ 0x0
  4046                           
  4047  0070                     ?_I2C_MasterClearIrq:	
  4048                           ; 1 bytes @ 0x0
  4049                           
  4050  0070                     ?_I2C_MasterOpen:	
  4051                           ; 1 bytes @ 0x0
  4052                           
  4053  0070                     ?_I2C_MasterDisableIrq:	
  4054                           ; 1 bytes @ 0x0
  4055                           
  4056  0070                     ?_I2C_MasterClose:	
  4057                           ; 1 bytes @ 0x0
  4058                           
  4059  0070                     ?_I2C_MasterStart:	
  4060                           ; 1 bytes @ 0x0
  4061                           
  4062  0070                     ?_I2C_Poller:	
  4063                           ; 1 bytes @ 0x0
  4064                           
  4065  0070                     ?_I2C_MasterWaitForEvent:	
  4066                           ; 1 bytes @ 0x0
  4067                           
  4068  0070                     ?_I2C_MasterFsm:	
  4069                           ; 1 bytes @ 0x0
  4070                           
  4071  0070                     ?_I2C_MasterIsNack:	
  4072                           ; 1 bytes @ 0x0
  4073                           
  4074  0070                     ?_I2C_MasterSendTxData:	
  4075                           ; 1 bytes @ 0x0
  4076                           
  4077  0070                     ?_I2C_MasterGetRxData:	
  4078                           ; 1 bytes @ 0x0
  4079                           
  4080  0070                     ?_I2C_MasterSendAck:	
  4081                           ; 1 bytes @ 0x0
  4082                           
  4083  0070                     ?_I2C_MasterStartRx:	
  4084                           ; 1 bytes @ 0x0
  4085                           
  4086  0070                     ?_I2C_MasterSetIrq:	
  4087                           ; 1 bytes @ 0x0
  4088                           
  4089  0070                     ?_I2C_MasterEnableRestart:	
  4090                           ; 1 bytes @ 0x0
  4091                           
  4092  0070                     ?_I2C_MasterStop:	
  4093                           ; 1 bytes @ 0x0
  4094                           
  4095  0070                     ?_I2C_MasterSendNack:	
  4096                           ; 1 bytes @ 0x0
  4097                           
  4098  0070                     ?_EUSART_Receive_ISR:	
  4099                           ; 1 bytes @ 0x0
  4100                           
  4101  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  4102                           ; 1 bytes @ 0x0
  4103                           
  4104  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  4105                           ; 1 bytes @ 0x0
  4106                           
  4107  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  4108                           ; 1 bytes @ 0x0
  4109                           
  4110  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  4111                           ; 1 bytes @ 0x0
  4112                           
  4113  0070                     ?_EUSART_DefaultErrorHandler:	
  4114                           ; 1 bytes @ 0x0
  4115                           
  4116  0070                     ?_EUSART_RxDataHandler:	
  4117                           ; 1 bytes @ 0x0
  4118                           
  4119  0070                     ??_EUSART_RxDataHandler:	
  4120                           ; 1 bytes @ 0x0
  4121                           
  4122  0070                     ?_TMR2_DefaultInterruptHandler:	
  4123                           ; 1 bytes @ 0x0
  4124                           
  4125  0070                     ??_TMR2_DefaultInterruptHandler:	
  4126                           ; 1 bytes @ 0x0
  4127                           
  4128  0070                     ?_TMR2_CallBack:	
  4129                           ; 1 bytes @ 0x0
  4130                           
  4131  0070                     ?_INTERRUPT_InterruptManager:	
  4132                           ; 1 bytes @ 0x0
  4133                           
  4134  0070                     ?_SYSTEM_Initialize:	
  4135                           ; 1 bytes @ 0x0
  4136                           
  4137  0070                     ?_I2C_MasterOperation:	
  4138                           ; 1 bytes @ 0x0
  4139                           
  4140  0070                     ?_EUSART_Write:	
  4141                           ; 1 bytes @ 0x0
  4142                           
  4143  0070                     ??_EUSART_Write:	
  4144                           ; 1 bytes @ 0x0
  4145                           
  4146  0070                     ?_PWM3_LoadDutyValue:	
  4147                           ; 1 bytes @ 0x0
  4148                           
  4149  0070                     ?_TMR2_Start:	
  4150                           ; 1 bytes @ 0x0
  4151                           
  4152  0070                     ?_TMR2_StartTimer:	
  4153                           ; 1 bytes @ 0x0
  4154                           
  4155  0070                     ?_TMR2_Counter8BitSet:	
  4156                           ; 1 bytes @ 0x0
  4157                           
  4158  0070                     ?_TMR2_WriteTimer:	
  4159                           ; 1 bytes @ 0x0
  4160                           
  4161  0070                     ?_MyTimer2ISR:	
  4162                           ; 1 bytes @ 0x0
  4163                           
  4164  0070                     ?_MyUART_ISR:	
  4165                           ; 1 bytes @ 0x0
  4166                           
  4167  0070                     ?_main:	
  4168                           ; 1 bytes @ 0x0
  4169                           
  4170  0070                     ?i1_I2C_Open:	
  4171                           ; 1 bytes @ 0x0
  4172                           
  4173  0070                     ??i1_I2C_Open:	
  4174                           ; 1 bytes @ 0x0
  4175                           
  4176  0070                     ?i1_I2C_Close:	
  4177                           ; 1 bytes @ 0x0
  4178                           
  4179  0070                     ??i1_I2C_Close:	
  4180                           ; 1 bytes @ 0x0
  4181                           
  4182  0070                     ?i1_I2C_MasterOperation:	
  4183                           ; 1 bytes @ 0x0
  4184                           
  4185  0070                     ?i1_I2C_MasterWrite:	
  4186                           ; 1 bytes @ 0x0
  4187                           
  4188  0070                     ?i1_I2C_SetBuffer:	
  4189                           ; 1 bytes @ 0x0
  4190                           
  4191  0070                     ?i1_I2C_SetCallback:	
  4192                           ; 1 bytes @ 0x0
  4193                           
  4194  0070                     ?i1_I2C_Poller:	
  4195                           ; 1 bytes @ 0x0
  4196                           
  4197  0070                     ?i1_I2C_MasterFsm:	
  4198                           ; 1 bytes @ 0x0
  4199                           
  4200  0070                     ?i1_I2C_DO_IDLE:	
  4201                           ; 1 bytes @ 0x0
  4202                           
  4203  0070                     ??i1_I2C_DO_IDLE:	
  4204                           ; 1 bytes @ 0x0
  4205                           
  4206  0070                     ?i1_I2C_DO_SEND_ADR_READ:	
  4207                           ; 1 bytes @ 0x0
  4208                           
  4209  0070                     ??i1_I2C_DO_SEND_ADR_READ:	
  4210                           ; 1 bytes @ 0x0
  4211                           
  4212  0070                     ?i1_I2C_DO_SEND_ADR_WRITE:	
  4213                           ; 1 bytes @ 0x0
  4214                           
  4215  0070                     ??i1_I2C_DO_SEND_ADR_WRITE:	
  4216                           ; 1 bytes @ 0x0
  4217                           
  4218  0070                     ?i1_I2C_DO_TX:	
  4219                           ; 1 bytes @ 0x0
  4220                           
  4221  0070                     ?i1_I2C_DO_RX:	
  4222                           ; 1 bytes @ 0x0
  4223                           
  4224  0070                     ?i1_I2C_DO_RCEN:	
  4225                           ; 1 bytes @ 0x0
  4226                           
  4227  0070                     ??i1_I2C_DO_RCEN:	
  4228                           ; 1 bytes @ 0x0
  4229                           
  4230  0070                     ?i1_I2C_DO_TX_EMPTY:	
  4231                           ; 1 bytes @ 0x0
  4232                           
  4233  0070                     ?i1_I2C_DO_SEND_RESTART_READ:	
  4234                           ; 1 bytes @ 0x0
  4235                           
  4236  0070                     ??i1_I2C_DO_SEND_RESTART_READ:	
  4237                           ; 1 bytes @ 0x0
  4238                           
  4239  0070                     ?i1_I2C_DO_SEND_RESTART_WRITE:	
  4240                           ; 1 bytes @ 0x0
  4241                           
  4242  0070                     ??i1_I2C_DO_SEND_RESTART_WRITE:	
  4243                           ; 1 bytes @ 0x0
  4244                           
  4245  0070                     ?i1_I2C_DO_SEND_RESTART:	
  4246                           ; 1 bytes @ 0x0
  4247                           
  4248  0070                     ??i1_I2C_DO_SEND_RESTART:	
  4249                           ; 1 bytes @ 0x0
  4250                           
  4251  0070                     ?i1_I2C_DO_SEND_STOP:	
  4252                           ; 1 bytes @ 0x0
  4253                           
  4254  0070                     ??i1_I2C_DO_SEND_STOP:	
  4255                           ; 1 bytes @ 0x0
  4256                           
  4257  0070                     ?i1_I2C_DO_RX_ACK:	
  4258                           ; 1 bytes @ 0x0
  4259                           
  4260  0070                     ??i1_I2C_DO_RX_ACK:	
  4261                           ; 1 bytes @ 0x0
  4262                           
  4263  0070                     ?i1_I2C_DO_RX_NACK_STOP:	
  4264                           ; 1 bytes @ 0x0
  4265                           
  4266  0070                     ??i1_I2C_DO_RX_NACK_STOP:	
  4267                           ; 1 bytes @ 0x0
  4268                           
  4269  0070                     ?i1_I2C_DO_RX_NACK_RESTART:	
  4270                           ; 1 bytes @ 0x0
  4271                           
  4272  0070                     ??i1_I2C_DO_RX_NACK_RESTART:	
  4273                           ; 1 bytes @ 0x0
  4274                           
  4275  0070                     ?i1_I2C_DO_RESET:	
  4276                           ; 1 bytes @ 0x0
  4277                           
  4278  0070                     ??i1_I2C_DO_RESET:	
  4279                           ; 1 bytes @ 0x0
  4280                           
  4281  0070                     ?i1_I2C_DO_ADDRESS_NACK:	
  4282                           ; 1 bytes @ 0x0
  4283                           
  4284  0070                     ?i1_I2C_MasterOpen:	
  4285                           ; 1 bytes @ 0x0
  4286                           
  4287  0070                     ??i1_I2C_MasterOpen:	
  4288                           ; 1 bytes @ 0x0
  4289                           
  4290  0070                     ?i1_I2C_MasterClose:	
  4291                           ; 1 bytes @ 0x0
  4292                           
  4293  0070                     ??i1_I2C_MasterClose:	
  4294                           ; 1 bytes @ 0x0
  4295                           
  4296  0070                     ?i1_I2C_MasterGetRxData:	
  4297                           ; 1 bytes @ 0x0
  4298                           
  4299  0070                     ??i1_I2C_MasterGetRxData:	
  4300                           ; 1 bytes @ 0x0
  4301                           
  4302  0070                     ?i1_I2C_MasterSendTxData:	
  4303                           ; 1 bytes @ 0x0
  4304                           
  4305  0070                     ??i1_I2C_MasterSendTxData:	
  4306                           ; 1 bytes @ 0x0
  4307                           
  4308  0070                     ?i1_I2C_MasterEnableRestart:	
  4309                           ; 1 bytes @ 0x0
  4310                           
  4311  0070                     ??i1_I2C_MasterEnableRestart:	
  4312                           ; 1 bytes @ 0x0
  4313                           
  4314  0070                     ?i1_I2C_MasterStartRx:	
  4315                           ; 1 bytes @ 0x0
  4316                           
  4317  0070                     ??i1_I2C_MasterStartRx:	
  4318                           ; 1 bytes @ 0x0
  4319                           
  4320  0070                     ?i1_I2C_MasterStart:	
  4321                           ; 1 bytes @ 0x0
  4322                           
  4323  0070                     ??i1_I2C_MasterStart:	
  4324                           ; 1 bytes @ 0x0
  4325                           
  4326  0070                     ?i1_I2C_MasterStop:	
  4327                           ; 1 bytes @ 0x0
  4328                           
  4329  0070                     ??i1_I2C_MasterStop:	
  4330                           ; 1 bytes @ 0x0
  4331                           
  4332  0070                     ?i1_I2C_MasterIsNack:	
  4333                           ; 1 bytes @ 0x0
  4334                           
  4335  0070                     ??i1_I2C_MasterIsNack:	
  4336                           ; 1 bytes @ 0x0
  4337                           
  4338  0070                     ?i1_I2C_MasterSendAck:	
  4339                           ; 1 bytes @ 0x0
  4340                           
  4341  0070                     ??i1_I2C_MasterSendAck:	
  4342                           ; 1 bytes @ 0x0
  4343                           
  4344  0070                     ?i1_I2C_MasterSendNack:	
  4345                           ; 1 bytes @ 0x0
  4346                           
  4347  0070                     ??i1_I2C_MasterSendNack:	
  4348                           ; 1 bytes @ 0x0
  4349                           
  4350  0070                     ?i1_I2C_MasterDisableIrq:	
  4351                           ; 1 bytes @ 0x0
  4352                           
  4353  0070                     ??i1_I2C_MasterDisableIrq:	
  4354                           ; 1 bytes @ 0x0
  4355                           
  4356  0070                     ?i1_I2C_MasterClearIrq:	
  4357                           ; 1 bytes @ 0x0
  4358                           
  4359  0070                     ??i1_I2C_MasterClearIrq:	
  4360                           ; 1 bytes @ 0x0
  4361                           
  4362  0070                     ?i1_I2C_MasterSetIrq:	
  4363                           ; 1 bytes @ 0x0
  4364                           
  4365  0070                     ??i1_I2C_MasterSetIrq:	
  4366                           ; 1 bytes @ 0x0
  4367                           
  4368  0070                     ?i1_I2C_MasterWaitForEvent:	
  4369                           ; 1 bytes @ 0x0
  4370                           
  4371  0070                     ??i1_I2C_MasterWaitForEvent:	
  4372                           ; 1 bytes @ 0x0
  4373                           
  4374  0070                     EUSART_Write@txData:	
  4375                           ; 1 bytes @ 0x0
  4376                           
  4377  0070                     i1I2C_MasterSendTxData@data:	
  4378                           ; 1 bytes @ 0x0
  4379                           
  4380  0070                     PWM3_LoadDutyValue@dutyValue:	
  4381                           ; 1 bytes @ 0x0
  4382                           
  4383  0070                     i1I2C_SetBuffer@bufferSize:	
  4384                           ; 2 bytes @ 0x0
  4385                           
  4386  0070                     i1I2C_SetCallback@cb:	
  4387                           ; 2 bytes @ 0x0
  4388                           
  4389                           
  4390                           ; 2 bytes @ 0x0
  4391  0070                     	ds	1
  4392  0071                     ??_EUSART_Receive_ISR:	
  4393  0071                     ??_EUSART_DefaultErrorHandler:	
  4394                           ; 1 bytes @ 0x1
  4395                           
  4396  0071                     ??_MyUART_ISR:	
  4397                           ; 1 bytes @ 0x1
  4398                           
  4399  0071                     i1I2C_Open@address:	
  4400                           ; 1 bytes @ 0x1
  4401                           
  4402  0071                     i1I2C_Close@returnValue:	
  4403                           ; 1 bytes @ 0x1
  4404                           
  4405                           
  4406                           ; 1 bytes @ 0x1
  4407  0071                     	ds	1
  4408  0072                     ??_PWM3_LoadDutyValue:	
  4409  0072                     ??i1_I2C_SetBuffer:	
  4410                           ; 1 bytes @ 0x2
  4411                           
  4412  0072                     i1I2C_Open@returnValue:	
  4413                           ; 1 bytes @ 0x2
  4414                           
  4415  0072                     i1I2C_SetCallback@ptr:	
  4416                           ; 1 bytes @ 0x2
  4417                           
  4418                           
  4419                           ; 1 bytes @ 0x2
  4420  0072                     	ds	1
  4421  0073                     ??i1_I2C_SetCallback:	
  4422  0073                     i1I2C_SetBuffer@buffer:	
  4423                           ; 1 bytes @ 0x3
  4424                           
  4425                           
  4426                           ; 1 bytes @ 0x3
  4427  0073                     	ds	1
  4428  0074                     i1I2C_SetCallback@idx:	
  4429                           
  4430                           ; 1 bytes @ 0x4
  4431  0074                     	ds	1
  4432  0075                     ?i1_I2C_SetDataCompleteCallback:	
  4433  0075                     ?i1_I2C_SetAddressNackCallback:	
  4434                           ; 1 bytes @ 0x5
  4435                           
  4436  0075                     MyUART_ISR@c:	
  4437                           ; 1 bytes @ 0x5
  4438                           
  4439  0075                     i1I2C_SetDataCompleteCallback@cb:	
  4440                           ; 1 bytes @ 0x5
  4441                           
  4442  0075                     i1I2C_SetAddressNackCallback@cb:	
  4443                           ; 2 bytes @ 0x5
  4444                           
  4445                           
  4446                           ; 2 bytes @ 0x5
  4447  0075                     	ds	2
  4448  0077                     i1I2C_SetDataCompleteCallback@ptr:	
  4449  0077                     i1I2C_SetAddressNackCallback@ptr:	
  4450                           ; 1 bytes @ 0x7
  4451                           
  4452                           
  4453                           ; 1 bytes @ 0x7
  4454  0077                     	ds	1
  4455  0078                     ??i1_I2C_SetDataCompleteCallback:	
  4456  0078                     ??i1_I2C_SetAddressNackCallback:	
  4457                           ; 1 bytes @ 0x8
  4458                           
  4459                           
  4460                           ; 1 bytes @ 0x8
  4461  0078                     	ds	1
  4462  0079                     ?i1_rd1RegCompleteHandler:	
  4463  0079                     ?i1_rd2RegCompleteHandler:	
  4464                           ; 1 bytes @ 0x9
  4465                           
  4466  0079                     ?i1_wr1RegCompleteHandler:	
  4467                           ; 1 bytes @ 0x9
  4468                           
  4469  0079                     ?i1_wr2RegCompleteHandler:	
  4470                           ; 1 bytes @ 0x9
  4471                           
  4472  0079                     ?i1_rdBlkRegCompleteHandler:	
  4473                           ; 1 bytes @ 0x9
  4474                           
  4475  0079                     ?i1_I2C_CallbackReturnStop:	
  4476                           ; 1 bytes @ 0x9
  4477                           
  4478  0079                     ?i1_I2C_CallbackReturnReset:	
  4479                           ; 1 bytes @ 0x9
  4480                           
  4481  0079                     i1rd1RegCompleteHandler@ptr:	
  4482                           ; 1 bytes @ 0x9
  4483                           
  4484  0079                     i1rd2RegCompleteHandler@ptr:	
  4485                           ; 1 bytes @ 0x9
  4486                           
  4487  0079                     i1wr1RegCompleteHandler@ptr:	
  4488                           ; 1 bytes @ 0x9
  4489                           
  4490  0079                     i1wr2RegCompleteHandler@ptr:	
  4491                           ; 1 bytes @ 0x9
  4492                           
  4493  0079                     i1rdBlkRegCompleteHandler@ptr:	
  4494                           ; 1 bytes @ 0x9
  4495                           
  4496  0079                     i1I2C_CallbackReturnStop@funPtr:	
  4497                           ; 1 bytes @ 0x9
  4498                           
  4499  0079                     i1I2C_CallbackReturnReset@funPtr:	
  4500                           ; 1 bytes @ 0x9
  4501                           
  4502                           
  4503                           ; 1 bytes @ 0x9
  4504  0079                     	ds	1
  4505  007A                     ??i1_rd1RegCompleteHandler:	
  4506  007A                     ??i1_rd2RegCompleteHandler:	
  4507                           ; 1 bytes @ 0xA
  4508                           
  4509  007A                     ??i1_wr1RegCompleteHandler:	
  4510                           ; 1 bytes @ 0xA
  4511                           
  4512  007A                     ??i1_wr2RegCompleteHandler:	
  4513                           ; 1 bytes @ 0xA
  4514                           
  4515  007A                     ??i1_rdBlkRegCompleteHandler:	
  4516                           ; 1 bytes @ 0xA
  4517                           
  4518  007A                     ??i1_I2C_DO_TX:	
  4519                           ; 1 bytes @ 0xA
  4520                           
  4521  007A                     ??i1_I2C_DO_RX:	
  4522                           ; 1 bytes @ 0xA
  4523                           
  4524  007A                     ??i1_I2C_DO_TX_EMPTY:	
  4525                           ; 1 bytes @ 0xA
  4526                           
  4527  007A                     ??i1_I2C_DO_ADDRESS_NACK:	
  4528                           ; 1 bytes @ 0xA
  4529                           
  4530  007A                     ??i1_I2C_CallbackReturnStop:	
  4531                           ; 1 bytes @ 0xA
  4532                           
  4533  007A                     ??i1_I2C_CallbackReturnReset:	
  4534                           ; 1 bytes @ 0xA
  4535                           
  4536                           
  4537                           ; 1 bytes @ 0xA
  4538  007A                     	ds	1
  4539  007B                     i1_I2C_DO_TX$794:	
  4540                           
  4541                           ; 2 bytes @ 0xB
  4542  007B                     	ds	2
  4543  007D                     ??i1_I2C_MasterOperation:	
  4544  007D                     ??i1_I2C_Poller:	
  4545                           ; 1 bytes @ 0xD
  4546                           
  4547                           
  4548                           ; 1 bytes @ 0xD
  4549  007D                     	ds	1
  4550  007E                     ??_TMR2_ISR:	
  4551  007E                     ??_TMR2_CallBack:	
  4552                           ; 1 bytes @ 0xE
  4553                           
  4554  007E                     ??i1_I2C_MasterWrite:	
  4555                           ; 1 bytes @ 0xE
  4556                           
  4557                           
  4558                           	psect	cstackBANK0
  4559  003D                     __pcstackBANK0:	
  4560                           ; 1 bytes @ 0xE
  4561                           
  4562  003D                     ??i1_I2C_MasterFsm:	
  4563                           
  4564                           ; 1 bytes @ 0x0
  4565  003D                     	ds	3
  4566  0040                     i1I2C_MasterOperation@read:	
  4567                           
  4568                           ; 1 bytes @ 0x3
  4569  0040                     	ds	1
  4570  0041                     i1I2C_MasterOperation@returnValue:	
  4571                           
  4572                           ; 1 bytes @ 0x4
  4573  0041                     	ds	1
  4574  0042                     ?_I2C_Read1ByteRegister:	
  4575  0042                     ?i1_I2C_Write1ByteRegister:	
  4576                           ; 1 bytes @ 0x5
  4577                           
  4578  0042                     I2C_Read1ByteRegister@reg:	
  4579                           ; 1 bytes @ 0x5
  4580                           
  4581  0042                     i1I2C_Write1ByteRegister@reg:	
  4582                           ; 1 bytes @ 0x5
  4583                           
  4584                           
  4585                           ; 1 bytes @ 0x5
  4586  0042                     	ds	1
  4587  0043                     ??_I2C_Read1ByteRegister:	
  4588  0043                     i1I2C_Write1ByteRegister@data:	
  4589                           ; 1 bytes @ 0x6
  4590                           
  4591                           
  4592                           ; 1 bytes @ 0x6
  4593  0043                     	ds	1
  4594  0044                     ??i1_I2C_Write1ByteRegister:	
  4595  0044                     I2C_Read1ByteRegister@address:	
  4596                           ; 1 bytes @ 0x7
  4597                           
  4598                           
  4599                           ; 1 bytes @ 0x7
  4600  0044                     	ds	1
  4601  0045                     I2C_Read1ByteRegister@returnValue:	
  4602  0045                     i1I2C_Write1ByteRegister@address:	
  4603                           ; 1 bytes @ 0x8
  4604                           
  4605                           
  4606                           ; 1 bytes @ 0x8
  4607  0045                     	ds	1
  4608  0046                     ??_MyTimer2ISR:	
  4609                           
  4610                           ; 1 bytes @ 0x9
  4611  0046                     	ds	2
  4612  0048                     ??_INTERRUPT_InterruptManager:	
  4613                           
  4614                           ; 1 bytes @ 0xB
  4615  0048                     	ds	1
  4616  0049                     ??_I2C_Open:	
  4617  0049                     ?_I2C_SetBuffer:	
  4618                           ; 1 bytes @ 0xC
  4619                           
  4620  0049                     ??_I2C_Close:	
  4621                           ; 1 bytes @ 0xC
  4622                           
  4623  0049                     ??_I2C_Initialize:	
  4624                           ; 1 bytes @ 0xC
  4625                           
  4626  0049                     ??_PIN_MANAGER_Initialize:	
  4627                           ; 1 bytes @ 0xC
  4628                           
  4629  0049                     ??_OSCILLATOR_Initialize:	
  4630                           ; 1 bytes @ 0xC
  4631                           
  4632  0049                     ??_PWM3_Initialize:	
  4633                           ; 1 bytes @ 0xC
  4634                           
  4635  0049                     ??_I2C_DO_IDLE:	
  4636                           ; 1 bytes @ 0xC
  4637                           
  4638  0049                     ??_I2C_DO_SEND_ADR_READ:	
  4639                           ; 1 bytes @ 0xC
  4640                           
  4641  0049                     ??_I2C_DO_RCEN:	
  4642                           ; 1 bytes @ 0xC
  4643                           
  4644  0049                     ??_I2C_DO_SEND_RESTART_READ:	
  4645                           ; 1 bytes @ 0xC
  4646                           
  4647  0049                     ??_I2C_DO_SEND_RESTART_WRITE:	
  4648                           ; 1 bytes @ 0xC
  4649                           
  4650  0049                     ??_I2C_DO_SEND_RESTART:	
  4651                           ; 1 bytes @ 0xC
  4652                           
  4653  0049                     ??_I2C_DO_SEND_STOP:	
  4654                           ; 1 bytes @ 0xC
  4655                           
  4656  0049                     ??_I2C_DO_RX_ACK:	
  4657                           ; 1 bytes @ 0xC
  4658                           
  4659  0049                     ??_I2C_DO_RX_NACK_STOP:	
  4660                           ; 1 bytes @ 0xC
  4661                           
  4662  0049                     ??_I2C_DO_RX_NACK_RESTART:	
  4663                           ; 1 bytes @ 0xC
  4664                           
  4665  0049                     ??_I2C_DO_RESET:	
  4666                           ; 1 bytes @ 0xC
  4667                           
  4668  0049                     ??_I2C_MasterClearIrq:	
  4669                           ; 1 bytes @ 0xC
  4670                           
  4671  0049                     ??_I2C_MasterOpen:	
  4672                           ; 1 bytes @ 0xC
  4673                           
  4674  0049                     ??_I2C_MasterDisableIrq:	
  4675                           ; 1 bytes @ 0xC
  4676                           
  4677  0049                     ??_I2C_MasterClose:	
  4678                           ; 1 bytes @ 0xC
  4679                           
  4680  0049                     ??_I2C_MasterStart:	
  4681                           ; 1 bytes @ 0xC
  4682                           
  4683  0049                     ?_I2C_SetCallback:	
  4684                           ; 1 bytes @ 0xC
  4685                           
  4686  0049                     ??_I2C_MasterWaitForEvent:	
  4687                           ; 1 bytes @ 0xC
  4688                           
  4689  0049                     ??_I2C_MasterIsNack:	
  4690                           ; 1 bytes @ 0xC
  4691                           
  4692  0049                     ??_I2C_MasterSendTxData:	
  4693                           ; 1 bytes @ 0xC
  4694                           
  4695  0049                     ??_I2C_MasterGetRxData:	
  4696                           ; 1 bytes @ 0xC
  4697                           
  4698  0049                     ??_I2C_MasterSendAck:	
  4699                           ; 1 bytes @ 0xC
  4700                           
  4701  0049                     ??_I2C_MasterStartRx:	
  4702                           ; 1 bytes @ 0xC
  4703                           
  4704  0049                     ??_I2C_MasterSetIrq:	
  4705                           ; 1 bytes @ 0xC
  4706                           
  4707  0049                     ??_I2C_MasterEnableRestart:	
  4708                           ; 1 bytes @ 0xC
  4709                           
  4710  0049                     ??_I2C_MasterStop:	
  4711                           ; 1 bytes @ 0xC
  4712                           
  4713  0049                     ??_I2C_MasterSendNack:	
  4714                           ; 1 bytes @ 0xC
  4715                           
  4716  0049                     ?_EUSART_SetRxInterruptHandler:	
  4717                           ; 1 bytes @ 0xC
  4718                           
  4719  0049                     ?_EUSART_SetFramingErrorHandler:	
  4720                           ; 1 bytes @ 0xC
  4721                           
  4722  0049                     ?_EUSART_SetOverrunErrorHandler:	
  4723                           ; 1 bytes @ 0xC
  4724                           
  4725  0049                     ?_EUSART_SetErrorHandler:	
  4726                           ; 1 bytes @ 0xC
  4727                           
  4728  0049                     ?_TMR2_SetInterruptHandler:	
  4729                           ; 1 bytes @ 0xC
  4730                           
  4731  0049                     ??_TMR2_Start:	
  4732                           ; 1 bytes @ 0xC
  4733                           
  4734  0049                     ??_TMR2_StartTimer:	
  4735                           ; 1 bytes @ 0xC
  4736                           
  4737  0049                     ??_TMR2_Counter8BitSet:	
  4738                           ; 1 bytes @ 0xC
  4739                           
  4740  0049                     I2C_MasterSendTxData@data:	
  4741                           ; 1 bytes @ 0xC
  4742                           
  4743  0049                     TMR2_Counter8BitSet@timerVal:	
  4744                           ; 1 bytes @ 0xC
  4745                           
  4746  0049                     I2C_SetBuffer@bufferSize:	
  4747                           ; 1 bytes @ 0xC
  4748                           
  4749  0049                     I2C_SetCallback@cb:	
  4750                           ; 2 bytes @ 0xC
  4751                           
  4752  0049                     EUSART_SetFramingErrorHandler@interruptHandler:	
  4753                           ; 2 bytes @ 0xC
  4754                           
  4755  0049                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  4756                           ; 2 bytes @ 0xC
  4757                           
  4758  0049                     EUSART_SetErrorHandler@interruptHandler:	
  4759                           ; 2 bytes @ 0xC
  4760                           
  4761  0049                     EUSART_SetRxInterruptHandler@interruptHandler:	
  4762                           ; 2 bytes @ 0xC
  4763                           
  4764  0049                     TMR2_SetInterruptHandler@InterruptHandler:	
  4765                           ; 2 bytes @ 0xC
  4766                           
  4767                           
  4768                           ; 2 bytes @ 0xC
  4769  0049                     	ds	1
  4770  004A                     ??_I2C_DO_SEND_ADR_WRITE:	
  4771  004A                     ??_TMR2_WriteTimer:	
  4772                           ; 1 bytes @ 0xD
  4773                           
  4774  004A                     I2C_Open@address:	
  4775                           ; 1 bytes @ 0xD
  4776                           
  4777  004A                     I2C_Close@returnValue:	
  4778                           ; 1 bytes @ 0xD
  4779                           
  4780  004A                     TMR2_WriteTimer@timerVal:	
  4781                           ; 1 bytes @ 0xD
  4782                           
  4783                           
  4784                           ; 1 bytes @ 0xD
  4785  004A                     	ds	1
  4786  004B                     ??_I2C_SetBuffer:	
  4787  004B                     ??_TMR2_Initialize:	
  4788                           ; 1 bytes @ 0xE
  4789                           
  4790  004B                     ??_EUSART_Initialize:	
  4791                           ; 1 bytes @ 0xE
  4792                           
  4793  004B                     ??_EUSART_SetRxInterruptHandler:	
  4794                           ; 1 bytes @ 0xE
  4795                           
  4796  004B                     ??_EUSART_SetFramingErrorHandler:	
  4797                           ; 1 bytes @ 0xE
  4798                           
  4799  004B                     ??_EUSART_SetOverrunErrorHandler:	
  4800                           ; 1 bytes @ 0xE
  4801                           
  4802  004B                     ??_EUSART_SetErrorHandler:	
  4803                           ; 1 bytes @ 0xE
  4804                           
  4805  004B                     ??_TMR2_SetInterruptHandler:	
  4806                           ; 1 bytes @ 0xE
  4807                           
  4808  004B                     ??_SYSTEM_Initialize:	
  4809                           ; 1 bytes @ 0xE
  4810                           
  4811  004B                     I2C_Open@returnValue:	
  4812                           ; 1 bytes @ 0xE
  4813                           
  4814  004B                     I2C_SetCallback@ptr:	
  4815                           ; 1 bytes @ 0xE
  4816                           
  4817                           
  4818                           ; 1 bytes @ 0xE
  4819  004B                     	ds	1
  4820  004C                     ??_I2C_SetCallback:	
  4821  004C                     I2C_SetBuffer@buffer:	
  4822                           ; 1 bytes @ 0xF
  4823                           
  4824                           
  4825                           ; 1 bytes @ 0xF
  4826  004C                     	ds	1
  4827  004D                     I2C_SetCallback@idx:	
  4828                           
  4829                           ; 1 bytes @ 0x10
  4830  004D                     	ds	1
  4831  004E                     ?_I2C_SetDataCompleteCallback:	
  4832  004E                     ?_I2C_SetAddressNackCallback:	
  4833                           ; 1 bytes @ 0x11
  4834                           
  4835  004E                     I2C_SetDataCompleteCallback@cb:	
  4836                           ; 1 bytes @ 0x11
  4837                           
  4838  004E                     I2C_SetAddressNackCallback@cb:	
  4839                           ; 2 bytes @ 0x11
  4840                           
  4841                           
  4842                           ; 2 bytes @ 0x11
  4843  004E                     	ds	2
  4844  0050                     I2C_SetDataCompleteCallback@ptr:	
  4845  0050                     I2C_SetAddressNackCallback@ptr:	
  4846                           ; 1 bytes @ 0x13
  4847                           
  4848                           
  4849                           ; 1 bytes @ 0x13
  4850  0050                     	ds	1
  4851  0051                     ??_I2C_SetDataCompleteCallback:	
  4852  0051                     ??_I2C_SetAddressNackCallback:	
  4853                           ; 1 bytes @ 0x14
  4854                           
  4855                           
  4856                           ; 1 bytes @ 0x14
  4857  0051                     	ds	1
  4858  0052                     ?_rd1RegCompleteHandler:	
  4859  0052                     ?_rd2RegCompleteHandler:	
  4860                           ; 1 bytes @ 0x15
  4861                           
  4862  0052                     ?_wr1RegCompleteHandler:	
  4863                           ; 1 bytes @ 0x15
  4864                           
  4865  0052                     ?_wr2RegCompleteHandler:	
  4866                           ; 1 bytes @ 0x15
  4867                           
  4868  0052                     ?_rdBlkRegCompleteHandler:	
  4869                           ; 1 bytes @ 0x15
  4870                           
  4871  0052                     ?_I2C_CallbackReturnStop:	
  4872                           ; 1 bytes @ 0x15
  4873                           
  4874  0052                     ?_I2C_CallbackReturnReset:	
  4875                           ; 1 bytes @ 0x15
  4876                           
  4877  0052                     rd1RegCompleteHandler@ptr:	
  4878                           ; 1 bytes @ 0x15
  4879                           
  4880  0052                     rd2RegCompleteHandler@ptr:	
  4881                           ; 1 bytes @ 0x15
  4882                           
  4883  0052                     wr1RegCompleteHandler@ptr:	
  4884                           ; 1 bytes @ 0x15
  4885                           
  4886  0052                     wr2RegCompleteHandler@ptr:	
  4887                           ; 1 bytes @ 0x15
  4888                           
  4889  0052                     rdBlkRegCompleteHandler@ptr:	
  4890                           ; 1 bytes @ 0x15
  4891                           
  4892  0052                     I2C_CallbackReturnStop@funPtr:	
  4893                           ; 1 bytes @ 0x15
  4894                           
  4895  0052                     I2C_CallbackReturnReset@funPtr:	
  4896                           ; 1 bytes @ 0x15
  4897                           
  4898                           
  4899                           ; 1 bytes @ 0x15
  4900  0052                     	ds	1
  4901  0053                     ??_rd1RegCompleteHandler:	
  4902  0053                     ??_rd2RegCompleteHandler:	
  4903                           ; 1 bytes @ 0x16
  4904                           
  4905  0053                     ??_wr1RegCompleteHandler:	
  4906                           ; 1 bytes @ 0x16
  4907                           
  4908  0053                     ??_wr2RegCompleteHandler:	
  4909                           ; 1 bytes @ 0x16
  4910                           
  4911  0053                     ??_rdBlkRegCompleteHandler:	
  4912                           ; 1 bytes @ 0x16
  4913                           
  4914  0053                     ??_I2C_DO_TX:	
  4915                           ; 1 bytes @ 0x16
  4916                           
  4917  0053                     ??_I2C_DO_RX:	
  4918                           ; 1 bytes @ 0x16
  4919                           
  4920  0053                     ??_I2C_DO_TX_EMPTY:	
  4921                           ; 1 bytes @ 0x16
  4922                           
  4923  0053                     ??_I2C_DO_ADDRESS_NACK:	
  4924                           ; 1 bytes @ 0x16
  4925                           
  4926  0053                     ??_I2C_CallbackReturnStop:	
  4927                           ; 1 bytes @ 0x16
  4928                           
  4929  0053                     ??_I2C_CallbackReturnReset:	
  4930                           ; 1 bytes @ 0x16
  4931                           
  4932                           
  4933                           ; 1 bytes @ 0x16
  4934  0053                     	ds	1
  4935  0054                     _I2C_DO_TX$794:	
  4936                           
  4937                           ; 2 bytes @ 0x17
  4938  0054                     	ds	2
  4939  0056                     ??_I2C_Poller:	
  4940  0056                     ??_I2C_MasterOperation:	
  4941                           ; 1 bytes @ 0x19
  4942                           
  4943                           
  4944                           ; 1 bytes @ 0x19
  4945  0056                     	ds	1
  4946  0057                     ??_I2C_MasterWrite:	
  4947                           
  4948                           	psect	maintext
  4949  018B                     __pmaintext:	
  4950                           ; 1 bytes @ 0x1A
  4951 ;;
  4952 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4953 ;;
  4954 ;; *************** function _main *****************
  4955 ;; Defined at:
  4956 ;;		line 174 in file "main.c"
  4957 ;; Parameters:    Size  Location     Type
  4958 ;;		None
  4959 ;; Auto vars:     Size  Location     Type
  4960 ;;		None
  4961 ;; Return value:  Size  Location     Type
  4962 ;;                  1    wreg      void 
  4963 ;; Registers used:
  4964 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4965 ;; Tracked objects:
  4966 ;;		On entry : B1F/0
  4967 ;;		On exit  : 0/0
  4968 ;;		Unchanged: 0/0
  4969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4972 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4973 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4974 ;;Total ram usage:        2 bytes
  4975 ;; Hardware stack levels required when called:   22
  4976 ;; This function calls:
  4977 ;;		_EUSART_SetRxInterruptHandler
  4978 ;;		_I2C_Write1ByteRegister
  4979 ;;		_SYSTEM_Initialize
  4980 ;;		_TMR2_SetInterruptHandler
  4981 ;;		_TMR2_StartTimer
  4982 ;;		_TMR2_WriteTimer
  4983 ;; This function is called by:
  4984 ;;		Startup code after reset
  4985 ;; This function uses a non-reentrant model
  4986 ;;
  4987                           
  4988                           
  4989                           ;psect for function _main
  4990  018B                     _main:	
  4991                           
  4992                           ;main.c: 175: SYSTEM_Initialize();
  4993                           
  4994                           ;incstack = 0
  4995 ;; hardware stack exceeded
  4996                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4997  018B  3187  2769  3181   	fcall	_SYSTEM_Initialize
  4998                           
  4999                           ;main.c: 177: do { LATCbits.LATC5 = 1; } while(0);
  5000  018E  0022               	movlb	2	; select bank2
  5001  018F  168E               	bsf	14,5	;volatile
  5002                           
  5003                           ;main.c: 178: do { LATAbits.LATA5 = 1; } while(0);
  5004  0190  168C               	bsf	12,5	;volatile
  5005                           
  5006                           ;main.c: 181: I2C_Write1ByteRegister(0x68, 0x26, 0x02);
  5007  0191  3026               	movlw	38
  5008  0192  0021               	movlb	1	; select bank1
  5009  0193  00C6               	movwf	??_main^(0+128)
  5010  0194  0846               	movf	??_main^(0+128),w
  5011  0195  00C2               	movwf	I2C_Write1ByteRegister@reg^(0+128)
  5012  0196  3002               	movlw	2
  5013  0197  00C7               	movwf	(??_main+1)^(0+128)
  5014  0198  0847               	movf	(??_main+1)^(0+128),w
  5015  0199  00C3               	movwf	I2C_Write1ByteRegister@data^(0+128)
  5016  019A  3068               	movlw	104
  5017  019B  3183  23F7  3181   	fcall	_I2C_Write1ByteRegister
  5018                           
  5019                           ;main.c: 182: I2C_Write1ByteRegister(0x68, 0x27, 0x10);
  5020  019E  3027               	movlw	39
  5021  019F  0021               	movlb	1	; select bank1
  5022  01A0  00C6               	movwf	??_main^(0+128)
  5023  01A1  0846               	movf	??_main^(0+128),w
  5024  01A2  00C2               	movwf	I2C_Write1ByteRegister@reg^(0+128)
  5025  01A3  3010               	movlw	16
  5026  01A4  00C7               	movwf	(??_main+1)^(0+128)
  5027  01A5  0847               	movf	(??_main+1)^(0+128),w
  5028  01A6  00C3               	movwf	I2C_Write1ByteRegister@data^(0+128)
  5029  01A7  3068               	movlw	104
  5030  01A8  3183  23F7  3181   	fcall	_I2C_Write1ByteRegister
  5031                           
  5032                           ;main.c: 185: TMR2_SetInterruptHandler(MyTimer2ISR);
  5033  01AB  30F7               	movlw	low _MyTimer2ISR
  5034  01AC  0020               	movlb	0	; select bank0
  5035  01AD  00C9               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  5036  01AE  3000               	movlw	high _MyTimer2ISR
  5037  01AF  00CA               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  5038  01B0  318F  2719  3181   	fcall	_TMR2_SetInterruptHandler
  5039                           
  5040                           ;main.c: 186: TMR2_WriteTimer(255);
  5041  01B3  30FF               	movlw	255
  5042  01B4  318F  271F  3181   	fcall	_TMR2_WriteTimer
  5043                           
  5044                           ;main.c: 187: TMR2_StartTimer();
  5045  01B7  318E  2683  3181   	fcall	_TMR2_StartTimer
  5046                           
  5047                           ;main.c: 189: EUSART_SetRxInterruptHandler(MyUART_ISR);
  5048  01BA  3045               	movlw	low _MyUART_ISR
  5049  01BB  0020               	movlb	0	; select bank0
  5050  01BC  00C9               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  5051  01BD  3000               	movlw	high _MyUART_ISR
  5052  01BE  00CA               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  5053  01BF  318F  2713  3181   	fcall	_EUSART_SetRxInterruptHandler
  5054                           
  5055                           ;main.c: 191: (INTCONbits.PEIE = 1);
  5056  01C2  170B               	bsf	11,6	;volatile
  5057                           
  5058                           ;main.c: 192: (INTCONbits.GIE = 1);
  5059  01C3  178B               	bsf	11,7	;volatile
  5060  01C4  29F5               	goto	l6233
  5061  01C5                     l6235:	
  5062                           
  5063                           ;main.c: 196: if(Validation) {
  5064  01C5  0863               	movf	_Validation,w
  5065  01C6  1903               	btfsc	3,2
  5066  01C7  29E1               	goto	l6241
  5067                           
  5068                           ;main.c: 197: do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  5069  01C8  1003               	clrc
  5070  01C9  0022               	movlb	2	; select bank2
  5071  01CA  1E8C               	btfss	12,5	;volatile
  5072  01CB  1403               	setc
  5073  01CC  1C03               	btfss	3,0
  5074  01CD  29D1               	goto	u4010
  5075  01CE  0022               	movlb	2	; select bank2
  5076  01CF  168C               	bsf	12,5	;volatile
  5077  01D0  29D3               	goto	l6239
  5078  01D1                     u4010:	
  5079  01D1  0022               	movlb	2	; select bank2
  5080  01D2  128C               	bcf	12,5	;volatile
  5081  01D3                     l6239:	
  5082                           
  5083                           ;main.c: 198: _delay((unsigned long)((500)*(4000000/4000.0)));
  5084  01D3  3003               	movlw	3
  5085  01D4  0021               	movlb	1	; select bank1
  5086  01D5  00C7               	movwf	(??_main^(0+128)+1)
  5087  01D6  308A               	movlw	138
  5088  01D7  00C6               	movwf	??_main^(0+128)
  5089  01D8  3055               	movlw	85
  5090  01D9                     u4057:	
  5091  01D9  0B89               	decfsz	9,f
  5092  01DA  29D9               	goto	u4057
  5093  01DB  0BC6               	decfsz	??_main^(0+128),f
  5094  01DC  29D9               	goto	u4057
  5095  01DD  0BC7               	decfsz	(??_main^(0+128)+1),f
  5096  01DE  29D9               	goto	u4057
  5097  01DF  3200               	nop2
  5098                           
  5099                           ;main.c: 199: } else {
  5100  01E0  29F5               	goto	l6233
  5101  01E1                     l6241:	
  5102                           ;main.c: 200: do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  5103                           
  5104  01E1  1003               	clrc
  5105  01E2  0022               	movlb	2	; select bank2
  5106  01E3  1E8C               	btfss	12,5	;volatile
  5107  01E4  1403               	setc
  5108  01E5  1C03               	btfss	3,0
  5109  01E6  29EA               	goto	u4030
  5110  01E7  0022               	movlb	2	; select bank2
  5111  01E8  168C               	bsf	12,5	;volatile
  5112  01E9  29EC               	goto	l6243
  5113  01EA                     u4030:	
  5114  01EA  0022               	movlb	2	; select bank2
  5115  01EB  128C               	bcf	12,5	;volatile
  5116  01EC                     l6243:	
  5117                           
  5118                           ;main.c: 201: _delay((unsigned long)((100)*(4000000/4000.0)));
  5119  01EC  3082               	movlw	130
  5120  01ED  0021               	movlb	1	; select bank1
  5121  01EE  00C6               	movwf	??_main^(0+128)
  5122  01EF  30DD               	movlw	221
  5123  01F0                     u4067:	
  5124  01F0  0B89               	decfsz	9,f
  5125  01F1  29F0               	goto	u4067
  5126  01F2  0BC6               	decfsz	??_main^(0+128),f
  5127  01F3  29F0               	goto	u4067
  5128  01F4  3200               	nop2
  5129  01F5                     l6233:	
  5130                           ;main.c: 194: while (1) {
  5131                           
  5132                           ;main.c: 202: }
  5133                           ;main.c: 203: } else {
  5134                           
  5135                           
  5136                           ;main.c: 195: if(PORTAbits.RA4) {
  5137  01F5  0020               	movlb	0	; select bank0
  5138  01F6  1A0C               	btfsc	12,4	;volatile
  5139  01F7  29C5               	goto	l6235
  5140                           
  5141                           ;main.c: 204: do { LATAbits.LATA5 = 1; } while(0);
  5142  01F8  0022               	movlb	2	; select bank2
  5143  01F9  168C               	bsf	12,5	;volatile
  5144  01FA  29F5               	goto	l6233
  5145  01FB                     __end_of_main:	
  5146                           
  5147                           	psect	text1
  5148  0F1F                     __ptext1:	
  5149 ;; *************** function _TMR2_WriteTimer *****************
  5150 ;; Defined at:
  5151 ;;		line 150 in file "mcc_generated_files/tmr2.c"
  5152 ;; Parameters:    Size  Location     Type
  5153 ;;  timerVal        1    wreg     unsigned char 
  5154 ;; Auto vars:     Size  Location     Type
  5155 ;;  timerVal        1   13[BANK0 ] unsigned char 
  5156 ;; Return value:  Size  Location     Type
  5157 ;;                  1    wreg      void 
  5158 ;; Registers used:
  5159 ;;		wreg, status,2, status,0, pclath, cstack
  5160 ;; Tracked objects:
  5161 ;;		On entry : 0/0
  5162 ;;		On exit  : 0/0
  5163 ;;		Unchanged: 0/0
  5164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5166 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5168 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5169 ;;Total ram usage:        1 bytes
  5170 ;; Hardware stack levels used:    1
  5171 ;; Hardware stack levels required when called:   14
  5172 ;; This function calls:
  5173 ;;		_TMR2_Counter8BitSet
  5174 ;; This function is called by:
  5175 ;;		_main
  5176 ;; This function uses a non-reentrant model
  5177 ;;
  5178                           
  5179                           
  5180                           ;psect for function _TMR2_WriteTimer
  5181  0F1F                     _TMR2_WriteTimer:	
  5182                           
  5183                           ;incstack = 0
  5184                           ; Regs used in _TMR2_WriteTimer: [wreg+status,2+status,0+pclath+cstack]
  5185                           ;TMR2_WriteTimer@timerVal stored from wreg
  5186  0F1F  0020               	movlb	0	; select bank0
  5187  0F20  00CA               	movwf	TMR2_WriteTimer@timerVal
  5188                           
  5189                           ;tmr2.c: 152: TMR2_Counter8BitSet(timerVal);
  5190  0F21  084A               	movf	TMR2_WriteTimer@timerVal,w
  5191  0F22  3187  27FB         	fcall	_TMR2_Counter8BitSet
  5192  0F24  0008               	return
  5193  0F25                     __end_of_TMR2_WriteTimer:	
  5194                           
  5195                           	psect	text2
  5196  07FB                     __ptext2:	
  5197 ;; *************** function _TMR2_Counter8BitSet *****************
  5198 ;; Defined at:
  5199 ;;		line 144 in file "mcc_generated_files/tmr2.c"
  5200 ;; Parameters:    Size  Location     Type
  5201 ;;  timerVal        1    wreg     unsigned char 
  5202 ;; Auto vars:     Size  Location     Type
  5203 ;;  timerVal        1   12[BANK0 ] unsigned char 
  5204 ;; Return value:  Size  Location     Type
  5205 ;;                  1    wreg      void 
  5206 ;; Registers used:
  5207 ;;		wreg
  5208 ;; Tracked objects:
  5209 ;;		On entry : 0/0
  5210 ;;		On exit  : 0/0
  5211 ;;		Unchanged: 0/0
  5212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5214 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5216 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5217 ;;Total ram usage:        1 bytes
  5218 ;; Hardware stack levels used:    1
  5219 ;; Hardware stack levels required when called:   13
  5220 ;; This function calls:
  5221 ;;		Nothing
  5222 ;; This function is called by:
  5223 ;;		_TMR2_WriteTimer
  5224 ;; This function uses a non-reentrant model
  5225 ;;
  5226                           
  5227                           
  5228                           ;psect for function _TMR2_Counter8BitSet
  5229  07FB                     _TMR2_Counter8BitSet:	
  5230                           
  5231                           ;incstack = 0
  5232                           ; Regs used in _TMR2_Counter8BitSet: [wreg]
  5233                           ;TMR2_Counter8BitSet@timerVal stored from wreg
  5234  07FB  0020               	movlb	0	; select bank0
  5235  07FC  00C9               	movwf	TMR2_Counter8BitSet@timerVal
  5236                           
  5237                           ;tmr2.c: 147: TMR2 = timerVal;
  5238  07FD  0849               	movf	TMR2_Counter8BitSet@timerVal,w
  5239  07FE  009A               	movwf	26	;volatile
  5240  07FF  0008               	return
  5241  0800                     __end_of_TMR2_Counter8BitSet:	
  5242                           
  5243                           	psect	text3
  5244  0E83                     __ptext3:	
  5245 ;; *************** function _TMR2_StartTimer *****************
  5246 ;; Defined at:
  5247 ;;		line 114 in file "mcc_generated_files/tmr2.c"
  5248 ;; Parameters:    Size  Location     Type
  5249 ;;		None
  5250 ;; Auto vars:     Size  Location     Type
  5251 ;;		None
  5252 ;; Return value:  Size  Location     Type
  5253 ;;                  1    wreg      void 
  5254 ;; Registers used:
  5255 ;;		status,2, status,0, pclath, cstack
  5256 ;; Tracked objects:
  5257 ;;		On entry : 0/0
  5258 ;;		On exit  : 0/0
  5259 ;;		Unchanged: 0/0
  5260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5264 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5265 ;;Total ram usage:        0 bytes
  5266 ;; Hardware stack levels used:    1
  5267 ;; Hardware stack levels required when called:   14
  5268 ;; This function calls:
  5269 ;;		_TMR2_Start
  5270 ;; This function is called by:
  5271 ;;		_main
  5272 ;; This function uses a non-reentrant model
  5273 ;;
  5274                           
  5275                           
  5276                           ;psect for function _TMR2_StartTimer
  5277  0E83                     _TMR2_StartTimer:	
  5278                           
  5279                           ;tmr2.c: 116: TMR2_Start();
  5280                           
  5281                           ;incstack = 0
  5282                           ; Regs used in _TMR2_StartTimer: [status,2+status,0+pclath+cstack]
  5283  0E83  318E  2680         	fcall	_TMR2_Start
  5284  0E85  0008               	return
  5285  0E86                     __end_of_TMR2_StartTimer:	
  5286                           
  5287                           	psect	text4
  5288  0E80                     __ptext4:	
  5289 ;; *************** function _TMR2_Start *****************
  5290 ;; Defined at:
  5291 ;;		line 108 in file "mcc_generated_files/tmr2.c"
  5292 ;; Parameters:    Size  Location     Type
  5293 ;;		None
  5294 ;; Auto vars:     Size  Location     Type
  5295 ;;		None
  5296 ;; Return value:  Size  Location     Type
  5297 ;;                  1    wreg      void 
  5298 ;; Registers used:
  5299 ;;		None
  5300 ;; Tracked objects:
  5301 ;;		On entry : 0/0
  5302 ;;		On exit  : 0/0
  5303 ;;		Unchanged: 0/0
  5304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5309 ;;Total ram usage:        0 bytes
  5310 ;; Hardware stack levels used:    1
  5311 ;; Hardware stack levels required when called:   13
  5312 ;; This function calls:
  5313 ;;		Nothing
  5314 ;; This function is called by:
  5315 ;;		_TMR2_StartTimer
  5316 ;; This function uses a non-reentrant model
  5317 ;;
  5318                           
  5319                           
  5320                           ;psect for function _TMR2_Start
  5321  0E80                     _TMR2_Start:	
  5322                           
  5323                           ;tmr2.c: 111: T2CONbits.TMR2ON = 1;
  5324                           
  5325                           ;incstack = 0
  5326                           ; Regs used in _TMR2_Start: []
  5327  0E80  0020               	movlb	0	; select bank0
  5328  0E81  179C               	bsf	28,7	;volatile
  5329  0E82  0008               	return
  5330  0E83                     __end_of_TMR2_Start:	
  5331                           
  5332                           	psect	text5
  5333  0769                     __ptext5:	
  5334 ;; *************** function _SYSTEM_Initialize *****************
  5335 ;; Defined at:
  5336 ;;		line 50 in file "mcc_generated_files/mcc.c"
  5337 ;; Parameters:    Size  Location     Type
  5338 ;;		None
  5339 ;; Auto vars:     Size  Location     Type
  5340 ;;		None
  5341 ;; Return value:  Size  Location     Type
  5342 ;;                  1    wreg      void 
  5343 ;; Registers used:
  5344 ;;		wreg, status,2, status,0, pclath, cstack
  5345 ;; Tracked objects:
  5346 ;;		On entry : 0/0
  5347 ;;		On exit  : 0/0
  5348 ;;		Unchanged: 0/0
  5349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5353 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5354 ;;Total ram usage:        0 bytes
  5355 ;; Hardware stack levels used:    1
  5356 ;; Hardware stack levels required when called:   15
  5357 ;; This function calls:
  5358 ;;		_EUSART_Initialize
  5359 ;;		_I2C_Initialize
  5360 ;;		_OSCILLATOR_Initialize
  5361 ;;		_PIN_MANAGER_Initialize
  5362 ;;		_PWM3_Initialize
  5363 ;;		_TMR2_Initialize
  5364 ;; This function is called by:
  5365 ;;		_main
  5366 ;; This function uses a non-reentrant model
  5367 ;;
  5368                           
  5369                           
  5370                           ;psect for function _SYSTEM_Initialize
  5371  0769                     _SYSTEM_Initialize:	
  5372                           
  5373                           ;mcc.c: 52: I2C_Initialize();
  5374                           
  5375                           ;incstack = 0
  5376                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5377  0769  318F  27B1  3187   	fcall	_I2C_Initialize
  5378                           
  5379                           ;mcc.c: 53: PIN_MANAGER_Initialize();
  5380  076C  3183  2318  3187   	fcall	_PIN_MANAGER_Initialize
  5381                           
  5382                           ;mcc.c: 54: OSCILLATOR_Initialize();
  5383  076F  318F  2732  3187   	fcall	_OSCILLATOR_Initialize
  5384                           
  5385                           ;mcc.c: 55: PWM3_Initialize();
  5386  0772  318F  27D1  3187   	fcall	_PWM3_Initialize
  5387                           
  5388                           ;mcc.c: 56: TMR2_Initialize();
  5389  0775  3187  273F  3187   	fcall	_TMR2_Initialize
  5390                           
  5391                           ;mcc.c: 57: EUSART_Initialize();
  5392  0778  3183  23C4         	fcall	_EUSART_Initialize
  5393  077A  0008               	return
  5394  077B                     __end_of_SYSTEM_Initialize:	
  5395                           
  5396                           	psect	text6
  5397  073F                     __ptext6:	
  5398 ;; *************** function _TMR2_Initialize *****************
  5399 ;; Defined at:
  5400 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  5401 ;; Parameters:    Size  Location     Type
  5402 ;;		None
  5403 ;; Auto vars:     Size  Location     Type
  5404 ;;		None
  5405 ;; Return value:  Size  Location     Type
  5406 ;;                  1    wreg      void 
  5407 ;; Registers used:
  5408 ;;		wreg, status,2, status,0, pclath, cstack
  5409 ;; Tracked objects:
  5410 ;;		On entry : 0/0
  5411 ;;		On exit  : 0/0
  5412 ;;		Unchanged: 0/0
  5413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5417 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5418 ;;Total ram usage:        0 bytes
  5419 ;; Hardware stack levels used:    1
  5420 ;; Hardware stack levels required when called:   14
  5421 ;; This function calls:
  5422 ;;		_TMR2_SetInterruptHandler
  5423 ;; This function is called by:
  5424 ;;		_SYSTEM_Initialize
  5425 ;; This function uses a non-reentrant model
  5426 ;;
  5427                           
  5428                           
  5429                           ;psect for function _TMR2_Initialize
  5430  073F                     _TMR2_Initialize:	
  5431                           
  5432                           ;tmr2.c: 69: T2CLKCON = 0x00;
  5433                           
  5434                           ;incstack = 0
  5435                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5436  073F  0020               	movlb	0	; select bank0
  5437  0740  019E               	clrf	30	;volatile
  5438                           
  5439                           ;tmr2.c: 72: T2HLT = 0x00;
  5440  0741  019D               	clrf	29	;volatile
  5441                           
  5442                           ;tmr2.c: 75: T2RST = 0x00;
  5443  0742  019F               	clrf	31	;volatile
  5444                           
  5445                           ;tmr2.c: 78: T2PR = 0xF9;
  5446  0743  30F9               	movlw	249
  5447  0744  009B               	movwf	27	;volatile
  5448                           
  5449                           ;tmr2.c: 81: T2TMR = 0x00;
  5450  0745  019A               	clrf	26	;volatile
  5451                           
  5452                           ;tmr2.c: 84: PIR1bits.TMR2IF = 0;
  5453  0746  1090               	bcf	16,1	;volatile
  5454                           
  5455                           ;tmr2.c: 87: PIE1bits.TMR2IE = 1;
  5456  0747  0021               	movlb	1	; select bank1
  5457  0748  1490               	bsf	16,1	;volatile
  5458                           
  5459                           ;tmr2.c: 90: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
  5460  0749  3003               	movlw	low _TMR2_DefaultInterruptHandler
  5461  074A  0020               	movlb	0	; select bank0
  5462  074B  00C9               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  5463  074C  3000               	movlw	high _TMR2_DefaultInterruptHandler
  5464  074D  00CA               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  5465  074E  318F  2719         	fcall	_TMR2_SetInterruptHandler
  5466                           
  5467                           ;tmr2.c: 93: T2CON = 0xF0;
  5468  0750  30F0               	movlw	240
  5469  0751  0020               	movlb	0	; select bank0
  5470  0752  009C               	movwf	28	;volatile
  5471  0753  0008               	return
  5472  0754                     __end_of_TMR2_Initialize:	
  5473                           
  5474                           	psect	text7
  5475  0F19                     __ptext7:	
  5476 ;; *************** function _TMR2_SetInterruptHandler *****************
  5477 ;; Defined at:
  5478 ;;		line 186 in file "mcc_generated_files/tmr2.c"
  5479 ;; Parameters:    Size  Location     Type
  5480 ;;  InterruptHan    2   12[BANK0 ] PTR FTN()void 
  5481 ;;		 -> MyTimer2ISR(1), TMR2_DefaultInterruptHandler(1), 
  5482 ;; Auto vars:     Size  Location     Type
  5483 ;;		None
  5484 ;; Return value:  Size  Location     Type
  5485 ;;                  1    wreg      void 
  5486 ;; Registers used:
  5487 ;;		wreg
  5488 ;; Tracked objects:
  5489 ;;		On entry : 0/0
  5490 ;;		On exit  : 0/0
  5491 ;;		Unchanged: 0/0
  5492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5493 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5496 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5497 ;;Total ram usage:        2 bytes
  5498 ;; Hardware stack levels used:    1
  5499 ;; Hardware stack levels required when called:   13
  5500 ;; This function calls:
  5501 ;;		Nothing
  5502 ;; This function is called by:
  5503 ;;		_TMR2_Initialize
  5504 ;;		_main
  5505 ;; This function uses a non-reentrant model
  5506 ;;
  5507                           
  5508                           
  5509                           ;psect for function _TMR2_SetInterruptHandler
  5510  0F19                     _TMR2_SetInterruptHandler:	
  5511                           
  5512                           ;tmr2.c: 187: TMR2_InterruptHandler = InterruptHandler;
  5513                           
  5514                           ;incstack = 0
  5515                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  5516  0F19  0020               	movlb	0	; select bank0
  5517  0F1A  084A               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  5518  0F1B  00D8               	movwf	_TMR2_InterruptHandler+1
  5519  0F1C  0849               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  5520  0F1D  00D7               	movwf	_TMR2_InterruptHandler
  5521  0F1E  0008               	return
  5522  0F1F                     __end_of_TMR2_SetInterruptHandler:	
  5523                           
  5524                           	psect	text8
  5525  0FD1                     __ptext8:	
  5526 ;; *************** function _PWM3_Initialize *****************
  5527 ;; Defined at:
  5528 ;;		line 58 in file "mcc_generated_files/pwm3.c"
  5529 ;; Parameters:    Size  Location     Type
  5530 ;;		None
  5531 ;; Auto vars:     Size  Location     Type
  5532 ;;		None
  5533 ;; Return value:  Size  Location     Type
  5534 ;;                  1    wreg      void 
  5535 ;; Registers used:
  5536 ;;		wreg, status,2, status,0
  5537 ;; Tracked objects:
  5538 ;;		On entry : 0/0
  5539 ;;		On exit  : 0/0
  5540 ;;		Unchanged: 0/0
  5541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5545 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5546 ;;Total ram usage:        0 bytes
  5547 ;; Hardware stack levels used:    1
  5548 ;; Hardware stack levels required when called:   13
  5549 ;; This function calls:
  5550 ;;		Nothing
  5551 ;; This function is called by:
  5552 ;;		_SYSTEM_Initialize
  5553 ;; This function uses a non-reentrant model
  5554 ;;
  5555                           
  5556                           
  5557                           ;psect for function _PWM3_Initialize
  5558  0FD1                     _PWM3_Initialize:	
  5559                           
  5560                           ;pwm3.c: 62: PWM3CON = 0x80;
  5561                           
  5562                           ;incstack = 0
  5563                           ; Regs used in _PWM3_Initialize: [wreg+status,2+status,0]
  5564  0FD1  3080               	movlw	128
  5565  0FD2  002C               	movlb	12	; select bank12
  5566  0FD3  0099               	movwf	25	;volatile
  5567                           
  5568                           ;pwm3.c: 65: PWM3DCH = 0x0F;
  5569  0FD4  300F               	movlw	15
  5570  0FD5  0098               	movwf	24	;volatile
  5571                           
  5572                           ;pwm3.c: 68: PWM3DCL = 0x40;
  5573  0FD6  3040               	movlw	64
  5574  0FD7  0097               	movwf	23	;volatile
  5575                           
  5576                           ;pwm3.c: 71: CCPTMRSbits.P3TSEL = 0;
  5577  0FD8  30CF               	movlw	-49
  5578  0FD9  0025               	movlb	5	; select bank5
  5579  0FDA  059E               	andwf	30,f	;volatile
  5580  0FDB  0008               	return
  5581  0FDC                     __end_of_PWM3_Initialize:	
  5582                           
  5583                           	psect	text9
  5584  0318                     __ptext9:	
  5585 ;; *************** function _PIN_MANAGER_Initialize *****************
  5586 ;; Defined at:
  5587 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  5588 ;; Parameters:    Size  Location     Type
  5589 ;;		None
  5590 ;; Auto vars:     Size  Location     Type
  5591 ;;		None
  5592 ;; Return value:  Size  Location     Type
  5593 ;;                  1    wreg      void 
  5594 ;; Registers used:
  5595 ;;		wreg, status,2
  5596 ;; Tracked objects:
  5597 ;;		On entry : 0/0
  5598 ;;		On exit  : 0/0
  5599 ;;		Unchanged: 0/0
  5600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5604 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5605 ;;Total ram usage:        0 bytes
  5606 ;; Hardware stack levels used:    1
  5607 ;; Hardware stack levels required when called:   13
  5608 ;; This function calls:
  5609 ;;		Nothing
  5610 ;; This function is called by:
  5611 ;;		_SYSTEM_Initialize
  5612 ;; This function uses a non-reentrant model
  5613 ;;
  5614                           
  5615                           
  5616                           ;psect for function _PIN_MANAGER_Initialize
  5617  0318                     _PIN_MANAGER_Initialize:	
  5618                           
  5619                           ;pin_manager.c: 60: LATA = 0x00;
  5620                           
  5621                           ;incstack = 0
  5622                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  5623  0318  0022               	movlb	2	; select bank2
  5624  0319  018C               	clrf	12	;volatile
  5625                           
  5626                           ;pin_manager.c: 61: LATB = 0x00;
  5627  031A  018D               	clrf	13	;volatile
  5628                           
  5629                           ;pin_manager.c: 62: LATC = 0x00;
  5630  031B  018E               	clrf	14	;volatile
  5631                           
  5632                           ;pin_manager.c: 67: TRISA = 0x13;
  5633  031C  3013               	movlw	19
  5634  031D  0021               	movlb	1	; select bank1
  5635  031E  008C               	movwf	12	;volatile
  5636                           
  5637                           ;pin_manager.c: 68: TRISB = 0x70;
  5638  031F  3070               	movlw	112
  5639  0320  008D               	movwf	13	;volatile
  5640                           
  5641                           ;pin_manager.c: 69: TRISC = 0x1F;
  5642  0321  301F               	movlw	31
  5643  0322  008E               	movwf	14	;volatile
  5644                           
  5645                           ;pin_manager.c: 74: ANSELC = 0x0E;
  5646  0323  300E               	movlw	14
  5647  0324  0023               	movlb	3	; select bank3
  5648  0325  008E               	movwf	14	;volatile
  5649                           
  5650                           ;pin_manager.c: 75: ANSELB = 0x00;
  5651  0326  018D               	clrf	13	;volatile
  5652                           
  5653                           ;pin_manager.c: 76: ANSELA = 0x01;
  5654  0327  3001               	movlw	1
  5655  0328  008C               	movwf	12	;volatile
  5656                           
  5657                           ;pin_manager.c: 81: WPUB = 0x00;
  5658  0329  0024               	movlb	4	; select bank4
  5659  032A  018D               	clrf	13	;volatile
  5660                           
  5661                           ;pin_manager.c: 82: WPUA = 0x00;
  5662  032B  018C               	clrf	12	;volatile
  5663                           
  5664                           ;pin_manager.c: 83: WPUC = 0x00;
  5665  032C  018E               	clrf	14	;volatile
  5666                           
  5667                           ;pin_manager.c: 84: OPTION_REGbits.nWPUEN = 1;
  5668  032D  0021               	movlb	1	; select bank1
  5669  032E  1795               	bsf	21,7	;volatile
  5670                           
  5671                           ;pin_manager.c: 89: ODCONA = 0x00;
  5672  032F  0025               	movlb	5	; select bank5
  5673  0330  018C               	clrf	12	;volatile
  5674                           
  5675                           ;pin_manager.c: 90: ODCONB = 0x00;
  5676  0331  018D               	clrf	13	;volatile
  5677                           
  5678                           ;pin_manager.c: 91: ODCONC = 0x00;
  5679  0332  018E               	clrf	14	;volatile
  5680                           
  5681                           ;pin_manager.c: 96: SLRCONA = 0x37;
  5682  0333  3037               	movlw	55
  5683  0334  0026               	movlb	6	; select bank6
  5684  0335  008C               	movwf	12	;volatile
  5685                           
  5686                           ;pin_manager.c: 97: SLRCONB = 0xF0;
  5687  0336  30F0               	movlw	240
  5688  0337  008D               	movwf	13	;volatile
  5689                           
  5690                           ;pin_manager.c: 98: SLRCONC = 0xFF;
  5691  0338  30FF               	movlw	255
  5692  0339  008E               	movwf	14	;volatile
  5693                           
  5694                           ;pin_manager.c: 103: INLVLA = 0x3F;
  5695  033A  303F               	movlw	63
  5696  033B  0027               	movlb	7	; select bank7
  5697  033C  008C               	movwf	12	;volatile
  5698                           
  5699                           ;pin_manager.c: 104: INLVLB = 0xF0;
  5700  033D  30F0               	movlw	240
  5701  033E  008D               	movwf	13	;volatile
  5702                           
  5703                           ;pin_manager.c: 105: INLVLC = 0xFF;
  5704  033F  30FF               	movlw	255
  5705  0340  008E               	movwf	14	;volatile
  5706                           
  5707                           ;pin_manager.c: 114: RXPPS = 0x0D;
  5708  0341  300D               	movlw	13
  5709  0342  003C               	movlb	28	; select bank28
  5710  0343  00A4               	movwf	36	;volatile
  5711                           
  5712                           ;pin_manager.c: 115: SSPDATPPS = 0x0C;
  5713  0344  300C               	movlw	12
  5714  0345  00A1               	movwf	33	;volatile
  5715                           
  5716                           ;pin_manager.c: 116: RB6PPS = 0x10;
  5717  0346  3010               	movlw	16
  5718  0347  003D               	movlb	29	; select bank29
  5719  0348  009E               	movwf	30	;volatile
  5720                           
  5721                           ;pin_manager.c: 117: RB7PPS = 0x12;
  5722  0349  3012               	movlw	18
  5723  034A  009F               	movwf	31	;volatile
  5724                           
  5725                           ;pin_manager.c: 118: RB4PPS = 0x11;
  5726  034B  3011               	movlw	17
  5727  034C  009C               	movwf	28	;volatile
  5728                           
  5729                           ;pin_manager.c: 119: RA2PPS = 0x0E;
  5730  034D  300E               	movlw	14
  5731  034E  0092               	movwf	18	;volatile
  5732                           
  5733                           ;pin_manager.c: 120: SSPCLKPPS = 0x0E;
  5734  034F  300E               	movlw	14
  5735  0350  003C               	movlb	28	; select bank28
  5736  0351  00A0               	movwf	32	;volatile
  5737  0352  0008               	return
  5738  0353                     __end_of_PIN_MANAGER_Initialize:	
  5739                           
  5740                           	psect	text10
  5741  0F32                     __ptext10:	
  5742 ;; *************** function _OSCILLATOR_Initialize *****************
  5743 ;; Defined at:
  5744 ;;		line 60 in file "mcc_generated_files/mcc.c"
  5745 ;; Parameters:    Size  Location     Type
  5746 ;;		None
  5747 ;; Auto vars:     Size  Location     Type
  5748 ;;		None
  5749 ;; Return value:  Size  Location     Type
  5750 ;;                  1    wreg      void 
  5751 ;; Registers used:
  5752 ;;		wreg, status,2
  5753 ;; Tracked objects:
  5754 ;;		On entry : 0/0
  5755 ;;		On exit  : 0/0
  5756 ;;		Unchanged: 0/0
  5757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5761 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5762 ;;Total ram usage:        0 bytes
  5763 ;; Hardware stack levels used:    1
  5764 ;; Hardware stack levels required when called:   13
  5765 ;; This function calls:
  5766 ;;		Nothing
  5767 ;; This function is called by:
  5768 ;;		_SYSTEM_Initialize
  5769 ;; This function uses a non-reentrant model
  5770 ;;
  5771                           
  5772                           
  5773                           ;psect for function _OSCILLATOR_Initialize
  5774  0F32                     _OSCILLATOR_Initialize:	
  5775                           
  5776                           ;mcc.c: 63: OSCCON = 0x6A;
  5777                           
  5778                           ;incstack = 0
  5779                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5780  0F32  306A               	movlw	106
  5781  0F33  0021               	movlb	1	; select bank1
  5782  0F34  0099               	movwf	25	;volatile
  5783                           
  5784                           ;mcc.c: 65: OSCTUNE = 0x00;
  5785  0F35  0198               	clrf	24	;volatile
  5786                           
  5787                           ;mcc.c: 67: BORCON = 0x00;
  5788  0F36  0022               	movlb	2	; select bank2
  5789  0F37  0196               	clrf	22	;volatile
  5790  0F38  0008               	return
  5791  0F39                     __end_of_OSCILLATOR_Initialize:	
  5792                           
  5793                           	psect	text11
  5794  0FB1                     __ptext11:	
  5795 ;; *************** function _I2C_Initialize *****************
  5796 ;; Defined at:
  5797 ;;		line 167 in file "mcc_generated_files/i2c_master.c"
  5798 ;; Parameters:    Size  Location     Type
  5799 ;;		None
  5800 ;; Auto vars:     Size  Location     Type
  5801 ;;		None
  5802 ;; Return value:  Size  Location     Type
  5803 ;;                  1    wreg      void 
  5804 ;; Registers used:
  5805 ;;		wreg, status,2
  5806 ;; Tracked objects:
  5807 ;;		On entry : 0/0
  5808 ;;		On exit  : 0/0
  5809 ;;		Unchanged: 0/0
  5810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5815 ;;Total ram usage:        0 bytes
  5816 ;; Hardware stack levels used:    1
  5817 ;; Hardware stack levels required when called:   13
  5818 ;; This function calls:
  5819 ;;		Nothing
  5820 ;; This function is called by:
  5821 ;;		_SYSTEM_Initialize
  5822 ;; This function uses a non-reentrant model
  5823 ;;
  5824                           
  5825                           
  5826                           ;psect for function _I2C_Initialize
  5827  0FB1                     _I2C_Initialize:	
  5828                           
  5829                           ;i2c_master.c: 169: SSP1STAT = 0x80;
  5830                           
  5831                           ;incstack = 0
  5832                           ; Regs used in _I2C_Initialize: [wreg+status,2]
  5833  0FB1  3080               	movlw	128
  5834  0FB2  0024               	movlb	4	; select bank4
  5835  0FB3  0094               	movwf	20	;volatile
  5836                           
  5837                           ;i2c_master.c: 170: SSP1CON1 = 0x08;
  5838  0FB4  3008               	movlw	8
  5839  0FB5  0095               	movwf	21	;volatile
  5840                           
  5841                           ;i2c_master.c: 171: SSP1CON2 = 0x00;
  5842  0FB6  0196               	clrf	22	;volatile
  5843                           
  5844                           ;i2c_master.c: 172: SSP1ADD = 0x09;
  5845  0FB7  3009               	movlw	9
  5846  0FB8  0092               	movwf	18	;volatile
  5847                           
  5848                           ;i2c_master.c: 173: SSP1CON1bits.SSPEN = 0;
  5849  0FB9  1295               	bcf	21,5	;volatile
  5850  0FBA  0008               	return
  5851  0FBB                     __end_of_I2C_Initialize:	
  5852                           
  5853                           	psect	text12
  5854  03C4                     __ptext12:	
  5855 ;; *************** function _EUSART_Initialize *****************
  5856 ;; Defined at:
  5857 ;;		line 83 in file "mcc_generated_files/eusart.c"
  5858 ;; Parameters:    Size  Location     Type
  5859 ;;		None
  5860 ;; Auto vars:     Size  Location     Type
  5861 ;;		None
  5862 ;; Return value:  Size  Location     Type
  5863 ;;                  1    wreg      void 
  5864 ;; Registers used:
  5865 ;;		wreg, status,2, status,0, pclath, cstack
  5866 ;; Tracked objects:
  5867 ;;		On entry : 0/0
  5868 ;;		On exit  : 0/0
  5869 ;;		Unchanged: 0/0
  5870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5874 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5875 ;;Total ram usage:        0 bytes
  5876 ;; Hardware stack levels used:    1
  5877 ;; Hardware stack levels required when called:   14
  5878 ;; This function calls:
  5879 ;;		_EUSART_SetErrorHandler
  5880 ;;		_EUSART_SetFramingErrorHandler
  5881 ;;		_EUSART_SetOverrunErrorHandler
  5882 ;;		_EUSART_SetRxInterruptHandler
  5883 ;; This function is called by:
  5884 ;;		_SYSTEM_Initialize
  5885 ;; This function uses a non-reentrant model
  5886 ;;
  5887                           
  5888                           
  5889                           ;psect for function _EUSART_Initialize
  5890  03C4                     _EUSART_Initialize:	
  5891                           
  5892                           ;eusart.c: 86: PIE1bits.RCIE = 0;
  5893                           
  5894                           ;incstack = 0
  5895                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5896  03C4  0021               	movlb	1	; select bank1
  5897  03C5  1290               	bcf	16,5	;volatile
  5898                           
  5899                           ;eusart.c: 87: EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  5900  03C6  302A               	movlw	low _EUSART_Receive_ISR
  5901  03C7  0020               	movlb	0	; select bank0
  5902  03C8  00C9               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  5903  03C9  3004               	movlw	high _EUSART_Receive_ISR
  5904  03CA  00CA               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  5905  03CB  318F  2713  3183   	fcall	_EUSART_SetRxInterruptHandler
  5906                           
  5907                           ;eusart.c: 91: BAUD1CON = 0x09;
  5908  03CE  3009               	movlw	9
  5909  03CF  0023               	movlb	3	; select bank3
  5910  03D0  009F               	movwf	31	;volatile
  5911                           
  5912                           ;eusart.c: 94: RC1STA = 0x90;
  5913  03D1  3090               	movlw	144
  5914  03D2  009D               	movwf	29	;volatile
  5915                           
  5916                           ;eusart.c: 97: TX1STA = 0x24;
  5917  03D3  3024               	movlw	36
  5918  03D4  009E               	movwf	30	;volatile
  5919                           
  5920                           ;eusart.c: 100: SPBRGL = 0x67;
  5921  03D5  3067               	movlw	103
  5922  03D6  009B               	movwf	27	;volatile
  5923                           
  5924                           ;eusart.c: 103: SPBRGH = 0x00;
  5925  03D7  019C               	clrf	28	;volatile
  5926                           
  5927                           ;eusart.c: 106: EUSART_SetFramingErrorHandler(EUSART_DefaultFramingErrorHandler);
  5928  03D8  3042               	movlw	low _EUSART_DefaultFramingErrorHandler
  5929  03D9  0020               	movlb	0	; select bank0
  5930  03DA  00C9               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  5931  03DB  300E               	movlw	high _EUSART_DefaultFramingErrorHandler
  5932  03DC  00CA               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  5933  03DD  318F  2707  3183   	fcall	_EUSART_SetFramingErrorHandler
  5934                           
  5935                           ;eusart.c: 107: EUSART_SetOverrunErrorHandler(EUSART_DefaultOverrunErrorHandler);
  5936  03E0  3089               	movlw	low _EUSART_DefaultOverrunErrorHandler
  5937  03E1  0020               	movlb	0	; select bank0
  5938  03E2  00C9               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  5939  03E3  300E               	movlw	high _EUSART_DefaultOverrunErrorHandler
  5940  03E4  00CA               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  5941  03E5  318F  270D  3183   	fcall	_EUSART_SetOverrunErrorHandler
  5942                           
  5943                           ;eusart.c: 108: EUSART_SetErrorHandler(EUSART_DefaultErrorHandler);
  5944  03E8  3047               	movlw	low _EUSART_DefaultErrorHandler
  5945  03E9  0020               	movlb	0	; select bank0
  5946  03EA  00C9               	movwf	EUSART_SetErrorHandler@interruptHandler
  5947  03EB  300E               	movlw	high _EUSART_DefaultErrorHandler
  5948  03EC  00CA               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  5949  03ED  318F  2701         	fcall	_EUSART_SetErrorHandler
  5950                           
  5951                           ;eusart.c: 110: eusartRxLastError.status = 0;
  5952  03EF  0020               	movlb	0	; select bank0
  5953  03F0  01B9               	clrf	_eusartRxLastError	;volatile
  5954                           
  5955                           ;eusart.c: 113: eusartRxHead = 0;
  5956  03F1  01BC               	clrf	_eusartRxHead	;volatile
  5957                           
  5958                           ;eusart.c: 114: eusartRxTail = 0;
  5959  03F2  01BB               	clrf	_eusartRxTail	;volatile
  5960                           
  5961                           ;eusart.c: 115: eusartRxCount = 0;
  5962  03F3  01BA               	clrf	_eusartRxCount	;volatile
  5963                           
  5964                           ;eusart.c: 118: PIE1bits.RCIE = 1;
  5965  03F4  0021               	movlb	1	; select bank1
  5966  03F5  1690               	bsf	16,5	;volatile
  5967  03F6  0008               	return
  5968  03F7                     __end_of_EUSART_Initialize:	
  5969                           
  5970                           	psect	text13
  5971  0F13                     __ptext13:	
  5972 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  5973 ;; Defined at:
  5974 ;;		line 234 in file "mcc_generated_files/eusart.c"
  5975 ;; Parameters:    Size  Location     Type
  5976 ;;  interruptHan    2   12[BANK0 ] PTR FTN()void 
  5977 ;;		 -> MyUART_ISR(1), EUSART_Receive_ISR(1), 
  5978 ;; Auto vars:     Size  Location     Type
  5979 ;;		None
  5980 ;; Return value:  Size  Location     Type
  5981 ;;                  1    wreg      void 
  5982 ;; Registers used:
  5983 ;;		wreg
  5984 ;; Tracked objects:
  5985 ;;		On entry : 0/0
  5986 ;;		On exit  : 0/0
  5987 ;;		Unchanged: 0/0
  5988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5989 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5992 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5993 ;;Total ram usage:        2 bytes
  5994 ;; Hardware stack levels used:    1
  5995 ;; Hardware stack levels required when called:   13
  5996 ;; This function calls:
  5997 ;;		Nothing
  5998 ;; This function is called by:
  5999 ;;		_EUSART_Initialize
  6000 ;;		_main
  6001 ;; This function uses a non-reentrant model
  6002 ;;
  6003                           
  6004                           
  6005                           ;psect for function _EUSART_SetRxInterruptHandler
  6006  0F13                     _EUSART_SetRxInterruptHandler:	
  6007                           
  6008                           ;eusart.c: 235: EUSART_RxDefaultInterruptHandler = interruptHandler;
  6009                           
  6010                           ;incstack = 0
  6011                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  6012  0F13  0020               	movlb	0	; select bank0
  6013  0F14  084A               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  6014  0F15  00E0               	movwf	_EUSART_RxDefaultInterruptHandler+1
  6015  0F16  0849               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  6016  0F17  00DF               	movwf	_EUSART_RxDefaultInterruptHandler
  6017  0F18  0008               	return
  6018  0F19                     __end_of_EUSART_SetRxInterruptHandler:	
  6019                           
  6020                           	psect	text14
  6021  0F0D                     __ptext14:	
  6022 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  6023 ;; Defined at:
  6024 ;;		line 225 in file "mcc_generated_files/eusart.c"
  6025 ;; Parameters:    Size  Location     Type
  6026 ;;  interruptHan    2   12[BANK0 ] PTR FTN()void 
  6027 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  6028 ;; Auto vars:     Size  Location     Type
  6029 ;;		None
  6030 ;; Return value:  Size  Location     Type
  6031 ;;                  1    wreg      void 
  6032 ;; Registers used:
  6033 ;;		wreg
  6034 ;; Tracked objects:
  6035 ;;		On entry : 0/0
  6036 ;;		On exit  : 0/0
  6037 ;;		Unchanged: 0/0
  6038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6039 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6042 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6043 ;;Total ram usage:        2 bytes
  6044 ;; Hardware stack levels used:    1
  6045 ;; Hardware stack levels required when called:   13
  6046 ;; This function calls:
  6047 ;;		Nothing
  6048 ;; This function is called by:
  6049 ;;		_EUSART_Initialize
  6050 ;; This function uses a non-reentrant model
  6051 ;;
  6052                           
  6053                           
  6054                           ;psect for function _EUSART_SetOverrunErrorHandler
  6055  0F0D                     _EUSART_SetOverrunErrorHandler:	
  6056                           
  6057                           ;eusart.c: 226: EUSART_OverrunErrorHandler = interruptHandler;
  6058                           
  6059                           ;incstack = 0
  6060                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  6061  0F0D  0020               	movlb	0	; select bank0
  6062  0F0E  084A               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  6063  0F0F  00DC               	movwf	_EUSART_OverrunErrorHandler+1
  6064  0F10  0849               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  6065  0F11  00DB               	movwf	_EUSART_OverrunErrorHandler
  6066  0F12  0008               	return
  6067  0F13                     __end_of_EUSART_SetOverrunErrorHandler:	
  6068                           
  6069                           	psect	text15
  6070  0F07                     __ptext15:	
  6071 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  6072 ;; Defined at:
  6073 ;;		line 221 in file "mcc_generated_files/eusart.c"
  6074 ;; Parameters:    Size  Location     Type
  6075 ;;  interruptHan    2   12[BANK0 ] PTR FTN()void 
  6076 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  6077 ;; Auto vars:     Size  Location     Type
  6078 ;;		None
  6079 ;; Return value:  Size  Location     Type
  6080 ;;                  1    wreg      void 
  6081 ;; Registers used:
  6082 ;;		wreg
  6083 ;; Tracked objects:
  6084 ;;		On entry : 0/0
  6085 ;;		On exit  : 0/0
  6086 ;;		Unchanged: 0/0
  6087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6088 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6091 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6092 ;;Total ram usage:        2 bytes
  6093 ;; Hardware stack levels used:    1
  6094 ;; Hardware stack levels required when called:   13
  6095 ;; This function calls:
  6096 ;;		Nothing
  6097 ;; This function is called by:
  6098 ;;		_EUSART_Initialize
  6099 ;; This function uses a non-reentrant model
  6100 ;;
  6101                           
  6102                           
  6103                           ;psect for function _EUSART_SetFramingErrorHandler
  6104  0F07                     _EUSART_SetFramingErrorHandler:	
  6105                           
  6106                           ;eusart.c: 222: EUSART_FramingErrorHandler = interruptHandler;
  6107                           
  6108                           ;incstack = 0
  6109                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  6110  0F07  0020               	movlb	0	; select bank0
  6111  0F08  084A               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  6112  0F09  00DE               	movwf	_EUSART_FramingErrorHandler+1
  6113  0F0A  0849               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  6114  0F0B  00DD               	movwf	_EUSART_FramingErrorHandler
  6115  0F0C  0008               	return
  6116  0F0D                     __end_of_EUSART_SetFramingErrorHandler:	
  6117                           
  6118                           	psect	text16
  6119  0F01                     __ptext16:	
  6120 ;; *************** function _EUSART_SetErrorHandler *****************
  6121 ;; Defined at:
  6122 ;;		line 229 in file "mcc_generated_files/eusart.c"
  6123 ;; Parameters:    Size  Location     Type
  6124 ;;  interruptHan    2   12[BANK0 ] PTR FTN()void 
  6125 ;;		 -> EUSART_DefaultErrorHandler(1), 
  6126 ;; Auto vars:     Size  Location     Type
  6127 ;;		None
  6128 ;; Return value:  Size  Location     Type
  6129 ;;                  1    wreg      void 
  6130 ;; Registers used:
  6131 ;;		wreg
  6132 ;; Tracked objects:
  6133 ;;		On entry : 0/0
  6134 ;;		On exit  : 0/0
  6135 ;;		Unchanged: 0/0
  6136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6137 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6140 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6141 ;;Total ram usage:        2 bytes
  6142 ;; Hardware stack levels used:    1
  6143 ;; Hardware stack levels required when called:   13
  6144 ;; This function calls:
  6145 ;;		Nothing
  6146 ;; This function is called by:
  6147 ;;		_EUSART_Initialize
  6148 ;; This function uses a non-reentrant model
  6149 ;;
  6150                           
  6151                           
  6152                           ;psect for function _EUSART_SetErrorHandler
  6153  0F01                     _EUSART_SetErrorHandler:	
  6154                           
  6155                           ;eusart.c: 230: EUSART_ErrorHandler = interruptHandler;
  6156                           
  6157                           ;incstack = 0
  6158                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  6159  0F01  0020               	movlb	0	; select bank0
  6160  0F02  084A               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  6161  0F03  00DA               	movwf	_EUSART_ErrorHandler+1
  6162  0F04  0849               	movf	EUSART_SetErrorHandler@interruptHandler,w
  6163  0F05  00D9               	movwf	_EUSART_ErrorHandler
  6164  0F06  0008               	return
  6165  0F07                     __end_of_EUSART_SetErrorHandler:	
  6166                           
  6167                           	psect	text17
  6168  03F7                     __ptext17:	
  6169 ;; *************** function _I2C_Write1ByteRegister *****************
  6170 ;; Defined at:
  6171 ;;		line 91 in file "mcc_generated_files/examples/i2c_master_example.c"
  6172 ;; Parameters:    Size  Location     Type
  6173 ;;  address         1    wreg     unsigned char 
  6174 ;;  reg             1    5[BANK1 ] unsigned char 
  6175 ;;  data            1    6[BANK1 ] unsigned char 
  6176 ;; Auto vars:     Size  Location     Type
  6177 ;;  address         1    8[BANK1 ] unsigned char 
  6178 ;; Return value:  Size  Location     Type
  6179 ;;                  1    wreg      void 
  6180 ;; Registers used:
  6181 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6182 ;; Tracked objects:
  6183 ;;		On entry : 0/0
  6184 ;;		On exit  : 0/0
  6185 ;;		Unchanged: 0/0
  6186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6187 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6188 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6189 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6190 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6191 ;;Total ram usage:        4 bytes
  6192 ;; Hardware stack levels used:    1
  6193 ;; Hardware stack levels required when called:   21
  6194 ;; This function calls:
  6195 ;;		_I2C_Close
  6196 ;;		_I2C_MasterWrite
  6197 ;;		_I2C_Open
  6198 ;;		_I2C_SetAddressNackCallback
  6199 ;;		_I2C_SetBuffer
  6200 ;;		_I2C_SetDataCompleteCallback
  6201 ;; This function is called by:
  6202 ;;		_main
  6203 ;; This function uses a non-reentrant model
  6204 ;;
  6205                           
  6206                           
  6207                           ;psect for function _I2C_Write1ByteRegister
  6208  03F7                     _I2C_Write1ByteRegister:	
  6209                           
  6210                           ;incstack = 0
  6211 ;; hardware stack exceeded
  6212                           ; Regs used in _I2C_Write1ByteRegister: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6213                           ;I2C_Write1ByteRegister@address stored from wreg
  6214  03F7  0021               	movlb	1	; select bank1
  6215  03F8  00C5               	movwf	I2C_Write1ByteRegister@address^(0+128)
  6216  03F9                     l6077:	
  6217                           ;i2c_master_example.c: 93: while(!I2C_Open(address));
  6218                           
  6219  03F9  0021               	movlb	1	; select bank1
  6220  03FA  0845               	movf	I2C_Write1ByteRegister@address^(0+128),w
  6221  03FB  3182  22DA  3183   	fcall	_I2C_Open
  6222  03FE  3A00               	xorlw	0
  6223  03FF  1903               	skipnz
  6224  0400  2BF9               	goto	l6077
  6225                           
  6226                           ;i2c_master_example.c: 94: I2C_SetDataCompleteCallback(wr1RegCompleteHandler,&data);
  6227  0401  30D1               	movlw	low _wr1RegCompleteHandler
  6228  0402  0020               	movlb	0	; select bank0
  6229  0403  00CE               	movwf	I2C_SetDataCompleteCallback@cb
  6230  0404  3006               	movlw	high _wr1RegCompleteHandler
  6231  0405  00CF               	movwf	I2C_SetDataCompleteCallback@cb+1
  6232  0406  30C3               	movlw	(low (I2C_Write1ByteRegister@data| 0))& (0+255)
  6233  0407  0021               	movlb	1	; select bank1
  6234  0408  00C4               	movwf	??_I2C_Write1ByteRegister^(0+128)
  6235  0409  0844               	movf	??_I2C_Write1ByteRegister^(0+128),w
  6236  040A  0020               	movlb	0	; select bank0
  6237  040B  00D0               	movwf	I2C_SetDataCompleteCallback@ptr
  6238  040C  3187  27D6  3183   	fcall	_I2C_SetDataCompleteCallback
  6239                           
  6240                           ;i2c_master_example.c: 95: I2C_SetBuffer(&reg,1);
  6241  040F  3001               	movlw	1
  6242  0410  0020               	movlb	0	; select bank0
  6243  0411  00C9               	movwf	I2C_SetBuffer@bufferSize
  6244  0412  3000               	movlw	0
  6245  0413  00CA               	movwf	I2C_SetBuffer@bufferSize+1
  6246  0414  30C2               	movlw	(low (I2C_Write1ByteRegister@reg| 0))& (0+255)
  6247  0415  3187  2754  3183   	fcall	_I2C_SetBuffer
  6248                           
  6249                           ;i2c_master_example.c: 96: I2C_SetAddressNackCallback((0),(0));
  6250  0418  3000               	movlw	0
  6251  0419  0020               	movlb	0	; select bank0
  6252  041A  00CE               	movwf	I2C_SetAddressNackCallback@cb
  6253  041B  00CF               	movwf	I2C_SetAddressNackCallback@cb+1
  6254  041C  01D0               	clrf	I2C_SetAddressNackCallback@ptr
  6255  041D  3187  27C9  3183   	fcall	_I2C_SetAddressNackCallback
  6256                           
  6257                           ;i2c_master_example.c: 97: I2C_MasterWrite();
  6258  0420  318E  26C5  3183   	fcall	_I2C_MasterWrite
  6259  0423                     l6087:	
  6260                           ;i2c_master_example.c: 98: while(I2C_BUSY == I2C_Close());
  6261                           
  6262  0423  3186  2615  3183   	fcall	_I2C_Close
  6263  0426  3A01               	xorlw	1
  6264  0427  1D03               	btfss	3,2
  6265  0428  0008               	return
  6266  0429  2C23               	goto	l6087
  6267  042A                     __end_of_I2C_Write1ByteRegister:	
  6268                           
  6269                           	psect	text18
  6270  07C9                     __ptext18:	
  6271 ;; *************** function _I2C_SetAddressNackCallback *****************
  6272 ;; Defined at:
  6273 ;;		line 283 in file "mcc_generated_files/i2c_master.c"
  6274 ;; Parameters:    Size  Location     Type
  6275 ;;  cb              2   17[BANK0 ] PTR FTN(PTR void ,)enum 
  6276 ;;		 -> Absolute function(1), 
  6277 ;;  ptr             1   19[BANK0 ] PTR void 
  6278 ;;		 -> NULL(0), 
  6279 ;; Auto vars:     Size  Location     Type
  6280 ;;		None
  6281 ;; Return value:  Size  Location     Type
  6282 ;;                  1    wreg      void 
  6283 ;; Registers used:
  6284 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6285 ;; Tracked objects:
  6286 ;;		On entry : 0/0
  6287 ;;		On exit  : 0/0
  6288 ;;		Unchanged: 0/0
  6289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6290 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6292 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6293 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6294 ;;Total ram usage:        4 bytes
  6295 ;; Hardware stack levels used:    1
  6296 ;; Hardware stack levels required when called:   14
  6297 ;; This function calls:
  6298 ;;		_I2C_SetCallback
  6299 ;; This function is called by:
  6300 ;;		_I2C_Write1ByteRegister
  6301 ;;		_I2C_Read2ByteRegister
  6302 ;;		_I2C_Write2ByteRegister
  6303 ;;		_I2C_WriteNBytes
  6304 ;;		_I2C_ReadDataBlock
  6305 ;; This function uses a non-reentrant model
  6306 ;;
  6307                           
  6308                           
  6309                           ;psect for function _I2C_SetAddressNackCallback
  6310  07C9                     _I2C_SetAddressNackCallback:	
  6311                           
  6312                           ;i2c_master.c: 285: I2C_SetCallback(I2C_ADDR_NACK, cb, ptr);
  6313                           
  6314                           ;incstack = 0
  6315                           ; Regs used in _I2C_SetAddressNackCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6316  07C9  0020               	movlb	0	; select bank0
  6317  07CA  084F               	movf	I2C_SetAddressNackCallback@cb+1,w
  6318  07CB  00CA               	movwf	I2C_SetCallback@cb+1
  6319  07CC  084E               	movf	I2C_SetAddressNackCallback@cb,w
  6320  07CD  00C9               	movwf	I2C_SetCallback@cb
  6321  07CE  0850               	movf	I2C_SetAddressNackCallback@ptr,w
  6322  07CF  00D1               	movwf	??_I2C_SetAddressNackCallback
  6323  07D0  0851               	movf	??_I2C_SetAddressNackCallback,w
  6324  07D1  00CB               	movwf	I2C_SetCallback@ptr
  6325  07D2  3002               	movlw	2
  6326  07D3  3185  2564         	fcall	_I2C_SetCallback
  6327  07D5  0008               	return
  6328  07D6                     __end_of_I2C_SetAddressNackCallback:	
  6329                           
  6330                           	psect	text19
  6331  02DA                     __ptext19:	
  6332 ;; *************** function _I2C_Open *****************
  6333 ;; Defined at:
  6334 ;;		line 176 in file "mcc_generated_files/i2c_master.c"
  6335 ;; Parameters:    Size  Location     Type
  6336 ;;  address         1    wreg     unsigned char 
  6337 ;; Auto vars:     Size  Location     Type
  6338 ;;  address         1   13[BANK0 ] unsigned char 
  6339 ;;  returnValue     1   14[BANK0 ] enum E92
  6340 ;; Return value:  Size  Location     Type
  6341 ;;                  1    wreg      enum E92
  6342 ;; Registers used:
  6343 ;;		wreg, status,2, status,0, pclath, cstack
  6344 ;; Tracked objects:
  6345 ;;		On entry : 0/0
  6346 ;;		On exit  : 0/0
  6347 ;;		Unchanged: 0/0
  6348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6350 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6351 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6352 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6353 ;;Total ram usage:        3 bytes
  6354 ;; Hardware stack levels used:    1
  6355 ;; Hardware stack levels required when called:   14
  6356 ;; This function calls:
  6357 ;;		_I2C_MasterClearIrq
  6358 ;;		_I2C_MasterOpen
  6359 ;; This function is called by:
  6360 ;;		_I2C_Write1ByteRegister
  6361 ;;		_I2C_Read2ByteRegister
  6362 ;;		_I2C_Write2ByteRegister
  6363 ;;		_I2C_WriteNBytes
  6364 ;;		_I2C_ReadNBytes
  6365 ;;		_I2C_ReadDataBlock
  6366 ;; This function uses a non-reentrant model
  6367 ;;
  6368                           
  6369                           
  6370                           ;psect for function _I2C_Open
  6371  02DA                     _I2C_Open:	
  6372                           
  6373                           ;incstack = 0
  6374                           ; Regs used in _I2C_Open: [wreg+status,2+status,0+pclath+cstack]
  6375                           ;I2C_Open@address stored from wreg
  6376  02DA  0020               	movlb	0	; select bank0
  6377  02DB  00CA               	movwf	I2C_Open@address
  6378                           
  6379                           ;i2c_master.c: 178: i2c_error_t returnValue = I2C_BUSY;
  6380  02DC  01CB               	clrf	I2C_Open@returnValue
  6381  02DD  0ACB               	incf	I2C_Open@returnValue,f
  6382                           
  6383                           ;i2c_master.c: 180: if(!I2C_Status.inUse)
  6384  02DE  0021               	movlb	1	; select bank1
  6385  02DF  193C               	btfsc	(_I2C_Status^(0+128)+28),2
  6386  02E0  2B15               	goto	l321
  6387                           
  6388                           ;i2c_master.c: 181: {
  6389                           ;i2c_master.c: 182: I2C_Status.address = address;
  6390  02E1  0020               	movlb	0	; select bank0
  6391  02E2  084A               	movf	I2C_Open@address,w
  6392  02E3  00C9               	movwf	??_I2C_Open
  6393  02E4  0849               	movf	??_I2C_Open,w
  6394  02E5  0021               	movlb	1	; select bank1
  6395  02E6  00B6               	movwf	(_I2C_Status^(0+128)+22)
  6396                           
  6397                           ;i2c_master.c: 183: I2C_Status.busy = 0;
  6398  02E7  10BC               	bcf	(_I2C_Status^(0+128)+28),1
  6399                           
  6400                           ;i2c_master.c: 184: I2C_Status.inUse = 1;
  6401  02E8  153C               	bsf	(_I2C_Status^(0+128)+28),2
  6402                           
  6403                           ;i2c_master.c: 185: I2C_Status.addressNackCheck = 0;
  6404  02E9  103C               	bcf	(_I2C_Status^(0+128)+28),0
  6405                           
  6406                           ;i2c_master.c: 186: I2C_Status.state = I2C_RESET;
  6407  02EA  300E               	movlw	14
  6408  02EB  0020               	movlb	0	; select bank0
  6409  02EC  00C9               	movwf	??_I2C_Open
  6410  02ED  0849               	movf	??_I2C_Open,w
  6411  02EE  0021               	movlb	1	; select bank1
  6412  02EF  00BA               	movwf	(_I2C_Status^(0+128)+26)
  6413                           
  6414                           ;i2c_master.c: 187: I2C_Status.time_out_value = 500;
  6415  02F0  30F4               	movlw	244
  6416  02F1  00B4               	movwf	(_I2C_Status^(0+128)+20)
  6417  02F2  3001               	movlw	1
  6418  02F3  00B5               	movwf	(_I2C_Status^(0+128)+21)
  6419                           
  6420                           ;i2c_master.c: 188: I2C_Status.bufferFree = 1;
  6421  02F4  15BC               	bsf	(_I2C_Status^(0+128)+28),3
  6422                           
  6423                           ;i2c_master.c: 191: I2C_Status.callbackTable[I2C_DATA_COMPLETE]=I2C_CallbackReturnStop;
  6424  02F5  30E9               	movlw	low _I2C_CallbackReturnStop
  6425  02F6  00A0               	movwf	_I2C_Status^(0+128)
  6426  02F7  300E               	movlw	high _I2C_CallbackReturnStop
  6427  02F8  00A1               	movwf	(_I2C_Status^(0+128)+1)
  6428                           
  6429                           ;i2c_master.c: 192: I2C_Status.callbackPayload[I2C_DATA_COMPLETE] = (0);
  6430  02F9  01AC               	clrf	(low ((_I2C_Status| 0+12)))^(0+128)
  6431                           
  6432                           ;i2c_master.c: 193: I2C_Status.callbackTable[I2C_WRITE_COLLISION]=I2C_CallbackReturnStop
      +                          ;
  6433  02FA  30E9               	movlw	low _I2C_CallbackReturnStop
  6434  02FB  00A2               	movwf	(low ((_I2C_Status| 0+2)))^(0+128)
  6435  02FC  300E               	movlw	high _I2C_CallbackReturnStop
  6436  02FD  00A3               	movwf	((low ((_I2C_Status| 0+2)))^(0+128)+1)
  6437                           
  6438                           ;i2c_master.c: 194: I2C_Status.callbackPayload[I2C_WRITE_COLLISION] = (0);
  6439  02FE  01AD               	clrf	(low ((_I2C_Status| 0+13)))^(0+128)
  6440                           
  6441                           ;i2c_master.c: 195: I2C_Status.callbackTable[I2C_ADDR_NACK]=I2C_CallbackReturnStop;
  6442  02FF  30E9               	movlw	low _I2C_CallbackReturnStop
  6443  0300  00A4               	movwf	(low ((_I2C_Status| 0+4)))^(0+128)
  6444  0301  300E               	movlw	high _I2C_CallbackReturnStop
  6445  0302  00A5               	movwf	((low ((_I2C_Status| 0+4)))^(0+128)+1)
  6446                           
  6447                           ;i2c_master.c: 196: I2C_Status.callbackPayload[I2C_ADDR_NACK] = (0);
  6448  0303  01AE               	clrf	(low ((_I2C_Status| 0+14)))^(0+128)
  6449                           
  6450                           ;i2c_master.c: 197: I2C_Status.callbackTable[I2C_DATA_NACK]=I2C_CallbackReturnStop;
  6451  0304  30E9               	movlw	low _I2C_CallbackReturnStop
  6452  0305  00A6               	movwf	(low ((_I2C_Status| 0+6)))^(0+128)
  6453  0306  300E               	movlw	high _I2C_CallbackReturnStop
  6454  0307  00A7               	movwf	((low ((_I2C_Status| 0+6)))^(0+128)+1)
  6455                           
  6456                           ;i2c_master.c: 198: I2C_Status.callbackPayload[I2C_DATA_NACK] = (0);
  6457  0308  01AF               	clrf	(low ((_I2C_Status| 0+15)))^(0+128)
  6458                           
  6459                           ;i2c_master.c: 199: I2C_Status.callbackTable[I2C_TIMEOUT]=I2C_CallbackReturnReset;
  6460  0309  30EF               	movlw	low _I2C_CallbackReturnReset
  6461  030A  00A8               	movwf	(low ((_I2C_Status| 0+8)))^(0+128)
  6462  030B  300E               	movlw	high _I2C_CallbackReturnReset
  6463  030C  00A9               	movwf	((low ((_I2C_Status| 0+8)))^(0+128)+1)
  6464                           
  6465                           ;i2c_master.c: 200: I2C_Status.callbackPayload[I2C_TIMEOUT] = (0);
  6466  030D  01B0               	clrf	(low ((_I2C_Status| 0+16)))^(0+128)
  6467                           
  6468                           ;i2c_master.c: 202: I2C_MasterClearIrq();
  6469  030E  318E  2665  3182   	fcall	_I2C_MasterClearIrq
  6470                           
  6471                           ;i2c_master.c: 203: I2C_MasterOpen();
  6472  0311  3187  27E3         	fcall	_I2C_MasterOpen
  6473                           
  6474                           ;i2c_master.c: 204: returnValue = I2C_NOERR;
  6475  0313  0020               	movlb	0	; select bank0
  6476  0314  01CB               	clrf	I2C_Open@returnValue
  6477  0315                     l321:	
  6478                           
  6479                           ;i2c_master.c: 205: }
  6480                           ;i2c_master.c: 206: return returnValue;
  6481  0315  0020               	movlb	0	; select bank0
  6482  0316  084B               	movf	I2C_Open@returnValue,w
  6483  0317  0008               	return
  6484  0318                     __end_of_I2C_Open:	
  6485                           
  6486                           	psect	text20
  6487  07E3                     __ptext20:	
  6488 ;; *************** function _I2C_MasterOpen *****************
  6489 ;; Defined at:
  6490 ;;		line 543 in file "mcc_generated_files/i2c_master.c"
  6491 ;; Parameters:    Size  Location     Type
  6492 ;;		None
  6493 ;; Auto vars:     Size  Location     Type
  6494 ;;		None
  6495 ;; Return value:  Size  Location     Type
  6496 ;;                  1    wreg      unsigned char 
  6497 ;; Registers used:
  6498 ;;		wreg, status,2
  6499 ;; Tracked objects:
  6500 ;;		On entry : 0/0
  6501 ;;		On exit  : 0/0
  6502 ;;		Unchanged: 0/0
  6503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6508 ;;Total ram usage:        0 bytes
  6509 ;; Hardware stack levels used:    1
  6510 ;; Hardware stack levels required when called:   13
  6511 ;; This function calls:
  6512 ;;		Nothing
  6513 ;; This function is called by:
  6514 ;;		_I2C_Open
  6515 ;; This function uses a non-reentrant model
  6516 ;;
  6517                           
  6518                           
  6519                           ;psect for function _I2C_MasterOpen
  6520  07E3                     _I2C_MasterOpen:	
  6521                           
  6522                           ;i2c_master.c: 545: if(!SSP1CON1bits.SSPEN)
  6523                           
  6524                           ;incstack = 0
  6525                           ; Regs used in _I2C_MasterOpen: [wreg+status,2]
  6526  07E3  0024               	movlb	4	; select bank4
  6527  07E4  1A95               	btfsc	21,5	;volatile
  6528  07E5  0008               	return
  6529                           
  6530                           ;i2c_master.c: 546: {
  6531                           ;i2c_master.c: 547: SSP1STAT = 0x80;
  6532  07E6  3080               	movlw	128
  6533  07E7  0094               	movwf	20	;volatile
  6534                           
  6535                           ;i2c_master.c: 548: SSP1CON1 = 0x08;
  6536  07E8  3008               	movlw	8
  6537  07E9  0095               	movwf	21	;volatile
  6538                           
  6539                           ;i2c_master.c: 549: SSP1CON2 = 0x00;
  6540  07EA  0196               	clrf	22	;volatile
  6541                           
  6542                           ;i2c_master.c: 550: SSP1ADD = 0x09;
  6543  07EB  3009               	movlw	9
  6544  07EC  0092               	movwf	18	;volatile
  6545                           
  6546                           ;i2c_master.c: 551: SSP1CON1bits.SSPEN = 1;
  6547  07ED  1695               	bsf	21,5	;volatile
  6548                           
  6549                           ;i2c_master.c: 552: return 1;
  6550                           ;	Return value of _I2C_MasterOpen is never used
  6551  07EE  0008               	return
  6552  07EF                     __end_of_I2C_MasterOpen:	
  6553                           ;i2c_master.c: 553: }
  6554                           ;i2c_master.c: 554: return 0;
  6555                           ;	Return value of _I2C_MasterOpen is never used
  6556                           
  6557                           
  6558                           	psect	text21
  6559  0EC5                     __ptext21:	
  6560 ;; *************** function _I2C_MasterWrite *****************
  6561 ;; Defined at:
  6562 ;;		line 251 in file "mcc_generated_files/i2c_master.c"
  6563 ;; Parameters:    Size  Location     Type
  6564 ;;		None
  6565 ;; Auto vars:     Size  Location     Type
  6566 ;;		None
  6567 ;; Return value:  Size  Location     Type
  6568 ;;                  1    wreg      enum E92
  6569 ;; Registers used:
  6570 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6571 ;; Tracked objects:
  6572 ;;		On entry : 0/0
  6573 ;;		On exit  : 0/0
  6574 ;;		Unchanged: 0/0
  6575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6580 ;;Total ram usage:        0 bytes
  6581 ;; Hardware stack levels used:    1
  6582 ;; Hardware stack levels required when called:   20
  6583 ;; This function calls:
  6584 ;;		_I2C_MasterOperation
  6585 ;; This function is called by:
  6586 ;;		_I2C_Write1ByteRegister
  6587 ;;		_I2C_Read2ByteRegister
  6588 ;;		_I2C_Write2ByteRegister
  6589 ;;		_I2C_WriteNBytes
  6590 ;;		_I2C_ReadDataBlock
  6591 ;; This function uses a non-reentrant model
  6592 ;;
  6593                           
  6594                           
  6595                           ;psect for function _I2C_MasterWrite
  6596  0EC5                     _I2C_MasterWrite:	
  6597                           
  6598                           ;i2c_master.c: 253: return I2C_MasterOperation(0);
  6599                           ;	Return value of _I2C_MasterWrite is never used
  6600                           
  6601                           ;incstack = 0
  6602 ;; hardware stack exceeded
  6603                           ; Regs used in _I2C_MasterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6604  0EC5  3000               	movlw	0
  6605  0EC6  3186  266E         	fcall	_I2C_MasterOperation
  6606  0EC8  0008               	return
  6607  0EC9                     __end_of_I2C_MasterWrite:	
  6608                           
  6609                           	psect	text22
  6610  066E                     __ptext22:	
  6611 ;; *************** function _I2C_MasterOperation *****************
  6612 ;; Defined at:
  6613 ;;		line 224 in file "mcc_generated_files/i2c_master.c"
  6614 ;; Parameters:    Size  Location     Type
  6615 ;;  read            1    wreg     unsigned char 
  6616 ;; Auto vars:     Size  Location     Type
  6617 ;;  read            1    3[BANK1 ] unsigned char 
  6618 ;;  returnValue     1    4[BANK1 ] enum E92
  6619 ;; Return value:  Size  Location     Type
  6620 ;;                  1    wreg      enum E92
  6621 ;; Registers used:
  6622 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6623 ;; Tracked objects:
  6624 ;;		On entry : 0/0
  6625 ;;		On exit  : 0/0
  6626 ;;		Unchanged: 0/0
  6627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6629 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6630 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6631 ;;      Totals:         0       1       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6632 ;;Total ram usage:        3 bytes
  6633 ;; Hardware stack levels used:    1
  6634 ;; Hardware stack levels required when called:   19
  6635 ;; This function calls:
  6636 ;;		_I2C_MasterStart
  6637 ;;		_I2C_Poller
  6638 ;; This function is called by:
  6639 ;;		_I2C_MasterWrite
  6640 ;;		_I2C_MasterRead
  6641 ;; This function uses a non-reentrant model
  6642 ;;
  6643                           
  6644                           
  6645                           ;psect for function _I2C_MasterOperation
  6646  066E                     _I2C_MasterOperation:	
  6647                           
  6648                           ;incstack = 0
  6649 ;; hardware stack exceeded
  6650                           ; Regs used in _I2C_MasterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6651                           ;I2C_MasterOperation@read stored from wreg
  6652  066E  0021               	movlb	1	; select bank1
  6653  066F  00C0               	movwf	I2C_MasterOperation@read^(0+128)
  6654                           
  6655                           ;i2c_master.c: 226: i2c_error_t returnValue = I2C_BUSY;
  6656  0670  01C1               	clrf	I2C_MasterOperation@returnValue^(0+128)
  6657  0671  0AC1               	incf	I2C_MasterOperation@returnValue^(0+128),f
  6658                           
  6659                           ;i2c_master.c: 227: if(!I2C_Status.busy)
  6660  0672  18BC               	btfsc	(_I2C_Status^(0+128)+28),1
  6661  0673  2E87               	goto	l5995
  6662                           
  6663                           ;i2c_master.c: 228: {
  6664                           ;i2c_master.c: 229: I2C_Status.busy = 1;
  6665  0674  14BC               	bsf	(_I2C_Status^(0+128)+28),1
  6666                           
  6667                           ;i2c_master.c: 230: returnValue = I2C_NOERR;
  6668  0675  01C1               	clrf	I2C_MasterOperation@returnValue^(0+128)
  6669                           
  6670                           ;i2c_master.c: 232: if(read)
  6671  0676  0840               	movf	I2C_MasterOperation@read^(0+128),w
  6672  0677  1903               	btfsc	3,2
  6673  0678  2E7C               	goto	l5989
  6674                           
  6675                           ;i2c_master.c: 233: {
  6676                           ;i2c_master.c: 234: I2C_Status.state = I2C_SEND_ADR_READ;
  6677  0679  01BA               	clrf	(_I2C_Status^(0+128)+26)
  6678  067A  0ABA               	incf	(_I2C_Status^(0+128)+26),f
  6679                           
  6680                           ;i2c_master.c: 235: }
  6681  067B  2E82               	goto	l5991
  6682  067C                     l5989:	
  6683                           
  6684                           ;i2c_master.c: 236: else
  6685                           ;i2c_master.c: 237: {
  6686                           ;i2c_master.c: 238: I2C_Status.state = I2C_SEND_ADR_WRITE;
  6687  067C  3002               	movlw	2
  6688  067D  0020               	movlb	0	; select bank0
  6689  067E  00D6               	movwf	??_I2C_MasterOperation
  6690  067F  0856               	movf	??_I2C_MasterOperation,w
  6691  0680  0021               	movlb	1	; select bank1
  6692  0681  00BA               	movwf	(_I2C_Status^(0+128)+26)
  6693  0682                     l5991:	
  6694                           
  6695                           ;i2c_master.c: 239: }
  6696                           ;i2c_master.c: 240: I2C_MasterStart();
  6697  0682  318E  266E  3186   	fcall	_I2C_MasterStart
  6698                           
  6699                           ;i2c_master.c: 241: I2C_Poller();
  6700  0685  318F  27A7         	fcall	_I2C_Poller
  6701  0687                     l5995:	
  6702                           
  6703                           ;i2c_master.c: 242: }
  6704                           ;i2c_master.c: 243: return returnValue;
  6705  0687  0021               	movlb	1	; select bank1
  6706  0688  0841               	movf	I2C_MasterOperation@returnValue^(0+128),w
  6707  0689  0008               	return
  6708  068A                     __end_of_I2C_MasterOperation:	
  6709                           
  6710                           	psect	text23
  6711  0FA7                     __ptext23:	
  6712 ;; *************** function _I2C_Poller *****************
  6713 ;; Defined at:
  6714 ;;		line 312 in file "mcc_generated_files/i2c_master.c"
  6715 ;; Parameters:    Size  Location     Type
  6716 ;;		None
  6717 ;; Auto vars:     Size  Location     Type
  6718 ;;		None
  6719 ;; Return value:  Size  Location     Type
  6720 ;;                  1    wreg      void 
  6721 ;; Registers used:
  6722 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6723 ;; Tracked objects:
  6724 ;;		On entry : 0/0
  6725 ;;		On exit  : 0/0
  6726 ;;		Unchanged: 0/0
  6727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6732 ;;Total ram usage:        0 bytes
  6733 ;; Hardware stack levels used:    1
  6734 ;; Hardware stack levels required when called:   18
  6735 ;; This function calls:
  6736 ;;		_I2C_MasterFsm
  6737 ;;		_I2C_MasterWaitForEvent
  6738 ;; This function is called by:
  6739 ;;		_I2C_MasterOperation
  6740 ;; This function uses a non-reentrant model
  6741 ;;
  6742                           
  6743                           
  6744                           ;psect for function _I2C_Poller
  6745  0FA7                     _I2C_Poller:	
  6746  0FA7                     l5963:	
  6747                           ;i2c_master.c: 314: while(I2C_Status.busy)
  6748                           
  6749                           ;incstack = 0
  6750 ;; hardware stack exceeded
  6751                           ; Regs used in _I2C_Poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6752                           
  6753  0FA7  0021               	movlb	1	; select bank1
  6754  0FA8  1CBC               	btfss	(_I2C_Status^(0+128)+28),1
  6755  0FA9  0008               	return
  6756                           
  6757                           ;i2c_master.c: 315: {
  6758                           ;i2c_master.c: 316: I2C_MasterWaitForEvent();
  6759  0FAA  318E  26C1  318F   	fcall	_I2C_MasterWaitForEvent
  6760                           
  6761                           ;i2c_master.c: 317: I2C_MasterFsm();
  6762  0FAD  3185  253D  318F   	fcall	_I2C_MasterFsm
  6763  0FB0  2FA7               	goto	l5963
  6764  0FB1                     __end_of_I2C_Poller:	
  6765                           
  6766                           	psect	text24
  6767  0EC1                     __ptext24:	
  6768 ;; *************** function _I2C_MasterWaitForEvent *****************
  6769 ;; Defined at:
  6770 ;;		line 650 in file "mcc_generated_files/i2c_master.c"
  6771 ;; Parameters:    Size  Location     Type
  6772 ;;		None
  6773 ;; Auto vars:     Size  Location     Type
  6774 ;;		None
  6775 ;; Return value:  Size  Location     Type
  6776 ;;                  1    wreg      void 
  6777 ;; Registers used:
  6778 ;;		None
  6779 ;; Tracked objects:
  6780 ;;		On entry : 0/0
  6781 ;;		On exit  : 0/0
  6782 ;;		Unchanged: 0/0
  6783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6788 ;;Total ram usage:        0 bytes
  6789 ;; Hardware stack levels used:    1
  6790 ;; Hardware stack levels required when called:   13
  6791 ;; This function calls:
  6792 ;;		Nothing
  6793 ;; This function is called by:
  6794 ;;		_I2C_Poller
  6795 ;; This function uses a non-reentrant model
  6796 ;;
  6797                           
  6798                           
  6799                           ;psect for function _I2C_MasterWaitForEvent
  6800  0EC1                     _I2C_MasterWaitForEvent:	
  6801  0EC1                     l544:	
  6802                           ;incstack = 0
  6803 ;; hardware stack exceeded
  6804                           ; Regs used in _I2C_MasterWaitForEvent: []
  6805                           ;i2c_master.c: 652: while(1)
  6806                           
  6807                           
  6808                           ;i2c_master.c: 653: {
  6809                           ;i2c_master.c: 654: if(PIR1bits.SSP1IF)
  6810  0EC1  0020               	movlb	0	; select bank0
  6811  0EC2  1990               	btfsc	16,3	;volatile
  6812  0EC3  0008               	return
  6813  0EC4  2EC1               	goto	l544
  6814  0EC5                     __end_of_I2C_MasterWaitForEvent:	
  6815                           ;i2c_master.c: 655: {
  6816                           ;i2c_master.c: 656: break;
  6817                           
  6818                           
  6819                           	psect	text25
  6820  053D                     __ptext25:	
  6821 ;; *************** function _I2C_MasterFsm *****************
  6822 ;; Defined at:
  6823 ;;		line 321 in file "mcc_generated_files/i2c_master.c"
  6824 ;; Parameters:    Size  Location     Type
  6825 ;;		None
  6826 ;; Auto vars:     Size  Location     Type
  6827 ;;		None
  6828 ;; Return value:  Size  Location     Type
  6829 ;;                  1    wreg      void 
  6830 ;; Registers used:
  6831 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6832 ;; Tracked objects:
  6833 ;;		On entry : 0/0
  6834 ;;		On exit  : 0/0
  6835 ;;		Unchanged: 0/0
  6836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6839 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6840 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6841 ;;Total ram usage:        3 bytes
  6842 ;; Hardware stack levels used:    1
  6843 ;; Hardware stack levels required when called:   17
  6844 ;; This function calls:
  6845 ;;		_I2C_DO_ADDRESS_NACK
  6846 ;;		_I2C_DO_IDLE
  6847 ;;		_I2C_DO_RCEN
  6848 ;;		_I2C_DO_RESET
  6849 ;;		_I2C_DO_RX
  6850 ;;		_I2C_DO_RX_ACK
  6851 ;;		_I2C_DO_RX_NACK_RESTART
  6852 ;;		_I2C_DO_RX_NACK_STOP
  6853 ;;		_I2C_DO_SEND_ADR_READ
  6854 ;;		_I2C_DO_SEND_ADR_WRITE
  6855 ;;		_I2C_DO_SEND_RESTART
  6856 ;;		_I2C_DO_SEND_RESTART_READ
  6857 ;;		_I2C_DO_SEND_RESTART_WRITE
  6858 ;;		_I2C_DO_SEND_STOP
  6859 ;;		_I2C_DO_TX
  6860 ;;		_I2C_DO_TX_EMPTY
  6861 ;;		_I2C_MasterClearIrq
  6862 ;;		_I2C_MasterIsNack
  6863 ;; This function is called by:
  6864 ;;		_I2C_Poller
  6865 ;; This function uses a non-reentrant model
  6866 ;;
  6867                           
  6868                           
  6869                           ;psect for function _I2C_MasterFsm
  6870  053D                     _I2C_MasterFsm:	
  6871                           
  6872                           ;i2c_master.c: 323: I2C_MasterClearIrq();
  6873                           
  6874                           ;incstack = 0
  6875 ;; hardware stack exceeded
  6876                           ; Regs used in _I2C_MasterFsm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6877  053D  318E  2665  3185   	fcall	_I2C_MasterClearIrq
  6878                           
  6879                           ;i2c_master.c: 325: if(I2C_Status.addressNackCheck && I2C_MasterIsNack())
  6880  0540  0021               	movlb	1	; select bank1
  6881  0541  1C3C               	btfss	(_I2C_Status^(0+128)+28),0
  6882  0542  2D4E               	goto	l5933
  6883  0543  318E  26FB  3185   	fcall	_I2C_MasterIsNack
  6884  0546  3A00               	xorlw	0
  6885  0547  1903               	skipnz
  6886  0548  2D4E               	goto	l5933
  6887                           
  6888                           ;i2c_master.c: 326: {
  6889                           ;i2c_master.c: 327: I2C_Status.state = I2C_ADDRESS_NACK;
  6890  0549  300F               	movlw	15
  6891  054A  0021               	movlb	1	; select bank1
  6892  054B  00BD               	movwf	??_I2C_MasterFsm^(0+128)
  6893  054C  083D               	movf	??_I2C_MasterFsm^(0+128),w
  6894  054D  00BA               	movwf	(_I2C_Status^(0+128)+26)
  6895  054E                     l5933:	
  6896                           
  6897                           ;i2c_master.c: 328: }
  6898                           ;i2c_master.c: 329: I2C_Status.state = fsmStateTable[I2C_Status.state]();
  6899  054E  0021               	movlb	1	; select bank1
  6900  054F  083A               	movf	(_I2C_Status^(0+128)+26),w
  6901  0550  00BD               	movwf	??_I2C_MasterFsm^(0+128)
  6902  0551  01BE               	clrf	(??_I2C_MasterFsm^(0+128)+1)
  6903  0552  35BD               	lslf	??_I2C_MasterFsm^(0+128),f
  6904  0553  0DBE               	rlf	(??_I2C_MasterFsm^(0+128)+1),f
  6905  0554  30F5               	movlw	low (_fsmStateTable| (0+32768))
  6906  0555  073D               	addwf	??_I2C_MasterFsm^(0+128),w
  6907  0556  0084               	movwf	4
  6908  0557  3085               	movlw	high (_fsmStateTable| (0+32768))
  6909  0558  3D3E               	addwfc	(??_I2C_MasterFsm+1)^(0+128),w
  6910  0559  0085               	movwf	5
  6911  055A  3F01               	moviw [1]fsr0
  6912  055B  008A               	movwf	10
  6913  055C  3F00               	moviw [0]fsr0
  6914  055D  000A               	callw
  6915  055E  3185               	pagesel	$
  6916  055F  0021               	movlb	1	; select bank1
  6917  0560  00BF               	movwf	(??_I2C_MasterFsm+2)^(0+128)
  6918  0561  083F               	movf	(??_I2C_MasterFsm+2)^(0+128),w
  6919  0562  00BA               	movwf	(_I2C_Status^(0+128)+26)
  6920  0563  0008               	return
  6921  0564                     __end_of_I2C_MasterFsm:	
  6922                           
  6923                           	psect	text26
  6924  04E9                     __ptext26:	
  6925 ;; *************** function _I2C_DO_ADDRESS_NACK *****************
  6926 ;; Defined at:
  6927 ;;		line 500 in file "mcc_generated_files/i2c_master.c"
  6928 ;; Parameters:    Size  Location     Type
  6929 ;;		None
  6930 ;; Auto vars:     Size  Location     Type
  6931 ;;		None
  6932 ;; Return value:  Size  Location     Type
  6933 ;;                  1    wreg      enum E12103
  6934 ;; Registers used:
  6935 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6936 ;; Tracked objects:
  6937 ;;		On entry : 0/0
  6938 ;;		On exit  : 0/0
  6939 ;;		Unchanged: 0/0
  6940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6943 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6944 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6945 ;;Total ram usage:        1 bytes
  6946 ;; Hardware stack levels used:    1
  6947 ;; Hardware stack levels required when called:   16
  6948 ;; This function calls:
  6949 ;;		Absolute function
  6950 ;;		_I2C_CallbackReturnReset
  6951 ;;		_I2C_CallbackReturnStop
  6952 ;;		_I2C_DO_SEND_RESTART
  6953 ;;		_I2C_DO_SEND_STOP
  6954 ;;		_rd1RegCompleteHandler
  6955 ;;		_rd2RegCompleteHandler
  6956 ;;		_rdBlkRegCompleteHandler
  6957 ;;		_wr1RegCompleteHandler
  6958 ;;		_wr2RegCompleteHandler
  6959 ;; This function is called by:
  6960 ;;		i1_I2C_MasterFsm
  6961 ;;		_I2C_MasterFsm
  6962 ;; This function uses a non-reentrant model
  6963 ;;
  6964                           
  6965                           
  6966                           ;psect for function _I2C_DO_ADDRESS_NACK
  6967  04E9                     _I2C_DO_ADDRESS_NACK:	
  6968                           
  6969                           ;Skip over the trampoline to the duplicate function for level 1
  6970  04E9  1C7E               	btfss	126,0
  6971  04EA  2CED               	goto	l5889
  6972  04EB  3185  2DD2         	ljmp	i1l5779
  6973  04ED                     _I2C_DO_ADDRESS_NACK$intlevel0:	
  6974  04ED                     l5889:	
  6975                           ;incstack = 0
  6976 ;; hardware stack exceeded
  6977                           ; Regs used in _I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6978                           
  6979                           
  6980                           ;i2c_master.c: 502: I2C_Status.addressNackCheck = 0;
  6981  04ED  0021               	movlb	1	; select bank1
  6982  04EE  103C               	bcf	(_I2C_Status^(0+128)+28),0
  6983                           
  6984                           ;i2c_master.c: 503: I2C_Status.error = I2C_FAIL;
  6985  04EF  3002               	movlw	2
  6986  04F0  0020               	movlb	0	; select bank0
  6987  04F1  00D3               	movwf	??_I2C_DO_ADDRESS_NACK
  6988  04F2  0853               	movf	??_I2C_DO_ADDRESS_NACK,w
  6989  04F3  0021               	movlb	1	; select bank1
  6990  04F4  00BB               	movwf	(_I2C_Status^(0+128)+27)
  6991                           
  6992                           ;i2c_master.c: 504: switch(I2C_Status.callbackTable[I2C_ADDR_NACK](I2C_Status.callbackPa
      +                          yload[I2C_ADDR_NACK]))
  6993  04F5  2CFC               	goto	l5903
  6994  04F6                     l5893:	
  6995                           ;i2c_master.c: 505: {
  6996                           ;i2c_master.c: 506: case I2C_RESTART_READ:
  6997                           
  6998                           
  6999                           ;i2c_master.c: 507: case I2C_RESTART_WRITE:
  7000                           ;i2c_master.c: 508: return I2C_DO_SEND_RESTART();
  7001  04F6  318F  2759         	fcall	_I2C_DO_SEND_RESTART
  7002  04F8  0008               	return
  7003  04F9                     l5897:	
  7004                           ;i2c_master.c: 509: default:
  7005                           
  7006                           
  7007                           ;i2c_master.c: 510: return I2C_DO_SEND_STOP();
  7008  04F9  318F  2761         	fcall	_I2C_DO_SEND_STOP
  7009                           
  7010                           ;i2c_master.c: 511: }
  7011  04FB  0008               	return
  7012  04FC                     l5903:	
  7013  04FC  0021               	movlb	1	; select bank1
  7014  04FD  082E               	movf	(low ((_I2C_Status| 0+14)))^(0+128),w
  7015  04FE  0020               	movlb	0	; select bank0
  7016  04FF  00D3               	movwf	??_I2C_DO_ADDRESS_NACK
  7017  0500  0853               	movf	??_I2C_DO_ADDRESS_NACK,w
  7018  0501  00D2               	movwf	I2C_CallbackReturnReset@funPtr
  7019  0502  3004               	movlw	4
  7020  0503  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
  7021  0504  0086               	movwf	6
  7022  0505  0187               	clrf	7
  7023  0506  3F41               	moviw [1]fsr1
  7024  0507  008A               	movwf	10
  7025  0508  3F40               	moviw [0]fsr1
  7026  0509  000A               	callw
  7027  050A  3184               	pagesel	$
  7028                           
  7029                           ; Switch size 1, requested type "space"
  7030                           ; Number of cases is 2, Range of values is 2 to 3
  7031                           ; switch strategies available:
  7032                           ; Name         Instructions Cycles
  7033                           ; simple_byte            7     4 (average)
  7034                           ; direct_byte           13     9 (fixed)
  7035                           ; jumptable            263     9 (fixed)
  7036                           ;	Chosen strategy is simple_byte
  7037  050B  3A02               	xorlw	2	; case 2
  7038  050C  1903               	skipnz
  7039  050D  2CF6               	goto	l5893
  7040  050E  3A01               	xorlw	1	; case 3
  7041  050F  1903               	skipnz
  7042  0510  2CF6               	goto	l5893
  7043  0511  2CF9               	goto	l5897
  7044  0512  0008               	return
  7045  0513                     __end_of_I2C_DO_ADDRESS_NACK:	
  7046                           
  7047                           	psect	text27
  7048  0F8A                     __ptext27:	
  7049 ;; *************** function _I2C_DO_RESET *****************
  7050 ;; Defined at:
  7051 ;;		line 494 in file "mcc_generated_files/i2c_master.c"
  7052 ;; Parameters:    Size  Location     Type
  7053 ;;		None
  7054 ;; Auto vars:     Size  Location     Type
  7055 ;;		None
  7056 ;; Return value:  Size  Location     Type
  7057 ;;                  1    wreg      enum E12103
  7058 ;; Registers used:
  7059 ;;		wreg, status,2
  7060 ;; Tracked objects:
  7061 ;;		On entry : 0/0
  7062 ;;		On exit  : 0/0
  7063 ;;		Unchanged: 0/0
  7064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7069 ;;Total ram usage:        0 bytes
  7070 ;; Hardware stack levels used:    1
  7071 ;; Hardware stack levels required when called:   13
  7072 ;; This function calls:
  7073 ;;		Nothing
  7074 ;; This function is called by:
  7075 ;;		i1_I2C_MasterFsm
  7076 ;;		_I2C_MasterFsm
  7077 ;; This function uses a non-reentrant model
  7078 ;;
  7079                           
  7080                           
  7081                           ;psect for function _I2C_DO_RESET
  7082  0F8A                     _I2C_DO_RESET:	
  7083                           
  7084                           ;Skip over the trampoline to the duplicate function for level 1
  7085  0F8A  1C7E               	btfss	126,0
  7086  0F8B  2F8E               	goto	l4171
  7087  0F8C  318E  2ED3         	ljmp	i1l2825
  7088  0F8E                     _I2C_DO_RESET$intlevel0:	
  7089  0F8E                     l4171:	
  7090                           ;incstack = 0
  7091 ;; hardware stack exceeded
  7092                           ; Regs used in _I2C_DO_RESET: [wreg+status,2]
  7093                           
  7094                           
  7095                           ;i2c_master.c: 496: I2C_Status.busy = 0;
  7096  0F8E  0021               	movlb	1	; select bank1
  7097  0F8F  10BC               	bcf	(_I2C_Status^(0+128)+28),1
  7098                           
  7099                           ;i2c_master.c: 497: I2C_Status.error = I2C_NOERR;
  7100  0F90  01BB               	clrf	(_I2C_Status^(0+128)+27)
  7101                           
  7102                           ;i2c_master.c: 498: return I2C_RESET;
  7103  0F91  300E               	movlw	14
  7104  0F92  0008               	return
  7105  0F93                     __end_of_I2C_DO_RESET:	
  7106                           
  7107                           	psect	text28
  7108  0F79                     __ptext28:	
  7109 ;; *************** function _I2C_DO_RX_NACK_RESTART *****************
  7110 ;; Defined at:
  7111 ;;		line 488 in file "mcc_generated_files/i2c_master.c"
  7112 ;; Parameters:    Size  Location     Type
  7113 ;;		None
  7114 ;; Auto vars:     Size  Location     Type
  7115 ;;		None
  7116 ;; Return value:  Size  Location     Type
  7117 ;;                  1    wreg      enum E12103
  7118 ;; Registers used:
  7119 ;;		wreg, status,2, status,0, pclath, cstack
  7120 ;; Tracked objects:
  7121 ;;		On entry : 0/0
  7122 ;;		On exit  : 0/0
  7123 ;;		Unchanged: 0/0
  7124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7129 ;;Total ram usage:        0 bytes
  7130 ;; Hardware stack levels used:    1
  7131 ;; Hardware stack levels required when called:   14
  7132 ;; This function calls:
  7133 ;;		_I2C_MasterSendNack
  7134 ;; This function is called by:
  7135 ;;		_I2C_DO_RX
  7136 ;;		i1_I2C_MasterFsm
  7137 ;;		_I2C_MasterFsm
  7138 ;; This function uses a non-reentrant model
  7139 ;;
  7140                           
  7141                           
  7142                           ;psect for function _I2C_DO_RX_NACK_RESTART
  7143  0F79                     _I2C_DO_RX_NACK_RESTART:	
  7144                           
  7145                           ;Skip over the trampoline to the duplicate function for level 1
  7146  0F79  1C7E               	btfss	126,0
  7147  0F7A  2F7D               	goto	l4017
  7148  0F7B  318E  2EAD         	ljmp	i1l2675
  7149  0F7D                     _I2C_DO_RX_NACK_RESTART$intlevel0:	
  7150  0F7D                     l4017:	
  7151                           ;incstack = 0
  7152 ;; hardware stack exceeded
  7153                           ; Regs used in _I2C_DO_RX_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  7154                           
  7155                           
  7156                           ;i2c_master.c: 490: I2C_MasterSendNack();
  7157  0F7D  318E  26B9         	fcall	_I2C_MasterSendNack
  7158                           
  7159                           ;i2c_master.c: 491: return I2C_SEND_RESTART;
  7160  0F7F  3009               	movlw	9
  7161  0F80  0008               	return
  7162  0F81                     __end_of_I2C_DO_RX_NACK_RESTART:	
  7163                           
  7164                           	psect	text29
  7165  0F71                     __ptext29:	
  7166 ;; *************** function _I2C_DO_RX_NACK_STOP *****************
  7167 ;; Defined at:
  7168 ;;		line 482 in file "mcc_generated_files/i2c_master.c"
  7169 ;; Parameters:    Size  Location     Type
  7170 ;;		None
  7171 ;; Auto vars:     Size  Location     Type
  7172 ;;		None
  7173 ;; Return value:  Size  Location     Type
  7174 ;;                  1    wreg      enum E12103
  7175 ;; Registers used:
  7176 ;;		wreg, status,2, status,0, pclath, cstack
  7177 ;; Tracked objects:
  7178 ;;		On entry : 0/0
  7179 ;;		On exit  : 0/0
  7180 ;;		Unchanged: 0/0
  7181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7185 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7186 ;;Total ram usage:        0 bytes
  7187 ;; Hardware stack levels used:    1
  7188 ;; Hardware stack levels required when called:   14
  7189 ;; This function calls:
  7190 ;;		_I2C_MasterSendNack
  7191 ;; This function is called by:
  7192 ;;		_I2C_DO_RX
  7193 ;;		i1_I2C_MasterFsm
  7194 ;;		_I2C_MasterFsm
  7195 ;; This function uses a non-reentrant model
  7196 ;;
  7197                           
  7198                           
  7199                           ;psect for function _I2C_DO_RX_NACK_STOP
  7200  0F71                     _I2C_DO_RX_NACK_STOP:	
  7201                           
  7202                           ;Skip over the trampoline to the duplicate function for level 1
  7203  0F71  1C7E               	btfss	126,0
  7204  0F72  2F75               	goto	l4023
  7205  0F73  318E  2EA9         	ljmp	i1l2669
  7206  0F75                     _I2C_DO_RX_NACK_STOP$intlevel0:	
  7207  0F75                     l4023:	
  7208                           ;incstack = 0
  7209 ;; hardware stack exceeded
  7210                           ; Regs used in _I2C_DO_RX_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  7211                           
  7212                           
  7213                           ;i2c_master.c: 484: I2C_MasterSendNack();
  7214  0F75  318E  26B9         	fcall	_I2C_MasterSendNack
  7215                           
  7216                           ;i2c_master.c: 485: return I2C_SEND_STOP;
  7217  0F77  300A               	movlw	10
  7218  0F78  0008               	return
  7219  0F79                     __end_of_I2C_DO_RX_NACK_STOP:	
  7220                           
  7221                           	psect	text30
  7222  0F69                     __ptext30:	
  7223 ;; *************** function _I2C_DO_RX_ACK *****************
  7224 ;; Defined at:
  7225 ;;		line 475 in file "mcc_generated_files/i2c_master.c"
  7226 ;; Parameters:    Size  Location     Type
  7227 ;;		None
  7228 ;; Auto vars:     Size  Location     Type
  7229 ;;		None
  7230 ;; Return value:  Size  Location     Type
  7231 ;;                  1    wreg      enum E12103
  7232 ;; Registers used:
  7233 ;;		wreg, status,2, status,0, pclath, cstack
  7234 ;; Tracked objects:
  7235 ;;		On entry : 0/0
  7236 ;;		On exit  : 0/0
  7237 ;;		Unchanged: 0/0
  7238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7243 ;;Total ram usage:        0 bytes
  7244 ;; Hardware stack levels used:    1
  7245 ;; Hardware stack levels required when called:   14
  7246 ;; This function calls:
  7247 ;;		_I2C_MasterSendAck
  7248 ;; This function is called by:
  7249 ;;		i1_I2C_MasterFsm
  7250 ;;		_I2C_MasterFsm
  7251 ;; This function uses a non-reentrant model
  7252 ;;
  7253                           
  7254                           
  7255                           ;psect for function _I2C_DO_RX_ACK
  7256  0F69                     _I2C_DO_RX_ACK:	
  7257                           
  7258                           ;Skip over the trampoline to the duplicate function for level 1
  7259  0F69  1C7E               	btfss	126,0
  7260  0F6A  2F6D               	goto	l4165
  7261  0F6B  318E  2EA5         	ljmp	i1l2819
  7262  0F6D                     _I2C_DO_RX_ACK$intlevel0:	
  7263  0F6D                     l4165:	
  7264                           ;incstack = 0
  7265 ;; hardware stack exceeded
  7266                           ; Regs used in _I2C_DO_RX_ACK: [wreg+status,2+status,0+pclath+cstack]
  7267                           
  7268                           
  7269                           ;i2c_master.c: 477: I2C_MasterSendAck();
  7270  0F6D  318E  26BD         	fcall	_I2C_MasterSendAck
  7271                           
  7272                           ;i2c_master.c: 478: return I2C_RCEN;
  7273  0F6F  3005               	movlw	5
  7274  0F70  0008               	return
  7275  0F71                     __end_of_I2C_DO_RX_ACK:	
  7276                           
  7277                           	psect	text31
  7278  0F61                     __ptext31:	
  7279 ;; *************** function _I2C_DO_SEND_STOP *****************
  7280 ;; Defined at:
  7281 ;;		line 469 in file "mcc_generated_files/i2c_master.c"
  7282 ;; Parameters:    Size  Location     Type
  7283 ;;		None
  7284 ;; Auto vars:     Size  Location     Type
  7285 ;;		None
  7286 ;; Return value:  Size  Location     Type
  7287 ;;                  1    wreg      enum E12103
  7288 ;; Registers used:
  7289 ;;		wreg, status,2, status,0, pclath, cstack
  7290 ;; Tracked objects:
  7291 ;;		On entry : 0/0
  7292 ;;		On exit  : 0/0
  7293 ;;		Unchanged: 0/0
  7294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7298 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7299 ;;Total ram usage:        0 bytes
  7300 ;; Hardware stack levels used:    1
  7301 ;; Hardware stack levels required when called:   14
  7302 ;; This function calls:
  7303 ;;		_I2C_MasterStop
  7304 ;; This function is called by:
  7305 ;;		_I2C_DO_TX
  7306 ;;		_I2C_DO_TX_EMPTY
  7307 ;;		_I2C_DO_ADDRESS_NACK
  7308 ;;		i1_I2C_MasterFsm
  7309 ;;		_I2C_MasterFsm
  7310 ;; This function uses a non-reentrant model
  7311 ;;
  7312                           
  7313                           
  7314                           ;psect for function _I2C_DO_SEND_STOP
  7315  0F61                     _I2C_DO_SEND_STOP:	
  7316                           
  7317                           ;Skip over the trampoline to the duplicate function for level 1
  7318  0F61  1C7E               	btfss	126,0
  7319  0F62  2F65               	goto	l4005
  7320  0F63  318E  2EA1         	ljmp	i1l2663
  7321  0F65                     _I2C_DO_SEND_STOP$intlevel0:	
  7322  0F65                     l4005:	
  7323                           ;incstack = 0
  7324 ;; hardware stack exceeded
  7325                           ; Regs used in _I2C_DO_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
  7326                           
  7327                           
  7328                           ;i2c_master.c: 471: I2C_MasterStop();
  7329  0F65  318E  2674         	fcall	_I2C_MasterStop
  7330                           
  7331                           ;i2c_master.c: 472: return I2C_IDLE;
  7332  0F67  3000               	movlw	0
  7333  0F68  0008               	return
  7334  0F69                     __end_of_I2C_DO_SEND_STOP:	
  7335                           
  7336                           	psect	text32
  7337  0F59                     __ptext32:	
  7338 ;; *************** function _I2C_DO_SEND_RESTART *****************
  7339 ;; Defined at:
  7340 ;;		line 463 in file "mcc_generated_files/i2c_master.c"
  7341 ;; Parameters:    Size  Location     Type
  7342 ;;		None
  7343 ;; Auto vars:     Size  Location     Type
  7344 ;;		None
  7345 ;; Return value:  Size  Location     Type
  7346 ;;                  1    wreg      enum E12103
  7347 ;; Registers used:
  7348 ;;		wreg, status,2, status,0, pclath, cstack
  7349 ;; Tracked objects:
  7350 ;;		On entry : 0/0
  7351 ;;		On exit  : 0/0
  7352 ;;		Unchanged: 0/0
  7353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7358 ;;Total ram usage:        0 bytes
  7359 ;; Hardware stack levels used:    1
  7360 ;; Hardware stack levels required when called:   14
  7361 ;; This function calls:
  7362 ;;		_I2C_MasterEnableRestart
  7363 ;; This function is called by:
  7364 ;;		_I2C_DO_TX_EMPTY
  7365 ;;		_I2C_DO_ADDRESS_NACK
  7366 ;;		i1_I2C_MasterFsm
  7367 ;;		_I2C_MasterFsm
  7368 ;; This function uses a non-reentrant model
  7369 ;;
  7370                           
  7371                           
  7372                           ;psect for function _I2C_DO_SEND_RESTART
  7373  0F59                     _I2C_DO_SEND_RESTART:	
  7374                           
  7375                           ;Skip over the trampoline to the duplicate function for level 1
  7376  0F59  1C7E               	btfss	126,0
  7377  0F5A  2F5D               	goto	l4031
  7378  0F5B  318E  2E9D         	ljmp	i1l2657
  7379  0F5D                     _I2C_DO_SEND_RESTART$intlevel0:	
  7380  0F5D                     l4031:	
  7381                           ;incstack = 0
  7382 ;; hardware stack exceeded
  7383                           ; Regs used in _I2C_DO_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
  7384                           
  7385                           
  7386                           ;i2c_master.c: 465: I2C_MasterEnableRestart();
  7387  0F5D  318E  2671         	fcall	_I2C_MasterEnableRestart
  7388                           
  7389                           ;i2c_master.c: 466: return I2C_SEND_ADR_READ;
  7390  0F5F  3001               	movlw	1
  7391  0F60  0008               	return
  7392  0F61                     __end_of_I2C_DO_SEND_RESTART:	
  7393                           
  7394                           	psect	text33
  7395  0F51                     __ptext33:	
  7396 ;; *************** function _I2C_DO_SEND_RESTART_WRITE *****************
  7397 ;; Defined at:
  7398 ;;		line 456 in file "mcc_generated_files/i2c_master.c"
  7399 ;; Parameters:    Size  Location     Type
  7400 ;;		None
  7401 ;; Auto vars:     Size  Location     Type
  7402 ;;		None
  7403 ;; Return value:  Size  Location     Type
  7404 ;;                  1    wreg      enum E12103
  7405 ;; Registers used:
  7406 ;;		wreg, status,2, status,0, pclath, cstack
  7407 ;; Tracked objects:
  7408 ;;		On entry : 0/0
  7409 ;;		On exit  : 0/0
  7410 ;;		Unchanged: 0/0
  7411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7416 ;;Total ram usage:        0 bytes
  7417 ;; Hardware stack levels used:    1
  7418 ;; Hardware stack levels required when called:   14
  7419 ;; This function calls:
  7420 ;;		_I2C_MasterEnableRestart
  7421 ;; This function is called by:
  7422 ;;		_I2C_DO_TX
  7423 ;;		i1_I2C_MasterFsm
  7424 ;;		_I2C_MasterFsm
  7425 ;; This function uses a non-reentrant model
  7426 ;;
  7427                           
  7428                           
  7429                           ;psect for function _I2C_DO_SEND_RESTART_WRITE
  7430  0F51                     _I2C_DO_SEND_RESTART_WRITE:	
  7431                           
  7432                           ;Skip over the trampoline to the duplicate function for level 1
  7433  0F51  1C7E               	btfss	126,0
  7434  0F52  2F55               	goto	l3999
  7435  0F53  318E  2E99         	ljmp	i1l2651
  7436  0F55                     _I2C_DO_SEND_RESTART_WRITE$intlevel0:	
  7437  0F55                     l3999:	
  7438                           ;incstack = 0
  7439 ;; hardware stack exceeded
  7440                           ; Regs used in _I2C_DO_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
  7441                           
  7442                           
  7443                           ;i2c_master.c: 458: I2C_MasterEnableRestart();
  7444  0F55  318E  2671         	fcall	_I2C_MasterEnableRestart
  7445                           
  7446                           ;i2c_master.c: 459: return I2C_SEND_ADR_WRITE;
  7447  0F57  3002               	movlw	2
  7448  0F58  0008               	return
  7449  0F59                     __end_of_I2C_DO_SEND_RESTART_WRITE:	
  7450                           
  7451                           	psect	text34
  7452  0F49                     __ptext34:	
  7453 ;; *************** function _I2C_DO_SEND_RESTART_READ *****************
  7454 ;; Defined at:
  7455 ;;		line 450 in file "mcc_generated_files/i2c_master.c"
  7456 ;; Parameters:    Size  Location     Type
  7457 ;;		None
  7458 ;; Auto vars:     Size  Location     Type
  7459 ;;		None
  7460 ;; Return value:  Size  Location     Type
  7461 ;;                  1    wreg      enum E12103
  7462 ;; Registers used:
  7463 ;;		wreg, status,2, status,0, pclath, cstack
  7464 ;; Tracked objects:
  7465 ;;		On entry : 0/0
  7466 ;;		On exit  : 0/0
  7467 ;;		Unchanged: 0/0
  7468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7473 ;;Total ram usage:        0 bytes
  7474 ;; Hardware stack levels used:    1
  7475 ;; Hardware stack levels required when called:   14
  7476 ;; This function calls:
  7477 ;;		_I2C_MasterEnableRestart
  7478 ;; This function is called by:
  7479 ;;		_I2C_DO_TX
  7480 ;;		i1_I2C_MasterFsm
  7481 ;;		_I2C_MasterFsm
  7482 ;; This function uses a non-reentrant model
  7483 ;;
  7484                           
  7485                           
  7486                           ;psect for function _I2C_DO_SEND_RESTART_READ
  7487  0F49                     _I2C_DO_SEND_RESTART_READ:	
  7488                           
  7489                           ;Skip over the trampoline to the duplicate function for level 1
  7490  0F49  1C7E               	btfss	126,0
  7491  0F4A  2F4D               	goto	l3993
  7492  0F4B  318E  2E95         	ljmp	i1l2645
  7493  0F4D                     _I2C_DO_SEND_RESTART_READ$intlevel0:	
  7494  0F4D                     l3993:	
  7495                           ;incstack = 0
  7496 ;; hardware stack exceeded
  7497                           ; Regs used in _I2C_DO_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
  7498                           
  7499                           
  7500                           ;i2c_master.c: 452: I2C_MasterEnableRestart();
  7501  0F4D  318E  2671         	fcall	_I2C_MasterEnableRestart
  7502                           
  7503                           ;i2c_master.c: 453: return I2C_SEND_ADR_READ;
  7504  0F4F  3001               	movlw	1
  7505  0F50  0008               	return
  7506  0F51                     __end_of_I2C_DO_SEND_RESTART_READ:	
  7507                           
  7508                           	psect	text35
  7509  0F9D                     __ptext35:	
  7510 ;; *************** function _I2C_DO_RCEN *****************
  7511 ;; Defined at:
  7512 ;;		line 402 in file "mcc_generated_files/i2c_master.c"
  7513 ;; Parameters:    Size  Location     Type
  7514 ;;		None
  7515 ;; Auto vars:     Size  Location     Type
  7516 ;;		None
  7517 ;; Return value:  Size  Location     Type
  7518 ;;                  1    wreg      enum E12103
  7519 ;; Registers used:
  7520 ;;		wreg, status,2, status,0, pclath, cstack
  7521 ;; Tracked objects:
  7522 ;;		On entry : 0/0
  7523 ;;		On exit  : 0/0
  7524 ;;		Unchanged: 0/0
  7525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7529 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7530 ;;Total ram usage:        0 bytes
  7531 ;; Hardware stack levels used:    1
  7532 ;; Hardware stack levels required when called:   14
  7533 ;; This function calls:
  7534 ;;		_I2C_MasterStartRx
  7535 ;; This function is called by:
  7536 ;;		i1_I2C_MasterFsm
  7537 ;;		_I2C_MasterFsm
  7538 ;; This function uses a non-reentrant model
  7539 ;;
  7540                           
  7541                           
  7542                           ;psect for function _I2C_DO_RCEN
  7543  0F9D                     _I2C_DO_RCEN:	
  7544                           
  7545                           ;Skip over the trampoline to the duplicate function for level 1
  7546  0F9D  1C7E               	btfss	126,0
  7547  0F9E  2FA1               	goto	l4137
  7548  0F9F  318E  2EE3         	ljmp	i1l2791
  7549  0FA1                     _I2C_DO_RCEN$intlevel0:	
  7550  0FA1                     l4137:	
  7551                           ;incstack = 0
  7552 ;; hardware stack exceeded
  7553                           ; Regs used in _I2C_DO_RCEN: [wreg+status,2+status,0+pclath+cstack]
  7554                           
  7555                           
  7556                           ;i2c_master.c: 404: I2C_Status.addressNackCheck = 0;
  7557  0FA1  0021               	movlb	1	; select bank1
  7558  0FA2  103C               	bcf	(_I2C_Status^(0+128)+28),0
  7559                           
  7560                           ;i2c_master.c: 405: I2C_MasterStartRx();
  7561  0FA3  318E  2677         	fcall	_I2C_MasterStartRx
  7562                           
  7563                           ;i2c_master.c: 406: return I2C_RX;
  7564  0FA5  3004               	movlw	4
  7565  0FA6  0008               	return
  7566  0FA7                     __end_of_I2C_DO_RCEN:	
  7567                           
  7568                           	psect	text36
  7569  0297                     __ptext36:	
  7570 ;; *************** function _I2C_DO_RX *****************
  7571 ;; Defined at:
  7572 ;;		line 378 in file "mcc_generated_files/i2c_master.c"
  7573 ;; Parameters:    Size  Location     Type
  7574 ;;		None
  7575 ;; Auto vars:     Size  Location     Type
  7576 ;;		None
  7577 ;; Return value:  Size  Location     Type
  7578 ;;                  1    wreg      enum E12103
  7579 ;; Registers used:
  7580 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7581 ;; Tracked objects:
  7582 ;;		On entry : 0/0
  7583 ;;		On exit  : 0/0
  7584 ;;		Unchanged: 0/0
  7585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7588 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7589 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7590 ;;Total ram usage:        1 bytes
  7591 ;; Hardware stack levels used:    1
  7592 ;; Hardware stack levels required when called:   16
  7593 ;; This function calls:
  7594 ;;		Absolute function
  7595 ;;		_I2C_CallbackReturnReset
  7596 ;;		_I2C_CallbackReturnStop
  7597 ;;		_I2C_DO_RX_NACK_RESTART
  7598 ;;		_I2C_DO_RX_NACK_STOP
  7599 ;;		_I2C_MasterGetRxData
  7600 ;;		_I2C_MasterSendAck
  7601 ;;		_rd1RegCompleteHandler
  7602 ;;		_rd2RegCompleteHandler
  7603 ;;		_rdBlkRegCompleteHandler
  7604 ;;		_wr1RegCompleteHandler
  7605 ;;		_wr2RegCompleteHandler
  7606 ;; This function is called by:
  7607 ;;		i1_I2C_MasterFsm
  7608 ;;		_I2C_MasterFsm
  7609 ;; This function uses a non-reentrant model
  7610 ;;
  7611                           
  7612                           
  7613                           ;psect for function _I2C_DO_RX
  7614  0297                     _I2C_DO_RX:	
  7615                           
  7616                           ;Skip over the trampoline to the duplicate function for level 1
  7617  0297  1C7E               	btfss	126,0
  7618  0298  2A9B               	goto	l5843
  7619  0299  3183  2B53         	ljmp	i1l5733
  7620  029B                     _I2C_DO_RX$intlevel0:	
  7621  029B                     l5843:	
  7622                           ;incstack = 0
  7623 ;; hardware stack exceeded
  7624                           ; Regs used in _I2C_DO_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7625                           
  7626                           
  7627                           ;i2c_master.c: 380: *I2C_Status.data_ptr++ = I2C_MasterGetRxData();
  7628  029B  318E  267A  3182   	fcall	_I2C_MasterGetRxData
  7629  029E  0020               	movlb	0	; select bank0
  7630  029F  00D3               	movwf	??_I2C_DO_RX
  7631  02A0  0021               	movlb	1	; select bank1
  7632  02A1  0837               	movf	(low ((_I2C_Status| 0+23)))^(0+128),w
  7633  02A2  0086               	movwf	6
  7634  02A3  0187               	clrf	7
  7635  02A4  0020               	movlb	0	; select bank0
  7636  02A5  0853               	movf	??_I2C_DO_RX,w
  7637  02A6  0081               	movwf	1
  7638  02A7  3001               	movlw	1
  7639  02A8  00D3               	movwf	??_I2C_DO_RX
  7640  02A9  0853               	movf	??_I2C_DO_RX,w
  7641  02AA  0021               	movlb	1	; select bank1
  7642  02AB  07B7               	addwf	(low ((_I2C_Status| 0+23)))^(0+128),f
  7643                           
  7644                           ;i2c_master.c: 381: if(--I2C_Status.data_length)
  7645  02AC  3001               	movlw	1
  7646  02AD  02B8               	subwf	(_I2C_Status^(0+128)+24),f
  7647  02AE  3000               	movlw	0
  7648  02AF  3BB9               	subwfb	((_I2C_Status+1)^(0+128)+24),f
  7649  02B0  0838               	movf	(_I2C_Status^(0+128)+24),w
  7650  02B1  0439               	iorwf	((_I2C_Status+1)^(0+128)+24),w
  7651  02B2  1903               	btfsc	3,2
  7652  02B3  2AB8               	goto	l403
  7653                           
  7654                           ;i2c_master.c: 382: {
  7655                           ;i2c_master.c: 383: I2C_MasterSendAck();
  7656  02B4  318E  26BD         	fcall	_I2C_MasterSendAck
  7657                           
  7658                           ;i2c_master.c: 384: return I2C_RCEN;
  7659  02B6  3005               	movlw	5
  7660                           
  7661                           ;i2c_master.c: 385: }
  7662  02B7  0008               	return
  7663  02B8                     l403:	
  7664                           
  7665                           ;i2c_master.c: 386: else
  7666                           ;i2c_master.c: 387: {
  7667                           ;i2c_master.c: 388: I2C_Status.bufferFree = 1;
  7668  02B8  15BC               	bsf	(_I2C_Status^(0+128)+28),3
  7669                           
  7670                           ;i2c_master.c: 389: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
  7671  02B9  2AC0               	goto	l5867
  7672  02BA                     l5857:	
  7673                           ;i2c_master.c: 390: {
  7674                           ;i2c_master.c: 391: case I2C_RESTART_WRITE:
  7675                           
  7676                           
  7677                           ;i2c_master.c: 392: case I2C_RESTART_READ:
  7678                           ;i2c_master.c: 393: return I2C_DO_RX_NACK_RESTART();
  7679  02BA  318F  2779         	fcall	_I2C_DO_RX_NACK_RESTART
  7680  02BC  0008               	return
  7681  02BD                     l5861:	
  7682                           ;i2c_master.c: 395: case I2C_CONTINUE:
  7683                           
  7684                           ;i2c_master.c: 394: default:
  7685                           
  7686                           
  7687                           ;i2c_master.c: 396: case I2C_STOP:
  7688                           ;i2c_master.c: 397: return I2C_DO_RX_NACK_STOP();
  7689  02BD  318F  2771         	fcall	_I2C_DO_RX_NACK_STOP
  7690                           
  7691                           ;i2c_master.c: 398: }
  7692  02BF  0008               	return
  7693  02C0                     l5867:	
  7694  02C0  0021               	movlb	1	; select bank1
  7695  02C1  082C               	movf	(low ((_I2C_Status| 0+12)))^(0+128),w
  7696  02C2  0020               	movlb	0	; select bank0
  7697  02C3  00D3               	movwf	??_I2C_DO_RX
  7698  02C4  0853               	movf	??_I2C_DO_RX,w
  7699  02C5  00D2               	movwf	I2C_CallbackReturnReset@funPtr
  7700  02C6  0021               	movlb	1	; select bank1
  7701  02C7  0821               	movf	(_I2C_Status+1)^(0+128),w
  7702  02C8  008A               	movwf	10
  7703  02C9  0820               	movf	_I2C_Status^(0+128),w
  7704  02CA  000A               	callw
  7705  02CB  3182               	pagesel	$
  7706                           
  7707                           ; Switch size 1, requested type "space"
  7708                           ; Number of cases is 4, Range of values is 1 to 4
  7709                           ; switch strategies available:
  7710                           ; Name         Instructions Cycles
  7711                           ; simple_byte           13     7 (average)
  7712                           ; direct_byte           17     9 (fixed)
  7713                           ; jumptable            263     9 (fixed)
  7714                           ;	Chosen strategy is simple_byte
  7715  02CC  3A01               	xorlw	1	; case 1
  7716  02CD  1903               	skipnz
  7717  02CE  2ABD               	goto	l5861
  7718  02CF  3A03               	xorlw	3	; case 2
  7719  02D0  1903               	skipnz
  7720  02D1  2ABA               	goto	l5857
  7721  02D2  3A01               	xorlw	1	; case 3
  7722  02D3  1903               	skipnz
  7723  02D4  2ABA               	goto	l5857
  7724  02D5  3A07               	xorlw	7	; case 4
  7725  02D6  1903               	skipnz
  7726  02D7  2ABD               	goto	l5861
  7727  02D8  2ABD               	goto	l5861
  7728  02D9  0008               	return
  7729  02DA                     __end_of_I2C_DO_RX:	
  7730                           
  7731                           	psect	text37
  7732  01FB                     __ptext37:	
  7733 ;; *************** function _I2C_DO_TX *****************
  7734 ;; Defined at:
  7735 ;;		line 354 in file "mcc_generated_files/i2c_master.c"
  7736 ;; Parameters:    Size  Location     Type
  7737 ;;		None
  7738 ;; Auto vars:     Size  Location     Type
  7739 ;;		None
  7740 ;; Return value:  Size  Location     Type
  7741 ;;                  1    wreg      enum E12103
  7742 ;; Registers used:
  7743 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7744 ;; Tracked objects:
  7745 ;;		On entry : 0/0
  7746 ;;		On exit  : 0/0
  7747 ;;		Unchanged: 0/0
  7748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7750 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7751 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7752 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7753 ;;Total ram usage:        3 bytes
  7754 ;; Hardware stack levels used:    1
  7755 ;; Hardware stack levels required when called:   16
  7756 ;; This function calls:
  7757 ;;		Absolute function
  7758 ;;		_I2C_CallbackReturnReset
  7759 ;;		_I2C_CallbackReturnStop
  7760 ;;		_I2C_DO_SEND_RESTART_READ
  7761 ;;		_I2C_DO_SEND_RESTART_WRITE
  7762 ;;		_I2C_DO_SEND_STOP
  7763 ;;		_I2C_MasterIsNack
  7764 ;;		_I2C_MasterSendTxData
  7765 ;;		_rd1RegCompleteHandler
  7766 ;;		_rd2RegCompleteHandler
  7767 ;;		_rdBlkRegCompleteHandler
  7768 ;;		_wr1RegCompleteHandler
  7769 ;;		_wr2RegCompleteHandler
  7770 ;; This function is called by:
  7771 ;;		i1_I2C_MasterFsm
  7772 ;;		_I2C_MasterFsm
  7773 ;; This function uses a non-reentrant model
  7774 ;;
  7775                           
  7776                           
  7777                           ;psect for function _I2C_DO_TX
  7778  01FB                     _I2C_DO_TX:	
  7779                           
  7780                           ;Skip over the trampoline to the duplicate function for level 1
  7781  01FB  1C7E               	btfss	126,0
  7782  01FC  29FF               	goto	l5813
  7783  01FD  3182  2A4C         	ljmp	i1l5703
  7784  01FF                     _I2C_DO_TX$intlevel0:	
  7785  01FF                     l5813:	
  7786                           ;incstack = 0
  7787 ;; hardware stack exceeded
  7788                           ; Regs used in _I2C_DO_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7789                           
  7790                           
  7791                           ;i2c_master.c: 356: if(I2C_MasterIsNack())
  7792  01FF  318E  26FB  3181   	fcall	_I2C_MasterIsNack
  7793  0202  3A00               	xorlw	0
  7794  0203  1D03               	btfss	3,2
  7795  0204  2A0F               	goto	l5831
  7796  0205  2A2C               	goto	l387
  7797  0206                     l5817:	
  7798                           ;i2c_master.c: 359: {
  7799                           ;i2c_master.c: 360: case I2C_RESTART_READ:
  7800                           
  7801                           ;i2c_master.c: 357: {
  7802                           ;i2c_master.c: 358: switch(I2C_Status.callbackTable[I2C_DATA_NACK](I2C_Status.callbackPa
      +                          yload[I2C_DATA_NACK]))
  7803                           
  7804                           
  7805                           ;i2c_master.c: 361: return I2C_DO_SEND_RESTART_READ();
  7806  0206  318F  2749         	fcall	_I2C_DO_SEND_RESTART_READ
  7807  0208  0008               	return
  7808  0209                     l5821:	
  7809                           ;i2c_master.c: 362: case I2C_RESTART_WRITE:
  7810                           
  7811                           
  7812                           ;i2c_master.c: 363: return I2C_DO_SEND_RESTART_WRITE();
  7813  0209  318F  2751         	fcall	_I2C_DO_SEND_RESTART_WRITE
  7814  020B  0008               	return
  7815  020C                     l5825:	
  7816                           ;i2c_master.c: 365: case I2C_CONTINUE:
  7817                           
  7818                           ;i2c_master.c: 364: default:
  7819                           
  7820                           
  7821                           ;i2c_master.c: 366: case I2C_STOP:
  7822                           ;i2c_master.c: 367: return I2C_DO_SEND_STOP();
  7823  020C  318F  2761         	fcall	_I2C_DO_SEND_STOP
  7824                           
  7825                           ;i2c_master.c: 368: }
  7826  020E  0008               	return
  7827  020F                     l5831:	
  7828  020F  0021               	movlb	1	; select bank1
  7829  0210  082F               	movf	(low ((_I2C_Status| 0+15)))^(0+128),w
  7830  0211  0020               	movlb	0	; select bank0
  7831  0212  00D3               	movwf	??_I2C_DO_TX
  7832  0213  0853               	movf	??_I2C_DO_TX,w
  7833  0214  00D2               	movwf	I2C_CallbackReturnReset@funPtr
  7834  0215  3006               	movlw	6
  7835  0216  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
  7836  0217  0086               	movwf	6
  7837  0218  0187               	clrf	7
  7838  0219  3F41               	moviw [1]fsr1
  7839  021A  008A               	movwf	10
  7840  021B  3F40               	moviw [0]fsr1
  7841  021C  000A               	callw
  7842  021D  3181               	pagesel	$
  7843                           
  7844                           ; Switch size 1, requested type "space"
  7845                           ; Number of cases is 4, Range of values is 1 to 4
  7846                           ; switch strategies available:
  7847                           ; Name         Instructions Cycles
  7848                           ; simple_byte           13     7 (average)
  7849                           ; direct_byte           17     9 (fixed)
  7850                           ; jumptable            263     9 (fixed)
  7851                           ;	Chosen strategy is simple_byte
  7852  021E  3A01               	xorlw	1	; case 1
  7853  021F  1903               	skipnz
  7854  0220  2A0C               	goto	l5825
  7855  0221  3A03               	xorlw	3	; case 2
  7856  0222  1903               	skipnz
  7857  0223  2A06               	goto	l5817
  7858  0224  3A01               	xorlw	1	; case 3
  7859  0225  1903               	skipnz
  7860  0226  2A09               	goto	l5821
  7861  0227  3A07               	xorlw	7	; case 4
  7862  0228  1903               	skipnz
  7863  0229  2A0C               	goto	l5825
  7864  022A  2A0C               	goto	l5825
  7865                           
  7866                           ;i2c_master.c: 369: }
  7867  022B  0008               	return
  7868  022C                     l387:	
  7869                           
  7870                           ;i2c_master.c: 370: else
  7871                           ;i2c_master.c: 371: {
  7872                           ;i2c_master.c: 372: I2C_Status.addressNackCheck = 0;
  7873  022C  0021               	movlb	1	; select bank1
  7874  022D  103C               	bcf	(_I2C_Status^(0+128)+28),0
  7875                           
  7876                           ;i2c_master.c: 373: I2C_MasterSendTxData(*I2C_Status.data_ptr++);
  7877  022E  3017               	movlw	23
  7878  022F  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
  7879  0230  0086               	movwf	6
  7880  0231  0187               	clrf	7
  7881  0232  3F40               	moviw [0]fsr1
  7882  0233  0084               	movwf	4
  7883  0234  0185               	clrf	5
  7884  0235  0A81               	incf	1,f
  7885  0236  0800               	movf	0,w
  7886  0237  318E  26F5  3181   	fcall	_I2C_MasterSendTxData
  7887                           
  7888                           ;i2c_master.c: 374: return (--I2C_Status.data_length)?I2C_TX:I2C_TX_EMPTY;
  7889  023A  3001               	movlw	1
  7890  023B  0021               	movlb	1	; select bank1
  7891  023C  02B8               	subwf	(_I2C_Status^(0+128)+24),f
  7892  023D  3000               	movlw	0
  7893  023E  3BB9               	subwfb	((_I2C_Status+1)^(0+128)+24),f
  7894  023F  0838               	movf	(_I2C_Status^(0+128)+24),w
  7895  0240  0439               	iorwf	((_I2C_Status+1)^(0+128)+24),w
  7896  0241  1D03               	btfss	3,2
  7897  0242  2A45               	goto	l5839
  7898  0243  3006               	movlw	6
  7899  0244  2A46               	goto	L1
  7900  0245                     l5839:	
  7901  0245  3003               	movlw	3
  7902  0246                     L1:	
  7903  0246  0020               	movlb	0	; select bank0
  7904  0247  00D4               	movwf	_I2C_DO_TX$794
  7905  0248  3000               	movlw	0
  7906  0249  00D5               	movwf	_I2C_DO_TX$794+1
  7907  024A  0854               	movf	_I2C_DO_TX$794,w
  7908  024B  0008               	return
  7909  024C                     __end_of_I2C_DO_TX:	
  7910                           
  7911                           	psect	text38
  7912  0FC6                     __ptext38:	
  7913 ;; *************** function _I2C_DO_SEND_ADR_WRITE *****************
  7914 ;; Defined at:
  7915 ;;		line 347 in file "mcc_generated_files/i2c_master.c"
  7916 ;; Parameters:    Size  Location     Type
  7917 ;;		None
  7918 ;; Auto vars:     Size  Location     Type
  7919 ;;		None
  7920 ;; Return value:  Size  Location     Type
  7921 ;;                  1    wreg      enum E12103
  7922 ;; Registers used:
  7923 ;;		wreg, status,2, status,0, pclath, cstack
  7924 ;; Tracked objects:
  7925 ;;		On entry : 0/0
  7926 ;;		On exit  : 0/0
  7927 ;;		Unchanged: 0/0
  7928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7933 ;;Total ram usage:        0 bytes
  7934 ;; Hardware stack levels used:    1
  7935 ;; Hardware stack levels required when called:   14
  7936 ;; This function calls:
  7937 ;;		_I2C_MasterSendTxData
  7938 ;; This function is called by:
  7939 ;;		i1_I2C_MasterFsm
  7940 ;;		_I2C_MasterFsm
  7941 ;; This function uses a non-reentrant model
  7942 ;;
  7943                           
  7944                           
  7945                           ;psect for function _I2C_DO_SEND_ADR_WRITE
  7946  0FC6                     _I2C_DO_SEND_ADR_WRITE:	
  7947                           
  7948                           ;Skip over the trampoline to the duplicate function for level 1
  7949  0FC6  1C7E               	btfss	126,0
  7950  0FC7  2FCA               	goto	l4073
  7951  0FC8  318F  2F2B         	ljmp	i1l2727
  7952  0FCA                     _I2C_DO_SEND_ADR_WRITE$intlevel0:	
  7953  0FCA                     l4073:	
  7954                           ;incstack = 0
  7955 ;; hardware stack exceeded
  7956                           ; Regs used in _I2C_DO_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
  7957                           
  7958                           
  7959                           ;i2c_master.c: 349: I2C_Status.addressNackCheck = 1;
  7960  0FCA  0021               	movlb	1	; select bank1
  7961  0FCB  143C               	bsf	(_I2C_Status^(0+128)+28),0
  7962                           
  7963                           ;i2c_master.c: 350: I2C_MasterSendTxData(I2C_Status.address << 1);
  7964  0FCC  3536               	lslf	(_I2C_Status^(0+128)+22),w
  7965  0FCD  318E  26F5         	fcall	_I2C_MasterSendTxData
  7966                           
  7967                           ;i2c_master.c: 351: return I2C_TX;
  7968  0FCF  3003               	movlw	3
  7969  0FD0  0008               	return
  7970  0FD1                     __end_of_I2C_DO_SEND_ADR_WRITE:	
  7971                           
  7972                           	psect	text39
  7973  07EF                     __ptext39:	
  7974 ;; *************** function _I2C_DO_SEND_ADR_READ *****************
  7975 ;; Defined at:
  7976 ;;		line 340 in file "mcc_generated_files/i2c_master.c"
  7977 ;; Parameters:    Size  Location     Type
  7978 ;;		None
  7979 ;; Auto vars:     Size  Location     Type
  7980 ;;		None
  7981 ;; Return value:  Size  Location     Type
  7982 ;;                  1    wreg      enum E12103
  7983 ;; Registers used:
  7984 ;;		wreg, status,2, status,0, pclath, cstack
  7985 ;; Tracked objects:
  7986 ;;		On entry : 0/0
  7987 ;;		On exit  : 0/0
  7988 ;;		Unchanged: 0/0
  7989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7993 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7994 ;;Total ram usage:        0 bytes
  7995 ;; Hardware stack levels used:    1
  7996 ;; Hardware stack levels required when called:   14
  7997 ;; This function calls:
  7998 ;;		_I2C_MasterSendTxData
  7999 ;; This function is called by:
  8000 ;;		i1_I2C_MasterFsm
  8001 ;;		_I2C_MasterFsm
  8002 ;; This function uses a non-reentrant model
  8003 ;;
  8004                           
  8005                           
  8006                           ;psect for function _I2C_DO_SEND_ADR_READ
  8007  07EF                     _I2C_DO_SEND_ADR_READ:	
  8008                           
  8009                           ;Skip over the trampoline to the duplicate function for level 1
  8010  07EF  1C7E               	btfss	126,0
  8011  07F0  2FF3               	goto	l4065
  8012  07F1  318F  2F41         	ljmp	i1l2719
  8013  07F3                     _I2C_DO_SEND_ADR_READ$intlevel0:	
  8014  07F3                     l4065:	
  8015                           ;incstack = 0
  8016 ;; hardware stack exceeded
  8017                           ; Regs used in _I2C_DO_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
  8018                           
  8019                           
  8020                           ;i2c_master.c: 342: I2C_Status.addressNackCheck = 1;
  8021  07F3  0021               	movlb	1	; select bank1
  8022  07F4  143C               	bsf	(_I2C_Status^(0+128)+28),0
  8023                           
  8024                           ;i2c_master.c: 343: I2C_MasterSendTxData(I2C_Status.address << 1 | 1);
  8025  07F5  1403               	setc
  8026  07F6  0D36               	rlf	(_I2C_Status^(0+128)+22),w
  8027  07F7  318E  26F5         	fcall	_I2C_MasterSendTxData
  8028                           
  8029                           ;i2c_master.c: 344: return I2C_RCEN;
  8030  07F9  3005               	movlw	5
  8031  07FA  0008               	return
  8032  07FB                     __end_of_I2C_DO_SEND_ADR_READ:	
  8033                           
  8034                           	psect	text40
  8035  0F81                     __ptext40:	
  8036 ;; *************** function _I2C_DO_IDLE *****************
  8037 ;; Defined at:
  8038 ;;		line 333 in file "mcc_generated_files/i2c_master.c"
  8039 ;; Parameters:    Size  Location     Type
  8040 ;;		None
  8041 ;; Auto vars:     Size  Location     Type
  8042 ;;		None
  8043 ;; Return value:  Size  Location     Type
  8044 ;;                  1    wreg      enum E12103
  8045 ;; Registers used:
  8046 ;;		wreg, status,2
  8047 ;; Tracked objects:
  8048 ;;		On entry : 0/0
  8049 ;;		On exit  : 0/0
  8050 ;;		Unchanged: 0/0
  8051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8056 ;;Total ram usage:        0 bytes
  8057 ;; Hardware stack levels used:    1
  8058 ;; Hardware stack levels required when called:   13
  8059 ;; This function calls:
  8060 ;;		Nothing
  8061 ;; This function is called by:
  8062 ;;		i1_I2C_MasterFsm
  8063 ;;		_I2C_MasterFsm
  8064 ;; This function uses a non-reentrant model
  8065 ;;
  8066                           
  8067                           
  8068                           ;psect for function _I2C_DO_IDLE
  8069  0F81                     _I2C_DO_IDLE:	
  8070                           
  8071                           ;Skip over the trampoline to the duplicate function for level 1
  8072  0F81  1C7E               	btfss	126,0
  8073  0F82  2F85               	goto	l4057
  8074  0F83  318E  2ECE         	ljmp	i1l2711
  8075  0F85                     _I2C_DO_IDLE$intlevel0:	
  8076  0F85                     l4057:	
  8077                           ;incstack = 0
  8078 ;; hardware stack exceeded
  8079                           ; Regs used in _I2C_DO_IDLE: [wreg+status,2]
  8080                           
  8081                           
  8082                           ;i2c_master.c: 335: I2C_Status.busy = 0;
  8083  0F85  0021               	movlb	1	; select bank1
  8084  0F86  10BC               	bcf	(_I2C_Status^(0+128)+28),1
  8085                           
  8086                           ;i2c_master.c: 336: I2C_Status.error = I2C_NOERR;
  8087  0F87  01BB               	clrf	(_I2C_Status^(0+128)+27)
  8088                           
  8089                           ;i2c_master.c: 337: return I2C_RESET;
  8090  0F88  300E               	movlw	14
  8091  0F89  0008               	return
  8092  0F8A                     __end_of_I2C_DO_IDLE:	
  8093                           
  8094                           	psect	text41
  8095  04BE                     __ptext41:	
  8096 ;; *************** function _I2C_DO_TX_EMPTY *****************
  8097 ;; Defined at:
  8098 ;;		line 409 in file "mcc_generated_files/i2c_master.c"
  8099 ;; Parameters:    Size  Location     Type
  8100 ;;		None
  8101 ;; Auto vars:     Size  Location     Type
  8102 ;;		None
  8103 ;; Return value:  Size  Location     Type
  8104 ;;                  1    wreg      enum E12103
  8105 ;; Registers used:
  8106 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8107 ;; Tracked objects:
  8108 ;;		On entry : 0/0
  8109 ;;		On exit  : 0/0
  8110 ;;		Unchanged: 0/0
  8111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8114 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8115 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8116 ;;Total ram usage:        1 bytes
  8117 ;; Hardware stack levels used:    1
  8118 ;; Hardware stack levels required when called:   16
  8119 ;; This function calls:
  8120 ;;		Absolute function
  8121 ;;		_I2C_CallbackReturnReset
  8122 ;;		_I2C_CallbackReturnStop
  8123 ;;		_I2C_DO_SEND_RESTART
  8124 ;;		_I2C_DO_SEND_STOP
  8125 ;;		_I2C_MasterSetIrq
  8126 ;;		_rd1RegCompleteHandler
  8127 ;;		_rd2RegCompleteHandler
  8128 ;;		_rdBlkRegCompleteHandler
  8129 ;;		_wr1RegCompleteHandler
  8130 ;;		_wr2RegCompleteHandler
  8131 ;; This function is called by:
  8132 ;;		i1_I2C_MasterFsm
  8133 ;;		_I2C_MasterFsm
  8134 ;; This function uses a non-reentrant model
  8135 ;;
  8136                           
  8137                           
  8138                           ;psect for function _I2C_DO_TX_EMPTY
  8139  04BE                     _I2C_DO_TX_EMPTY:	
  8140                           
  8141                           ;Skip over the trampoline to the duplicate function for level 1
  8142  04BE  1C7E               	btfss	126,0
  8143  04BF  2CC2               	goto	l5869
  8144  04C0  3185  2D89         	ljmp	i1l5759
  8145  04C2                     _I2C_DO_TX_EMPTY$intlevel0:	
  8146  04C2                     l5869:	
  8147                           ;incstack = 0
  8148 ;; hardware stack exceeded
  8149                           ; Regs used in _I2C_DO_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8150                           
  8151                           
  8152                           ;i2c_master.c: 411: I2C_Status.bufferFree = 1;
  8153  04C2  0021               	movlb	1	; select bank1
  8154  04C3  15BC               	bsf	(_I2C_Status^(0+128)+28),3
  8155                           
  8156                           ;i2c_master.c: 412: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
  8157  04C4  2CCF               	goto	l5887
  8158  04C5                     l5871:	
  8159                           ;i2c_master.c: 413: {
  8160                           ;i2c_master.c: 414: case I2C_RESTART_READ:
  8161                           
  8162                           
  8163                           ;i2c_master.c: 415: case I2C_RESTART_WRITE:
  8164                           ;i2c_master.c: 416: return I2C_DO_SEND_RESTART();
  8165  04C5  318F  2759         	fcall	_I2C_DO_SEND_RESTART
  8166  04C7  0008               	return
  8167  04C8                     l5875:	
  8168                           ;i2c_master.c: 417: case I2C_CONTINUE:
  8169                           
  8170                           
  8171                           ;i2c_master.c: 418: I2C_MasterSetIrq();
  8172  04C8  318E  267D         	fcall	_I2C_MasterSetIrq
  8173                           
  8174                           ;i2c_master.c: 419: return I2C_TX;
  8175  04CA  3003               	movlw	3
  8176  04CB  0008               	return
  8177  04CC                     l5881:	
  8178                           ;i2c_master.c: 421: case I2C_STOP:
  8179                           
  8180                           ;i2c_master.c: 420: default:
  8181                           
  8182                           
  8183                           ;i2c_master.c: 422: return I2C_DO_SEND_STOP();
  8184  04CC  318F  2761         	fcall	_I2C_DO_SEND_STOP
  8185                           
  8186                           ;i2c_master.c: 423: }
  8187  04CE  0008               	return
  8188  04CF                     l5887:	
  8189  04CF  0021               	movlb	1	; select bank1
  8190  04D0  082C               	movf	(low ((_I2C_Status| 0+12)))^(0+128),w
  8191  04D1  0020               	movlb	0	; select bank0
  8192  04D2  00D3               	movwf	??_I2C_DO_TX_EMPTY
  8193  04D3  0853               	movf	??_I2C_DO_TX_EMPTY,w
  8194  04D4  00D2               	movwf	I2C_CallbackReturnReset@funPtr
  8195  04D5  0021               	movlb	1	; select bank1
  8196  04D6  0821               	movf	(_I2C_Status+1)^(0+128),w
  8197  04D7  008A               	movwf	10
  8198  04D8  0820               	movf	_I2C_Status^(0+128),w
  8199  04D9  000A               	callw
  8200  04DA  3184               	pagesel	$
  8201                           
  8202                           ; Switch size 1, requested type "space"
  8203                           ; Number of cases is 4, Range of values is 1 to 4
  8204                           ; switch strategies available:
  8205                           ; Name         Instructions Cycles
  8206                           ; simple_byte           13     7 (average)
  8207                           ; direct_byte           17     9 (fixed)
  8208                           ; jumptable            263     9 (fixed)
  8209                           ;	Chosen strategy is simple_byte
  8210  04DB  3A01               	xorlw	1	; case 1
  8211  04DC  1903               	skipnz
  8212  04DD  2CCC               	goto	l5881
  8213  04DE  3A03               	xorlw	3	; case 2
  8214  04DF  1903               	skipnz
  8215  04E0  2CC5               	goto	l5871
  8216  04E1  3A01               	xorlw	1	; case 3
  8217  04E2  1903               	skipnz
  8218  04E3  2CC5               	goto	l5871
  8219  04E4  3A07               	xorlw	7	; case 4
  8220  04E5  1903               	skipnz
  8221  04E6  2CC8               	goto	l5875
  8222  04E7  2CCC               	goto	l5881
  8223  04E8  0008               	return
  8224  04E9                     __end_of_I2C_DO_TX_EMPTY:	
  8225                           
  8226                           	psect	text42
  8227  0E7D                     __ptext42:	
  8228 ;; *************** function _I2C_MasterSetIrq *****************
  8229 ;; Defined at:
  8230 ;;		line 645 in file "mcc_generated_files/i2c_master.c"
  8231 ;; Parameters:    Size  Location     Type
  8232 ;;		None
  8233 ;; Auto vars:     Size  Location     Type
  8234 ;;		None
  8235 ;; Return value:  Size  Location     Type
  8236 ;;                  1    wreg      void 
  8237 ;; Registers used:
  8238 ;;		None
  8239 ;; Tracked objects:
  8240 ;;		On entry : 0/0
  8241 ;;		On exit  : 0/0
  8242 ;;		Unchanged: 0/0
  8243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8248 ;;Total ram usage:        0 bytes
  8249 ;; Hardware stack levels used:    1
  8250 ;; Hardware stack levels required when called:   13
  8251 ;; This function calls:
  8252 ;;		Nothing
  8253 ;; This function is called by:
  8254 ;;		_I2C_DO_TX_EMPTY
  8255 ;; This function uses a non-reentrant model
  8256 ;;
  8257                           
  8258                           
  8259                           ;psect for function _I2C_MasterSetIrq
  8260  0E7D                     _I2C_MasterSetIrq:	
  8261                           
  8262                           ;i2c_master.c: 647: PIR1bits.SSP1IF = 1;
  8263                           
  8264                           ;incstack = 0
  8265 ;; hardware stack exceeded
  8266                           ; Regs used in _I2C_MasterSetIrq: []
  8267  0E7D  0020               	movlb	0	; select bank0
  8268  0E7E  1590               	bsf	16,3	;volatile
  8269  0E7F  0008               	return
  8270  0E80                     __end_of_I2C_MasterSetIrq:	
  8271                           
  8272                           	psect	text43
  8273  0EFB                     __ptext43:	
  8274 ;; *************** function _I2C_MasterIsNack *****************
  8275 ;; Defined at:
  8276 ;;		line 598 in file "mcc_generated_files/i2c_master.c"
  8277 ;; Parameters:    Size  Location     Type
  8278 ;;		None
  8279 ;; Auto vars:     Size  Location     Type
  8280 ;;		None
  8281 ;; Return value:  Size  Location     Type
  8282 ;;                  1    wreg      unsigned char 
  8283 ;; Registers used:
  8284 ;;		wreg, status,2, status,0
  8285 ;; Tracked objects:
  8286 ;;		On entry : 0/0
  8287 ;;		On exit  : 0/0
  8288 ;;		Unchanged: 0/0
  8289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8293 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8294 ;;Total ram usage:        0 bytes
  8295 ;; Hardware stack levels used:    1
  8296 ;; Hardware stack levels required when called:   13
  8297 ;; This function calls:
  8298 ;;		Nothing
  8299 ;; This function is called by:
  8300 ;;		_I2C_MasterFsm
  8301 ;;		_I2C_DO_TX
  8302 ;; This function uses a non-reentrant model
  8303 ;;
  8304                           
  8305                           
  8306                           ;psect for function _I2C_MasterIsNack
  8307  0EFB                     _I2C_MasterIsNack:	
  8308                           
  8309                           ;i2c_master.c: 600: return SSP1CON2bits.ACKSTAT;
  8310                           
  8311                           ;incstack = 0
  8312 ;; hardware stack exceeded
  8313                           ; Regs used in _I2C_MasterIsNack: [wreg+status,2+status,0]
  8314  0EFB  0024               	movlb	4	; select bank4
  8315  0EFC  0E16               	swapf	22,w	;volatile
  8316  0EFD  0C89               	rrf	9,f
  8317  0EFE  0C89               	rrf	9,f
  8318  0EFF  3901               	andlw	1
  8319  0F00  0008               	return
  8320  0F01                     __end_of_I2C_MasterIsNack:	
  8321                           
  8322                           	psect	text44
  8323  0EF5                     __ptext44:	
  8324 ;; *************** function _I2C_MasterSendTxData *****************
  8325 ;; Defined at:
  8326 ;;		line 568 in file "mcc_generated_files/i2c_master.c"
  8327 ;; Parameters:    Size  Location     Type
  8328 ;;  data            1    wreg     unsigned char 
  8329 ;; Auto vars:     Size  Location     Type
  8330 ;;  data            1   12[BANK0 ] unsigned char 
  8331 ;; Return value:  Size  Location     Type
  8332 ;;                  1    wreg      void 
  8333 ;; Registers used:
  8334 ;;		wreg
  8335 ;; Tracked objects:
  8336 ;;		On entry : 0/0
  8337 ;;		On exit  : 0/0
  8338 ;;		Unchanged: 0/0
  8339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8341 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8343 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8344 ;;Total ram usage:        1 bytes
  8345 ;; Hardware stack levels used:    1
  8346 ;; Hardware stack levels required when called:   13
  8347 ;; This function calls:
  8348 ;;		Nothing
  8349 ;; This function is called by:
  8350 ;;		_I2C_DO_SEND_ADR_READ
  8351 ;;		_I2C_DO_SEND_ADR_WRITE
  8352 ;;		_I2C_DO_TX
  8353 ;; This function uses a non-reentrant model
  8354 ;;
  8355                           
  8356                           
  8357                           ;psect for function _I2C_MasterSendTxData
  8358  0EF5                     _I2C_MasterSendTxData:	
  8359                           
  8360                           ;incstack = 0
  8361 ;; hardware stack exceeded
  8362                           ; Regs used in _I2C_MasterSendTxData: [wreg]
  8363                           ;I2C_MasterSendTxData@data stored from wreg
  8364  0EF5  0020               	movlb	0	; select bank0
  8365  0EF6  00C9               	movwf	I2C_MasterSendTxData@data
  8366                           
  8367                           ;i2c_master.c: 570: SSP1BUF = data;
  8368  0EF7  0849               	movf	I2C_MasterSendTxData@data,w
  8369  0EF8  0024               	movlb	4	; select bank4
  8370  0EF9  0091               	movwf	17	;volatile
  8371  0EFA  0008               	return
  8372  0EFB                     __end_of_I2C_MasterSendTxData:	
  8373                           
  8374                           	psect	text45
  8375  0EBD                     __ptext45:	
  8376 ;; *************** function _I2C_MasterSendAck *****************
  8377 ;; Defined at:
  8378 ;;		line 603 in file "mcc_generated_files/i2c_master.c"
  8379 ;; Parameters:    Size  Location     Type
  8380 ;;		None
  8381 ;; Auto vars:     Size  Location     Type
  8382 ;;		None
  8383 ;; Return value:  Size  Location     Type
  8384 ;;                  1    wreg      void 
  8385 ;; Registers used:
  8386 ;;		None
  8387 ;; Tracked objects:
  8388 ;;		On entry : 0/0
  8389 ;;		On exit  : 0/0
  8390 ;;		Unchanged: 0/0
  8391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8396 ;;Total ram usage:        0 bytes
  8397 ;; Hardware stack levels used:    1
  8398 ;; Hardware stack levels required when called:   13
  8399 ;; This function calls:
  8400 ;;		Nothing
  8401 ;; This function is called by:
  8402 ;;		_I2C_DO_RX
  8403 ;;		_I2C_DO_RX_ACK
  8404 ;; This function uses a non-reentrant model
  8405 ;;
  8406                           
  8407                           
  8408                           ;psect for function _I2C_MasterSendAck
  8409  0EBD                     _I2C_MasterSendAck:	
  8410                           
  8411                           ;i2c_master.c: 605: SSP1CON2bits.ACKDT = 0;
  8412                           
  8413                           ;incstack = 0
  8414 ;; hardware stack exceeded
  8415                           ; Regs used in _I2C_MasterSendAck: []
  8416  0EBD  0024               	movlb	4	; select bank4
  8417  0EBE  1296               	bcf	22,5	;volatile
  8418                           
  8419                           ;i2c_master.c: 606: SSP1CON2bits.ACKEN = 1;
  8420  0EBF  1616               	bsf	22,4	;volatile
  8421  0EC0  0008               	return
  8422  0EC1                     __end_of_I2C_MasterSendAck:	
  8423                           
  8424                           	psect	text46
  8425  0E7A                     __ptext46:	
  8426 ;; *************** function _I2C_MasterGetRxData *****************
  8427 ;; Defined at:
  8428 ;;		line 563 in file "mcc_generated_files/i2c_master.c"
  8429 ;; Parameters:    Size  Location     Type
  8430 ;;		None
  8431 ;; Auto vars:     Size  Location     Type
  8432 ;;		None
  8433 ;; Return value:  Size  Location     Type
  8434 ;;                  1    wreg      unsigned char 
  8435 ;; Registers used:
  8436 ;;		wreg
  8437 ;; Tracked objects:
  8438 ;;		On entry : 0/0
  8439 ;;		On exit  : 0/0
  8440 ;;		Unchanged: 0/0
  8441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8445 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8446 ;;Total ram usage:        0 bytes
  8447 ;; Hardware stack levels used:    1
  8448 ;; Hardware stack levels required when called:   13
  8449 ;; This function calls:
  8450 ;;		Nothing
  8451 ;; This function is called by:
  8452 ;;		_I2C_DO_RX
  8453 ;; This function uses a non-reentrant model
  8454 ;;
  8455                           
  8456                           
  8457                           ;psect for function _I2C_MasterGetRxData
  8458  0E7A                     _I2C_MasterGetRxData:	
  8459                           
  8460                           ;i2c_master.c: 565: return SSP1BUF;
  8461                           
  8462                           ;incstack = 0
  8463 ;; hardware stack exceeded
  8464                           ; Regs used in _I2C_MasterGetRxData: [wreg]
  8465  0E7A  0024               	movlb	4	; select bank4
  8466  0E7B  0811               	movf	17,w	;volatile
  8467  0E7C  0008               	return
  8468  0E7D                     __end_of_I2C_MasterGetRxData:	
  8469                           
  8470                           	psect	text47
  8471  0EB9                     __ptext47:	
  8472 ;; *************** function _I2C_MasterSendNack *****************
  8473 ;; Defined at:
  8474 ;;		line 609 in file "mcc_generated_files/i2c_master.c"
  8475 ;; Parameters:    Size  Location     Type
  8476 ;;		None
  8477 ;; Auto vars:     Size  Location     Type
  8478 ;;		None
  8479 ;; Return value:  Size  Location     Type
  8480 ;;                  1    wreg      void 
  8481 ;; Registers used:
  8482 ;;		None
  8483 ;; Tracked objects:
  8484 ;;		On entry : 0/0
  8485 ;;		On exit  : 0/0
  8486 ;;		Unchanged: 0/0
  8487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8492 ;;Total ram usage:        0 bytes
  8493 ;; Hardware stack levels used:    1
  8494 ;; Hardware stack levels required when called:   13
  8495 ;; This function calls:
  8496 ;;		Nothing
  8497 ;; This function is called by:
  8498 ;;		_I2C_DO_RX_NACK_STOP
  8499 ;;		_I2C_DO_RX_NACK_RESTART
  8500 ;; This function uses a non-reentrant model
  8501 ;;
  8502                           
  8503                           
  8504                           ;psect for function _I2C_MasterSendNack
  8505  0EB9                     _I2C_MasterSendNack:	
  8506                           
  8507                           ;i2c_master.c: 611: SSP1CON2bits.ACKDT = 1;
  8508                           
  8509                           ;incstack = 0
  8510 ;; hardware stack exceeded
  8511                           ; Regs used in _I2C_MasterSendNack: []
  8512  0EB9  0024               	movlb	4	; select bank4
  8513  0EBA  1696               	bsf	22,5	;volatile
  8514                           
  8515                           ;i2c_master.c: 612: SSP1CON2bits.ACKEN = 1;
  8516  0EBB  1616               	bsf	22,4	;volatile
  8517  0EBC  0008               	return
  8518  0EBD                     __end_of_I2C_MasterSendNack:	
  8519                           
  8520                           	psect	text48
  8521  0E77                     __ptext48:	
  8522 ;; *************** function _I2C_MasterStartRx *****************
  8523 ;; Defined at:
  8524 ;;		line 583 in file "mcc_generated_files/i2c_master.c"
  8525 ;; Parameters:    Size  Location     Type
  8526 ;;		None
  8527 ;; Auto vars:     Size  Location     Type
  8528 ;;		None
  8529 ;; Return value:  Size  Location     Type
  8530 ;;                  1    wreg      void 
  8531 ;; Registers used:
  8532 ;;		None
  8533 ;; Tracked objects:
  8534 ;;		On entry : 0/0
  8535 ;;		On exit  : 0/0
  8536 ;;		Unchanged: 0/0
  8537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8541 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8542 ;;Total ram usage:        0 bytes
  8543 ;; Hardware stack levels used:    1
  8544 ;; Hardware stack levels required when called:   13
  8545 ;; This function calls:
  8546 ;;		Nothing
  8547 ;; This function is called by:
  8548 ;;		_I2C_DO_RCEN
  8549 ;; This function uses a non-reentrant model
  8550 ;;
  8551                           
  8552                           
  8553                           ;psect for function _I2C_MasterStartRx
  8554  0E77                     _I2C_MasterStartRx:	
  8555                           
  8556                           ;i2c_master.c: 585: SSP1CON2bits.RCEN = 1;
  8557                           
  8558                           ;incstack = 0
  8559 ;; hardware stack exceeded
  8560                           ; Regs used in _I2C_MasterStartRx: []
  8561  0E77  0024               	movlb	4	; select bank4
  8562  0E78  1596               	bsf	22,3	;volatile
  8563  0E79  0008               	return
  8564  0E7A                     __end_of_I2C_MasterStartRx:	
  8565                           
  8566                           	psect	text49
  8567  0EEF                     __ptext49:	
  8568 ;; *************** function _I2C_CallbackReturnReset *****************
  8569 ;; Defined at:
  8570 ;;		line 525 in file "mcc_generated_files/i2c_master.c"
  8571 ;; Parameters:    Size  Location     Type
  8572 ;;  funPtr          1   21[BANK0 ] PTR void 
  8573 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8574 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8575 ;; Auto vars:     Size  Location     Type
  8576 ;;		None
  8577 ;; Return value:  Size  Location     Type
  8578 ;;                  1    wreg      enum E97
  8579 ;; Registers used:
  8580 ;;		wreg
  8581 ;; Tracked objects:
  8582 ;;		On entry : 0/0
  8583 ;;		On exit  : 0/0
  8584 ;;		Unchanged: 0/0
  8585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8586 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8589 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8590 ;;Total ram usage:        1 bytes
  8591 ;; Hardware stack levels used:    1
  8592 ;; Hardware stack levels required when called:   13
  8593 ;; This function calls:
  8594 ;;		Nothing
  8595 ;; This function is called by:
  8596 ;;		_I2C_Open
  8597 ;;		i1_I2C_DO_TX
  8598 ;;		i1_I2C_DO_RX
  8599 ;;		i1_I2C_DO_TX_EMPTY
  8600 ;;		i1_I2C_DO_ADDRESS_NACK
  8601 ;;		_I2C_DO_TX
  8602 ;;		_I2C_DO_RX
  8603 ;;		_I2C_DO_TX_EMPTY
  8604 ;;		_I2C_DO_ADDRESS_NACK
  8605 ;;		_I2C_DO_RX_EMPTY
  8606 ;; This function uses a non-reentrant model
  8607 ;;
  8608                           
  8609                           
  8610                           ;psect for function _I2C_CallbackReturnReset
  8611  0EEF                     _I2C_CallbackReturnReset:	
  8612                           
  8613                           ;Skip over the trampoline to the duplicate function for level 1
  8614  0EEF  1C7E               	btfss	126,0
  8615  0EF0  2EF3               	goto	l4043
  8616  0EF1  318E  2E45         	ljmp	i1l2685
  8617  0EF3                     _I2C_CallbackReturnReset$intlevel0:	
  8618  0EF3                     l4043:	
  8619                           ;incstack = 0
  8620 ;; hardware stack exceeded
  8621                           ; Regs used in _I2C_CallbackReturnReset: [wreg]
  8622                           
  8623                           
  8624                           ;i2c_master.c: 527: return I2C_RESET_LINK;
  8625  0EF3  3005               	movlw	5
  8626  0EF4  0008               	return
  8627  0EF5                     __end_of_I2C_CallbackReturnReset:	
  8628                           
  8629                           	psect	text50
  8630  0EE9                     __ptext50:	
  8631 ;; *************** function _I2C_CallbackReturnStop *****************
  8632 ;; Defined at:
  8633 ;;		line 520 in file "mcc_generated_files/i2c_master.c"
  8634 ;; Parameters:    Size  Location     Type
  8635 ;;  funPtr          1   21[BANK0 ] PTR void 
  8636 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8637 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8638 ;; Auto vars:     Size  Location     Type
  8639 ;;		None
  8640 ;; Return value:  Size  Location     Type
  8641 ;;                  1    wreg      enum E97
  8642 ;; Registers used:
  8643 ;;		wreg
  8644 ;; Tracked objects:
  8645 ;;		On entry : 0/0
  8646 ;;		On exit  : 0/0
  8647 ;;		Unchanged: 0/0
  8648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8649 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8652 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8653 ;;Total ram usage:        1 bytes
  8654 ;; Hardware stack levels used:    1
  8655 ;; Hardware stack levels required when called:   13
  8656 ;; This function calls:
  8657 ;;		Nothing
  8658 ;; This function is called by:
  8659 ;;		_I2C_Open
  8660 ;;		_I2C_SetCallback
  8661 ;;		i1_I2C_DO_TX
  8662 ;;		i1_I2C_DO_RX
  8663 ;;		i1_I2C_DO_TX_EMPTY
  8664 ;;		i1_I2C_DO_ADDRESS_NACK
  8665 ;;		_I2C_DO_TX
  8666 ;;		_I2C_DO_RX
  8667 ;;		_I2C_DO_TX_EMPTY
  8668 ;;		_I2C_DO_ADDRESS_NACK
  8669 ;;		_I2C_DO_RX_EMPTY
  8670 ;; This function uses a non-reentrant model
  8671 ;;
  8672                           
  8673                           
  8674                           ;psect for function _I2C_CallbackReturnStop
  8675  0EE9                     _I2C_CallbackReturnStop:	
  8676                           
  8677                           ;Skip over the trampoline to the duplicate function for level 1
  8678  0EE9  1C7E               	btfss	126,0
  8679  0EEA  2EED               	goto	l4039
  8680  0EEB  318E  2E43         	ljmp	i1l2681
  8681  0EED                     _I2C_CallbackReturnStop$intlevel0:	
  8682  0EED                     l4039:	
  8683                           ;incstack = 0
  8684 ;; hardware stack exceeded
  8685                           ; Regs used in _I2C_CallbackReturnStop: [wreg]
  8686                           
  8687                           
  8688                           ;i2c_master.c: 522: return I2C_STOP;
  8689  0EED  3001               	movlw	1
  8690  0EEE  0008               	return
  8691  0EEF                     __end_of_I2C_CallbackReturnStop:	
  8692                           
  8693                           	psect	text51
  8694  0651                     __ptext51:	
  8695 ;; *************** function _rdBlkRegCompleteHandler *****************
  8696 ;; Defined at:
  8697 ;;		line 170 in file "mcc_generated_files/examples/i2c_master_example.c"
  8698 ;; Parameters:    Size  Location     Type
  8699 ;;  ptr             1   21[BANK0 ] PTR void 
  8700 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8701 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8702 ;; Auto vars:     Size  Location     Type
  8703 ;;		None
  8704 ;; Return value:  Size  Location     Type
  8705 ;;                  1    wreg      enum E97
  8706 ;; Registers used:
  8707 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8708 ;; Tracked objects:
  8709 ;;		On entry : 0/0
  8710 ;;		On exit  : 0/0
  8711 ;;		Unchanged: 0/0
  8712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8713 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8716 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8717 ;;Total ram usage:        1 bytes
  8718 ;; Hardware stack levels used:    1
  8719 ;; Hardware stack levels required when called:   15
  8720 ;; This function calls:
  8721 ;;		_I2C_SetBuffer
  8722 ;;		_I2C_SetDataCompleteCallback
  8723 ;; This function is called by:
  8724 ;;		_I2C_ReadDataBlock
  8725 ;;		i1_I2C_DO_TX
  8726 ;;		i1_I2C_DO_RX
  8727 ;;		i1_I2C_DO_TX_EMPTY
  8728 ;;		i1_I2C_DO_ADDRESS_NACK
  8729 ;;		_I2C_DO_TX
  8730 ;;		_I2C_DO_RX
  8731 ;;		_I2C_DO_TX_EMPTY
  8732 ;;		_I2C_DO_ADDRESS_NACK
  8733 ;;		_I2C_DO_RX_EMPTY
  8734 ;; This function uses a non-reentrant model
  8735 ;;
  8736                           
  8737                           
  8738                           ;psect for function _rdBlkRegCompleteHandler
  8739  0651                     _rdBlkRegCompleteHandler:	
  8740                           
  8741                           ;Skip over the trampoline to the duplicate function for level 1
  8742  0651  1C7E               	btfss	126,0
  8743  0652  2E55               	goto	l3981
  8744  0653  3186  2EA3         	ljmp	i1l2639
  8745  0655                     _rdBlkRegCompleteHandler$intlevel0:	
  8746  0655                     l3981:	
  8747                           ;incstack = 0
  8748 ;; hardware stack exceeded
  8749                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  8750                           
  8751                           
  8752                           ;i2c_master_example.c: 172: I2C_SetBuffer(((i2c_buffer_t *)ptr)->data,((i2c_buffer_t*)pt
      +                          r)->len);
  8753  0655  0020               	movlb	0	; select bank0
  8754  0656  0852               	movf	rdBlkRegCompleteHandler@ptr,w
  8755  0657  0086               	movwf	6
  8756  0658  0187               	clrf	7
  8757  0659  3F40               	moviw [0]fsr1
  8758  065A  00C9               	movwf	I2C_SetBuffer@bufferSize
  8759  065B  3F41               	moviw [1]fsr1
  8760  065C  00CA               	movwf	I2C_SetBuffer@bufferSize+1
  8761  065D  0852               	movf	rdBlkRegCompleteHandler@ptr,w
  8762  065E  3E02               	addlw	2
  8763  065F  0086               	movwf	6
  8764  0660  0187               	clrf	7
  8765  0661  0801               	movf	1,w
  8766  0662  3187  2754  3186   	fcall	_I2C_SetBuffer
  8767                           
  8768                           ;i2c_master_example.c: 173: I2C_SetDataCompleteCallback((0),(0));
  8769  0665  3000               	movlw	0
  8770  0666  0020               	movlb	0	; select bank0
  8771  0667  00CE               	movwf	I2C_SetDataCompleteCallback@cb
  8772  0668  00CF               	movwf	I2C_SetDataCompleteCallback@cb+1
  8773  0669  01D0               	clrf	I2C_SetDataCompleteCallback@ptr
  8774  066A  3187  27D6         	fcall	_I2C_SetDataCompleteCallback
  8775                           
  8776                           ;i2c_master_example.c: 174: return I2C_RESTART_READ;
  8777  066C  3002               	movlw	2
  8778  066D  0008               	return
  8779  066E                     __end_of_rdBlkRegCompleteHandler:	
  8780                           
  8781                           	psect	text52
  8782  06D1                     __ptext52:	
  8783 ;; *************** function _wr1RegCompleteHandler *****************
  8784 ;; Defined at:
  8785 ;;		line 156 in file "mcc_generated_files/examples/i2c_master_example.c"
  8786 ;; Parameters:    Size  Location     Type
  8787 ;;  ptr             1   21[BANK0 ] PTR void 
  8788 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8789 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8790 ;; Auto vars:     Size  Location     Type
  8791 ;;		None
  8792 ;; Return value:  Size  Location     Type
  8793 ;;                  1    wreg      enum E97
  8794 ;; Registers used:
  8795 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8796 ;; Tracked objects:
  8797 ;;		On entry : 0/0
  8798 ;;		On exit  : 0/0
  8799 ;;		Unchanged: 0/0
  8800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8801 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8804 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8805 ;;Total ram usage:        1 bytes
  8806 ;; Hardware stack levels used:    1
  8807 ;; Hardware stack levels required when called:   15
  8808 ;; This function calls:
  8809 ;;		_I2C_SetBuffer
  8810 ;;		_I2C_SetDataCompleteCallback
  8811 ;; This function is called by:
  8812 ;;		_I2C_Write1ByteRegister
  8813 ;;		i1_I2C_DO_TX
  8814 ;;		i1_I2C_DO_RX
  8815 ;;		i1_I2C_DO_TX_EMPTY
  8816 ;;		i1_I2C_DO_ADDRESS_NACK
  8817 ;;		_I2C_DO_TX
  8818 ;;		_I2C_DO_RX
  8819 ;;		_I2C_DO_TX_EMPTY
  8820 ;;		_I2C_DO_ADDRESS_NACK
  8821 ;;		_I2C_DO_RX_EMPTY
  8822 ;; This function uses a non-reentrant model
  8823 ;;
  8824                           
  8825                           
  8826                           ;psect for function _wr1RegCompleteHandler
  8827  06D1                     _wr1RegCompleteHandler:	
  8828                           
  8829                           ;Skip over the trampoline to the duplicate function for level 1
  8830  06D1  1C7E               	btfss	126,0
  8831  06D2  2ED5               	goto	l3965
  8832  06D3  3187  2F7B         	ljmp	i1l2623
  8833  06D5                     _wr1RegCompleteHandler$intlevel0:	
  8834  06D5                     l3965:	
  8835                           ;incstack = 0
  8836 ;; hardware stack exceeded
  8837                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8838                           
  8839                           
  8840                           ;i2c_master_example.c: 158: I2C_SetBuffer(ptr,1);
  8841  06D5  3001               	movlw	1
  8842  06D6  0020               	movlb	0	; select bank0
  8843  06D7  00C9               	movwf	I2C_SetBuffer@bufferSize
  8844  06D8  3000               	movlw	0
  8845  06D9  00CA               	movwf	I2C_SetBuffer@bufferSize+1
  8846  06DA  0852               	movf	wr1RegCompleteHandler@ptr,w
  8847  06DB  3187  2754  3186   	fcall	_I2C_SetBuffer
  8848                           
  8849                           ;i2c_master_example.c: 159: I2C_SetDataCompleteCallback((0),(0));
  8850  06DE  3000               	movlw	0
  8851  06DF  0020               	movlb	0	; select bank0
  8852  06E0  00CE               	movwf	I2C_SetDataCompleteCallback@cb
  8853  06E1  00CF               	movwf	I2C_SetDataCompleteCallback@cb+1
  8854  06E2  01D0               	clrf	I2C_SetDataCompleteCallback@ptr
  8855  06E3  3187  27D6         	fcall	_I2C_SetDataCompleteCallback
  8856                           
  8857                           ;i2c_master_example.c: 160: return I2C_CONTINUE;
  8858  06E5  3004               	movlw	4
  8859  06E6  0008               	return
  8860  06E7                     __end_of_wr1RegCompleteHandler:	
  8861                           
  8862                           	psect	text53
  8863  06E7                     __ptext53:	
  8864 ;; *************** function _rd2RegCompleteHandler *****************
  8865 ;; Defined at:
  8866 ;;		line 149 in file "mcc_generated_files/examples/i2c_master_example.c"
  8867 ;; Parameters:    Size  Location     Type
  8868 ;;  ptr             1   21[BANK0 ] PTR void 
  8869 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8870 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8871 ;; Auto vars:     Size  Location     Type
  8872 ;;		None
  8873 ;; Return value:  Size  Location     Type
  8874 ;;                  1    wreg      enum E97
  8875 ;; Registers used:
  8876 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8877 ;; Tracked objects:
  8878 ;;		On entry : 0/0
  8879 ;;		On exit  : 0/0
  8880 ;;		Unchanged: 0/0
  8881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8882 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8885 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8886 ;;Total ram usage:        1 bytes
  8887 ;; Hardware stack levels used:    1
  8888 ;; Hardware stack levels required when called:   15
  8889 ;; This function calls:
  8890 ;;		_I2C_SetBuffer
  8891 ;;		_I2C_SetDataCompleteCallback
  8892 ;; This function is called by:
  8893 ;;		_I2C_Read2ByteRegister
  8894 ;;		i1_I2C_DO_TX
  8895 ;;		i1_I2C_DO_RX
  8896 ;;		i1_I2C_DO_TX_EMPTY
  8897 ;;		i1_I2C_DO_ADDRESS_NACK
  8898 ;;		_I2C_DO_TX
  8899 ;;		_I2C_DO_RX
  8900 ;;		_I2C_DO_TX_EMPTY
  8901 ;;		_I2C_DO_ADDRESS_NACK
  8902 ;;		_I2C_DO_RX_EMPTY
  8903 ;; This function uses a non-reentrant model
  8904 ;;
  8905                           
  8906                           
  8907                           ;psect for function _rd2RegCompleteHandler
  8908  06E7                     _rd2RegCompleteHandler:	
  8909                           
  8910                           ;Skip over the trampoline to the duplicate function for level 1
  8911  06E7  1C7E               	btfss	126,0
  8912  06E8  2EEB               	goto	l3957
  8913  06E9  3187  2F8B         	ljmp	i1l2615
  8914  06EB                     _rd2RegCompleteHandler$intlevel0:	
  8915  06EB                     l3957:	
  8916                           ;incstack = 0
  8917 ;; hardware stack exceeded
  8918                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8919                           
  8920                           
  8921                           ;i2c_master_example.c: 151: I2C_SetBuffer(ptr,2);
  8922  06EB  3002               	movlw	2
  8923  06EC  0020               	movlb	0	; select bank0
  8924  06ED  00C9               	movwf	I2C_SetBuffer@bufferSize
  8925  06EE  3000               	movlw	0
  8926  06EF  00CA               	movwf	I2C_SetBuffer@bufferSize+1
  8927  06F0  0852               	movf	rd2RegCompleteHandler@ptr,w
  8928  06F1  3187  2754  3186   	fcall	_I2C_SetBuffer
  8929                           
  8930                           ;i2c_master_example.c: 152: I2C_SetDataCompleteCallback((0),(0));
  8931  06F4  3000               	movlw	0
  8932  06F5  0020               	movlb	0	; select bank0
  8933  06F6  00CE               	movwf	I2C_SetDataCompleteCallback@cb
  8934  06F7  00CF               	movwf	I2C_SetDataCompleteCallback@cb+1
  8935  06F8  01D0               	clrf	I2C_SetDataCompleteCallback@ptr
  8936  06F9  3187  27D6         	fcall	_I2C_SetDataCompleteCallback
  8937                           
  8938                           ;i2c_master_example.c: 153: return I2C_RESTART_READ;
  8939  06FB  3002               	movlw	2
  8940  06FC  0008               	return
  8941  06FD                     __end_of_rd2RegCompleteHandler:	
  8942                           
  8943                           	psect	text54
  8944  06FD                     __ptext54:	
  8945 ;; *************** function _rd1RegCompleteHandler *****************
  8946 ;; Defined at:
  8947 ;;		line 142 in file "mcc_generated_files/examples/i2c_master_example.c"
  8948 ;; Parameters:    Size  Location     Type
  8949 ;;  ptr             1   21[BANK0 ] PTR void 
  8950 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8951 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8952 ;; Auto vars:     Size  Location     Type
  8953 ;;		None
  8954 ;; Return value:  Size  Location     Type
  8955 ;;                  1    wreg      enum E97
  8956 ;; Registers used:
  8957 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8958 ;; Tracked objects:
  8959 ;;		On entry : 0/0
  8960 ;;		On exit  : 0/0
  8961 ;;		Unchanged: 0/0
  8962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8963 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8966 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8967 ;;Total ram usage:        1 bytes
  8968 ;; Hardware stack levels used:    1
  8969 ;; Hardware stack levels required when called:   15
  8970 ;; This function calls:
  8971 ;;		_I2C_SetBuffer
  8972 ;;		_I2C_SetDataCompleteCallback
  8973 ;; This function is called by:
  8974 ;;		i1_I2C_DO_TX
  8975 ;;		i1_I2C_DO_RX
  8976 ;;		i1_I2C_DO_TX_EMPTY
  8977 ;;		i1_I2C_DO_ADDRESS_NACK
  8978 ;;		_I2C_DO_TX
  8979 ;;		_I2C_DO_RX
  8980 ;;		_I2C_DO_TX_EMPTY
  8981 ;;		_I2C_DO_ADDRESS_NACK
  8982 ;;		_I2C_DO_RX_EMPTY
  8983 ;; This function uses a non-reentrant model
  8984 ;;
  8985                           
  8986                           
  8987                           ;psect for function _rd1RegCompleteHandler
  8988  06FD                     _rd1RegCompleteHandler:	
  8989                           
  8990                           ;Skip over the trampoline to the duplicate function for level 1
  8991  06FD  1C7E               	btfss	126,0
  8992  06FE  2F01               	goto	l3949
  8993  06FF  3187  2F9B         	ljmp	i1l2607
  8994  0701                     _rd1RegCompleteHandler$intlevel0:	
  8995  0701                     l3949:	
  8996                           ;incstack = 0
  8997 ;; hardware stack exceeded
  8998                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8999                           
  9000                           
  9001                           ;i2c_master_example.c: 144: I2C_SetBuffer(ptr,1);
  9002  0701  3001               	movlw	1
  9003  0702  0020               	movlb	0	; select bank0
  9004  0703  00C9               	movwf	I2C_SetBuffer@bufferSize
  9005  0704  3000               	movlw	0
  9006  0705  00CA               	movwf	I2C_SetBuffer@bufferSize+1
  9007  0706  0852               	movf	rd1RegCompleteHandler@ptr,w
  9008  0707  3187  2754  3186   	fcall	_I2C_SetBuffer
  9009                           
  9010                           ;i2c_master_example.c: 145: I2C_SetDataCompleteCallback((0),(0));
  9011  070A  3000               	movlw	0
  9012  070B  0020               	movlb	0	; select bank0
  9013  070C  00CE               	movwf	I2C_SetDataCompleteCallback@cb
  9014  070D  00CF               	movwf	I2C_SetDataCompleteCallback@cb+1
  9015  070E  01D0               	clrf	I2C_SetDataCompleteCallback@ptr
  9016  070F  3187  27D6         	fcall	_I2C_SetDataCompleteCallback
  9017                           
  9018                           ;i2c_master_example.c: 146: return I2C_RESTART_READ;
  9019  0711  3002               	movlw	2
  9020  0712  0008               	return
  9021  0713                     __end_of_rd1RegCompleteHandler:	
  9022                           
  9023                           	psect	text55
  9024  0713                     __ptext55:	
  9025 ;; *************** function _wr2RegCompleteHandler *****************
  9026 ;; Defined at:
  9027 ;;		line 163 in file "mcc_generated_files/examples/i2c_master_example.c"
  9028 ;; Parameters:    Size  Location     Type
  9029 ;;  ptr             1   21[BANK0 ] PTR void 
  9030 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  9031 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  9032 ;; Auto vars:     Size  Location     Type
  9033 ;;		None
  9034 ;; Return value:  Size  Location     Type
  9035 ;;                  1    wreg      enum E97
  9036 ;; Registers used:
  9037 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9038 ;; Tracked objects:
  9039 ;;		On entry : 0/0
  9040 ;;		On exit  : 0/0
  9041 ;;		Unchanged: 0/0
  9042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9043 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9046 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9047 ;;Total ram usage:        1 bytes
  9048 ;; Hardware stack levels used:    1
  9049 ;; Hardware stack levels required when called:   15
  9050 ;; This function calls:
  9051 ;;		_I2C_SetBuffer
  9052 ;;		_I2C_SetDataCompleteCallback
  9053 ;; This function is called by:
  9054 ;;		_I2C_Write2ByteRegister
  9055 ;;		i1_I2C_DO_TX
  9056 ;;		i1_I2C_DO_RX
  9057 ;;		i1_I2C_DO_TX_EMPTY
  9058 ;;		i1_I2C_DO_ADDRESS_NACK
  9059 ;;		_I2C_DO_TX
  9060 ;;		_I2C_DO_RX
  9061 ;;		_I2C_DO_TX_EMPTY
  9062 ;;		_I2C_DO_ADDRESS_NACK
  9063 ;;		_I2C_DO_RX_EMPTY
  9064 ;; This function uses a non-reentrant model
  9065 ;;
  9066                           
  9067                           
  9068                           ;psect for function _wr2RegCompleteHandler
  9069  0713                     _wr2RegCompleteHandler:	
  9070                           
  9071                           ;Skip over the trampoline to the duplicate function for level 1
  9072  0713  1C7E               	btfss	126,0
  9073  0714  2F17               	goto	l3973
  9074  0715  3187  2FAB         	ljmp	i1l2631
  9075  0717                     _wr2RegCompleteHandler$intlevel0:	
  9076  0717                     l3973:	
  9077                           ;incstack = 0
  9078 ;; hardware stack exceeded
  9079                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9080                           
  9081                           
  9082                           ;i2c_master_example.c: 165: I2C_SetBuffer(ptr,2);
  9083  0717  3002               	movlw	2
  9084  0718  0020               	movlb	0	; select bank0
  9085  0719  00C9               	movwf	I2C_SetBuffer@bufferSize
  9086  071A  3000               	movlw	0
  9087  071B  00CA               	movwf	I2C_SetBuffer@bufferSize+1
  9088  071C  0852               	movf	wr2RegCompleteHandler@ptr,w
  9089  071D  3187  2754  3187   	fcall	_I2C_SetBuffer
  9090                           
  9091                           ;i2c_master_example.c: 166: I2C_SetDataCompleteCallback((0),(0));
  9092  0720  3000               	movlw	0
  9093  0721  0020               	movlb	0	; select bank0
  9094  0722  00CE               	movwf	I2C_SetDataCompleteCallback@cb
  9095  0723  00CF               	movwf	I2C_SetDataCompleteCallback@cb+1
  9096  0724  01D0               	clrf	I2C_SetDataCompleteCallback@ptr
  9097  0725  3187  27D6         	fcall	_I2C_SetDataCompleteCallback
  9098                           
  9099                           ;i2c_master_example.c: 167: return I2C_CONTINUE;
  9100  0727  3004               	movlw	4
  9101  0728  0008               	return
  9102  0729                     __end_of_wr2RegCompleteHandler:	
  9103                           
  9104                           	psect	text56
  9105  07D6                     __ptext56:	
  9106 ;; *************** function _I2C_SetDataCompleteCallback *****************
  9107 ;; Defined at:
  9108 ;;		line 273 in file "mcc_generated_files/i2c_master.c"
  9109 ;; Parameters:    Size  Location     Type
  9110 ;;  cb              2   17[BANK0 ] PTR FTN(PTR void ,)enum 
  9111 ;;		 -> i1_wr1RegCompleteHandler(1), i1_rd1RegCompleteHandler(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), 
  9112 ;;		 -> wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), Absolute function(1), rd1RegCompleteHandler(1), 
  9113 ;;  ptr             1   19[BANK0 ] PTR void 
  9114 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  9115 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  9116 ;; Auto vars:     Size  Location     Type
  9117 ;;		None
  9118 ;; Return value:  Size  Location     Type
  9119 ;;                  1    wreg      void 
  9120 ;; Registers used:
  9121 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9122 ;; Tracked objects:
  9123 ;;		On entry : 0/0
  9124 ;;		On exit  : 0/0
  9125 ;;		Unchanged: 0/0
  9126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9127 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9129 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9130 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9131 ;;Total ram usage:        4 bytes
  9132 ;; Hardware stack levels used:    1
  9133 ;; Hardware stack levels required when called:   14
  9134 ;; This function calls:
  9135 ;;		_I2C_SetCallback
  9136 ;; This function is called by:
  9137 ;;		_I2C_Write1ByteRegister
  9138 ;;		_rd1RegCompleteHandler
  9139 ;;		_rd2RegCompleteHandler
  9140 ;;		_wr1RegCompleteHandler
  9141 ;;		_wr2RegCompleteHandler
  9142 ;;		_rdBlkRegCompleteHandler
  9143 ;;		_I2C_Read2ByteRegister
  9144 ;;		_I2C_Write2ByteRegister
  9145 ;;		_I2C_ReadDataBlock
  9146 ;; This function uses a non-reentrant model
  9147 ;;
  9148                           
  9149                           
  9150                           ;psect for function _I2C_SetDataCompleteCallback
  9151  07D6                     _I2C_SetDataCompleteCallback:	
  9152                           
  9153                           ;i2c_master.c: 275: I2C_SetCallback(I2C_DATA_COMPLETE, cb, ptr);
  9154                           
  9155                           ;incstack = 0
  9156                           ; Regs used in _I2C_SetDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  9157  07D6  0020               	movlb	0	; select bank0
  9158  07D7  084F               	movf	I2C_SetDataCompleteCallback@cb+1,w
  9159  07D8  00CA               	movwf	I2C_SetCallback@cb+1
  9160  07D9  084E               	movf	I2C_SetDataCompleteCallback@cb,w
  9161  07DA  00C9               	movwf	I2C_SetCallback@cb
  9162  07DB  0850               	movf	I2C_SetDataCompleteCallback@ptr,w
  9163  07DC  00D1               	movwf	??_I2C_SetDataCompleteCallback
  9164  07DD  0851               	movf	??_I2C_SetDataCompleteCallback,w
  9165  07DE  00CB               	movwf	I2C_SetCallback@ptr
  9166  07DF  3000               	movlw	0
  9167  07E0  3185  2564         	fcall	_I2C_SetCallback
  9168  07E2  0008               	return
  9169  07E3                     __end_of_I2C_SetDataCompleteCallback:	
  9170                           
  9171                           	psect	text57
  9172  0564                     __ptext57:	
  9173 ;; *************** function _I2C_SetCallback *****************
  9174 ;; Defined at:
  9175 ;;		line 298 in file "mcc_generated_files/i2c_master.c"
  9176 ;; Parameters:    Size  Location     Type
  9177 ;;  idx             1    wreg     enum E12121
  9178 ;;  cb              2   12[BANK0 ] PTR FTN(PTR void ,)enum 
  9179 ;;		 -> i1_wr1RegCompleteHandler(1), i1_rd1RegCompleteHandler(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), 
  9180 ;;		 -> wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), Absolute function(1), rd1RegCompleteHandler(1), 
  9181 ;;  ptr             1   14[BANK0 ] PTR void 
  9182 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  9183 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  9184 ;; Auto vars:     Size  Location     Type
  9185 ;;  idx             1   16[BANK0 ] enum E12121
  9186 ;; Return value:  Size  Location     Type
  9187 ;;                  1    wreg      void 
  9188 ;; Registers used:
  9189 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9190 ;; Tracked objects:
  9191 ;;		On entry : 0/0
  9192 ;;		On exit  : 0/0
  9193 ;;		Unchanged: 0/0
  9194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9195 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9196 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9197 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9198 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9199 ;;Total ram usage:        5 bytes
  9200 ;; Hardware stack levels used:    1
  9201 ;; Hardware stack levels required when called:   13
  9202 ;; This function calls:
  9203 ;;		Nothing
  9204 ;; This function is called by:
  9205 ;;		_I2C_SetDataCompleteCallback
  9206 ;;		_I2C_SetAddressNackCallback
  9207 ;;		_I2C_SetWriteCollisionCallback
  9208 ;;		_I2C_SetDataNackCallback
  9209 ;;		_I2C_SetTimeoutCallback
  9210 ;; This function uses a non-reentrant model
  9211 ;;
  9212                           
  9213                           
  9214                           ;psect for function _I2C_SetCallback
  9215  0564                     _I2C_SetCallback:	
  9216                           
  9217                           ;incstack = 0
  9218                           ; Regs used in _I2C_SetCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
  9219                           ;I2C_SetCallback@idx stored from wreg
  9220  0564  0020               	movlb	0	; select bank0
  9221  0565  00CD               	movwf	I2C_SetCallback@idx
  9222                           
  9223                           ;i2c_master.c: 300: if(cb)
  9224  0566  0849               	movf	I2C_SetCallback@cb,w
  9225  0567  044A               	iorwf	I2C_SetCallback@cb+1,w
  9226  0568  1903               	btfsc	3,2
  9227  0569  2D7B               	goto	l3831
  9228                           
  9229                           ;i2c_master.c: 301: {
  9230                           ;i2c_master.c: 302: I2C_Status.callbackTable[idx] = cb;
  9231  056A  354D               	lslf	I2C_SetCallback@idx,w
  9232  056B  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
  9233  056C  0086               	movwf	6
  9234  056D  0187               	clrf	7
  9235  056E  0849               	movf	I2C_SetCallback@cb,w
  9236  056F  3FC0               	movwi [0]fsr1
  9237  0570  084A               	movf	I2C_SetCallback@cb+1,w
  9238  0571  3FC1               	movwi [1]fsr1
  9239                           
  9240                           ;i2c_master.c: 303: I2C_Status.callbackPayload[idx] = ptr;
  9241  0572  084B               	movf	I2C_SetCallback@ptr,w
  9242  0573  00CC               	movwf	??_I2C_SetCallback
  9243  0574  084D               	movf	I2C_SetCallback@idx,w
  9244  0575  3EAC               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
  9245  0576  0086               	movwf	6
  9246  0577  0187               	clrf	7
  9247  0578  084C               	movf	??_I2C_SetCallback,w
  9248  0579  0081               	movwf	1
  9249                           
  9250                           ;i2c_master.c: 304: }
  9251  057A  0008               	return
  9252  057B                     l3831:	
  9253                           
  9254                           ;i2c_master.c: 305: else
  9255                           ;i2c_master.c: 306: {
  9256                           ;i2c_master.c: 307: I2C_Status.callbackTable[idx] = I2C_CallbackReturnStop;
  9257  057B  354D               	lslf	I2C_SetCallback@idx,w
  9258  057C  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
  9259  057D  0086               	movwf	6
  9260  057E  0187               	clrf	7
  9261  057F  30E9               	movlw	low _I2C_CallbackReturnStop
  9262  0580  3FC0               	movwi [0]fsr1
  9263  0581  300E               	movlw	high _I2C_CallbackReturnStop
  9264  0582  3FC1               	movwi [1]fsr1
  9265                           
  9266                           ;i2c_master.c: 308: I2C_Status.callbackPayload[idx] = (0);
  9267  0583  084D               	movf	I2C_SetCallback@idx,w
  9268  0584  3EAC               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
  9269  0585  0086               	movwf	6
  9270  0586  0187               	clrf	7
  9271  0587  0181               	clrf	1
  9272  0588  0008               	return
  9273  0589                     __end_of_I2C_SetCallback:	
  9274                           
  9275                           	psect	text58
  9276  0754                     __ptext58:	
  9277 ;; *************** function _I2C_SetBuffer *****************
  9278 ;; Defined at:
  9279 ;;		line 263 in file "mcc_generated_files/i2c_master.c"
  9280 ;; Parameters:    Size  Location     Type
  9281 ;;  buffer          1    wreg     PTR void 
  9282 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
  9283 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
  9284 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
  9285 ;;  bufferSize      2   12[BANK0 ] unsigned int 
  9286 ;; Auto vars:     Size  Location     Type
  9287 ;;  buffer          1   15[BANK0 ] PTR void 
  9288 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
  9289 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
  9290 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
  9291 ;; Return value:  Size  Location     Type
  9292 ;;                  1    wreg      void 
  9293 ;; Registers used:
  9294 ;;		wreg
  9295 ;; Tracked objects:
  9296 ;;		On entry : 0/0
  9297 ;;		On exit  : 0/0
  9298 ;;		Unchanged: 0/0
  9299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9300 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9301 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9302 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9303 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9304 ;;Total ram usage:        4 bytes
  9305 ;; Hardware stack levels used:    1
  9306 ;; Hardware stack levels required when called:   13
  9307 ;; This function calls:
  9308 ;;		Nothing
  9309 ;; This function is called by:
  9310 ;;		_I2C_Write1ByteRegister
  9311 ;;		_rd1RegCompleteHandler
  9312 ;;		_rd2RegCompleteHandler
  9313 ;;		_wr1RegCompleteHandler
  9314 ;;		_wr2RegCompleteHandler
  9315 ;;		_rdBlkRegCompleteHandler
  9316 ;;		_I2C_Read2ByteRegister
  9317 ;;		_I2C_Write2ByteRegister
  9318 ;;		_I2C_WriteNBytes
  9319 ;;		_I2C_ReadNBytes
  9320 ;;		_I2C_ReadDataBlock
  9321 ;; This function uses a non-reentrant model
  9322 ;;
  9323                           
  9324                           
  9325                           ;psect for function _I2C_SetBuffer
  9326  0754                     _I2C_SetBuffer:	
  9327                           
  9328                           ;incstack = 0
  9329                           ; Regs used in _I2C_SetBuffer: [wreg]
  9330                           ;I2C_SetBuffer@buffer stored from wreg
  9331  0754  0020               	movlb	0	; select bank0
  9332  0755  00CC               	movwf	I2C_SetBuffer@buffer
  9333                           
  9334                           ;i2c_master.c: 265: if(I2C_Status.bufferFree)
  9335  0756  0021               	movlb	1	; select bank1
  9336  0757  1DBC               	btfss	(_I2C_Status^(0+128)+28),3
  9337  0758  0008               	return
  9338                           
  9339                           ;i2c_master.c: 266: {
  9340                           ;i2c_master.c: 267: I2C_Status.data_ptr = buffer;
  9341  0759  0020               	movlb	0	; select bank0
  9342  075A  084C               	movf	I2C_SetBuffer@buffer,w
  9343  075B  00CB               	movwf	??_I2C_SetBuffer
  9344  075C  084B               	movf	??_I2C_SetBuffer,w
  9345  075D  0021               	movlb	1	; select bank1
  9346  075E  00B7               	movwf	(low ((_I2C_Status| 0+23)))^(0+128)
  9347                           
  9348                           ;i2c_master.c: 268: I2C_Status.data_length = bufferSize;
  9349  075F  0020               	movlb	0	; select bank0
  9350  0760  084A               	movf	I2C_SetBuffer@bufferSize+1,w
  9351  0761  0021               	movlb	1	; select bank1
  9352  0762  00B9               	movwf	((_I2C_Status+1)^(0+128)+24)
  9353  0763  0020               	movlb	0	; select bank0
  9354  0764  0849               	movf	I2C_SetBuffer@bufferSize,w
  9355  0765  0021               	movlb	1	; select bank1
  9356  0766  00B8               	movwf	(_I2C_Status^(0+128)+24)
  9357                           
  9358                           ;i2c_master.c: 269: I2C_Status.bufferFree = 0;
  9359  0767  11BC               	bcf	(_I2C_Status^(0+128)+28),3
  9360  0768  0008               	return
  9361  0769                     __end_of_I2C_SetBuffer:	
  9362                           
  9363                           	psect	text59
  9364  0E74                     __ptext59:	
  9365 ;; *************** function _I2C_MasterStop *****************
  9366 ;; Defined at:
  9367 ;;		line 593 in file "mcc_generated_files/i2c_master.c"
  9368 ;; Parameters:    Size  Location     Type
  9369 ;;		None
  9370 ;; Auto vars:     Size  Location     Type
  9371 ;;		None
  9372 ;; Return value:  Size  Location     Type
  9373 ;;                  1    wreg      void 
  9374 ;; Registers used:
  9375 ;;		None
  9376 ;; Tracked objects:
  9377 ;;		On entry : 0/0
  9378 ;;		On exit  : 0/0
  9379 ;;		Unchanged: 0/0
  9380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9385 ;;Total ram usage:        0 bytes
  9386 ;; Hardware stack levels used:    1
  9387 ;; Hardware stack levels required when called:   13
  9388 ;; This function calls:
  9389 ;;		Nothing
  9390 ;; This function is called by:
  9391 ;;		_I2C_DO_SEND_STOP
  9392 ;; This function uses a non-reentrant model
  9393 ;;
  9394                           
  9395                           
  9396                           ;psect for function _I2C_MasterStop
  9397  0E74                     _I2C_MasterStop:	
  9398                           
  9399                           ;i2c_master.c: 595: SSP1CON2bits.PEN = 1;
  9400                           
  9401                           ;incstack = 0
  9402 ;; hardware stack exceeded
  9403                           ; Regs used in _I2C_MasterStop: []
  9404  0E74  0024               	movlb	4	; select bank4
  9405  0E75  1516               	bsf	22,2	;volatile
  9406  0E76  0008               	return
  9407  0E77                     __end_of_I2C_MasterStop:	
  9408                           
  9409                           	psect	text60
  9410  0E71                     __ptext60:	
  9411 ;; *************** function _I2C_MasterEnableRestart *****************
  9412 ;; Defined at:
  9413 ;;		line 573 in file "mcc_generated_files/i2c_master.c"
  9414 ;; Parameters:    Size  Location     Type
  9415 ;;		None
  9416 ;; Auto vars:     Size  Location     Type
  9417 ;;		None
  9418 ;; Return value:  Size  Location     Type
  9419 ;;                  1    wreg      void 
  9420 ;; Registers used:
  9421 ;;		None
  9422 ;; Tracked objects:
  9423 ;;		On entry : 0/0
  9424 ;;		On exit  : 0/0
  9425 ;;		Unchanged: 0/0
  9426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9431 ;;Total ram usage:        0 bytes
  9432 ;; Hardware stack levels used:    1
  9433 ;; Hardware stack levels required when called:   13
  9434 ;; This function calls:
  9435 ;;		Nothing
  9436 ;; This function is called by:
  9437 ;;		_I2C_DO_SEND_RESTART_READ
  9438 ;;		_I2C_DO_SEND_RESTART_WRITE
  9439 ;;		_I2C_DO_SEND_RESTART
  9440 ;;		_I2C_DO_RX_EMPTY
  9441 ;; This function uses a non-reentrant model
  9442 ;;
  9443                           
  9444                           
  9445                           ;psect for function _I2C_MasterEnableRestart
  9446  0E71                     _I2C_MasterEnableRestart:	
  9447                           
  9448                           ;i2c_master.c: 575: SSP1CON2bits.RSEN = 1;
  9449                           
  9450                           ;incstack = 0
  9451 ;; hardware stack exceeded
  9452                           ; Regs used in _I2C_MasterEnableRestart: []
  9453  0E71  0024               	movlb	4	; select bank4
  9454  0E72  1496               	bsf	22,1	;volatile
  9455  0E73  0008               	return
  9456  0E74                     __end_of_I2C_MasterEnableRestart:	
  9457                           
  9458                           	psect	text61
  9459  0E6E                     __ptext61:	
  9460 ;; *************** function _I2C_MasterStart *****************
  9461 ;; Defined at:
  9462 ;;		line 588 in file "mcc_generated_files/i2c_master.c"
  9463 ;; Parameters:    Size  Location     Type
  9464 ;;		None
  9465 ;; Auto vars:     Size  Location     Type
  9466 ;;		None
  9467 ;; Return value:  Size  Location     Type
  9468 ;;                  1    wreg      void 
  9469 ;; Registers used:
  9470 ;;		None
  9471 ;; Tracked objects:
  9472 ;;		On entry : 0/0
  9473 ;;		On exit  : 0/0
  9474 ;;		Unchanged: 0/0
  9475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9479 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9480 ;;Total ram usage:        0 bytes
  9481 ;; Hardware stack levels used:    1
  9482 ;; Hardware stack levels required when called:   13
  9483 ;; This function calls:
  9484 ;;		Nothing
  9485 ;; This function is called by:
  9486 ;;		_I2C_MasterOperation
  9487 ;; This function uses a non-reentrant model
  9488 ;;
  9489                           
  9490                           
  9491                           ;psect for function _I2C_MasterStart
  9492  0E6E                     _I2C_MasterStart:	
  9493                           
  9494                           ;i2c_master.c: 590: SSP1CON2bits.SEN = 1;
  9495                           
  9496                           ;incstack = 0
  9497 ;; hardware stack exceeded
  9498                           ; Regs used in _I2C_MasterStart: []
  9499  0E6E  0024               	movlb	4	; select bank4
  9500  0E6F  1416               	bsf	22,0	;volatile
  9501  0E70  0008               	return
  9502  0E71                     __end_of_I2C_MasterStart:	
  9503                           
  9504                           	psect	text62
  9505  0615                     __ptext62:	
  9506 ;; *************** function _I2C_Close *****************
  9507 ;; Defined at:
  9508 ;;		line 209 in file "mcc_generated_files/i2c_master.c"
  9509 ;; Parameters:    Size  Location     Type
  9510 ;;		None
  9511 ;; Auto vars:     Size  Location     Type
  9512 ;;  returnValue     1   13[BANK0 ] enum E92
  9513 ;; Return value:  Size  Location     Type
  9514 ;;                  1    wreg      enum E92
  9515 ;; Registers used:
  9516 ;;		wreg, status,2, status,0, pclath, cstack
  9517 ;; Tracked objects:
  9518 ;;		On entry : 0/0
  9519 ;;		On exit  : 0/0
  9520 ;;		Unchanged: 0/0
  9521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9523 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9524 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9525 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9526 ;;Total ram usage:        2 bytes
  9527 ;; Hardware stack levels used:    1
  9528 ;; Hardware stack levels required when called:   14
  9529 ;; This function calls:
  9530 ;;		_I2C_MasterClearIrq
  9531 ;;		_I2C_MasterClose
  9532 ;;		_I2C_MasterDisableIrq
  9533 ;; This function is called by:
  9534 ;;		_I2C_Write1ByteRegister
  9535 ;;		_I2C_Read2ByteRegister
  9536 ;;		_I2C_Write2ByteRegister
  9537 ;;		_I2C_WriteNBytes
  9538 ;;		_I2C_ReadNBytes
  9539 ;;		_I2C_ReadDataBlock
  9540 ;; This function uses a non-reentrant model
  9541 ;;
  9542                           
  9543                           
  9544                           ;psect for function _I2C_Close
  9545  0615                     _I2C_Close:	
  9546                           
  9547                           ;i2c_master.c: 211: i2c_error_t returnValue = I2C_BUSY;
  9548                           
  9549                           ;incstack = 0
  9550                           ; Regs used in _I2C_Close: [wreg+status,2+status,0+pclath+cstack]
  9551  0615  0020               	movlb	0	; select bank0
  9552  0616  01CA               	clrf	I2C_Close@returnValue
  9553  0617  0ACA               	incf	I2C_Close@returnValue,f
  9554                           
  9555                           ;i2c_master.c: 212: if(!I2C_Status.busy)
  9556  0618  0021               	movlb	1	; select bank1
  9557  0619  18BC               	btfsc	(_I2C_Status^(0+128)+28),1
  9558  061A  2E30               	goto	l4407
  9559                           
  9560                           ;i2c_master.c: 213: {
  9561                           ;i2c_master.c: 214: I2C_Status.inUse = 0;
  9562  061B  113C               	bcf	(_I2C_Status^(0+128)+28),2
  9563                           
  9564                           ;i2c_master.c: 215: I2C_Status.address = 0xff;
  9565  061C  30FF               	movlw	255
  9566  061D  0020               	movlb	0	; select bank0
  9567  061E  00C9               	movwf	??_I2C_Close
  9568  061F  0849               	movf	??_I2C_Close,w
  9569  0620  0021               	movlb	1	; select bank1
  9570  0621  00B6               	movwf	(_I2C_Status^(0+128)+22)
  9571                           
  9572                           ;i2c_master.c: 216: I2C_MasterClearIrq();
  9573  0622  318E  2665  3186   	fcall	_I2C_MasterClearIrq
  9574                           
  9575                           ;i2c_master.c: 217: I2C_MasterDisableIrq();
  9576  0625  318E  266B  3186   	fcall	_I2C_MasterDisableIrq
  9577                           
  9578                           ;i2c_master.c: 218: I2C_MasterClose();
  9579  0628  318E  2668         	fcall	_I2C_MasterClose
  9580                           
  9581                           ;i2c_master.c: 219: returnValue = I2C_Status.error;
  9582  062A  0021               	movlb	1	; select bank1
  9583  062B  083B               	movf	(_I2C_Status^(0+128)+27),w
  9584  062C  0020               	movlb	0	; select bank0
  9585  062D  00C9               	movwf	??_I2C_Close
  9586  062E  0849               	movf	??_I2C_Close,w
  9587  062F  00CA               	movwf	I2C_Close@returnValue
  9588  0630                     l4407:	
  9589                           
  9590                           ;i2c_master.c: 220: }
  9591                           ;i2c_master.c: 221: return returnValue;
  9592  0630  0020               	movlb	0	; select bank0
  9593  0631  084A               	movf	I2C_Close@returnValue,w
  9594  0632  0008               	return
  9595  0633                     __end_of_I2C_Close:	
  9596                           
  9597                           	psect	text63
  9598  0E6B                     __ptext63:	
  9599 ;; *************** function _I2C_MasterDisableIrq *****************
  9600 ;; Defined at:
  9601 ;;		line 635 in file "mcc_generated_files/i2c_master.c"
  9602 ;; Parameters:    Size  Location     Type
  9603 ;;		None
  9604 ;; Auto vars:     Size  Location     Type
  9605 ;;		None
  9606 ;; Return value:  Size  Location     Type
  9607 ;;                  1    wreg      void 
  9608 ;; Registers used:
  9609 ;;		None
  9610 ;; Tracked objects:
  9611 ;;		On entry : 0/0
  9612 ;;		On exit  : 0/0
  9613 ;;		Unchanged: 0/0
  9614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9618 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9619 ;;Total ram usage:        0 bytes
  9620 ;; Hardware stack levels used:    1
  9621 ;; Hardware stack levels required when called:   13
  9622 ;; This function calls:
  9623 ;;		Nothing
  9624 ;; This function is called by:
  9625 ;;		_I2C_Close
  9626 ;;		_I2C_SetTimeOut
  9627 ;; This function uses a non-reentrant model
  9628 ;;
  9629                           
  9630                           
  9631                           ;psect for function _I2C_MasterDisableIrq
  9632  0E6B                     _I2C_MasterDisableIrq:	
  9633                           
  9634                           ;i2c_master.c: 637: PIE1bits.SSP1IE = 0;
  9635                           
  9636                           ;incstack = 0
  9637                           ; Regs used in _I2C_MasterDisableIrq: []
  9638  0E6B  0021               	movlb	1	; select bank1
  9639  0E6C  1190               	bcf	16,3	;volatile
  9640  0E6D  0008               	return
  9641  0E6E                     __end_of_I2C_MasterDisableIrq:	
  9642                           
  9643                           	psect	text64
  9644  0E68                     __ptext64:	
  9645 ;; *************** function _I2C_MasterClose *****************
  9646 ;; Defined at:
  9647 ;;		line 557 in file "mcc_generated_files/i2c_master.c"
  9648 ;; Parameters:    Size  Location     Type
  9649 ;;		None
  9650 ;; Auto vars:     Size  Location     Type
  9651 ;;		None
  9652 ;; Return value:  Size  Location     Type
  9653 ;;                  1    wreg      void 
  9654 ;; Registers used:
  9655 ;;		None
  9656 ;; Tracked objects:
  9657 ;;		On entry : 0/0
  9658 ;;		On exit  : 0/0
  9659 ;;		Unchanged: 0/0
  9660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9664 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9665 ;;Total ram usage:        0 bytes
  9666 ;; Hardware stack levels used:    1
  9667 ;; Hardware stack levels required when called:   13
  9668 ;; This function calls:
  9669 ;;		Nothing
  9670 ;; This function is called by:
  9671 ;;		_I2C_Close
  9672 ;; This function uses a non-reentrant model
  9673 ;;
  9674                           
  9675                           
  9676                           ;psect for function _I2C_MasterClose
  9677  0E68                     _I2C_MasterClose:	
  9678                           
  9679                           ;i2c_master.c: 560: SSP1CON1bits.SSPEN = 0;
  9680                           
  9681                           ;incstack = 0
  9682                           ; Regs used in _I2C_MasterClose: []
  9683  0E68  0024               	movlb	4	; select bank4
  9684  0E69  1295               	bcf	21,5	;volatile
  9685  0E6A  0008               	return
  9686  0E6B                     __end_of_I2C_MasterClose:	
  9687                           
  9688                           	psect	text65
  9689  0E65                     __ptext65:	
  9690 ;; *************** function _I2C_MasterClearIrq *****************
  9691 ;; Defined at:
  9692 ;;		line 640 in file "mcc_generated_files/i2c_master.c"
  9693 ;; Parameters:    Size  Location     Type
  9694 ;;		None
  9695 ;; Auto vars:     Size  Location     Type
  9696 ;;		None
  9697 ;; Return value:  Size  Location     Type
  9698 ;;                  1    wreg      void 
  9699 ;; Registers used:
  9700 ;;		None
  9701 ;; Tracked objects:
  9702 ;;		On entry : 0/0
  9703 ;;		On exit  : 0/0
  9704 ;;		Unchanged: 0/0
  9705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9710 ;;Total ram usage:        0 bytes
  9711 ;; Hardware stack levels used:    1
  9712 ;; Hardware stack levels required when called:   13
  9713 ;; This function calls:
  9714 ;;		Nothing
  9715 ;; This function is called by:
  9716 ;;		_I2C_Open
  9717 ;;		_I2C_Close
  9718 ;;		_I2C_MasterFsm
  9719 ;; This function uses a non-reentrant model
  9720 ;;
  9721                           
  9722                           
  9723                           ;psect for function _I2C_MasterClearIrq
  9724  0E65                     _I2C_MasterClearIrq:	
  9725                           
  9726                           ;i2c_master.c: 642: PIR1bits.SSP1IF = 0;
  9727                           
  9728                           ;incstack = 0
  9729                           ; Regs used in _I2C_MasterClearIrq: []
  9730  0E65  0020               	movlb	0	; select bank0
  9731  0E66  1190               	bcf	16,3	;volatile
  9732  0E67  0008               	return
  9733  0E68                     __end_of_I2C_MasterClearIrq:	
  9734                           
  9735                           	psect	intentry
  9736  0004                     __pintentry:	
  9737 ;; *************** function _INTERRUPT_InterruptManager *****************
  9738 ;; Defined at:
  9739 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  9740 ;; Parameters:    Size  Location     Type
  9741 ;;		None
  9742 ;; Auto vars:     Size  Location     Type
  9743 ;;		None
  9744 ;; Return value:  Size  Location     Type
  9745 ;;                  1    wreg      void 
  9746 ;; Registers used:
  9747 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9748 ;; Tracked objects:
  9749 ;;		On entry : 0/0
  9750 ;;		On exit  : 0/0
  9751 ;;		Unchanged: 0/0
  9752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9755 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9756 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9757 ;;Total ram usage:        1 bytes
  9758 ;; Hardware stack levels used:    1
  9759 ;; Hardware stack levels required when called:   12
  9760 ;; This function calls:
  9761 ;;		Absolute function
  9762 ;;		_EUSART_Receive_ISR
  9763 ;;		_MyUART_ISR
  9764 ;;		_TMR2_ISR
  9765 ;; This function is called by:
  9766 ;;		Interrupt level 1
  9767 ;; This function uses a non-reentrant model
  9768 ;;
  9769                           
  9770  0004                     _INTERRUPT_InterruptManager:	
  9771                           
  9772                           ;incstack = 0
  9773 ;; hardware stack exceeded
  9774  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9775                           
  9776                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9777  0005  3180               	pagesel	$
  9778  0006  0020               	movlb	0	; select bank0
  9779  0007  087F               	movf	127,w
  9780  0008  00C8               	movwf	??_INTERRUPT_InterruptManager
  9781                           
  9782                           ;interrupt_manager.c: 55: if(INTCONbits.PEIE == 1)
  9783  0009  1F0B               	btfss	11,6	;volatile
  9784  000A  281F               	goto	i1l123
  9785                           
  9786                           ;interrupt_manager.c: 56: {
  9787                           ;interrupt_manager.c: 57: if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
  9788  000B  0021               	movlb	1	; select bank1
  9789  000C  1E90               	btfss	16,5	;volatile
  9790  000D  2817               	goto	i1l118
  9791  000E  0020               	movlb	0	; select bank0
  9792  000F  1E90               	btfss	16,5	;volatile
  9793  0010  2817               	goto	i1l118
  9794                           
  9795                           ;interrupt_manager.c: 58: {
  9796                           ;interrupt_manager.c: 59: EUSART_RxDefaultInterruptHandler();
  9797  0011  0860               	movf	_EUSART_RxDefaultInterruptHandler+1,w
  9798  0012  008A               	movwf	10
  9799  0013  085F               	movf	_EUSART_RxDefaultInterruptHandler,w
  9800  0014  000A               	callw
  9801  0015  3180               	pagesel	$
  9802                           
  9803                           ;interrupt_manager.c: 60: }
  9804  0016  281F               	goto	i1l123
  9805  0017                     i1l118:	
  9806                           
  9807                           ;interrupt_manager.c: 61: else if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
  9808  0017  0021               	movlb	1	; select bank1
  9809  0018  1C90               	btfss	16,1	;volatile
  9810  0019  281F               	goto	i1l123
  9811  001A  0020               	movlb	0	; select bank0
  9812  001B  1C90               	btfss	16,1	;volatile
  9813  001C  281F               	goto	i1l123
  9814                           
  9815                           ;interrupt_manager.c: 62: {
  9816                           ;interrupt_manager.c: 63: TMR2_ISR();
  9817  001D  318E  26D8         	fcall	_TMR2_ISR
  9818  001F                     i1l123:	
  9819                           ;interrupt_manager.c: 70: else
  9820                           ;interrupt_manager.c: 71: {
  9821                           
  9822                           ;interrupt_manager.c: 68: }
  9823                           ;interrupt_manager.c: 69: }
  9824                           
  9825                           ;interrupt_manager.c: 65: else
  9826                           ;interrupt_manager.c: 66: {
  9827                           
  9828                           ;interrupt_manager.c: 64: }
  9829                           
  9830  001F  0020               	movlb	0	; select bank0
  9831  0020  0848               	movf	??_INTERRUPT_InterruptManager,w
  9832  0021  00FF               	movwf	127
  9833  0022  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9834  0023  0009               	retfie
  9835  0024                     __end_of_INTERRUPT_InterruptManager:	
  9836                           
  9837                           	psect	text67
  9838  0ED8                     __ptext67:	
  9839 ;; *************** function _TMR2_ISR *****************
  9840 ;; Defined at:
  9841 ;;		line 165 in file "mcc_generated_files/tmr2.c"
  9842 ;; Parameters:    Size  Location     Type
  9843 ;;		None
  9844 ;; Auto vars:     Size  Location     Type
  9845 ;;		None
  9846 ;; Return value:  Size  Location     Type
  9847 ;;                  1    wreg      void 
  9848 ;; Registers used:
  9849 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9850 ;; Tracked objects:
  9851 ;;		On entry : 0/0
  9852 ;;		On exit  : 0/0
  9853 ;;		Unchanged: 0/0
  9854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9858 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9859 ;;Total ram usage:        0 bytes
  9860 ;; Hardware stack levels used:    1
  9861 ;; Hardware stack levels required when called:   11
  9862 ;; This function calls:
  9863 ;;		_TMR2_CallBack
  9864 ;; This function is called by:
  9865 ;;		_INTERRUPT_InterruptManager
  9866 ;; This function uses a non-reentrant model
  9867 ;;
  9868                           
  9869                           
  9870                           ;psect for function _TMR2_ISR
  9871  0ED8                     _TMR2_ISR:	
  9872                           
  9873                           ;tmr2.c: 169: PIR1bits.TMR2IF = 0;
  9874                           
  9875                           ;incstack = 0
  9876 ;; hardware stack exceeded
  9877                           ; Regs used in _TMR2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9878  0ED8  0020               	movlb	0	; select bank0
  9879  0ED9  1090               	bcf	16,1	;volatile
  9880                           
  9881                           ;tmr2.c: 173: TMR2_CallBack();
  9882  0EDA  318F  27BB         	fcall	_TMR2_CallBack
  9883  0EDC  0008               	return
  9884  0EDD                     __end_of_TMR2_ISR:	
  9885                           
  9886                           	psect	text68
  9887  0FBB                     __ptext68:	
  9888 ;; *************** function _TMR2_CallBack *****************
  9889 ;; Defined at:
  9890 ;;		line 176 in file "mcc_generated_files/tmr2.c"
  9891 ;; Parameters:    Size  Location     Type
  9892 ;;		None
  9893 ;; Auto vars:     Size  Location     Type
  9894 ;;		None
  9895 ;; Return value:  Size  Location     Type
  9896 ;;                  1    wreg      void 
  9897 ;; Registers used:
  9898 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9899 ;; Tracked objects:
  9900 ;;		On entry : 0/0
  9901 ;;		On exit  : 0/0
  9902 ;;		Unchanged: 0/0
  9903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9908 ;;Total ram usage:        0 bytes
  9909 ;; Hardware stack levels used:    1
  9910 ;; Hardware stack levels required when called:   10
  9911 ;; This function calls:
  9912 ;;		Absolute function
  9913 ;;		_MyTimer2ISR
  9914 ;;		_TMR2_DefaultInterruptHandler
  9915 ;; This function is called by:
  9916 ;;		_TMR2_ISR
  9917 ;; This function uses a non-reentrant model
  9918 ;;
  9919                           
  9920                           
  9921                           ;psect for function _TMR2_CallBack
  9922  0FBB                     _TMR2_CallBack:	
  9923                           
  9924                           ;tmr2.c: 180: if(TMR2_InterruptHandler)
  9925                           
  9926                           ;incstack = 0
  9927 ;; hardware stack exceeded
  9928                           ; Regs used in _TMR2_CallBack: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9929  0FBB  0020               	movlb	0	; select bank0
  9930  0FBC  0857               	movf	_TMR2_InterruptHandler,w
  9931  0FBD  0458               	iorwf	_TMR2_InterruptHandler+1,w
  9932  0FBE  1903               	btfsc	3,2
  9933  0FBF  0008               	return
  9934                           
  9935                           ;tmr2.c: 181: {
  9936                           ;tmr2.c: 182: TMR2_InterruptHandler();
  9937  0FC0  0858               	movf	_TMR2_InterruptHandler+1,w
  9938  0FC1  008A               	movwf	10
  9939  0FC2  0857               	movf	_TMR2_InterruptHandler,w
  9940  0FC3  000A               	callw
  9941  0FC4  318F               	pagesel	$
  9942  0FC5  0008               	return
  9943  0FC6                     __end_of_TMR2_CallBack:	
  9944                           
  9945                           	psect	text69
  9946  00F7                     __ptext69:	
  9947 ;; *************** function _MyTimer2ISR *****************
  9948 ;; Defined at:
  9949 ;;		line 58 in file "main.c"
  9950 ;; Parameters:    Size  Location     Type
  9951 ;;		None
  9952 ;; Auto vars:     Size  Location     Type
  9953 ;;		None
  9954 ;; Return value:  Size  Location     Type
  9955 ;;                  1    wreg      void 
  9956 ;; Registers used:
  9957 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9958 ;; Tracked objects:
  9959 ;;		On entry : 0/0
  9960 ;;		On exit  : 0/0
  9961 ;;		Unchanged: 0/0
  9962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9965 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9966 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9967 ;;Total ram usage:        2 bytes
  9968 ;; Hardware stack levels used:    1
  9969 ;; Hardware stack levels required when called:    9
  9970 ;; This function calls:
  9971 ;;		_EUSART_Write
  9972 ;;		_I2C_Read1ByteRegister
  9973 ;;		_PWM3_LoadDutyValue
  9974 ;;		i1_I2C_Write1ByteRegister
  9975 ;; This function is called by:
  9976 ;;		_main
  9977 ;;		_TMR2_CallBack
  9978 ;; This function uses a non-reentrant model
  9979 ;;
  9980                           
  9981                           
  9982                           ;psect for function _MyTimer2ISR
  9983  00F7                     _MyTimer2ISR:	
  9984                           
  9985                           ;main.c: 59: TestState = ~TestState;
  9986                           
  9987                           ;incstack = 0
  9988 ;; hardware stack exceeded
  9989                           ; Regs used in _MyTimer2ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9990  00F7  0020               	movlb	0	; select bank0
  9991  00F8  09B3               	comf	_TestState,f
  9992                           
  9993                           ;main.c: 60: if(TestState) {
  9994  00F9  0833               	movf	_TestState,w
  9995  00FA  1903               	btfsc	3,2
  9996  00FB  2968               	goto	i1l6039
  9997                           
  9998                           ;main.c: 61: PWM3_LoadDutyValue(((Pos)>>4)+45);
  9999  00FC  0832               	movf	_Pos,w
 10000  00FD  00C6               	movwf	??_MyTimer2ISR
 10001  00FE  3004               	movlw	4
 10002  00FF                     u369_25:	
 10003  00FF  36C6               	lsrf	??_MyTimer2ISR,f
 10004  0100  0B89               	decfsz	9,f
 10005  0101  28FF               	goto	u369_25
 10006  0102  0846               	movf	??_MyTimer2ISR,w
 10007  0103  3E2D               	addlw	45
 10008  0104  00F0               	movwf	PWM3_LoadDutyValue@dutyValue
 10009  0105  3000               	movlw	0
 10010  0106  1803               	skipnc
 10011  0107  3001               	movlw	1
 10012  0108  00F1               	movwf	PWM3_LoadDutyValue@dutyValue+1
 10013  0109  3187  2729  3180   	fcall	_PWM3_LoadDutyValue
 10014                           
 10015                           ;main.c: 62: if(PORTAbits.RA4) {
 10016  010C  0020               	movlb	0	; select bank0
 10017  010D  1E0C               	btfss	12,4	;volatile
 10018  010E  294D               	goto	i1l6031
 10019                           
 10020                           ;main.c: 63: CptBat = 0;
 10021  010F  01B6               	clrf	_CptBat
 10022                           
 10023                           ;main.c: 64: if(StateBat == S_bat_low) {
 10024  0110  0861               	movf	_StateBat,w
 10025  0111  1D03               	btfss	3,2
 10026  0112  2922               	goto	i1l6015
 10027                           
 10028                           ;main.c: 65: EUSART_Write('B');
 10029  0113  3042               	movlw	66
 10030  0114  318F  2739  3180   	fcall	_EUSART_Write
 10031                           
 10032                           ;main.c: 66: EUSART_Write('1');
 10033  0117  3031               	movlw	49
 10034  0118  318F  2739  3180   	fcall	_EUSART_Write
 10035                           
 10036                           ;main.c: 67: EUSART_Write('s');
 10037  011B  3073               	movlw	115
 10038  011C  318F  2739  3180   	fcall	_EUSART_Write
 10039                           
 10040                           ;main.c: 68: StateBat = S_bat_high;
 10041  011F  0020               	movlb	0	; select bank0
 10042  0120  01E1               	clrf	_StateBat
 10043  0121  0AE1               	incf	_StateBat,f
 10044  0122                     i1l6015:	
 10045                           
 10046                           ;main.c: 69: }
 10047                           ;main.c: 70: if(Validation) {
 10048  0122  0863               	movf	_Validation,w
 10049  0123  1903               	btfsc	3,2
 10050  0124  2939               	goto	i1l6025
 10051                           
 10052                           ;main.c: 72: if(Vitesse > 100) {Vitesse = 100;}
 10053  0125  3065               	movlw	101
 10054  0126  0234               	subwf	_Vitesse,w
 10055  0127  1C03               	skipc
 10056  0128  292D               	goto	i1l6021
 10057  0129  3064               	movlw	100
 10058  012A  00C6               	movwf	??_MyTimer2ISR
 10059  012B  0846               	movf	??_MyTimer2ISR,w
 10060  012C  00B4               	movwf	_Vitesse
 10061  012D                     i1l6021:	
 10062                           
 10063                           ;main.c: 73: I2C_Write1ByteRegister(0x40, Vitesse, 0);
 10064  012D  0834               	movf	_Vitesse,w
 10065  012E  00C6               	movwf	??_MyTimer2ISR
 10066  012F  0846               	movf	??_MyTimer2ISR,w
 10067  0130  00C2               	movwf	i1I2C_Write1ByteRegister@reg
 10068  0131  01C3               	clrf	i1I2C_Write1ByteRegister@data
 10069  0132  3040               	movlw	64
 10070  0133  3184  248F         	fcall	i1_I2C_Write1ByteRegister
 10071                           
 10072                           ;main.c: 75: Validation--;
 10073  0135  3001               	movlw	1
 10074  0136  0020               	movlb	0	; select bank0
 10075  0137  02E3               	subwf	_Validation,f
 10076                           
 10077                           ;main.c: 76: } else {
 10078  0138  0008               	return
 10079  0139                     i1l6025:	
 10080                           
 10081                           ;main.c: 77: CptBat++;
 10082  0139  3001               	movlw	1
 10083  013A  00C6               	movwf	??_MyTimer2ISR
 10084  013B  0846               	movf	??_MyTimer2ISR,w
 10085  013C  07B6               	addwf	_CptBat,f
 10086                           
 10087                           ;main.c: 78: if(CptBat > 100) {
 10088  013D  3065               	movlw	101
 10089  013E  0236               	subwf	_CptBat,w
 10090  013F  1C03               	skipc
 10091  0140  2943               	goto	i1l6029
 10092                           
 10093                           ;main.c: 79: do { LATCbits.LATC5 = 0; } while(0);
 10094  0141  0022               	movlb	2	; select bank2
 10095  0142  128E               	bcf	14,5	;volatile
 10096  0143                     i1l6029:	
 10097                           
 10098                           ;main.c: 80: }
 10099                           ;main.c: 82: I2C_Write1ByteRegister(0x40, 101, 0);
 10100  0143  3065               	movlw	101
 10101  0144  0020               	movlb	0	; select bank0
 10102  0145  00C6               	movwf	??_MyTimer2ISR
 10103  0146  0846               	movf	??_MyTimer2ISR,w
 10104  0147  00C2               	movwf	i1I2C_Write1ByteRegister@reg
 10105  0148  01C3               	clrf	i1I2C_Write1ByteRegister@data
 10106  0149  3040               	movlw	64
 10107  014A  3184  248F         	fcall	i1_I2C_Write1ByteRegister
 10108                           
 10109                           ;main.c: 84: }
 10110                           ;main.c: 85: } else {
 10111  014C  0008               	return
 10112  014D                     i1l6031:	
 10113                           
 10114                           ;main.c: 86: if(StateBat == S_bat_high) {
 10115  014D  0020               	movlb	0	; select bank0
 10116  014E  0361               	decf	_StateBat,w
 10117  014F  1D03               	btfss	3,2
 10118  0150  295F               	goto	i1l6037
 10119                           
 10120                           ;main.c: 87: EUSART_Write('B');
 10121  0151  3042               	movlw	66
 10122  0152  318F  2739  3180   	fcall	_EUSART_Write
 10123                           
 10124                           ;main.c: 88: EUSART_Write('0');
 10125  0155  3030               	movlw	48
 10126  0156  318F  2739  3180   	fcall	_EUSART_Write
 10127                           
 10128                           ;main.c: 89: EUSART_Write('r');
 10129  0159  3072               	movlw	114
 10130  015A  318F  2739  3180   	fcall	_EUSART_Write
 10131                           
 10132                           ;main.c: 90: StateBat = S_bat_low;
 10133  015D  0020               	movlb	0	; select bank0
 10134  015E  01E1               	clrf	_StateBat
 10135  015F                     i1l6037:	
 10136                           
 10137                           ;main.c: 91: }
 10138                           ;main.c: 93: I2C_Write1ByteRegister(0x40, 101, 0);
 10139  015F  3065               	movlw	101
 10140  0160  00C6               	movwf	??_MyTimer2ISR
 10141  0161  0846               	movf	??_MyTimer2ISR,w
 10142  0162  00C2               	movwf	i1I2C_Write1ByteRegister@reg
 10143  0163  01C3               	clrf	i1I2C_Write1ByteRegister@data
 10144  0164  3040               	movlw	64
 10145  0165  3184  248F         	fcall	i1_I2C_Write1ByteRegister
 10146                           
 10147                           ;main.c: 95: }
 10148                           ;main.c: 96: } else {
 10149  0167  0008               	return
 10150  0168                     i1l6039:	
 10151                           
 10152                           ;main.c: 98: G -= I2C_Read1ByteRegister(0x68, 0x48);
 10153  0168  3048               	movlw	72
 10154  0169  0020               	movlb	0	; select bank0
 10155  016A  00C6               	movwf	??_MyTimer2ISR
 10156  016B  0846               	movf	??_MyTimer2ISR,w
 10157  016C  00C2               	movwf	I2C_Read1ByteRegister@reg
 10158  016D  3068               	movlw	104
 10159  016E  3184  245D  3180   	fcall	_I2C_Read1ByteRegister
 10160  0171  0020               	movlb	0	; select bank0
 10161  0172  00C7               	movwf	??_MyTimer2ISR+1
 10162  0173  0847               	movf	??_MyTimer2ISR+1,w
 10163  0174  02B5               	subwf	_G,f
 10164                           
 10165                           ;main.c: 100: Pos = Angle-G;
 10166  0175  0335               	decf	_G,w
 10167  0176  3AFF               	xorlw	255
 10168  0177  0762               	addwf	_Angle,w
 10169  0178  00C6               	movwf	??_MyTimer2ISR
 10170  0179  0846               	movf	??_MyTimer2ISR,w
 10171  017A  00B2               	movwf	_Pos
 10172                           
 10173                           ;main.c: 101: PWM3_LoadDutyValue(((Pos)>>4)+45);
 10174  017B  0832               	movf	_Pos,w
 10175  017C  00C6               	movwf	??_MyTimer2ISR
 10176  017D  3004               	movlw	4
 10177  017E                     u376_25:	
 10178  017E  36C6               	lsrf	??_MyTimer2ISR,f
 10179  017F  0B89               	decfsz	9,f
 10180  0180  297E               	goto	u376_25
 10181  0181  0846               	movf	??_MyTimer2ISR,w
 10182  0182  3E2D               	addlw	45
 10183  0183  00F0               	movwf	PWM3_LoadDutyValue@dutyValue
 10184  0184  3000               	movlw	0
 10185  0185  1803               	skipnc
 10186  0186  3001               	movlw	1
 10187  0187  00F1               	movwf	PWM3_LoadDutyValue@dutyValue+1
 10188  0188  3187  2729         	fcall	_PWM3_LoadDutyValue
 10189  018A  0008               	return
 10190  018B                     __end_of_MyTimer2ISR:	
 10191                           
 10192                           	psect	text70
 10193  0003                     __ptext70:	
 10194 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 10195 ;; Defined at:
 10196 ;;		line 190 in file "mcc_generated_files/tmr2.c"
 10197 ;; Parameters:    Size  Location     Type
 10198 ;;		None
 10199 ;; Auto vars:     Size  Location     Type
 10200 ;;		None
 10201 ;; Return value:  Size  Location     Type
 10202 ;;                  1    wreg      void 
 10203 ;; Registers used:
 10204 ;;		None
 10205 ;; Tracked objects:
 10206 ;;		On entry : 0/0
 10207 ;;		On exit  : 0/0
 10208 ;;		Unchanged: 0/0
 10209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10214 ;;Total ram usage:        0 bytes
 10215 ;; Hardware stack levels used:    1
 10216 ;; This function calls:
 10217 ;;		Nothing
 10218 ;; This function is called by:
 10219 ;;		_TMR2_Initialize
 10220 ;;		_TMR2_CallBack
 10221 ;; This function uses a non-reentrant model
 10222 ;;
 10223                           
 10224                           
 10225                           ;psect for function _TMR2_DefaultInterruptHandler
 10226  0003                     _TMR2_DefaultInterruptHandler:	
 10227                           
 10228                           ;incstack = 0
 10229                           ; Regs used in _TMR2_DefaultInterruptHandler: []
 10230  0003  0008               	return
 10231  0004                     __end_of_TMR2_DefaultInterruptHandler:	
 10232                           
 10233                           	psect	text71
 10234  048F                     __ptext71:	
 10235 ;; *************** function i1_I2C_Write1ByteRegister *****************
 10236 ;; Defined at:
 10237 ;;		line 91 in file "mcc_generated_files/examples/i2c_master_example.c"
 10238 ;; Parameters:    Size  Location     Type
 10239 ;;  address         1    wreg     unsigned char 
 10240 ;;  reg             1    5[BANK0 ] unsigned char 
 10241 ;;  data            1    6[BANK0 ] unsigned char 
 10242 ;; Auto vars:     Size  Location     Type
 10243 ;;  address         1    8[BANK0 ] unsigned char 
 10244 ;; Return value:  Size  Location     Type
 10245 ;;                  1    wreg      void 
 10246 ;; Registers used:
 10247 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10248 ;; Tracked objects:
 10249 ;;		On entry : 0/0
 10250 ;;		On exit  : 0/0
 10251 ;;		Unchanged: 0/0
 10252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10253 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10254 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10255 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10256 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10257 ;;Total ram usage:        4 bytes
 10258 ;; Hardware stack levels used:    1
 10259 ;; Hardware stack levels required when called:    8
 10260 ;; This function calls:
 10261 ;;		i1_I2C_Close
 10262 ;;		i1_I2C_MasterWrite
 10263 ;;		i1_I2C_Open
 10264 ;;		i1_I2C_SetAddressNackCallback
 10265 ;;		i1_I2C_SetBuffer
 10266 ;;		i1_I2C_SetDataCompleteCallback
 10267 ;; This function is called by:
 10268 ;;		_MyTimer2ISR
 10269 ;; This function uses a non-reentrant model
 10270 ;;
 10271                           
 10272                           
 10273                           ;psect for function i1_I2C_Write1ByteRegister
 10274  048F                     i1_I2C_Write1ByteRegister:	
 10275                           
 10276                           ;incstack = 0
 10277 ;; hardware stack exceeded
 10278                           ; Regs used in i1_I2C_Write1ByteRegister: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10279                           ;i1I2C_Write1ByteRegister@address stored from wreg
 10280  048F  0020               	movlb	0	; select bank0
 10281  0490  00C5               	movwf	i1I2C_Write1ByteRegister@address
 10282  0491                     i1l5967:	
 10283                           ;i2c_master_example.c: 93: while(!I2C_Open(address));
 10284                           
 10285  0491  0020               	movlb	0	; select bank0
 10286  0492  0845               	movf	i1I2C_Write1ByteRegister@address,w
 10287  0493  3183  238D  3184   	fcall	i1_I2C_Open
 10288  0496  3A00               	xorlw	0
 10289  0497  1903               	skipnz
 10290  0498  2C91               	goto	i1l5967
 10291                           
 10292                           ;i2c_master_example.c: 94: I2C_SetDataCompleteCallback(wr1RegCompleteHandler,&data);
 10293  0499  30D1               	movlw	low _wr1RegCompleteHandler
 10294  049A  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 10295  049B  3006               	movlw	high _wr1RegCompleteHandler
 10296  049C  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 10297  049D  3043               	movlw	(low (i1I2C_Write1ByteRegister@data| 0))& (0+255)
 10298  049E  0020               	movlb	0	; select bank0
 10299  049F  00C4               	movwf	??i1_I2C_Write1ByteRegister
 10300  04A0  0844               	movf	??i1_I2C_Write1ByteRegister,w
 10301  04A1  00F7               	movwf	i1I2C_SetDataCompleteCallback@ptr
 10302  04A2  318F  27DC  3184   	fcall	i1_I2C_SetDataCompleteCallback
 10303                           
 10304                           ;i2c_master_example.c: 95: I2C_SetBuffer(&reg,1);
 10305  04A5  3001               	movlw	1
 10306  04A6  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 10307  04A7  3000               	movlw	0
 10308  04A8  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 10309  04A9  3042               	movlw	(low (i1I2C_Write1ByteRegister@reg| 0))& (0+255)
 10310  04AA  3187  27BB  3184   	fcall	i1_I2C_SetBuffer
 10311                           
 10312                           ;i2c_master_example.c: 96: I2C_SetAddressNackCallback((0),(0));
 10313  04AD  3000               	movlw	0
 10314  04AE  00F5               	movwf	i1I2C_SetAddressNackCallback@cb
 10315  04AF  00F6               	movwf	i1I2C_SetAddressNackCallback@cb+1
 10316  04B0  01F7               	clrf	i1I2C_SetAddressNackCallback@ptr
 10317  04B1  318F  27F4  3184   	fcall	i1_I2C_SetAddressNackCallback
 10318                           
 10319                           ;i2c_master_example.c: 97: I2C_MasterWrite();
 10320  04B4  318E  26B5  3184   	fcall	i1_I2C_MasterWrite
 10321  04B7                     i1l5977:	
 10322                           ;i2c_master_example.c: 98: while(I2C_BUSY == I2C_Close());
 10323                           
 10324  04B7  3186  268A  3184   	fcall	i1_I2C_Close
 10325  04BA  3A01               	xorlw	1
 10326  04BB  1D03               	btfss	3,2
 10327  04BC  0008               	return
 10328  04BD  2CB7               	goto	i1l5977
 10329  04BE                     __end_ofi1_I2C_Write1ByteRegister:	
 10330                           
 10331                           	psect	text72
 10332  0729                     __ptext72:	
 10333 ;; *************** function _PWM3_LoadDutyValue *****************
 10334 ;; Defined at:
 10335 ;;		line 74 in file "mcc_generated_files/pwm3.c"
 10336 ;; Parameters:    Size  Location     Type
 10337 ;;  dutyValue       2    0[COMMON] unsigned int 
 10338 ;; Auto vars:     Size  Location     Type
 10339 ;;		None
 10340 ;; Return value:  Size  Location     Type
 10341 ;;                  1    wreg      void 
 10342 ;; Registers used:
 10343 ;;		wreg, status,2, status,0
 10344 ;; Tracked objects:
 10345 ;;		On entry : 0/0
 10346 ;;		On exit  : 0/0
 10347 ;;		Unchanged: 0/0
 10348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10349 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10351 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10352 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10353 ;;Total ram usage:        4 bytes
 10354 ;; Hardware stack levels used:    1
 10355 ;; This function calls:
 10356 ;;		Nothing
 10357 ;; This function is called by:
 10358 ;;		_MyTimer2ISR
 10359 ;; This function uses a non-reentrant model
 10360 ;;
 10361                           
 10362                           
 10363                           ;psect for function _PWM3_LoadDutyValue
 10364  0729                     _PWM3_LoadDutyValue:	
 10365                           
 10366                           ;pwm3.c: 77: PWM3DCH = (dutyValue & 0x03FC)>>2;
 10367                           
 10368                           ;incstack = 0
 10369                           ; Regs used in _PWM3_LoadDutyValue: [wreg+status,2+status,0]
 10370  0729  0871               	movf	PWM3_LoadDutyValue@dutyValue+1,w
 10371  072A  00F3               	movwf	??_PWM3_LoadDutyValue+1
 10372  072B  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
 10373  072C  00F2               	movwf	??_PWM3_LoadDutyValue
 10374  072D  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
 10375  072E  0CF2               	rrf	??_PWM3_LoadDutyValue,f
 10376  072F  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
 10377  0730  0CF2               	rrf	??_PWM3_LoadDutyValue,f
 10378  0731  0872               	movf	??_PWM3_LoadDutyValue,w
 10379  0732  002C               	movlb	12	; select bank12
 10380  0733  0098               	movwf	24	;volatile
 10381                           
 10382                           ;pwm3.c: 80: PWM3DCL = (dutyValue & 0x0003)<<6;
 10383  0734  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
 10384  0735  3903               	andlw	3
 10385  0736  00F2               	movwf	??_PWM3_LoadDutyValue
 10386  0737  3005               	movlw	5
 10387  0738                     u113_25:	
 10388  0738  35F2               	lslf	??_PWM3_LoadDutyValue,f
 10389  0739  3EFF               	addlw	-1
 10390  073A  1D03               	skipz
 10391  073B  2F38               	goto	u113_25
 10392  073C  3572               	lslf	??_PWM3_LoadDutyValue,w
 10393  073D  0097               	movwf	23	;volatile
 10394  073E  0008               	return
 10395  073F                     __end_of_PWM3_LoadDutyValue:	
 10396                           
 10397                           	psect	text73
 10398  045D                     __ptext73:	
 10399 ;; *************** function _I2C_Read1ByteRegister *****************
 10400 ;; Defined at:
 10401 ;;		line 63 in file "mcc_generated_files/examples/i2c_master_example.c"
 10402 ;; Parameters:    Size  Location     Type
 10403 ;;  address         1    wreg     unsigned char 
 10404 ;;  reg             1    5[BANK0 ] unsigned char 
 10405 ;; Auto vars:     Size  Location     Type
 10406 ;;  address         1    7[BANK0 ] unsigned char 
 10407 ;;  returnValue     1    8[BANK0 ] unsigned char 
 10408 ;; Return value:  Size  Location     Type
 10409 ;;                  1    wreg      unsigned char 
 10410 ;; Registers used:
 10411 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10412 ;; Tracked objects:
 10413 ;;		On entry : 0/0
 10414 ;;		On exit  : 0/0
 10415 ;;		Unchanged: 0/0
 10416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10417 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10418 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10419 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10420 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10421 ;;Total ram usage:        4 bytes
 10422 ;; Hardware stack levels used:    1
 10423 ;; Hardware stack levels required when called:    8
 10424 ;; This function calls:
 10425 ;;		i1_I2C_Close
 10426 ;;		i1_I2C_MasterWrite
 10427 ;;		i1_I2C_Open
 10428 ;;		i1_I2C_SetAddressNackCallback
 10429 ;;		i1_I2C_SetBuffer
 10430 ;;		i1_I2C_SetDataCompleteCallback
 10431 ;; This function is called by:
 10432 ;;		_MyTimer2ISR
 10433 ;; This function uses a non-reentrant model
 10434 ;;
 10435                           
 10436                           
 10437                           ;psect for function _I2C_Read1ByteRegister
 10438  045D                     _I2C_Read1ByteRegister:	
 10439                           
 10440                           ;incstack = 0
 10441 ;; hardware stack exceeded
 10442                           ; Regs used in _I2C_Read1ByteRegister: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10443                           ;I2C_Read1ByteRegister@address stored from wreg
 10444  045D  0020               	movlb	0	; select bank0
 10445  045E  00C4               	movwf	I2C_Read1ByteRegister@address
 10446                           
 10447                           ;i2c_master_example.c: 65: uint8_t returnValue = 0x00;
 10448  045F  01C5               	clrf	I2C_Read1ByteRegister@returnValue
 10449  0460                     i1l5941:	
 10450                           ;i2c_master_example.c: 67: while(!I2C_Open(address));
 10451                           
 10452  0460  0020               	movlb	0	; select bank0
 10453  0461  0844               	movf	I2C_Read1ByteRegister@address,w
 10454  0462  3183  238D  3184   	fcall	i1_I2C_Open
 10455  0465  3A00               	xorlw	0
 10456  0466  1903               	skipnz
 10457  0467  2C60               	goto	i1l5941
 10458                           
 10459                           ;i2c_master_example.c: 68: I2C_SetDataCompleteCallback(rd1RegCompleteHandler,&returnValu
      +                          e);
 10460  0468  30FD               	movlw	low _rd1RegCompleteHandler
 10461  0469  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 10462  046A  3006               	movlw	high _rd1RegCompleteHandler
 10463  046B  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 10464  046C  3045               	movlw	(low (I2C_Read1ByteRegister@returnValue| 0))& (0+255)
 10465  046D  0020               	movlb	0	; select bank0
 10466  046E  00C3               	movwf	??_I2C_Read1ByteRegister
 10467  046F  0843               	movf	??_I2C_Read1ByteRegister,w
 10468  0470  00F7               	movwf	i1I2C_SetDataCompleteCallback@ptr
 10469  0471  318F  27DC  3184   	fcall	i1_I2C_SetDataCompleteCallback
 10470                           
 10471                           ;i2c_master_example.c: 69: I2C_SetBuffer(&reg,1);
 10472  0474  3001               	movlw	1
 10473  0475  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 10474  0476  3000               	movlw	0
 10475  0477  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 10476  0478  3042               	movlw	(low (I2C_Read1ByteRegister@reg| 0))& (0+255)
 10477  0479  3187  27BB  3184   	fcall	i1_I2C_SetBuffer
 10478                           
 10479                           ;i2c_master_example.c: 70: I2C_SetAddressNackCallback((0),(0));
 10480  047C  3000               	movlw	0
 10481  047D  00F5               	movwf	i1I2C_SetAddressNackCallback@cb
 10482  047E  00F6               	movwf	i1I2C_SetAddressNackCallback@cb+1
 10483  047F  01F7               	clrf	i1I2C_SetAddressNackCallback@ptr
 10484  0480  318F  27F4  3184   	fcall	i1_I2C_SetAddressNackCallback
 10485                           
 10486                           ;i2c_master_example.c: 71: I2C_MasterWrite();
 10487  0483  318E  26B5  3184   	fcall	i1_I2C_MasterWrite
 10488  0486                     i1l5951:	
 10489                           ;i2c_master_example.c: 72: while(I2C_BUSY == I2C_Close());
 10490                           
 10491  0486  3186  268A  3184   	fcall	i1_I2C_Close
 10492  0489  3A01               	xorlw	1
 10493  048A  1903               	skipnz
 10494  048B  2C86               	goto	i1l5951
 10495                           
 10496                           ;i2c_master_example.c: 74: return returnValue;
 10497  048C  0020               	movlb	0	; select bank0
 10498  048D  0845               	movf	I2C_Read1ByteRegister@returnValue,w
 10499  048E  0008               	return
 10500  048F                     __end_of_I2C_Read1ByteRegister:	
 10501                           
 10502                           	psect	text74
 10503  0FF4                     __ptext74:	
 10504 ;; *************** function i1_I2C_SetAddressNackCallback *****************
 10505 ;; Defined at:
 10506 ;;		line 283 in file "mcc_generated_files/i2c_master.c"
 10507 ;; Parameters:    Size  Location     Type
 10508 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
 10509 ;;		 -> Absolute function(1), 
 10510 ;;  ptr             1    7[COMMON] PTR void 
 10511 ;;		 -> NULL(0), 
 10512 ;; Auto vars:     Size  Location     Type
 10513 ;;		None
 10514 ;; Return value:  Size  Location     Type
 10515 ;;                  1    wreg      void 
 10516 ;; Registers used:
 10517 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10518 ;; Tracked objects:
 10519 ;;		On entry : 0/0
 10520 ;;		On exit  : 0/0
 10521 ;;		Unchanged: 0/0
 10522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10523 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10525 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10526 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10527 ;;Total ram usage:        4 bytes
 10528 ;; Hardware stack levels used:    1
 10529 ;; Hardware stack levels required when called:    1
 10530 ;; This function calls:
 10531 ;;		i1_I2C_SetCallback
 10532 ;; This function is called by:
 10533 ;;		_I2C_Read1ByteRegister
 10534 ;;		i1_I2C_Write1ByteRegister
 10535 ;; This function uses a non-reentrant model
 10536 ;;
 10537                           
 10538                           
 10539                           ;psect for function i1_I2C_SetAddressNackCallback
 10540  0FF4                     i1_I2C_SetAddressNackCallback:	
 10541                           
 10542                           ;i2c_master.c: 285: I2C_SetCallback(I2C_ADDR_NACK, cb, ptr);
 10543                           
 10544                           ;incstack = 0
 10545                           ; Regs used in i1_I2C_SetAddressNackCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 10546  0FF4  0876               	movf	i1I2C_SetAddressNackCallback@cb+1,w
 10547  0FF5  00F1               	movwf	i1I2C_SetCallback@cb+1
 10548  0FF6  0875               	movf	i1I2C_SetAddressNackCallback@cb,w
 10549  0FF7  00F0               	movwf	i1I2C_SetCallback@cb
 10550  0FF8  0877               	movf	i1I2C_SetAddressNackCallback@ptr,w
 10551  0FF9  00F8               	movwf	??i1_I2C_SetAddressNackCallback
 10552  0FFA  0878               	movf	??i1_I2C_SetAddressNackCallback,w
 10553  0FFB  00F2               	movwf	i1I2C_SetCallback@ptr
 10554  0FFC  3002               	movlw	2
 10555  0FFD  3185  25AE         	fcall	i1_I2C_SetCallback
 10556  0FFF  0008               	return
 10557  1000                     __end_ofi1_I2C_SetAddressNackCallback:	
 10558                           
 10559                           	psect	text75
 10560  038D                     __ptext75:	
 10561 ;; *************** function i1_I2C_Open *****************
 10562 ;; Defined at:
 10563 ;;		line 176 in file "mcc_generated_files/i2c_master.c"
 10564 ;; Parameters:    Size  Location     Type
 10565 ;;  address         1    wreg     unsigned char 
 10566 ;; Auto vars:     Size  Location     Type
 10567 ;;  address         1    1[COMMON] unsigned char 
 10568 ;;  I2C_Open        1    2[COMMON] enum E92
 10569 ;; Return value:  Size  Location     Type
 10570 ;;                  1    wreg      enum E92
 10571 ;; Registers used:
 10572 ;;		wreg, status,2, status,0, pclath, cstack
 10573 ;; Tracked objects:
 10574 ;;		On entry : 0/0
 10575 ;;		On exit  : 0/0
 10576 ;;		Unchanged: 0/0
 10577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10579 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10580 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10581 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10582 ;;Total ram usage:        3 bytes
 10583 ;; Hardware stack levels used:    1
 10584 ;; Hardware stack levels required when called:    1
 10585 ;; This function calls:
 10586 ;;		i1_I2C_MasterClearIrq
 10587 ;;		i1_I2C_MasterOpen
 10588 ;; This function is called by:
 10589 ;;		_I2C_Read1ByteRegister
 10590 ;;		i1_I2C_Write1ByteRegister
 10591 ;; This function uses a non-reentrant model
 10592 ;;
 10593                           
 10594                           
 10595                           ;psect for function i1_I2C_Open
 10596  038D                     i1_I2C_Open:	
 10597                           
 10598                           ;incstack = 0
 10599                           ; Regs used in i1_I2C_Open: [wreg+status,2+status,0+pclath+cstack]
 10600                           ;i1I2C_Open@address stored from wreg
 10601  038D  00F1               	movwf	i1I2C_Open@address
 10602                           
 10603                           ;i2c_master.c: 178: i2c_error_t returnValue = I2C_BUSY;
 10604  038E  01F2               	clrf	i1I2C_Open@returnValue
 10605  038F  0AF2               	incf	i1I2C_Open@returnValue,f
 10606                           
 10607                           ;i2c_master.c: 180: if(!I2C_Status.inUse)
 10608  0390  0021               	movlb	1	; select bank1
 10609  0391  193C               	btfsc	(_I2C_Status^(0+128)+28),2
 10610  0392  2BC2               	goto	i1l321
 10611                           
 10612                           ;i2c_master.c: 181: {
 10613                           ;i2c_master.c: 182: I2C_Status.address = address;
 10614  0393  0871               	movf	i1I2C_Open@address,w
 10615  0394  00F0               	movwf	??i1_I2C_Open
 10616  0395  0870               	movf	??i1_I2C_Open,w
 10617  0396  00B6               	movwf	(_I2C_Status^(0+128)+22)
 10618                           
 10619                           ;i2c_master.c: 183: I2C_Status.busy = 0;
 10620  0397  10BC               	bcf	(_I2C_Status^(0+128)+28),1
 10621                           
 10622                           ;i2c_master.c: 184: I2C_Status.inUse = 1;
 10623  0398  153C               	bsf	(_I2C_Status^(0+128)+28),2
 10624                           
 10625                           ;i2c_master.c: 185: I2C_Status.addressNackCheck = 0;
 10626  0399  103C               	bcf	(_I2C_Status^(0+128)+28),0
 10627                           
 10628                           ;i2c_master.c: 186: I2C_Status.state = I2C_RESET;
 10629  039A  300E               	movlw	14
 10630  039B  00F0               	movwf	??i1_I2C_Open
 10631  039C  0870               	movf	??i1_I2C_Open,w
 10632  039D  00BA               	movwf	(_I2C_Status^(0+128)+26)
 10633                           
 10634                           ;i2c_master.c: 187: I2C_Status.time_out_value = 500;
 10635  039E  30F4               	movlw	244
 10636  039F  00B4               	movwf	(_I2C_Status^(0+128)+20)
 10637  03A0  3001               	movlw	1
 10638  03A1  00B5               	movwf	(_I2C_Status^(0+128)+21)
 10639                           
 10640                           ;i2c_master.c: 188: I2C_Status.bufferFree = 1;
 10641  03A2  15BC               	bsf	(_I2C_Status^(0+128)+28),3
 10642                           
 10643                           ;i2c_master.c: 191: I2C_Status.callbackTable[I2C_DATA_COMPLETE]=I2C_CallbackReturnStop;
 10644  03A3  30E9               	movlw	low _I2C_CallbackReturnStop
 10645  03A4  00A0               	movwf	_I2C_Status^(0+128)
 10646  03A5  300E               	movlw	high _I2C_CallbackReturnStop
 10647  03A6  00A1               	movwf	(_I2C_Status^(0+128)+1)
 10648                           
 10649                           ;i2c_master.c: 192: I2C_Status.callbackPayload[I2C_DATA_COMPLETE] = (0);
 10650  03A7  01AC               	clrf	(low ((_I2C_Status| 0+12)))^(0+128)
 10651                           
 10652                           ;i2c_master.c: 193: I2C_Status.callbackTable[I2C_WRITE_COLLISION]=I2C_CallbackReturnStop
      +                          ;
 10653  03A8  30E9               	movlw	low _I2C_CallbackReturnStop
 10654  03A9  00A2               	movwf	(low ((_I2C_Status| 0+2)))^(0+128)
 10655  03AA  300E               	movlw	high _I2C_CallbackReturnStop
 10656  03AB  00A3               	movwf	((low ((_I2C_Status| 0+2)))^(0+128)+1)
 10657                           
 10658                           ;i2c_master.c: 194: I2C_Status.callbackPayload[I2C_WRITE_COLLISION] = (0);
 10659  03AC  01AD               	clrf	(low ((_I2C_Status| 0+13)))^(0+128)
 10660                           
 10661                           ;i2c_master.c: 195: I2C_Status.callbackTable[I2C_ADDR_NACK]=I2C_CallbackReturnStop;
 10662  03AD  30E9               	movlw	low _I2C_CallbackReturnStop
 10663  03AE  00A4               	movwf	(low ((_I2C_Status| 0+4)))^(0+128)
 10664  03AF  300E               	movlw	high _I2C_CallbackReturnStop
 10665  03B0  00A5               	movwf	((low ((_I2C_Status| 0+4)))^(0+128)+1)
 10666                           
 10667                           ;i2c_master.c: 196: I2C_Status.callbackPayload[I2C_ADDR_NACK] = (0);
 10668  03B1  01AE               	clrf	(low ((_I2C_Status| 0+14)))^(0+128)
 10669                           
 10670                           ;i2c_master.c: 197: I2C_Status.callbackTable[I2C_DATA_NACK]=I2C_CallbackReturnStop;
 10671  03B2  30E9               	movlw	low _I2C_CallbackReturnStop
 10672  03B3  00A6               	movwf	(low ((_I2C_Status| 0+6)))^(0+128)
 10673  03B4  300E               	movlw	high _I2C_CallbackReturnStop
 10674  03B5  00A7               	movwf	((low ((_I2C_Status| 0+6)))^(0+128)+1)
 10675                           
 10676                           ;i2c_master.c: 198: I2C_Status.callbackPayload[I2C_DATA_NACK] = (0);
 10677  03B6  01AF               	clrf	(low ((_I2C_Status| 0+15)))^(0+128)
 10678                           
 10679                           ;i2c_master.c: 199: I2C_Status.callbackTable[I2C_TIMEOUT]=I2C_CallbackReturnReset;
 10680  03B7  30EF               	movlw	low _I2C_CallbackReturnReset
 10681  03B8  00A8               	movwf	(low ((_I2C_Status| 0+8)))^(0+128)
 10682  03B9  300E               	movlw	high _I2C_CallbackReturnReset
 10683  03BA  00A9               	movwf	((low ((_I2C_Status| 0+8)))^(0+128)+1)
 10684                           
 10685                           ;i2c_master.c: 200: I2C_Status.callbackPayload[I2C_TIMEOUT] = (0);
 10686  03BB  01B0               	clrf	(low ((_I2C_Status| 0+16)))^(0+128)
 10687                           
 10688                           ;i2c_master.c: 202: I2C_MasterClearIrq();
 10689  03BC  318E  264A  3183   	fcall	i1_I2C_MasterClearIrq
 10690                           
 10691                           ;i2c_master.c: 203: I2C_MasterOpen();
 10692  03BF  318F  27E8         	fcall	i1_I2C_MasterOpen
 10693                           
 10694                           ;i2c_master.c: 204: returnValue = I2C_NOERR;
 10695  03C1  01F2               	clrf	i1I2C_Open@returnValue
 10696  03C2                     i1l321:	
 10697                           
 10698                           ;i2c_master.c: 205: }
 10699                           ;i2c_master.c: 206: return returnValue;
 10700  03C2  0872               	movf	i1I2C_Open@returnValue,w
 10701  03C3  0008               	return
 10702  03C4                     __end_ofi1_I2C_Open:	
 10703                           
 10704                           	psect	text76
 10705  0FE8                     __ptext76:	
 10706 ;; *************** function i1_I2C_MasterOpen *****************
 10707 ;; Defined at:
 10708 ;;		line 543 in file "mcc_generated_files/i2c_master.c"
 10709 ;; Parameters:    Size  Location     Type
 10710 ;;		None
 10711 ;; Auto vars:     Size  Location     Type
 10712 ;;		None
 10713 ;; Return value:  Size  Location     Type
 10714 ;;                  1    wreg      unsigned char 
 10715 ;; Registers used:
 10716 ;;		wreg, status,2
 10717 ;; Tracked objects:
 10718 ;;		On entry : 0/0
 10719 ;;		On exit  : 0/0
 10720 ;;		Unchanged: 0/0
 10721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10726 ;;Total ram usage:        0 bytes
 10727 ;; Hardware stack levels used:    1
 10728 ;; This function calls:
 10729 ;;		Nothing
 10730 ;; This function is called by:
 10731 ;;		i1_I2C_Open
 10732 ;; This function uses a non-reentrant model
 10733 ;;
 10734                           
 10735                           
 10736                           ;psect for function i1_I2C_MasterOpen
 10737  0FE8                     i1_I2C_MasterOpen:	
 10738                           
 10739                           ;i2c_master.c: 545: if(!SSP1CON1bits.SSPEN)
 10740                           
 10741                           ;incstack = 0
 10742                           ; Regs used in i1_I2C_MasterOpen: [wreg+status,2]
 10743  0FE8  0024               	movlb	4	; select bank4
 10744  0FE9  1A95               	btfsc	21,5	;volatile
 10745  0FEA  0008               	return
 10746                           
 10747                           ;i2c_master.c: 546: {
 10748                           ;i2c_master.c: 547: SSP1STAT = 0x80;
 10749  0FEB  3080               	movlw	128
 10750  0FEC  0094               	movwf	20	;volatile
 10751                           
 10752                           ;i2c_master.c: 548: SSP1CON1 = 0x08;
 10753  0FED  3008               	movlw	8
 10754  0FEE  0095               	movwf	21	;volatile
 10755                           
 10756                           ;i2c_master.c: 549: SSP1CON2 = 0x00;
 10757  0FEF  0196               	clrf	22	;volatile
 10758                           
 10759                           ;i2c_master.c: 550: SSP1ADD = 0x09;
 10760  0FF0  3009               	movlw	9
 10761  0FF1  0092               	movwf	18	;volatile
 10762                           
 10763                           ;i2c_master.c: 551: SSP1CON1bits.SSPEN = 1;
 10764  0FF2  1695               	bsf	21,5	;volatile
 10765                           
 10766                           ;i2c_master.c: 552: return 1;
 10767                           ;	Return value of i1_I2C_MasterOpen is never used
 10768  0FF3  0008               	return
 10769  0FF4                     __end_ofi1_I2C_MasterOpen:	
 10770                           ;i2c_master.c: 553: }
 10771                           ;i2c_master.c: 554: return 0;
 10772                           ;	Return value of i1_I2C_MasterOpen is never used
 10773                           
 10774                           
 10775                           	psect	text77
 10776  0EB5                     __ptext77:	
 10777 ;; *************** function i1_I2C_MasterWrite *****************
 10778 ;; Defined at:
 10779 ;;		line 251 in file "mcc_generated_files/i2c_master.c"
 10780 ;; Parameters:    Size  Location     Type
 10781 ;;		None
 10782 ;; Auto vars:     Size  Location     Type
 10783 ;;		None
 10784 ;; Return value:  Size  Location     Type
 10785 ;;                  1    wreg      enum E92
 10786 ;; Registers used:
 10787 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10788 ;; Tracked objects:
 10789 ;;		On entry : 0/0
 10790 ;;		On exit  : 0/0
 10791 ;;		Unchanged: 0/0
 10792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10796 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10797 ;;Total ram usage:        0 bytes
 10798 ;; Hardware stack levels used:    1
 10799 ;; Hardware stack levels required when called:    7
 10800 ;; This function calls:
 10801 ;;		i1_I2C_MasterOperation
 10802 ;; This function is called by:
 10803 ;;		_I2C_Read1ByteRegister
 10804 ;;		i1_I2C_Write1ByteRegister
 10805 ;; This function uses a non-reentrant model
 10806 ;;
 10807                           
 10808                           
 10809                           ;psect for function i1_I2C_MasterWrite
 10810  0EB5                     i1_I2C_MasterWrite:	
 10811                           
 10812                           ;i2c_master.c: 253: return I2C_MasterOperation(0);
 10813                           ;	Return value of i1_I2C_MasterWrite is never used
 10814                           
 10815                           ;incstack = 0
 10816 ;; hardware stack exceeded
 10817                           ; Regs used in i1_I2C_MasterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10818  0EB5  3000               	movlw	0
 10819  0EB6  3186  2633         	fcall	i1_I2C_MasterOperation
 10820  0EB8  0008               	return
 10821  0EB9                     __end_ofi1_I2C_MasterWrite:	
 10822                           
 10823                           	psect	text78
 10824  0633                     __ptext78:	
 10825 ;; *************** function i1_I2C_MasterOperation *****************
 10826 ;; Defined at:
 10827 ;;		line 224 in file "mcc_generated_files/i2c_master.c"
 10828 ;; Parameters:    Size  Location     Type
 10829 ;;  read            1    wreg     unsigned char 
 10830 ;; Auto vars:     Size  Location     Type
 10831 ;;  read            1    3[BANK0 ] unsigned char 
 10832 ;;  I2C_MasterOp    1    4[BANK0 ] enum E92
 10833 ;; Return value:  Size  Location     Type
 10834 ;;                  1    wreg      enum E92
 10835 ;; Registers used:
 10836 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10837 ;; Tracked objects:
 10838 ;;		On entry : 0/0
 10839 ;;		On exit  : 0/0
 10840 ;;		Unchanged: 0/0
 10841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10843 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10844 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10845 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10846 ;;Total ram usage:        3 bytes
 10847 ;; Hardware stack levels used:    1
 10848 ;; Hardware stack levels required when called:    6
 10849 ;; This function calls:
 10850 ;;		i1_I2C_MasterStart
 10851 ;;		i1_I2C_Poller
 10852 ;; This function is called by:
 10853 ;;		i1_I2C_MasterWrite
 10854 ;; This function uses a non-reentrant model
 10855 ;;
 10856                           
 10857                           
 10858                           ;psect for function i1_I2C_MasterOperation
 10859  0633                     i1_I2C_MasterOperation:	
 10860                           
 10861                           ;incstack = 0
 10862 ;; hardware stack exceeded
 10863                           ; Regs used in i1_I2C_MasterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10864                           ;i1I2C_MasterOperation@read stored from wreg
 10865  0633  0020               	movlb	0	; select bank0
 10866  0634  00C0               	movwf	i1I2C_MasterOperation@read
 10867                           
 10868                           ;i2c_master.c: 226: i2c_error_t returnValue = I2C_BUSY;
 10869  0635  01C1               	clrf	i1I2C_MasterOperation@returnValue
 10870  0636  0AC1               	incf	i1I2C_MasterOperation@returnValue,f
 10871                           
 10872                           ;i2c_master.c: 227: if(!I2C_Status.busy)
 10873  0637  0021               	movlb	1	; select bank1
 10874  0638  18BC               	btfsc	(_I2C_Status^(0+128)+28),1
 10875  0639  2E4E               	goto	i1l5921
 10876                           
 10877                           ;i2c_master.c: 228: {
 10878                           ;i2c_master.c: 229: I2C_Status.busy = 1;
 10879  063A  14BC               	bsf	(_I2C_Status^(0+128)+28),1
 10880                           
 10881                           ;i2c_master.c: 230: returnValue = I2C_NOERR;
 10882  063B  0020               	movlb	0	; select bank0
 10883  063C  01C1               	clrf	i1I2C_MasterOperation@returnValue
 10884                           
 10885                           ;i2c_master.c: 232: if(read)
 10886  063D  0840               	movf	i1I2C_MasterOperation@read,w
 10887  063E  1903               	btfsc	3,2
 10888  063F  2E44               	goto	i1l5915
 10889                           
 10890                           ;i2c_master.c: 233: {
 10891                           ;i2c_master.c: 234: I2C_Status.state = I2C_SEND_ADR_READ;
 10892  0640  0021               	movlb	1	; select bank1
 10893  0641  01BA               	clrf	(_I2C_Status^(0+128)+26)
 10894  0642  0ABA               	incf	(_I2C_Status^(0+128)+26),f
 10895                           
 10896                           ;i2c_master.c: 235: }
 10897  0643  2E49               	goto	i1l5917
 10898  0644                     i1l5915:	
 10899                           
 10900                           ;i2c_master.c: 236: else
 10901                           ;i2c_master.c: 237: {
 10902                           ;i2c_master.c: 238: I2C_Status.state = I2C_SEND_ADR_WRITE;
 10903  0644  3002               	movlw	2
 10904  0645  00FD               	movwf	??i1_I2C_MasterOperation
 10905  0646  087D               	movf	??i1_I2C_MasterOperation,w
 10906  0647  0021               	movlb	1	; select bank1
 10907  0648  00BA               	movwf	(_I2C_Status^(0+128)+26)
 10908  0649                     i1l5917:	
 10909                           
 10910                           ;i2c_master.c: 239: }
 10911                           ;i2c_master.c: 240: I2C_MasterStart();
 10912  0649  318E  2653  3186   	fcall	i1_I2C_MasterStart
 10913                           
 10914                           ;i2c_master.c: 241: I2C_Poller();
 10915  064C  318F  2793         	fcall	i1_I2C_Poller
 10916  064E                     i1l5921:	
 10917                           
 10918                           ;i2c_master.c: 242: }
 10919                           ;i2c_master.c: 243: return returnValue;
 10920  064E  0020               	movlb	0	; select bank0
 10921  064F  0841               	movf	i1I2C_MasterOperation@returnValue,w
 10922  0650  0008               	return
 10923  0651                     __end_ofi1_I2C_MasterOperation:	
 10924                           
 10925                           	psect	text79
 10926  0F93                     __ptext79:	
 10927 ;; *************** function i1_I2C_Poller *****************
 10928 ;; Defined at:
 10929 ;;		line 312 in file "mcc_generated_files/i2c_master.c"
 10930 ;; Parameters:    Size  Location     Type
 10931 ;;		None
 10932 ;; Auto vars:     Size  Location     Type
 10933 ;;		None
 10934 ;; Return value:  Size  Location     Type
 10935 ;;                  1    wreg      void 
 10936 ;; Registers used:
 10937 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10938 ;; Tracked objects:
 10939 ;;		On entry : 0/0
 10940 ;;		On exit  : 0/0
 10941 ;;		Unchanged: 0/0
 10942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10947 ;;Total ram usage:        0 bytes
 10948 ;; Hardware stack levels used:    1
 10949 ;; Hardware stack levels required when called:    5
 10950 ;; This function calls:
 10951 ;;		i1_I2C_MasterFsm
 10952 ;;		i1_I2C_MasterWaitForEvent
 10953 ;; This function is called by:
 10954 ;;		i1_I2C_MasterOperation
 10955 ;; This function uses a non-reentrant model
 10956 ;;
 10957                           
 10958                           
 10959                           ;psect for function i1_I2C_Poller
 10960  0F93                     i1_I2C_Poller:	
 10961  0F93                     i1l5811:	
 10962                           ;i2c_master.c: 314: while(I2C_Status.busy)
 10963                           
 10964                           ;incstack = 0
 10965 ;; hardware stack exceeded
 10966                           ; Regs used in i1_I2C_Poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10967                           
 10968  0F93  0021               	movlb	1	; select bank1
 10969  0F94  1CBC               	btfss	(_I2C_Status^(0+128)+28),1
 10970  0F95  0008               	return
 10971                           
 10972                           ;i2c_master.c: 315: {
 10973                           ;i2c_master.c: 316: I2C_MasterWaitForEvent();
 10974  0F96  318E  26B1  318F   	fcall	i1_I2C_MasterWaitForEvent
 10975                           
 10976                           ;i2c_master.c: 317: I2C_MasterFsm();
 10977  0F99  3185  2513  318F   	fcall	i1_I2C_MasterFsm
 10978  0F9C  2F93               	goto	i1l5811
 10979  0F9D                     __end_ofi1_I2C_Poller:	
 10980                           
 10981                           	psect	text80
 10982  0EB1                     __ptext80:	
 10983 ;; *************** function i1_I2C_MasterWaitForEvent *****************
 10984 ;; Defined at:
 10985 ;;		line 650 in file "mcc_generated_files/i2c_master.c"
 10986 ;; Parameters:    Size  Location     Type
 10987 ;;		None
 10988 ;; Auto vars:     Size  Location     Type
 10989 ;;		None
 10990 ;; Return value:  Size  Location     Type
 10991 ;;                  1    wreg      void 
 10992 ;; Registers used:
 10993 ;;		None
 10994 ;; Tracked objects:
 10995 ;;		On entry : 0/0
 10996 ;;		On exit  : 0/0
 10997 ;;		Unchanged: 0/0
 10998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11002 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11003 ;;Total ram usage:        0 bytes
 11004 ;; Hardware stack levels used:    1
 11005 ;; This function calls:
 11006 ;;		Nothing
 11007 ;; This function is called by:
 11008 ;;		i1_I2C_Poller
 11009 ;; This function uses a non-reentrant model
 11010 ;;
 11011                           
 11012                           
 11013                           ;psect for function i1_I2C_MasterWaitForEvent
 11014  0EB1                     i1_I2C_MasterWaitForEvent:	
 11015  0EB1                     i1l544:	
 11016                           ;incstack = 0
 11017 ;; hardware stack exceeded
 11018                           ; Regs used in i1_I2C_MasterWaitForEvent: []
 11019                           ;i2c_master.c: 652: while(1)
 11020                           
 11021                           
 11022                           ;i2c_master.c: 653: {
 11023                           ;i2c_master.c: 654: if(PIR1bits.SSP1IF)
 11024  0EB1  0020               	movlb	0	; select bank0
 11025  0EB2  1990               	btfsc	16,3	;volatile
 11026  0EB3  0008               	return
 11027  0EB4  2EB1               	goto	i1l544
 11028  0EB5                     __end_ofi1_I2C_MasterWaitForEvent:	
 11029                           ;i2c_master.c: 655: {
 11030                           ;i2c_master.c: 656: break;
 11031                           
 11032                           
 11033                           	psect	text81
 11034  0513                     __ptext81:	
 11035 ;; *************** function i1_I2C_MasterFsm *****************
 11036 ;; Defined at:
 11037 ;;		line 321 in file "mcc_generated_files/i2c_master.c"
 11038 ;; Parameters:    Size  Location     Type
 11039 ;;		None
 11040 ;; Auto vars:     Size  Location     Type
 11041 ;;		None
 11042 ;; Return value:  Size  Location     Type
 11043 ;;                  1    wreg      void 
 11044 ;; Registers used:
 11045 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11046 ;; Tracked objects:
 11047 ;;		On entry : 0/0
 11048 ;;		On exit  : 0/0
 11049 ;;		Unchanged: 0/0
 11050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11053 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11054 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11055 ;;Total ram usage:        3 bytes
 11056 ;; Hardware stack levels used:    1
 11057 ;; Hardware stack levels required when called:    4
 11058 ;; This function calls:
 11059 ;;		i1_I2C_DO_ADDRESS_NACK
 11060 ;;		i1_I2C_DO_IDLE
 11061 ;;		i1_I2C_DO_RCEN
 11062 ;;		i1_I2C_DO_RESET
 11063 ;;		i1_I2C_DO_RX
 11064 ;;		i1_I2C_DO_RX_ACK
 11065 ;;		i1_I2C_DO_RX_NACK_RESTART
 11066 ;;		i1_I2C_DO_RX_NACK_STOP
 11067 ;;		i1_I2C_DO_SEND_ADR_READ
 11068 ;;		i1_I2C_DO_SEND_ADR_WRITE
 11069 ;;		i1_I2C_DO_SEND_RESTART
 11070 ;;		i1_I2C_DO_SEND_RESTART_READ
 11071 ;;		i1_I2C_DO_SEND_RESTART_WRITE
 11072 ;;		i1_I2C_DO_SEND_STOP
 11073 ;;		i1_I2C_DO_TX
 11074 ;;		i1_I2C_DO_TX_EMPTY
 11075 ;;		i1_I2C_MasterClearIrq
 11076 ;;		i1_I2C_MasterIsNack
 11077 ;; This function is called by:
 11078 ;;		i1_I2C_Poller
 11079 ;; This function uses a non-reentrant model
 11080 ;;
 11081                           
 11082                           
 11083                           ;psect for function i1_I2C_MasterFsm
 11084  0513                     i1_I2C_MasterFsm:	
 11085                           
 11086                           ;i2c_master.c: 323: I2C_MasterClearIrq();
 11087                           
 11088                           ;incstack = 0
 11089 ;; hardware stack exceeded
 11090                           ; Regs used in i1_I2C_MasterFsm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11091  0513  318E  264A  3185   	fcall	i1_I2C_MasterClearIrq
 11092                           
 11093                           ;i2c_master.c: 325: if(I2C_Status.addressNackCheck && I2C_MasterIsNack())
 11094  0516  0021               	movlb	1	; select bank1
 11095  0517  1C3C               	btfss	(_I2C_Status^(0+128)+28),0
 11096  0518  2D25               	goto	i1l5803
 11097  0519  318E  26DD  3185   	fcall	i1_I2C_MasterIsNack
 11098  051C  3A00               	xorlw	0
 11099  051D  1903               	skipnz
 11100  051E  2D25               	goto	i1l5803
 11101                           
 11102                           ;i2c_master.c: 326: {
 11103                           ;i2c_master.c: 327: I2C_Status.state = I2C_ADDRESS_NACK;
 11104  051F  300F               	movlw	15
 11105  0520  0020               	movlb	0	; select bank0
 11106  0521  00BD               	movwf	??i1_I2C_MasterFsm
 11107  0522  083D               	movf	??i1_I2C_MasterFsm,w
 11108  0523  0021               	movlb	1	; select bank1
 11109  0524  00BA               	movwf	(_I2C_Status^(0+128)+26)
 11110  0525                     i1l5803:	
 11111                           
 11112                           ;i2c_master.c: 328: }
 11113                           ;i2c_master.c: 329: I2C_Status.state = fsmStateTable[I2C_Status.state]();
 11114  0525  0021               	movlb	1	; select bank1
 11115  0526  083A               	movf	(_I2C_Status^(0+128)+26),w
 11116  0527  0020               	movlb	0	; select bank0
 11117  0528  00BD               	movwf	??i1_I2C_MasterFsm
 11118  0529  01BE               	clrf	??i1_I2C_MasterFsm+1
 11119  052A  35BD               	lslf	??i1_I2C_MasterFsm,f
 11120  052B  0DBE               	rlf	??i1_I2C_MasterFsm+1,f
 11121  052C  30F5               	movlw	low (_fsmStateTable| (0+32768))
 11122  052D  073D               	addwf	??i1_I2C_MasterFsm,w
 11123  052E  0084               	movwf	4
 11124  052F  3085               	movlw	high (_fsmStateTable| (0+32768))
 11125  0530  3D3E               	addwfc	??i1_I2C_MasterFsm+1,w
 11126  0531  0085               	movwf	5
 11127  0532  3F01               	moviw [1]fsr0
 11128  0533  008A               	movwf	10
 11129  0534  3F00               	moviw [0]fsr0
 11130  0535  000A               	callw
 11131  0536  3185               	pagesel	$
 11132  0537  0020               	movlb	0	; select bank0
 11133  0538  00BF               	movwf	??i1_I2C_MasterFsm+2
 11134  0539  083F               	movf	??i1_I2C_MasterFsm+2,w
 11135  053A  0021               	movlb	1	; select bank1
 11136  053B  00BA               	movwf	(_I2C_Status^(0+128)+26)
 11137  053C  0008               	return
 11138  053D                     __end_ofi1_I2C_MasterFsm:	
 11139                           
 11140                           	psect	text82
 11141  05D2                     __ptext82:	
 11142 ;; *************** function i1_I2C_DO_ADDRESS_NACK *****************
 11143 ;; Defined at:
 11144 ;;		line 500 in file "mcc_generated_files/i2c_master.c"
 11145 ;; Parameters:    Size  Location     Type
 11146 ;;		None
 11147 ;; Auto vars:     Size  Location     Type
 11148 ;;		None
 11149 ;; Return value:  Size  Location     Type
 11150 ;;                  1    wreg      enum E12103
 11151 ;; Registers used:
 11152 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11153 ;; Tracked objects:
 11154 ;;		On entry : 0/0
 11155 ;;		On exit  : 0/0
 11156 ;;		Unchanged: 0/0
 11157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11160 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11161 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11162 ;;Total ram usage:        1 bytes
 11163 ;; Hardware stack levels used:    1
 11164 ;; Hardware stack levels required when called:    3
 11165 ;; This function calls:
 11166 ;;		Absolute function
 11167 ;;		i1_I2C_CallbackReturnReset
 11168 ;;		i1_I2C_CallbackReturnStop
 11169 ;;		i1_I2C_DO_SEND_RESTART
 11170 ;;		i1_I2C_DO_SEND_STOP
 11171 ;;		i1_rd1RegCompleteHandler
 11172 ;;		i1_rd2RegCompleteHandler
 11173 ;;		i1_rdBlkRegCompleteHandler
 11174 ;;		i1_wr1RegCompleteHandler
 11175 ;;		i1_wr2RegCompleteHandler
 11176 ;; This function is called by:
 11177 ;; This function uses a non-reentrant model
 11178 ;;
 11179                           
 11180                           
 11181                           ;psect for function i1_I2C_DO_ADDRESS_NACK
 11182  05D2                     i1_I2C_DO_ADDRESS_NACK:	
 11183  05D2                     i1l5779:	
 11184                           ;incstack = 0
 11185 ;; hardware stack exceeded
 11186                           ; Regs used in i1_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11187                           
 11188                           
 11189                           ;i2c_master.c: 502: I2C_Status.addressNackCheck = 0;
 11190  05D2  0021               	movlb	1	; select bank1
 11191  05D3  103C               	bcf	(_I2C_Status^(0+128)+28),0
 11192                           
 11193                           ;i2c_master.c: 503: I2C_Status.error = I2C_FAIL;
 11194  05D4  3002               	movlw	2
 11195  05D5  00FA               	movwf	??i1_I2C_DO_ADDRESS_NACK
 11196  05D6  087A               	movf	??i1_I2C_DO_ADDRESS_NACK,w
 11197  05D7  00BB               	movwf	(_I2C_Status^(0+128)+27)
 11198                           
 11199                           ;i2c_master.c: 504: switch(I2C_Status.callbackTable[I2C_ADDR_NACK](I2C_Status.callbackPa
      +                          yload[I2C_ADDR_NACK]))
 11200  05D8  2DDF               	goto	i1l5793
 11201  05D9                     i1l5783:	
 11202                           ;i2c_master.c: 505: {
 11203                           ;i2c_master.c: 506: case I2C_RESTART_READ:
 11204                           
 11205                           
 11206                           ;i2c_master.c: 507: case I2C_RESTART_WRITE:
 11207                           ;i2c_master.c: 508: return I2C_DO_SEND_RESTART();
 11208  05D9  318E  269D         	fcall	i1_I2C_DO_SEND_RESTART
 11209  05DB  0008               	return
 11210  05DC                     i1l5787:	
 11211                           ;i2c_master.c: 509: default:
 11212                           
 11213                           
 11214                           ;i2c_master.c: 510: return I2C_DO_SEND_STOP();
 11215  05DC  318E  26A1         	fcall	i1_I2C_DO_SEND_STOP
 11216                           
 11217                           ;i2c_master.c: 511: }
 11218  05DE  0008               	return
 11219  05DF                     i1l5793:	
 11220  05DF  0021               	movlb	1	; select bank1
 11221  05E0  082E               	movf	(low ((_I2C_Status| 0+14)))^(0+128),w
 11222  05E1  00FA               	movwf	??i1_I2C_DO_ADDRESS_NACK
 11223  05E2  087A               	movf	??i1_I2C_DO_ADDRESS_NACK,w
 11224  05E3  00F9               	movwf	i1I2C_CallbackReturnReset@funPtr
 11225  05E4  3004               	movlw	4
 11226  05E5  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
 11227  05E6  0086               	movwf	6
 11228  05E7  0187               	clrf	7
 11229  05E8  3F41               	moviw [1]fsr1
 11230  05E9  008A               	movwf	10
 11231  05EA  3F40               	moviw [0]fsr1
 11232  05EB  000A               	callw
 11233  05EC  3185               	pagesel	$
 11234                           
 11235                           ; Switch size 1, requested type "space"
 11236                           ; Number of cases is 2, Range of values is 2 to 3
 11237                           ; switch strategies available:
 11238                           ; Name         Instructions Cycles
 11239                           ; simple_byte            7     4 (average)
 11240                           ; direct_byte           13     9 (fixed)
 11241                           ; jumptable            263     9 (fixed)
 11242                           ;	Chosen strategy is simple_byte
 11243  05ED  3A02               	xorlw	2	; case 2
 11244  05EE  1903               	skipnz
 11245  05EF  2DD9               	goto	i1l5783
 11246  05F0  3A01               	xorlw	1	; case 3
 11247  05F1  1903               	skipnz
 11248  05F2  2DD9               	goto	i1l5783
 11249  05F3  2DDC               	goto	i1l5787
 11250  05F4  0008               	return
 11251  05F5                     __end_ofi1_I2C_DO_ADDRESS_NACK:	
 11252                           
 11253                           	psect	text83
 11254  0ED3                     __ptext83:	
 11255 ;; *************** function i1_I2C_DO_RESET *****************
 11256 ;; Defined at:
 11257 ;;		line 494 in file "mcc_generated_files/i2c_master.c"
 11258 ;; Parameters:    Size  Location     Type
 11259 ;;		None
 11260 ;; Auto vars:     Size  Location     Type
 11261 ;;		None
 11262 ;; Return value:  Size  Location     Type
 11263 ;;                  1    wreg      enum E12103
 11264 ;; Registers used:
 11265 ;;		wreg, status,2
 11266 ;; Tracked objects:
 11267 ;;		On entry : 0/0
 11268 ;;		On exit  : 0/0
 11269 ;;		Unchanged: 0/0
 11270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11274 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11275 ;;Total ram usage:        0 bytes
 11276 ;; Hardware stack levels used:    1
 11277 ;; This function calls:
 11278 ;;		Nothing
 11279 ;; This function is called by:
 11280 ;; This function uses a non-reentrant model
 11281 ;;
 11282                           
 11283                           
 11284                           ;psect for function i1_I2C_DO_RESET
 11285  0ED3                     i1_I2C_DO_RESET:	
 11286  0ED3                     i1l2825:	
 11287                           ;incstack = 0
 11288 ;; hardware stack exceeded
 11289                           ; Regs used in i1_I2C_DO_RESET: [wreg+status,2]
 11290                           
 11291                           
 11292                           ;i2c_master.c: 496: I2C_Status.busy = 0;
 11293  0ED3  0021               	movlb	1	; select bank1
 11294  0ED4  10BC               	bcf	(_I2C_Status^(0+128)+28),1
 11295                           
 11296                           ;i2c_master.c: 497: I2C_Status.error = I2C_NOERR;
 11297  0ED5  01BB               	clrf	(_I2C_Status^(0+128)+27)
 11298                           
 11299                           ;i2c_master.c: 498: return I2C_RESET;
 11300  0ED6  300E               	movlw	14
 11301  0ED7  0008               	return
 11302  0ED8                     __end_ofi1_I2C_DO_RESET:	
 11303                           
 11304                           	psect	text84
 11305  0EAD                     __ptext84:	
 11306 ;; *************** function i1_I2C_DO_RX_NACK_RESTART *****************
 11307 ;; Defined at:
 11308 ;;		line 488 in file "mcc_generated_files/i2c_master.c"
 11309 ;; Parameters:    Size  Location     Type
 11310 ;;		None
 11311 ;; Auto vars:     Size  Location     Type
 11312 ;;		None
 11313 ;; Return value:  Size  Location     Type
 11314 ;;                  1    wreg      enum E12103
 11315 ;; Registers used:
 11316 ;;		wreg, status,2, status,0, pclath, cstack
 11317 ;; Tracked objects:
 11318 ;;		On entry : 0/0
 11319 ;;		On exit  : 0/0
 11320 ;;		Unchanged: 0/0
 11321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11326 ;;Total ram usage:        0 bytes
 11327 ;; Hardware stack levels used:    1
 11328 ;; Hardware stack levels required when called:    1
 11329 ;; This function calls:
 11330 ;;		i1_I2C_MasterSendNack
 11331 ;; This function is called by:
 11332 ;;		i1_I2C_DO_RX
 11333 ;; This function uses a non-reentrant model
 11334 ;;
 11335                           
 11336                           
 11337                           ;psect for function i1_I2C_DO_RX_NACK_RESTART
 11338  0EAD                     i1_I2C_DO_RX_NACK_RESTART:	
 11339  0EAD                     i1l2675:	
 11340                           ;incstack = 0
 11341 ;; hardware stack exceeded
 11342                           ; Regs used in i1_I2C_DO_RX_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 11343                           
 11344                           
 11345                           ;i2c_master.c: 490: I2C_MasterSendNack();
 11346  0EAD  318E  268D         	fcall	i1_I2C_MasterSendNack
 11347                           
 11348                           ;i2c_master.c: 491: return I2C_SEND_RESTART;
 11349  0EAF  3009               	movlw	9
 11350  0EB0  0008               	return
 11351  0EB1                     __end_ofi1_I2C_DO_RX_NACK_RESTART:	
 11352                           
 11353                           	psect	text85
 11354  0EA9                     __ptext85:	
 11355 ;; *************** function i1_I2C_DO_RX_NACK_STOP *****************
 11356 ;; Defined at:
 11357 ;;		line 482 in file "mcc_generated_files/i2c_master.c"
 11358 ;; Parameters:    Size  Location     Type
 11359 ;;		None
 11360 ;; Auto vars:     Size  Location     Type
 11361 ;;		None
 11362 ;; Return value:  Size  Location     Type
 11363 ;;                  1    wreg      enum E12103
 11364 ;; Registers used:
 11365 ;;		wreg, status,2, status,0, pclath, cstack
 11366 ;; Tracked objects:
 11367 ;;		On entry : 0/0
 11368 ;;		On exit  : 0/0
 11369 ;;		Unchanged: 0/0
 11370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11375 ;;Total ram usage:        0 bytes
 11376 ;; Hardware stack levels used:    1
 11377 ;; Hardware stack levels required when called:    1
 11378 ;; This function calls:
 11379 ;;		i1_I2C_MasterSendNack
 11380 ;; This function is called by:
 11381 ;;		i1_I2C_DO_RX
 11382 ;; This function uses a non-reentrant model
 11383 ;;
 11384                           
 11385                           
 11386                           ;psect for function i1_I2C_DO_RX_NACK_STOP
 11387  0EA9                     i1_I2C_DO_RX_NACK_STOP:	
 11388  0EA9                     i1l2669:	
 11389                           ;incstack = 0
 11390 ;; hardware stack exceeded
 11391                           ; Regs used in i1_I2C_DO_RX_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 11392                           
 11393                           
 11394                           ;i2c_master.c: 484: I2C_MasterSendNack();
 11395  0EA9  318E  268D         	fcall	i1_I2C_MasterSendNack
 11396                           
 11397                           ;i2c_master.c: 485: return I2C_SEND_STOP;
 11398  0EAB  300A               	movlw	10
 11399  0EAC  0008               	return
 11400  0EAD                     __end_ofi1_I2C_DO_RX_NACK_STOP:	
 11401                           
 11402                           	psect	text86
 11403  0EA5                     __ptext86:	
 11404 ;; *************** function i1_I2C_DO_RX_ACK *****************
 11405 ;; Defined at:
 11406 ;;		line 475 in file "mcc_generated_files/i2c_master.c"
 11407 ;; Parameters:    Size  Location     Type
 11408 ;;		None
 11409 ;; Auto vars:     Size  Location     Type
 11410 ;;		None
 11411 ;; Return value:  Size  Location     Type
 11412 ;;                  1    wreg      enum E12103
 11413 ;; Registers used:
 11414 ;;		wreg, status,2, status,0, pclath, cstack
 11415 ;; Tracked objects:
 11416 ;;		On entry : 0/0
 11417 ;;		On exit  : 0/0
 11418 ;;		Unchanged: 0/0
 11419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11424 ;;Total ram usage:        0 bytes
 11425 ;; Hardware stack levels used:    1
 11426 ;; Hardware stack levels required when called:    1
 11427 ;; This function calls:
 11428 ;;		i1_I2C_MasterSendAck
 11429 ;; This function is called by:
 11430 ;; This function uses a non-reentrant model
 11431 ;;
 11432                           
 11433                           
 11434                           ;psect for function i1_I2C_DO_RX_ACK
 11435  0EA5                     i1_I2C_DO_RX_ACK:	
 11436  0EA5                     i1l2819:	
 11437                           ;incstack = 0
 11438 ;; hardware stack exceeded
 11439                           ; Regs used in i1_I2C_DO_RX_ACK: [wreg+status,2+status,0+pclath+cstack]
 11440                           
 11441                           
 11442                           ;i2c_master.c: 477: I2C_MasterSendAck();
 11443  0EA5  318E  2691         	fcall	i1_I2C_MasterSendAck
 11444                           
 11445                           ;i2c_master.c: 478: return I2C_RCEN;
 11446  0EA7  3005               	movlw	5
 11447  0EA8  0008               	return
 11448  0EA9                     __end_ofi1_I2C_DO_RX_ACK:	
 11449                           
 11450                           	psect	text87
 11451  0EA1                     __ptext87:	
 11452 ;; *************** function i1_I2C_DO_SEND_STOP *****************
 11453 ;; Defined at:
 11454 ;;		line 469 in file "mcc_generated_files/i2c_master.c"
 11455 ;; Parameters:    Size  Location     Type
 11456 ;;		None
 11457 ;; Auto vars:     Size  Location     Type
 11458 ;;		None
 11459 ;; Return value:  Size  Location     Type
 11460 ;;                  1    wreg      enum E12103
 11461 ;; Registers used:
 11462 ;;		wreg, status,2, status,0, pclath, cstack
 11463 ;; Tracked objects:
 11464 ;;		On entry : 0/0
 11465 ;;		On exit  : 0/0
 11466 ;;		Unchanged: 0/0
 11467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11471 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11472 ;;Total ram usage:        0 bytes
 11473 ;; Hardware stack levels used:    1
 11474 ;; Hardware stack levels required when called:    1
 11475 ;; This function calls:
 11476 ;;		i1_I2C_MasterStop
 11477 ;; This function is called by:
 11478 ;;		i1_I2C_DO_TX
 11479 ;;		i1_I2C_DO_TX_EMPTY
 11480 ;;		i1_I2C_DO_ADDRESS_NACK
 11481 ;; This function uses a non-reentrant model
 11482 ;;
 11483                           
 11484                           
 11485                           ;psect for function i1_I2C_DO_SEND_STOP
 11486  0EA1                     i1_I2C_DO_SEND_STOP:	
 11487  0EA1                     i1l2663:	
 11488                           ;incstack = 0
 11489 ;; hardware stack exceeded
 11490                           ; Regs used in i1_I2C_DO_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 11491                           
 11492                           
 11493                           ;i2c_master.c: 471: I2C_MasterStop();
 11494  0EA1  318E  2659         	fcall	i1_I2C_MasterStop
 11495                           
 11496                           ;i2c_master.c: 472: return I2C_IDLE;
 11497  0EA3  3000               	movlw	0
 11498  0EA4  0008               	return
 11499  0EA5                     __end_ofi1_I2C_DO_SEND_STOP:	
 11500                           
 11501                           	psect	text88
 11502  0E9D                     __ptext88:	
 11503 ;; *************** function i1_I2C_DO_SEND_RESTART *****************
 11504 ;; Defined at:
 11505 ;;		line 463 in file "mcc_generated_files/i2c_master.c"
 11506 ;; Parameters:    Size  Location     Type
 11507 ;;		None
 11508 ;; Auto vars:     Size  Location     Type
 11509 ;;		None
 11510 ;; Return value:  Size  Location     Type
 11511 ;;                  1    wreg      enum E12103
 11512 ;; Registers used:
 11513 ;;		wreg, status,2, status,0, pclath, cstack
 11514 ;; Tracked objects:
 11515 ;;		On entry : 0/0
 11516 ;;		On exit  : 0/0
 11517 ;;		Unchanged: 0/0
 11518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11523 ;;Total ram usage:        0 bytes
 11524 ;; Hardware stack levels used:    1
 11525 ;; Hardware stack levels required when called:    1
 11526 ;; This function calls:
 11527 ;;		i1_I2C_MasterEnableRestart
 11528 ;; This function is called by:
 11529 ;;		i1_I2C_DO_TX_EMPTY
 11530 ;;		i1_I2C_DO_ADDRESS_NACK
 11531 ;; This function uses a non-reentrant model
 11532 ;;
 11533                           
 11534                           
 11535                           ;psect for function i1_I2C_DO_SEND_RESTART
 11536  0E9D                     i1_I2C_DO_SEND_RESTART:	
 11537  0E9D                     i1l2657:	
 11538                           ;incstack = 0
 11539 ;; hardware stack exceeded
 11540                           ; Regs used in i1_I2C_DO_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 11541                           
 11542                           
 11543                           ;i2c_master.c: 465: I2C_MasterEnableRestart();
 11544  0E9D  318E  2656         	fcall	i1_I2C_MasterEnableRestart
 11545                           
 11546                           ;i2c_master.c: 466: return I2C_SEND_ADR_READ;
 11547  0E9F  3001               	movlw	1
 11548  0EA0  0008               	return
 11549  0EA1                     __end_ofi1_I2C_DO_SEND_RESTART:	
 11550                           
 11551                           	psect	text89
 11552  0E99                     __ptext89:	
 11553 ;; *************** function i1_I2C_DO_SEND_RESTART_WRITE *****************
 11554 ;; Defined at:
 11555 ;;		line 456 in file "mcc_generated_files/i2c_master.c"
 11556 ;; Parameters:    Size  Location     Type
 11557 ;;		None
 11558 ;; Auto vars:     Size  Location     Type
 11559 ;;		None
 11560 ;; Return value:  Size  Location     Type
 11561 ;;                  1    wreg      enum E12103
 11562 ;; Registers used:
 11563 ;;		wreg, status,2, status,0, pclath, cstack
 11564 ;; Tracked objects:
 11565 ;;		On entry : 0/0
 11566 ;;		On exit  : 0/0
 11567 ;;		Unchanged: 0/0
 11568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11573 ;;Total ram usage:        0 bytes
 11574 ;; Hardware stack levels used:    1
 11575 ;; Hardware stack levels required when called:    1
 11576 ;; This function calls:
 11577 ;;		i1_I2C_MasterEnableRestart
 11578 ;; This function is called by:
 11579 ;;		i1_I2C_DO_TX
 11580 ;; This function uses a non-reentrant model
 11581 ;;
 11582                           
 11583                           
 11584                           ;psect for function i1_I2C_DO_SEND_RESTART_WRITE
 11585  0E99                     i1_I2C_DO_SEND_RESTART_WRITE:	
 11586  0E99                     i1l2651:	
 11587                           ;incstack = 0
 11588 ;; hardware stack exceeded
 11589                           ; Regs used in i1_I2C_DO_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 11590                           
 11591                           
 11592                           ;i2c_master.c: 458: I2C_MasterEnableRestart();
 11593  0E99  318E  2656         	fcall	i1_I2C_MasterEnableRestart
 11594                           
 11595                           ;i2c_master.c: 459: return I2C_SEND_ADR_WRITE;
 11596  0E9B  3002               	movlw	2
 11597  0E9C  0008               	return
 11598  0E9D                     __end_ofi1_I2C_DO_SEND_RESTART_WRITE:	
 11599                           
 11600                           	psect	text90
 11601  0E95                     __ptext90:	
 11602 ;; *************** function i1_I2C_DO_SEND_RESTART_READ *****************
 11603 ;; Defined at:
 11604 ;;		line 450 in file "mcc_generated_files/i2c_master.c"
 11605 ;; Parameters:    Size  Location     Type
 11606 ;;		None
 11607 ;; Auto vars:     Size  Location     Type
 11608 ;;		None
 11609 ;; Return value:  Size  Location     Type
 11610 ;;                  1    wreg      enum E12103
 11611 ;; Registers used:
 11612 ;;		wreg, status,2, status,0, pclath, cstack
 11613 ;; Tracked objects:
 11614 ;;		On entry : 0/0
 11615 ;;		On exit  : 0/0
 11616 ;;		Unchanged: 0/0
 11617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11622 ;;Total ram usage:        0 bytes
 11623 ;; Hardware stack levels used:    1
 11624 ;; Hardware stack levels required when called:    1
 11625 ;; This function calls:
 11626 ;;		i1_I2C_MasterEnableRestart
 11627 ;; This function is called by:
 11628 ;;		i1_I2C_DO_TX
 11629 ;; This function uses a non-reentrant model
 11630 ;;
 11631                           
 11632                           
 11633                           ;psect for function i1_I2C_DO_SEND_RESTART_READ
 11634  0E95                     i1_I2C_DO_SEND_RESTART_READ:	
 11635  0E95                     i1l2645:	
 11636                           ;incstack = 0
 11637 ;; hardware stack exceeded
 11638                           ; Regs used in i1_I2C_DO_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 11639                           
 11640                           
 11641                           ;i2c_master.c: 452: I2C_MasterEnableRestart();
 11642  0E95  318E  2656         	fcall	i1_I2C_MasterEnableRestart
 11643                           
 11644                           ;i2c_master.c: 453: return I2C_SEND_ADR_READ;
 11645  0E97  3001               	movlw	1
 11646  0E98  0008               	return
 11647  0E99                     __end_ofi1_I2C_DO_SEND_RESTART_READ:	
 11648                           
 11649                           	psect	text91
 11650  0EE3                     __ptext91:	
 11651 ;; *************** function i1_I2C_DO_RCEN *****************
 11652 ;; Defined at:
 11653 ;;		line 402 in file "mcc_generated_files/i2c_master.c"
 11654 ;; Parameters:    Size  Location     Type
 11655 ;;		None
 11656 ;; Auto vars:     Size  Location     Type
 11657 ;;		None
 11658 ;; Return value:  Size  Location     Type
 11659 ;;                  1    wreg      enum E12103
 11660 ;; Registers used:
 11661 ;;		wreg, status,2, status,0, pclath, cstack
 11662 ;; Tracked objects:
 11663 ;;		On entry : 0/0
 11664 ;;		On exit  : 0/0
 11665 ;;		Unchanged: 0/0
 11666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11671 ;;Total ram usage:        0 bytes
 11672 ;; Hardware stack levels used:    1
 11673 ;; Hardware stack levels required when called:    1
 11674 ;; This function calls:
 11675 ;;		i1_I2C_MasterStartRx
 11676 ;; This function is called by:
 11677 ;; This function uses a non-reentrant model
 11678 ;;
 11679                           
 11680                           
 11681                           ;psect for function i1_I2C_DO_RCEN
 11682  0EE3                     i1_I2C_DO_RCEN:	
 11683  0EE3                     i1l2791:	
 11684                           ;incstack = 0
 11685 ;; hardware stack exceeded
 11686                           ; Regs used in i1_I2C_DO_RCEN: [wreg+status,2+status,0+pclath+cstack]
 11687                           
 11688                           
 11689                           ;i2c_master.c: 404: I2C_Status.addressNackCheck = 0;
 11690  0EE3  0021               	movlb	1	; select bank1
 11691  0EE4  103C               	bcf	(_I2C_Status^(0+128)+28),0
 11692                           
 11693                           ;i2c_master.c: 405: I2C_MasterStartRx();
 11694  0EE5  318E  265C         	fcall	i1_I2C_MasterStartRx
 11695                           
 11696                           ;i2c_master.c: 406: return I2C_RX;
 11697  0EE7  3004               	movlw	4
 11698  0EE8  0008               	return
 11699  0EE9                     __end_ofi1_I2C_DO_RCEN:	
 11700                           
 11701                           	psect	text92
 11702  0353                     __ptext92:	
 11703 ;; *************** function i1_I2C_DO_RX *****************
 11704 ;; Defined at:
 11705 ;;		line 378 in file "mcc_generated_files/i2c_master.c"
 11706 ;; Parameters:    Size  Location     Type
 11707 ;;		None
 11708 ;; Auto vars:     Size  Location     Type
 11709 ;;		None
 11710 ;; Return value:  Size  Location     Type
 11711 ;;                  1    wreg      enum E12103
 11712 ;; Registers used:
 11713 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11714 ;; Tracked objects:
 11715 ;;		On entry : 0/0
 11716 ;;		On exit  : 0/0
 11717 ;;		Unchanged: 0/0
 11718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11721 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11722 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11723 ;;Total ram usage:        1 bytes
 11724 ;; Hardware stack levels used:    1
 11725 ;; Hardware stack levels required when called:    3
 11726 ;; This function calls:
 11727 ;;		Absolute function
 11728 ;;		i1_I2C_CallbackReturnReset
 11729 ;;		i1_I2C_CallbackReturnStop
 11730 ;;		i1_I2C_DO_RX_NACK_RESTART
 11731 ;;		i1_I2C_DO_RX_NACK_STOP
 11732 ;;		i1_I2C_MasterGetRxData
 11733 ;;		i1_I2C_MasterSendAck
 11734 ;;		i1_rd1RegCompleteHandler
 11735 ;;		i1_rd2RegCompleteHandler
 11736 ;;		i1_rdBlkRegCompleteHandler
 11737 ;;		i1_wr1RegCompleteHandler
 11738 ;;		i1_wr2RegCompleteHandler
 11739 ;; This function is called by:
 11740 ;; This function uses a non-reentrant model
 11741 ;;
 11742                           
 11743                           
 11744                           ;psect for function i1_I2C_DO_RX
 11745  0353                     i1_I2C_DO_RX:	
 11746  0353                     i1l5733:	
 11747                           ;incstack = 0
 11748 ;; hardware stack exceeded
 11749                           ; Regs used in i1_I2C_DO_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11750                           
 11751                           
 11752                           ;i2c_master.c: 380: *I2C_Status.data_ptr++ = I2C_MasterGetRxData();
 11753  0353  318E  265F  3183   	fcall	i1_I2C_MasterGetRxData
 11754  0356  00FA               	movwf	??i1_I2C_DO_RX
 11755  0357  0021               	movlb	1	; select bank1
 11756  0358  0837               	movf	(low ((_I2C_Status| 0+23)))^(0+128),w
 11757  0359  0086               	movwf	6
 11758  035A  0187               	clrf	7
 11759  035B  087A               	movf	??i1_I2C_DO_RX,w
 11760  035C  0081               	movwf	1
 11761  035D  3001               	movlw	1
 11762  035E  00FA               	movwf	??i1_I2C_DO_RX
 11763  035F  087A               	movf	??i1_I2C_DO_RX,w
 11764  0360  07B7               	addwf	(low ((_I2C_Status| 0+23)))^(0+128),f
 11765                           
 11766                           ;i2c_master.c: 381: if(--I2C_Status.data_length)
 11767  0361  3001               	movlw	1
 11768  0362  02B8               	subwf	(_I2C_Status^(0+128)+24),f
 11769  0363  3000               	movlw	0
 11770  0364  3BB9               	subwfb	((_I2C_Status+1)^(0+128)+24),f
 11771  0365  0838               	movf	(_I2C_Status^(0+128)+24),w
 11772  0366  0439               	iorwf	((_I2C_Status+1)^(0+128)+24),w
 11773  0367  1903               	btfsc	3,2
 11774  0368  2B6D               	goto	i1l403
 11775                           
 11776                           ;i2c_master.c: 382: {
 11777                           ;i2c_master.c: 383: I2C_MasterSendAck();
 11778  0369  318E  2691         	fcall	i1_I2C_MasterSendAck
 11779                           
 11780                           ;i2c_master.c: 384: return I2C_RCEN;
 11781  036B  3005               	movlw	5
 11782                           
 11783                           ;i2c_master.c: 385: }
 11784  036C  0008               	return
 11785  036D                     i1l403:	
 11786                           
 11787                           ;i2c_master.c: 386: else
 11788                           ;i2c_master.c: 387: {
 11789                           ;i2c_master.c: 388: I2C_Status.bufferFree = 1;
 11790  036D  15BC               	bsf	(_I2C_Status^(0+128)+28),3
 11791                           
 11792                           ;i2c_master.c: 389: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
 11793  036E  2B75               	goto	i1l5757
 11794  036F                     i1l5747:	
 11795                           ;i2c_master.c: 390: {
 11796                           ;i2c_master.c: 391: case I2C_RESTART_WRITE:
 11797                           
 11798                           
 11799                           ;i2c_master.c: 392: case I2C_RESTART_READ:
 11800                           ;i2c_master.c: 393: return I2C_DO_RX_NACK_RESTART();
 11801  036F  318E  26AD         	fcall	i1_I2C_DO_RX_NACK_RESTART
 11802  0371  0008               	return
 11803  0372                     i1l5751:	
 11804                           ;i2c_master.c: 395: case I2C_CONTINUE:
 11805                           
 11806                           ;i2c_master.c: 394: default:
 11807                           
 11808                           
 11809                           ;i2c_master.c: 396: case I2C_STOP:
 11810                           ;i2c_master.c: 397: return I2C_DO_RX_NACK_STOP();
 11811  0372  318E  26A9         	fcall	i1_I2C_DO_RX_NACK_STOP
 11812                           
 11813                           ;i2c_master.c: 398: }
 11814  0374  0008               	return
 11815  0375                     i1l5757:	
 11816  0375  0021               	movlb	1	; select bank1
 11817  0376  082C               	movf	(low ((_I2C_Status| 0+12)))^(0+128),w
 11818  0377  00FA               	movwf	??i1_I2C_DO_RX
 11819  0378  087A               	movf	??i1_I2C_DO_RX,w
 11820  0379  00F9               	movwf	i1I2C_CallbackReturnReset@funPtr
 11821  037A  0821               	movf	(_I2C_Status+1)^(0+128),w
 11822  037B  008A               	movwf	10
 11823  037C  0820               	movf	_I2C_Status^(0+128),w
 11824  037D  000A               	callw
 11825  037E  3183               	pagesel	$
 11826                           
 11827                           ; Switch size 1, requested type "space"
 11828                           ; Number of cases is 4, Range of values is 1 to 4
 11829                           ; switch strategies available:
 11830                           ; Name         Instructions Cycles
 11831                           ; simple_byte           13     7 (average)
 11832                           ; direct_byte           17     9 (fixed)
 11833                           ; jumptable            263     9 (fixed)
 11834                           ;	Chosen strategy is simple_byte
 11835  037F  3A01               	xorlw	1	; case 1
 11836  0380  1903               	skipnz
 11837  0381  2B72               	goto	i1l5751
 11838  0382  3A03               	xorlw	3	; case 2
 11839  0383  1903               	skipnz
 11840  0384  2B6F               	goto	i1l5747
 11841  0385  3A01               	xorlw	1	; case 3
 11842  0386  1903               	skipnz
 11843  0387  2B6F               	goto	i1l5747
 11844  0388  3A07               	xorlw	7	; case 4
 11845  0389  1903               	skipnz
 11846  038A  2B72               	goto	i1l5751
 11847  038B  2B72               	goto	i1l5751
 11848  038C  0008               	return
 11849  038D                     __end_ofi1_I2C_DO_RX:	
 11850                           
 11851                           	psect	text93
 11852  024C                     __ptext93:	
 11853 ;; *************** function i1_I2C_DO_TX *****************
 11854 ;; Defined at:
 11855 ;;		line 354 in file "mcc_generated_files/i2c_master.c"
 11856 ;; Parameters:    Size  Location     Type
 11857 ;;		None
 11858 ;; Auto vars:     Size  Location     Type
 11859 ;;		None
 11860 ;; Return value:  Size  Location     Type
 11861 ;;                  1    wreg      enum E12103
 11862 ;; Registers used:
 11863 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11864 ;; Tracked objects:
 11865 ;;		On entry : 0/0
 11866 ;;		On exit  : 0/0
 11867 ;;		Unchanged: 0/0
 11868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11870 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11871 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11872 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11873 ;;Total ram usage:        3 bytes
 11874 ;; Hardware stack levels used:    1
 11875 ;; Hardware stack levels required when called:    3
 11876 ;; This function calls:
 11877 ;;		Absolute function
 11878 ;;		i1_I2C_CallbackReturnReset
 11879 ;;		i1_I2C_CallbackReturnStop
 11880 ;;		i1_I2C_DO_SEND_RESTART_READ
 11881 ;;		i1_I2C_DO_SEND_RESTART_WRITE
 11882 ;;		i1_I2C_DO_SEND_STOP
 11883 ;;		i1_I2C_MasterIsNack
 11884 ;;		i1_I2C_MasterSendTxData
 11885 ;;		i1_rd1RegCompleteHandler
 11886 ;;		i1_rd2RegCompleteHandler
 11887 ;;		i1_rdBlkRegCompleteHandler
 11888 ;;		i1_wr1RegCompleteHandler
 11889 ;;		i1_wr2RegCompleteHandler
 11890 ;; This function is called by:
 11891 ;; This function uses a non-reentrant model
 11892 ;;
 11893                           
 11894                           
 11895                           ;psect for function i1_I2C_DO_TX
 11896  024C                     i1_I2C_DO_TX:	
 11897  024C                     i1l5703:	
 11898                           ;incstack = 0
 11899 ;; hardware stack exceeded
 11900                           ; Regs used in i1_I2C_DO_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11901                           
 11902                           
 11903                           ;i2c_master.c: 356: if(I2C_MasterIsNack())
 11904  024C  318E  26DD  3182   	fcall	i1_I2C_MasterIsNack
 11905  024F  3A00               	xorlw	0
 11906  0250  1D03               	btfss	3,2
 11907  0251  2A5C               	goto	i1l5721
 11908  0252  2A78               	goto	i1l387
 11909  0253                     i1l5707:	
 11910                           ;i2c_master.c: 359: {
 11911                           ;i2c_master.c: 360: case I2C_RESTART_READ:
 11912                           
 11913                           ;i2c_master.c: 357: {
 11914                           ;i2c_master.c: 358: switch(I2C_Status.callbackTable[I2C_DATA_NACK](I2C_Status.callbackPa
      +                          yload[I2C_DATA_NACK]))
 11915                           
 11916                           
 11917                           ;i2c_master.c: 361: return I2C_DO_SEND_RESTART_READ();
 11918  0253  318E  2695         	fcall	i1_I2C_DO_SEND_RESTART_READ
 11919  0255  0008               	return
 11920  0256                     i1l5711:	
 11921                           ;i2c_master.c: 362: case I2C_RESTART_WRITE:
 11922                           
 11923                           
 11924                           ;i2c_master.c: 363: return I2C_DO_SEND_RESTART_WRITE();
 11925  0256  318E  2699         	fcall	i1_I2C_DO_SEND_RESTART_WRITE
 11926  0258  0008               	return
 11927  0259                     i1l5715:	
 11928                           ;i2c_master.c: 365: case I2C_CONTINUE:
 11929                           
 11930                           ;i2c_master.c: 364: default:
 11931                           
 11932                           
 11933                           ;i2c_master.c: 366: case I2C_STOP:
 11934                           ;i2c_master.c: 367: return I2C_DO_SEND_STOP();
 11935  0259  318E  26A1         	fcall	i1_I2C_DO_SEND_STOP
 11936                           
 11937                           ;i2c_master.c: 368: }
 11938  025B  0008               	return
 11939  025C                     i1l5721:	
 11940  025C  0021               	movlb	1	; select bank1
 11941  025D  082F               	movf	(low ((_I2C_Status| 0+15)))^(0+128),w
 11942  025E  00FA               	movwf	??i1_I2C_DO_TX
 11943  025F  087A               	movf	??i1_I2C_DO_TX,w
 11944  0260  00F9               	movwf	i1I2C_CallbackReturnReset@funPtr
 11945  0261  3006               	movlw	6
 11946  0262  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
 11947  0263  0086               	movwf	6
 11948  0264  0187               	clrf	7
 11949  0265  3F41               	moviw [1]fsr1
 11950  0266  008A               	movwf	10
 11951  0267  3F40               	moviw [0]fsr1
 11952  0268  000A               	callw
 11953  0269  3182               	pagesel	$
 11954                           
 11955                           ; Switch size 1, requested type "space"
 11956                           ; Number of cases is 4, Range of values is 1 to 4
 11957                           ; switch strategies available:
 11958                           ; Name         Instructions Cycles
 11959                           ; simple_byte           13     7 (average)
 11960                           ; direct_byte           17     9 (fixed)
 11961                           ; jumptable            263     9 (fixed)
 11962                           ;	Chosen strategy is simple_byte
 11963  026A  3A01               	xorlw	1	; case 1
 11964  026B  1903               	skipnz
 11965  026C  2A59               	goto	i1l5715
 11966  026D  3A03               	xorlw	3	; case 2
 11967  026E  1903               	skipnz
 11968  026F  2A53               	goto	i1l5707
 11969  0270  3A01               	xorlw	1	; case 3
 11970  0271  1903               	skipnz
 11971  0272  2A56               	goto	i1l5711
 11972  0273  3A07               	xorlw	7	; case 4
 11973  0274  1903               	skipnz
 11974  0275  2A59               	goto	i1l5715
 11975  0276  2A59               	goto	i1l5715
 11976                           
 11977                           ;i2c_master.c: 369: }
 11978  0277  0008               	return
 11979  0278                     i1l387:	
 11980                           
 11981                           ;i2c_master.c: 370: else
 11982                           ;i2c_master.c: 371: {
 11983                           ;i2c_master.c: 372: I2C_Status.addressNackCheck = 0;
 11984  0278  0021               	movlb	1	; select bank1
 11985  0279  103C               	bcf	(_I2C_Status^(0+128)+28),0
 11986                           
 11987                           ;i2c_master.c: 373: I2C_MasterSendTxData(*I2C_Status.data_ptr++);
 11988  027A  3017               	movlw	23
 11989  027B  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
 11990  027C  0086               	movwf	6
 11991  027D  0187               	clrf	7
 11992  027E  3F40               	moviw [0]fsr1
 11993  027F  0084               	movwf	4
 11994  0280  0185               	clrf	5
 11995  0281  0A81               	incf	1,f
 11996  0282  0800               	movf	0,w
 11997  0283  318E  26C9  3182   	fcall	i1_I2C_MasterSendTxData
 11998                           
 11999                           ;i2c_master.c: 374: return (--I2C_Status.data_length)?I2C_TX:I2C_TX_EMPTY;
 12000  0286  3001               	movlw	1
 12001  0287  0021               	movlb	1	; select bank1
 12002  0288  02B8               	subwf	(_I2C_Status^(0+128)+24),f
 12003  0289  3000               	movlw	0
 12004  028A  3BB9               	subwfb	((_I2C_Status+1)^(0+128)+24),f
 12005  028B  0838               	movf	(_I2C_Status^(0+128)+24),w
 12006  028C  0439               	iorwf	((_I2C_Status+1)^(0+128)+24),w
 12007  028D  1D03               	btfss	3,2
 12008  028E  2A91               	goto	i1l5729
 12009  028F  3006               	movlw	6
 12010  0290  2A92               	goto	L2
 12011  0291                     i1l5729:	
 12012  0291  3003               	movlw	3
 12013  0292                     L2:	
 12014  0292  00FB               	movwf	i1_I2C_DO_TX$794
 12015  0293  3000               	movlw	0
 12016  0294  00FC               	movwf	i1_I2C_DO_TX$794+1
 12017  0295  087B               	movf	i1_I2C_DO_TX$794,w
 12018  0296  0008               	return
 12019  0297                     __end_ofi1_I2C_DO_TX:	
 12020                           
 12021                           	psect	text94
 12022  0F2B                     __ptext94:	
 12023 ;; *************** function i1_I2C_DO_SEND_ADR_WRITE *****************
 12024 ;; Defined at:
 12025 ;;		line 347 in file "mcc_generated_files/i2c_master.c"
 12026 ;; Parameters:    Size  Location     Type
 12027 ;;		None
 12028 ;; Auto vars:     Size  Location     Type
 12029 ;;		None
 12030 ;; Return value:  Size  Location     Type
 12031 ;;                  1    wreg      enum E12103
 12032 ;; Registers used:
 12033 ;;		wreg, status,2, status,0, pclath, cstack
 12034 ;; Tracked objects:
 12035 ;;		On entry : 0/0
 12036 ;;		On exit  : 0/0
 12037 ;;		Unchanged: 0/0
 12038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12042 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12043 ;;Total ram usage:        0 bytes
 12044 ;; Hardware stack levels used:    1
 12045 ;; Hardware stack levels required when called:    1
 12046 ;; This function calls:
 12047 ;;		i1_I2C_MasterSendTxData
 12048 ;; This function is called by:
 12049 ;; This function uses a non-reentrant model
 12050 ;;
 12051                           
 12052                           
 12053                           ;psect for function i1_I2C_DO_SEND_ADR_WRITE
 12054  0F2B                     i1_I2C_DO_SEND_ADR_WRITE:	
 12055  0F2B                     i1l2727:	
 12056                           ;incstack = 0
 12057 ;; hardware stack exceeded
 12058                           ; Regs used in i1_I2C_DO_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 12059                           
 12060                           
 12061                           ;i2c_master.c: 349: I2C_Status.addressNackCheck = 1;
 12062  0F2B  0021               	movlb	1	; select bank1
 12063  0F2C  143C               	bsf	(_I2C_Status^(0+128)+28),0
 12064                           
 12065                           ;i2c_master.c: 350: I2C_MasterSendTxData(I2C_Status.address << 1);
 12066  0F2D  3536               	lslf	(_I2C_Status^(0+128)+22),w
 12067  0F2E  318E  26C9         	fcall	i1_I2C_MasterSendTxData
 12068                           
 12069                           ;i2c_master.c: 351: return I2C_TX;
 12070  0F30  3003               	movlw	3
 12071  0F31  0008               	return
 12072  0F32                     __end_ofi1_I2C_DO_SEND_ADR_WRITE:	
 12073                           
 12074                           	psect	text95
 12075  0F41                     __ptext95:	
 12076 ;; *************** function i1_I2C_DO_SEND_ADR_READ *****************
 12077 ;; Defined at:
 12078 ;;		line 340 in file "mcc_generated_files/i2c_master.c"
 12079 ;; Parameters:    Size  Location     Type
 12080 ;;		None
 12081 ;; Auto vars:     Size  Location     Type
 12082 ;;		None
 12083 ;; Return value:  Size  Location     Type
 12084 ;;                  1    wreg      enum E12103
 12085 ;; Registers used:
 12086 ;;		wreg, status,2, status,0, pclath, cstack
 12087 ;; Tracked objects:
 12088 ;;		On entry : 0/0
 12089 ;;		On exit  : 0/0
 12090 ;;		Unchanged: 0/0
 12091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12095 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12096 ;;Total ram usage:        0 bytes
 12097 ;; Hardware stack levels used:    1
 12098 ;; Hardware stack levels required when called:    1
 12099 ;; This function calls:
 12100 ;;		i1_I2C_MasterSendTxData
 12101 ;; This function is called by:
 12102 ;; This function uses a non-reentrant model
 12103 ;;
 12104                           
 12105                           
 12106                           ;psect for function i1_I2C_DO_SEND_ADR_READ
 12107  0F41                     i1_I2C_DO_SEND_ADR_READ:	
 12108  0F41                     i1l2719:	
 12109                           ;incstack = 0
 12110 ;; hardware stack exceeded
 12111                           ; Regs used in i1_I2C_DO_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 12112                           
 12113                           
 12114                           ;i2c_master.c: 342: I2C_Status.addressNackCheck = 1;
 12115  0F41  0021               	movlb	1	; select bank1
 12116  0F42  143C               	bsf	(_I2C_Status^(0+128)+28),0
 12117                           
 12118                           ;i2c_master.c: 343: I2C_MasterSendTxData(I2C_Status.address << 1 | 1);
 12119  0F43  1403               	setc
 12120  0F44  0D36               	rlf	(_I2C_Status^(0+128)+22),w
 12121  0F45  318E  26C9         	fcall	i1_I2C_MasterSendTxData
 12122                           
 12123                           ;i2c_master.c: 344: return I2C_RCEN;
 12124  0F47  3005               	movlw	5
 12125  0F48  0008               	return
 12126  0F49                     __end_ofi1_I2C_DO_SEND_ADR_READ:	
 12127                           
 12128                           	psect	text96
 12129  0ECE                     __ptext96:	
 12130 ;; *************** function i1_I2C_DO_IDLE *****************
 12131 ;; Defined at:
 12132 ;;		line 333 in file "mcc_generated_files/i2c_master.c"
 12133 ;; Parameters:    Size  Location     Type
 12134 ;;		None
 12135 ;; Auto vars:     Size  Location     Type
 12136 ;;		None
 12137 ;; Return value:  Size  Location     Type
 12138 ;;                  1    wreg      enum E12103
 12139 ;; Registers used:
 12140 ;;		wreg, status,2
 12141 ;; Tracked objects:
 12142 ;;		On entry : 0/0
 12143 ;;		On exit  : 0/0
 12144 ;;		Unchanged: 0/0
 12145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12149 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12150 ;;Total ram usage:        0 bytes
 12151 ;; Hardware stack levels used:    1
 12152 ;; This function calls:
 12153 ;;		Nothing
 12154 ;; This function is called by:
 12155 ;; This function uses a non-reentrant model
 12156 ;;
 12157                           
 12158                           
 12159                           ;psect for function i1_I2C_DO_IDLE
 12160  0ECE                     i1_I2C_DO_IDLE:	
 12161  0ECE                     i1l2711:	
 12162                           ;incstack = 0
 12163 ;; hardware stack exceeded
 12164                           ; Regs used in i1_I2C_DO_IDLE: [wreg+status,2]
 12165                           
 12166                           
 12167                           ;i2c_master.c: 335: I2C_Status.busy = 0;
 12168  0ECE  0021               	movlb	1	; select bank1
 12169  0ECF  10BC               	bcf	(_I2C_Status^(0+128)+28),1
 12170                           
 12171                           ;i2c_master.c: 336: I2C_Status.error = I2C_NOERR;
 12172  0ED0  01BB               	clrf	(_I2C_Status^(0+128)+27)
 12173                           
 12174                           ;i2c_master.c: 337: return I2C_RESET;
 12175  0ED1  300E               	movlw	14
 12176  0ED2  0008               	return
 12177  0ED3                     __end_ofi1_I2C_DO_IDLE:	
 12178                           
 12179                           	psect	text97
 12180  0589                     __ptext97:	
 12181 ;; *************** function i1_I2C_DO_TX_EMPTY *****************
 12182 ;; Defined at:
 12183 ;;		line 409 in file "mcc_generated_files/i2c_master.c"
 12184 ;; Parameters:    Size  Location     Type
 12185 ;;		None
 12186 ;; Auto vars:     Size  Location     Type
 12187 ;;		None
 12188 ;; Return value:  Size  Location     Type
 12189 ;;                  1    wreg      enum E12103
 12190 ;; Registers used:
 12191 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12192 ;; Tracked objects:
 12193 ;;		On entry : 0/0
 12194 ;;		On exit  : 0/0
 12195 ;;		Unchanged: 0/0
 12196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12199 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12200 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12201 ;;Total ram usage:        1 bytes
 12202 ;; Hardware stack levels used:    1
 12203 ;; Hardware stack levels required when called:    3
 12204 ;; This function calls:
 12205 ;;		Absolute function
 12206 ;;		i1_I2C_CallbackReturnReset
 12207 ;;		i1_I2C_CallbackReturnStop
 12208 ;;		i1_I2C_DO_SEND_RESTART
 12209 ;;		i1_I2C_DO_SEND_STOP
 12210 ;;		i1_I2C_MasterSetIrq
 12211 ;;		i1_rd1RegCompleteHandler
 12212 ;;		i1_rd2RegCompleteHandler
 12213 ;;		i1_rdBlkRegCompleteHandler
 12214 ;;		i1_wr1RegCompleteHandler
 12215 ;;		i1_wr2RegCompleteHandler
 12216 ;; This function is called by:
 12217 ;; This function uses a non-reentrant model
 12218 ;;
 12219                           
 12220                           
 12221                           ;psect for function i1_I2C_DO_TX_EMPTY
 12222  0589                     i1_I2C_DO_TX_EMPTY:	
 12223  0589                     i1l5759:	
 12224                           ;incstack = 0
 12225 ;; hardware stack exceeded
 12226                           ; Regs used in i1_I2C_DO_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12227                           
 12228                           
 12229                           ;i2c_master.c: 411: I2C_Status.bufferFree = 1;
 12230  0589  0021               	movlb	1	; select bank1
 12231  058A  15BC               	bsf	(_I2C_Status^(0+128)+28),3
 12232                           
 12233                           ;i2c_master.c: 412: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
 12234  058B  2D96               	goto	i1l5777
 12235  058C                     i1l5761:	
 12236                           ;i2c_master.c: 413: {
 12237                           ;i2c_master.c: 414: case I2C_RESTART_READ:
 12238                           
 12239                           
 12240                           ;i2c_master.c: 415: case I2C_RESTART_WRITE:
 12241                           ;i2c_master.c: 416: return I2C_DO_SEND_RESTART();
 12242  058C  318E  269D         	fcall	i1_I2C_DO_SEND_RESTART
 12243  058E  0008               	return
 12244  058F                     i1l5765:	
 12245                           ;i2c_master.c: 417: case I2C_CONTINUE:
 12246                           
 12247                           
 12248                           ;i2c_master.c: 418: I2C_MasterSetIrq();
 12249  058F  318E  2662         	fcall	i1_I2C_MasterSetIrq
 12250                           
 12251                           ;i2c_master.c: 419: return I2C_TX;
 12252  0591  3003               	movlw	3
 12253  0592  0008               	return
 12254  0593                     i1l5771:	
 12255                           ;i2c_master.c: 421: case I2C_STOP:
 12256                           
 12257                           ;i2c_master.c: 420: default:
 12258                           
 12259                           
 12260                           ;i2c_master.c: 422: return I2C_DO_SEND_STOP();
 12261  0593  318E  26A1         	fcall	i1_I2C_DO_SEND_STOP
 12262                           
 12263                           ;i2c_master.c: 423: }
 12264  0595  0008               	return
 12265  0596                     i1l5777:	
 12266  0596  0021               	movlb	1	; select bank1
 12267  0597  082C               	movf	(low ((_I2C_Status| 0+12)))^(0+128),w
 12268  0598  00FA               	movwf	??i1_I2C_DO_TX_EMPTY
 12269  0599  087A               	movf	??i1_I2C_DO_TX_EMPTY,w
 12270  059A  00F9               	movwf	i1I2C_CallbackReturnReset@funPtr
 12271  059B  0821               	movf	(_I2C_Status+1)^(0+128),w
 12272  059C  008A               	movwf	10
 12273  059D  0820               	movf	_I2C_Status^(0+128),w
 12274  059E  000A               	callw
 12275  059F  3185               	pagesel	$
 12276                           
 12277                           ; Switch size 1, requested type "space"
 12278                           ; Number of cases is 4, Range of values is 1 to 4
 12279                           ; switch strategies available:
 12280                           ; Name         Instructions Cycles
 12281                           ; simple_byte           13     7 (average)
 12282                           ; direct_byte           17     9 (fixed)
 12283                           ; jumptable            263     9 (fixed)
 12284                           ;	Chosen strategy is simple_byte
 12285  05A0  3A01               	xorlw	1	; case 1
 12286  05A1  1903               	skipnz
 12287  05A2  2D93               	goto	i1l5771
 12288  05A3  3A03               	xorlw	3	; case 2
 12289  05A4  1903               	skipnz
 12290  05A5  2D8C               	goto	i1l5761
 12291  05A6  3A01               	xorlw	1	; case 3
 12292  05A7  1903               	skipnz
 12293  05A8  2D8C               	goto	i1l5761
 12294  05A9  3A07               	xorlw	7	; case 4
 12295  05AA  1903               	skipnz
 12296  05AB  2D8F               	goto	i1l5765
 12297  05AC  2D93               	goto	i1l5771
 12298  05AD  0008               	return
 12299  05AE                     __end_ofi1_I2C_DO_TX_EMPTY:	
 12300                           
 12301                           	psect	text98
 12302  0E62                     __ptext98:	
 12303 ;; *************** function i1_I2C_MasterSetIrq *****************
 12304 ;; Defined at:
 12305 ;;		line 645 in file "mcc_generated_files/i2c_master.c"
 12306 ;; Parameters:    Size  Location     Type
 12307 ;;		None
 12308 ;; Auto vars:     Size  Location     Type
 12309 ;;		None
 12310 ;; Return value:  Size  Location     Type
 12311 ;;                  1    wreg      void 
 12312 ;; Registers used:
 12313 ;;		None
 12314 ;; Tracked objects:
 12315 ;;		On entry : 0/0
 12316 ;;		On exit  : 0/0
 12317 ;;		Unchanged: 0/0
 12318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12323 ;;Total ram usage:        0 bytes
 12324 ;; Hardware stack levels used:    1
 12325 ;; This function calls:
 12326 ;;		Nothing
 12327 ;; This function is called by:
 12328 ;;		i1_I2C_DO_TX_EMPTY
 12329 ;; This function uses a non-reentrant model
 12330 ;;
 12331                           
 12332                           
 12333                           ;psect for function i1_I2C_MasterSetIrq
 12334  0E62                     i1_I2C_MasterSetIrq:	
 12335                           
 12336                           ;i2c_master.c: 647: PIR1bits.SSP1IF = 1;
 12337                           
 12338                           ;incstack = 0
 12339 ;; hardware stack exceeded
 12340                           ; Regs used in i1_I2C_MasterSetIrq: []
 12341  0E62  0020               	movlb	0	; select bank0
 12342  0E63  1590               	bsf	16,3	;volatile
 12343  0E64  0008               	return
 12344  0E65                     __end_ofi1_I2C_MasterSetIrq:	
 12345                           
 12346                           	psect	text99
 12347  0EDD                     __ptext99:	
 12348 ;; *************** function i1_I2C_MasterIsNack *****************
 12349 ;; Defined at:
 12350 ;;		line 598 in file "mcc_generated_files/i2c_master.c"
 12351 ;; Parameters:    Size  Location     Type
 12352 ;;		None
 12353 ;; Auto vars:     Size  Location     Type
 12354 ;;		None
 12355 ;; Return value:  Size  Location     Type
 12356 ;;                  1    wreg      unsigned char 
 12357 ;; Registers used:
 12358 ;;		wreg, status,2, status,0
 12359 ;; Tracked objects:
 12360 ;;		On entry : 0/0
 12361 ;;		On exit  : 0/0
 12362 ;;		Unchanged: 0/0
 12363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12367 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12368 ;;Total ram usage:        0 bytes
 12369 ;; Hardware stack levels used:    1
 12370 ;; This function calls:
 12371 ;;		Nothing
 12372 ;; This function is called by:
 12373 ;;		i1_I2C_MasterFsm
 12374 ;;		i1_I2C_DO_TX
 12375 ;; This function uses a non-reentrant model
 12376 ;;
 12377                           
 12378                           
 12379                           ;psect for function i1_I2C_MasterIsNack
 12380  0EDD                     i1_I2C_MasterIsNack:	
 12381                           
 12382                           ;i2c_master.c: 600: return SSP1CON2bits.ACKSTAT;
 12383                           
 12384                           ;incstack = 0
 12385 ;; hardware stack exceeded
 12386                           ; Regs used in i1_I2C_MasterIsNack: [wreg+status,2+status,0]
 12387  0EDD  0024               	movlb	4	; select bank4
 12388  0EDE  0E16               	swapf	22,w	;volatile
 12389  0EDF  0C89               	rrf	9,f
 12390  0EE0  0C89               	rrf	9,f
 12391  0EE1  3901               	andlw	1
 12392  0EE2  0008               	return
 12393  0EE3                     __end_ofi1_I2C_MasterIsNack:	
 12394                           
 12395                           	psect	text100
 12396  0EC9                     __ptext100:	
 12397 ;; *************** function i1_I2C_MasterSendTxData *****************
 12398 ;; Defined at:
 12399 ;;		line 568 in file "mcc_generated_files/i2c_master.c"
 12400 ;; Parameters:    Size  Location     Type
 12401 ;;  data            1    wreg     unsigned char 
 12402 ;; Auto vars:     Size  Location     Type
 12403 ;;  data            1    0[COMMON] unsigned char 
 12404 ;; Return value:  Size  Location     Type
 12405 ;;                  1    wreg      void 
 12406 ;; Registers used:
 12407 ;;		wreg
 12408 ;; Tracked objects:
 12409 ;;		On entry : 0/0
 12410 ;;		On exit  : 0/0
 12411 ;;		Unchanged: 0/0
 12412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12414 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12416 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12417 ;;Total ram usage:        1 bytes
 12418 ;; Hardware stack levels used:    1
 12419 ;; This function calls:
 12420 ;;		Nothing
 12421 ;; This function is called by:
 12422 ;;		i1_I2C_DO_SEND_ADR_READ
 12423 ;;		i1_I2C_DO_SEND_ADR_WRITE
 12424 ;;		i1_I2C_DO_TX
 12425 ;; This function uses a non-reentrant model
 12426 ;;
 12427                           
 12428                           
 12429                           ;psect for function i1_I2C_MasterSendTxData
 12430  0EC9                     i1_I2C_MasterSendTxData:	
 12431                           
 12432                           ;incstack = 0
 12433 ;; hardware stack exceeded
 12434                           ; Regs used in i1_I2C_MasterSendTxData: [wreg]
 12435                           ;i1I2C_MasterSendTxData@data stored from wreg
 12436  0EC9  00F0               	movwf	i1I2C_MasterSendTxData@data
 12437                           
 12438                           ;i2c_master.c: 570: SSP1BUF = data;
 12439  0ECA  0870               	movf	i1I2C_MasterSendTxData@data,w
 12440  0ECB  0024               	movlb	4	; select bank4
 12441  0ECC  0091               	movwf	17	;volatile
 12442  0ECD  0008               	return
 12443  0ECE                     __end_ofi1_I2C_MasterSendTxData:	
 12444                           
 12445                           	psect	text101
 12446  0E91                     __ptext101:	
 12447 ;; *************** function i1_I2C_MasterSendAck *****************
 12448 ;; Defined at:
 12449 ;;		line 603 in file "mcc_generated_files/i2c_master.c"
 12450 ;; Parameters:    Size  Location     Type
 12451 ;;		None
 12452 ;; Auto vars:     Size  Location     Type
 12453 ;;		None
 12454 ;; Return value:  Size  Location     Type
 12455 ;;                  1    wreg      void 
 12456 ;; Registers used:
 12457 ;;		None
 12458 ;; Tracked objects:
 12459 ;;		On entry : 0/0
 12460 ;;		On exit  : 0/0
 12461 ;;		Unchanged: 0/0
 12462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12467 ;;Total ram usage:        0 bytes
 12468 ;; Hardware stack levels used:    1
 12469 ;; This function calls:
 12470 ;;		Nothing
 12471 ;; This function is called by:
 12472 ;;		i1_I2C_DO_RX
 12473 ;;		i1_I2C_DO_RX_ACK
 12474 ;; This function uses a non-reentrant model
 12475 ;;
 12476                           
 12477                           
 12478                           ;psect for function i1_I2C_MasterSendAck
 12479  0E91                     i1_I2C_MasterSendAck:	
 12480                           
 12481                           ;i2c_master.c: 605: SSP1CON2bits.ACKDT = 0;
 12482                           
 12483                           ;incstack = 0
 12484 ;; hardware stack exceeded
 12485                           ; Regs used in i1_I2C_MasterSendAck: []
 12486  0E91  0024               	movlb	4	; select bank4
 12487  0E92  1296               	bcf	22,5	;volatile
 12488                           
 12489                           ;i2c_master.c: 606: SSP1CON2bits.ACKEN = 1;
 12490  0E93  1616               	bsf	22,4	;volatile
 12491  0E94  0008               	return
 12492  0E95                     __end_ofi1_I2C_MasterSendAck:	
 12493                           
 12494                           	psect	text102
 12495  0E5F                     __ptext102:	
 12496 ;; *************** function i1_I2C_MasterGetRxData *****************
 12497 ;; Defined at:
 12498 ;;		line 563 in file "mcc_generated_files/i2c_master.c"
 12499 ;; Parameters:    Size  Location     Type
 12500 ;;		None
 12501 ;; Auto vars:     Size  Location     Type
 12502 ;;		None
 12503 ;; Return value:  Size  Location     Type
 12504 ;;                  1    wreg      unsigned char 
 12505 ;; Registers used:
 12506 ;;		wreg
 12507 ;; Tracked objects:
 12508 ;;		On entry : 0/0
 12509 ;;		On exit  : 0/0
 12510 ;;		Unchanged: 0/0
 12511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12516 ;;Total ram usage:        0 bytes
 12517 ;; Hardware stack levels used:    1
 12518 ;; This function calls:
 12519 ;;		Nothing
 12520 ;; This function is called by:
 12521 ;;		i1_I2C_DO_RX
 12522 ;; This function uses a non-reentrant model
 12523 ;;
 12524                           
 12525                           
 12526                           ;psect for function i1_I2C_MasterGetRxData
 12527  0E5F                     i1_I2C_MasterGetRxData:	
 12528                           
 12529                           ;i2c_master.c: 565: return SSP1BUF;
 12530                           
 12531                           ;incstack = 0
 12532 ;; hardware stack exceeded
 12533                           ; Regs used in i1_I2C_MasterGetRxData: [wreg]
 12534  0E5F  0024               	movlb	4	; select bank4
 12535  0E60  0811               	movf	17,w	;volatile
 12536  0E61  0008               	return
 12537  0E62                     __end_ofi1_I2C_MasterGetRxData:	
 12538                           
 12539                           	psect	text103
 12540  0E8D                     __ptext103:	
 12541 ;; *************** function i1_I2C_MasterSendNack *****************
 12542 ;; Defined at:
 12543 ;;		line 609 in file "mcc_generated_files/i2c_master.c"
 12544 ;; Parameters:    Size  Location     Type
 12545 ;;		None
 12546 ;; Auto vars:     Size  Location     Type
 12547 ;;		None
 12548 ;; Return value:  Size  Location     Type
 12549 ;;                  1    wreg      void 
 12550 ;; Registers used:
 12551 ;;		None
 12552 ;; Tracked objects:
 12553 ;;		On entry : 0/0
 12554 ;;		On exit  : 0/0
 12555 ;;		Unchanged: 0/0
 12556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12561 ;;Total ram usage:        0 bytes
 12562 ;; Hardware stack levels used:    1
 12563 ;; This function calls:
 12564 ;;		Nothing
 12565 ;; This function is called by:
 12566 ;;		i1_I2C_DO_RX_NACK_STOP
 12567 ;;		i1_I2C_DO_RX_NACK_RESTART
 12568 ;; This function uses a non-reentrant model
 12569 ;;
 12570                           
 12571                           
 12572                           ;psect for function i1_I2C_MasterSendNack
 12573  0E8D                     i1_I2C_MasterSendNack:	
 12574                           
 12575                           ;i2c_master.c: 611: SSP1CON2bits.ACKDT = 1;
 12576                           
 12577                           ;incstack = 0
 12578 ;; hardware stack exceeded
 12579                           ; Regs used in i1_I2C_MasterSendNack: []
 12580  0E8D  0024               	movlb	4	; select bank4
 12581  0E8E  1696               	bsf	22,5	;volatile
 12582                           
 12583                           ;i2c_master.c: 612: SSP1CON2bits.ACKEN = 1;
 12584  0E8F  1616               	bsf	22,4	;volatile
 12585  0E90  0008               	return
 12586  0E91                     __end_ofi1_I2C_MasterSendNack:	
 12587                           
 12588                           	psect	text104
 12589  0E5C                     __ptext104:	
 12590 ;; *************** function i1_I2C_MasterStartRx *****************
 12591 ;; Defined at:
 12592 ;;		line 583 in file "mcc_generated_files/i2c_master.c"
 12593 ;; Parameters:    Size  Location     Type
 12594 ;;		None
 12595 ;; Auto vars:     Size  Location     Type
 12596 ;;		None
 12597 ;; Return value:  Size  Location     Type
 12598 ;;                  1    wreg      void 
 12599 ;; Registers used:
 12600 ;;		None
 12601 ;; Tracked objects:
 12602 ;;		On entry : 0/0
 12603 ;;		On exit  : 0/0
 12604 ;;		Unchanged: 0/0
 12605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12610 ;;Total ram usage:        0 bytes
 12611 ;; Hardware stack levels used:    1
 12612 ;; This function calls:
 12613 ;;		Nothing
 12614 ;; This function is called by:
 12615 ;;		i1_I2C_DO_RCEN
 12616 ;; This function uses a non-reentrant model
 12617 ;;
 12618                           
 12619                           
 12620                           ;psect for function i1_I2C_MasterStartRx
 12621  0E5C                     i1_I2C_MasterStartRx:	
 12622                           
 12623                           ;i2c_master.c: 585: SSP1CON2bits.RCEN = 1;
 12624                           
 12625                           ;incstack = 0
 12626 ;; hardware stack exceeded
 12627                           ; Regs used in i1_I2C_MasterStartRx: []
 12628  0E5C  0024               	movlb	4	; select bank4
 12629  0E5D  1596               	bsf	22,3	;volatile
 12630  0E5E  0008               	return
 12631  0E5F                     __end_ofi1_I2C_MasterStartRx:	
 12632                           
 12633                           	psect	text105
 12634  0E45                     __ptext105:	
 12635 ;; *************** function i1_I2C_CallbackReturnReset *****************
 12636 ;; Defined at:
 12637 ;;		line 525 in file "mcc_generated_files/i2c_master.c"
 12638 ;; Parameters:    Size  Location     Type
 12639 ;;  funPtr          1    9[COMMON] PTR void 
 12640 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 12641 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 12642 ;; Auto vars:     Size  Location     Type
 12643 ;;		None
 12644 ;; Return value:  Size  Location     Type
 12645 ;;                  1    wreg      enum E97
 12646 ;; Registers used:
 12647 ;;		wreg
 12648 ;; Tracked objects:
 12649 ;;		On entry : 0/0
 12650 ;;		On exit  : 0/0
 12651 ;;		Unchanged: 0/0
 12652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12653 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12656 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12657 ;;Total ram usage:        1 bytes
 12658 ;; Hardware stack levels used:    1
 12659 ;; This function calls:
 12660 ;;		Nothing
 12661 ;; This function is called by:
 12662 ;;		i1_I2C_Open
 12663 ;;		i1_I2C_DO_TX
 12664 ;;		i1_I2C_DO_RX
 12665 ;;		i1_I2C_DO_TX_EMPTY
 12666 ;;		i1_I2C_DO_ADDRESS_NACK
 12667 ;;		_I2C_DO_TX
 12668 ;;		_I2C_DO_RX
 12669 ;;		_I2C_DO_TX_EMPTY
 12670 ;;		_I2C_DO_ADDRESS_NACK
 12671 ;;		_I2C_DO_RX_EMPTY
 12672 ;; This function uses a non-reentrant model
 12673 ;;
 12674                           
 12675                           
 12676                           ;psect for function i1_I2C_CallbackReturnReset
 12677  0E45                     i1_I2C_CallbackReturnReset:	
 12678  0E45                     i1l2685:	
 12679                           ;incstack = 0
 12680 ;; hardware stack exceeded
 12681                           ; Regs used in i1_I2C_CallbackReturnReset: [wreg]
 12682                           
 12683                           
 12684                           ;i2c_master.c: 527: return I2C_RESET_LINK;
 12685  0E45  3005               	movlw	5
 12686  0E46  0008               	return
 12687  0E47                     __end_ofi1_I2C_CallbackReturnReset:	
 12688                           
 12689                           	psect	text106
 12690  0E43                     __ptext106:	
 12691 ;; *************** function i1_I2C_CallbackReturnStop *****************
 12692 ;; Defined at:
 12693 ;;		line 520 in file "mcc_generated_files/i2c_master.c"
 12694 ;; Parameters:    Size  Location     Type
 12695 ;;  funPtr          1    9[COMMON] PTR void 
 12696 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 12697 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 12698 ;; Auto vars:     Size  Location     Type
 12699 ;;		None
 12700 ;; Return value:  Size  Location     Type
 12701 ;;                  1    wreg      enum E97
 12702 ;; Registers used:
 12703 ;;		wreg
 12704 ;; Tracked objects:
 12705 ;;		On entry : 0/0
 12706 ;;		On exit  : 0/0
 12707 ;;		Unchanged: 0/0
 12708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12709 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12712 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12713 ;;Total ram usage:        1 bytes
 12714 ;; Hardware stack levels used:    1
 12715 ;; This function calls:
 12716 ;;		Nothing
 12717 ;; This function is called by:
 12718 ;;		i1_I2C_Open
 12719 ;;		i1_I2C_SetCallback
 12720 ;;		i1_I2C_DO_TX
 12721 ;;		i1_I2C_DO_RX
 12722 ;;		i1_I2C_DO_TX_EMPTY
 12723 ;;		i1_I2C_DO_ADDRESS_NACK
 12724 ;;		_I2C_DO_TX
 12725 ;;		_I2C_DO_RX
 12726 ;;		_I2C_DO_TX_EMPTY
 12727 ;;		_I2C_DO_ADDRESS_NACK
 12728 ;;		_I2C_DO_RX_EMPTY
 12729 ;; This function uses a non-reentrant model
 12730 ;;
 12731                           
 12732                           
 12733                           ;psect for function i1_I2C_CallbackReturnStop
 12734  0E43                     i1_I2C_CallbackReturnStop:	
 12735  0E43                     i1l2681:	
 12736                           ;incstack = 0
 12737 ;; hardware stack exceeded
 12738                           ; Regs used in i1_I2C_CallbackReturnStop: [wreg]
 12739                           
 12740                           
 12741                           ;i2c_master.c: 522: return I2C_STOP;
 12742  0E43  3001               	movlw	1
 12743  0E44  0008               	return
 12744  0E45                     __end_ofi1_I2C_CallbackReturnStop:	
 12745                           
 12746                           	psect	text107
 12747  06A3                     __ptext107:	
 12748 ;; *************** function i1_rdBlkRegCompleteHandler *****************
 12749 ;; Defined at:
 12750 ;;		line 170 in file "mcc_generated_files/examples/i2c_master_example.c"
 12751 ;; Parameters:    Size  Location     Type
 12752 ;;  ptr             1    9[COMMON] PTR void 
 12753 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 12754 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 12755 ;; Auto vars:     Size  Location     Type
 12756 ;;		None
 12757 ;; Return value:  Size  Location     Type
 12758 ;;                  1    wreg      enum E97
 12759 ;; Registers used:
 12760 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12761 ;; Tracked objects:
 12762 ;;		On entry : 0/0
 12763 ;;		On exit  : 0/0
 12764 ;;		Unchanged: 0/0
 12765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12766 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12769 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12770 ;;Total ram usage:        1 bytes
 12771 ;; Hardware stack levels used:    1
 12772 ;; Hardware stack levels required when called:    2
 12773 ;; This function calls:
 12774 ;;		i1_I2C_SetBuffer
 12775 ;;		i1_I2C_SetDataCompleteCallback
 12776 ;; This function is called by:
 12777 ;; This function uses a non-reentrant model
 12778 ;;
 12779                           
 12780                           
 12781                           ;psect for function i1_rdBlkRegCompleteHandler
 12782  06A3                     i1_rdBlkRegCompleteHandler:	
 12783  06A3                     i1l2639:	
 12784                           ;incstack = 0
 12785 ;; hardware stack exceeded
 12786                           ; Regs used in i1_rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 12787                           
 12788                           
 12789                           ;i2c_master_example.c: 172: I2C_SetBuffer(((i2c_buffer_t *)ptr)->data,((i2c_buffer_t*)pt
      +                          r)->len);
 12790  06A3  0879               	movf	i1rdBlkRegCompleteHandler@ptr,w
 12791  06A4  0086               	movwf	6
 12792  06A5  0187               	clrf	7
 12793  06A6  3F40               	moviw [0]fsr1
 12794  06A7  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 12795  06A8  3F41               	moviw [1]fsr1
 12796  06A9  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 12797  06AA  0879               	movf	i1rdBlkRegCompleteHandler@ptr,w
 12798  06AB  3E02               	addlw	2
 12799  06AC  0086               	movwf	6
 12800  06AD  0187               	clrf	7
 12801  06AE  0801               	movf	1,w
 12802  06AF  3187  27BB  3186   	fcall	i1_I2C_SetBuffer
 12803                           
 12804                           ;i2c_master_example.c: 173: I2C_SetDataCompleteCallback((0),(0));
 12805  06B2  3000               	movlw	0
 12806  06B3  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 12807  06B4  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 12808  06B5  01F7               	clrf	i1I2C_SetDataCompleteCallback@ptr
 12809  06B6  318F  27DC         	fcall	i1_I2C_SetDataCompleteCallback
 12810                           
 12811                           ;i2c_master_example.c: 174: return I2C_RESTART_READ;
 12812  06B8  3002               	movlw	2
 12813  06B9  0008               	return
 12814  06BA                     __end_ofi1_rdBlkRegCompleteHandler:	
 12815                           
 12816                           	psect	text108
 12817  077B                     __ptext108:	
 12818 ;; *************** function i1_wr1RegCompleteHandler *****************
 12819 ;; Defined at:
 12820 ;;		line 156 in file "mcc_generated_files/examples/i2c_master_example.c"
 12821 ;; Parameters:    Size  Location     Type
 12822 ;;  ptr             1    9[COMMON] PTR void 
 12823 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 12824 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 12825 ;; Auto vars:     Size  Location     Type
 12826 ;;		None
 12827 ;; Return value:  Size  Location     Type
 12828 ;;                  1    wreg      enum E97
 12829 ;; Registers used:
 12830 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12831 ;; Tracked objects:
 12832 ;;		On entry : 0/0
 12833 ;;		On exit  : 0/0
 12834 ;;		Unchanged: 0/0
 12835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12836 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12839 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12840 ;;Total ram usage:        1 bytes
 12841 ;; Hardware stack levels used:    1
 12842 ;; Hardware stack levels required when called:    2
 12843 ;; This function calls:
 12844 ;;		i1_I2C_SetBuffer
 12845 ;;		i1_I2C_SetDataCompleteCallback
 12846 ;; This function is called by:
 12847 ;;		i1_I2C_Write1ByteRegister
 12848 ;;		i1_I2C_DO_TX
 12849 ;;		i1_I2C_DO_RX
 12850 ;;		i1_I2C_DO_TX_EMPTY
 12851 ;;		i1_I2C_DO_ADDRESS_NACK
 12852 ;;		_I2C_DO_TX
 12853 ;;		_I2C_DO_RX
 12854 ;;		_I2C_DO_TX_EMPTY
 12855 ;;		_I2C_DO_ADDRESS_NACK
 12856 ;;		_I2C_DO_RX_EMPTY
 12857 ;; This function uses a non-reentrant model
 12858 ;;
 12859                           
 12860                           
 12861                           ;psect for function i1_wr1RegCompleteHandler
 12862  077B                     i1_wr1RegCompleteHandler:	
 12863  077B                     i1l2623:	
 12864                           ;incstack = 0
 12865 ;; hardware stack exceeded
 12866                           ; Regs used in i1_wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12867                           
 12868                           
 12869                           ;i2c_master_example.c: 158: I2C_SetBuffer(ptr,1);
 12870  077B  3001               	movlw	1
 12871  077C  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 12872  077D  3000               	movlw	0
 12873  077E  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 12874  077F  0879               	movf	i1wr1RegCompleteHandler@ptr,w
 12875  0780  3187  27BB  3187   	fcall	i1_I2C_SetBuffer
 12876                           
 12877                           ;i2c_master_example.c: 159: I2C_SetDataCompleteCallback((0),(0));
 12878  0783  3000               	movlw	0
 12879  0784  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 12880  0785  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 12881  0786  01F7               	clrf	i1I2C_SetDataCompleteCallback@ptr
 12882  0787  318F  27DC         	fcall	i1_I2C_SetDataCompleteCallback
 12883                           
 12884                           ;i2c_master_example.c: 160: return I2C_CONTINUE;
 12885  0789  3004               	movlw	4
 12886  078A  0008               	return
 12887  078B                     __end_ofi1_wr1RegCompleteHandler:	
 12888                           
 12889                           	psect	text109
 12890  078B                     __ptext109:	
 12891 ;; *************** function i1_rd2RegCompleteHandler *****************
 12892 ;; Defined at:
 12893 ;;		line 149 in file "mcc_generated_files/examples/i2c_master_example.c"
 12894 ;; Parameters:    Size  Location     Type
 12895 ;;  ptr             1    9[COMMON] PTR void 
 12896 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 12897 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 12898 ;; Auto vars:     Size  Location     Type
 12899 ;;		None
 12900 ;; Return value:  Size  Location     Type
 12901 ;;                  1    wreg      enum E97
 12902 ;; Registers used:
 12903 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12904 ;; Tracked objects:
 12905 ;;		On entry : 0/0
 12906 ;;		On exit  : 0/0
 12907 ;;		Unchanged: 0/0
 12908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12909 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12912 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12913 ;;Total ram usage:        1 bytes
 12914 ;; Hardware stack levels used:    1
 12915 ;; Hardware stack levels required when called:    2
 12916 ;; This function calls:
 12917 ;;		i1_I2C_SetBuffer
 12918 ;;		i1_I2C_SetDataCompleteCallback
 12919 ;; This function is called by:
 12920 ;; This function uses a non-reentrant model
 12921 ;;
 12922                           
 12923                           
 12924                           ;psect for function i1_rd2RegCompleteHandler
 12925  078B                     i1_rd2RegCompleteHandler:	
 12926  078B                     i1l2615:	
 12927                           ;incstack = 0
 12928 ;; hardware stack exceeded
 12929                           ; Regs used in i1_rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12930                           
 12931                           
 12932                           ;i2c_master_example.c: 151: I2C_SetBuffer(ptr,2);
 12933  078B  3002               	movlw	2
 12934  078C  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 12935  078D  3000               	movlw	0
 12936  078E  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 12937  078F  0879               	movf	i1rd2RegCompleteHandler@ptr,w
 12938  0790  3187  27BB  3187   	fcall	i1_I2C_SetBuffer
 12939                           
 12940                           ;i2c_master_example.c: 152: I2C_SetDataCompleteCallback((0),(0));
 12941  0793  3000               	movlw	0
 12942  0794  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 12943  0795  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 12944  0796  01F7               	clrf	i1I2C_SetDataCompleteCallback@ptr
 12945  0797  318F  27DC         	fcall	i1_I2C_SetDataCompleteCallback
 12946                           
 12947                           ;i2c_master_example.c: 153: return I2C_RESTART_READ;
 12948  0799  3002               	movlw	2
 12949  079A  0008               	return
 12950  079B                     __end_ofi1_rd2RegCompleteHandler:	
 12951                           
 12952                           	psect	text110
 12953  079B                     __ptext110:	
 12954 ;; *************** function i1_rd1RegCompleteHandler *****************
 12955 ;; Defined at:
 12956 ;;		line 142 in file "mcc_generated_files/examples/i2c_master_example.c"
 12957 ;; Parameters:    Size  Location     Type
 12958 ;;  ptr             1    9[COMMON] PTR void 
 12959 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 12960 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 12961 ;; Auto vars:     Size  Location     Type
 12962 ;;		None
 12963 ;; Return value:  Size  Location     Type
 12964 ;;                  1    wreg      enum E97
 12965 ;; Registers used:
 12966 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12967 ;; Tracked objects:
 12968 ;;		On entry : 0/0
 12969 ;;		On exit  : 0/0
 12970 ;;		Unchanged: 0/0
 12971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12972 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12975 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12976 ;;Total ram usage:        1 bytes
 12977 ;; Hardware stack levels used:    1
 12978 ;; Hardware stack levels required when called:    2
 12979 ;; This function calls:
 12980 ;;		i1_I2C_SetBuffer
 12981 ;;		i1_I2C_SetDataCompleteCallback
 12982 ;; This function is called by:
 12983 ;;		_I2C_Read1ByteRegister
 12984 ;;		i1_I2C_DO_TX
 12985 ;;		i1_I2C_DO_RX
 12986 ;;		i1_I2C_DO_TX_EMPTY
 12987 ;;		i1_I2C_DO_ADDRESS_NACK
 12988 ;;		_I2C_DO_TX
 12989 ;;		_I2C_DO_RX
 12990 ;;		_I2C_DO_TX_EMPTY
 12991 ;;		_I2C_DO_ADDRESS_NACK
 12992 ;;		_I2C_DO_RX_EMPTY
 12993 ;; This function uses a non-reentrant model
 12994 ;;
 12995                           
 12996                           
 12997                           ;psect for function i1_rd1RegCompleteHandler
 12998  079B                     i1_rd1RegCompleteHandler:	
 12999  079B                     i1l2607:	
 13000                           ;incstack = 0
 13001 ;; hardware stack exceeded
 13002                           ; Regs used in i1_rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13003                           
 13004                           
 13005                           ;i2c_master_example.c: 144: I2C_SetBuffer(ptr,1);
 13006  079B  3001               	movlw	1
 13007  079C  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 13008  079D  3000               	movlw	0
 13009  079E  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 13010  079F  0879               	movf	i1rd1RegCompleteHandler@ptr,w
 13011  07A0  3187  27BB  3187   	fcall	i1_I2C_SetBuffer
 13012                           
 13013                           ;i2c_master_example.c: 145: I2C_SetDataCompleteCallback((0),(0));
 13014  07A3  3000               	movlw	0
 13015  07A4  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 13016  07A5  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 13017  07A6  01F7               	clrf	i1I2C_SetDataCompleteCallback@ptr
 13018  07A7  318F  27DC         	fcall	i1_I2C_SetDataCompleteCallback
 13019                           
 13020                           ;i2c_master_example.c: 146: return I2C_RESTART_READ;
 13021  07A9  3002               	movlw	2
 13022  07AA  0008               	return
 13023  07AB                     __end_ofi1_rd1RegCompleteHandler:	
 13024                           
 13025                           	psect	text111
 13026  07AB                     __ptext111:	
 13027 ;; *************** function i1_wr2RegCompleteHandler *****************
 13028 ;; Defined at:
 13029 ;;		line 163 in file "mcc_generated_files/examples/i2c_master_example.c"
 13030 ;; Parameters:    Size  Location     Type
 13031 ;;  ptr             1    9[COMMON] PTR void 
 13032 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 13033 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 13034 ;; Auto vars:     Size  Location     Type
 13035 ;;		None
 13036 ;; Return value:  Size  Location     Type
 13037 ;;                  1    wreg      enum E97
 13038 ;; Registers used:
 13039 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13040 ;; Tracked objects:
 13041 ;;		On entry : 0/0
 13042 ;;		On exit  : 0/0
 13043 ;;		Unchanged: 0/0
 13044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13045 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13048 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13049 ;;Total ram usage:        1 bytes
 13050 ;; Hardware stack levels used:    1
 13051 ;; Hardware stack levels required when called:    2
 13052 ;; This function calls:
 13053 ;;		i1_I2C_SetBuffer
 13054 ;;		i1_I2C_SetDataCompleteCallback
 13055 ;; This function is called by:
 13056 ;; This function uses a non-reentrant model
 13057 ;;
 13058                           
 13059                           
 13060                           ;psect for function i1_wr2RegCompleteHandler
 13061  07AB                     i1_wr2RegCompleteHandler:	
 13062  07AB                     i1l2631:	
 13063                           ;incstack = 0
 13064 ;; hardware stack exceeded
 13065                           ; Regs used in i1_wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13066                           
 13067                           
 13068                           ;i2c_master_example.c: 165: I2C_SetBuffer(ptr,2);
 13069  07AB  3002               	movlw	2
 13070  07AC  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 13071  07AD  3000               	movlw	0
 13072  07AE  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 13073  07AF  0879               	movf	i1wr2RegCompleteHandler@ptr,w
 13074  07B0  3187  27BB  3187   	fcall	i1_I2C_SetBuffer
 13075                           
 13076                           ;i2c_master_example.c: 166: I2C_SetDataCompleteCallback((0),(0));
 13077  07B3  3000               	movlw	0
 13078  07B4  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 13079  07B5  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 13080  07B6  01F7               	clrf	i1I2C_SetDataCompleteCallback@ptr
 13081  07B7  318F  27DC         	fcall	i1_I2C_SetDataCompleteCallback
 13082                           
 13083                           ;i2c_master_example.c: 167: return I2C_CONTINUE;
 13084  07B9  3004               	movlw	4
 13085  07BA  0008               	return
 13086  07BB                     __end_ofi1_wr2RegCompleteHandler:	
 13087                           
 13088                           	psect	text112
 13089  0FDC                     __ptext112:	
 13090 ;; *************** function i1_I2C_SetDataCompleteCallback *****************
 13091 ;; Defined at:
 13092 ;;		line 273 in file "mcc_generated_files/i2c_master.c"
 13093 ;; Parameters:    Size  Location     Type
 13094 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
 13095 ;;		 -> i1_wr1RegCompleteHandler(1), i1_rd1RegCompleteHandler(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), 
 13096 ;;		 -> wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), Absolute function(1), rd1RegCompleteHandler(1), 
 13097 ;;  ptr             1    7[COMMON] PTR void 
 13098 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 13099 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 13100 ;; Auto vars:     Size  Location     Type
 13101 ;;		None
 13102 ;; Return value:  Size  Location     Type
 13103 ;;                  1    wreg      void 
 13104 ;; Registers used:
 13105 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13106 ;; Tracked objects:
 13107 ;;		On entry : 0/0
 13108 ;;		On exit  : 0/0
 13109 ;;		Unchanged: 0/0
 13110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13111 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13113 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13114 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13115 ;;Total ram usage:        4 bytes
 13116 ;; Hardware stack levels used:    1
 13117 ;; Hardware stack levels required when called:    1
 13118 ;; This function calls:
 13119 ;;		i1_I2C_SetCallback
 13120 ;; This function is called by:
 13121 ;;		_I2C_Read1ByteRegister
 13122 ;;		i1_I2C_Write1ByteRegister
 13123 ;;		i1_rd1RegCompleteHandler
 13124 ;;		i1_rd2RegCompleteHandler
 13125 ;;		i1_wr1RegCompleteHandler
 13126 ;;		i1_wr2RegCompleteHandler
 13127 ;;		i1_rdBlkRegCompleteHandler
 13128 ;; This function uses a non-reentrant model
 13129 ;;
 13130                           
 13131                           
 13132                           ;psect for function i1_I2C_SetDataCompleteCallback
 13133  0FDC                     i1_I2C_SetDataCompleteCallback:	
 13134                           
 13135                           ;i2c_master.c: 275: I2C_SetCallback(I2C_DATA_COMPLETE, cb, ptr);
 13136                           
 13137                           ;incstack = 0
 13138                           ; Regs used in i1_I2C_SetDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclat
      +                          h+cstack]
 13139  0FDC  0876               	movf	i1I2C_SetDataCompleteCallback@cb+1,w
 13140  0FDD  00F1               	movwf	i1I2C_SetCallback@cb+1
 13141  0FDE  0875               	movf	i1I2C_SetDataCompleteCallback@cb,w
 13142  0FDF  00F0               	movwf	i1I2C_SetCallback@cb
 13143  0FE0  0877               	movf	i1I2C_SetDataCompleteCallback@ptr,w
 13144  0FE1  00F8               	movwf	??i1_I2C_SetDataCompleteCallback
 13145  0FE2  0878               	movf	??i1_I2C_SetDataCompleteCallback,w
 13146  0FE3  00F2               	movwf	i1I2C_SetCallback@ptr
 13147  0FE4  3000               	movlw	0
 13148  0FE5  3185  25AE         	fcall	i1_I2C_SetCallback
 13149  0FE7  0008               	return
 13150  0FE8                     __end_ofi1_I2C_SetDataCompleteCallback:	
 13151                           
 13152                           	psect	text113
 13153  05AE                     __ptext113:	
 13154 ;; *************** function i1_I2C_SetCallback *****************
 13155 ;; Defined at:
 13156 ;;		line 298 in file "mcc_generated_files/i2c_master.c"
 13157 ;; Parameters:    Size  Location     Type
 13158 ;;  idx             1    wreg     enum E12121
 13159 ;;  cb              2    0[COMMON] PTR FTN(PTR void ,)enum 
 13160 ;;		 -> i1_wr1RegCompleteHandler(1), i1_rd1RegCompleteHandler(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), 
 13161 ;;		 -> wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), Absolute function(1), rd1RegCompleteHandler(1), 
 13162 ;;  ptr             1    2[COMMON] PTR void 
 13163 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 13164 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 13165 ;; Auto vars:     Size  Location     Type
 13166 ;;  idx             1    4[COMMON] enum E12121
 13167 ;; Return value:  Size  Location     Type
 13168 ;;                  1    wreg      void 
 13169 ;; Registers used:
 13170 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13171 ;; Tracked objects:
 13172 ;;		On entry : 0/0
 13173 ;;		On exit  : 0/0
 13174 ;;		Unchanged: 0/0
 13175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13176 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13177 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13178 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13179 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13180 ;;Total ram usage:        5 bytes
 13181 ;; Hardware stack levels used:    1
 13182 ;; This function calls:
 13183 ;;		Nothing
 13184 ;; This function is called by:
 13185 ;;		i1_I2C_SetDataCompleteCallback
 13186 ;;		i1_I2C_SetAddressNackCallback
 13187 ;; This function uses a non-reentrant model
 13188 ;;
 13189                           
 13190                           
 13191                           ;psect for function i1_I2C_SetCallback
 13192  05AE                     i1_I2C_SetCallback:	
 13193                           
 13194                           ;incstack = 0
 13195                           ; Regs used in i1_I2C_SetCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
 13196                           ;i1I2C_SetCallback@idx stored from wreg
 13197  05AE  00F4               	movwf	i1I2C_SetCallback@idx
 13198                           
 13199                           ;i2c_master.c: 300: if(cb)
 13200  05AF  0870               	movf	i1I2C_SetCallback@cb,w
 13201  05B0  0471               	iorwf	i1I2C_SetCallback@cb+1,w
 13202  05B1  1903               	btfsc	3,2
 13203  05B2  2DC4               	goto	i1l2591
 13204                           
 13205                           ;i2c_master.c: 301: {
 13206                           ;i2c_master.c: 302: I2C_Status.callbackTable[idx] = cb;
 13207  05B3  3574               	lslf	i1I2C_SetCallback@idx,w
 13208  05B4  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
 13209  05B5  0086               	movwf	6
 13210  05B6  0187               	clrf	7
 13211  05B7  0870               	movf	i1I2C_SetCallback@cb,w
 13212  05B8  3FC0               	movwi [0]fsr1
 13213  05B9  0871               	movf	i1I2C_SetCallback@cb+1,w
 13214  05BA  3FC1               	movwi [1]fsr1
 13215                           
 13216                           ;i2c_master.c: 303: I2C_Status.callbackPayload[idx] = ptr;
 13217  05BB  0872               	movf	i1I2C_SetCallback@ptr,w
 13218  05BC  00F3               	movwf	??i1_I2C_SetCallback
 13219  05BD  0874               	movf	i1I2C_SetCallback@idx,w
 13220  05BE  3EAC               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
 13221  05BF  0086               	movwf	6
 13222  05C0  0187               	clrf	7
 13223  05C1  0873               	movf	??i1_I2C_SetCallback,w
 13224  05C2  0081               	movwf	1
 13225                           
 13226                           ;i2c_master.c: 304: }
 13227  05C3  0008               	return
 13228  05C4                     i1l2591:	
 13229                           
 13230                           ;i2c_master.c: 305: else
 13231                           ;i2c_master.c: 306: {
 13232                           ;i2c_master.c: 307: I2C_Status.callbackTable[idx] = I2C_CallbackReturnStop;
 13233  05C4  3574               	lslf	i1I2C_SetCallback@idx,w
 13234  05C5  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
 13235  05C6  0086               	movwf	6
 13236  05C7  0187               	clrf	7
 13237  05C8  30E9               	movlw	low _I2C_CallbackReturnStop
 13238  05C9  3FC0               	movwi [0]fsr1
 13239  05CA  300E               	movlw	high _I2C_CallbackReturnStop
 13240  05CB  3FC1               	movwi [1]fsr1
 13241                           
 13242                           ;i2c_master.c: 308: I2C_Status.callbackPayload[idx] = (0);
 13243  05CC  0874               	movf	i1I2C_SetCallback@idx,w
 13244  05CD  3EAC               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
 13245  05CE  0086               	movwf	6
 13246  05CF  0187               	clrf	7
 13247  05D0  0181               	clrf	1
 13248  05D1  0008               	return
 13249  05D2                     __end_ofi1_I2C_SetCallback:	
 13250                           
 13251                           	psect	text114
 13252  07BB                     __ptext114:	
 13253 ;; *************** function i1_I2C_SetBuffer *****************
 13254 ;; Defined at:
 13255 ;;		line 263 in file "mcc_generated_files/i2c_master.c"
 13256 ;; Parameters:    Size  Location     Type
 13257 ;;  buffer          1    wreg     PTR void 
 13258 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
 13259 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
 13260 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
 13261 ;;  bufferSize      2    0[COMMON] unsigned int 
 13262 ;; Auto vars:     Size  Location     Type
 13263 ;;  buffer          1    3[COMMON] PTR void 
 13264 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
 13265 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
 13266 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
 13267 ;; Return value:  Size  Location     Type
 13268 ;;                  1    wreg      void 
 13269 ;; Registers used:
 13270 ;;		wreg
 13271 ;; Tracked objects:
 13272 ;;		On entry : 0/0
 13273 ;;		On exit  : 0/0
 13274 ;;		Unchanged: 0/0
 13275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13276 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13277 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13278 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13279 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13280 ;;Total ram usage:        4 bytes
 13281 ;; Hardware stack levels used:    1
 13282 ;; This function calls:
 13283 ;;		Nothing
 13284 ;; This function is called by:
 13285 ;;		_I2C_Read1ByteRegister
 13286 ;;		i1_I2C_Write1ByteRegister
 13287 ;;		i1_rd1RegCompleteHandler
 13288 ;;		i1_rd2RegCompleteHandler
 13289 ;;		i1_wr1RegCompleteHandler
 13290 ;;		i1_wr2RegCompleteHandler
 13291 ;;		i1_rdBlkRegCompleteHandler
 13292 ;; This function uses a non-reentrant model
 13293 ;;
 13294                           
 13295                           
 13296                           ;psect for function i1_I2C_SetBuffer
 13297  07BB                     i1_I2C_SetBuffer:	
 13298                           
 13299                           ;incstack = 0
 13300                           ; Regs used in i1_I2C_SetBuffer: [wreg]
 13301                           ;i1I2C_SetBuffer@buffer stored from wreg
 13302  07BB  00F3               	movwf	i1I2C_SetBuffer@buffer
 13303                           
 13304                           ;i2c_master.c: 265: if(I2C_Status.bufferFree)
 13305  07BC  0021               	movlb	1	; select bank1
 13306  07BD  1DBC               	btfss	(_I2C_Status^(0+128)+28),3
 13307  07BE  0008               	return
 13308                           
 13309                           ;i2c_master.c: 266: {
 13310                           ;i2c_master.c: 267: I2C_Status.data_ptr = buffer;
 13311  07BF  0873               	movf	i1I2C_SetBuffer@buffer,w
 13312  07C0  00F2               	movwf	??i1_I2C_SetBuffer
 13313  07C1  0872               	movf	??i1_I2C_SetBuffer,w
 13314  07C2  00B7               	movwf	(low ((_I2C_Status| 0+23)))^(0+128)
 13315                           
 13316                           ;i2c_master.c: 268: I2C_Status.data_length = bufferSize;
 13317  07C3  0871               	movf	i1I2C_SetBuffer@bufferSize+1,w
 13318  07C4  00B9               	movwf	((_I2C_Status+1)^(0+128)+24)
 13319  07C5  0870               	movf	i1I2C_SetBuffer@bufferSize,w
 13320  07C6  00B8               	movwf	(_I2C_Status^(0+128)+24)
 13321                           
 13322                           ;i2c_master.c: 269: I2C_Status.bufferFree = 0;
 13323  07C7  11BC               	bcf	(_I2C_Status^(0+128)+28),3
 13324  07C8  0008               	return
 13325  07C9                     __end_ofi1_I2C_SetBuffer:	
 13326                           
 13327                           	psect	text115
 13328  0E59                     __ptext115:	
 13329 ;; *************** function i1_I2C_MasterStop *****************
 13330 ;; Defined at:
 13331 ;;		line 593 in file "mcc_generated_files/i2c_master.c"
 13332 ;; Parameters:    Size  Location     Type
 13333 ;;		None
 13334 ;; Auto vars:     Size  Location     Type
 13335 ;;		None
 13336 ;; Return value:  Size  Location     Type
 13337 ;;                  1    wreg      void 
 13338 ;; Registers used:
 13339 ;;		None
 13340 ;; Tracked objects:
 13341 ;;		On entry : 0/0
 13342 ;;		On exit  : 0/0
 13343 ;;		Unchanged: 0/0
 13344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13349 ;;Total ram usage:        0 bytes
 13350 ;; Hardware stack levels used:    1
 13351 ;; This function calls:
 13352 ;;		Nothing
 13353 ;; This function is called by:
 13354 ;;		i1_I2C_DO_SEND_STOP
 13355 ;; This function uses a non-reentrant model
 13356 ;;
 13357                           
 13358                           
 13359                           ;psect for function i1_I2C_MasterStop
 13360  0E59                     i1_I2C_MasterStop:	
 13361                           
 13362                           ;i2c_master.c: 595: SSP1CON2bits.PEN = 1;
 13363                           
 13364                           ;incstack = 0
 13365 ;; hardware stack exceeded
 13366                           ; Regs used in i1_I2C_MasterStop: []
 13367  0E59  0024               	movlb	4	; select bank4
 13368  0E5A  1516               	bsf	22,2	;volatile
 13369  0E5B  0008               	return
 13370  0E5C                     __end_ofi1_I2C_MasterStop:	
 13371                           
 13372                           	psect	text116
 13373  0E56                     __ptext116:	
 13374 ;; *************** function i1_I2C_MasterEnableRestart *****************
 13375 ;; Defined at:
 13376 ;;		line 573 in file "mcc_generated_files/i2c_master.c"
 13377 ;; Parameters:    Size  Location     Type
 13378 ;;		None
 13379 ;; Auto vars:     Size  Location     Type
 13380 ;;		None
 13381 ;; Return value:  Size  Location     Type
 13382 ;;                  1    wreg      void 
 13383 ;; Registers used:
 13384 ;;		None
 13385 ;; Tracked objects:
 13386 ;;		On entry : 0/0
 13387 ;;		On exit  : 0/0
 13388 ;;		Unchanged: 0/0
 13389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13393 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13394 ;;Total ram usage:        0 bytes
 13395 ;; Hardware stack levels used:    1
 13396 ;; This function calls:
 13397 ;;		Nothing
 13398 ;; This function is called by:
 13399 ;;		i1_I2C_DO_SEND_RESTART_READ
 13400 ;;		i1_I2C_DO_SEND_RESTART_WRITE
 13401 ;;		i1_I2C_DO_SEND_RESTART
 13402 ;; This function uses a non-reentrant model
 13403 ;;
 13404                           
 13405                           
 13406                           ;psect for function i1_I2C_MasterEnableRestart
 13407  0E56                     i1_I2C_MasterEnableRestart:	
 13408                           
 13409                           ;i2c_master.c: 575: SSP1CON2bits.RSEN = 1;
 13410                           
 13411                           ;incstack = 0
 13412 ;; hardware stack exceeded
 13413                           ; Regs used in i1_I2C_MasterEnableRestart: []
 13414  0E56  0024               	movlb	4	; select bank4
 13415  0E57  1496               	bsf	22,1	;volatile
 13416  0E58  0008               	return
 13417  0E59                     __end_ofi1_I2C_MasterEnableRestart:	
 13418                           
 13419                           	psect	text117
 13420  0E53                     __ptext117:	
 13421 ;; *************** function i1_I2C_MasterStart *****************
 13422 ;; Defined at:
 13423 ;;		line 588 in file "mcc_generated_files/i2c_master.c"
 13424 ;; Parameters:    Size  Location     Type
 13425 ;;		None
 13426 ;; Auto vars:     Size  Location     Type
 13427 ;;		None
 13428 ;; Return value:  Size  Location     Type
 13429 ;;                  1    wreg      void 
 13430 ;; Registers used:
 13431 ;;		None
 13432 ;; Tracked objects:
 13433 ;;		On entry : 0/0
 13434 ;;		On exit  : 0/0
 13435 ;;		Unchanged: 0/0
 13436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13441 ;;Total ram usage:        0 bytes
 13442 ;; Hardware stack levels used:    1
 13443 ;; This function calls:
 13444 ;;		Nothing
 13445 ;; This function is called by:
 13446 ;;		i1_I2C_MasterOperation
 13447 ;; This function uses a non-reentrant model
 13448 ;;
 13449                           
 13450                           
 13451                           ;psect for function i1_I2C_MasterStart
 13452  0E53                     i1_I2C_MasterStart:	
 13453                           
 13454                           ;i2c_master.c: 590: SSP1CON2bits.SEN = 1;
 13455                           
 13456                           ;incstack = 0
 13457 ;; hardware stack exceeded
 13458                           ; Regs used in i1_I2C_MasterStart: []
 13459  0E53  0024               	movlb	4	; select bank4
 13460  0E54  1416               	bsf	22,0	;volatile
 13461  0E55  0008               	return
 13462  0E56                     __end_ofi1_I2C_MasterStart:	
 13463                           
 13464                           	psect	text118
 13465  068A                     __ptext118:	
 13466 ;; *************** function i1_I2C_Close *****************
 13467 ;; Defined at:
 13468 ;;		line 209 in file "mcc_generated_files/i2c_master.c"
 13469 ;; Parameters:    Size  Location     Type
 13470 ;;		None
 13471 ;; Auto vars:     Size  Location     Type
 13472 ;;  I2C_Close       1    1[COMMON] enum E92
 13473 ;; Return value:  Size  Location     Type
 13474 ;;                  1    wreg      enum E92
 13475 ;; Registers used:
 13476 ;;		wreg, status,2, status,0, pclath, cstack
 13477 ;; Tracked objects:
 13478 ;;		On entry : 0/0
 13479 ;;		On exit  : 0/0
 13480 ;;		Unchanged: 0/0
 13481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13483 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13484 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13485 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13486 ;;Total ram usage:        2 bytes
 13487 ;; Hardware stack levels used:    1
 13488 ;; Hardware stack levels required when called:    1
 13489 ;; This function calls:
 13490 ;;		i1_I2C_MasterClearIrq
 13491 ;;		i1_I2C_MasterClose
 13492 ;;		i1_I2C_MasterDisableIrq
 13493 ;; This function is called by:
 13494 ;;		_I2C_Read1ByteRegister
 13495 ;;		i1_I2C_Write1ByteRegister
 13496 ;; This function uses a non-reentrant model
 13497 ;;
 13498                           
 13499                           
 13500                           ;psect for function i1_I2C_Close
 13501  068A                     i1_I2C_Close:	
 13502                           
 13503                           ;i2c_master.c: 211: i2c_error_t returnValue = I2C_BUSY;
 13504                           
 13505                           ;incstack = 0
 13506                           ; Regs used in i1_I2C_Close: [wreg+status,2+status,0+pclath+cstack]
 13507  068A  01F1               	clrf	i1I2C_Close@returnValue
 13508  068B  0AF1               	incf	i1I2C_Close@returnValue,f
 13509                           
 13510                           ;i2c_master.c: 212: if(!I2C_Status.busy)
 13511  068C  0021               	movlb	1	; select bank1
 13512  068D  18BC               	btfsc	(_I2C_Status^(0+128)+28),1
 13513  068E  2EA1               	goto	i1l3219
 13514                           
 13515                           ;i2c_master.c: 213: {
 13516                           ;i2c_master.c: 214: I2C_Status.inUse = 0;
 13517  068F  113C               	bcf	(_I2C_Status^(0+128)+28),2
 13518                           
 13519                           ;i2c_master.c: 215: I2C_Status.address = 0xff;
 13520  0690  30FF               	movlw	255
 13521  0691  00F0               	movwf	??i1_I2C_Close
 13522  0692  0870               	movf	??i1_I2C_Close,w
 13523  0693  00B6               	movwf	(_I2C_Status^(0+128)+22)
 13524                           
 13525                           ;i2c_master.c: 216: I2C_MasterClearIrq();
 13526  0694  318E  264A  3186   	fcall	i1_I2C_MasterClearIrq
 13527                           
 13528                           ;i2c_master.c: 217: I2C_MasterDisableIrq();
 13529  0697  318E  2650  3186   	fcall	i1_I2C_MasterDisableIrq
 13530                           
 13531                           ;i2c_master.c: 218: I2C_MasterClose();
 13532  069A  318E  264D         	fcall	i1_I2C_MasterClose
 13533                           
 13534                           ;i2c_master.c: 219: returnValue = I2C_Status.error;
 13535  069C  0021               	movlb	1	; select bank1
 13536  069D  083B               	movf	(_I2C_Status^(0+128)+27),w
 13537  069E  00F0               	movwf	??i1_I2C_Close
 13538  069F  0870               	movf	??i1_I2C_Close,w
 13539  06A0  00F1               	movwf	i1I2C_Close@returnValue
 13540  06A1                     i1l3219:	
 13541                           
 13542                           ;i2c_master.c: 220: }
 13543                           ;i2c_master.c: 221: return returnValue;
 13544  06A1  0871               	movf	i1I2C_Close@returnValue,w
 13545  06A2  0008               	return
 13546  06A3                     __end_ofi1_I2C_Close:	
 13547                           
 13548                           	psect	text119
 13549  0E50                     __ptext119:	
 13550 ;; *************** function i1_I2C_MasterDisableIrq *****************
 13551 ;; Defined at:
 13552 ;;		line 635 in file "mcc_generated_files/i2c_master.c"
 13553 ;; Parameters:    Size  Location     Type
 13554 ;;		None
 13555 ;; Auto vars:     Size  Location     Type
 13556 ;;		None
 13557 ;; Return value:  Size  Location     Type
 13558 ;;                  1    wreg      void 
 13559 ;; Registers used:
 13560 ;;		None
 13561 ;; Tracked objects:
 13562 ;;		On entry : 0/0
 13563 ;;		On exit  : 0/0
 13564 ;;		Unchanged: 0/0
 13565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13569 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13570 ;;Total ram usage:        0 bytes
 13571 ;; Hardware stack levels used:    1
 13572 ;; This function calls:
 13573 ;;		Nothing
 13574 ;; This function is called by:
 13575 ;;		i1_I2C_Close
 13576 ;; This function uses a non-reentrant model
 13577 ;;
 13578                           
 13579                           
 13580                           ;psect for function i1_I2C_MasterDisableIrq
 13581  0E50                     i1_I2C_MasterDisableIrq:	
 13582                           
 13583                           ;i2c_master.c: 637: PIE1bits.SSP1IE = 0;
 13584                           
 13585                           ;incstack = 0
 13586                           ; Regs used in i1_I2C_MasterDisableIrq: []
 13587  0E50  0021               	movlb	1	; select bank1
 13588  0E51  1190               	bcf	16,3	;volatile
 13589  0E52  0008               	return
 13590  0E53                     __end_ofi1_I2C_MasterDisableIrq:	
 13591                           
 13592                           	psect	text120
 13593  0E4D                     __ptext120:	
 13594 ;; *************** function i1_I2C_MasterClose *****************
 13595 ;; Defined at:
 13596 ;;		line 557 in file "mcc_generated_files/i2c_master.c"
 13597 ;; Parameters:    Size  Location     Type
 13598 ;;		None
 13599 ;; Auto vars:     Size  Location     Type
 13600 ;;		None
 13601 ;; Return value:  Size  Location     Type
 13602 ;;                  1    wreg      void 
 13603 ;; Registers used:
 13604 ;;		None
 13605 ;; Tracked objects:
 13606 ;;		On entry : 0/0
 13607 ;;		On exit  : 0/0
 13608 ;;		Unchanged: 0/0
 13609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13614 ;;Total ram usage:        0 bytes
 13615 ;; Hardware stack levels used:    1
 13616 ;; This function calls:
 13617 ;;		Nothing
 13618 ;; This function is called by:
 13619 ;;		i1_I2C_Close
 13620 ;; This function uses a non-reentrant model
 13621 ;;
 13622                           
 13623                           
 13624                           ;psect for function i1_I2C_MasterClose
 13625  0E4D                     i1_I2C_MasterClose:	
 13626                           
 13627                           ;i2c_master.c: 560: SSP1CON1bits.SSPEN = 0;
 13628                           
 13629                           ;incstack = 0
 13630                           ; Regs used in i1_I2C_MasterClose: []
 13631  0E4D  0024               	movlb	4	; select bank4
 13632  0E4E  1295               	bcf	21,5	;volatile
 13633  0E4F  0008               	return
 13634  0E50                     __end_ofi1_I2C_MasterClose:	
 13635                           
 13636                           	psect	text121
 13637  0E4A                     __ptext121:	
 13638 ;; *************** function i1_I2C_MasterClearIrq *****************
 13639 ;; Defined at:
 13640 ;;		line 640 in file "mcc_generated_files/i2c_master.c"
 13641 ;; Parameters:    Size  Location     Type
 13642 ;;		None
 13643 ;; Auto vars:     Size  Location     Type
 13644 ;;		None
 13645 ;; Return value:  Size  Location     Type
 13646 ;;                  1    wreg      void 
 13647 ;; Registers used:
 13648 ;;		None
 13649 ;; Tracked objects:
 13650 ;;		On entry : 0/0
 13651 ;;		On exit  : 0/0
 13652 ;;		Unchanged: 0/0
 13653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13657 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13658 ;;Total ram usage:        0 bytes
 13659 ;; Hardware stack levels used:    1
 13660 ;; This function calls:
 13661 ;;		Nothing
 13662 ;; This function is called by:
 13663 ;;		i1_I2C_Open
 13664 ;;		i1_I2C_Close
 13665 ;;		i1_I2C_MasterFsm
 13666 ;; This function uses a non-reentrant model
 13667 ;;
 13668                           
 13669                           
 13670                           ;psect for function i1_I2C_MasterClearIrq
 13671  0E4A                     i1_I2C_MasterClearIrq:	
 13672                           
 13673                           ;i2c_master.c: 642: PIR1bits.SSP1IF = 0;
 13674                           
 13675                           ;incstack = 0
 13676                           ; Regs used in i1_I2C_MasterClearIrq: []
 13677  0E4A  0020               	movlb	0	; select bank0
 13678  0E4B  1190               	bcf	16,3	;volatile
 13679  0E4C  0008               	return
 13680  0E4D                     __end_ofi1_I2C_MasterClearIrq:	
 13681                           
 13682                           	psect	text122
 13683  042A                     __ptext122:	
 13684 ;; *************** function _EUSART_Receive_ISR *****************
 13685 ;; Defined at:
 13686 ;;		line 173 in file "mcc_generated_files/eusart.c"
 13687 ;; Parameters:    Size  Location     Type
 13688 ;;		None
 13689 ;; Auto vars:     Size  Location     Type
 13690 ;;		None
 13691 ;; Return value:  Size  Location     Type
 13692 ;;                  1    wreg      void 
 13693 ;; Registers used:
 13694 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13695 ;; Tracked objects:
 13696 ;;		On entry : 0/0
 13697 ;;		On exit  : 0/0
 13698 ;;		Unchanged: 0/0
 13699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13704 ;;Total ram usage:        0 bytes
 13705 ;; Hardware stack levels used:    1
 13706 ;; Hardware stack levels required when called:    2
 13707 ;; This function calls:
 13708 ;;		Absolute function
 13709 ;;		_EUSART_DefaultErrorHandler
 13710 ;;		_EUSART_DefaultFramingErrorHandler
 13711 ;;		_EUSART_DefaultOverrunErrorHandler
 13712 ;;		_EUSART_RxDataHandler
 13713 ;; This function is called by:
 13714 ;;		_EUSART_Initialize
 13715 ;;		_INTERRUPT_InterruptManager
 13716 ;; This function uses a non-reentrant model
 13717 ;;
 13718                           
 13719                           
 13720                           ;psect for function _EUSART_Receive_ISR
 13721  042A                     _EUSART_Receive_ISR:	
 13722                           
 13723                           ;eusart.c: 176: eusartRxStatusBuffer[eusartRxHead].status = 0;
 13724                           
 13725                           ;incstack = 0
 13726                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13727  042A  0020               	movlb	0	; select bank0
 13728  042B  083C               	movf	_eusartRxHead,w	;volatile
 13729  042C  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13730  042D  0086               	movwf	6
 13731  042E  0187               	clrf	7
 13732  042F  0181               	clrf	1
 13733                           
 13734                           ;eusart.c: 178: if(RC1STAbits.FERR){
 13735  0430  0023               	movlb	3	; select bank3
 13736  0431  1D1D               	btfss	29,2	;volatile
 13737  0432  2C3E               	goto	i1l6103
 13738                           
 13739                           ;eusart.c: 179: eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 13740  0433  0020               	movlb	0	; select bank0
 13741  0434  083C               	movf	_eusartRxHead,w	;volatile
 13742  0435  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13743  0436  0086               	movwf	6
 13744  0437  0187               	clrf	7
 13745  0438  1481               	bsf	1,1
 13746                           
 13747                           ;eusart.c: 180: EUSART_FramingErrorHandler();
 13748  0439  085E               	movf	_EUSART_FramingErrorHandler+1,w
 13749  043A  008A               	movwf	10
 13750  043B  085D               	movf	_EUSART_FramingErrorHandler,w
 13751  043C  000A               	callw
 13752  043D  3184               	pagesel	$
 13753  043E                     i1l6103:	
 13754                           
 13755                           ;eusart.c: 181: }
 13756                           ;eusart.c: 183: if(RC1STAbits.OERR){
 13757  043E  0023               	movlb	3	; select bank3
 13758  043F  1C9D               	btfss	29,1	;volatile
 13759  0440  2C4C               	goto	i1l6109
 13760                           
 13761                           ;eusart.c: 184: eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 13762  0441  0020               	movlb	0	; select bank0
 13763  0442  083C               	movf	_eusartRxHead,w	;volatile
 13764  0443  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13765  0444  0086               	movwf	6
 13766  0445  0187               	clrf	7
 13767  0446  1501               	bsf	1,2
 13768                           
 13769                           ;eusart.c: 185: EUSART_OverrunErrorHandler();
 13770  0447  085C               	movf	_EUSART_OverrunErrorHandler+1,w
 13771  0448  008A               	movwf	10
 13772  0449  085B               	movf	_EUSART_OverrunErrorHandler,w
 13773  044A  000A               	callw
 13774  044B  3184               	pagesel	$
 13775  044C                     i1l6109:	
 13776                           
 13777                           ;eusart.c: 186: }
 13778                           ;eusart.c: 188: if(eusartRxStatusBuffer[eusartRxHead].status){
 13779  044C  0020               	movlb	0	; select bank0
 13780  044D  083C               	movf	_eusartRxHead,w	;volatile
 13781  044E  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13782  044F  0086               	movwf	6
 13783  0450  0187               	clrf	7
 13784  0451  0801               	movf	1,w
 13785  0452  1903               	btfsc	3,2
 13786  0453  2C5A               	goto	i1l6113
 13787                           
 13788                           ;eusart.c: 189: EUSART_ErrorHandler();
 13789  0454  085A               	movf	_EUSART_ErrorHandler+1,w
 13790  0455  008A               	movwf	10
 13791  0456  0859               	movf	_EUSART_ErrorHandler,w
 13792  0457  000A               	callw
 13793  0458  3184               	pagesel	$
 13794                           
 13795                           ;eusart.c: 190: } else {
 13796  0459  0008               	return
 13797  045A                     i1l6113:	
 13798                           
 13799                           ;eusart.c: 191: EUSART_RxDataHandler();
 13800  045A  3186  26BA         	fcall	_EUSART_RxDataHandler
 13801  045C  0008               	return
 13802  045D                     __end_of_EUSART_Receive_ISR:	
 13803                           
 13804                           	psect	text123
 13805  0045                     __ptext123:	
 13806 ;; *************** function _MyUART_ISR *****************
 13807 ;; Defined at:
 13808 ;;		line 105 in file "main.c"
 13809 ;; Parameters:    Size  Location     Type
 13810 ;;		None
 13811 ;; Auto vars:     Size  Location     Type
 13812 ;;  c               1    5[COMMON] unsigned char 
 13813 ;; Return value:  Size  Location     Type
 13814 ;;                  1    wreg      void 
 13815 ;; Registers used:
 13816 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13817 ;; Tracked objects:
 13818 ;;		On entry : 0/0
 13819 ;;		On exit  : 0/0
 13820 ;;		Unchanged: 0/0
 13821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13823 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13824 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13825 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13826 ;;Total ram usage:        5 bytes
 13827 ;; Hardware stack levels used:    1
 13828 ;; Hardware stack levels required when called:    1
 13829 ;; This function calls:
 13830 ;;		_EUSART_Write
 13831 ;; This function is called by:
 13832 ;;		_main
 13833 ;;		_INTERRUPT_InterruptManager
 13834 ;; This function uses a non-reentrant model
 13835 ;;
 13836                           
 13837                           
 13838                           ;psect for function _MyUART_ISR
 13839  0045                     _MyUART_ISR:	
 13840                           
 13841                           ;main.c: 106: unsigned char c = RC1REG;
 13842                           
 13843                           ;incstack = 0
 13844                           ; Regs used in _MyUART_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13845  0045  0023               	movlb	3	; select bank3
 13846  0046  0819               	movf	25,w	;volatile
 13847  0047  00F1               	movwf	??_MyUART_ISR
 13848  0048  0871               	movf	??_MyUART_ISR,w
 13849  0049  00F5               	movwf	MyUART_ISR@c
 13850                           
 13851                           ;main.c: 107: if(c) {
 13852  004A  0875               	movf	MyUART_ISR@c,w
 13853  004B  1903               	btfsc	3,2
 13854  004C  0008               	return
 13855  004D  28EA               	goto	i1l3653
 13856  004E                     i1l3603:	
 13857                           ;main.c: 109: case S_Idle:
 13858                           
 13859                           ;main.c: 108: switch(PosUart) {
 13860                           
 13861                           
 13862                           ;main.c: 110: if(c == 'V' || c == 'A' || c == 'P' || c == 'L') {
 13863  004E  3056               	movlw	86
 13864  004F  0675               	xorwf	MyUART_ISR@c,w
 13865  0050  1903               	btfsc	3,2
 13866  0051  285E               	goto	i1l3611
 13867  0052  3041               	movlw	65
 13868  0053  0675               	xorwf	MyUART_ISR@c,w
 13869  0054  1903               	btfsc	3,2
 13870  0055  285E               	goto	i1l3611
 13871  0056  3050               	movlw	80
 13872  0057  0675               	xorwf	MyUART_ISR@c,w
 13873  0058  1903               	btfsc	3,2
 13874  0059  285E               	goto	i1l3611
 13875  005A  304C               	movlw	76
 13876  005B  0675               	xorwf	MyUART_ISR@c,w
 13877  005C  1D03               	btfss	3,2
 13878  005D  0008               	return
 13879  005E                     i1l3611:	
 13880                           
 13881                           ;main.c: 111: Type = c;
 13882  005E  0875               	movf	MyUART_ISR@c,w
 13883  005F  00F1               	movwf	??_MyUART_ISR
 13884  0060  0871               	movf	??_MyUART_ISR,w
 13885  0061  0020               	movlb	0	; select bank0
 13886  0062  00B7               	movwf	_Type
 13887                           
 13888                           ;main.c: 112: PosUart = S_Data;
 13889  0063  01B1               	clrf	_PosUart
 13890  0064  0AB1               	incf	_PosUart,f
 13891                           
 13892                           ;main.c: 113: }
 13893                           ;main.c: 114: break;
 13894  0065  0008               	return
 13895  0066                     i1l3615:	
 13896                           ;main.c: 115: case S_Data:
 13897                           
 13898                           
 13899                           ;main.c: 116: Data = c;
 13900  0066  0875               	movf	MyUART_ISR@c,w
 13901  0067  00F1               	movwf	??_MyUART_ISR
 13902  0068  0871               	movf	??_MyUART_ISR,w
 13903  0069  00B8               	movwf	_Data
 13904                           
 13905                           ;main.c: 117: PosUart = S_Check;
 13906  006A  3002               	movlw	2
 13907  006B  00F1               	movwf	??_MyUART_ISR
 13908  006C  0871               	movf	??_MyUART_ISR,w
 13909  006D  00B1               	movwf	_PosUart
 13910                           
 13911                           ;main.c: 118: break;
 13912  006E  0008               	return
 13913  006F                     i1l3617:	
 13914                           ;main.c: 119: case S_Check:
 13915                           
 13916                           
 13917                           ;main.c: 120: if((Type+Data)%256 == c) {
 13918  006F  0837               	movf	_Type,w
 13919  0070  0738               	addwf	_Data,w
 13920  0071  00F1               	movwf	??_MyUART_ISR
 13921  0072  01F2               	clrf	??_MyUART_ISR+1
 13922  0073  0DF2               	rlf	??_MyUART_ISR+1,f
 13923  0074  30FF               	movlw	255
 13924  0075  0571               	andwf	??_MyUART_ISR,w
 13925  0076  00F3               	movwf	??_MyUART_ISR+2
 13926  0077  3000               	movlw	0
 13927  0078  0572               	andwf	??_MyUART_ISR+1,w
 13928  0079  00F4               	movwf	??_MyUART_ISR+3
 13929  007A  0875               	movf	MyUART_ISR@c,w
 13930  007B  0673               	xorwf	??_MyUART_ISR+2,w
 13931  007C  0474               	iorwf	??_MyUART_ISR+3,w
 13932  007D  1D03               	skipz
 13933  007E  28DA               	goto	i1l3645
 13934                           
 13935                           ;main.c: 121: Validation = 4;
 13936  007F  3004               	movlw	4
 13937  0080  00F1               	movwf	??_MyUART_ISR
 13938  0081  0871               	movf	??_MyUART_ISR,w
 13939  0082  00E3               	movwf	_Validation
 13940                           
 13941                           ;main.c: 122: if(Type == 'V') {
 13942  0083  3056               	movlw	86
 13943  0084  0637               	xorwf	_Type,w
 13944  0085  1D03               	btfss	3,2
 13945  0086  288C               	goto	i1l3625
 13946                           
 13947                           ;main.c: 123: Vitesse = Data;
 13948  0087  0838               	movf	_Data,w
 13949  0088  00F1               	movwf	??_MyUART_ISR
 13950  0089  0871               	movf	??_MyUART_ISR,w
 13951  008A  00B4               	movwf	_Vitesse
 13952                           
 13953                           ;main.c: 124: } else if(Type == 'A') {
 13954  008B  28E5               	goto	i1l3647
 13955  008C                     i1l3625:	
 13956  008C  3041               	movlw	65
 13957  008D  0637               	xorwf	_Type,w
 13958  008E  1D03               	btfss	3,2
 13959  008F  2895               	goto	i1l3629
 13960                           
 13961                           ;main.c: 125: Angle = Data;
 13962  0090  0838               	movf	_Data,w
 13963  0091  00F1               	movwf	??_MyUART_ISR
 13964  0092  0871               	movf	??_MyUART_ISR,w
 13965  0093  00E2               	movwf	_Angle
 13966                           
 13967                           ;main.c: 126: } else if(Type == 'P') {
 13968  0094  28E5               	goto	i1l3647
 13969  0095                     i1l3629:	
 13970  0095  3050               	movlw	80
 13971  0096  0637               	xorwf	_Type,w
 13972  0097  1D03               	btfss	3,2
 13973  0098  28A3               	goto	i1l3633
 13974                           
 13975                           ;main.c: 127: EUSART_Write('P');
 13976  0099  3050               	movlw	80
 13977  009A  318F  2739  3180   	fcall	_EUSART_Write
 13978                           
 13979                           ;main.c: 128: EUSART_Write('+');
 13980  009D  302B               	movlw	43
 13981  009E  318F  2739  3180   	fcall	_EUSART_Write
 13982                           
 13983                           ;main.c: 129: EUSART_Write('{');
 13984  00A1  307B               	movlw	123
 13985  00A2  28E3               	goto	L3
 13986  00A3                     i1l3633:	
 13987                           ;main.c: 130: } else if(Type == 'L') {
 13988                           
 13989  00A3  304C               	movlw	76
 13990  00A4  0020               	movlb	0	; select bank0
 13991  00A5  0637               	xorwf	_Type,w
 13992  00A6  1D03               	btfss	3,2
 13993  00A7  28D0               	goto	i1l3643
 13994                           
 13995                           ;main.c: 131: StateLeds++;
 13996  00A8  3001               	movlw	1
 13997  00A9  00F1               	movwf	??_MyUART_ISR
 13998  00AA  0871               	movf	??_MyUART_ISR,w
 13999  00AB  07B0               	addwf	_StateLeds,f
 14000                           
 14001                           ;main.c: 132: switch(StateLeds) {
 14002  00AC  28C1               	goto	i1l3641
 14003  00AD                     i1l861:	
 14004                           ;main.c: 134: do { LATCbits.LATC6 = 0; } while(0);
 14005                           
 14006                           ;main.c: 133: case S_leds_off:
 14007                           
 14008  00AD  0022               	movlb	2	; select bank2
 14009  00AE  130E               	bcf	14,6	;volatile
 14010  00AF  28B2               	goto	i1l869
 14011  00B0                     i1l867:	
 14012                           ;main.c: 138: do { LATCbits.LATC6 = 1; } while(0);
 14013                           
 14014                           ;main.c: 137: case S_led_r:
 14015                           
 14016                           ;main.c: 136: break;
 14017                           
 14018                           ;main.c: 135: do { LATCbits.LATC7 = 0; } while(0);
 14019                           
 14020  00B0  0022               	movlb	2	; select bank2
 14021  00B1  170E               	bsf	14,6	;volatile
 14022  00B2                     i1l869:	
 14023                           ;main.c: 139: do { LATCbits.LATC7 = 0; } while(0);
 14024                           
 14025  00B2  138E               	bcf	14,7	;volatile
 14026                           
 14027                           ;main.c: 140: break;
 14028  00B3  28E5               	goto	i1l3647
 14029  00B4                     i1l872:	
 14030                           ;main.c: 142: do { LATCbits.LATC6 = 0; } while(0);
 14031                           
 14032                           ;main.c: 141: case S_led_l:
 14033                           
 14034  00B4  0022               	movlb	2	; select bank2
 14035  00B5  130E               	bcf	14,6	;volatile
 14036  00B6  28B9               	goto	i1l879
 14037  00B7                     i1l877:	
 14038                           ;main.c: 146: do { LATCbits.LATC6 = 1; } while(0);
 14039                           
 14040                           ;main.c: 145: case S_leds_on:
 14041                           
 14042                           ;main.c: 144: break;
 14043                           
 14044                           ;main.c: 143: do { LATCbits.LATC7 = 1; } while(0);
 14045                           
 14046  00B7  0022               	movlb	2	; select bank2
 14047  00B8  170E               	bsf	14,6	;volatile
 14048  00B9                     i1l879:	
 14049                           ;main.c: 147: do { LATCbits.LATC7 = 1; } while(0);
 14050                           
 14051  00B9  178E               	bsf	14,7	;volatile
 14052                           
 14053                           ;main.c: 148: break;
 14054  00BA  28E5               	goto	i1l3647
 14055  00BB                     i1l882:	
 14056                           ;main.c: 150: do { LATCbits.LATC6 = 0; } while(0);
 14057                           
 14058                           ;main.c: 149: default:
 14059                           
 14060  00BB  0022               	movlb	2	; select bank2
 14061  00BC  130E               	bcf	14,6	;volatile
 14062                           
 14063                           ;main.c: 151: do { LATCbits.LATC7 = 0; } while(0);
 14064  00BD  138E               	bcf	14,7	;volatile
 14065                           
 14066                           ;main.c: 152: StateLeds = S_leds_off;
 14067  00BE  0020               	movlb	0	; select bank0
 14068  00BF  01B0               	clrf	_StateLeds
 14069                           
 14070                           ;main.c: 154: }
 14071                           
 14072                           ;main.c: 153: break;
 14073  00C0  28E5               	goto	i1l3647
 14074  00C1                     i1l3641:	
 14075  00C1  0830               	movf	_StateLeds,w
 14076                           
 14077                           ; Switch size 1, requested type "space"
 14078                           ; Number of cases is 4, Range of values is 0 to 3
 14079                           ; switch strategies available:
 14080                           ; Name         Instructions Cycles
 14081                           ; simple_byte           13     7 (average)
 14082                           ; direct_byte           14     6 (fixed)
 14083                           ; jumptable            260     6 (fixed)
 14084                           ;	Chosen strategy is simple_byte
 14085  00C2  3A00               	xorlw	0	; case 0
 14086  00C3  1903               	skipnz
 14087  00C4  28AD               	goto	i1l861
 14088  00C5  3A01               	xorlw	1	; case 1
 14089  00C6  1903               	skipnz
 14090  00C7  28B0               	goto	i1l867
 14091  00C8  3A03               	xorlw	3	; case 2
 14092  00C9  1903               	skipnz
 14093  00CA  28B4               	goto	i1l872
 14094  00CB  3A01               	xorlw	1	; case 3
 14095  00CC  1903               	skipnz
 14096  00CD  28B7               	goto	i1l877
 14097  00CE  28BB               	goto	i1l882
 14098                           
 14099                           ;main.c: 155: } else {
 14100  00CF  28E5               	goto	i1l3647
 14101  00D0                     i1l3643:	
 14102                           
 14103                           ;main.c: 156: EUSART_Write('$');
 14104  00D0  3024               	movlw	36
 14105  00D1  318F  2739  3180   	fcall	_EUSART_Write
 14106                           
 14107                           ;main.c: 157: EUSART_Write('M');
 14108  00D4  304D               	movlw	77
 14109  00D5  318F  2739  3180   	fcall	_EUSART_Write
 14110                           
 14111                           ;main.c: 158: EUSART_Write('q');
 14112  00D8  3071               	movlw	113
 14113  00D9  28E3               	goto	L3
 14114  00DA                     i1l3645:	
 14115                           ;main.c: 159: }
 14116                           ;main.c: 160: } else {
 14117                           
 14118                           
 14119                           ;main.c: 161: EUSART_Write('$');
 14120  00DA  3024               	movlw	36
 14121  00DB  318F  2739  3180   	fcall	_EUSART_Write
 14122                           
 14123                           ;main.c: 162: EUSART_Write('C');
 14124  00DE  3043               	movlw	67
 14125  00DF  318F  2739  3180   	fcall	_EUSART_Write
 14126                           
 14127                           ;main.c: 163: EUSART_Write('g');
 14128  00E2  3067               	movlw	103
 14129  00E3                     L3:	
 14130  00E3  318F  2739         	fcall	_EUSART_Write
 14131  00E5                     i1l3647:	
 14132                           
 14133                           ;main.c: 164: }
 14134                           ;main.c: 165: PosUart = S_Idle;
 14135  00E5  0020               	movlb	0	; select bank0
 14136  00E6  01B1               	clrf	_PosUart
 14137                           
 14138                           ;main.c: 166: break;
 14139  00E7  0008               	return
 14140  00E8                     i1l3649:	
 14141                           ;main.c: 167: default:
 14142                           
 14143                           
 14144                           ;main.c: 168: PosUart = S_Idle;
 14145  00E8  01B1               	clrf	_PosUart
 14146                           
 14147                           ;main.c: 170: }
 14148                           
 14149                           ;main.c: 169: break;
 14150  00E9  0008               	return
 14151  00EA                     i1l3653:	
 14152  00EA  0020               	movlb	0	; select bank0
 14153  00EB  0831               	movf	_PosUart,w
 14154                           
 14155                           ; Switch size 1, requested type "space"
 14156                           ; Number of cases is 3, Range of values is 0 to 2
 14157                           ; switch strategies available:
 14158                           ; Name         Instructions Cycles
 14159                           ; simple_byte           10     6 (average)
 14160                           ; direct_byte           12     6 (fixed)
 14161                           ; jumptable            260     6 (fixed)
 14162                           ;	Chosen strategy is simple_byte
 14163  00EC  3A00               	xorlw	0	; case 0
 14164  00ED  1903               	skipnz
 14165  00EE  284E               	goto	i1l3603
 14166  00EF  3A01               	xorlw	1	; case 1
 14167  00F0  1903               	skipnz
 14168  00F1  2866               	goto	i1l3615
 14169  00F2  3A03               	xorlw	3	; case 2
 14170  00F3  1903               	skipnz
 14171  00F4  286F               	goto	i1l3617
 14172  00F5  28E8               	goto	i1l3649
 14173  00F6  0008               	return
 14174  00F7                     __end_of_MyUART_ISR:	
 14175                           
 14176                           	psect	text124
 14177  0F39                     __ptext124:	
 14178 ;; *************** function _EUSART_Write *****************
 14179 ;; Defined at:
 14180 ;;		line 162 in file "mcc_generated_files/eusart.c"
 14181 ;; Parameters:    Size  Location     Type
 14182 ;;  txData          1    wreg     unsigned char 
 14183 ;; Auto vars:     Size  Location     Type
 14184 ;;  txData          1    0[COMMON] unsigned char 
 14185 ;; Return value:  Size  Location     Type
 14186 ;;                  1    wreg      void 
 14187 ;; Registers used:
 14188 ;;		wreg
 14189 ;; Tracked objects:
 14190 ;;		On entry : 0/0
 14191 ;;		On exit  : 0/0
 14192 ;;		Unchanged: 0/0
 14193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14195 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14197 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14198 ;;Total ram usage:        1 bytes
 14199 ;; Hardware stack levels used:    1
 14200 ;; This function calls:
 14201 ;;		Nothing
 14202 ;; This function is called by:
 14203 ;;		_MyTimer2ISR
 14204 ;;		_MyUART_ISR
 14205 ;; This function uses a non-reentrant model
 14206 ;;
 14207                           
 14208                           
 14209                           ;psect for function _EUSART_Write
 14210  0F39                     _EUSART_Write:	
 14211                           
 14212                           ;incstack = 0
 14213                           ; Regs used in _EUSART_Write: [wreg]
 14214                           ;EUSART_Write@txData stored from wreg
 14215  0F39  00F0               	movwf	EUSART_Write@txData
 14216  0F3A                     i1l635:	
 14217                           ;eusart.c: 165: {
 14218                           
 14219                           ;eusart.c: 164: while(0 == PIR1bits.TXIF)
 14220                           
 14221  0F3A  0020               	movlb	0	; select bank0
 14222  0F3B  1E10               	btfss	16,4	;volatile
 14223  0F3C  2F3A               	goto	i1l635
 14224                           
 14225                           ;eusart.c: 166: }
 14226                           ;eusart.c: 168: TX1REG = txData;
 14227  0F3D  0870               	movf	EUSART_Write@txData,w
 14228  0F3E  0023               	movlb	3	; select bank3
 14229  0F3F  009A               	movwf	26	;volatile
 14230  0F40  0008               	return
 14231  0F41                     __end_of_EUSART_Write:	
 14232                           
 14233                           	psect	text125
 14234  0E89                     __ptext125:	
 14235 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 14236 ;; Defined at:
 14237 ;;		line 209 in file "mcc_generated_files/eusart.c"
 14238 ;; Parameters:    Size  Location     Type
 14239 ;;		None
 14240 ;; Auto vars:     Size  Location     Type
 14241 ;;		None
 14242 ;; Return value:  Size  Location     Type
 14243 ;;                  1    wreg      void 
 14244 ;; Registers used:
 14245 ;;		None
 14246 ;; Tracked objects:
 14247 ;;		On entry : 0/0
 14248 ;;		On exit  : 0/0
 14249 ;;		Unchanged: 0/0
 14250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14254 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14255 ;;Total ram usage:        0 bytes
 14256 ;; Hardware stack levels used:    1
 14257 ;; This function calls:
 14258 ;;		Nothing
 14259 ;; This function is called by:
 14260 ;;		_EUSART_Initialize
 14261 ;;		_EUSART_Receive_ISR
 14262 ;; This function uses a non-reentrant model
 14263 ;;
 14264                           
 14265                           
 14266                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 14267  0E89                     _EUSART_DefaultOverrunErrorHandler:	
 14268                           
 14269                           ;eusart.c: 212: RC1STAbits.CREN = 0;
 14270                           
 14271                           ;incstack = 0
 14272                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 14273  0E89  0023               	movlb	3	; select bank3
 14274  0E8A  121D               	bcf	29,4	;volatile
 14275                           
 14276                           ;eusart.c: 213: RC1STAbits.CREN = 1;
 14277  0E8B  161D               	bsf	29,4	;volatile
 14278  0E8C  0008               	return
 14279  0E8D                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 14280                           
 14281                           	psect	text126
 14282  0E42                     __ptext126:	
 14283 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 14284 ;; Defined at:
 14285 ;;		line 207 in file "mcc_generated_files/eusart.c"
 14286 ;; Parameters:    Size  Location     Type
 14287 ;;		None
 14288 ;; Auto vars:     Size  Location     Type
 14289 ;;		None
 14290 ;; Return value:  Size  Location     Type
 14291 ;;                  1    wreg      void 
 14292 ;; Registers used:
 14293 ;;		None
 14294 ;; Tracked objects:
 14295 ;;		On entry : 0/0
 14296 ;;		On exit  : 0/0
 14297 ;;		Unchanged: 0/0
 14298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14303 ;;Total ram usage:        0 bytes
 14304 ;; Hardware stack levels used:    1
 14305 ;; This function calls:
 14306 ;;		Nothing
 14307 ;; This function is called by:
 14308 ;;		_EUSART_Initialize
 14309 ;;		_EUSART_Receive_ISR
 14310 ;; This function uses a non-reentrant model
 14311 ;;
 14312                           
 14313                           
 14314                           ;psect for function _EUSART_DefaultFramingErrorHandler
 14315  0E42                     _EUSART_DefaultFramingErrorHandler:	
 14316                           
 14317                           ;incstack = 0
 14318                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 14319  0E42  0008               	return
 14320  0E43                     __end_of_EUSART_DefaultFramingErrorHandler:	
 14321                           
 14322                           	psect	text127
 14323  0E47                     __ptext127:	
 14324 ;; *************** function _EUSART_DefaultErrorHandler *****************
 14325 ;; Defined at:
 14326 ;;		line 217 in file "mcc_generated_files/eusart.c"
 14327 ;; Parameters:    Size  Location     Type
 14328 ;;		None
 14329 ;; Auto vars:     Size  Location     Type
 14330 ;;		None
 14331 ;; Return value:  Size  Location     Type
 14332 ;;                  1    wreg      void 
 14333 ;; Registers used:
 14334 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14335 ;; Tracked objects:
 14336 ;;		On entry : 0/0
 14337 ;;		On exit  : 0/0
 14338 ;;		Unchanged: 0/0
 14339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14344 ;;Total ram usage:        0 bytes
 14345 ;; Hardware stack levels used:    1
 14346 ;; Hardware stack levels required when called:    1
 14347 ;; This function calls:
 14348 ;;		_EUSART_RxDataHandler
 14349 ;; This function is called by:
 14350 ;;		_EUSART_Initialize
 14351 ;;		_EUSART_Receive_ISR
 14352 ;; This function uses a non-reentrant model
 14353 ;;
 14354                           
 14355                           
 14356                           ;psect for function _EUSART_DefaultErrorHandler
 14357  0E47                     _EUSART_DefaultErrorHandler:	
 14358                           
 14359                           ;eusart.c: 218: EUSART_RxDataHandler();
 14360                           
 14361                           ;incstack = 0
 14362                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 14363  0E47  3186  26BA         	fcall	_EUSART_RxDataHandler
 14364  0E49  0008               	return
 14365  0E4A                     __end_of_EUSART_DefaultErrorHandler:	
 14366                           
 14367                           	psect	text128
 14368  06BA                     __ptext128:	
 14369 ;; *************** function _EUSART_RxDataHandler *****************
 14370 ;; Defined at:
 14371 ;;		line 197 in file "mcc_generated_files/eusart.c"
 14372 ;; Parameters:    Size  Location     Type
 14373 ;;		None
 14374 ;; Auto vars:     Size  Location     Type
 14375 ;;		None
 14376 ;; Return value:  Size  Location     Type
 14377 ;;                  1    wreg      void 
 14378 ;; Registers used:
 14379 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14380 ;; Tracked objects:
 14381 ;;		On entry : 0/0
 14382 ;;		On exit  : 0/0
 14383 ;;		Unchanged: 0/0
 14384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14387 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14388 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14389 ;;Total ram usage:        1 bytes
 14390 ;; Hardware stack levels used:    1
 14391 ;; This function calls:
 14392 ;;		Nothing
 14393 ;; This function is called by:
 14394 ;;		_EUSART_Receive_ISR
 14395 ;;		_EUSART_DefaultErrorHandler
 14396 ;; This function uses a non-reentrant model
 14397 ;;
 14398                           
 14399                           
 14400                           ;psect for function _EUSART_RxDataHandler
 14401  06BA                     _EUSART_RxDataHandler:	
 14402                           
 14403                           ;eusart.c: 199: eusartRxBuffer[eusartRxHead++] = RC1REG;
 14404                           
 14405                           ;incstack = 0
 14406                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 14407  06BA  0023               	movlb	3	; select bank3
 14408  06BB  0819               	movf	25,w	;volatile
 14409  06BC  00F0               	movwf	??_EUSART_RxDataHandler
 14410  06BD  0020               	movlb	0	; select bank0
 14411  06BE  083C               	movf	_eusartRxHead,w
 14412  06BF  3E28               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 14413  06C0  0086               	movwf	6
 14414  06C1  0187               	clrf	7
 14415  06C2  0870               	movf	??_EUSART_RxDataHandler,w
 14416  06C3  0081               	movwf	1
 14417  06C4  3001               	movlw	1
 14418  06C5  00F0               	movwf	??_EUSART_RxDataHandler
 14419  06C6  0870               	movf	??_EUSART_RxDataHandler,w
 14420  06C7  07BC               	addwf	_eusartRxHead,f	;volatile
 14421                           
 14422                           ;eusart.c: 200: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 14423  06C8  3008               	movlw	8
 14424  06C9  023C               	subwf	_eusartRxHead,w	;volatile
 14425  06CA  1803               	btfsc	3,0
 14426                           
 14427                           ;eusart.c: 201: {
 14428                           ;eusart.c: 202: eusartRxHead = 0;
 14429  06CB  01BC               	clrf	_eusartRxHead	;volatile
 14430                           
 14431                           ;eusart.c: 203: }
 14432                           ;eusart.c: 204: eusartRxCount++;
 14433  06CC  3001               	movlw	1
 14434  06CD  00F0               	movwf	??_EUSART_RxDataHandler
 14435  06CE  0870               	movf	??_EUSART_RxDataHandler,w
 14436  06CF  07BA               	addwf	_eusartRxCount,f	;volatile
 14437  06D0  0008               	return
 14438  06D1                     __end_of_EUSART_RxDataHandler:	
 14439  007E                     btemp	set	126	;btemp
 14440  007E                     int$flags	set	126
 14441  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    32
    Data        3
    BSS         58
    Persistent  10
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     26      68
    BANK1            80     11      40
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    I2C_Read1ByteRegister@returnValue.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Read2ByteRegister@returnValue.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Write1ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Write2ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    I2C_DO_TX$1919$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_DO_RX$1925$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_DO_TX_EMPTY$1931$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_DO_RX_EMPTY$1937$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_DO_TX_EMPTY$1936	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_DO_TX_EMPTY$1931	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_DO_RX$1930	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_DO_RX$1925	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_DO_TX$1924	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_DO_TX$1919	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_MasterFsm$1918	const PTR FTN()enum E12103 size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    I2C_CallbackReturnStop@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_CallbackReturnReset@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    Absolute function$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    S443$0$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyTimer2ISR(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyTimer2ISR(), TMR2_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyUART_ISR(), EUSART_Receive_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), Absolute function(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), Absolute function(), 

    I2C_SetCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_SetCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> i1_wr1RegCompleteHandler(), i1_rd1RegCompleteHandler(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_SetAddressNackCallback@ptr	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    I2C_SetAddressNackCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> Absolute function(), 

    I2C_SetDataCompleteCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_SetDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> i1_wr1RegCompleteHandler(), i1_rd1RegCompleteHandler(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_SetBuffer@buffer	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(BANK1[1]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(BANK0[1]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    S443$data_ptr	PTR unsigned char  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(BANK1[1]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(BANK0[1]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_Status.data_ptr	PTR unsigned char  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(BANK1[1]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(BANK0[1]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    S443$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_Status.callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    S443$callbackTable	PTR FTN(PTR void ,)enum E97[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_Status.callbackTable	PTR FTN(PTR void ,)enum E97[6] size(2) Largest target is 1
		 -> i1_I2C_CallbackReturnReset(), i1_I2C_CallbackReturnStop(), i1_wr1RegCompleteHandler(), i1_rd1RegCompleteHandler(), 
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    fsmStateTable	const PTR FTN()enum E12103[16] size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyUART_ISR(), EUSART_Receive_ISR(), Absolute function(), 

    rdBlkRegCompleteHandler@ptr.data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    wr2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    wr1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    rd2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    rd1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    S85$data	PTR unsigned char  size(1) Largest target is 0

    bufferBlock.data	PTR unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    i1_I2C_SetAddressNackCallback->i1_I2C_SetCallback
    i1_I2C_MasterWrite->i1_I2C_MasterOperation
    i1_I2C_MasterFsm->i1_I2C_DO_TX
    i1_I2C_DO_TX_EMPTY->i1_I2C_CallbackReturnReset
    i1_I2C_DO_TX_EMPTY->i1_I2C_CallbackReturnStop
    i1_I2C_DO_TX_EMPTY->i1_rd1RegCompleteHandler
    i1_I2C_DO_TX_EMPTY->i1_rd2RegCompleteHandler
    i1_I2C_DO_TX_EMPTY->i1_rdBlkRegCompleteHandler
    i1_I2C_DO_TX_EMPTY->i1_wr1RegCompleteHandler
    i1_I2C_DO_TX_EMPTY->i1_wr2RegCompleteHandler
    i1_I2C_DO_TX->i1_I2C_CallbackReturnReset
    i1_I2C_DO_TX->i1_I2C_CallbackReturnStop
    i1_I2C_DO_TX->i1_rd1RegCompleteHandler
    i1_I2C_DO_TX->i1_rd2RegCompleteHandler
    i1_I2C_DO_TX->i1_rdBlkRegCompleteHandler
    i1_I2C_DO_TX->i1_wr1RegCompleteHandler
    i1_I2C_DO_TX->i1_wr2RegCompleteHandler
    i1_I2C_DO_RX->i1_I2C_CallbackReturnReset
    i1_I2C_DO_RX->i1_I2C_CallbackReturnStop
    i1_I2C_DO_RX->i1_rd1RegCompleteHandler
    i1_I2C_DO_RX->i1_rd2RegCompleteHandler
    i1_I2C_DO_RX->i1_rdBlkRegCompleteHandler
    i1_I2C_DO_RX->i1_wr1RegCompleteHandler
    i1_I2C_DO_RX->i1_wr2RegCompleteHandler
    i1_I2C_DO_ADDRESS_NACK->i1_I2C_CallbackReturnReset
    i1_I2C_DO_ADDRESS_NACK->i1_I2C_CallbackReturnStop
    i1_I2C_DO_ADDRESS_NACK->i1_rd1RegCompleteHandler
    i1_I2C_DO_ADDRESS_NACK->i1_rd2RegCompleteHandler
    i1_I2C_DO_ADDRESS_NACK->i1_rdBlkRegCompleteHandler
    i1_I2C_DO_ADDRESS_NACK->i1_wr1RegCompleteHandler
    i1_I2C_DO_ADDRESS_NACK->i1_wr2RegCompleteHandler
    i1_wr2RegCompleteHandler->i1_I2C_SetDataCompleteCallback
    i1_wr1RegCompleteHandler->i1_I2C_SetDataCompleteCallback
    i1_rdBlkRegCompleteHandler->i1_I2C_SetDataCompleteCallback
    i1_rd2RegCompleteHandler->i1_I2C_SetDataCompleteCallback
    i1_rd1RegCompleteHandler->i1_I2C_SetDataCompleteCallback
    i1_I2C_SetDataCompleteCallback->i1_I2C_SetCallback
    _MyUART_ISR->_EUSART_Write
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _TMR2_WriteTimer->_TMR2_Counter8BitSet
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _I2C_SetAddressNackCallback->_I2C_SetCallback
    _I2C_MasterWrite->_I2C_MasterOperation
    _I2C_MasterFsm->_I2C_DO_TX
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnReset
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnStop
    _I2C_DO_TX_EMPTY->_rd1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rd2RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rdBlkRegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr2RegCompleteHandler
    _I2C_DO_TX->_I2C_CallbackReturnReset
    _I2C_DO_TX->_I2C_CallbackReturnStop
    _I2C_DO_TX->_rd1RegCompleteHandler
    _I2C_DO_TX->_rd2RegCompleteHandler
    _I2C_DO_TX->_rdBlkRegCompleteHandler
    _I2C_DO_TX->_wr1RegCompleteHandler
    _I2C_DO_TX->_wr2RegCompleteHandler
    _I2C_DO_SEND_ADR_WRITE->_I2C_MasterSendTxData
    _I2C_DO_RX->_I2C_CallbackReturnReset
    _I2C_DO_RX->_I2C_CallbackReturnStop
    _I2C_DO_RX->_rd1RegCompleteHandler
    _I2C_DO_RX->_rd2RegCompleteHandler
    _I2C_DO_RX->_rdBlkRegCompleteHandler
    _I2C_DO_RX->_wr1RegCompleteHandler
    _I2C_DO_RX->_wr2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnReset
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnStop
    _I2C_DO_ADDRESS_NACK->_rd1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rd2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rdBlkRegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr2RegCompleteHandler
    _wr2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _wr1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rdBlkRegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _I2C_SetDataCompleteCallback->_I2C_SetCallback

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _TMR2_CallBack->_MyTimer2ISR
    _MyTimer2ISR->_I2C_Read1ByteRegister
    _MyTimer2ISR->i1_I2C_Write1ByteRegister
    i1_I2C_MasterWrite->i1_I2C_MasterOperation
    i1_I2C_Poller->i1_I2C_MasterFsm

Critical Paths under _main in BANK1

    _main->_I2C_Write1ByteRegister
    _I2C_MasterWrite->_I2C_MasterOperation
    _I2C_Poller->_I2C_MasterFsm

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  100571
                                              9 BANK1      2     2      0
       _EUSART_SetRxInterruptHandler
             _I2C_Write1ByteRegister
                  _SYSTEM_Initialize
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
                    _TMR2_WriteTimer
 ---------------------------------------------------------------------------------
 (1) _TMR2_WriteTimer                                      1     1      0      44
                                             13 BANK0      1     1      0
                _TMR2_Counter8BitSet
 ---------------------------------------------------------------------------------
 (2) _TMR2_Counter8BitSet                                  1     1      0      22
                                             12 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
                         _TMR2_Start
 ---------------------------------------------------------------------------------
 (2) _TMR2_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     642
                  _EUSART_Initialize
                     _I2C_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM3_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     174
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR2_SetInterruptHandler                             2     0      2     174
                                             12 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     468
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     174
                                             12 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                             12 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                             12 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                             12 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _I2C_Write1ByteRegister                               4     2      2   99537
                                              5 BANK1      4     2      2
                          _I2C_Close
                    _I2C_MasterWrite
                           _I2C_Open
         _I2C_SetAddressNackCallback
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (2) _I2C_SetAddressNackCallback                           4     1      3    2189
                                             17 BANK0      4     1      3
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (2) _I2C_Open                                             3     3      0      68
                                             12 BANK0      3     3      0
                 _I2C_MasterClearIrq
                     _I2C_MasterOpen
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterOpen                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_MasterWrite                                      0     0      0   91367
                _I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterOperation                                  3     3      0   91367
                                             25 BANK0      1     1      0
                                              3 BANK1      2     2      0
                    _I2C_MasterStart
                         _I2C_Poller
 ---------------------------------------------------------------------------------
 (4) _I2C_Poller                                           0     0      0   91197
                      _I2C_MasterFsm
             _I2C_MasterWaitForEvent
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterWaitForEvent                               0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterFsm                                        3     3      0   91197
                                              0 BANK1      3     3      0
                _I2C_DO_ADDRESS_NACK *
                        _I2C_DO_IDLE *
                        _I2C_DO_RCEN *
                       _I2C_DO_RESET *
                          _I2C_DO_RX *
                      _I2C_DO_RX_ACK *
             _I2C_DO_RX_NACK_RESTART *
                _I2C_DO_RX_NACK_STOP *
               _I2C_DO_SEND_ADR_READ *
              _I2C_DO_SEND_ADR_WRITE *
                _I2C_DO_SEND_RESTART *
           _I2C_DO_SEND_RESTART_READ *
          _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_DO_SEND_STOP *
                          _I2C_DO_TX *
                    _I2C_DO_TX_EMPTY *
                 _I2C_MasterClearIrq
                   _I2C_MasterIsNack
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_TX_EMPTY                                      1     1      0   22751
                                             22 BANK0      1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
                   _I2C_MasterSetIrq
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterSetIrq                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_TX                                            3     3      0   22882
                                             22 BANK0      3     3      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
           _I2C_DO_SEND_RESTART_READ
          _I2C_DO_SEND_RESTART_WRITE
                   _I2C_DO_SEND_STOP
                   _I2C_MasterIsNack
               _I2C_MasterSendTxData
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterIsNack                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_SEND_RESTART_WRITE                            0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_SEND_RESTART_READ                             0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_SEND_ADR_WRITE                                0     0      0      31
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_SEND_ADR_READ                                 0     0      0      31
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterSendTxData                                 1     1      0      31
                                             12 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RX_ACK                                        0     0      0       0
                  _I2C_MasterSendAck
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RX                                            1     1      0   22751
                                             22 BANK0      1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
             _I2C_DO_RX_NACK_RESTART
                _I2C_DO_RX_NACK_STOP
                _I2C_MasterGetRxData
                  _I2C_MasterSendAck
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterSendAck                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterGetRxData                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RX_NACK_STOP                                  0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RX_NACK_RESTART                               0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterSendNack                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RESET                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RCEN                                          0     0      0       0
                  _I2C_MasterStartRx
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterStartRx                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_ADDRESS_NACK                                  1     1      0   22751
                                             22 BANK0      1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _wr2RegCompleteHandler                                1     0      1    4479
                                             21 BANK0      1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _wr1RegCompleteHandler                                1     0      1    4479
                                             21 BANK0      1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _rdBlkRegCompleteHandler                              1     0      1    4510
                                             21 BANK0      1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _rd2RegCompleteHandler                                1     0      1    4479
                                             21 BANK0      1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _rd1RegCompleteHandler                                1     0      1    4519
                                             21 BANK0      1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (2) _I2C_SetDataCompleteCallback                          4     1      3    2909
                                             17 BANK0      4     1      3
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (3) _I2C_SetCallback                                      5     2      3    1117
                                             12 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (2) _I2C_SetBuffer                                        4     2      2    1539
                                             12 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_SEND_STOP                                     0     0      0       0
                     _I2C_MasterStop
 ---------------------------------------------------------------------------------
 (8) _I2C_MasterStop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_SEND_RESTART                                  0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (8) _I2C_MasterEnableRestart                              0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_CallbackReturnStop                               1     0      1       0
                                             21 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (7) _I2C_CallbackReturnReset                              1     0      1     285
                                             21 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (20) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (4) _I2C_MasterStart                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Close                                            2     2      0      37
                                             12 BANK0      2     2      0
                 _I2C_MasterClearIrq
                    _I2C_MasterClose
               _I2C_MasterDisableIrq
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterDisableIrq                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterClose                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterClearIrq                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 20
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                          1     1      0   42708
                                             11 BANK0      1     1      0
                   Absolute function *
                 _EUSART_Receive_ISR *
                         _MyUART_ISR *
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (11) _TMR2_ISR                                            0     0      0   42509
                      _TMR2_CallBack
 ---------------------------------------------------------------------------------
 (12) _TMR2_CallBack                                       0     0      0   42509
                   Absolute function *
                        _MyTimer2ISR *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (13) _TMR2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _MyTimer2ISR                                         2     2      0   42509
                                              9 BANK0      2     2      0
                       _EUSART_Write
              _I2C_Read1ByteRegister
                 _PWM3_LoadDutyValue
           i1_I2C_Write1ByteRegister
 ---------------------------------------------------------------------------------
 (14) i1_I2C_Write1ByteRegister                            4     2      2   21142
                                              5 BANK0      4     2      2
                        i1_I2C_Close
                  i1_I2C_MasterWrite
                         i1_I2C_Open
       i1_I2C_SetAddressNackCallback
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) _PWM3_LoadDutyValue                                  4     2      2     196
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (14) _I2C_Read1ByteRegister                               4     3      1   21149
                                              5 BANK0      4     3      1
                        i1_I2C_Close
                  i1_I2C_MasterWrite
                         i1_I2C_Open
       i1_I2C_SetAddressNackCallback
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (15) i1_I2C_SetAddressNackCallback                        4     1      3     406
                                              5 COMMON     4     1      3
                  i1_I2C_SetCallback
 ---------------------------------------------------------------------------------
 (15) i1_I2C_Open                                          3     3      0      46
                                              0 COMMON     3     3      0
               i1_I2C_MasterClearIrq
                   i1_I2C_MasterOpen
 ---------------------------------------------------------------------------------
 (16) i1_I2C_MasterOpen                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i1_I2C_MasterWrite                                   0     0      0   19120
              i1_I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (16) i1_I2C_MasterOperation                               3     3      0   19120
                                             13 COMMON     1     1      0
                                              3 BANK0      2     2      0
                  i1_I2C_MasterStart
                       i1_I2C_Poller
 ---------------------------------------------------------------------------------
 (17) i1_I2C_Poller                                        0     0      0   18950
                    i1_I2C_MasterFsm
           i1_I2C_MasterWaitForEvent
 ---------------------------------------------------------------------------------
 (18) i1_I2C_MasterWaitForEvent                            0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i1_I2C_MasterFsm                                     3     3      0   18950
                                              0 BANK0      3     3      0
              i1_I2C_DO_ADDRESS_NACK *
                      i1_I2C_DO_IDLE *
                      i1_I2C_DO_RCEN *
                     i1_I2C_DO_RESET *
                        i1_I2C_DO_RX *
                    i1_I2C_DO_RX_ACK *
           i1_I2C_DO_RX_NACK_RESTART *
              i1_I2C_DO_RX_NACK_STOP *
             i1_I2C_DO_SEND_ADR_READ *
            i1_I2C_DO_SEND_ADR_WRITE *
              i1_I2C_DO_SEND_RESTART *
         i1_I2C_DO_SEND_RESTART_READ *
        i1_I2C_DO_SEND_RESTART_WRITE *
                 i1_I2C_DO_SEND_STOP *
                        i1_I2C_DO_TX *
                  i1_I2C_DO_TX_EMPTY *
               i1_I2C_MasterClearIrq
                 i1_I2C_MasterIsNack
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_TX_EMPTY                                   1     1      0    4696
                                             10 COMMON     1     1      0
                   Absolute function *
          i1_I2C_CallbackReturnReset *
           i1_I2C_CallbackReturnStop *
              i1_I2C_DO_SEND_RESTART
                 i1_I2C_DO_SEND_STOP
                 i1_I2C_MasterSetIrq
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (20) i1_I2C_MasterSetIrq                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_TX                                         3     3      0    4818
                                             10 COMMON     3     3      0
                   Absolute function *
          i1_I2C_CallbackReturnReset *
           i1_I2C_CallbackReturnStop *
         i1_I2C_DO_SEND_RESTART_READ
        i1_I2C_DO_SEND_RESTART_WRITE
                 i1_I2C_DO_SEND_STOP
                 i1_I2C_MasterIsNack
             i1_I2C_MasterSendTxData
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (19) i1_I2C_MasterIsNack                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (20) i1_I2C_DO_SEND_RESTART_WRITE                         0     0      0       0
          i1_I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (20) i1_I2C_DO_SEND_RESTART_READ                          0     0      0       0
          i1_I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_SEND_ADR_WRITE                             0     0      0      22
             i1_I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_SEND_ADR_READ                              0     0      0      22
             i1_I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (20) i1_I2C_MasterSendTxData                              1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_RX_ACK                                     0     0      0       0
                i1_I2C_MasterSendAck
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_RX                                         1     1      0    4696
                                             10 COMMON     1     1      0
                   Absolute function *
          i1_I2C_CallbackReturnReset *
           i1_I2C_CallbackReturnStop *
           i1_I2C_DO_RX_NACK_RESTART
              i1_I2C_DO_RX_NACK_STOP
              i1_I2C_MasterGetRxData
                i1_I2C_MasterSendAck
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (20) i1_I2C_MasterSendAck                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (20) i1_I2C_MasterGetRxData                               0     0      0       0
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_RX_NACK_STOP                               0     0      0       0
               i1_I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_RX_NACK_RESTART                            0     0      0       0
               i1_I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (20) i1_I2C_MasterSendNack                                0     0      0       0
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_RESET                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_RCEN                                       0     0      0       0
                i1_I2C_MasterStartRx
 ---------------------------------------------------------------------------------
 (20) i1_I2C_MasterStartRx                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_ADDRESS_NACK                               1     1      0    4696
                                             10 COMMON     1     1      0
                   Absolute function *
          i1_I2C_CallbackReturnReset *
           i1_I2C_CallbackReturnStop *
              i1_I2C_DO_SEND_RESTART
                 i1_I2C_DO_SEND_STOP
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (20) i1_wr2RegCompleteHandler                             1     0      1     914
                                              9 COMMON     1     0      1
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (20) i1_wr1RegCompleteHandler                             1     0      1     914
                                              9 COMMON     1     0      1
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (20) i1_rdBlkRegCompleteHandler                           1     0      1     936
                                              9 COMMON     1     0      1
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (20) i1_rd2RegCompleteHandler                             1     0      1     914
                                              9 COMMON     1     0      1
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (20) i1_rd1RegCompleteHandler                             1     0      1     914
                                              9 COMMON     1     0      1
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (15) i1_I2C_SetDataCompleteCallback                       4     1      3     666
                                              5 COMMON     4     1      3
                  i1_I2C_SetCallback
 ---------------------------------------------------------------------------------
 (16) i1_I2C_SetCallback                                   5     2      3     258
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (15) i1_I2C_SetBuffer                                     4     2      2     226
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (20) i1_I2C_DO_SEND_STOP                                  0     0      0       0
                   i1_I2C_MasterStop
 ---------------------------------------------------------------------------------
 (21) i1_I2C_MasterStop                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (20) i1_I2C_DO_SEND_RESTART                               0     0      0       0
          i1_I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (21) i1_I2C_MasterEnableRestart                           0     0      0       0
 ---------------------------------------------------------------------------------
 (20) i1_I2C_CallbackReturnStop                            1     0      1       0
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (20) i1_I2C_CallbackReturnReset                           1     0      1     104
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (17) i1_I2C_MasterStart                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i1_I2C_Close                                         2     2      0      24
                                              0 COMMON     2     2      0
               i1_I2C_MasterClearIrq
                  i1_I2C_MasterClose
             i1_I2C_MasterDisableIrq
 ---------------------------------------------------------------------------------
 (16) i1_I2C_MasterDisableIrq                              0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i1_I2C_MasterClose                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i1_I2C_MasterClearIrq                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _MyUART_ISR                                          5     5      0     199
                                              1 COMMON     5     5      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (14) _EUSART_Write                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (12) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (12) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (20) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 21
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_SetRxInterruptHandler
   _I2C_Write1ByteRegister
     _I2C_Close
       _I2C_MasterClearIrq
       _I2C_MasterClose
       _I2C_MasterDisableIrq
     _I2C_MasterWrite
       _I2C_MasterOperation
         _I2C_MasterStart
         _I2C_Poller
           _I2C_MasterFsm
             _I2C_DO_ADDRESS_NACK *
               Absolute function(Fake) *
               _I2C_CallbackReturnReset *
               _I2C_CallbackReturnStop *
               _I2C_DO_SEND_RESTART *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_STOP *
                 _I2C_MasterStop
               _rd1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rd2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rdBlkRegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
             _I2C_DO_IDLE *
             _I2C_DO_RCEN *
               _I2C_MasterStartRx
             _I2C_DO_RESET *
             _I2C_DO_RX *
               Absolute function(Fake) *
               _I2C_CallbackReturnReset *
               _I2C_CallbackReturnStop *
               _I2C_DO_RX_NACK_RESTART *
                 _I2C_MasterSendNack
               _I2C_DO_RX_NACK_STOP *
                 _I2C_MasterSendNack
               _I2C_MasterGetRxData *
               _I2C_MasterSendAck *
               _rd1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rd2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rdBlkRegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
             _I2C_DO_RX_ACK *
               _I2C_MasterSendAck
             _I2C_DO_RX_NACK_RESTART *
               _I2C_MasterSendNack
             _I2C_DO_RX_NACK_STOP *
               _I2C_MasterSendNack
             _I2C_DO_SEND_ADR_READ *
               _I2C_MasterSendTxData
             _I2C_DO_SEND_ADR_WRITE *
               _I2C_MasterSendTxData
             _I2C_DO_SEND_RESTART *
               _I2C_MasterEnableRestart
             _I2C_DO_SEND_RESTART_READ *
               _I2C_MasterEnableRestart
             _I2C_DO_SEND_RESTART_WRITE *
               _I2C_MasterEnableRestart
             _I2C_DO_SEND_STOP *
               _I2C_MasterStop
             _I2C_DO_TX *
               Absolute function(Fake) *
               _I2C_CallbackReturnReset *
               _I2C_CallbackReturnStop *
               _I2C_DO_SEND_RESTART_READ *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_RESTART_WRITE *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_STOP *
                 _I2C_MasterStop
               _I2C_MasterIsNack *
               _I2C_MasterSendTxData *
               _rd1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rd2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rdBlkRegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
             _I2C_DO_TX_EMPTY *
               Absolute function(Fake) *
               _I2C_CallbackReturnReset *
               _I2C_CallbackReturnStop *
               _I2C_DO_SEND_RESTART *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_STOP *
                 _I2C_MasterStop
               _I2C_MasterSetIrq *
               _rd1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rd2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rdBlkRegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
             _I2C_MasterClearIrq *
             _I2C_MasterIsNack *
           _I2C_MasterWaitForEvent
     _I2C_Open
       _I2C_MasterClearIrq
       _I2C_MasterOpen
     _I2C_SetAddressNackCallback
       _I2C_SetCallback
     _I2C_SetBuffer
     _I2C_SetDataCompleteCallback
       _I2C_SetCallback
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
     _I2C_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM3_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
   _TMR2_SetInterruptHandler
   _TMR2_StartTimer
     _TMR2_Start
   _TMR2_WriteTimer
     _TMR2_Counter8BitSet

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _MyUART_ISR *
     _EUSART_Write
   _TMR2_ISR *
     _TMR2_CallBack
       Absolute function(Fake) *
       _MyTimer2ISR *
         _EUSART_Write
         _I2C_Read1ByteRegister
           i1_I2C_Close
             i1_I2C_MasterClearIrq
             i1_I2C_MasterClose
             i1_I2C_MasterDisableIrq
           i1_I2C_MasterWrite
             i1_I2C_MasterOperation
               i1_I2C_MasterStart
               i1_I2C_Poller
                 i1_I2C_MasterFsm
                   i1_I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     i1_I2C_CallbackReturnReset *
                     i1_I2C_CallbackReturnStop *
                     i1_I2C_DO_SEND_RESTART *
                       i1_I2C_MasterEnableRestart
                     i1_I2C_DO_SEND_STOP *
                       i1_I2C_MasterStop
                     i1_rd1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rd2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rdBlkRegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                   i1_I2C_DO_IDLE *
                   i1_I2C_DO_RCEN *
                     i1_I2C_MasterStartRx
                   i1_I2C_DO_RESET *
                   i1_I2C_DO_RX *
                     Absolute function(Fake) *
                     i1_I2C_CallbackReturnReset *
                     i1_I2C_CallbackReturnStop *
                     i1_I2C_DO_RX_NACK_RESTART *
                       i1_I2C_MasterSendNack
                     i1_I2C_DO_RX_NACK_STOP *
                       i1_I2C_MasterSendNack
                     i1_I2C_MasterGetRxData *
                     i1_I2C_MasterSendAck *
                     i1_rd1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rd2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rdBlkRegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                   i1_I2C_DO_RX_ACK *
                     i1_I2C_MasterSendAck
                   i1_I2C_DO_RX_NACK_RESTART *
                     i1_I2C_MasterSendNack
                   i1_I2C_DO_RX_NACK_STOP *
                     i1_I2C_MasterSendNack
                   i1_I2C_DO_SEND_ADR_READ *
                     i1_I2C_MasterSendTxData
                   i1_I2C_DO_SEND_ADR_WRITE *
                     i1_I2C_MasterSendTxData
                   i1_I2C_DO_SEND_RESTART *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_RESTART_READ *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_RESTART_WRITE *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_STOP *
                     i1_I2C_MasterStop
                   i1_I2C_DO_TX *
                     Absolute function(Fake) *
                     i1_I2C_CallbackReturnReset *
                     i1_I2C_CallbackReturnStop *
                     i1_I2C_DO_SEND_RESTART_READ *
                       i1_I2C_MasterEnableRestart
                     i1_I2C_DO_SEND_RESTART_WRITE *
                       i1_I2C_MasterEnableRestart
                     i1_I2C_DO_SEND_STOP *
                       i1_I2C_MasterStop
                     i1_I2C_MasterIsNack *
                     i1_I2C_MasterSendTxData *
                     i1_rd1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rd2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rdBlkRegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                   i1_I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     i1_I2C_CallbackReturnReset *
                     i1_I2C_CallbackReturnStop *
                     i1_I2C_DO_SEND_RESTART *
                       i1_I2C_MasterEnableRestart
                     i1_I2C_DO_SEND_STOP *
                       i1_I2C_MasterStop
                     i1_I2C_MasterSetIrq *
                     i1_rd1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rd2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rdBlkRegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                   i1_I2C_MasterClearIrq *
                   i1_I2C_MasterIsNack *
                 i1_I2C_MasterWaitForEvent
           i1_I2C_Open
             i1_I2C_MasterClearIrq
             i1_I2C_MasterOpen
           i1_I2C_SetAddressNackCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
           i1_I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
         _PWM3_LoadDutyValue
         i1_I2C_Write1ByteRegister
           i1_I2C_Close
             i1_I2C_MasterClearIrq
             i1_I2C_MasterClose
             i1_I2C_MasterDisableIrq
           i1_I2C_MasterWrite
             i1_I2C_MasterOperation
               i1_I2C_MasterStart
               i1_I2C_Poller
                 i1_I2C_MasterFsm
                   i1_I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     i1_I2C_CallbackReturnReset *
                     i1_I2C_CallbackReturnStop *
                     i1_I2C_DO_SEND_RESTART *
                       i1_I2C_MasterEnableRestart
                     i1_I2C_DO_SEND_STOP *
                       i1_I2C_MasterStop
                     i1_rd1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rd2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rdBlkRegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                   i1_I2C_DO_IDLE *
                   i1_I2C_DO_RCEN *
                     i1_I2C_MasterStartRx
                   i1_I2C_DO_RESET *
                   i1_I2C_DO_RX *
                     Absolute function(Fake) *
                     i1_I2C_CallbackReturnReset *
                     i1_I2C_CallbackReturnStop *
                     i1_I2C_DO_RX_NACK_RESTART *
                       i1_I2C_MasterSendNack
                     i1_I2C_DO_RX_NACK_STOP *
                       i1_I2C_MasterSendNack
                     i1_I2C_MasterGetRxData *
                     i1_I2C_MasterSendAck *
                     i1_rd1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rd2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rdBlkRegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                   i1_I2C_DO_RX_ACK *
                     i1_I2C_MasterSendAck
                   i1_I2C_DO_RX_NACK_RESTART *
                     i1_I2C_MasterSendNack
                   i1_I2C_DO_RX_NACK_STOP *
                     i1_I2C_MasterSendNack
                   i1_I2C_DO_SEND_ADR_READ *
                     i1_I2C_MasterSendTxData
                   i1_I2C_DO_SEND_ADR_WRITE *
                     i1_I2C_MasterSendTxData
                   i1_I2C_DO_SEND_RESTART *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_RESTART_READ *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_RESTART_WRITE *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_STOP *
                     i1_I2C_MasterStop
                   i1_I2C_DO_TX *
                     Absolute function(Fake) *
                     i1_I2C_CallbackReturnReset *
                     i1_I2C_CallbackReturnStop *
                     i1_I2C_DO_SEND_RESTART_READ *
                       i1_I2C_MasterEnableRestart
                     i1_I2C_DO_SEND_RESTART_WRITE *
                       i1_I2C_MasterEnableRestart
                     i1_I2C_DO_SEND_STOP *
                       i1_I2C_MasterStop
                     i1_I2C_MasterIsNack *
                     i1_I2C_MasterSendTxData *
                     i1_rd1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rd2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rdBlkRegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                   i1_I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     i1_I2C_CallbackReturnReset *
                     i1_I2C_CallbackReturnStop *
                     i1_I2C_DO_SEND_RESTART *
                       i1_I2C_MasterEnableRestart
                     i1_I2C_DO_SEND_STOP *
                       i1_I2C_MasterStop
                     i1_I2C_MasterSetIrq *
                     i1_rd1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rd2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rdBlkRegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                   i1_I2C_MasterClearIrq *
                   i1_I2C_MasterIsNack *
                 i1_I2C_MasterWaitForEvent
           i1_I2C_Open
             i1_I2C_MasterClearIrq
             i1_I2C_MasterOpen
           i1_I2C_SetAddressNackCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
           i1_I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
       _TMR2_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1A      44       5       85.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      B      28       7       50.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      7A      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      7A      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Mar 30 18:22:57 2020

                ?_EUSART_SetRxInterruptHandler 0049                         ??_I2C_DO_SEND_ADR_READ 0049  
                                  MyUART_ISR@c 0075                    __size_of_I2C_MasterSendNack 0004  
                           __size_of_I2C_Close 001E               __end_of_TMR2_SetInterruptHandler 0F1F  
                                            _G 0035                        ??_I2C_DO_SEND_ADR_WRITE 004A  
                                  __CFG_CP$OFF 0000                            __size_of_I2C_Poller 000A  
                        ??_I2C_DO_SEND_RESTART 0049                                    ?i1_I2C_Open 0070  
                                  __CFG_LVP$ON 0000                   __size_of_I2C_MasterOperation 001C  
                __size_of_I2C_MasterSendTxData 0006                                            l321 0315  
                                          l403 02B8                                            l544 0EC1  
                                          l387 022C                                            _PR2 001B  
                                          _Pos 0032                         ??_EUSART_RxDataHandler 0070  
                       _I2C_MasterWaitForEvent 0EC1                 ?_EUSART_SetFramingErrorHandler 0049  
                     ?i1_rd2RegCompleteHandler 0079                                _TMR2_Initialize 073F  
                                 __CFG_BORV$LO 0000                                            wreg 0009  
                                 ?i1_I2C_DO_RX 0070                                   ?i1_I2C_DO_TX 0070  
                                 __CFG_IESO$ON 0000                          _I2C_DO_RCEN$intlevel0 0FA1  
                 ??_I2C_SetAddressNackCallback 0051                       ?i1_wr2RegCompleteHandler 0079  
                                 ?i1_I2C_Close 0070                         _I2C_Write1ByteRegister 03F7  
                  ??i1_I2C_MasterEnableRestart 0070                       ??_I2C_CallbackReturnStop 0053  
                                 _I2C_DO_RESET 0F8A                                   __CFG_ZCD$OFF 0000  
                      ??_rd2RegCompleteHandler 0053                                           l4005 0F65  
                                         l4031 0F5D                                           l4023 0F75  
                                         l4017 0F7D                                           l4043 0EF3  
                                         l4039 0EED                                           l4057 0F85  
                                         l4065 07F3                                           l4073 0FCA  
                                         l4137 0FA1                                           l4171 0F8E  
                                         l4165 0F6D                                           l4407 0630  
                                         l3831 057B                                           l6241 01E1  
                                         l6233 01F5                        ??i1_I2C_MasterGetRxData 0070  
                                         l6243 01EC                                           l6235 01C5  
                                         l6077 03F9                                           l6087 0423  
                                         l6239 01D3                                           l3973 0717  
                                         l3949 0701                                           l3957 06EB  
                                         l3965 06D5                                           l3981 0655  
                                         l5821 0209                                           l5813 01FF  
                                         l5831 020F                                           l5903 04FC  
                                         l5825 020C                                           l5817 0206  
                                         l3993 0F4D                                           l5843 029B  
                                         l5861 02BD                                           l5933 054E  
                                         l5871 04C5                                           l5839 0245  
                                         l3999 0F55                                           l5881 04CC  
                                         l5857 02BA                                           l5875 04C8  
                                         l5867 02C0                                           l5963 0FA7  
                                         l5869 04C2                                           l5893 04F6  
                                         l5887 04CF                                           l5991 0682  
                                         l5897 04F9                                           l5889 04ED  
                                         l5995 0687                                           l5989 067C  
               __size_ofi1_I2C_DO_SEND_RESTART 0004                                           _LATA 010C  
                                         _LATB 010D                                           _LATC 010E  
                                         u4010 01D1                                           u4030 01EA  
                                         _T2PR 001B                                           u4057 01D9  
                                         u4067 01F0                  __end_ofi1_I2C_DO_SEND_RESTART 0EA1  
                                         _TMR2 001A                                           _WPUA 020C  
                                         _WPUB 020D                                           _WPUC 020E  
                                         _Data 0038                        ??_wr2RegCompleteHandler 0053  
                                 __CFG_WRT$OFF 0000                                  __CFG_FCMEN$ON 0000  
                                         _Type 0037                                           _main 018B  
                     ?_I2C_CallbackReturnReset 0052                                           fsr0h 0005  
                                         fsr1h 0007                                           indf0 0000  
                                         fsr0l 0004                                           indf1 0001  
                                         fsr1l 0006                               __end_of_I2C_Open 0318  
                                i1_I2C_DO_IDLE 0ECE                                           btemp 007E  
                                i1_I2C_DO_RCEN 0EE3                 __end_ofi1_I2C_DO_SEND_ADR_READ 0F49  
                                __CFG_BOREN$ON 0000                                           start 0024  
                 i1I2C_Write1ByteRegister@data 0043                                  __CFG_MCLRE$ON 0000  
                          _TMR2_Counter8BitSet 07FB               __size_of_rdBlkRegCompleteHandler 001D  
                _I2C_DO_RX_NACK_STOP$intlevel0 0F75                        ??i1_I2C_DO_ADDRESS_NACK 007A  
                                _I2C_DO_TX$794 0054                               ?_I2C_MasterClose 0070  
                                ?i1_I2C_Poller 0070                                  __CFG_PLLEN$ON 0000  
                                ?_EUSART_Write 0070            __size_of_I2C_SetAddressNackCallback 000D  
               __size_of_OSCILLATOR_Initialize 0007                               ?_I2C_MasterStart 0070  
                                _I2C_DO_RX_ACK 0F69                               ?_I2C_MasterWrite 0070  
                __end_of_OSCILLATOR_Initialize 0F39                ??i1_I2C_SetDataCompleteCallback 0078  
                        i1I2C_Open@returnValue 0072                                          ?_main 0070  
                                __CFG_WDTE$OFF 0000                          _I2C_Read1ByteRegister 045D  
                                        _T2CON 001C                       ??i1_I2C_MasterDisableIrq 0070  
                                        _T2HLT 001D                                          i1l123 001F  
                                        _T2TMR 001A                                          i1l118 0017  
                                        i1l321 03C2                                          _T2RST 001F  
                                        i1l403 036D                    __end_ofi1_I2C_MasterSendAck 0E95  
                                        i1l544 0EB1                                          i1l635 0F3A  
                                        i1l387 0278                                          i1l861 00AD  
                                        i1l872 00B4                                          i1l882 00BB  
                                        i1l867 00B0                                          i1l877 00B7  
                                        i1l869 00B2                                          i1l879 00B9  
                 __size_of_I2C_DO_RX_NACK_STOP 0008                              ??_I2C_DO_TX_EMPTY 0053  
                                        _TRISA 008C                                          _TRISB 008D  
                                        _TRISC 008E                                          _RXPPS 0E24  
                                        _Angle 0062                    __end_ofi1_I2C_MasterStartRx 0E5F  
                         ?_TMR2_Counter8BitSet 0070                              __end_of_I2C_DO_RX 02DA  
                            __end_of_I2C_DO_TX 024C                               __end_of_TMR2_ISR 0EDD  
                      ??i1_I2C_MasterOperation 007D                                    ?_TMR2_Start 0070  
                            __end_of_I2C_Close 0633                         __size_of_I2C_MasterFsm 0027  
               I2C_MasterOperation@returnValue 00C1                                     _MyUART_ISR 0045  
                            ??i1_I2C_MasterFsm 003D                        _I2C_MasterEnableRestart 0E71  
                          _I2C_DO_RX$intlevel0 029B                        __end_of_PWM3_Initialize 0FDC  
           _I2C_DO_SEND_RESTART_READ$intlevel0 0F4D                                 i1_I2C_DO_RESET 0ED3  
                                        pclath 000A                               ?_I2C_SetCallback 0049  
              __end_ofi1_I2C_DO_SEND_ADR_WRITE 0F32                   I2C_SetAddressNackCallback@cb 004E  
                               ?i1_I2C_DO_IDLE 0070                                 ?i1_I2C_DO_RCEN 0070  
                                        status 0003                                          wtemp0 007E  
                            ?_I2C_DO_SEND_STOP 0070                     __size_ofi1_I2C_DO_TX_EMPTY 0025  
                       __size_of_I2C_SetBuffer 0015                                _TMR2_StartTimer 0E83  
                            ??i1_I2C_SetBuffer 0072                            __size_ofi1_I2C_Open 0037  
                           ??_I2C_DO_SEND_STOP 0049                                  _fsmStateTable 05F5  
                              __initialization 0026                                  ??_MyTimer2ISR 0046  
                    i1_I2C_MasterEnableRestart 0E56                                   __end_of_main 01FB  
            __size_of_I2C_DO_SEND_RESTART_READ 0008                      ?_I2C_DO_SEND_RESTART_READ 0070  
                               ??i1_I2C_Poller 007D                                 ??_EUSART_Write 0070  
                               ?_I2C_DO_RX_ACK 0070                        __end_of_TMR2_Initialize 0754  
                               __CFG_LPBOR$OFF 0000                    ?_INTERRUPT_InterruptManager 0070  
              __end_ofi1_rd2RegCompleteHandler 079B                 ??_EUSART_SetRxInterruptHandler 004B  
                     _TMR2_SetInterruptHandler 0F19                                         ??_main 00C6  
                 __end_ofi1_I2C_MasterClearIrq 0E4D                              ?_I2C_MasterIsNack 0070  
              __end_ofi1_wr2RegCompleteHandler 07BB                                _TMR2_WriteTimer 0F1F  
             __end_ofi1_I2C_DO_RX_NACK_RESTART 0EB1                              ?_I2C_MasterSetIrq 0070  
                           ??_I2C_MasterIsNack 0049                           i1I2C_SetCallback@idx 0074  
                         i1I2C_SetCallback@ptr 0072                          ??_TMR2_Counter8BitSet 0049  
                           ??_I2C_MasterSetIrq 0049      __end_of_EUSART_DefaultFramingErrorHandler 0E43  
   __size_of_EUSART_DefaultFramingErrorHandler 0001            ??_EUSART_DefaultFramingErrorHandler 0070  
           ?_EUSART_DefaultFramingErrorHandler 0070              _EUSART_DefaultFramingErrorHandler 0E42  
                       __end_ofi1_I2C_DO_RESET 0ED8                     _EUSART_OverrunErrorHandler 005B  
                      ??i1_I2C_DO_RX_NACK_STOP 0070                __end_of_I2C_CallbackReturnReset 0EF5  
              __size_of_I2C_CallbackReturnStop 0006                  I2C_SetDataCompleteCallback@cb 004E  
                                       _ANSELA 018C                                         _ANSELB 018D  
                                       _ANSELC 018E                                         _BORCON 0116  
                                 ??_I2C_Poller 0056                                         _RC1REG 0199  
                                       _RA2PPS 0E92                                         _RC1STA 019D  
                                       _RB4PPS 0E9C                                         _RB6PPS 0E9E  
                                       _RB7PPS 0E9F                                         _ODCONA 028C  
                                       _ODCONB 028D                                         _ODCONC 028E  
                                       i1l3219 06A1                            _I2C_DO_TX$intlevel0 01FF  
                                       u113_25 0738                                         i1l2631 07AB  
                                       i1l2607 079B                                         i1l2615 078B  
                                       i1l2623 077B                                         i1l2711 0ECE  
                                       i1l3611 005E                                         i1l3603 004E  
                                       i1l2651 0E99                                         i1l2645 0E95  
                                       i1l6021 012D                                         i1l3615 0066  
                                       i1l6103 043E                                         i1l2591 05C4  
                                       i1l2639 06A3                                         i1l2719 0F41  
                                       i1l2727 0F2B                                         i1l2663 0EA1  
                                       i1l6015 0122                                         i1l6031 014D  
                                       i1l3641 00C1                                         i1l3633 00A3  
                                       i1l3625 008C                                         i1l3617 006F  
                                       i1l6113 045A                                         i1l2681 0E43  
                                       i1l2657 0E9D                                         i1l2825 0ED3  
                                       i1l6025 0139                                         i1l3643 00D0  
                                       i1l2819 0EA5                                         i1l2675 0EAD  
                                       i1l3629 0095                                         i1l3645 00DA  
                                       i1l3653 00EA                                         i1l6109 044C  
                                       i1l2685 0E45                                         i1l2669 0EA9  
                                       i1l6037 015F                                         i1l6029 0143  
                                       i1l3647 00E5                                         i1l2791 0EE3  
                                       i1l6039 0168                                         i1l3649 00E8  
                                       i1l5711 0256                                         i1l5703 024C  
                                       i1l5721 025C                                         i1l5715 0259  
                                       i1l5707 0253                                         i1l5803 0525  
                                       i1l5811 0F93                                         i1l5733 0353  
                                       i1l5751 0372                                         i1l5761 058C  
                                       i1l5729 0291                                         i1l5921 064E  
                                       i1l5771 0593                                         i1l5747 036F  
                                       i1l5915 0644                                         i1l5765 058F  
                                       i1l5757 0375                                         i1l5917 0649  
                                       i1l5941 0460                                         i1l5759 0589  
                                       i1l5783 05D9                                         i1l5951 0486  
                                       i1l5777 0596                                         i1l5793 05DF  
                                       i1l5787 05DC                                         i1l5779 05D2  
                                       i1l5967 0491                                         i1l5977 04B7  
                                       _INLVLA 038C                                         _INLVLB 038D  
                                       _INLVLC 038E                   __end_ofi1_I2C_MasterSendNack 0E91  
                                       u376_25 017E                    __size_ofi1_I2C_DO_SEND_STOP 0004  
                                       u369_25 00FF                                         _OSCCON 0099  
                      i1_rd1RegCompleteHandler 079B                       ??i1_I2C_MasterSendTxData 0070  
                                       _SPBRGH 019C                                         _SPBRGL 019B  
                       _I2C_DO_RESET$intlevel0 0F8E                                         _TX1REG 019A  
                                       _TX1STA 019E                        i1_wr1RegCompleteHandler 077B  
              _I2C_DO_SEND_ADR_WRITE$intlevel0 0FCA                                         _CptBat 0036  
                  ??i1_rdBlkRegCompleteHandler 007A                                     _Validation 0063  
                               __CFG_PWRTE$OFF 0000                            _I2C_MasterGetRxData 0E7A  
           __size_ofi1_I2C_CallbackReturnReset 0002                     ?i1_I2C_CallbackReturnReset 0079  
                   _I2C_DO_SEND_STOP$intlevel0 0F65                    __size_of_PWM3_LoadDutyValue 0016  
                                _I2C_MasterFsm 053D                                 __CFG_STVREN$ON 0000  
                          __size_of_TMR2_Start 0003                              ?i1_I2C_MasterOpen 0070  
                            I2C_SetCallback@cb 0049                              ?i1_I2C_MasterStop 0070  
                  __size_ofi1_I2C_MasterIsNack 0006                         ?_I2C_Read1ByteRegister 0042  
                      __size_of_I2C_MasterOpen 000C                        __size_of_I2C_MasterStop 0003  
                      __size_of_I2C_Initialize 000A                                  _I2C_SetBuffer 0754  
                          __end_of_MyTimer2ISR 018B                             __end_of_I2C_Poller 0FB1  
                           ??i1_I2C_MasterOpen 0070                    __size_ofi1_I2C_MasterSetIrq 0003  
                 __end_of_I2C_MasterDisableIrq 0E6E                                i1_I2C_DO_TX$794 007B  
                           ??i1_I2C_MasterStop 0070                __size_ofi1_I2C_MasterDisableIrq 0003  
               _I2C_DO_SEND_ADR_READ$intlevel0 07F3                            _I2C_DO_ADDRESS_NACK 04E9  
                         ?_I2C_MasterGetRxData 0070                                      ?_I2C_Open 0070  
           __end_of_I2C_SetAddressNackCallback 07D6                     _I2C_SetAddressNackCallback 07C9  
                              i1_I2C_DO_RX_ACK 0EA5          __end_ofi1_I2C_SetDataCompleteCallback 0FE8  
       __size_ofi1_I2C_SetDataCompleteCallback 000C                  i1_I2C_SetDataCompleteCallback 0FDC  
                    ??_I2C_MasterEnableRestart 0049                     ??i1_I2C_CallbackReturnStop 007A  
                              ?i1_I2C_DO_RESET 0070                        __end_of_TMR2_StartTimer 0E86  
     TMR2_SetInterruptHandler@InterruptHandler 0049                           __size_ofi1_I2C_DO_RX 003A  
                         __size_ofi1_I2C_DO_TX 004B                                    ?_MyUART_ISR 0070  
                              ??i1_I2C_DO_IDLE 0070                                ??i1_I2C_DO_RCEN 0070  
                         __size_ofi1_I2C_Close 0019                               ?_PWM3_Initialize 0070  
                            _SYSTEM_Initialize 0769                        __end_of__initialization 0041  
                _I2C_DO_ADDRESS_NACK$intlevel0 04ED                          __end_of_TMR2_CallBack 0FC6  
                          _I2C_MasterOperation 066E                             ?_SYSTEM_Initialize 0070  
                         ?_I2C_DO_ADDRESS_NACK 0070              _rdBlkRegCompleteHandler$intlevel0 0655  
                      _rdBlkRegCompleteHandler 0651                                 __pcstackCOMMON 0070  
                               ?_I2C_MasterFsm 0070              __end_ofi1_I2C_CallbackReturnReset 0E47  
                              ??_I2C_DO_RX_ACK 0049                                   __pidataBANK0 0E86  
                       _I2C_CallbackReturnStop 0EE9                            ??_SYSTEM_Initialize 004B  
                                    ?_TMR2_ISR 0070                        __end_of_TMR2_WriteTimer 0F25  
                             ?_TMR2_Initialize 0070                                 ?_I2C_SetBuffer 0049  
                      ?_I2C_MasterWaitForEvent 0070                 __size_of_I2C_DO_SEND_ADR_WRITE 000B  
           __size_of_I2C_DO_SEND_RESTART_WRITE 0008                  __end_of_I2C_DO_SEND_ADR_WRITE 0FD1  
                                 ??i1_I2C_Open 0070                   ?i1_I2C_DO_SEND_RESTART_WRITE 0070  
                   ?_I2C_DO_SEND_RESTART_WRITE 0070                           ?_I2C_MasterOperation 0070  
                    i1_rdBlkRegCompleteHandler 06A3               __size_ofi1_I2C_DO_SEND_ADR_WRITE 0007  
                        ??_I2C_MasterGetRxData 0049                        ?_I2C_Write1ByteRegister 00C2  
                               _OPTION_REGbits 0095                                     ??_I2C_Open 0049  
                         _eusartRxStatusBuffer 0020                     __end_of_I2C_MasterClearIrq 0E68  
              ??_EUSART_SetOverrunErrorHandler 004B                       i1_I2C_DO_RX_NACK_RESTART 0EAD  
                    __end_of_SYSTEM_Initialize 077B                      ??i1_rd1RegCompleteHandler 007A  
                       i1I2C_Close@returnValue 0071                              _I2C_MasterSendAck 0EBD  
                                   __pbssBANK0 0020                                     __pbssBANK1 00A0  
                         __end_ofi1_I2C_Poller 0F9D                      ??i1_wr1RegCompleteHandler 007A  
                         __end_of_EUSART_Write 0F41                                  ??_I2C_DO_IDLE 0049  
               __size_of_rd2RegCompleteHandler 0016                 __size_ofi1_I2C_MasterGetRxData 0003  
                                ??_I2C_DO_RCEN 0049                 i1I2C_CallbackReturnStop@funPtr 0079  
                __end_of_rd2RegCompleteHandler 06FD                   __end_of_I2C_MasterSendTxData 0EFB  
                __end_ofi1_I2C_MasterGetRxData 0E62                             ?_I2C_MasterSendAck 0070  
                            _I2C_MasterStartRx 0E77                __size_ofi1_I2C_MasterSendTxData 0005  
               __size_of_wr2RegCompleteHandler 0016                          ??_I2C_DO_ADDRESS_NACK 0053  
                       i1_I2C_MasterDisableIrq 0E50                i1I2C_SetDataCompleteCallback@cb 0075  
             __size_ofi1_rd2RegCompleteHandler 0010                  __end_of_wr2RegCompleteHandler 0729  
                  __size_of_EUSART_Receive_ISR 0033                            _I2C_DO_RX_NACK_STOP 0F71  
                         i1_I2C_MasterClearIrq 0E4A                          _rd1RegCompleteHandler 06FD  
                           ?_I2C_MasterStartRx 0070                             __end_ofi1_I2C_Open 03C4  
                   __end_of_I2C_MasterSendNack 0EBD               __size_ofi1_wr2RegCompleteHandler 0010  
                        _wr1RegCompleteHandler 06D1                _rd1RegCompleteHandler$intlevel0 0701  
              _wr1RegCompleteHandler$intlevel0 06D5                                     __pmaintext 018B  
                          ??_I2C_MasterSendAck 0049                       rd1RegCompleteHandler@ptr 0052  
                  __end_of_I2C_DO_SEND_RESTART 0F61                                    _MyTimer2ISR 00F7  
                              _I2C_DO_TX_EMPTY 04BE                            I2C_SetBuffer@buffer 004C  
                              __CFG_PPS1WAY$ON 0000                                     ??_TMR2_ISR 007E  
                                   __pintentry 0004                 __end_of_I2C_MasterWaitForEvent 0EC5  
                          ??_I2C_MasterStartRx 0049                  __size_of_I2C_DO_SEND_ADR_READ 000C  
                          __size_of_MyUART_ISR 00B2                 __size_ofi1_I2C_DO_ADDRESS_NACK 0023  
             __size_of_I2C_CallbackReturnReset 0006                        __end_ofi1_I2C_DO_RX_ACK 0EA9  
                      _I2C_DO_RX_ACK$intlevel0 0F6D                  __end_ofi1_I2C_DO_ADDRESS_NACK 05F5  
                 ??_EUSART_DefaultErrorHandler 0071                          ??_I2C_MasterOperation 0056  
               I2C_SetDataCompleteCallback@ptr 0050                 __end_of_I2C_Write1ByteRegister 042A  
                         i1_I2C_MasterSendNack 0E8D                                i1_I2C_MasterFsm 0513  
            __size_ofi1_I2C_MasterWaitForEvent 0004                       ??_I2C_DO_RX_NACK_RESTART 0049  
                    ?i1_I2C_MasterWaitForEvent 0070              __end_of_I2C_DO_SEND_RESTART_WRITE 0F59  
                         ?_I2C_DO_RX_NACK_STOP 0070                                  _eusartRxCount 003A  
                ??i1_I2C_DO_SEND_RESTART_WRITE 0070                                __CFG_WDTCCS$SWC 0000  
            __size_ofi1_I2C_Write1ByteRegister 002F                      ?i1_I2C_Write1ByteRegister 0042  
                __size_of_EUSART_RxDataHandler 0017                                i1_I2C_SetBuffer 07BB  
                    __end_of_I2C_MasterSendAck 0EC1                                        _OSCTUNE 0098  
                                      _PWM3DCH 0618                                        _PWM3DCL 0617  
                                      _PWM3CON 0619                                        _SSP1ADD 0212  
                                      _SLRCONA 030C                                        _SLRCONB 030D  
                                      _SLRCONC 030E                                        _SSP1BUF 0211  
                                 ??_TMR2_Start 0049                       ??_EUSART_SetErrorHandler 004B  
                             ?_TMR2_StartTimer 0070            _I2C_DO_SEND_RESTART_WRITE$intlevel0 0F55  
               __size_ofi1_I2C_MasterOperation 001E                  __end_ofi1_I2C_MasterOperation 0651  
                    __end_of_I2C_MasterStartRx 0E7A                           I2C_Close@returnValue 004A  
                 ?_I2C_SetDataCompleteCallback 004E                 ?i1_I2C_SetDataCompleteCallback 0075  
                                    _I2C_DO_RX 0297                                      _I2C_DO_TX 01FB  
             __end_of_I2C_DO_SEND_RESTART_READ 0F51                     i1rd1RegCompleteHandler@ptr 0079  
                 ??i1_I2C_DO_SEND_RESTART_READ 0070                   I2C_Read1ByteRegister@address 0044  
                                    _I2C_Close 0615                          i1_I2C_DO_SEND_RESTART 0E9D  
                    ??_rdBlkRegCompleteHandler 0053                          ?i1_I2C_MasterClearIrq 0070  
                         _I2C_MasterDisableIrq 0E6B                                ??_I2C_MasterFsm 00BD  
          __size_of_EUSART_DefaultErrorHandler 0003                     ??_TMR2_SetInterruptHandler 004B  
                                      _PosUart 0031                            __end_of_I2C_DO_IDLE 0F8A  
                          __end_of_I2C_DO_RCEN 0FA7                                        _Vitesse 0034  
                              ??_I2C_SetBuffer 004B                               ?_TMR2_WriteTimer 0070  
                      I2C_SetBuffer@bufferSize 0049                             __end_of_TMR2_Start 0E83  
                               _I2C_MasterOpen 07E3                                 _I2C_MasterStop 0E74  
                               _I2C_Initialize 0FB1                              i1_I2C_MasterClose 0E4D  
                        ?i1_I2C_MasterSendNack 0070                      __size_of_I2C_DO_SEND_STOP 0008  
                       i1_I2C_MasterSendTxData 0EC9                                        __ptext1 0F1F  
                                      __ptext2 07FB                                        __ptext3 0E83  
                                      __ptext4 0E80                                        __ptext5 0769  
                                      __ptext6 073F                                        __ptext7 0F19  
                                      __ptext8 0FD1                                        __ptext9 0318  
                            i1I2C_Open@address 0071                          ??_I2C_DO_RX_NACK_STOP 0049  
                            i1_I2C_MasterStart 0E53                              i1_I2C_MasterWrite 0EB5  
         __end_ofi1_I2C_SetAddressNackCallback 1000          __size_ofi1_I2C_SetAddressNackCallback 000C  
                 i1_I2C_SetAddressNackCallback 0FF4                             ?i1_I2C_MasterClose 0070  
                        _OSCILLATOR_Initialize 0F32                                      _T2CONbits 001C  
                           ?i1_I2C_MasterStart 0070            __size_ofi1_I2C_DO_SEND_RESTART_READ 0004  
                           I2C_SetCallback@idx 004D                       __size_of_I2C_MasterClose 0003  
                           ?i1_I2C_MasterWrite 0070                       ??_PIN_MANAGER_Initialize 0049  
                I2C_CallbackReturnReset@funPtr 0052                                      _T2HLTbits 001D  
                           I2C_SetCallback@ptr 004B                       wr1RegCompleteHandler@ptr 0052  
                    I2C_Write1ByteRegister@reg 00C2                       __size_of_I2C_MasterStart 0003  
                    i1I2C_SetBuffer@bufferSize 0070                       __size_of_I2C_MasterWrite 0004  
                   __size_of_SYSTEM_Initialize 0012                            ??i1_I2C_MasterClose 0070  
                                      clrloop0 0F26               _I2C_CallbackReturnStop$intlevel0 0EED  
                 __size_ofi1_I2C_MasterSendAck 0004                           end_of_initialization 0041  
                          ??i1_I2C_MasterStart 0070                                      _T2RSTbits 001F  
               __size_ofi1_I2C_DO_RX_NACK_STOP 0004                            ??i1_I2C_MasterWrite 007E  
                                   ?_I2C_DO_RX 0070                                     ?_I2C_DO_TX 0070  
                __end_ofi1_I2C_DO_RX_NACK_STOP 0EAD          __end_of_EUSART_SetOverrunErrorHandler 0F13  
       __size_of_EUSART_SetOverrunErrorHandler 0006                  _EUSART_SetOverrunErrorHandler 0F0D  
                    __size_of_I2C_MasterIsNack 0006                   __size_ofi1_I2C_MasterStartRx 0003  
                                   ?_I2C_Close 0070                         ?_rd1RegCompleteHandler 0052  
                            i1_I2C_SetCallback 05AE           __size_ofi1_I2C_DO_SEND_RESTART_WRITE 0004  
                      __end_of_I2C_DO_TX_EMPTY 04E9                      __size_of_I2C_MasterSetIrq 0003  
                        ?_I2C_MasterDisableIrq 0070                              _EUSART_Initialize 03C4  
                       ?_wr1RegCompleteHandler 0052                             ?i1_I2C_SetCallback 0070  
                           ?_EUSART_Initialize 0070                       __size_of_I2C_SetCallback 0025  
                  ??i1_I2C_CallbackReturnReset 007A                        __end_ofi1_I2C_MasterFsm 053D  
                      ??_I2C_Read1ByteRegister 0043                         __end_of_I2C_MasterOpen 07EF  
                       __end_of_I2C_MasterStop 0E77                         __end_of_I2C_Initialize 0FBB  
                    __end_ofi1_I2C_MasterClose 0E50                            ??i1_I2C_SetCallback 0073  
                    __end_ofi1_I2C_MasterStart 0E56                     i1wr1RegCompleteHandler@ptr 0079  
                    __end_ofi1_I2C_MasterWrite 0EB9                               ?i1_I2C_DO_RX_ACK 0070  
                  __end_of_TMR2_Counter8BitSet 0800                            ??_EUSART_Initialize 004B  
                      __end_ofi1_I2C_SetBuffer 07C9                        i1_I2C_DO_SEND_ADR_WRITE 0F2B  
                                    _PORTAbits 000C                 i1I2C_SetAddressNackCallback@cb 0075  
              __end_of_rdBlkRegCompleteHandler 066E                           _I2C_MasterSendTxData 0EF5  
                             ??i1_I2C_DO_RESET 0070                                      _SSPDATPPS 0E21  
              __size_of_I2C_DO_RX_NACK_RESTART 0008                                      _SSPCLKPPS 0E20  
                             __CFG_FOSC$INTOSC 0000                  _I2C_DO_SEND_RESTART$intlevel0 0F5D  
                  ?_I2C_SetAddressNackCallback 004E                  ?i1_I2C_SetAddressNackCallback 0075  
                        __size_ofi1_I2C_Poller 000A                          __size_of_EUSART_Write 0008  
                   __size_of_I2C_MasterSendAck 0004                              __size_of_I2C_Open 003E  
                   __end_ofi1_I2C_DO_SEND_STOP 0EA5                       ??i1_I2C_DO_SEND_ADR_READ 0070  
                                 ??_MyUART_ISR 0071                __size_of_EUSART_SetErrorHandler 0006  
                    __size_ofi1_I2C_MasterOpen 000C                     __size_of_I2C_MasterStartRx 0003  
           __size_ofi1_rdBlkRegCompleteHandler 0017                      __size_ofi1_I2C_MasterStop 0003  
                    __end_ofi1_I2C_SetCallback 05D2                        TMR2_WriteTimer@timerVal 004A  
                       ?i1_I2C_DO_SEND_RESTART 0070                         ??i1_I2C_MasterClearIrq 0070  
                    __end_of_EUSART_Initialize 03F7                        i1_rd2RegCompleteHandler 078B  
                                  _I2C_DO_IDLE 0F81                                    _I2C_DO_RCEN 0F9D  
                   rdBlkRegCompleteHandler@ptr 0052                  I2C_Write1ByteRegister@address 00C5  
                      i1_wr2RegCompleteHandler 07AB                        ?_I2C_CallbackReturnStop 0052  
                   __end_of_PWM3_LoadDutyValue 073F                       _I2C_DO_SEND_RESTART_READ 0F49  
                  i1I2C_Write1ByteRegister@reg 0042                   I2C_CallbackReturnStop@funPtr 0052  
                              ?_I2C_MasterOpen 0070                     __end_ofi1_I2C_MasterIsNack 0EE3  
                              ?_I2C_MasterStop 0070                                ?_I2C_Initialize 0070  
         __end_of_TMR2_DefaultInterruptHandler 0004          __size_of_TMR2_DefaultInterruptHandler 0001  
                 _TMR2_DefaultInterruptHandler 0003                        _I2C_CallbackReturnReset 0EEF  
                     I2C_Read1ByteRegister@reg 0042             __end_of_EUSART_DefaultErrorHandler 0E4A  
                   _EUSART_DefaultErrorHandler 0E47                         ??i1_I2C_MasterSendNack 0070  
                   __end_ofi1_I2C_MasterSetIrq 0E65           __size_of_I2C_SetDataCompleteCallback 000D  
                                 i1_I2C_Poller 0F93                                   _EUSART_Write 0F39  
                            __size_of_TMR2_ISR 0005                             __end_of_MyUART_ISR 00F7  
                   ??i1_I2C_DO_RX_NACK_RESTART 0070                          ?_I2C_MasterSendTxData 0070  
                       ?_OSCILLATOR_Initialize 0070                    ??_I2C_DO_SEND_RESTART_WRITE 0049  
                                ??i1_I2C_DO_RX 007A                                  ??i1_I2C_DO_TX 007A  
                          start_initialization 0026                      i1_I2C_CallbackReturnReset 0E45  
              __size_of_PIN_MANAGER_Initialize 003B                                  ??i1_I2C_Close 0070  
                                ?_I2C_DO_RESET 0070   EUSART_SetRxInterruptHandler@interruptHandler 0049  
           __end_ofi1_I2C_DO_SEND_RESTART_READ 0E99                     i1_I2C_DO_SEND_RESTART_READ 0E95  
                      ?i1_I2C_MasterDisableIrq 0070                                    ??_I2C_DO_RX 0053  
                                  ??_I2C_DO_TX 0053                            i1I2C_SetCallback@cb 0070  
                            ??_I2C_MasterClose 0049                          __end_ofi1_I2C_DO_IDLE 0ED3  
                       ??_I2C_MasterDisableIrq 0049                          __end_ofi1_I2C_DO_RCEN 0EE9  
                                  ??_I2C_Close 0049                              ??_I2C_MasterStart 0049  
                            ??_I2C_MasterWrite 0057                 __end_of_I2C_CallbackReturnStop 0EEF  
                       _I2C_DO_RX_NACK_RESTART 0F79                               ?_I2C_DO_TX_EMPTY 0070  
                           _I2C_MasterClearIrq 0E65               __end_ofi1_I2C_MasterWaitForEvent 0EB5  
               ?_EUSART_SetOverrunErrorHandler 0049              __size_ofi1_I2C_CallbackReturnStop 0002  
                     __size_of_PWM3_Initialize 000B                      ?i1_I2C_CallbackReturnStop 0079  
                   _EUSART_FramingErrorHandler 005D                                   ?_MyTimer2ISR 0070  
                       _EUSART_SetErrorHandler 0F01                               ?i1_I2C_MasterFsm 0070  
             __end_ofi1_I2C_Write1ByteRegister 04BE                                      _TestState 0033  
                                  _CCPTMRSbits 029E                     __size_ofi1_I2C_MasterClose 0003  
                    ??i1_I2C_DO_SEND_ADR_WRITE 0070                            ?_I2C_MasterClearIrq 0070  
                  __end_of_I2C_MasterGetRxData 0E7D                                    __pdataBANK0 0061  
                        __end_of_I2C_DO_RX_ACK 0F71                     __size_ofi1_I2C_MasterStart 0003  
                   __size_ofi1_I2C_MasterWrite 0004                                      _StateLeds 0030  
                ?_TMR2_DefaultInterruptHandler 0070                               _I2C_DO_SEND_STOP 0F61  
                            ??_I2C_SetCallback 004C                               ?i1_I2C_SetBuffer 0070  
                          I2C_Open@returnValue 004B                             _I2C_MasterSendNack 0EB9  
                     ?_I2C_MasterEnableRestart 0070                         __size_of_TMR2_CallBack 000B  
                        _I2C_DO_SEND_ADR_WRITE 0FC6                                      ___latbits 0002  
                                __pcstackBANK0 003D                                  __pcstackBANK1 00BD  
                               ??_I2C_DO_RESET 0049                       __size_of_TMR2_Initialize 0015  
                          ?_I2C_MasterSendNack 0070                 __end_ofi1_I2C_MasterDisableIrq 0E53  
                 __end_of_I2C_DO_SEND_ADR_READ 07FB                           ??_I2C_MasterClearIrq 0049  
                  __end_of_I2C_DO_ADDRESS_NACK 0513                      ??i1_rd2RegCompleteHandler 007A  
              __size_ofi1_I2C_DO_SEND_ADR_READ 0008                 ??i1_I2C_SetAddressNackCallback 0078  
                   __size_ofi1_I2C_SetCallback 0024                            __end_ofi1_I2C_DO_RX 038D  
                    ??i1_wr2RegCompleteHandler 007A                            __end_ofi1_I2C_DO_TX 0297  
             i1I2C_SetDataCompleteCallback@ptr 0077                     __end_of_EUSART_Receive_ISR 045D  
                             _I2C_MasterIsNack 0EFB                     __size_of_EUSART_Initialize 0033  
                    _I2C_DO_SEND_RESTART_WRITE 0F51                            __end_ofi1_I2C_Close 06A3  
             _EUSART_RxDefaultInterruptHandler 005F                               _I2C_MasterSetIrq 0E7D  
                                    __pnvBANK0 0057                          _rd2RegCompleteHandler 06E7  
                        i1_I2C_MasterGetRxData 0E5F                          __end_of_fsmStateTable 0615  
                 __end_of_EUSART_RxDataHandler 06D1                         _PIN_MANAGER_Initialize 0318  
                        _wr2RegCompleteHandler 0713                      ??_I2C_CallbackReturnReset 0053  
                  __end_of_I2C_MasterOperation 068A                           ??_I2C_MasterSendNack 0049  
              i1I2C_Write1ByteRegister@address 0045                       rd2RegCompleteHandler@ptr 0052  
                      ?i1_I2C_MasterSendTxData 0070                                      __ptext100 0EC9  
                                    __ptext101 0E91                                      __ptext110 079B  
                                    __ptext102 0E5F                                      __ptext111 07AB  
                                    __ptext103 0E8D                                      __ptext120 0E4D  
                                    __ptext112 0FDC                                      __ptext104 0E5C  
                                    __ptext121 0E4A                                      __ptext113 05AE  
                                    __ptext105 0E45                                      __ptext122 042A  
                                    __ptext114 07BB                                      __ptext106 0E43  
                                    __ptext123 0045                                      __ptext115 0E59  
                                    __ptext107 06A3                                      __ptext124 0F39  
                                    __ptext116 0E56                                      __ptext108 077B  
                                    __ptext125 0E89                                      __ptext117 0E53  
                                    __ptext109 078B                                      __ptext126 0E42  
                                    __ptext118 068A                                      __ptext127 0E47  
                                    __ptext119 0E50                                      __ptext128 06BA  
                          i1_I2C_MasterSendAck 0E91                                   _eusartRxHead 003C  
                                 _eusartRxTail 003B                         ??_I2C_MasterSendTxData 0049  
                 ??_INTERRUPT_InterruptManager 0048                            i1_I2C_MasterStartRx 0E5C  
                 __size_of_I2C_DO_SEND_RESTART 0008                                       _BAUD1CON 019F  
                        i1_I2C_DO_ADDRESS_NACK 05D2                        I2C_MasterOperation@read 00C0  
                                     _I2C_Open 02DA                       ?i1_rd1RegCompleteHandler 0079  
                     ?i1_wr1RegCompleteHandler 0079                           ?i1_I2C_MasterSendAck 0070  
                                     _T2CLKCON 001E                        ??_rd1RegCompleteHandler 0053  
                             i1_I2C_MasterOpen 0FE8                               i1_I2C_MasterStop 0E59  
                               _eusartRxBuffer 0028                   i1rdBlkRegCompleteHandler@ptr 0079  
                      ??_wr1RegCompleteHandler 0053                           ?i1_I2C_MasterStartRx 0070  
                   i1rd2RegCompleteHandler@ptr 0079                      i1I2C_MasterOperation@read 0040  
                        i1_I2C_MasterOperation 0633                                       _LATAbits 010C  
       EUSART_SetErrorHandler@interruptHandler 0049                                       _LATCbits 010E  
                                    clear_ram0 0F25                                  _TMR2_CallBack 0FBB  
                                     _PIE1bits 0090                              _eusartRxLastError 0039  
                     __size_of_TMR2_StartTimer 0003            __size_of_INTERRUPT_InterruptManager 0020  
                                     _PIR1bits 0010                ??_EUSART_SetFramingErrorHandler 004B  
                                     _PIR2bits 0011                 __end_ofi1_I2C_MasterSendTxData 0ECE  
                        __end_of_I2C_MasterFsm 0564                    __end_of_I2C_DO_RX_NACK_STOP 0F79  
                         __CFG_WDTCPS$WDTCPS1F 0000                                       _SSP1CON1 0215  
                                     _SSP1CON2 0216      __end_of_EUSART_DefaultOverrunErrorHandler 0E8D  
   __size_of_EUSART_DefaultOverrunErrorHandler 0004            ??_EUSART_DefaultOverrunErrorHandler 0070  
           ?_EUSART_DefaultOverrunErrorHandler 0070              _EUSART_DefaultOverrunErrorHandler 0E89  
                       i1_I2C_DO_SEND_ADR_READ 0F41                                       _TMR2_ISR 0ED8  
              __end_of_I2C_MasterEnableRestart 0E74                                       _SSP1STAT 0214  
                     i1_I2C_MasterWaitForEvent 0EB1                 __size_of_I2C_Read1ByteRegister 0032  
                __end_of_I2C_Read1ByteRegister 048F                          __end_of_I2C_SetBuffer 0769  
          __end_ofi1_I2C_DO_SEND_RESTART_WRITE 0E9D                    i1_I2C_DO_SEND_RESTART_WRITE 0E99  
                            ??_PWM3_Initialize 0049                       i1_I2C_Write1ByteRegister 048F  
                       ?_I2C_DO_SEND_ADR_WRITE 0070                       I2C_MasterSendTxData@data 0049  
               ??_TMR2_DefaultInterruptHandler 0070              __size_of_TMR2_SetInterruptHandler 0006  
                     __size_of_TMR2_WriteTimer 0006                                    i1_I2C_DO_RX 0353  
                                  i1_I2C_DO_TX 024C                      ?_TMR2_SetInterruptHandler 0049  
           __size_ofi1_I2C_MasterEnableRestart 0003                       wr2RegCompleteHandler@ptr 0052  
                   ?i1_I2C_MasterEnableRestart 0070                                    i1_I2C_Close 068A  
                      ??i1_I2C_DO_SEND_RESTART 0070                          ??i1_I2C_MasterSendAck 0070  
                   ??_I2C_DO_SEND_RESTART_READ 0049                       ?_rdBlkRegCompleteHandler 0052  
                                   _I2C_Poller 0FA7                          ??i1_I2C_MasterStartRx 0070  
                                   _I2C_Status 00A0                                   ?_I2C_DO_IDLE 0070  
                                 ?_I2C_DO_RCEN 0070                              ??_TMR2_Initialize 004B  
                       ?_rd2RegCompleteHandler 0052                                 ?_TMR2_CallBack 0070  
                       ?i1_I2C_MasterGetRxData 0070                          i1_I2C_DO_RX_NACK_STOP 0EA9  
                             ??_I2C_MasterOpen 0049                      _I2C_DO_TX_EMPTY$intlevel0 04C2  
                       ?_wr2RegCompleteHandler 0052                               ??_I2C_MasterStop 0049  
                     ??_I2C_MasterWaitForEvent 0049                               ??_I2C_Initialize 0049  
              _wr2RegCompleteHandler$intlevel0 0717                _rd2RegCompleteHandler$intlevel0 06EB  
                           i1_I2C_DO_SEND_STOP 0EA1                          i1I2C_SetBuffer@buffer 0073  
                         __end_of_I2C_DO_RESET 0F93                       ??_I2C_Write1ByteRegister 00C4  
                   i1I2C_MasterSendTxData@data 0070                                       _StateBat 0061  
                      ??_OSCILLATOR_Initialize 0049                            _EUSART_ErrorHandler 0059  
                         _I2C_DO_SEND_ADR_READ 07EF                           __size_of_MyTimer2ISR 0094  
                  ?_EUSART_DefaultErrorHandler 0070               i1I2C_MasterOperation@returnValue 0041  
              __end_ofi1_rd1RegCompleteHandler 07AB                     i1wr2RegCompleteHandler@ptr 0079  
                          ?i1_I2C_DO_SEND_STOP 0070              _I2C_CallbackReturnReset$intlevel0 0EF3  
                       ?i1_I2C_DO_ADDRESS_NACK 0070               I2C_Read1ByteRegister@returnValue 0045  
              __end_ofi1_wr1RegCompleteHandler 078B                             _PWM3_LoadDutyValue 0729  
                              _I2C_MasterClose 0E68                  I2C_SetAddressNackCallback@ptr 0050  
                              I2C_Open@address 004A                                _I2C_MasterStart 0E6E  
                              _I2C_MasterWrite 0EC5                             i1_I2C_MasterIsNack 0EDD  
                         _EUSART_RxDataHandler 06BA                   __size_of_TMR2_Counter8BitSet 0005  
                     __size_ofi1_I2C_DO_RX_ACK 0004                                       __ptext10 0F32  
                                     __ptext11 0FB1                                       __ptext20 07E3  
                                     __ptext12 03C4                                       __ptext21 0EC5  
                                     __ptext13 0F13                                       __ptext30 0F69  
                                     __ptext22 066E                                       __ptext14 0F0D  
                                     __ptext31 0F61                                       __ptext23 0FA7  
                                     __ptext15 0F07                                       __ptext40 0F81  
                                     __ptext32 0F59                                       __ptext24 0EC1  
                                     __ptext16 0F01                                       __ptext41 04BE  
                                     __ptext33 0F51                                       __ptext25 053D  
                                     __ptext17 03F7                                       __ptext50 0EE9  
                                     __ptext42 0E7D                                       __ptext34 0F49  
                                     __ptext26 04E9                                       __ptext18 07C9  
                                     __ptext51 0651                                       __ptext43 0EFB  
                                     __ptext35 0F9D                                       __ptext27 0F8A  
                                     __ptext19 02DA                                       __ptext60 0E71  
                                     __ptext52 06D1                                       __ptext44 0EF5  
                                     __ptext36 0297                                       __ptext28 0F79  
                                     __ptext61 0E6E                                       __ptext53 06E7  
                                     __ptext45 0EBD                                       __ptext37 01FB  
                                     __ptext29 0F71                                       __ptext70 0003  
                                     __ptext62 0615                                       __ptext54 06FD  
                                     __ptext46 0E7A                                       __ptext38 0FC6  
                                     __ptext71 048F                                       __ptext63 0E6B  
                                     __ptext55 0713                                       __ptext47 0EB9  
                                     __ptext39 07EF                                       __ptext80 0EB1  
                                     __ptext72 0729                                       __ptext64 0E68  
                                     __ptext56 07D6                                       __ptext48 0E77  
                                     __ptext81 0513                                       __ptext73 045D  
                                     __ptext65 0E65                                       __ptext57 0564  
                                     __ptext49 0EEF                                       __ptext90 0E95  
                                     __ptext82 05D2                                       __ptext74 0FF4  
                                     __ptext58 0754                            ?_PWM3_LoadDutyValue 0070  
                                     __ptext91 0EE3                                       __ptext83 0ED3  
                                     __ptext75 038D                                       __ptext67 0ED8  
                                     __ptext59 0E74                                       __ptext92 0353  
                                     __ptext84 0EAD                                       __ptext76 0FE8  
                                     __ptext68 0FBB                                       __ptext93 024C  
                                     __ptext85 0EA9                                       __ptext77 0EB5  
                                     __ptext69 00F7                                       __ptext94 0F2B  
                                     __ptext86 0EA5                                       __ptext78 0633  
                                     __ptext95 0F41                                       __ptext87 0EA1  
                                     __ptext79 0F93                                       __ptext96 0ECE  
                                     __ptext88 0E9D                                       __ptext97 0589  
                                     __ptext89 0E99                                       __ptext98 0E62  
                                     __ptext99 0EDD                             i1_I2C_MasterSetIrq 0E62  
                                 _SSP1CON1bits 0215                                   _SSP1CON2bits 0216  
            __end_ofi1_I2C_MasterEnableRestart 0E59               __end_ofi1_I2C_CallbackReturnStop 0E45  
          __end_of_I2C_SetDataCompleteCallback 07E3                    _I2C_SetDataCompleteCallback 07D6  
                      ?_I2C_DO_RX_NACK_RESTART 0070                    ?i1_I2C_DO_SEND_RESTART_READ 0070  
                       ?i1_I2C_MasterOperation 0070                           ??i1_I2C_DO_SEND_STOP 0070  
                          ?i1_I2C_MasterIsNack 0070                       __end_of_I2C_DO_SEND_STOP 0F69  
                                __size_of_main 0070                            ?i1_I2C_MasterSetIrq 0070  
                __size_ofi1_I2C_MasterClearIrq 0003               _I2C_DO_RX_NACK_RESTART$intlevel0 0F7D  
                         __CFG_WDTCWS$WDTCWSSW 0000                        ?_EUSART_SetErrorHandler 0049  
                              _I2C_SetCallback 0564                  ??_I2C_SetDataCompleteCallback 0051  
                                   _RC1STAbits 019D                     I2C_Write1ByteRegister@data 00C3  
EUSART_SetOverrunErrorHandler@interruptHandler 0049                           ??_PWM3_LoadDutyValue 0072  
                                     int$flags 007E                          ?_I2C_DO_SEND_ADR_READ 0070  
                            ??_TMR2_StartTimer 0049             __end_of_INTERRUPT_InterruptManager 0024  
                   _INTERRUPT_InterruptManager 0004          __end_of_EUSART_SetFramingErrorHandler 0F0D  
       __size_of_EUSART_SetFramingErrorHandler 0006                  _EUSART_SetFramingErrorHandler 0F07  
                                 _SSP1STATbits 0214                           ??i1_I2C_MasterIsNack 0070  
                     __end_of_I2C_MasterIsNack 0F01                  __size_ofi1_I2C_MasterSendNack 0004  
                         ??i1_I2C_MasterSetIrq 0070                                     i1_I2C_Open 038D  
                     __end_of_I2C_MasterSetIrq 0E80                                     _INTCONbits 000B  
                        ?_EUSART_RxDataHandler 0070                 __end_of_I2C_DO_RX_NACK_RESTART 0F81  
                  TMR2_Counter8BitSet@timerVal 0049                                       intlevel1 0000  
                                  ?_I2C_Poller 0070                                ??_TMR2_CallBack 007E  
                            ??_TMR2_WriteTimer 004A                        __size_ofi1_I2C_DO_RESET 0005  
             __size_of_I2C_MasterEnableRestart 0003              __size_ofi1_I2C_DO_RX_NACK_RESTART 0004  
                       ?i1_I2C_DO_RX_NACK_STOP 0070                      ?i1_I2C_DO_RX_NACK_RESTART 0070  
                      ?_PIN_MANAGER_Initialize 0070                 __end_of_EUSART_SetErrorHandler 0F07  
                            __CFG_CLKOUTEN$OFF 0000                            _I2C_DO_SEND_RESTART 0F59  
                   ?i1_rdBlkRegCompleteHandler 0079                  __size_of_I2C_MasterDisableIrq 0003  
                            i1_I2C_DO_TX_EMPTY 0589           __end_of_EUSART_SetRxInterruptHandler 0F19  
        __size_of_EUSART_SetRxInterruptHandler 0006                   _EUSART_SetRxInterruptHandler 0F13  
              __size_of_I2C_MasterWaitForEvent 0004                             ?i1_I2C_DO_TX_EMPTY 0070  
              __size_of_I2C_Write1ByteRegister 0033                             _EUSART_Receive_ISR 042A  
EUSART_SetFramingErrorHandler@interruptHandler 0049                        __end_of_I2C_MasterClose 0E6B  
                     __size_of_I2C_DO_TX_EMPTY 002B                       __end_ofi1_I2C_MasterOpen 0FF4  
                  PWM3_LoadDutyValue@dutyValue 0070                       __end_ofi1_I2C_MasterStop 0E5C  
                      __end_of_I2C_MasterStart 0E71                        __end_of_I2C_MasterWrite 0EC9  
                                __pstringtext1 05F5                            ??i1_I2C_DO_TX_EMPTY 007A  
                         ?_I2C_DO_SEND_RESTART 0070                         __size_ofi1_I2C_DO_IDLE 0005  
                          ?_EUSART_Receive_ISR 0070                         __size_ofi1_I2C_DO_RCEN 0006  
                     __size_ofi1_I2C_MasterFsm 002A                   __size_of_I2C_MasterGetRxData 0003  
                        _I2C_DO_IDLE$intlevel0 0F85                                     _TX1STAbits 019E  
                     __size_ofi1_I2C_SetBuffer 000E                                     _TMR2_Start 0E80  
              i1I2C_SetAddressNackCallback@ptr 0077                    __size_of_I2C_MasterClearIrq 0003  
                           EUSART_Write@txData 0070                        __end_of_I2C_SetCallback 0589  
               __end_of_PIN_MANAGER_Initialize 0353                 __size_of_rd1RegCompleteHandler 0016  
                __end_of_rd1RegCompleteHandler 0713                         __size_of_I2C_DO_RX_ACK 0008  
                            ??i1_I2C_DO_RX_ACK 0070                      __end_ofi1_I2C_DO_TX_EMPTY 05AE  
               __size_of_wr1RegCompleteHandler 0016                i1I2C_CallbackReturnReset@funPtr 0079  
                         ??_EUSART_Receive_ISR 0071                       i1_I2C_CallbackReturnStop 0E43  
                        __size_of_I2C_DO_RESET 0009               __size_ofi1_rd1RegCompleteHandler 0010  
                __end_of_wr1RegCompleteHandler 06E7                     ??i1_I2C_MasterWaitForEvent 0070  
                        _TMR2_InterruptHandler 0057                   __size_of_I2C_DO_ADDRESS_NACK 002A  
                         __size_of_I2C_DO_IDLE 0009                           __size_of_I2C_DO_RCEN 000A  
            __end_ofi1_rdBlkRegCompleteHandler 06BA                                _PWM3_Initialize 0FD1  
             __size_ofi1_wr1RegCompleteHandler 0010                       ?i1_I2C_DO_SEND_ADR_WRITE 0070  
                      ?i1_I2C_DO_SEND_ADR_READ 0070                             __size_of_I2C_DO_RX 0043  
                           __size_of_I2C_DO_TX 0051                     ??i1_I2C_Write1ByteRegister 0044  
