

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Mar 29 18:07:18 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	text36,local,class=CODE,merge=1,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,delta=2
    58                           	psect	text43,local,class=CODE,merge=1,delta=2
    59                           	psect	text44,local,class=CODE,merge=1,delta=2
    60                           	psect	text45,local,class=CODE,merge=1,delta=2
    61                           	psect	text46,local,class=CODE,merge=1,delta=2
    62                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text54,local,class=CODE,merge=1,delta=2
    70                           	psect	text55,local,class=CODE,merge=1,delta=2
    71                           	psect	text56,local,class=CODE,merge=1,delta=2
    72                           	psect	text57,local,class=CODE,merge=1,delta=2
    73                           	psect	text58,local,class=CODE,merge=1,delta=2
    74                           	psect	text59,local,class=CODE,merge=1,delta=2
    75                           	psect	text60,local,class=CODE,merge=1,delta=2
    76                           	psect	text61,local,class=CODE,merge=1,delta=2
    77                           	psect	text62,local,class=CODE,merge=1,delta=2
    78                           	psect	text63,local,class=CODE,merge=1,delta=2
    79                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text65,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text66,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text67,local,class=CODE,merge=1,delta=2
    83                           	psect	text68,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text71,local,class=CODE,merge=1,delta=2
    87                           	psect	text72,local,class=CODE,merge=1,delta=2
    88                           	psect	text73,local,class=CODE,merge=1,delta=2
    89                           	psect	text74,local,class=CODE,merge=1,delta=2
    90                           	psect	text75,local,class=CODE,merge=1,delta=2
    91                           	psect	text76,local,class=CODE,merge=1,delta=2
    92                           	psect	text77,local,class=CODE,merge=1,delta=2
    93                           	dabs	1,0x7E,2
    94  0000                     
    95                           ; Version 1.45
    96                           ; Generated 16/11/2017 GMT
    97                           ; 
    98                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    99                           ; All rights reserved.
   100                           ; 
   101                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   102                           ; 
   103                           ; Redistribution and use in source and binary forms, with or without modification, are
   104                           ; permitted provided that the following conditions are met:
   105                           ; 
   106                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   107                           ;        conditions and the following disclaimer.
   108                           ; 
   109                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   110                           ;        of conditions and the following disclaimer in the documentation and/or other
   111                           ;        materials provided with the distribution.
   112                           ; 
   113                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   114                           ;        software without specific prior written permission.
   115                           ; 
   116                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   117                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   118                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   119                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   120                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   121                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   122                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   123                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   124                           ; 
   125                           ; 
   126                           ; Code-generator required, PIC16F1619 Definitions
   127                           ; 
   128                           ; SFR Addresses
   129  0000                     	;# 
   130  0001                     	;# 
   131  0002                     	;# 
   132  0003                     	;# 
   133  0004                     	;# 
   134  0005                     	;# 
   135  0006                     	;# 
   136  0007                     	;# 
   137  0008                     	;# 
   138  0009                     	;# 
   139  000A                     	;# 
   140  000B                     	;# 
   141  000C                     	;# 
   142  000D                     	;# 
   143  000E                     	;# 
   144  0010                     	;# 
   145  0011                     	;# 
   146  0012                     	;# 
   147  0013                     	;# 
   148  0014                     	;# 
   149  0015                     	;# 
   150  0016                     	;# 
   151  0016                     	;# 
   152  0017                     	;# 
   153  0018                     	;# 
   154  0019                     	;# 
   155  001A                     	;# 
   156  001A                     	;# 
   157  001B                     	;# 
   158  001B                     	;# 
   159  001C                     	;# 
   160  001D                     	;# 
   161  001E                     	;# 
   162  001F                     	;# 
   163  008C                     	;# 
   164  008D                     	;# 
   165  008E                     	;# 
   166  0090                     	;# 
   167  0091                     	;# 
   168  0092                     	;# 
   169  0093                     	;# 
   170  0094                     	;# 
   171  0095                     	;# 
   172  0096                     	;# 
   173  0098                     	;# 
   174  0099                     	;# 
   175  009A                     	;# 
   176  009B                     	;# 
   177  009B                     	;# 
   178  009C                     	;# 
   179  009D                     	;# 
   180  009E                     	;# 
   181  009F                     	;# 
   182  010C                     	;# 
   183  010D                     	;# 
   184  010E                     	;# 
   185  0111                     	;# 
   186  0112                     	;# 
   187  0113                     	;# 
   188  0114                     	;# 
   189  0115                     	;# 
   190  0116                     	;# 
   191  0117                     	;# 
   192  0118                     	;# 
   193  0119                     	;# 
   194  011C                     	;# 
   195  018C                     	;# 
   196  018D                     	;# 
   197  018E                     	;# 
   198  0191                     	;# 
   199  0191                     	;# 
   200  0192                     	;# 
   201  0193                     	;# 
   202  0193                     	;# 
   203  0194                     	;# 
   204  0195                     	;# 
   205  0196                     	;# 
   206  0197                     	;# 
   207  0199                     	;# 
   208  0199                     	;# 
   209  0199                     	;# 
   210  019A                     	;# 
   211  019A                     	;# 
   212  019A                     	;# 
   213  019B                     	;# 
   214  019B                     	;# 
   215  019B                     	;# 
   216  019B                     	;# 
   217  019B                     	;# 
   218  019C                     	;# 
   219  019C                     	;# 
   220  019C                     	;# 
   221  019D                     	;# 
   222  019D                     	;# 
   223  019D                     	;# 
   224  019E                     	;# 
   225  019E                     	;# 
   226  019E                     	;# 
   227  019F                     	;# 
   228  019F                     	;# 
   229  019F                     	;# 
   230  019F                     	;# 
   231  019F                     	;# 
   232  020C                     	;# 
   233  020D                     	;# 
   234  020E                     	;# 
   235  0211                     	;# 
   236  0211                     	;# 
   237  0212                     	;# 
   238  0212                     	;# 
   239  0213                     	;# 
   240  0213                     	;# 
   241  0214                     	;# 
   242  0214                     	;# 
   243  0215                     	;# 
   244  0215                     	;# 
   245  0215                     	;# 
   246  0215                     	;# 
   247  0216                     	;# 
   248  0216                     	;# 
   249  0217                     	;# 
   250  0217                     	;# 
   251  028C                     	;# 
   252  028D                     	;# 
   253  028E                     	;# 
   254  0291                     	;# 
   255  0291                     	;# 
   256  0292                     	;# 
   257  0293                     	;# 
   258  0294                     	;# 
   259  0298                     	;# 
   260  0298                     	;# 
   261  0299                     	;# 
   262  029A                     	;# 
   263  029B                     	;# 
   264  029E                     	;# 
   265  030C                     	;# 
   266  030D                     	;# 
   267  030E                     	;# 
   268  038C                     	;# 
   269  038D                     	;# 
   270  038E                     	;# 
   271  0391                     	;# 
   272  0392                     	;# 
   273  0393                     	;# 
   274  0394                     	;# 
   275  0395                     	;# 
   276  0396                     	;# 
   277  0397                     	;# 
   278  0398                     	;# 
   279  0399                     	;# 
   280  040E                     	;# 
   281  0413                     	;# 
   282  0413                     	;# 
   283  0414                     	;# 
   284  0414                     	;# 
   285  0415                     	;# 
   286  0416                     	;# 
   287  0417                     	;# 
   288  0418                     	;# 
   289  041A                     	;# 
   290  041A                     	;# 
   291  041B                     	;# 
   292  041B                     	;# 
   293  041C                     	;# 
   294  041D                     	;# 
   295  041E                     	;# 
   296  041F                     	;# 
   297  0493                     	;# 
   298  0494                     	;# 
   299  0495                     	;# 
   300  0496                     	;# 
   301  049A                     	;# 
   302  049B                     	;# 
   303  049C                     	;# 
   304  049D                     	;# 
   305  058C                     	;# 
   306  058C                     	;# 
   307  058D                     	;# 
   308  058E                     	;# 
   309  058E                     	;# 
   310  058F                     	;# 
   311  0590                     	;# 
   312  0590                     	;# 
   313  0591                     	;# 
   314  0592                     	;# 
   315  0592                     	;# 
   316  0593                     	;# 
   317  0594                     	;# 
   318  0594                     	;# 
   319  0595                     	;# 
   320  0596                     	;# 
   321  0596                     	;# 
   322  0597                     	;# 
   323  0598                     	;# 
   324  0599                     	;# 
   325  059A                     	;# 
   326  059B                     	;# 
   327  059B                     	;# 
   328  059C                     	;# 
   329  059D                     	;# 
   330  060C                     	;# 
   331  060C                     	;# 
   332  060D                     	;# 
   333  060E                     	;# 
   334  060F                     	;# 
   335  060F                     	;# 
   336  0610                     	;# 
   337  0611                     	;# 
   338  0612                     	;# 
   339  0613                     	;# 
   340  0614                     	;# 
   341  0617                     	;# 
   342  0618                     	;# 
   343  0619                     	;# 
   344  061A                     	;# 
   345  061B                     	;# 
   346  061C                     	;# 
   347  0691                     	;# 
   348  0692                     	;# 
   349  0693                     	;# 
   350  0694                     	;# 
   351  0695                     	;# 
   352  0696                     	;# 
   353  0697                     	;# 
   354  0699                     	;# 
   355  069A                     	;# 
   356  0711                     	;# 
   357  0712                     	;# 
   358  0713                     	;# 
   359  0714                     	;# 
   360  0715                     	;# 
   361  0718                     	;# 
   362  0718                     	;# 
   363  0719                     	;# 
   364  071A                     	;# 
   365  071A                     	;# 
   366  071B                     	;# 
   367  071C                     	;# 
   368  071D                     	;# 
   369  0791                     	;# 
   370  0791                     	;# 
   371  0792                     	;# 
   372  0793                     	;# 
   373  0793                     	;# 
   374  0794                     	;# 
   375  0795                     	;# 
   376  0795                     	;# 
   377  0796                     	;# 
   378  0797                     	;# 
   379  0797                     	;# 
   380  0798                     	;# 
   381  0799                     	;# 
   382  079A                     	;# 
   383  080C                     	;# 
   384  080C                     	;# 
   385  080D                     	;# 
   386  080E                     	;# 
   387  080E                     	;# 
   388  080F                     	;# 
   389  0810                     	;# 
   390  0810                     	;# 
   391  0811                     	;# 
   392  0812                     	;# 
   393  0812                     	;# 
   394  0813                     	;# 
   395  0814                     	;# 
   396  0815                     	;# 
   397  0816                     	;# 
   398  0817                     	;# 
   399  0818                     	;# 
   400  0819                     	;# 
   401  081A                     	;# 
   402  081A                     	;# 
   403  081B                     	;# 
   404  081C                     	;# 
   405  081C                     	;# 
   406  081D                     	;# 
   407  088C                     	;# 
   408  088D                     	;# 
   409  088E                     	;# 
   410  088F                     	;# 
   411  088F                     	;# 
   412  0890                     	;# 
   413  0891                     	;# 
   414  0892                     	;# 
   415  0893                     	;# 
   416  0893                     	;# 
   417  0894                     	;# 
   418  0895                     	;# 
   419  0896                     	;# 
   420  0897                     	;# 
   421  0897                     	;# 
   422  0898                     	;# 
   423  0899                     	;# 
   424  0D8C                     	;# 
   425  0D8C                     	;# 
   426  0D8D                     	;# 
   427  0D8E                     	;# 
   428  0D8F                     	;# 
   429  0D8F                     	;# 
   430  0D90                     	;# 
   431  0D91                     	;# 
   432  0D92                     	;# 
   433  0D92                     	;# 
   434  0D93                     	;# 
   435  0D94                     	;# 
   436  0D95                     	;# 
   437  0D95                     	;# 
   438  0D96                     	;# 
   439  0D97                     	;# 
   440  0D98                     	;# 
   441  0D99                     	;# 
   442  0D9A                     	;# 
   443  0D9B                     	;# 
   444  0D9C                     	;# 
   445  0D9D                     	;# 
   446  0D9E                     	;# 
   447  0D9E                     	;# 
   448  0D9F                     	;# 
   449  0DA0                     	;# 
   450  0DA1                     	;# 
   451  0DA1                     	;# 
   452  0DA2                     	;# 
   453  0DA3                     	;# 
   454  0DA4                     	;# 
   455  0DA4                     	;# 
   456  0DA5                     	;# 
   457  0DA6                     	;# 
   458  0DA7                     	;# 
   459  0DA7                     	;# 
   460  0DA8                     	;# 
   461  0DA9                     	;# 
   462  0DAA                     	;# 
   463  0DAB                     	;# 
   464  0DAC                     	;# 
   465  0DAD                     	;# 
   466  0DAE                     	;# 
   467  0DAF                     	;# 
   468  0E0F                     	;# 
   469  0E10                     	;# 
   470  0E11                     	;# 
   471  0E12                     	;# 
   472  0E13                     	;# 
   473  0E14                     	;# 
   474  0E15                     	;# 
   475  0E16                     	;# 
   476  0E17                     	;# 
   477  0E18                     	;# 
   478  0E19                     	;# 
   479  0E1A                     	;# 
   480  0E1B                     	;# 
   481  0E1C                     	;# 
   482  0E1D                     	;# 
   483  0E1E                     	;# 
   484  0E1F                     	;# 
   485  0E20                     	;# 
   486  0E21                     	;# 
   487  0E22                     	;# 
   488  0E23                     	;# 
   489  0E24                     	;# 
   490  0E25                     	;# 
   491  0E26                     	;# 
   492  0E27                     	;# 
   493  0E28                     	;# 
   494  0E29                     	;# 
   495  0E2A                     	;# 
   496  0E2B                     	;# 
   497  0E2C                     	;# 
   498  0E2D                     	;# 
   499  0E2E                     	;# 
   500  0E90                     	;# 
   501  0E91                     	;# 
   502  0E92                     	;# 
   503  0E94                     	;# 
   504  0E95                     	;# 
   505  0E9C                     	;# 
   506  0E9D                     	;# 
   507  0E9E                     	;# 
   508  0E9F                     	;# 
   509  0EA0                     	;# 
   510  0EA1                     	;# 
   511  0EA2                     	;# 
   512  0EA3                     	;# 
   513  0EA4                     	;# 
   514  0EA5                     	;# 
   515  0EA6                     	;# 
   516  0EA7                     	;# 
   517  0F0F                     	;# 
   518  0F10                     	;# 
   519  0F11                     	;# 
   520  0F12                     	;# 
   521  0F13                     	;# 
   522  0F14                     	;# 
   523  0F15                     	;# 
   524  0F16                     	;# 
   525  0F17                     	;# 
   526  0F18                     	;# 
   527  0F19                     	;# 
   528  0F1A                     	;# 
   529  0F1B                     	;# 
   530  0F1C                     	;# 
   531  0F1D                     	;# 
   532  0F1E                     	;# 
   533  0F1F                     	;# 
   534  0F20                     	;# 
   535  0F21                     	;# 
   536  0F22                     	;# 
   537  0F23                     	;# 
   538  0F24                     	;# 
   539  0F25                     	;# 
   540  0F26                     	;# 
   541  0F27                     	;# 
   542  0F28                     	;# 
   543  0F29                     	;# 
   544  0F2A                     	;# 
   545  0F2B                     	;# 
   546  0F2C                     	;# 
   547  0F2D                     	;# 
   548  0F2E                     	;# 
   549  0F2F                     	;# 
   550  0F30                     	;# 
   551  0F31                     	;# 
   552  0F32                     	;# 
   553  0F33                     	;# 
   554  0F34                     	;# 
   555  0F35                     	;# 
   556  0F36                     	;# 
   557  0F37                     	;# 
   558  0FE4                     	;# 
   559  0FE5                     	;# 
   560  0FE6                     	;# 
   561  0FE7                     	;# 
   562  0FE8                     	;# 
   563  0FE9                     	;# 
   564  0FEA                     	;# 
   565  0FEB                     	;# 
   566  0FED                     	;# 
   567  0FEE                     	;# 
   568  0FEF                     	;# 
   569  0000                     	;# 
   570  0001                     	;# 
   571  0002                     	;# 
   572  0003                     	;# 
   573  0004                     	;# 
   574  0005                     	;# 
   575  0006                     	;# 
   576  0007                     	;# 
   577  0008                     	;# 
   578  0009                     	;# 
   579  000A                     	;# 
   580  000B                     	;# 
   581  000C                     	;# 
   582  000D                     	;# 
   583  000E                     	;# 
   584  0010                     	;# 
   585  0011                     	;# 
   586  0012                     	;# 
   587  0013                     	;# 
   588  0014                     	;# 
   589  0015                     	;# 
   590  0016                     	;# 
   591  0016                     	;# 
   592  0017                     	;# 
   593  0018                     	;# 
   594  0019                     	;# 
   595  001A                     	;# 
   596  001A                     	;# 
   597  001B                     	;# 
   598  001B                     	;# 
   599  001C                     	;# 
   600  001D                     	;# 
   601  001E                     	;# 
   602  001F                     	;# 
   603  008C                     	;# 
   604  008D                     	;# 
   605  008E                     	;# 
   606  0090                     	;# 
   607  0091                     	;# 
   608  0092                     	;# 
   609  0093                     	;# 
   610  0094                     	;# 
   611  0095                     	;# 
   612  0096                     	;# 
   613  0098                     	;# 
   614  0099                     	;# 
   615  009A                     	;# 
   616  009B                     	;# 
   617  009B                     	;# 
   618  009C                     	;# 
   619  009D                     	;# 
   620  009E                     	;# 
   621  009F                     	;# 
   622  010C                     	;# 
   623  010D                     	;# 
   624  010E                     	;# 
   625  0111                     	;# 
   626  0112                     	;# 
   627  0113                     	;# 
   628  0114                     	;# 
   629  0115                     	;# 
   630  0116                     	;# 
   631  0117                     	;# 
   632  0118                     	;# 
   633  0119                     	;# 
   634  011C                     	;# 
   635  018C                     	;# 
   636  018D                     	;# 
   637  018E                     	;# 
   638  0191                     	;# 
   639  0191                     	;# 
   640  0192                     	;# 
   641  0193                     	;# 
   642  0193                     	;# 
   643  0194                     	;# 
   644  0195                     	;# 
   645  0196                     	;# 
   646  0197                     	;# 
   647  0199                     	;# 
   648  0199                     	;# 
   649  0199                     	;# 
   650  019A                     	;# 
   651  019A                     	;# 
   652  019A                     	;# 
   653  019B                     	;# 
   654  019B                     	;# 
   655  019B                     	;# 
   656  019B                     	;# 
   657  019B                     	;# 
   658  019C                     	;# 
   659  019C                     	;# 
   660  019C                     	;# 
   661  019D                     	;# 
   662  019D                     	;# 
   663  019D                     	;# 
   664  019E                     	;# 
   665  019E                     	;# 
   666  019E                     	;# 
   667  019F                     	;# 
   668  019F                     	;# 
   669  019F                     	;# 
   670  019F                     	;# 
   671  019F                     	;# 
   672  020C                     	;# 
   673  020D                     	;# 
   674  020E                     	;# 
   675  0211                     	;# 
   676  0211                     	;# 
   677  0212                     	;# 
   678  0212                     	;# 
   679  0213                     	;# 
   680  0213                     	;# 
   681  0214                     	;# 
   682  0214                     	;# 
   683  0215                     	;# 
   684  0215                     	;# 
   685  0215                     	;# 
   686  0215                     	;# 
   687  0216                     	;# 
   688  0216                     	;# 
   689  0217                     	;# 
   690  0217                     	;# 
   691  028C                     	;# 
   692  028D                     	;# 
   693  028E                     	;# 
   694  0291                     	;# 
   695  0291                     	;# 
   696  0292                     	;# 
   697  0293                     	;# 
   698  0294                     	;# 
   699  0298                     	;# 
   700  0298                     	;# 
   701  0299                     	;# 
   702  029A                     	;# 
   703  029B                     	;# 
   704  029E                     	;# 
   705  030C                     	;# 
   706  030D                     	;# 
   707  030E                     	;# 
   708  038C                     	;# 
   709  038D                     	;# 
   710  038E                     	;# 
   711  0391                     	;# 
   712  0392                     	;# 
   713  0393                     	;# 
   714  0394                     	;# 
   715  0395                     	;# 
   716  0396                     	;# 
   717  0397                     	;# 
   718  0398                     	;# 
   719  0399                     	;# 
   720  040E                     	;# 
   721  0413                     	;# 
   722  0413                     	;# 
   723  0414                     	;# 
   724  0414                     	;# 
   725  0415                     	;# 
   726  0416                     	;# 
   727  0417                     	;# 
   728  0418                     	;# 
   729  041A                     	;# 
   730  041A                     	;# 
   731  041B                     	;# 
   732  041B                     	;# 
   733  041C                     	;# 
   734  041D                     	;# 
   735  041E                     	;# 
   736  041F                     	;# 
   737  0493                     	;# 
   738  0494                     	;# 
   739  0495                     	;# 
   740  0496                     	;# 
   741  049A                     	;# 
   742  049B                     	;# 
   743  049C                     	;# 
   744  049D                     	;# 
   745  058C                     	;# 
   746  058C                     	;# 
   747  058D                     	;# 
   748  058E                     	;# 
   749  058E                     	;# 
   750  058F                     	;# 
   751  0590                     	;# 
   752  0590                     	;# 
   753  0591                     	;# 
   754  0592                     	;# 
   755  0592                     	;# 
   756  0593                     	;# 
   757  0594                     	;# 
   758  0594                     	;# 
   759  0595                     	;# 
   760  0596                     	;# 
   761  0596                     	;# 
   762  0597                     	;# 
   763  0598                     	;# 
   764  0599                     	;# 
   765  059A                     	;# 
   766  059B                     	;# 
   767  059B                     	;# 
   768  059C                     	;# 
   769  059D                     	;# 
   770  060C                     	;# 
   771  060C                     	;# 
   772  060D                     	;# 
   773  060E                     	;# 
   774  060F                     	;# 
   775  060F                     	;# 
   776  0610                     	;# 
   777  0611                     	;# 
   778  0612                     	;# 
   779  0613                     	;# 
   780  0614                     	;# 
   781  0617                     	;# 
   782  0618                     	;# 
   783  0619                     	;# 
   784  061A                     	;# 
   785  061B                     	;# 
   786  061C                     	;# 
   787  0691                     	;# 
   788  0692                     	;# 
   789  0693                     	;# 
   790  0694                     	;# 
   791  0695                     	;# 
   792  0696                     	;# 
   793  0697                     	;# 
   794  0699                     	;# 
   795  069A                     	;# 
   796  0711                     	;# 
   797  0712                     	;# 
   798  0713                     	;# 
   799  0714                     	;# 
   800  0715                     	;# 
   801  0718                     	;# 
   802  0718                     	;# 
   803  0719                     	;# 
   804  071A                     	;# 
   805  071A                     	;# 
   806  071B                     	;# 
   807  071C                     	;# 
   808  071D                     	;# 
   809  0791                     	;# 
   810  0791                     	;# 
   811  0792                     	;# 
   812  0793                     	;# 
   813  0793                     	;# 
   814  0794                     	;# 
   815  0795                     	;# 
   816  0795                     	;# 
   817  0796                     	;# 
   818  0797                     	;# 
   819  0797                     	;# 
   820  0798                     	;# 
   821  0799                     	;# 
   822  079A                     	;# 
   823  080C                     	;# 
   824  080C                     	;# 
   825  080D                     	;# 
   826  080E                     	;# 
   827  080E                     	;# 
   828  080F                     	;# 
   829  0810                     	;# 
   830  0810                     	;# 
   831  0811                     	;# 
   832  0812                     	;# 
   833  0812                     	;# 
   834  0813                     	;# 
   835  0814                     	;# 
   836  0815                     	;# 
   837  0816                     	;# 
   838  0817                     	;# 
   839  0818                     	;# 
   840  0819                     	;# 
   841  081A                     	;# 
   842  081A                     	;# 
   843  081B                     	;# 
   844  081C                     	;# 
   845  081C                     	;# 
   846  081D                     	;# 
   847  088C                     	;# 
   848  088D                     	;# 
   849  088E                     	;# 
   850  088F                     	;# 
   851  088F                     	;# 
   852  0890                     	;# 
   853  0891                     	;# 
   854  0892                     	;# 
   855  0893                     	;# 
   856  0893                     	;# 
   857  0894                     	;# 
   858  0895                     	;# 
   859  0896                     	;# 
   860  0897                     	;# 
   861  0897                     	;# 
   862  0898                     	;# 
   863  0899                     	;# 
   864  0D8C                     	;# 
   865  0D8C                     	;# 
   866  0D8D                     	;# 
   867  0D8E                     	;# 
   868  0D8F                     	;# 
   869  0D8F                     	;# 
   870  0D90                     	;# 
   871  0D91                     	;# 
   872  0D92                     	;# 
   873  0D92                     	;# 
   874  0D93                     	;# 
   875  0D94                     	;# 
   876  0D95                     	;# 
   877  0D95                     	;# 
   878  0D96                     	;# 
   879  0D97                     	;# 
   880  0D98                     	;# 
   881  0D99                     	;# 
   882  0D9A                     	;# 
   883  0D9B                     	;# 
   884  0D9C                     	;# 
   885  0D9D                     	;# 
   886  0D9E                     	;# 
   887  0D9E                     	;# 
   888  0D9F                     	;# 
   889  0DA0                     	;# 
   890  0DA1                     	;# 
   891  0DA1                     	;# 
   892  0DA2                     	;# 
   893  0DA3                     	;# 
   894  0DA4                     	;# 
   895  0DA4                     	;# 
   896  0DA5                     	;# 
   897  0DA6                     	;# 
   898  0DA7                     	;# 
   899  0DA7                     	;# 
   900  0DA8                     	;# 
   901  0DA9                     	;# 
   902  0DAA                     	;# 
   903  0DAB                     	;# 
   904  0DAC                     	;# 
   905  0DAD                     	;# 
   906  0DAE                     	;# 
   907  0DAF                     	;# 
   908  0E0F                     	;# 
   909  0E10                     	;# 
   910  0E11                     	;# 
   911  0E12                     	;# 
   912  0E13                     	;# 
   913  0E14                     	;# 
   914  0E15                     	;# 
   915  0E16                     	;# 
   916  0E17                     	;# 
   917  0E18                     	;# 
   918  0E19                     	;# 
   919  0E1A                     	;# 
   920  0E1B                     	;# 
   921  0E1C                     	;# 
   922  0E1D                     	;# 
   923  0E1E                     	;# 
   924  0E1F                     	;# 
   925  0E20                     	;# 
   926  0E21                     	;# 
   927  0E22                     	;# 
   928  0E23                     	;# 
   929  0E24                     	;# 
   930  0E25                     	;# 
   931  0E26                     	;# 
   932  0E27                     	;# 
   933  0E28                     	;# 
   934  0E29                     	;# 
   935  0E2A                     	;# 
   936  0E2B                     	;# 
   937  0E2C                     	;# 
   938  0E2D                     	;# 
   939  0E2E                     	;# 
   940  0E90                     	;# 
   941  0E91                     	;# 
   942  0E92                     	;# 
   943  0E94                     	;# 
   944  0E95                     	;# 
   945  0E9C                     	;# 
   946  0E9D                     	;# 
   947  0E9E                     	;# 
   948  0E9F                     	;# 
   949  0EA0                     	;# 
   950  0EA1                     	;# 
   951  0EA2                     	;# 
   952  0EA3                     	;# 
   953  0EA4                     	;# 
   954  0EA5                     	;# 
   955  0EA6                     	;# 
   956  0EA7                     	;# 
   957  0F0F                     	;# 
   958  0F10                     	;# 
   959  0F11                     	;# 
   960  0F12                     	;# 
   961  0F13                     	;# 
   962  0F14                     	;# 
   963  0F15                     	;# 
   964  0F16                     	;# 
   965  0F17                     	;# 
   966  0F18                     	;# 
   967  0F19                     	;# 
   968  0F1A                     	;# 
   969  0F1B                     	;# 
   970  0F1C                     	;# 
   971  0F1D                     	;# 
   972  0F1E                     	;# 
   973  0F1F                     	;# 
   974  0F20                     	;# 
   975  0F21                     	;# 
   976  0F22                     	;# 
   977  0F23                     	;# 
   978  0F24                     	;# 
   979  0F25                     	;# 
   980  0F26                     	;# 
   981  0F27                     	;# 
   982  0F28                     	;# 
   983  0F29                     	;# 
   984  0F2A                     	;# 
   985  0F2B                     	;# 
   986  0F2C                     	;# 
   987  0F2D                     	;# 
   988  0F2E                     	;# 
   989  0F2F                     	;# 
   990  0F30                     	;# 
   991  0F31                     	;# 
   992  0F32                     	;# 
   993  0F33                     	;# 
   994  0F34                     	;# 
   995  0F35                     	;# 
   996  0F36                     	;# 
   997  0F37                     	;# 
   998  0FE4                     	;# 
   999  0FE5                     	;# 
  1000  0FE6                     	;# 
  1001  0FE7                     	;# 
  1002  0FE8                     	;# 
  1003  0FE9                     	;# 
  1004  0FEA                     	;# 
  1005  0FEB                     	;# 
  1006  0FED                     	;# 
  1007  0FEE                     	;# 
  1008  0FEF                     	;# 
  1009  0000                     	;# 
  1010  0001                     	;# 
  1011  0002                     	;# 
  1012  0003                     	;# 
  1013  0004                     	;# 
  1014  0005                     	;# 
  1015  0006                     	;# 
  1016  0007                     	;# 
  1017  0008                     	;# 
  1018  0009                     	;# 
  1019  000A                     	;# 
  1020  000B                     	;# 
  1021  000C                     	;# 
  1022  000D                     	;# 
  1023  000E                     	;# 
  1024  0010                     	;# 
  1025  0011                     	;# 
  1026  0012                     	;# 
  1027  0013                     	;# 
  1028  0014                     	;# 
  1029  0015                     	;# 
  1030  0016                     	;# 
  1031  0016                     	;# 
  1032  0017                     	;# 
  1033  0018                     	;# 
  1034  0019                     	;# 
  1035  001A                     	;# 
  1036  001A                     	;# 
  1037  001B                     	;# 
  1038  001B                     	;# 
  1039  001C                     	;# 
  1040  001D                     	;# 
  1041  001E                     	;# 
  1042  001F                     	;# 
  1043  008C                     	;# 
  1044  008D                     	;# 
  1045  008E                     	;# 
  1046  0090                     	;# 
  1047  0091                     	;# 
  1048  0092                     	;# 
  1049  0093                     	;# 
  1050  0094                     	;# 
  1051  0095                     	;# 
  1052  0096                     	;# 
  1053  0098                     	;# 
  1054  0099                     	;# 
  1055  009A                     	;# 
  1056  009B                     	;# 
  1057  009B                     	;# 
  1058  009C                     	;# 
  1059  009D                     	;# 
  1060  009E                     	;# 
  1061  009F                     	;# 
  1062  010C                     	;# 
  1063  010D                     	;# 
  1064  010E                     	;# 
  1065  0111                     	;# 
  1066  0112                     	;# 
  1067  0113                     	;# 
  1068  0114                     	;# 
  1069  0115                     	;# 
  1070  0116                     	;# 
  1071  0117                     	;# 
  1072  0118                     	;# 
  1073  0119                     	;# 
  1074  011C                     	;# 
  1075  018C                     	;# 
  1076  018D                     	;# 
  1077  018E                     	;# 
  1078  0191                     	;# 
  1079  0191                     	;# 
  1080  0192                     	;# 
  1081  0193                     	;# 
  1082  0193                     	;# 
  1083  0194                     	;# 
  1084  0195                     	;# 
  1085  0196                     	;# 
  1086  0197                     	;# 
  1087  0199                     	;# 
  1088  0199                     	;# 
  1089  0199                     	;# 
  1090  019A                     	;# 
  1091  019A                     	;# 
  1092  019A                     	;# 
  1093  019B                     	;# 
  1094  019B                     	;# 
  1095  019B                     	;# 
  1096  019B                     	;# 
  1097  019B                     	;# 
  1098  019C                     	;# 
  1099  019C                     	;# 
  1100  019C                     	;# 
  1101  019D                     	;# 
  1102  019D                     	;# 
  1103  019D                     	;# 
  1104  019E                     	;# 
  1105  019E                     	;# 
  1106  019E                     	;# 
  1107  019F                     	;# 
  1108  019F                     	;# 
  1109  019F                     	;# 
  1110  019F                     	;# 
  1111  019F                     	;# 
  1112  020C                     	;# 
  1113  020D                     	;# 
  1114  020E                     	;# 
  1115  0211                     	;# 
  1116  0211                     	;# 
  1117  0212                     	;# 
  1118  0212                     	;# 
  1119  0213                     	;# 
  1120  0213                     	;# 
  1121  0214                     	;# 
  1122  0214                     	;# 
  1123  0215                     	;# 
  1124  0215                     	;# 
  1125  0215                     	;# 
  1126  0215                     	;# 
  1127  0216                     	;# 
  1128  0216                     	;# 
  1129  0217                     	;# 
  1130  0217                     	;# 
  1131  028C                     	;# 
  1132  028D                     	;# 
  1133  028E                     	;# 
  1134  0291                     	;# 
  1135  0291                     	;# 
  1136  0292                     	;# 
  1137  0293                     	;# 
  1138  0294                     	;# 
  1139  0298                     	;# 
  1140  0298                     	;# 
  1141  0299                     	;# 
  1142  029A                     	;# 
  1143  029B                     	;# 
  1144  029E                     	;# 
  1145  030C                     	;# 
  1146  030D                     	;# 
  1147  030E                     	;# 
  1148  038C                     	;# 
  1149  038D                     	;# 
  1150  038E                     	;# 
  1151  0391                     	;# 
  1152  0392                     	;# 
  1153  0393                     	;# 
  1154  0394                     	;# 
  1155  0395                     	;# 
  1156  0396                     	;# 
  1157  0397                     	;# 
  1158  0398                     	;# 
  1159  0399                     	;# 
  1160  040E                     	;# 
  1161  0413                     	;# 
  1162  0413                     	;# 
  1163  0414                     	;# 
  1164  0414                     	;# 
  1165  0415                     	;# 
  1166  0416                     	;# 
  1167  0417                     	;# 
  1168  0418                     	;# 
  1169  041A                     	;# 
  1170  041A                     	;# 
  1171  041B                     	;# 
  1172  041B                     	;# 
  1173  041C                     	;# 
  1174  041D                     	;# 
  1175  041E                     	;# 
  1176  041F                     	;# 
  1177  0493                     	;# 
  1178  0494                     	;# 
  1179  0495                     	;# 
  1180  0496                     	;# 
  1181  049A                     	;# 
  1182  049B                     	;# 
  1183  049C                     	;# 
  1184  049D                     	;# 
  1185  058C                     	;# 
  1186  058C                     	;# 
  1187  058D                     	;# 
  1188  058E                     	;# 
  1189  058E                     	;# 
  1190  058F                     	;# 
  1191  0590                     	;# 
  1192  0590                     	;# 
  1193  0591                     	;# 
  1194  0592                     	;# 
  1195  0592                     	;# 
  1196  0593                     	;# 
  1197  0594                     	;# 
  1198  0594                     	;# 
  1199  0595                     	;# 
  1200  0596                     	;# 
  1201  0596                     	;# 
  1202  0597                     	;# 
  1203  0598                     	;# 
  1204  0599                     	;# 
  1205  059A                     	;# 
  1206  059B                     	;# 
  1207  059B                     	;# 
  1208  059C                     	;# 
  1209  059D                     	;# 
  1210  060C                     	;# 
  1211  060C                     	;# 
  1212  060D                     	;# 
  1213  060E                     	;# 
  1214  060F                     	;# 
  1215  060F                     	;# 
  1216  0610                     	;# 
  1217  0611                     	;# 
  1218  0612                     	;# 
  1219  0613                     	;# 
  1220  0614                     	;# 
  1221  0617                     	;# 
  1222  0618                     	;# 
  1223  0619                     	;# 
  1224  061A                     	;# 
  1225  061B                     	;# 
  1226  061C                     	;# 
  1227  0691                     	;# 
  1228  0692                     	;# 
  1229  0693                     	;# 
  1230  0694                     	;# 
  1231  0695                     	;# 
  1232  0696                     	;# 
  1233  0697                     	;# 
  1234  0699                     	;# 
  1235  069A                     	;# 
  1236  0711                     	;# 
  1237  0712                     	;# 
  1238  0713                     	;# 
  1239  0714                     	;# 
  1240  0715                     	;# 
  1241  0718                     	;# 
  1242  0718                     	;# 
  1243  0719                     	;# 
  1244  071A                     	;# 
  1245  071A                     	;# 
  1246  071B                     	;# 
  1247  071C                     	;# 
  1248  071D                     	;# 
  1249  0791                     	;# 
  1250  0791                     	;# 
  1251  0792                     	;# 
  1252  0793                     	;# 
  1253  0793                     	;# 
  1254  0794                     	;# 
  1255  0795                     	;# 
  1256  0795                     	;# 
  1257  0796                     	;# 
  1258  0797                     	;# 
  1259  0797                     	;# 
  1260  0798                     	;# 
  1261  0799                     	;# 
  1262  079A                     	;# 
  1263  080C                     	;# 
  1264  080C                     	;# 
  1265  080D                     	;# 
  1266  080E                     	;# 
  1267  080E                     	;# 
  1268  080F                     	;# 
  1269  0810                     	;# 
  1270  0810                     	;# 
  1271  0811                     	;# 
  1272  0812                     	;# 
  1273  0812                     	;# 
  1274  0813                     	;# 
  1275  0814                     	;# 
  1276  0815                     	;# 
  1277  0816                     	;# 
  1278  0817                     	;# 
  1279  0818                     	;# 
  1280  0819                     	;# 
  1281  081A                     	;# 
  1282  081A                     	;# 
  1283  081B                     	;# 
  1284  081C                     	;# 
  1285  081C                     	;# 
  1286  081D                     	;# 
  1287  088C                     	;# 
  1288  088D                     	;# 
  1289  088E                     	;# 
  1290  088F                     	;# 
  1291  088F                     	;# 
  1292  0890                     	;# 
  1293  0891                     	;# 
  1294  0892                     	;# 
  1295  0893                     	;# 
  1296  0893                     	;# 
  1297  0894                     	;# 
  1298  0895                     	;# 
  1299  0896                     	;# 
  1300  0897                     	;# 
  1301  0897                     	;# 
  1302  0898                     	;# 
  1303  0899                     	;# 
  1304  0D8C                     	;# 
  1305  0D8C                     	;# 
  1306  0D8D                     	;# 
  1307  0D8E                     	;# 
  1308  0D8F                     	;# 
  1309  0D8F                     	;# 
  1310  0D90                     	;# 
  1311  0D91                     	;# 
  1312  0D92                     	;# 
  1313  0D92                     	;# 
  1314  0D93                     	;# 
  1315  0D94                     	;# 
  1316  0D95                     	;# 
  1317  0D95                     	;# 
  1318  0D96                     	;# 
  1319  0D97                     	;# 
  1320  0D98                     	;# 
  1321  0D99                     	;# 
  1322  0D9A                     	;# 
  1323  0D9B                     	;# 
  1324  0D9C                     	;# 
  1325  0D9D                     	;# 
  1326  0D9E                     	;# 
  1327  0D9E                     	;# 
  1328  0D9F                     	;# 
  1329  0DA0                     	;# 
  1330  0DA1                     	;# 
  1331  0DA1                     	;# 
  1332  0DA2                     	;# 
  1333  0DA3                     	;# 
  1334  0DA4                     	;# 
  1335  0DA4                     	;# 
  1336  0DA5                     	;# 
  1337  0DA6                     	;# 
  1338  0DA7                     	;# 
  1339  0DA7                     	;# 
  1340  0DA8                     	;# 
  1341  0DA9                     	;# 
  1342  0DAA                     	;# 
  1343  0DAB                     	;# 
  1344  0DAC                     	;# 
  1345  0DAD                     	;# 
  1346  0DAE                     	;# 
  1347  0DAF                     	;# 
  1348  0E0F                     	;# 
  1349  0E10                     	;# 
  1350  0E11                     	;# 
  1351  0E12                     	;# 
  1352  0E13                     	;# 
  1353  0E14                     	;# 
  1354  0E15                     	;# 
  1355  0E16                     	;# 
  1356  0E17                     	;# 
  1357  0E18                     	;# 
  1358  0E19                     	;# 
  1359  0E1A                     	;# 
  1360  0E1B                     	;# 
  1361  0E1C                     	;# 
  1362  0E1D                     	;# 
  1363  0E1E                     	;# 
  1364  0E1F                     	;# 
  1365  0E20                     	;# 
  1366  0E21                     	;# 
  1367  0E22                     	;# 
  1368  0E23                     	;# 
  1369  0E24                     	;# 
  1370  0E25                     	;# 
  1371  0E26                     	;# 
  1372  0E27                     	;# 
  1373  0E28                     	;# 
  1374  0E29                     	;# 
  1375  0E2A                     	;# 
  1376  0E2B                     	;# 
  1377  0E2C                     	;# 
  1378  0E2D                     	;# 
  1379  0E2E                     	;# 
  1380  0E90                     	;# 
  1381  0E91                     	;# 
  1382  0E92                     	;# 
  1383  0E94                     	;# 
  1384  0E95                     	;# 
  1385  0E9C                     	;# 
  1386  0E9D                     	;# 
  1387  0E9E                     	;# 
  1388  0E9F                     	;# 
  1389  0EA0                     	;# 
  1390  0EA1                     	;# 
  1391  0EA2                     	;# 
  1392  0EA3                     	;# 
  1393  0EA4                     	;# 
  1394  0EA5                     	;# 
  1395  0EA6                     	;# 
  1396  0EA7                     	;# 
  1397  0F0F                     	;# 
  1398  0F10                     	;# 
  1399  0F11                     	;# 
  1400  0F12                     	;# 
  1401  0F13                     	;# 
  1402  0F14                     	;# 
  1403  0F15                     	;# 
  1404  0F16                     	;# 
  1405  0F17                     	;# 
  1406  0F18                     	;# 
  1407  0F19                     	;# 
  1408  0F1A                     	;# 
  1409  0F1B                     	;# 
  1410  0F1C                     	;# 
  1411  0F1D                     	;# 
  1412  0F1E                     	;# 
  1413  0F1F                     	;# 
  1414  0F20                     	;# 
  1415  0F21                     	;# 
  1416  0F22                     	;# 
  1417  0F23                     	;# 
  1418  0F24                     	;# 
  1419  0F25                     	;# 
  1420  0F26                     	;# 
  1421  0F27                     	;# 
  1422  0F28                     	;# 
  1423  0F29                     	;# 
  1424  0F2A                     	;# 
  1425  0F2B                     	;# 
  1426  0F2C                     	;# 
  1427  0F2D                     	;# 
  1428  0F2E                     	;# 
  1429  0F2F                     	;# 
  1430  0F30                     	;# 
  1431  0F31                     	;# 
  1432  0F32                     	;# 
  1433  0F33                     	;# 
  1434  0F34                     	;# 
  1435  0F35                     	;# 
  1436  0F36                     	;# 
  1437  0F37                     	;# 
  1438  0FE4                     	;# 
  1439  0FE5                     	;# 
  1440  0FE6                     	;# 
  1441  0FE7                     	;# 
  1442  0FE8                     	;# 
  1443  0FE9                     	;# 
  1444  0FEA                     	;# 
  1445  0FEB                     	;# 
  1446  0FED                     	;# 
  1447  0FEE                     	;# 
  1448  0FEF                     	;# 
  1449  0000                     	;# 
  1450  0001                     	;# 
  1451  0002                     	;# 
  1452  0003                     	;# 
  1453  0004                     	;# 
  1454  0005                     	;# 
  1455  0006                     	;# 
  1456  0007                     	;# 
  1457  0008                     	;# 
  1458  0009                     	;# 
  1459  000A                     	;# 
  1460  000B                     	;# 
  1461  000C                     	;# 
  1462  000D                     	;# 
  1463  000E                     	;# 
  1464  0010                     	;# 
  1465  0011                     	;# 
  1466  0012                     	;# 
  1467  0013                     	;# 
  1468  0014                     	;# 
  1469  0015                     	;# 
  1470  0016                     	;# 
  1471  0016                     	;# 
  1472  0017                     	;# 
  1473  0018                     	;# 
  1474  0019                     	;# 
  1475  001A                     	;# 
  1476  001A                     	;# 
  1477  001B                     	;# 
  1478  001B                     	;# 
  1479  001C                     	;# 
  1480  001D                     	;# 
  1481  001E                     	;# 
  1482  001F                     	;# 
  1483  008C                     	;# 
  1484  008D                     	;# 
  1485  008E                     	;# 
  1486  0090                     	;# 
  1487  0091                     	;# 
  1488  0092                     	;# 
  1489  0093                     	;# 
  1490  0094                     	;# 
  1491  0095                     	;# 
  1492  0096                     	;# 
  1493  0098                     	;# 
  1494  0099                     	;# 
  1495  009A                     	;# 
  1496  009B                     	;# 
  1497  009B                     	;# 
  1498  009C                     	;# 
  1499  009D                     	;# 
  1500  009E                     	;# 
  1501  009F                     	;# 
  1502  010C                     	;# 
  1503  010D                     	;# 
  1504  010E                     	;# 
  1505  0111                     	;# 
  1506  0112                     	;# 
  1507  0113                     	;# 
  1508  0114                     	;# 
  1509  0115                     	;# 
  1510  0116                     	;# 
  1511  0117                     	;# 
  1512  0118                     	;# 
  1513  0119                     	;# 
  1514  011C                     	;# 
  1515  018C                     	;# 
  1516  018D                     	;# 
  1517  018E                     	;# 
  1518  0191                     	;# 
  1519  0191                     	;# 
  1520  0192                     	;# 
  1521  0193                     	;# 
  1522  0193                     	;# 
  1523  0194                     	;# 
  1524  0195                     	;# 
  1525  0196                     	;# 
  1526  0197                     	;# 
  1527  0199                     	;# 
  1528  0199                     	;# 
  1529  0199                     	;# 
  1530  019A                     	;# 
  1531  019A                     	;# 
  1532  019A                     	;# 
  1533  019B                     	;# 
  1534  019B                     	;# 
  1535  019B                     	;# 
  1536  019B                     	;# 
  1537  019B                     	;# 
  1538  019C                     	;# 
  1539  019C                     	;# 
  1540  019C                     	;# 
  1541  019D                     	;# 
  1542  019D                     	;# 
  1543  019D                     	;# 
  1544  019E                     	;# 
  1545  019E                     	;# 
  1546  019E                     	;# 
  1547  019F                     	;# 
  1548  019F                     	;# 
  1549  019F                     	;# 
  1550  019F                     	;# 
  1551  019F                     	;# 
  1552  020C                     	;# 
  1553  020D                     	;# 
  1554  020E                     	;# 
  1555  0211                     	;# 
  1556  0211                     	;# 
  1557  0212                     	;# 
  1558  0212                     	;# 
  1559  0213                     	;# 
  1560  0213                     	;# 
  1561  0214                     	;# 
  1562  0214                     	;# 
  1563  0215                     	;# 
  1564  0215                     	;# 
  1565  0215                     	;# 
  1566  0215                     	;# 
  1567  0216                     	;# 
  1568  0216                     	;# 
  1569  0217                     	;# 
  1570  0217                     	;# 
  1571  028C                     	;# 
  1572  028D                     	;# 
  1573  028E                     	;# 
  1574  0291                     	;# 
  1575  0291                     	;# 
  1576  0292                     	;# 
  1577  0293                     	;# 
  1578  0294                     	;# 
  1579  0298                     	;# 
  1580  0298                     	;# 
  1581  0299                     	;# 
  1582  029A                     	;# 
  1583  029B                     	;# 
  1584  029E                     	;# 
  1585  030C                     	;# 
  1586  030D                     	;# 
  1587  030E                     	;# 
  1588  038C                     	;# 
  1589  038D                     	;# 
  1590  038E                     	;# 
  1591  0391                     	;# 
  1592  0392                     	;# 
  1593  0393                     	;# 
  1594  0394                     	;# 
  1595  0395                     	;# 
  1596  0396                     	;# 
  1597  0397                     	;# 
  1598  0398                     	;# 
  1599  0399                     	;# 
  1600  040E                     	;# 
  1601  0413                     	;# 
  1602  0413                     	;# 
  1603  0414                     	;# 
  1604  0414                     	;# 
  1605  0415                     	;# 
  1606  0416                     	;# 
  1607  0417                     	;# 
  1608  0418                     	;# 
  1609  041A                     	;# 
  1610  041A                     	;# 
  1611  041B                     	;# 
  1612  041B                     	;# 
  1613  041C                     	;# 
  1614  041D                     	;# 
  1615  041E                     	;# 
  1616  041F                     	;# 
  1617  0493                     	;# 
  1618  0494                     	;# 
  1619  0495                     	;# 
  1620  0496                     	;# 
  1621  049A                     	;# 
  1622  049B                     	;# 
  1623  049C                     	;# 
  1624  049D                     	;# 
  1625  058C                     	;# 
  1626  058C                     	;# 
  1627  058D                     	;# 
  1628  058E                     	;# 
  1629  058E                     	;# 
  1630  058F                     	;# 
  1631  0590                     	;# 
  1632  0590                     	;# 
  1633  0591                     	;# 
  1634  0592                     	;# 
  1635  0592                     	;# 
  1636  0593                     	;# 
  1637  0594                     	;# 
  1638  0594                     	;# 
  1639  0595                     	;# 
  1640  0596                     	;# 
  1641  0596                     	;# 
  1642  0597                     	;# 
  1643  0598                     	;# 
  1644  0599                     	;# 
  1645  059A                     	;# 
  1646  059B                     	;# 
  1647  059B                     	;# 
  1648  059C                     	;# 
  1649  059D                     	;# 
  1650  060C                     	;# 
  1651  060C                     	;# 
  1652  060D                     	;# 
  1653  060E                     	;# 
  1654  060F                     	;# 
  1655  060F                     	;# 
  1656  0610                     	;# 
  1657  0611                     	;# 
  1658  0612                     	;# 
  1659  0613                     	;# 
  1660  0614                     	;# 
  1661  0617                     	;# 
  1662  0618                     	;# 
  1663  0619                     	;# 
  1664  061A                     	;# 
  1665  061B                     	;# 
  1666  061C                     	;# 
  1667  0691                     	;# 
  1668  0692                     	;# 
  1669  0693                     	;# 
  1670  0694                     	;# 
  1671  0695                     	;# 
  1672  0696                     	;# 
  1673  0697                     	;# 
  1674  0699                     	;# 
  1675  069A                     	;# 
  1676  0711                     	;# 
  1677  0712                     	;# 
  1678  0713                     	;# 
  1679  0714                     	;# 
  1680  0715                     	;# 
  1681  0718                     	;# 
  1682  0718                     	;# 
  1683  0719                     	;# 
  1684  071A                     	;# 
  1685  071A                     	;# 
  1686  071B                     	;# 
  1687  071C                     	;# 
  1688  071D                     	;# 
  1689  0791                     	;# 
  1690  0791                     	;# 
  1691  0792                     	;# 
  1692  0793                     	;# 
  1693  0793                     	;# 
  1694  0794                     	;# 
  1695  0795                     	;# 
  1696  0795                     	;# 
  1697  0796                     	;# 
  1698  0797                     	;# 
  1699  0797                     	;# 
  1700  0798                     	;# 
  1701  0799                     	;# 
  1702  079A                     	;# 
  1703  080C                     	;# 
  1704  080C                     	;# 
  1705  080D                     	;# 
  1706  080E                     	;# 
  1707  080E                     	;# 
  1708  080F                     	;# 
  1709  0810                     	;# 
  1710  0810                     	;# 
  1711  0811                     	;# 
  1712  0812                     	;# 
  1713  0812                     	;# 
  1714  0813                     	;# 
  1715  0814                     	;# 
  1716  0815                     	;# 
  1717  0816                     	;# 
  1718  0817                     	;# 
  1719  0818                     	;# 
  1720  0819                     	;# 
  1721  081A                     	;# 
  1722  081A                     	;# 
  1723  081B                     	;# 
  1724  081C                     	;# 
  1725  081C                     	;# 
  1726  081D                     	;# 
  1727  088C                     	;# 
  1728  088D                     	;# 
  1729  088E                     	;# 
  1730  088F                     	;# 
  1731  088F                     	;# 
  1732  0890                     	;# 
  1733  0891                     	;# 
  1734  0892                     	;# 
  1735  0893                     	;# 
  1736  0893                     	;# 
  1737  0894                     	;# 
  1738  0895                     	;# 
  1739  0896                     	;# 
  1740  0897                     	;# 
  1741  0897                     	;# 
  1742  0898                     	;# 
  1743  0899                     	;# 
  1744  0D8C                     	;# 
  1745  0D8C                     	;# 
  1746  0D8D                     	;# 
  1747  0D8E                     	;# 
  1748  0D8F                     	;# 
  1749  0D8F                     	;# 
  1750  0D90                     	;# 
  1751  0D91                     	;# 
  1752  0D92                     	;# 
  1753  0D92                     	;# 
  1754  0D93                     	;# 
  1755  0D94                     	;# 
  1756  0D95                     	;# 
  1757  0D95                     	;# 
  1758  0D96                     	;# 
  1759  0D97                     	;# 
  1760  0D98                     	;# 
  1761  0D99                     	;# 
  1762  0D9A                     	;# 
  1763  0D9B                     	;# 
  1764  0D9C                     	;# 
  1765  0D9D                     	;# 
  1766  0D9E                     	;# 
  1767  0D9E                     	;# 
  1768  0D9F                     	;# 
  1769  0DA0                     	;# 
  1770  0DA1                     	;# 
  1771  0DA1                     	;# 
  1772  0DA2                     	;# 
  1773  0DA3                     	;# 
  1774  0DA4                     	;# 
  1775  0DA4                     	;# 
  1776  0DA5                     	;# 
  1777  0DA6                     	;# 
  1778  0DA7                     	;# 
  1779  0DA7                     	;# 
  1780  0DA8                     	;# 
  1781  0DA9                     	;# 
  1782  0DAA                     	;# 
  1783  0DAB                     	;# 
  1784  0DAC                     	;# 
  1785  0DAD                     	;# 
  1786  0DAE                     	;# 
  1787  0DAF                     	;# 
  1788  0E0F                     	;# 
  1789  0E10                     	;# 
  1790  0E11                     	;# 
  1791  0E12                     	;# 
  1792  0E13                     	;# 
  1793  0E14                     	;# 
  1794  0E15                     	;# 
  1795  0E16                     	;# 
  1796  0E17                     	;# 
  1797  0E18                     	;# 
  1798  0E19                     	;# 
  1799  0E1A                     	;# 
  1800  0E1B                     	;# 
  1801  0E1C                     	;# 
  1802  0E1D                     	;# 
  1803  0E1E                     	;# 
  1804  0E1F                     	;# 
  1805  0E20                     	;# 
  1806  0E21                     	;# 
  1807  0E22                     	;# 
  1808  0E23                     	;# 
  1809  0E24                     	;# 
  1810  0E25                     	;# 
  1811  0E26                     	;# 
  1812  0E27                     	;# 
  1813  0E28                     	;# 
  1814  0E29                     	;# 
  1815  0E2A                     	;# 
  1816  0E2B                     	;# 
  1817  0E2C                     	;# 
  1818  0E2D                     	;# 
  1819  0E2E                     	;# 
  1820  0E90                     	;# 
  1821  0E91                     	;# 
  1822  0E92                     	;# 
  1823  0E94                     	;# 
  1824  0E95                     	;# 
  1825  0E9C                     	;# 
  1826  0E9D                     	;# 
  1827  0E9E                     	;# 
  1828  0E9F                     	;# 
  1829  0EA0                     	;# 
  1830  0EA1                     	;# 
  1831  0EA2                     	;# 
  1832  0EA3                     	;# 
  1833  0EA4                     	;# 
  1834  0EA5                     	;# 
  1835  0EA6                     	;# 
  1836  0EA7                     	;# 
  1837  0F0F                     	;# 
  1838  0F10                     	;# 
  1839  0F11                     	;# 
  1840  0F12                     	;# 
  1841  0F13                     	;# 
  1842  0F14                     	;# 
  1843  0F15                     	;# 
  1844  0F16                     	;# 
  1845  0F17                     	;# 
  1846  0F18                     	;# 
  1847  0F19                     	;# 
  1848  0F1A                     	;# 
  1849  0F1B                     	;# 
  1850  0F1C                     	;# 
  1851  0F1D                     	;# 
  1852  0F1E                     	;# 
  1853  0F1F                     	;# 
  1854  0F20                     	;# 
  1855  0F21                     	;# 
  1856  0F22                     	;# 
  1857  0F23                     	;# 
  1858  0F24                     	;# 
  1859  0F25                     	;# 
  1860  0F26                     	;# 
  1861  0F27                     	;# 
  1862  0F28                     	;# 
  1863  0F29                     	;# 
  1864  0F2A                     	;# 
  1865  0F2B                     	;# 
  1866  0F2C                     	;# 
  1867  0F2D                     	;# 
  1868  0F2E                     	;# 
  1869  0F2F                     	;# 
  1870  0F30                     	;# 
  1871  0F31                     	;# 
  1872  0F32                     	;# 
  1873  0F33                     	;# 
  1874  0F34                     	;# 
  1875  0F35                     	;# 
  1876  0F36                     	;# 
  1877  0F37                     	;# 
  1878  0FE4                     	;# 
  1879  0FE5                     	;# 
  1880  0FE6                     	;# 
  1881  0FE7                     	;# 
  1882  0FE8                     	;# 
  1883  0FE9                     	;# 
  1884  0FEA                     	;# 
  1885  0FEB                     	;# 
  1886  0FED                     	;# 
  1887  0FEE                     	;# 
  1888  0FEF                     	;# 
  1889  0000                     	;# 
  1890  0001                     	;# 
  1891  0002                     	;# 
  1892  0003                     	;# 
  1893  0004                     	;# 
  1894  0005                     	;# 
  1895  0006                     	;# 
  1896  0007                     	;# 
  1897  0008                     	;# 
  1898  0009                     	;# 
  1899  000A                     	;# 
  1900  000B                     	;# 
  1901  000C                     	;# 
  1902  000D                     	;# 
  1903  000E                     	;# 
  1904  0010                     	;# 
  1905  0011                     	;# 
  1906  0012                     	;# 
  1907  0013                     	;# 
  1908  0014                     	;# 
  1909  0015                     	;# 
  1910  0016                     	;# 
  1911  0016                     	;# 
  1912  0017                     	;# 
  1913  0018                     	;# 
  1914  0019                     	;# 
  1915  001A                     	;# 
  1916  001A                     	;# 
  1917  001B                     	;# 
  1918  001B                     	;# 
  1919  001C                     	;# 
  1920  001D                     	;# 
  1921  001E                     	;# 
  1922  001F                     	;# 
  1923  008C                     	;# 
  1924  008D                     	;# 
  1925  008E                     	;# 
  1926  0090                     	;# 
  1927  0091                     	;# 
  1928  0092                     	;# 
  1929  0093                     	;# 
  1930  0094                     	;# 
  1931  0095                     	;# 
  1932  0096                     	;# 
  1933  0098                     	;# 
  1934  0099                     	;# 
  1935  009A                     	;# 
  1936  009B                     	;# 
  1937  009B                     	;# 
  1938  009C                     	;# 
  1939  009D                     	;# 
  1940  009E                     	;# 
  1941  009F                     	;# 
  1942  010C                     	;# 
  1943  010D                     	;# 
  1944  010E                     	;# 
  1945  0111                     	;# 
  1946  0112                     	;# 
  1947  0113                     	;# 
  1948  0114                     	;# 
  1949  0115                     	;# 
  1950  0116                     	;# 
  1951  0117                     	;# 
  1952  0118                     	;# 
  1953  0119                     	;# 
  1954  011C                     	;# 
  1955  018C                     	;# 
  1956  018D                     	;# 
  1957  018E                     	;# 
  1958  0191                     	;# 
  1959  0191                     	;# 
  1960  0192                     	;# 
  1961  0193                     	;# 
  1962  0193                     	;# 
  1963  0194                     	;# 
  1964  0195                     	;# 
  1965  0196                     	;# 
  1966  0197                     	;# 
  1967  0199                     	;# 
  1968  0199                     	;# 
  1969  0199                     	;# 
  1970  019A                     	;# 
  1971  019A                     	;# 
  1972  019A                     	;# 
  1973  019B                     	;# 
  1974  019B                     	;# 
  1975  019B                     	;# 
  1976  019B                     	;# 
  1977  019B                     	;# 
  1978  019C                     	;# 
  1979  019C                     	;# 
  1980  019C                     	;# 
  1981  019D                     	;# 
  1982  019D                     	;# 
  1983  019D                     	;# 
  1984  019E                     	;# 
  1985  019E                     	;# 
  1986  019E                     	;# 
  1987  019F                     	;# 
  1988  019F                     	;# 
  1989  019F                     	;# 
  1990  019F                     	;# 
  1991  019F                     	;# 
  1992  020C                     	;# 
  1993  020D                     	;# 
  1994  020E                     	;# 
  1995  0211                     	;# 
  1996  0211                     	;# 
  1997  0212                     	;# 
  1998  0212                     	;# 
  1999  0213                     	;# 
  2000  0213                     	;# 
  2001  0214                     	;# 
  2002  0214                     	;# 
  2003  0215                     	;# 
  2004  0215                     	;# 
  2005  0215                     	;# 
  2006  0215                     	;# 
  2007  0216                     	;# 
  2008  0216                     	;# 
  2009  0217                     	;# 
  2010  0217                     	;# 
  2011  028C                     	;# 
  2012  028D                     	;# 
  2013  028E                     	;# 
  2014  0291                     	;# 
  2015  0291                     	;# 
  2016  0292                     	;# 
  2017  0293                     	;# 
  2018  0294                     	;# 
  2019  0298                     	;# 
  2020  0298                     	;# 
  2021  0299                     	;# 
  2022  029A                     	;# 
  2023  029B                     	;# 
  2024  029E                     	;# 
  2025  030C                     	;# 
  2026  030D                     	;# 
  2027  030E                     	;# 
  2028  038C                     	;# 
  2029  038D                     	;# 
  2030  038E                     	;# 
  2031  0391                     	;# 
  2032  0392                     	;# 
  2033  0393                     	;# 
  2034  0394                     	;# 
  2035  0395                     	;# 
  2036  0396                     	;# 
  2037  0397                     	;# 
  2038  0398                     	;# 
  2039  0399                     	;# 
  2040  040E                     	;# 
  2041  0413                     	;# 
  2042  0413                     	;# 
  2043  0414                     	;# 
  2044  0414                     	;# 
  2045  0415                     	;# 
  2046  0416                     	;# 
  2047  0417                     	;# 
  2048  0418                     	;# 
  2049  041A                     	;# 
  2050  041A                     	;# 
  2051  041B                     	;# 
  2052  041B                     	;# 
  2053  041C                     	;# 
  2054  041D                     	;# 
  2055  041E                     	;# 
  2056  041F                     	;# 
  2057  0493                     	;# 
  2058  0494                     	;# 
  2059  0495                     	;# 
  2060  0496                     	;# 
  2061  049A                     	;# 
  2062  049B                     	;# 
  2063  049C                     	;# 
  2064  049D                     	;# 
  2065  058C                     	;# 
  2066  058C                     	;# 
  2067  058D                     	;# 
  2068  058E                     	;# 
  2069  058E                     	;# 
  2070  058F                     	;# 
  2071  0590                     	;# 
  2072  0590                     	;# 
  2073  0591                     	;# 
  2074  0592                     	;# 
  2075  0592                     	;# 
  2076  0593                     	;# 
  2077  0594                     	;# 
  2078  0594                     	;# 
  2079  0595                     	;# 
  2080  0596                     	;# 
  2081  0596                     	;# 
  2082  0597                     	;# 
  2083  0598                     	;# 
  2084  0599                     	;# 
  2085  059A                     	;# 
  2086  059B                     	;# 
  2087  059B                     	;# 
  2088  059C                     	;# 
  2089  059D                     	;# 
  2090  060C                     	;# 
  2091  060C                     	;# 
  2092  060D                     	;# 
  2093  060E                     	;# 
  2094  060F                     	;# 
  2095  060F                     	;# 
  2096  0610                     	;# 
  2097  0611                     	;# 
  2098  0612                     	;# 
  2099  0613                     	;# 
  2100  0614                     	;# 
  2101  0617                     	;# 
  2102  0618                     	;# 
  2103  0619                     	;# 
  2104  061A                     	;# 
  2105  061B                     	;# 
  2106  061C                     	;# 
  2107  0691                     	;# 
  2108  0692                     	;# 
  2109  0693                     	;# 
  2110  0694                     	;# 
  2111  0695                     	;# 
  2112  0696                     	;# 
  2113  0697                     	;# 
  2114  0699                     	;# 
  2115  069A                     	;# 
  2116  0711                     	;# 
  2117  0712                     	;# 
  2118  0713                     	;# 
  2119  0714                     	;# 
  2120  0715                     	;# 
  2121  0718                     	;# 
  2122  0718                     	;# 
  2123  0719                     	;# 
  2124  071A                     	;# 
  2125  071A                     	;# 
  2126  071B                     	;# 
  2127  071C                     	;# 
  2128  071D                     	;# 
  2129  0791                     	;# 
  2130  0791                     	;# 
  2131  0792                     	;# 
  2132  0793                     	;# 
  2133  0793                     	;# 
  2134  0794                     	;# 
  2135  0795                     	;# 
  2136  0795                     	;# 
  2137  0796                     	;# 
  2138  0797                     	;# 
  2139  0797                     	;# 
  2140  0798                     	;# 
  2141  0799                     	;# 
  2142  079A                     	;# 
  2143  080C                     	;# 
  2144  080C                     	;# 
  2145  080D                     	;# 
  2146  080E                     	;# 
  2147  080E                     	;# 
  2148  080F                     	;# 
  2149  0810                     	;# 
  2150  0810                     	;# 
  2151  0811                     	;# 
  2152  0812                     	;# 
  2153  0812                     	;# 
  2154  0813                     	;# 
  2155  0814                     	;# 
  2156  0815                     	;# 
  2157  0816                     	;# 
  2158  0817                     	;# 
  2159  0818                     	;# 
  2160  0819                     	;# 
  2161  081A                     	;# 
  2162  081A                     	;# 
  2163  081B                     	;# 
  2164  081C                     	;# 
  2165  081C                     	;# 
  2166  081D                     	;# 
  2167  088C                     	;# 
  2168  088D                     	;# 
  2169  088E                     	;# 
  2170  088F                     	;# 
  2171  088F                     	;# 
  2172  0890                     	;# 
  2173  0891                     	;# 
  2174  0892                     	;# 
  2175  0893                     	;# 
  2176  0893                     	;# 
  2177  0894                     	;# 
  2178  0895                     	;# 
  2179  0896                     	;# 
  2180  0897                     	;# 
  2181  0897                     	;# 
  2182  0898                     	;# 
  2183  0899                     	;# 
  2184  0D8C                     	;# 
  2185  0D8C                     	;# 
  2186  0D8D                     	;# 
  2187  0D8E                     	;# 
  2188  0D8F                     	;# 
  2189  0D8F                     	;# 
  2190  0D90                     	;# 
  2191  0D91                     	;# 
  2192  0D92                     	;# 
  2193  0D92                     	;# 
  2194  0D93                     	;# 
  2195  0D94                     	;# 
  2196  0D95                     	;# 
  2197  0D95                     	;# 
  2198  0D96                     	;# 
  2199  0D97                     	;# 
  2200  0D98                     	;# 
  2201  0D99                     	;# 
  2202  0D9A                     	;# 
  2203  0D9B                     	;# 
  2204  0D9C                     	;# 
  2205  0D9D                     	;# 
  2206  0D9E                     	;# 
  2207  0D9E                     	;# 
  2208  0D9F                     	;# 
  2209  0DA0                     	;# 
  2210  0DA1                     	;# 
  2211  0DA1                     	;# 
  2212  0DA2                     	;# 
  2213  0DA3                     	;# 
  2214  0DA4                     	;# 
  2215  0DA4                     	;# 
  2216  0DA5                     	;# 
  2217  0DA6                     	;# 
  2218  0DA7                     	;# 
  2219  0DA7                     	;# 
  2220  0DA8                     	;# 
  2221  0DA9                     	;# 
  2222  0DAA                     	;# 
  2223  0DAB                     	;# 
  2224  0DAC                     	;# 
  2225  0DAD                     	;# 
  2226  0DAE                     	;# 
  2227  0DAF                     	;# 
  2228  0E0F                     	;# 
  2229  0E10                     	;# 
  2230  0E11                     	;# 
  2231  0E12                     	;# 
  2232  0E13                     	;# 
  2233  0E14                     	;# 
  2234  0E15                     	;# 
  2235  0E16                     	;# 
  2236  0E17                     	;# 
  2237  0E18                     	;# 
  2238  0E19                     	;# 
  2239  0E1A                     	;# 
  2240  0E1B                     	;# 
  2241  0E1C                     	;# 
  2242  0E1D                     	;# 
  2243  0E1E                     	;# 
  2244  0E1F                     	;# 
  2245  0E20                     	;# 
  2246  0E21                     	;# 
  2247  0E22                     	;# 
  2248  0E23                     	;# 
  2249  0E24                     	;# 
  2250  0E25                     	;# 
  2251  0E26                     	;# 
  2252  0E27                     	;# 
  2253  0E28                     	;# 
  2254  0E29                     	;# 
  2255  0E2A                     	;# 
  2256  0E2B                     	;# 
  2257  0E2C                     	;# 
  2258  0E2D                     	;# 
  2259  0E2E                     	;# 
  2260  0E90                     	;# 
  2261  0E91                     	;# 
  2262  0E92                     	;# 
  2263  0E94                     	;# 
  2264  0E95                     	;# 
  2265  0E9C                     	;# 
  2266  0E9D                     	;# 
  2267  0E9E                     	;# 
  2268  0E9F                     	;# 
  2269  0EA0                     	;# 
  2270  0EA1                     	;# 
  2271  0EA2                     	;# 
  2272  0EA3                     	;# 
  2273  0EA4                     	;# 
  2274  0EA5                     	;# 
  2275  0EA6                     	;# 
  2276  0EA7                     	;# 
  2277  0F0F                     	;# 
  2278  0F10                     	;# 
  2279  0F11                     	;# 
  2280  0F12                     	;# 
  2281  0F13                     	;# 
  2282  0F14                     	;# 
  2283  0F15                     	;# 
  2284  0F16                     	;# 
  2285  0F17                     	;# 
  2286  0F18                     	;# 
  2287  0F19                     	;# 
  2288  0F1A                     	;# 
  2289  0F1B                     	;# 
  2290  0F1C                     	;# 
  2291  0F1D                     	;# 
  2292  0F1E                     	;# 
  2293  0F1F                     	;# 
  2294  0F20                     	;# 
  2295  0F21                     	;# 
  2296  0F22                     	;# 
  2297  0F23                     	;# 
  2298  0F24                     	;# 
  2299  0F25                     	;# 
  2300  0F26                     	;# 
  2301  0F27                     	;# 
  2302  0F28                     	;# 
  2303  0F29                     	;# 
  2304  0F2A                     	;# 
  2305  0F2B                     	;# 
  2306  0F2C                     	;# 
  2307  0F2D                     	;# 
  2308  0F2E                     	;# 
  2309  0F2F                     	;# 
  2310  0F30                     	;# 
  2311  0F31                     	;# 
  2312  0F32                     	;# 
  2313  0F33                     	;# 
  2314  0F34                     	;# 
  2315  0F35                     	;# 
  2316  0F36                     	;# 
  2317  0F37                     	;# 
  2318  0FE4                     	;# 
  2319  0FE5                     	;# 
  2320  0FE6                     	;# 
  2321  0FE7                     	;# 
  2322  0FE8                     	;# 
  2323  0FE9                     	;# 
  2324  0FEA                     	;# 
  2325  0FEB                     	;# 
  2326  0FED                     	;# 
  2327  0FEE                     	;# 
  2328  0FEF                     	;# 
  2329  0000                     	;# 
  2330  0001                     	;# 
  2331  0002                     	;# 
  2332  0003                     	;# 
  2333  0004                     	;# 
  2334  0005                     	;# 
  2335  0006                     	;# 
  2336  0007                     	;# 
  2337  0008                     	;# 
  2338  0009                     	;# 
  2339  000A                     	;# 
  2340  000B                     	;# 
  2341  000C                     	;# 
  2342  000D                     	;# 
  2343  000E                     	;# 
  2344  0010                     	;# 
  2345  0011                     	;# 
  2346  0012                     	;# 
  2347  0013                     	;# 
  2348  0014                     	;# 
  2349  0015                     	;# 
  2350  0016                     	;# 
  2351  0016                     	;# 
  2352  0017                     	;# 
  2353  0018                     	;# 
  2354  0019                     	;# 
  2355  001A                     	;# 
  2356  001A                     	;# 
  2357  001B                     	;# 
  2358  001B                     	;# 
  2359  001C                     	;# 
  2360  001D                     	;# 
  2361  001E                     	;# 
  2362  001F                     	;# 
  2363  008C                     	;# 
  2364  008D                     	;# 
  2365  008E                     	;# 
  2366  0090                     	;# 
  2367  0091                     	;# 
  2368  0092                     	;# 
  2369  0093                     	;# 
  2370  0094                     	;# 
  2371  0095                     	;# 
  2372  0096                     	;# 
  2373  0098                     	;# 
  2374  0099                     	;# 
  2375  009A                     	;# 
  2376  009B                     	;# 
  2377  009B                     	;# 
  2378  009C                     	;# 
  2379  009D                     	;# 
  2380  009E                     	;# 
  2381  009F                     	;# 
  2382  010C                     	;# 
  2383  010D                     	;# 
  2384  010E                     	;# 
  2385  0111                     	;# 
  2386  0112                     	;# 
  2387  0113                     	;# 
  2388  0114                     	;# 
  2389  0115                     	;# 
  2390  0116                     	;# 
  2391  0117                     	;# 
  2392  0118                     	;# 
  2393  0119                     	;# 
  2394  011C                     	;# 
  2395  018C                     	;# 
  2396  018D                     	;# 
  2397  018E                     	;# 
  2398  0191                     	;# 
  2399  0191                     	;# 
  2400  0192                     	;# 
  2401  0193                     	;# 
  2402  0193                     	;# 
  2403  0194                     	;# 
  2404  0195                     	;# 
  2405  0196                     	;# 
  2406  0197                     	;# 
  2407  0199                     	;# 
  2408  0199                     	;# 
  2409  0199                     	;# 
  2410  019A                     	;# 
  2411  019A                     	;# 
  2412  019A                     	;# 
  2413  019B                     	;# 
  2414  019B                     	;# 
  2415  019B                     	;# 
  2416  019B                     	;# 
  2417  019B                     	;# 
  2418  019C                     	;# 
  2419  019C                     	;# 
  2420  019C                     	;# 
  2421  019D                     	;# 
  2422  019D                     	;# 
  2423  019D                     	;# 
  2424  019E                     	;# 
  2425  019E                     	;# 
  2426  019E                     	;# 
  2427  019F                     	;# 
  2428  019F                     	;# 
  2429  019F                     	;# 
  2430  019F                     	;# 
  2431  019F                     	;# 
  2432  020C                     	;# 
  2433  020D                     	;# 
  2434  020E                     	;# 
  2435  0211                     	;# 
  2436  0211                     	;# 
  2437  0212                     	;# 
  2438  0212                     	;# 
  2439  0213                     	;# 
  2440  0213                     	;# 
  2441  0214                     	;# 
  2442  0214                     	;# 
  2443  0215                     	;# 
  2444  0215                     	;# 
  2445  0215                     	;# 
  2446  0215                     	;# 
  2447  0216                     	;# 
  2448  0216                     	;# 
  2449  0217                     	;# 
  2450  0217                     	;# 
  2451  028C                     	;# 
  2452  028D                     	;# 
  2453  028E                     	;# 
  2454  0291                     	;# 
  2455  0291                     	;# 
  2456  0292                     	;# 
  2457  0293                     	;# 
  2458  0294                     	;# 
  2459  0298                     	;# 
  2460  0298                     	;# 
  2461  0299                     	;# 
  2462  029A                     	;# 
  2463  029B                     	;# 
  2464  029E                     	;# 
  2465  030C                     	;# 
  2466  030D                     	;# 
  2467  030E                     	;# 
  2468  038C                     	;# 
  2469  038D                     	;# 
  2470  038E                     	;# 
  2471  0391                     	;# 
  2472  0392                     	;# 
  2473  0393                     	;# 
  2474  0394                     	;# 
  2475  0395                     	;# 
  2476  0396                     	;# 
  2477  0397                     	;# 
  2478  0398                     	;# 
  2479  0399                     	;# 
  2480  040E                     	;# 
  2481  0413                     	;# 
  2482  0413                     	;# 
  2483  0414                     	;# 
  2484  0414                     	;# 
  2485  0415                     	;# 
  2486  0416                     	;# 
  2487  0417                     	;# 
  2488  0418                     	;# 
  2489  041A                     	;# 
  2490  041A                     	;# 
  2491  041B                     	;# 
  2492  041B                     	;# 
  2493  041C                     	;# 
  2494  041D                     	;# 
  2495  041E                     	;# 
  2496  041F                     	;# 
  2497  0493                     	;# 
  2498  0494                     	;# 
  2499  0495                     	;# 
  2500  0496                     	;# 
  2501  049A                     	;# 
  2502  049B                     	;# 
  2503  049C                     	;# 
  2504  049D                     	;# 
  2505  058C                     	;# 
  2506  058C                     	;# 
  2507  058D                     	;# 
  2508  058E                     	;# 
  2509  058E                     	;# 
  2510  058F                     	;# 
  2511  0590                     	;# 
  2512  0590                     	;# 
  2513  0591                     	;# 
  2514  0592                     	;# 
  2515  0592                     	;# 
  2516  0593                     	;# 
  2517  0594                     	;# 
  2518  0594                     	;# 
  2519  0595                     	;# 
  2520  0596                     	;# 
  2521  0596                     	;# 
  2522  0597                     	;# 
  2523  0598                     	;# 
  2524  0599                     	;# 
  2525  059A                     	;# 
  2526  059B                     	;# 
  2527  059B                     	;# 
  2528  059C                     	;# 
  2529  059D                     	;# 
  2530  060C                     	;# 
  2531  060C                     	;# 
  2532  060D                     	;# 
  2533  060E                     	;# 
  2534  060F                     	;# 
  2535  060F                     	;# 
  2536  0610                     	;# 
  2537  0611                     	;# 
  2538  0612                     	;# 
  2539  0613                     	;# 
  2540  0614                     	;# 
  2541  0617                     	;# 
  2542  0618                     	;# 
  2543  0619                     	;# 
  2544  061A                     	;# 
  2545  061B                     	;# 
  2546  061C                     	;# 
  2547  0691                     	;# 
  2548  0692                     	;# 
  2549  0693                     	;# 
  2550  0694                     	;# 
  2551  0695                     	;# 
  2552  0696                     	;# 
  2553  0697                     	;# 
  2554  0699                     	;# 
  2555  069A                     	;# 
  2556  0711                     	;# 
  2557  0712                     	;# 
  2558  0713                     	;# 
  2559  0714                     	;# 
  2560  0715                     	;# 
  2561  0718                     	;# 
  2562  0718                     	;# 
  2563  0719                     	;# 
  2564  071A                     	;# 
  2565  071A                     	;# 
  2566  071B                     	;# 
  2567  071C                     	;# 
  2568  071D                     	;# 
  2569  0791                     	;# 
  2570  0791                     	;# 
  2571  0792                     	;# 
  2572  0793                     	;# 
  2573  0793                     	;# 
  2574  0794                     	;# 
  2575  0795                     	;# 
  2576  0795                     	;# 
  2577  0796                     	;# 
  2578  0797                     	;# 
  2579  0797                     	;# 
  2580  0798                     	;# 
  2581  0799                     	;# 
  2582  079A                     	;# 
  2583  080C                     	;# 
  2584  080C                     	;# 
  2585  080D                     	;# 
  2586  080E                     	;# 
  2587  080E                     	;# 
  2588  080F                     	;# 
  2589  0810                     	;# 
  2590  0810                     	;# 
  2591  0811                     	;# 
  2592  0812                     	;# 
  2593  0812                     	;# 
  2594  0813                     	;# 
  2595  0814                     	;# 
  2596  0815                     	;# 
  2597  0816                     	;# 
  2598  0817                     	;# 
  2599  0818                     	;# 
  2600  0819                     	;# 
  2601  081A                     	;# 
  2602  081A                     	;# 
  2603  081B                     	;# 
  2604  081C                     	;# 
  2605  081C                     	;# 
  2606  081D                     	;# 
  2607  088C                     	;# 
  2608  088D                     	;# 
  2609  088E                     	;# 
  2610  088F                     	;# 
  2611  088F                     	;# 
  2612  0890                     	;# 
  2613  0891                     	;# 
  2614  0892                     	;# 
  2615  0893                     	;# 
  2616  0893                     	;# 
  2617  0894                     	;# 
  2618  0895                     	;# 
  2619  0896                     	;# 
  2620  0897                     	;# 
  2621  0897                     	;# 
  2622  0898                     	;# 
  2623  0899                     	;# 
  2624  0D8C                     	;# 
  2625  0D8C                     	;# 
  2626  0D8D                     	;# 
  2627  0D8E                     	;# 
  2628  0D8F                     	;# 
  2629  0D8F                     	;# 
  2630  0D90                     	;# 
  2631  0D91                     	;# 
  2632  0D92                     	;# 
  2633  0D92                     	;# 
  2634  0D93                     	;# 
  2635  0D94                     	;# 
  2636  0D95                     	;# 
  2637  0D95                     	;# 
  2638  0D96                     	;# 
  2639  0D97                     	;# 
  2640  0D98                     	;# 
  2641  0D99                     	;# 
  2642  0D9A                     	;# 
  2643  0D9B                     	;# 
  2644  0D9C                     	;# 
  2645  0D9D                     	;# 
  2646  0D9E                     	;# 
  2647  0D9E                     	;# 
  2648  0D9F                     	;# 
  2649  0DA0                     	;# 
  2650  0DA1                     	;# 
  2651  0DA1                     	;# 
  2652  0DA2                     	;# 
  2653  0DA3                     	;# 
  2654  0DA4                     	;# 
  2655  0DA4                     	;# 
  2656  0DA5                     	;# 
  2657  0DA6                     	;# 
  2658  0DA7                     	;# 
  2659  0DA7                     	;# 
  2660  0DA8                     	;# 
  2661  0DA9                     	;# 
  2662  0DAA                     	;# 
  2663  0DAB                     	;# 
  2664  0DAC                     	;# 
  2665  0DAD                     	;# 
  2666  0DAE                     	;# 
  2667  0DAF                     	;# 
  2668  0E0F                     	;# 
  2669  0E10                     	;# 
  2670  0E11                     	;# 
  2671  0E12                     	;# 
  2672  0E13                     	;# 
  2673  0E14                     	;# 
  2674  0E15                     	;# 
  2675  0E16                     	;# 
  2676  0E17                     	;# 
  2677  0E18                     	;# 
  2678  0E19                     	;# 
  2679  0E1A                     	;# 
  2680  0E1B                     	;# 
  2681  0E1C                     	;# 
  2682  0E1D                     	;# 
  2683  0E1E                     	;# 
  2684  0E1F                     	;# 
  2685  0E20                     	;# 
  2686  0E21                     	;# 
  2687  0E22                     	;# 
  2688  0E23                     	;# 
  2689  0E24                     	;# 
  2690  0E25                     	;# 
  2691  0E26                     	;# 
  2692  0E27                     	;# 
  2693  0E28                     	;# 
  2694  0E29                     	;# 
  2695  0E2A                     	;# 
  2696  0E2B                     	;# 
  2697  0E2C                     	;# 
  2698  0E2D                     	;# 
  2699  0E2E                     	;# 
  2700  0E90                     	;# 
  2701  0E91                     	;# 
  2702  0E92                     	;# 
  2703  0E94                     	;# 
  2704  0E95                     	;# 
  2705  0E9C                     	;# 
  2706  0E9D                     	;# 
  2707  0E9E                     	;# 
  2708  0E9F                     	;# 
  2709  0EA0                     	;# 
  2710  0EA1                     	;# 
  2711  0EA2                     	;# 
  2712  0EA3                     	;# 
  2713  0EA4                     	;# 
  2714  0EA5                     	;# 
  2715  0EA6                     	;# 
  2716  0EA7                     	;# 
  2717  0F0F                     	;# 
  2718  0F10                     	;# 
  2719  0F11                     	;# 
  2720  0F12                     	;# 
  2721  0F13                     	;# 
  2722  0F14                     	;# 
  2723  0F15                     	;# 
  2724  0F16                     	;# 
  2725  0F17                     	;# 
  2726  0F18                     	;# 
  2727  0F19                     	;# 
  2728  0F1A                     	;# 
  2729  0F1B                     	;# 
  2730  0F1C                     	;# 
  2731  0F1D                     	;# 
  2732  0F1E                     	;# 
  2733  0F1F                     	;# 
  2734  0F20                     	;# 
  2735  0F21                     	;# 
  2736  0F22                     	;# 
  2737  0F23                     	;# 
  2738  0F24                     	;# 
  2739  0F25                     	;# 
  2740  0F26                     	;# 
  2741  0F27                     	;# 
  2742  0F28                     	;# 
  2743  0F29                     	;# 
  2744  0F2A                     	;# 
  2745  0F2B                     	;# 
  2746  0F2C                     	;# 
  2747  0F2D                     	;# 
  2748  0F2E                     	;# 
  2749  0F2F                     	;# 
  2750  0F30                     	;# 
  2751  0F31                     	;# 
  2752  0F32                     	;# 
  2753  0F33                     	;# 
  2754  0F34                     	;# 
  2755  0F35                     	;# 
  2756  0F36                     	;# 
  2757  0F37                     	;# 
  2758  0FE4                     	;# 
  2759  0FE5                     	;# 
  2760  0FE6                     	;# 
  2761  0FE7                     	;# 
  2762  0FE8                     	;# 
  2763  0FE9                     	;# 
  2764  0FEA                     	;# 
  2765  0FEB                     	;# 
  2766  0FED                     	;# 
  2767  0FEE                     	;# 
  2768  0FEF                     	;# 
  2769  0000                     	;# 
  2770  0001                     	;# 
  2771  0002                     	;# 
  2772  0003                     	;# 
  2773  0004                     	;# 
  2774  0005                     	;# 
  2775  0006                     	;# 
  2776  0007                     	;# 
  2777  0008                     	;# 
  2778  0009                     	;# 
  2779  000A                     	;# 
  2780  000B                     	;# 
  2781  000C                     	;# 
  2782  000D                     	;# 
  2783  000E                     	;# 
  2784  0010                     	;# 
  2785  0011                     	;# 
  2786  0012                     	;# 
  2787  0013                     	;# 
  2788  0014                     	;# 
  2789  0015                     	;# 
  2790  0016                     	;# 
  2791  0016                     	;# 
  2792  0017                     	;# 
  2793  0018                     	;# 
  2794  0019                     	;# 
  2795  001A                     	;# 
  2796  001A                     	;# 
  2797  001B                     	;# 
  2798  001B                     	;# 
  2799  001C                     	;# 
  2800  001D                     	;# 
  2801  001E                     	;# 
  2802  001F                     	;# 
  2803  008C                     	;# 
  2804  008D                     	;# 
  2805  008E                     	;# 
  2806  0090                     	;# 
  2807  0091                     	;# 
  2808  0092                     	;# 
  2809  0093                     	;# 
  2810  0094                     	;# 
  2811  0095                     	;# 
  2812  0096                     	;# 
  2813  0098                     	;# 
  2814  0099                     	;# 
  2815  009A                     	;# 
  2816  009B                     	;# 
  2817  009B                     	;# 
  2818  009C                     	;# 
  2819  009D                     	;# 
  2820  009E                     	;# 
  2821  009F                     	;# 
  2822  010C                     	;# 
  2823  010D                     	;# 
  2824  010E                     	;# 
  2825  0111                     	;# 
  2826  0112                     	;# 
  2827  0113                     	;# 
  2828  0114                     	;# 
  2829  0115                     	;# 
  2830  0116                     	;# 
  2831  0117                     	;# 
  2832  0118                     	;# 
  2833  0119                     	;# 
  2834  011C                     	;# 
  2835  018C                     	;# 
  2836  018D                     	;# 
  2837  018E                     	;# 
  2838  0191                     	;# 
  2839  0191                     	;# 
  2840  0192                     	;# 
  2841  0193                     	;# 
  2842  0193                     	;# 
  2843  0194                     	;# 
  2844  0195                     	;# 
  2845  0196                     	;# 
  2846  0197                     	;# 
  2847  0199                     	;# 
  2848  0199                     	;# 
  2849  0199                     	;# 
  2850  019A                     	;# 
  2851  019A                     	;# 
  2852  019A                     	;# 
  2853  019B                     	;# 
  2854  019B                     	;# 
  2855  019B                     	;# 
  2856  019B                     	;# 
  2857  019B                     	;# 
  2858  019C                     	;# 
  2859  019C                     	;# 
  2860  019C                     	;# 
  2861  019D                     	;# 
  2862  019D                     	;# 
  2863  019D                     	;# 
  2864  019E                     	;# 
  2865  019E                     	;# 
  2866  019E                     	;# 
  2867  019F                     	;# 
  2868  019F                     	;# 
  2869  019F                     	;# 
  2870  019F                     	;# 
  2871  019F                     	;# 
  2872  020C                     	;# 
  2873  020D                     	;# 
  2874  020E                     	;# 
  2875  0211                     	;# 
  2876  0211                     	;# 
  2877  0212                     	;# 
  2878  0212                     	;# 
  2879  0213                     	;# 
  2880  0213                     	;# 
  2881  0214                     	;# 
  2882  0214                     	;# 
  2883  0215                     	;# 
  2884  0215                     	;# 
  2885  0215                     	;# 
  2886  0215                     	;# 
  2887  0216                     	;# 
  2888  0216                     	;# 
  2889  0217                     	;# 
  2890  0217                     	;# 
  2891  028C                     	;# 
  2892  028D                     	;# 
  2893  028E                     	;# 
  2894  0291                     	;# 
  2895  0291                     	;# 
  2896  0292                     	;# 
  2897  0293                     	;# 
  2898  0294                     	;# 
  2899  0298                     	;# 
  2900  0298                     	;# 
  2901  0299                     	;# 
  2902  029A                     	;# 
  2903  029B                     	;# 
  2904  029E                     	;# 
  2905  030C                     	;# 
  2906  030D                     	;# 
  2907  030E                     	;# 
  2908  038C                     	;# 
  2909  038D                     	;# 
  2910  038E                     	;# 
  2911  0391                     	;# 
  2912  0392                     	;# 
  2913  0393                     	;# 
  2914  0394                     	;# 
  2915  0395                     	;# 
  2916  0396                     	;# 
  2917  0397                     	;# 
  2918  0398                     	;# 
  2919  0399                     	;# 
  2920  040E                     	;# 
  2921  0413                     	;# 
  2922  0413                     	;# 
  2923  0414                     	;# 
  2924  0414                     	;# 
  2925  0415                     	;# 
  2926  0416                     	;# 
  2927  0417                     	;# 
  2928  0418                     	;# 
  2929  041A                     	;# 
  2930  041A                     	;# 
  2931  041B                     	;# 
  2932  041B                     	;# 
  2933  041C                     	;# 
  2934  041D                     	;# 
  2935  041E                     	;# 
  2936  041F                     	;# 
  2937  0493                     	;# 
  2938  0494                     	;# 
  2939  0495                     	;# 
  2940  0496                     	;# 
  2941  049A                     	;# 
  2942  049B                     	;# 
  2943  049C                     	;# 
  2944  049D                     	;# 
  2945  058C                     	;# 
  2946  058C                     	;# 
  2947  058D                     	;# 
  2948  058E                     	;# 
  2949  058E                     	;# 
  2950  058F                     	;# 
  2951  0590                     	;# 
  2952  0590                     	;# 
  2953  0591                     	;# 
  2954  0592                     	;# 
  2955  0592                     	;# 
  2956  0593                     	;# 
  2957  0594                     	;# 
  2958  0594                     	;# 
  2959  0595                     	;# 
  2960  0596                     	;# 
  2961  0596                     	;# 
  2962  0597                     	;# 
  2963  0598                     	;# 
  2964  0599                     	;# 
  2965  059A                     	;# 
  2966  059B                     	;# 
  2967  059B                     	;# 
  2968  059C                     	;# 
  2969  059D                     	;# 
  2970  060C                     	;# 
  2971  060C                     	;# 
  2972  060D                     	;# 
  2973  060E                     	;# 
  2974  060F                     	;# 
  2975  060F                     	;# 
  2976  0610                     	;# 
  2977  0611                     	;# 
  2978  0612                     	;# 
  2979  0613                     	;# 
  2980  0614                     	;# 
  2981  0617                     	;# 
  2982  0618                     	;# 
  2983  0619                     	;# 
  2984  061A                     	;# 
  2985  061B                     	;# 
  2986  061C                     	;# 
  2987  0691                     	;# 
  2988  0692                     	;# 
  2989  0693                     	;# 
  2990  0694                     	;# 
  2991  0695                     	;# 
  2992  0696                     	;# 
  2993  0697                     	;# 
  2994  0699                     	;# 
  2995  069A                     	;# 
  2996  0711                     	;# 
  2997  0712                     	;# 
  2998  0713                     	;# 
  2999  0714                     	;# 
  3000  0715                     	;# 
  3001  0718                     	;# 
  3002  0718                     	;# 
  3003  0719                     	;# 
  3004  071A                     	;# 
  3005  071A                     	;# 
  3006  071B                     	;# 
  3007  071C                     	;# 
  3008  071D                     	;# 
  3009  0791                     	;# 
  3010  0791                     	;# 
  3011  0792                     	;# 
  3012  0793                     	;# 
  3013  0793                     	;# 
  3014  0794                     	;# 
  3015  0795                     	;# 
  3016  0795                     	;# 
  3017  0796                     	;# 
  3018  0797                     	;# 
  3019  0797                     	;# 
  3020  0798                     	;# 
  3021  0799                     	;# 
  3022  079A                     	;# 
  3023  080C                     	;# 
  3024  080C                     	;# 
  3025  080D                     	;# 
  3026  080E                     	;# 
  3027  080E                     	;# 
  3028  080F                     	;# 
  3029  0810                     	;# 
  3030  0810                     	;# 
  3031  0811                     	;# 
  3032  0812                     	;# 
  3033  0812                     	;# 
  3034  0813                     	;# 
  3035  0814                     	;# 
  3036  0815                     	;# 
  3037  0816                     	;# 
  3038  0817                     	;# 
  3039  0818                     	;# 
  3040  0819                     	;# 
  3041  081A                     	;# 
  3042  081A                     	;# 
  3043  081B                     	;# 
  3044  081C                     	;# 
  3045  081C                     	;# 
  3046  081D                     	;# 
  3047  088C                     	;# 
  3048  088D                     	;# 
  3049  088E                     	;# 
  3050  088F                     	;# 
  3051  088F                     	;# 
  3052  0890                     	;# 
  3053  0891                     	;# 
  3054  0892                     	;# 
  3055  0893                     	;# 
  3056  0893                     	;# 
  3057  0894                     	;# 
  3058  0895                     	;# 
  3059  0896                     	;# 
  3060  0897                     	;# 
  3061  0897                     	;# 
  3062  0898                     	;# 
  3063  0899                     	;# 
  3064  0D8C                     	;# 
  3065  0D8C                     	;# 
  3066  0D8D                     	;# 
  3067  0D8E                     	;# 
  3068  0D8F                     	;# 
  3069  0D8F                     	;# 
  3070  0D90                     	;# 
  3071  0D91                     	;# 
  3072  0D92                     	;# 
  3073  0D92                     	;# 
  3074  0D93                     	;# 
  3075  0D94                     	;# 
  3076  0D95                     	;# 
  3077  0D95                     	;# 
  3078  0D96                     	;# 
  3079  0D97                     	;# 
  3080  0D98                     	;# 
  3081  0D99                     	;# 
  3082  0D9A                     	;# 
  3083  0D9B                     	;# 
  3084  0D9C                     	;# 
  3085  0D9D                     	;# 
  3086  0D9E                     	;# 
  3087  0D9E                     	;# 
  3088  0D9F                     	;# 
  3089  0DA0                     	;# 
  3090  0DA1                     	;# 
  3091  0DA1                     	;# 
  3092  0DA2                     	;# 
  3093  0DA3                     	;# 
  3094  0DA4                     	;# 
  3095  0DA4                     	;# 
  3096  0DA5                     	;# 
  3097  0DA6                     	;# 
  3098  0DA7                     	;# 
  3099  0DA7                     	;# 
  3100  0DA8                     	;# 
  3101  0DA9                     	;# 
  3102  0DAA                     	;# 
  3103  0DAB                     	;# 
  3104  0DAC                     	;# 
  3105  0DAD                     	;# 
  3106  0DAE                     	;# 
  3107  0DAF                     	;# 
  3108  0E0F                     	;# 
  3109  0E10                     	;# 
  3110  0E11                     	;# 
  3111  0E12                     	;# 
  3112  0E13                     	;# 
  3113  0E14                     	;# 
  3114  0E15                     	;# 
  3115  0E16                     	;# 
  3116  0E17                     	;# 
  3117  0E18                     	;# 
  3118  0E19                     	;# 
  3119  0E1A                     	;# 
  3120  0E1B                     	;# 
  3121  0E1C                     	;# 
  3122  0E1D                     	;# 
  3123  0E1E                     	;# 
  3124  0E1F                     	;# 
  3125  0E20                     	;# 
  3126  0E21                     	;# 
  3127  0E22                     	;# 
  3128  0E23                     	;# 
  3129  0E24                     	;# 
  3130  0E25                     	;# 
  3131  0E26                     	;# 
  3132  0E27                     	;# 
  3133  0E28                     	;# 
  3134  0E29                     	;# 
  3135  0E2A                     	;# 
  3136  0E2B                     	;# 
  3137  0E2C                     	;# 
  3138  0E2D                     	;# 
  3139  0E2E                     	;# 
  3140  0E90                     	;# 
  3141  0E91                     	;# 
  3142  0E92                     	;# 
  3143  0E94                     	;# 
  3144  0E95                     	;# 
  3145  0E9C                     	;# 
  3146  0E9D                     	;# 
  3147  0E9E                     	;# 
  3148  0E9F                     	;# 
  3149  0EA0                     	;# 
  3150  0EA1                     	;# 
  3151  0EA2                     	;# 
  3152  0EA3                     	;# 
  3153  0EA4                     	;# 
  3154  0EA5                     	;# 
  3155  0EA6                     	;# 
  3156  0EA7                     	;# 
  3157  0F0F                     	;# 
  3158  0F10                     	;# 
  3159  0F11                     	;# 
  3160  0F12                     	;# 
  3161  0F13                     	;# 
  3162  0F14                     	;# 
  3163  0F15                     	;# 
  3164  0F16                     	;# 
  3165  0F17                     	;# 
  3166  0F18                     	;# 
  3167  0F19                     	;# 
  3168  0F1A                     	;# 
  3169  0F1B                     	;# 
  3170  0F1C                     	;# 
  3171  0F1D                     	;# 
  3172  0F1E                     	;# 
  3173  0F1F                     	;# 
  3174  0F20                     	;# 
  3175  0F21                     	;# 
  3176  0F22                     	;# 
  3177  0F23                     	;# 
  3178  0F24                     	;# 
  3179  0F25                     	;# 
  3180  0F26                     	;# 
  3181  0F27                     	;# 
  3182  0F28                     	;# 
  3183  0F29                     	;# 
  3184  0F2A                     	;# 
  3185  0F2B                     	;# 
  3186  0F2C                     	;# 
  3187  0F2D                     	;# 
  3188  0F2E                     	;# 
  3189  0F2F                     	;# 
  3190  0F30                     	;# 
  3191  0F31                     	;# 
  3192  0F32                     	;# 
  3193  0F33                     	;# 
  3194  0F34                     	;# 
  3195  0F35                     	;# 
  3196  0F36                     	;# 
  3197  0F37                     	;# 
  3198  0FE4                     	;# 
  3199  0FE5                     	;# 
  3200  0FE6                     	;# 
  3201  0FE7                     	;# 
  3202  0FE8                     	;# 
  3203  0FE9                     	;# 
  3204  0FEA                     	;# 
  3205  0FEB                     	;# 
  3206  0FED                     	;# 
  3207  0FEE                     	;# 
  3208  0FEF                     	;# 
  3209  0000                     	;# 
  3210  0001                     	;# 
  3211  0002                     	;# 
  3212  0003                     	;# 
  3213  0004                     	;# 
  3214  0005                     	;# 
  3215  0006                     	;# 
  3216  0007                     	;# 
  3217  0008                     	;# 
  3218  0009                     	;# 
  3219  000A                     	;# 
  3220  000B                     	;# 
  3221  000C                     	;# 
  3222  000D                     	;# 
  3223  000E                     	;# 
  3224  0010                     	;# 
  3225  0011                     	;# 
  3226  0012                     	;# 
  3227  0013                     	;# 
  3228  0014                     	;# 
  3229  0015                     	;# 
  3230  0016                     	;# 
  3231  0016                     	;# 
  3232  0017                     	;# 
  3233  0018                     	;# 
  3234  0019                     	;# 
  3235  001A                     	;# 
  3236  001A                     	;# 
  3237  001B                     	;# 
  3238  001B                     	;# 
  3239  001C                     	;# 
  3240  001D                     	;# 
  3241  001E                     	;# 
  3242  001F                     	;# 
  3243  008C                     	;# 
  3244  008D                     	;# 
  3245  008E                     	;# 
  3246  0090                     	;# 
  3247  0091                     	;# 
  3248  0092                     	;# 
  3249  0093                     	;# 
  3250  0094                     	;# 
  3251  0095                     	;# 
  3252  0096                     	;# 
  3253  0098                     	;# 
  3254  0099                     	;# 
  3255  009A                     	;# 
  3256  009B                     	;# 
  3257  009B                     	;# 
  3258  009C                     	;# 
  3259  009D                     	;# 
  3260  009E                     	;# 
  3261  009F                     	;# 
  3262  010C                     	;# 
  3263  010D                     	;# 
  3264  010E                     	;# 
  3265  0111                     	;# 
  3266  0112                     	;# 
  3267  0113                     	;# 
  3268  0114                     	;# 
  3269  0115                     	;# 
  3270  0116                     	;# 
  3271  0117                     	;# 
  3272  0118                     	;# 
  3273  0119                     	;# 
  3274  011C                     	;# 
  3275  018C                     	;# 
  3276  018D                     	;# 
  3277  018E                     	;# 
  3278  0191                     	;# 
  3279  0191                     	;# 
  3280  0192                     	;# 
  3281  0193                     	;# 
  3282  0193                     	;# 
  3283  0194                     	;# 
  3284  0195                     	;# 
  3285  0196                     	;# 
  3286  0197                     	;# 
  3287  0199                     	;# 
  3288  0199                     	;# 
  3289  0199                     	;# 
  3290  019A                     	;# 
  3291  019A                     	;# 
  3292  019A                     	;# 
  3293  019B                     	;# 
  3294  019B                     	;# 
  3295  019B                     	;# 
  3296  019B                     	;# 
  3297  019B                     	;# 
  3298  019C                     	;# 
  3299  019C                     	;# 
  3300  019C                     	;# 
  3301  019D                     	;# 
  3302  019D                     	;# 
  3303  019D                     	;# 
  3304  019E                     	;# 
  3305  019E                     	;# 
  3306  019E                     	;# 
  3307  019F                     	;# 
  3308  019F                     	;# 
  3309  019F                     	;# 
  3310  019F                     	;# 
  3311  019F                     	;# 
  3312  020C                     	;# 
  3313  020D                     	;# 
  3314  020E                     	;# 
  3315  0211                     	;# 
  3316  0211                     	;# 
  3317  0212                     	;# 
  3318  0212                     	;# 
  3319  0213                     	;# 
  3320  0213                     	;# 
  3321  0214                     	;# 
  3322  0214                     	;# 
  3323  0215                     	;# 
  3324  0215                     	;# 
  3325  0215                     	;# 
  3326  0215                     	;# 
  3327  0216                     	;# 
  3328  0216                     	;# 
  3329  0217                     	;# 
  3330  0217                     	;# 
  3331  028C                     	;# 
  3332  028D                     	;# 
  3333  028E                     	;# 
  3334  0291                     	;# 
  3335  0291                     	;# 
  3336  0292                     	;# 
  3337  0293                     	;# 
  3338  0294                     	;# 
  3339  0298                     	;# 
  3340  0298                     	;# 
  3341  0299                     	;# 
  3342  029A                     	;# 
  3343  029B                     	;# 
  3344  029E                     	;# 
  3345  030C                     	;# 
  3346  030D                     	;# 
  3347  030E                     	;# 
  3348  038C                     	;# 
  3349  038D                     	;# 
  3350  038E                     	;# 
  3351  0391                     	;# 
  3352  0392                     	;# 
  3353  0393                     	;# 
  3354  0394                     	;# 
  3355  0395                     	;# 
  3356  0396                     	;# 
  3357  0397                     	;# 
  3358  0398                     	;# 
  3359  0399                     	;# 
  3360  040E                     	;# 
  3361  0413                     	;# 
  3362  0413                     	;# 
  3363  0414                     	;# 
  3364  0414                     	;# 
  3365  0415                     	;# 
  3366  0416                     	;# 
  3367  0417                     	;# 
  3368  0418                     	;# 
  3369  041A                     	;# 
  3370  041A                     	;# 
  3371  041B                     	;# 
  3372  041B                     	;# 
  3373  041C                     	;# 
  3374  041D                     	;# 
  3375  041E                     	;# 
  3376  041F                     	;# 
  3377  0493                     	;# 
  3378  0494                     	;# 
  3379  0495                     	;# 
  3380  0496                     	;# 
  3381  049A                     	;# 
  3382  049B                     	;# 
  3383  049C                     	;# 
  3384  049D                     	;# 
  3385  058C                     	;# 
  3386  058C                     	;# 
  3387  058D                     	;# 
  3388  058E                     	;# 
  3389  058E                     	;# 
  3390  058F                     	;# 
  3391  0590                     	;# 
  3392  0590                     	;# 
  3393  0591                     	;# 
  3394  0592                     	;# 
  3395  0592                     	;# 
  3396  0593                     	;# 
  3397  0594                     	;# 
  3398  0594                     	;# 
  3399  0595                     	;# 
  3400  0596                     	;# 
  3401  0596                     	;# 
  3402  0597                     	;# 
  3403  0598                     	;# 
  3404  0599                     	;# 
  3405  059A                     	;# 
  3406  059B                     	;# 
  3407  059B                     	;# 
  3408  059C                     	;# 
  3409  059D                     	;# 
  3410  060C                     	;# 
  3411  060C                     	;# 
  3412  060D                     	;# 
  3413  060E                     	;# 
  3414  060F                     	;# 
  3415  060F                     	;# 
  3416  0610                     	;# 
  3417  0611                     	;# 
  3418  0612                     	;# 
  3419  0613                     	;# 
  3420  0614                     	;# 
  3421  0617                     	;# 
  3422  0618                     	;# 
  3423  0619                     	;# 
  3424  061A                     	;# 
  3425  061B                     	;# 
  3426  061C                     	;# 
  3427  0691                     	;# 
  3428  0692                     	;# 
  3429  0693                     	;# 
  3430  0694                     	;# 
  3431  0695                     	;# 
  3432  0696                     	;# 
  3433  0697                     	;# 
  3434  0699                     	;# 
  3435  069A                     	;# 
  3436  0711                     	;# 
  3437  0712                     	;# 
  3438  0713                     	;# 
  3439  0714                     	;# 
  3440  0715                     	;# 
  3441  0718                     	;# 
  3442  0718                     	;# 
  3443  0719                     	;# 
  3444  071A                     	;# 
  3445  071A                     	;# 
  3446  071B                     	;# 
  3447  071C                     	;# 
  3448  071D                     	;# 
  3449  0791                     	;# 
  3450  0791                     	;# 
  3451  0792                     	;# 
  3452  0793                     	;# 
  3453  0793                     	;# 
  3454  0794                     	;# 
  3455  0795                     	;# 
  3456  0795                     	;# 
  3457  0796                     	;# 
  3458  0797                     	;# 
  3459  0797                     	;# 
  3460  0798                     	;# 
  3461  0799                     	;# 
  3462  079A                     	;# 
  3463  080C                     	;# 
  3464  080C                     	;# 
  3465  080D                     	;# 
  3466  080E                     	;# 
  3467  080E                     	;# 
  3468  080F                     	;# 
  3469  0810                     	;# 
  3470  0810                     	;# 
  3471  0811                     	;# 
  3472  0812                     	;# 
  3473  0812                     	;# 
  3474  0813                     	;# 
  3475  0814                     	;# 
  3476  0815                     	;# 
  3477  0816                     	;# 
  3478  0817                     	;# 
  3479  0818                     	;# 
  3480  0819                     	;# 
  3481  081A                     	;# 
  3482  081A                     	;# 
  3483  081B                     	;# 
  3484  081C                     	;# 
  3485  081C                     	;# 
  3486  081D                     	;# 
  3487  088C                     	;# 
  3488  088D                     	;# 
  3489  088E                     	;# 
  3490  088F                     	;# 
  3491  088F                     	;# 
  3492  0890                     	;# 
  3493  0891                     	;# 
  3494  0892                     	;# 
  3495  0893                     	;# 
  3496  0893                     	;# 
  3497  0894                     	;# 
  3498  0895                     	;# 
  3499  0896                     	;# 
  3500  0897                     	;# 
  3501  0897                     	;# 
  3502  0898                     	;# 
  3503  0899                     	;# 
  3504  0D8C                     	;# 
  3505  0D8C                     	;# 
  3506  0D8D                     	;# 
  3507  0D8E                     	;# 
  3508  0D8F                     	;# 
  3509  0D8F                     	;# 
  3510  0D90                     	;# 
  3511  0D91                     	;# 
  3512  0D92                     	;# 
  3513  0D92                     	;# 
  3514  0D93                     	;# 
  3515  0D94                     	;# 
  3516  0D95                     	;# 
  3517  0D95                     	;# 
  3518  0D96                     	;# 
  3519  0D97                     	;# 
  3520  0D98                     	;# 
  3521  0D99                     	;# 
  3522  0D9A                     	;# 
  3523  0D9B                     	;# 
  3524  0D9C                     	;# 
  3525  0D9D                     	;# 
  3526  0D9E                     	;# 
  3527  0D9E                     	;# 
  3528  0D9F                     	;# 
  3529  0DA0                     	;# 
  3530  0DA1                     	;# 
  3531  0DA1                     	;# 
  3532  0DA2                     	;# 
  3533  0DA3                     	;# 
  3534  0DA4                     	;# 
  3535  0DA4                     	;# 
  3536  0DA5                     	;# 
  3537  0DA6                     	;# 
  3538  0DA7                     	;# 
  3539  0DA7                     	;# 
  3540  0DA8                     	;# 
  3541  0DA9                     	;# 
  3542  0DAA                     	;# 
  3543  0DAB                     	;# 
  3544  0DAC                     	;# 
  3545  0DAD                     	;# 
  3546  0DAE                     	;# 
  3547  0DAF                     	;# 
  3548  0E0F                     	;# 
  3549  0E10                     	;# 
  3550  0E11                     	;# 
  3551  0E12                     	;# 
  3552  0E13                     	;# 
  3553  0E14                     	;# 
  3554  0E15                     	;# 
  3555  0E16                     	;# 
  3556  0E17                     	;# 
  3557  0E18                     	;# 
  3558  0E19                     	;# 
  3559  0E1A                     	;# 
  3560  0E1B                     	;# 
  3561  0E1C                     	;# 
  3562  0E1D                     	;# 
  3563  0E1E                     	;# 
  3564  0E1F                     	;# 
  3565  0E20                     	;# 
  3566  0E21                     	;# 
  3567  0E22                     	;# 
  3568  0E23                     	;# 
  3569  0E24                     	;# 
  3570  0E25                     	;# 
  3571  0E26                     	;# 
  3572  0E27                     	;# 
  3573  0E28                     	;# 
  3574  0E29                     	;# 
  3575  0E2A                     	;# 
  3576  0E2B                     	;# 
  3577  0E2C                     	;# 
  3578  0E2D                     	;# 
  3579  0E2E                     	;# 
  3580  0E90                     	;# 
  3581  0E91                     	;# 
  3582  0E92                     	;# 
  3583  0E94                     	;# 
  3584  0E95                     	;# 
  3585  0E9C                     	;# 
  3586  0E9D                     	;# 
  3587  0E9E                     	;# 
  3588  0E9F                     	;# 
  3589  0EA0                     	;# 
  3590  0EA1                     	;# 
  3591  0EA2                     	;# 
  3592  0EA3                     	;# 
  3593  0EA4                     	;# 
  3594  0EA5                     	;# 
  3595  0EA6                     	;# 
  3596  0EA7                     	;# 
  3597  0F0F                     	;# 
  3598  0F10                     	;# 
  3599  0F11                     	;# 
  3600  0F12                     	;# 
  3601  0F13                     	;# 
  3602  0F14                     	;# 
  3603  0F15                     	;# 
  3604  0F16                     	;# 
  3605  0F17                     	;# 
  3606  0F18                     	;# 
  3607  0F19                     	;# 
  3608  0F1A                     	;# 
  3609  0F1B                     	;# 
  3610  0F1C                     	;# 
  3611  0F1D                     	;# 
  3612  0F1E                     	;# 
  3613  0F1F                     	;# 
  3614  0F20                     	;# 
  3615  0F21                     	;# 
  3616  0F22                     	;# 
  3617  0F23                     	;# 
  3618  0F24                     	;# 
  3619  0F25                     	;# 
  3620  0F26                     	;# 
  3621  0F27                     	;# 
  3622  0F28                     	;# 
  3623  0F29                     	;# 
  3624  0F2A                     	;# 
  3625  0F2B                     	;# 
  3626  0F2C                     	;# 
  3627  0F2D                     	;# 
  3628  0F2E                     	;# 
  3629  0F2F                     	;# 
  3630  0F30                     	;# 
  3631  0F31                     	;# 
  3632  0F32                     	;# 
  3633  0F33                     	;# 
  3634  0F34                     	;# 
  3635  0F35                     	;# 
  3636  0F36                     	;# 
  3637  0F37                     	;# 
  3638  0FE4                     	;# 
  3639  0FE5                     	;# 
  3640  0FE6                     	;# 
  3641  0FE7                     	;# 
  3642  0FE8                     	;# 
  3643  0FE9                     	;# 
  3644  0FEA                     	;# 
  3645  0FEB                     	;# 
  3646  0FED                     	;# 
  3647  0FEE                     	;# 
  3648  0FEF                     	;# 
  3649                           
  3650                           	psect	idataBANK0
  3651  059C                     __pidataBANK0:	
  3652                           
  3653                           ;initializer for _Angle
  3654  059C  340A               	retlw	10
  3655  059D  3400               	retlw	0
  3656                           
  3657                           ;initializer for _StateBat
  3658  059E  3401               	retlw	1
  3659                           
  3660                           ;initializer for _Validation
  3661  059F  3404               	retlw	4
  3662                           
  3663                           	psect	stringtext1
  3664  03D3                     __pstringtext1:	
  3665  03D3                     _fsmStateTable:	
  3666  03D3  3492               	retlw	low _I2C_DO_IDLE
  3667  03D4  3405               	retlw	high _I2C_DO_IDLE
  3668  03D5  343F               	retlw	low _I2C_DO_SEND_ADR_READ
  3669  03D6  3405               	retlw	high _I2C_DO_SEND_ADR_READ
  3670  03D7  3456               	retlw	low _I2C_DO_SEND_ADR_WRITE
  3671  03D8  3405               	retlw	high _I2C_DO_SEND_ADR_WRITE
  3672  03D9  34B2               	retlw	low _I2C_DO_TX
  3673  03DA  3401               	retlw	high _I2C_DO_TX
  3674  03DB  3438               	retlw	low _I2C_DO_RX
  3675  03DC  3402               	retlw	high _I2C_DO_RX
  3676  03DD  3481               	retlw	low _I2C_DO_RCEN
  3677  03DE  3405               	retlw	high _I2C_DO_RCEN
  3678  03DF  3467               	retlw	low _I2C_DO_TX_EMPTY
  3679  03E0  3403               	retlw	high _I2C_DO_TX_EMPTY
  3680  03E1  34C0               	retlw	low _I2C_DO_SEND_RESTART_READ
  3681  03E2  3405               	retlw	high _I2C_DO_SEND_RESTART_READ
  3682  03E3  34BC               	retlw	low _I2C_DO_SEND_RESTART_WRITE
  3683  03E4  3405               	retlw	high _I2C_DO_SEND_RESTART_WRITE
  3684  03E5  34B8               	retlw	low _I2C_DO_SEND_RESTART
  3685  03E6  3405               	retlw	high _I2C_DO_SEND_RESTART
  3686  03E7  34B4               	retlw	low _I2C_DO_SEND_STOP
  3687  03E8  3405               	retlw	high _I2C_DO_SEND_STOP
  3688  03E9  34B0               	retlw	low _I2C_DO_RX_ACK
  3689  03EA  3405               	retlw	high _I2C_DO_RX_ACK
  3690  03EB  34AC               	retlw	low _I2C_DO_RX_NACK_STOP
  3691  03EC  3405               	retlw	high _I2C_DO_RX_NACK_STOP
  3692  03ED  34A8               	retlw	low _I2C_DO_RX_NACK_RESTART
  3693  03EE  3405               	retlw	high _I2C_DO_RX_NACK_RESTART
  3694  03EF  348D               	retlw	low _I2C_DO_RESET
  3695  03F0  3405               	retlw	high _I2C_DO_RESET
  3696  03F1  34B0               	retlw	low _I2C_DO_ADDRESS_NACK
  3697  03F2  3403               	retlw	high _I2C_DO_ADDRESS_NACK
  3698  03F3                     __end_of_fsmStateTable:	
  3699                           
  3700                           	psect	nvBANK0
  3701  0063                     __pnvBANK0:	
  3702  0063                     _TMR2_InterruptHandler:	
  3703  0063                     	ds	2
  3704  0065                     _EUSART_RxDefaultInterruptHandler:	
  3705  0065                     	ds	2
  3706                           
  3707                           	psect	nvBANK1
  3708  00A0                     __pnvBANK1:	
  3709  00A0                     _EUSART_ErrorHandler:	
  3710  00A0                     	ds	2
  3711  00A2                     _EUSART_OverrunErrorHandler:	
  3712  00A2                     	ds	2
  3713  00A4                     _EUSART_FramingErrorHandler:	
  3714  00A4                     	ds	2
  3715  000C                     _PORTAbits	set	12
  3716  001B                     _PR2	set	27
  3717  001A                     _TMR2	set	26
  3718  001C                     _T2CONbits	set	28
  3719  001F                     _T2RSTbits	set	31
  3720  001D                     _T2HLTbits	set	29
  3721  001C                     _T2CON	set	28
  3722  001A                     _T2TMR	set	26
  3723  001B                     _T2PR	set	27
  3724  001F                     _T2RST	set	31
  3725  001D                     _T2HLT	set	29
  3726  001E                     _T2CLKCON	set	30
  3727  0011                     _PIR2bits	set	17
  3728  0010                     _PIR1bits	set	16
  3729  000B                     _INTCONbits	set	11
  3730  0095                     _OPTION_REGbits	set	149
  3731  008E                     _TRISC	set	142
  3732  008D                     _TRISB	set	141
  3733  008C                     _TRISA	set	140
  3734  0098                     _OSCTUNE	set	152
  3735  0099                     _OSCCON	set	153
  3736  0090                     _PIE1bits	set	144
  3737  010C                     _LATAbits	set	268
  3738  010E                     _LATCbits	set	270
  3739  010E                     _LATC	set	270
  3740  010D                     _LATB	set	269
  3741  010C                     _LATA	set	268
  3742  0116                     _BORCON	set	278
  3743  0199                     _RC1REG	set	409
  3744  019D                     _RC1STAbits	set	413
  3745  019A                     _TX1REG	set	410
  3746  019E                     _TX1STAbits	set	414
  3747  019C                     _SPBRGH	set	412
  3748  019B                     _SPBRGL	set	411
  3749  019E                     _TX1STA	set	414
  3750  019D                     _RC1STA	set	413
  3751  019F                     _BAUD1CON	set	415
  3752  018C                     _ANSELA	set	396
  3753  018D                     _ANSELB	set	397
  3754  018E                     _ANSELC	set	398
  3755  0214                     _SSP1STATbits	set	532
  3756  0216                     _SSP1CON2bits	set	534
  3757  0211                     _SSP1BUF	set	529
  3758  0215                     _SSP1CON1bits	set	533
  3759  0212                     _SSP1ADD	set	530
  3760  0216                     _SSP1CON2	set	534
  3761  0215                     _SSP1CON1	set	533
  3762  0214                     _SSP1STAT	set	532
  3763  020E                     _WPUC	set	526
  3764  020C                     _WPUA	set	524
  3765  020D                     _WPUB	set	525
  3766  029E                     _CCPTMRSbits	set	670
  3767  028E                     _ODCONC	set	654
  3768  028D                     _ODCONB	set	653
  3769  028C                     _ODCONA	set	652
  3770  030E                     _SLRCONC	set	782
  3771  030D                     _SLRCONB	set	781
  3772  030C                     _SLRCONA	set	780
  3773  038E                     _INLVLC	set	910
  3774  038D                     _INLVLB	set	909
  3775  038C                     _INLVLA	set	908
  3776  0617                     _PWM3DCL	set	1559
  3777  0618                     _PWM3DCH	set	1560
  3778  0619                     _PWM3CON	set	1561
  3779  0E20                     _SSPCLKPPS	set	3616
  3780  0E21                     _SSPDATPPS	set	3617
  3781  0E24                     _RXPPS	set	3620
  3782  0E92                     _RA2PPS	set	3730
  3783  0E9C                     _RB4PPS	set	3740
  3784  0E9F                     _RB7PPS	set	3743
  3785  0E9E                     _RB6PPS	set	3742
  3786                           
  3787                           ; #config settings
  3788  0000                     
  3789                           	psect	cinit
  3790  0026                     start_initialization:	
  3791  0026                     __initialization:	
  3792                           
  3793                           ; Initialize objects allocated to BANK0
  3794  0026  3185  259C  3180   	fcall	__pidataBANK0	;fetch initializer
  3795  0029  00E7               	movwf	__pdataBANK0& (0+127)
  3796  002A  3185  259D  3180   	fcall	__pidataBANK0+1	;fetch initializer
  3797  002D  00E8               	movwf	(__pdataBANK0+1)& (0+127)
  3798  002E  3185  259E  3180   	fcall	__pidataBANK0+2	;fetch initializer
  3799  0031  00E9               	movwf	(__pdataBANK0+2)& (0+127)
  3800  0032  3185  259F  3180   	fcall	__pidataBANK0+3	;fetch initializer
  3801  0035  00EA               	movwf	(__pdataBANK0+3)& (0+127)
  3802                           
  3803                           ; Clear objects allocated to BANK0
  3804  0036  3020               	movlw	low __pbssBANK0
  3805  0037  0084               	movwf	4
  3806  0038  3000               	movlw	high __pbssBANK0
  3807  0039  0085               	movwf	5
  3808  003A  3037               	movlw	55
  3809  003B  3185  255D         	fcall	clear_ram0
  3810  003D                     end_of_initialization:	
  3811                           ;End of C runtime variable initialization code
  3812                           
  3813  003D                     __end_of__initialization:	
  3814  003D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3815  003E  0020               	movlb	0
  3816  003F  3181  295D         	ljmp	_main	;jump to C main() function
  3817                           
  3818                           	psect	bssBANK0
  3819  0020                     __pbssBANK0:	
  3820  0020                     _I2C_Status:	
  3821  0020                     	ds	29
  3822  003D                     _eusartRxStatusBuffer:	
  3823  003D                     	ds	8
  3824  0045                     _eusartRxBuffer:	
  3825  0045                     	ds	8
  3826  004D                     _Vitesse:	
  3827  004D                     	ds	2
  3828  004F                     _StateLeds:	
  3829  004F                     	ds	1
  3830  0050                     _PosUart:	
  3831  0050                     	ds	1
  3832  0051                     _Type:	
  3833  0051                     	ds	1
  3834  0052                     _Data:	
  3835  0052                     	ds	1
  3836  0053                     _eusartRxLastError:	
  3837  0053                     	ds	1
  3838  0054                     _eusartRxCount:	
  3839  0054                     	ds	1
  3840  0055                     _eusartRxTail:	
  3841  0055                     	ds	1
  3842  0056                     _eusartRxHead:	
  3843  0056                     	ds	1
  3844                           
  3845                           	psect	dataBANK0
  3846  0067                     __pdataBANK0:	
  3847  0067                     _Angle:	
  3848  0067                     	ds	2
  3849  0069                     _StateBat:	
  3850  0069                     	ds	1
  3851  006A                     _Validation:	
  3852  006A                     	ds	1
  3853                           
  3854                           	psect	clrtext
  3855  055D                     clear_ram0:	
  3856                           ;	Called with FSR0 containing the base address, and
  3857                           ;	WREG with the size to clear
  3858                           
  3859  055D  0064               	clrwdt	;clear the watchdog before getting into this loop
  3860  055E                     clrloop0:	
  3861  055E  0180               	clrf	0	;clear RAM location pointed to by FSR
  3862  055F  3101               	addfsr 0,1
  3863  0560  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3864  0561  2D5E               	goto	clrloop0	;have we reached the end yet?
  3865  0562  3400               	retlw	0	;all done for this memory range, return
  3866                           
  3867                           	psect	cstackBANK1
  3868  00A6                     __pcstackBANK1:	
  3869  00A6                     ??_I2C_Initialize:	
  3870  00A6                     ??_PIN_MANAGER_Initialize:	
  3871                           ; 1 bytes @ 0x0
  3872                           
  3873  00A6                     ??_OSCILLATOR_Initialize:	
  3874                           ; 1 bytes @ 0x0
  3875                           
  3876  00A6                     ??_PWM3_Initialize:	
  3877                           ; 1 bytes @ 0x0
  3878                           
  3879  00A6                     ?_EUSART_SetRxInterruptHandler:	
  3880                           ; 1 bytes @ 0x0
  3881                           
  3882  00A6                     ?_EUSART_SetFramingErrorHandler:	
  3883                           ; 1 bytes @ 0x0
  3884                           
  3885  00A6                     ?_EUSART_SetOverrunErrorHandler:	
  3886                           ; 1 bytes @ 0x0
  3887                           
  3888  00A6                     ?_EUSART_SetErrorHandler:	
  3889                           ; 1 bytes @ 0x0
  3890                           
  3891  00A6                     ?_TMR2_SetInterruptHandler:	
  3892                           ; 1 bytes @ 0x0
  3893                           
  3894  00A6                     ??_TMR2_Start:	
  3895                           ; 1 bytes @ 0x0
  3896                           
  3897  00A6                     ??_TMR2_StartTimer:	
  3898                           ; 1 bytes @ 0x0
  3899                           
  3900  00A6                     ??_TMR2_Counter8BitSet:	
  3901                           ; 1 bytes @ 0x0
  3902                           
  3903  00A6                     TMR2_Counter8BitSet@timerVal:	
  3904                           ; 1 bytes @ 0x0
  3905                           
  3906  00A6                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3907                           ; 1 bytes @ 0x0
  3908                           
  3909  00A6                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3910                           ; 2 bytes @ 0x0
  3911                           
  3912  00A6                     EUSART_SetErrorHandler@interruptHandler:	
  3913                           ; 2 bytes @ 0x0
  3914                           
  3915  00A6                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3916                           ; 2 bytes @ 0x0
  3917                           
  3918  00A6                     TMR2_SetInterruptHandler@InterruptHandler:	
  3919                           ; 2 bytes @ 0x0
  3920                           
  3921                           
  3922                           ; 2 bytes @ 0x0
  3923  00A6                     	ds	1
  3924  00A7                     ??_TMR2_WriteTimer:	
  3925  00A7                     TMR2_WriteTimer@timerVal:	
  3926                           ; 1 bytes @ 0x1
  3927                           
  3928                           
  3929                           ; 1 bytes @ 0x1
  3930  00A7                     	ds	1
  3931  00A8                     ??_TMR2_Initialize:	
  3932  00A8                     ??_EUSART_Initialize:	
  3933                           ; 1 bytes @ 0x2
  3934                           
  3935  00A8                     ??_EUSART_SetRxInterruptHandler:	
  3936                           ; 1 bytes @ 0x2
  3937                           
  3938  00A8                     ??_EUSART_SetFramingErrorHandler:	
  3939                           ; 1 bytes @ 0x2
  3940                           
  3941  00A8                     ??_EUSART_SetOverrunErrorHandler:	
  3942                           ; 1 bytes @ 0x2
  3943                           
  3944  00A8                     ??_EUSART_SetErrorHandler:	
  3945                           ; 1 bytes @ 0x2
  3946                           
  3947  00A8                     ??_TMR2_SetInterruptHandler:	
  3948                           ; 1 bytes @ 0x2
  3949                           
  3950  00A8                     ??_SYSTEM_Initialize:	
  3951                           ; 1 bytes @ 0x2
  3952                           
  3953  00A8                     ??_main:	
  3954                           ; 1 bytes @ 0x2
  3955                           
  3956                           
  3957                           ; 1 bytes @ 0x2
  3958  00A8                     	ds	2
  3959                           
  3960                           	psect	cstackCOMMON
  3961  0070                     __pcstackCOMMON:	
  3962  0070                     ?_I2C_Open:	
  3963  0070                     ??_I2C_Open:	
  3964                           ; 1 bytes @ 0x0
  3965                           
  3966  0070                     ?_I2C_SetBuffer:	
  3967                           ; 1 bytes @ 0x0
  3968                           
  3969  0070                     ?_I2C_MasterWrite:	
  3970                           ; 1 bytes @ 0x0
  3971                           
  3972  0070                     ?_I2C_Close:	
  3973                           ; 1 bytes @ 0x0
  3974                           
  3975  0070                     ??_I2C_Close:	
  3976                           ; 1 bytes @ 0x0
  3977                           
  3978  0070                     ?_TMR2_ISR:	
  3979                           ; 1 bytes @ 0x0
  3980                           
  3981  0070                     ?_I2C_Initialize:	
  3982                           ; 1 bytes @ 0x0
  3983                           
  3984  0070                     ?_PIN_MANAGER_Initialize:	
  3985                           ; 1 bytes @ 0x0
  3986                           
  3987  0070                     ?_OSCILLATOR_Initialize:	
  3988                           ; 1 bytes @ 0x0
  3989                           
  3990  0070                     ?_PWM3_Initialize:	
  3991                           ; 1 bytes @ 0x0
  3992                           
  3993  0070                     ?_TMR2_Initialize:	
  3994                           ; 1 bytes @ 0x0
  3995                           
  3996  0070                     ?_EUSART_Initialize:	
  3997                           ; 1 bytes @ 0x0
  3998                           
  3999  0070                     ?_I2C_DO_IDLE:	
  4000                           ; 1 bytes @ 0x0
  4001                           
  4002  0070                     ??_I2C_DO_IDLE:	
  4003                           ; 1 bytes @ 0x0
  4004                           
  4005  0070                     ?_I2C_DO_SEND_ADR_READ:	
  4006                           ; 1 bytes @ 0x0
  4007                           
  4008  0070                     ??_I2C_DO_SEND_ADR_READ:	
  4009                           ; 1 bytes @ 0x0
  4010                           
  4011  0070                     ?_I2C_DO_SEND_ADR_WRITE:	
  4012                           ; 1 bytes @ 0x0
  4013                           
  4014  0070                     ?_I2C_DO_TX:	
  4015                           ; 1 bytes @ 0x0
  4016                           
  4017  0070                     ?_I2C_DO_RX:	
  4018                           ; 1 bytes @ 0x0
  4019                           
  4020  0070                     ?_I2C_DO_RCEN:	
  4021                           ; 1 bytes @ 0x0
  4022                           
  4023  0070                     ??_I2C_DO_RCEN:	
  4024                           ; 1 bytes @ 0x0
  4025                           
  4026  0070                     ?_I2C_DO_TX_EMPTY:	
  4027                           ; 1 bytes @ 0x0
  4028                           
  4029  0070                     ?_I2C_DO_SEND_RESTART_READ:	
  4030                           ; 1 bytes @ 0x0
  4031                           
  4032  0070                     ??_I2C_DO_SEND_RESTART_READ:	
  4033                           ; 1 bytes @ 0x0
  4034                           
  4035  0070                     ?_I2C_DO_SEND_RESTART_WRITE:	
  4036                           ; 1 bytes @ 0x0
  4037                           
  4038  0070                     ??_I2C_DO_SEND_RESTART_WRITE:	
  4039                           ; 1 bytes @ 0x0
  4040                           
  4041  0070                     ?_I2C_DO_SEND_RESTART:	
  4042                           ; 1 bytes @ 0x0
  4043                           
  4044  0070                     ??_I2C_DO_SEND_RESTART:	
  4045                           ; 1 bytes @ 0x0
  4046                           
  4047  0070                     ?_I2C_DO_SEND_STOP:	
  4048                           ; 1 bytes @ 0x0
  4049                           
  4050  0070                     ??_I2C_DO_SEND_STOP:	
  4051                           ; 1 bytes @ 0x0
  4052                           
  4053  0070                     ?_I2C_DO_RX_ACK:	
  4054                           ; 1 bytes @ 0x0
  4055                           
  4056  0070                     ??_I2C_DO_RX_ACK:	
  4057                           ; 1 bytes @ 0x0
  4058                           
  4059  0070                     ?_I2C_DO_RX_NACK_STOP:	
  4060                           ; 1 bytes @ 0x0
  4061                           
  4062  0070                     ??_I2C_DO_RX_NACK_STOP:	
  4063                           ; 1 bytes @ 0x0
  4064                           
  4065  0070                     ?_I2C_DO_RX_NACK_RESTART:	
  4066                           ; 1 bytes @ 0x0
  4067                           
  4068  0070                     ??_I2C_DO_RX_NACK_RESTART:	
  4069                           ; 1 bytes @ 0x0
  4070                           
  4071  0070                     ?_I2C_DO_RESET:	
  4072                           ; 1 bytes @ 0x0
  4073                           
  4074  0070                     ??_I2C_DO_RESET:	
  4075                           ; 1 bytes @ 0x0
  4076                           
  4077  0070                     ?_I2C_DO_ADDRESS_NACK:	
  4078                           ; 1 bytes @ 0x0
  4079                           
  4080  0070                     ?_I2C_MasterClearIrq:	
  4081                           ; 1 bytes @ 0x0
  4082                           
  4083  0070                     ??_I2C_MasterClearIrq:	
  4084                           ; 1 bytes @ 0x0
  4085                           
  4086  0070                     ?_I2C_MasterOpen:	
  4087                           ; 1 bytes @ 0x0
  4088                           
  4089  0070                     ??_I2C_MasterOpen:	
  4090                           ; 1 bytes @ 0x0
  4091                           
  4092  0070                     ?_I2C_MasterDisableIrq:	
  4093                           ; 1 bytes @ 0x0
  4094                           
  4095  0070                     ??_I2C_MasterDisableIrq:	
  4096                           ; 1 bytes @ 0x0
  4097                           
  4098  0070                     ?_I2C_MasterClose:	
  4099                           ; 1 bytes @ 0x0
  4100                           
  4101  0070                     ??_I2C_MasterClose:	
  4102                           ; 1 bytes @ 0x0
  4103                           
  4104  0070                     ?_I2C_MasterStart:	
  4105                           ; 1 bytes @ 0x0
  4106                           
  4107  0070                     ??_I2C_MasterStart:	
  4108                           ; 1 bytes @ 0x0
  4109                           
  4110  0070                     ?_I2C_Poller:	
  4111                           ; 1 bytes @ 0x0
  4112                           
  4113  0070                     ?_I2C_SetCallback:	
  4114                           ; 1 bytes @ 0x0
  4115                           
  4116  0070                     ?_I2C_MasterWaitForEvent:	
  4117                           ; 1 bytes @ 0x0
  4118                           
  4119  0070                     ??_I2C_MasterWaitForEvent:	
  4120                           ; 1 bytes @ 0x0
  4121                           
  4122  0070                     ?_I2C_MasterFsm:	
  4123                           ; 1 bytes @ 0x0
  4124                           
  4125  0070                     ?_I2C_MasterIsNack:	
  4126                           ; 1 bytes @ 0x0
  4127                           
  4128  0070                     ??_I2C_MasterIsNack:	
  4129                           ; 1 bytes @ 0x0
  4130                           
  4131  0070                     ?_I2C_MasterSendTxData:	
  4132                           ; 1 bytes @ 0x0
  4133                           
  4134  0070                     ??_I2C_MasterSendTxData:	
  4135                           ; 1 bytes @ 0x0
  4136                           
  4137  0070                     ?_I2C_MasterGetRxData:	
  4138                           ; 1 bytes @ 0x0
  4139                           
  4140  0070                     ??_I2C_MasterGetRxData:	
  4141                           ; 1 bytes @ 0x0
  4142                           
  4143  0070                     ?_I2C_MasterSendAck:	
  4144                           ; 1 bytes @ 0x0
  4145                           
  4146  0070                     ??_I2C_MasterSendAck:	
  4147                           ; 1 bytes @ 0x0
  4148                           
  4149  0070                     ?_I2C_MasterStartRx:	
  4150                           ; 1 bytes @ 0x0
  4151                           
  4152  0070                     ??_I2C_MasterStartRx:	
  4153                           ; 1 bytes @ 0x0
  4154                           
  4155  0070                     ?_I2C_MasterSetIrq:	
  4156                           ; 1 bytes @ 0x0
  4157                           
  4158  0070                     ??_I2C_MasterSetIrq:	
  4159                           ; 1 bytes @ 0x0
  4160                           
  4161  0070                     ?_I2C_MasterEnableRestart:	
  4162                           ; 1 bytes @ 0x0
  4163                           
  4164  0070                     ??_I2C_MasterEnableRestart:	
  4165                           ; 1 bytes @ 0x0
  4166                           
  4167  0070                     ?_I2C_MasterStop:	
  4168                           ; 1 bytes @ 0x0
  4169                           
  4170  0070                     ??_I2C_MasterStop:	
  4171                           ; 1 bytes @ 0x0
  4172                           
  4173  0070                     ?_I2C_MasterSendNack:	
  4174                           ; 1 bytes @ 0x0
  4175                           
  4176  0070                     ??_I2C_MasterSendNack:	
  4177                           ; 1 bytes @ 0x0
  4178                           
  4179  0070                     ?_EUSART_Receive_ISR:	
  4180                           ; 1 bytes @ 0x0
  4181                           
  4182  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  4183                           ; 1 bytes @ 0x0
  4184                           
  4185  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  4186                           ; 1 bytes @ 0x0
  4187                           
  4188  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  4189                           ; 1 bytes @ 0x0
  4190                           
  4191  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  4192                           ; 1 bytes @ 0x0
  4193                           
  4194  0070                     ?_EUSART_DefaultErrorHandler:	
  4195                           ; 1 bytes @ 0x0
  4196                           
  4197  0070                     ?_EUSART_RxDataHandler:	
  4198                           ; 1 bytes @ 0x0
  4199                           
  4200  0070                     ??_EUSART_RxDataHandler:	
  4201                           ; 1 bytes @ 0x0
  4202                           
  4203  0070                     ?_TMR2_DefaultInterruptHandler:	
  4204                           ; 1 bytes @ 0x0
  4205                           
  4206  0070                     ??_TMR2_DefaultInterruptHandler:	
  4207                           ; 1 bytes @ 0x0
  4208                           
  4209  0070                     ?_INTERRUPT_InterruptManager:	
  4210                           ; 1 bytes @ 0x0
  4211                           
  4212  0070                     ?_SYSTEM_Initialize:	
  4213                           ; 1 bytes @ 0x0
  4214                           
  4215  0070                     ?_I2C_MasterOperation:	
  4216                           ; 1 bytes @ 0x0
  4217                           
  4218  0070                     ?_EUSART_Write:	
  4219                           ; 1 bytes @ 0x0
  4220                           
  4221  0070                     ??_EUSART_Write:	
  4222                           ; 1 bytes @ 0x0
  4223                           
  4224  0070                     ?_PWM3_LoadDutyValue:	
  4225                           ; 1 bytes @ 0x0
  4226                           
  4227  0070                     ?_TMR2_Start:	
  4228                           ; 1 bytes @ 0x0
  4229                           
  4230  0070                     ?_TMR2_StartTimer:	
  4231                           ; 1 bytes @ 0x0
  4232                           
  4233  0070                     ?_TMR2_Counter8BitSet:	
  4234                           ; 1 bytes @ 0x0
  4235                           
  4236  0070                     ?_TMR2_WriteTimer:	
  4237                           ; 1 bytes @ 0x0
  4238                           
  4239  0070                     ?_MyTimer2ISR:	
  4240                           ; 1 bytes @ 0x0
  4241                           
  4242  0070                     ?_MyUART_ISR:	
  4243                           ; 1 bytes @ 0x0
  4244                           
  4245  0070                     ?_main:	
  4246                           ; 1 bytes @ 0x0
  4247                           
  4248  0070                     I2C_MasterSendTxData@data:	
  4249                           ; 1 bytes @ 0x0
  4250                           
  4251  0070                     EUSART_Write@txData:	
  4252                           ; 1 bytes @ 0x0
  4253                           
  4254  0070                     I2C_SetBuffer@bufferSize:	
  4255                           ; 1 bytes @ 0x0
  4256                           
  4257  0070                     I2C_SetCallback@cb:	
  4258                           ; 2 bytes @ 0x0
  4259                           
  4260  0070                     PWM3_LoadDutyValue@dutyValue:	
  4261                           ; 2 bytes @ 0x0
  4262                           
  4263                           
  4264                           ; 2 bytes @ 0x0
  4265  0070                     	ds	1
  4266  0071                     ??_I2C_DO_SEND_ADR_WRITE:	
  4267  0071                     ??_EUSART_Receive_ISR:	
  4268                           ; 1 bytes @ 0x1
  4269                           
  4270  0071                     ??_EUSART_DefaultErrorHandler:	
  4271                           ; 1 bytes @ 0x1
  4272                           
  4273  0071                     ??_MyUART_ISR:	
  4274                           ; 1 bytes @ 0x1
  4275                           
  4276  0071                     I2C_Open@address:	
  4277                           ; 1 bytes @ 0x1
  4278                           
  4279  0071                     I2C_Close@returnValue:	
  4280                           ; 1 bytes @ 0x1
  4281                           
  4282                           
  4283                           ; 1 bytes @ 0x1
  4284  0071                     	ds	1
  4285  0072                     ??_I2C_SetBuffer:	
  4286  0072                     ??_PWM3_LoadDutyValue:	
  4287                           ; 1 bytes @ 0x2
  4288                           
  4289  0072                     I2C_Open@returnValue:	
  4290                           ; 1 bytes @ 0x2
  4291                           
  4292  0072                     I2C_SetCallback@ptr:	
  4293                           ; 1 bytes @ 0x2
  4294                           
  4295                           
  4296                           ; 1 bytes @ 0x2
  4297  0072                     	ds	1
  4298  0073                     ??_I2C_SetCallback:	
  4299  0073                     I2C_SetBuffer@buffer:	
  4300                           ; 1 bytes @ 0x3
  4301                           
  4302                           
  4303                           ; 1 bytes @ 0x3
  4304  0073                     	ds	1
  4305  0074                     I2C_SetCallback@idx:	
  4306                           
  4307                           ; 1 bytes @ 0x4
  4308  0074                     	ds	1
  4309  0075                     ?_I2C_SetDataCompleteCallback:	
  4310  0075                     ?_I2C_SetAddressNackCallback:	
  4311                           ; 1 bytes @ 0x5
  4312                           
  4313  0075                     MyUART_ISR@c:	
  4314                           ; 1 bytes @ 0x5
  4315                           
  4316  0075                     I2C_SetDataCompleteCallback@cb:	
  4317                           ; 1 bytes @ 0x5
  4318                           
  4319  0075                     I2C_SetAddressNackCallback@cb:	
  4320                           ; 2 bytes @ 0x5
  4321                           
  4322                           
  4323                           ; 2 bytes @ 0x5
  4324  0075                     	ds	2
  4325  0077                     I2C_SetDataCompleteCallback@ptr:	
  4326  0077                     I2C_SetAddressNackCallback@ptr:	
  4327                           ; 1 bytes @ 0x7
  4328                           
  4329                           
  4330                           ; 1 bytes @ 0x7
  4331  0077                     	ds	1
  4332  0078                     ??_I2C_SetDataCompleteCallback:	
  4333  0078                     ??_I2C_SetAddressNackCallback:	
  4334                           ; 1 bytes @ 0x8
  4335                           
  4336                           
  4337                           ; 1 bytes @ 0x8
  4338  0078                     	ds	1
  4339  0079                     ?_rd1RegCompleteHandler:	
  4340  0079                     ?_rd2RegCompleteHandler:	
  4341                           ; 1 bytes @ 0x9
  4342                           
  4343  0079                     ?_wr1RegCompleteHandler:	
  4344                           ; 1 bytes @ 0x9
  4345                           
  4346  0079                     ?_wr2RegCompleteHandler:	
  4347                           ; 1 bytes @ 0x9
  4348                           
  4349  0079                     ?_rdBlkRegCompleteHandler:	
  4350                           ; 1 bytes @ 0x9
  4351                           
  4352  0079                     ?_I2C_CallbackReturnStop:	
  4353                           ; 1 bytes @ 0x9
  4354                           
  4355  0079                     ?_I2C_CallbackReturnReset:	
  4356                           ; 1 bytes @ 0x9
  4357                           
  4358  0079                     rd1RegCompleteHandler@ptr:	
  4359                           ; 1 bytes @ 0x9
  4360                           
  4361  0079                     rd2RegCompleteHandler@ptr:	
  4362                           ; 1 bytes @ 0x9
  4363                           
  4364  0079                     wr1RegCompleteHandler@ptr:	
  4365                           ; 1 bytes @ 0x9
  4366                           
  4367  0079                     wr2RegCompleteHandler@ptr:	
  4368                           ; 1 bytes @ 0x9
  4369                           
  4370  0079                     rdBlkRegCompleteHandler@ptr:	
  4371                           ; 1 bytes @ 0x9
  4372                           
  4373  0079                     I2C_CallbackReturnStop@funPtr:	
  4374                           ; 1 bytes @ 0x9
  4375                           
  4376  0079                     I2C_CallbackReturnReset@funPtr:	
  4377                           ; 1 bytes @ 0x9
  4378                           
  4379                           
  4380                           ; 1 bytes @ 0x9
  4381  0079                     	ds	1
  4382  007A                     ??_rd1RegCompleteHandler:	
  4383  007A                     ??_rd2RegCompleteHandler:	
  4384                           ; 1 bytes @ 0xA
  4385                           
  4386  007A                     ??_wr1RegCompleteHandler:	
  4387                           ; 1 bytes @ 0xA
  4388                           
  4389  007A                     ??_wr2RegCompleteHandler:	
  4390                           ; 1 bytes @ 0xA
  4391                           
  4392  007A                     ??_rdBlkRegCompleteHandler:	
  4393                           ; 1 bytes @ 0xA
  4394                           
  4395  007A                     ??_I2C_DO_TX:	
  4396                           ; 1 bytes @ 0xA
  4397                           
  4398  007A                     ??_I2C_DO_RX:	
  4399                           ; 1 bytes @ 0xA
  4400                           
  4401  007A                     ??_I2C_DO_TX_EMPTY:	
  4402                           ; 1 bytes @ 0xA
  4403                           
  4404  007A                     ??_I2C_DO_ADDRESS_NACK:	
  4405                           ; 1 bytes @ 0xA
  4406                           
  4407  007A                     ??_I2C_CallbackReturnStop:	
  4408                           ; 1 bytes @ 0xA
  4409                           
  4410  007A                     ??_I2C_CallbackReturnReset:	
  4411                           ; 1 bytes @ 0xA
  4412                           
  4413                           
  4414                           ; 1 bytes @ 0xA
  4415  007A                     	ds	1
  4416  007B                     _I2C_DO_TX$794:	
  4417                           
  4418                           ; 2 bytes @ 0xB
  4419  007B                     	ds	2
  4420  007D                     ??_I2C_Poller:	
  4421  007D                     ??_I2C_MasterOperation:	
  4422                           ; 1 bytes @ 0xD
  4423                           
  4424                           
  4425                           ; 1 bytes @ 0xD
  4426  007D                     	ds	1
  4427  007E                     ??_I2C_MasterWrite:	
  4428  007E                     ??_TMR2_ISR:	
  4429                           ; 1 bytes @ 0xE
  4430                           
  4431                           
  4432                           	psect	cstackBANK0
  4433  0057                     __pcstackBANK0:	
  4434                           ; 1 bytes @ 0xE
  4435                           
  4436  0057                     ??_I2C_MasterFsm:	
  4437                           
  4438                           ; 1 bytes @ 0x0
  4439  0057                     	ds	3
  4440  005A                     I2C_MasterOperation@read:	
  4441                           
  4442                           ; 1 bytes @ 0x3
  4443  005A                     	ds	1
  4444  005B                     I2C_MasterOperation@returnValue:	
  4445                           
  4446                           ; 1 bytes @ 0x4
  4447  005B                     	ds	1
  4448  005C                     ?_I2C_Write1ByteRegister:	
  4449  005C                     I2C_Write1ByteRegister@reg:	
  4450                           ; 1 bytes @ 0x5
  4451                           
  4452                           
  4453                           ; 1 bytes @ 0x5
  4454  005C                     	ds	1
  4455  005D                     I2C_Write1ByteRegister@data:	
  4456                           
  4457                           ; 1 bytes @ 0x6
  4458  005D                     	ds	1
  4459  005E                     ??_I2C_Write1ByteRegister:	
  4460                           
  4461                           ; 1 bytes @ 0x7
  4462  005E                     	ds	1
  4463  005F                     I2C_Write1ByteRegister@address:	
  4464                           
  4465                           ; 1 bytes @ 0x8
  4466  005F                     	ds	1
  4467  0060                     ??_MyTimer2ISR:	
  4468                           
  4469                           ; 1 bytes @ 0x9
  4470  0060                     	ds	2
  4471  0062                     ??_INTERRUPT_InterruptManager:	
  4472                           
  4473                           ; 1 bytes @ 0xB
  4474  0062                     	ds	1
  4475                           
  4476                           	psect	maintext
  4477  015D                     __pmaintext:	
  4478 ;;
  4479 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4480 ;;
  4481 ;; *************** function _main *****************
  4482 ;; Defined at:
  4483 ;;		line 166 in file "main.c"
  4484 ;; Parameters:    Size  Location     Type
  4485 ;;		None
  4486 ;; Auto vars:     Size  Location     Type
  4487 ;;		None
  4488 ;; Return value:  Size  Location     Type
  4489 ;;                  1    wreg      void 
  4490 ;; Registers used:
  4491 ;;		wreg, status,2, status,0, pclath, cstack
  4492 ;; Tracked objects:
  4493 ;;		On entry : B1F/0
  4494 ;;		On exit  : 0/0
  4495 ;;		Unchanged: 0/0
  4496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4499 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4500 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4501 ;;Total ram usage:        2 bytes
  4502 ;; Hardware stack levels required when called:   15
  4503 ;; This function calls:
  4504 ;;		_EUSART_SetRxInterruptHandler
  4505 ;;		_SYSTEM_Initialize
  4506 ;;		_TMR2_SetInterruptHandler
  4507 ;;		_TMR2_StartTimer
  4508 ;;		_TMR2_WriteTimer
  4509 ;; This function is called by:
  4510 ;;		Startup code after reset
  4511 ;; This function uses a non-reentrant model
  4512 ;;
  4513                           
  4514                           
  4515                           ;psect for function _main
  4516  015D                     _main:	
  4517                           
  4518                           ;main.c: 167: SYSTEM_Initialize();
  4519                           
  4520                           ;incstack = 0
  4521                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
  4522  015D  3184  247E  3181   	fcall	_SYSTEM_Initialize
  4523                           
  4524                           ;main.c: 169: do { LATAbits.LATA5 = 1; } while(0);
  4525  0160  0022               	movlb	2	; select bank2
  4526  0161  168C               	bsf	12,5	;volatile
  4527                           
  4528                           ;main.c: 176: TMR2_SetInterruptHandler(MyTimer2ISR);
  4529  0162  30F9               	movlw	low _MyTimer2ISR
  4530  0163  0021               	movlb	1	; select bank1
  4531  0164  00A6               	movwf	TMR2_SetInterruptHandler@InterruptHandler^(0+128)
  4532  0165  3000               	movlw	high _MyTimer2ISR
  4533  0166  00A7               	movwf	(TMR2_SetInterruptHandler@InterruptHandler^(0+128)+1)
  4534  0167  3185  252D  3181   	fcall	_TMR2_SetInterruptHandler
  4535                           
  4536                           ;main.c: 177: TMR2_WriteTimer(255);
  4537  016A  30FF               	movlw	255
  4538  016B  3185  2563  3181   	fcall	_TMR2_WriteTimer
  4539                           
  4540                           ;main.c: 178: TMR2_StartTimer();
  4541  016E  3185  25D0  3181   	fcall	_TMR2_StartTimer
  4542                           
  4543                           ;main.c: 180: EUSART_SetRxInterruptHandler(MyUART_ISR);
  4544  0171  3041               	movlw	low _MyUART_ISR
  4545  0172  0021               	movlb	1	; select bank1
  4546  0173  00A6               	movwf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128)
  4547  0174  3000               	movlw	high _MyUART_ISR
  4548  0175  00A7               	movwf	(EUSART_SetRxInterruptHandler@interruptHandler^(0+128)+1)
  4549  0176  3185  2536  3181   	fcall	_EUSART_SetRxInterruptHandler
  4550                           
  4551                           ;main.c: 182: (INTCONbits.PEIE = 1);
  4552  0179  170B               	bsf	11,6	;volatile
  4553                           
  4554                           ;main.c: 183: (INTCONbits.GIE = 1);
  4555  017A  178B               	bsf	11,7	;volatile
  4556  017B  29AC               	goto	l3105
  4557  017C                     l3107:	
  4558                           
  4559                           ;main.c: 187: if(Validation) {
  4560  017C  086A               	movf	_Validation,w
  4561  017D  1903               	btfsc	3,2
  4562  017E  2998               	goto	l3113
  4563                           
  4564                           ;main.c: 188: do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  4565  017F  1003               	clrc
  4566  0180  0022               	movlb	2	; select bank2
  4567  0181  1E8C               	btfss	12,5	;volatile
  4568  0182  1403               	setc
  4569  0183  1C03               	btfss	3,0
  4570  0184  2988               	goto	u1330
  4571  0185  0022               	movlb	2	; select bank2
  4572  0186  168C               	bsf	12,5	;volatile
  4573  0187  298A               	goto	l3111
  4574  0188                     u1330:	
  4575  0188  0022               	movlb	2	; select bank2
  4576  0189  128C               	bcf	12,5	;volatile
  4577  018A                     l3111:	
  4578                           
  4579                           ;main.c: 189: _delay((unsigned long)((500)*(4000000/4000.0)));
  4580  018A  3003               	movlw	3
  4581  018B  0021               	movlb	1	; select bank1
  4582  018C  00A9               	movwf	(??_main^(0+128)+1)
  4583  018D  308A               	movlw	138
  4584  018E  00A8               	movwf	??_main^(0+128)
  4585  018F  3055               	movlw	85
  4586  0190                     u1377:	
  4587  0190  0B89               	decfsz	9,f
  4588  0191  2990               	goto	u1377
  4589  0192  0BA8               	decfsz	??_main^(0+128),f
  4590  0193  2990               	goto	u1377
  4591  0194  0BA9               	decfsz	(??_main^(0+128)+1),f
  4592  0195  2990               	goto	u1377
  4593  0196  3200               	nop2
  4594                           
  4595                           ;main.c: 190: } else {
  4596  0197  29AC               	goto	l3105
  4597  0198                     l3113:	
  4598                           ;main.c: 191: do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  4599                           
  4600  0198  1003               	clrc
  4601  0199  0022               	movlb	2	; select bank2
  4602  019A  1E8C               	btfss	12,5	;volatile
  4603  019B  1403               	setc
  4604  019C  1C03               	btfss	3,0
  4605  019D  29A1               	goto	u1350
  4606  019E  0022               	movlb	2	; select bank2
  4607  019F  168C               	bsf	12,5	;volatile
  4608  01A0  29A3               	goto	l3115
  4609  01A1                     u1350:	
  4610  01A1  0022               	movlb	2	; select bank2
  4611  01A2  128C               	bcf	12,5	;volatile
  4612  01A3                     l3115:	
  4613                           
  4614                           ;main.c: 192: _delay((unsigned long)((100)*(4000000/4000.0)));
  4615  01A3  3082               	movlw	130
  4616  01A4  0021               	movlb	1	; select bank1
  4617  01A5  00A8               	movwf	??_main^(0+128)
  4618  01A6  30DD               	movlw	221
  4619  01A7                     u1387:	
  4620  01A7  0B89               	decfsz	9,f
  4621  01A8  29A7               	goto	u1387
  4622  01A9  0BA8               	decfsz	??_main^(0+128),f
  4623  01AA  29A7               	goto	u1387
  4624  01AB  3200               	nop2
  4625  01AC                     l3105:	
  4626                           ;main.c: 185: while (1) {
  4627                           
  4628                           ;main.c: 193: }
  4629                           ;main.c: 194: } else {
  4630                           
  4631                           
  4632                           ;main.c: 186: if(PORTAbits.RA4) {
  4633  01AC  0020               	movlb	0	; select bank0
  4634  01AD  1A0C               	btfsc	12,4	;volatile
  4635  01AE  297C               	goto	l3107
  4636                           
  4637                           ;main.c: 195: do { LATAbits.LATA5 = 1; } while(0);
  4638  01AF  0022               	movlb	2	; select bank2
  4639  01B0  168C               	bsf	12,5	;volatile
  4640  01B1  29AC               	goto	l3105
  4641  01B2                     __end_of_main:	
  4642                           
  4643                           	psect	text1
  4644  0563                     __ptext1:	
  4645 ;; *************** function _TMR2_WriteTimer *****************
  4646 ;; Defined at:
  4647 ;;		line 150 in file "mcc_generated_files/tmr2.c"
  4648 ;; Parameters:    Size  Location     Type
  4649 ;;  timerVal        1    wreg     unsigned char 
  4650 ;; Auto vars:     Size  Location     Type
  4651 ;;  timerVal        1    1[BANK1 ] unsigned char 
  4652 ;; Return value:  Size  Location     Type
  4653 ;;                  1    wreg      void 
  4654 ;; Registers used:
  4655 ;;		wreg, status,2, status,0, pclath, cstack
  4656 ;; Tracked objects:
  4657 ;;		On entry : 0/0
  4658 ;;		On exit  : 0/0
  4659 ;;		Unchanged: 0/0
  4660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4662 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4664 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4665 ;;Total ram usage:        1 bytes
  4666 ;; Hardware stack levels used:    1
  4667 ;; Hardware stack levels required when called:   13
  4668 ;; This function calls:
  4669 ;;		_TMR2_Counter8BitSet
  4670 ;; This function is called by:
  4671 ;;		_main
  4672 ;; This function uses a non-reentrant model
  4673 ;;
  4674                           
  4675                           
  4676                           ;psect for function _TMR2_WriteTimer
  4677  0563                     _TMR2_WriteTimer:	
  4678                           
  4679                           ;incstack = 0
  4680                           ; Regs used in _TMR2_WriteTimer: [wreg+status,2+status,0+pclath+cstack]
  4681                           ;TMR2_WriteTimer@timerVal stored from wreg
  4682  0563  0021               	movlb	1	; select bank1
  4683  0564  00A7               	movwf	TMR2_WriteTimer@timerVal^(0+128)
  4684                           
  4685                           ;tmr2.c: 152: TMR2_Counter8BitSet(timerVal);
  4686  0565  0827               	movf	TMR2_WriteTimer@timerVal^(0+128),w
  4687  0566  3185  2569         	fcall	_TMR2_Counter8BitSet
  4688  0568  0008               	return
  4689  0569                     __end_of_TMR2_WriteTimer:	
  4690                           
  4691                           	psect	text2
  4692  0569                     __ptext2:	
  4693 ;; *************** function _TMR2_Counter8BitSet *****************
  4694 ;; Defined at:
  4695 ;;		line 144 in file "mcc_generated_files/tmr2.c"
  4696 ;; Parameters:    Size  Location     Type
  4697 ;;  timerVal        1    wreg     unsigned char 
  4698 ;; Auto vars:     Size  Location     Type
  4699 ;;  timerVal        1    0[BANK1 ] unsigned char 
  4700 ;; Return value:  Size  Location     Type
  4701 ;;                  1    wreg      void 
  4702 ;; Registers used:
  4703 ;;		wreg
  4704 ;; Tracked objects:
  4705 ;;		On entry : 0/0
  4706 ;;		On exit  : 0/0
  4707 ;;		Unchanged: 0/0
  4708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4710 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4712 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4713 ;;Total ram usage:        1 bytes
  4714 ;; Hardware stack levels used:    1
  4715 ;; Hardware stack levels required when called:   12
  4716 ;; This function calls:
  4717 ;;		Nothing
  4718 ;; This function is called by:
  4719 ;;		_TMR2_WriteTimer
  4720 ;; This function uses a non-reentrant model
  4721 ;;
  4722                           
  4723                           
  4724                           ;psect for function _TMR2_Counter8BitSet
  4725  0569                     _TMR2_Counter8BitSet:	
  4726                           
  4727                           ;incstack = 0
  4728                           ; Regs used in _TMR2_Counter8BitSet: [wreg]
  4729                           ;TMR2_Counter8BitSet@timerVal stored from wreg
  4730  0569  0021               	movlb	1	; select bank1
  4731  056A  00A6               	movwf	TMR2_Counter8BitSet@timerVal^(0+128)
  4732                           
  4733                           ;tmr2.c: 147: TMR2 = timerVal;
  4734  056B  0826               	movf	TMR2_Counter8BitSet@timerVal^(0+128),w
  4735  056C  0020               	movlb	0	; select bank0
  4736  056D  009A               	movwf	26	;volatile
  4737  056E  0008               	return
  4738  056F                     __end_of_TMR2_Counter8BitSet:	
  4739                           
  4740                           	psect	text3
  4741  05D0                     __ptext3:	
  4742 ;; *************** function _TMR2_StartTimer *****************
  4743 ;; Defined at:
  4744 ;;		line 114 in file "mcc_generated_files/tmr2.c"
  4745 ;; Parameters:    Size  Location     Type
  4746 ;;		None
  4747 ;; Auto vars:     Size  Location     Type
  4748 ;;		None
  4749 ;; Return value:  Size  Location     Type
  4750 ;;                  1    wreg      void 
  4751 ;; Registers used:
  4752 ;;		status,2, status,0, pclath, cstack
  4753 ;; Tracked objects:
  4754 ;;		On entry : 0/0
  4755 ;;		On exit  : 0/0
  4756 ;;		Unchanged: 0/0
  4757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4761 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4762 ;;Total ram usage:        0 bytes
  4763 ;; Hardware stack levels used:    1
  4764 ;; Hardware stack levels required when called:   13
  4765 ;; This function calls:
  4766 ;;		_TMR2_Start
  4767 ;; This function is called by:
  4768 ;;		_main
  4769 ;; This function uses a non-reentrant model
  4770 ;;
  4771                           
  4772                           
  4773                           ;psect for function _TMR2_StartTimer
  4774  05D0                     _TMR2_StartTimer:	
  4775                           
  4776                           ;tmr2.c: 116: TMR2_Start();
  4777                           
  4778                           ;incstack = 0
  4779                           ; Regs used in _TMR2_StartTimer: [status,2+status,0+pclath+cstack]
  4780  05D0  3185  25D3         	fcall	_TMR2_Start
  4781  05D2  0008               	return
  4782  05D3                     __end_of_TMR2_StartTimer:	
  4783                           
  4784                           	psect	text4
  4785  05D3                     __ptext4:	
  4786 ;; *************** function _TMR2_Start *****************
  4787 ;; Defined at:
  4788 ;;		line 108 in file "mcc_generated_files/tmr2.c"
  4789 ;; Parameters:    Size  Location     Type
  4790 ;;		None
  4791 ;; Auto vars:     Size  Location     Type
  4792 ;;		None
  4793 ;; Return value:  Size  Location     Type
  4794 ;;                  1    wreg      void 
  4795 ;; Registers used:
  4796 ;;		None
  4797 ;; Tracked objects:
  4798 ;;		On entry : 0/0
  4799 ;;		On exit  : 0/0
  4800 ;;		Unchanged: 0/0
  4801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4805 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4806 ;;Total ram usage:        0 bytes
  4807 ;; Hardware stack levels used:    1
  4808 ;; Hardware stack levels required when called:   12
  4809 ;; This function calls:
  4810 ;;		Nothing
  4811 ;; This function is called by:
  4812 ;;		_TMR2_StartTimer
  4813 ;; This function uses a non-reentrant model
  4814 ;;
  4815                           
  4816                           
  4817                           ;psect for function _TMR2_Start
  4818  05D3                     _TMR2_Start:	
  4819                           
  4820                           ;tmr2.c: 111: T2CONbits.TMR2ON = 1;
  4821                           
  4822                           ;incstack = 0
  4823                           ; Regs used in _TMR2_Start: []
  4824  05D3  0020               	movlb	0	; select bank0
  4825  05D4  179C               	bsf	28,7	;volatile
  4826  05D5  0008               	return
  4827  05D6                     __end_of_TMR2_Start:	
  4828                           
  4829                           	psect	text5
  4830  047E                     __ptext5:	
  4831 ;; *************** function _SYSTEM_Initialize *****************
  4832 ;; Defined at:
  4833 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4834 ;; Parameters:    Size  Location     Type
  4835 ;;		None
  4836 ;; Auto vars:     Size  Location     Type
  4837 ;;		None
  4838 ;; Return value:  Size  Location     Type
  4839 ;;                  1    wreg      void 
  4840 ;; Registers used:
  4841 ;;		wreg, status,2, status,0, pclath, cstack
  4842 ;; Tracked objects:
  4843 ;;		On entry : 0/0
  4844 ;;		On exit  : 0/0
  4845 ;;		Unchanged: 0/0
  4846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4850 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4851 ;;Total ram usage:        0 bytes
  4852 ;; Hardware stack levels used:    1
  4853 ;; Hardware stack levels required when called:   14
  4854 ;; This function calls:
  4855 ;;		_EUSART_Initialize
  4856 ;;		_I2C_Initialize
  4857 ;;		_OSCILLATOR_Initialize
  4858 ;;		_PIN_MANAGER_Initialize
  4859 ;;		_PWM3_Initialize
  4860 ;;		_TMR2_Initialize
  4861 ;; This function is called by:
  4862 ;;		_main
  4863 ;; This function uses a non-reentrant model
  4864 ;;
  4865                           
  4866                           
  4867                           ;psect for function _SYSTEM_Initialize
  4868  047E                     _SYSTEM_Initialize:	
  4869                           
  4870                           ;mcc.c: 52: I2C_Initialize();
  4871                           
  4872                           ;incstack = 0
  4873                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4874  047E  3185  2519  3184   	fcall	_I2C_Initialize
  4875                           
  4876                           ;mcc.c: 53: PIN_MANAGER_Initialize();
  4877  0481  3181  21FD  3184   	fcall	_PIN_MANAGER_Initialize
  4878                           
  4879                           ;mcc.c: 54: OSCILLATOR_Initialize();
  4880  0484  3185  254F  3184   	fcall	_OSCILLATOR_Initialize
  4881                           
  4882                           ;mcc.c: 55: PWM3_Initialize();
  4883  0487  3185  250E  3184   	fcall	_PWM3_Initialize
  4884                           
  4885                           ;mcc.c: 56: TMR2_Initialize();
  4886  048A  3184  246A  3184   	fcall	_TMR2_Initialize
  4887                           
  4888                           ;mcc.c: 57: EUSART_Initialize();
  4889  048D  3182  22DF         	fcall	_EUSART_Initialize
  4890  048F  0008               	return
  4891  0490                     __end_of_SYSTEM_Initialize:	
  4892                           
  4893                           	psect	text6
  4894  046A                     __ptext6:	
  4895 ;; *************** function _TMR2_Initialize *****************
  4896 ;; Defined at:
  4897 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  4898 ;; Parameters:    Size  Location     Type
  4899 ;;		None
  4900 ;; Auto vars:     Size  Location     Type
  4901 ;;		None
  4902 ;; Return value:  Size  Location     Type
  4903 ;;                  1    wreg      void 
  4904 ;; Registers used:
  4905 ;;		wreg, status,2, status,0, pclath, cstack
  4906 ;; Tracked objects:
  4907 ;;		On entry : 0/0
  4908 ;;		On exit  : 0/0
  4909 ;;		Unchanged: 0/0
  4910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4914 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4915 ;;Total ram usage:        0 bytes
  4916 ;; Hardware stack levels used:    1
  4917 ;; Hardware stack levels required when called:   13
  4918 ;; This function calls:
  4919 ;;		_TMR2_SetInterruptHandler
  4920 ;; This function is called by:
  4921 ;;		_SYSTEM_Initialize
  4922 ;; This function uses a non-reentrant model
  4923 ;;
  4924                           
  4925                           
  4926                           ;psect for function _TMR2_Initialize
  4927  046A                     _TMR2_Initialize:	
  4928                           
  4929                           ;tmr2.c: 69: T2CLKCON = 0x00;
  4930                           
  4931                           ;incstack = 0
  4932                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4933  046A  0020               	movlb	0	; select bank0
  4934  046B  019E               	clrf	30	;volatile
  4935                           
  4936                           ;tmr2.c: 72: T2HLT = 0x00;
  4937  046C  019D               	clrf	29	;volatile
  4938                           
  4939                           ;tmr2.c: 75: T2RST = 0x00;
  4940  046D  019F               	clrf	31	;volatile
  4941                           
  4942                           ;tmr2.c: 78: T2PR = 0x9B;
  4943  046E  309B               	movlw	155
  4944  046F  009B               	movwf	27	;volatile
  4945                           
  4946                           ;tmr2.c: 81: T2TMR = 0x00;
  4947  0470  019A               	clrf	26	;volatile
  4948                           
  4949                           ;tmr2.c: 84: PIR1bits.TMR2IF = 0;
  4950  0471  1090               	bcf	16,1	;volatile
  4951                           
  4952                           ;tmr2.c: 87: PIE1bits.TMR2IE = 1;
  4953  0472  0021               	movlb	1	; select bank1
  4954  0473  1490               	bsf	16,1	;volatile
  4955                           
  4956                           ;tmr2.c: 90: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
  4957  0474  30F8               	movlw	low _TMR2_DefaultInterruptHandler
  4958  0475  00A6               	movwf	TMR2_SetInterruptHandler@InterruptHandler^(0+128)
  4959  0476  3005               	movlw	high _TMR2_DefaultInterruptHandler
  4960  0477  00A7               	movwf	(TMR2_SetInterruptHandler@InterruptHandler^(0+128)+1)
  4961  0478  3185  252D         	fcall	_TMR2_SetInterruptHandler
  4962                           
  4963                           ;tmr2.c: 93: T2CON = 0xF0;
  4964  047A  30F0               	movlw	240
  4965  047B  0020               	movlb	0	; select bank0
  4966  047C  009C               	movwf	28	;volatile
  4967  047D  0008               	return
  4968  047E                     __end_of_TMR2_Initialize:	
  4969                           
  4970                           	psect	text7
  4971  052D                     __ptext7:	
  4972 ;; *************** function _TMR2_SetInterruptHandler *****************
  4973 ;; Defined at:
  4974 ;;		line 178 in file "mcc_generated_files/tmr2.c"
  4975 ;; Parameters:    Size  Location     Type
  4976 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  4977 ;;		 -> MyTimer2ISR(1), TMR2_DefaultInterruptHandler(1), 
  4978 ;; Auto vars:     Size  Location     Type
  4979 ;;		None
  4980 ;; Return value:  Size  Location     Type
  4981 ;;                  1    wreg      void 
  4982 ;; Registers used:
  4983 ;;		wreg
  4984 ;; Tracked objects:
  4985 ;;		On entry : 0/0
  4986 ;;		On exit  : 0/0
  4987 ;;		Unchanged: 0/0
  4988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4989 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4992 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4993 ;;Total ram usage:        2 bytes
  4994 ;; Hardware stack levels used:    1
  4995 ;; Hardware stack levels required when called:   12
  4996 ;; This function calls:
  4997 ;;		Nothing
  4998 ;; This function is called by:
  4999 ;;		_TMR2_Initialize
  5000 ;;		_main
  5001 ;; This function uses a non-reentrant model
  5002 ;;
  5003                           
  5004                           
  5005                           ;psect for function _TMR2_SetInterruptHandler
  5006  052D                     _TMR2_SetInterruptHandler:	
  5007                           
  5008                           ;tmr2.c: 179: TMR2_InterruptHandler = InterruptHandler;
  5009                           
  5010                           ;incstack = 0
  5011                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  5012  052D  0021               	movlb	1	; select bank1
  5013  052E  0827               	movf	(TMR2_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5014  052F  0020               	movlb	0	; select bank0
  5015  0530  00E4               	movwf	_TMR2_InterruptHandler+1
  5016  0531  0021               	movlb	1	; select bank1
  5017  0532  0826               	movf	TMR2_SetInterruptHandler@InterruptHandler^(0+128),w
  5018  0533  0020               	movlb	0	; select bank0
  5019  0534  00E3               	movwf	_TMR2_InterruptHandler
  5020  0535  0008               	return
  5021  0536                     __end_of_TMR2_SetInterruptHandler:	
  5022                           
  5023                           	psect	text8
  5024  050E                     __ptext8:	
  5025 ;; *************** function _PWM3_Initialize *****************
  5026 ;; Defined at:
  5027 ;;		line 58 in file "mcc_generated_files/pwm3.c"
  5028 ;; Parameters:    Size  Location     Type
  5029 ;;		None
  5030 ;; Auto vars:     Size  Location     Type
  5031 ;;		None
  5032 ;; Return value:  Size  Location     Type
  5033 ;;                  1    wreg      void 
  5034 ;; Registers used:
  5035 ;;		wreg, status,2, status,0
  5036 ;; Tracked objects:
  5037 ;;		On entry : 0/0
  5038 ;;		On exit  : 0/0
  5039 ;;		Unchanged: 0/0
  5040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5044 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5045 ;;Total ram usage:        0 bytes
  5046 ;; Hardware stack levels used:    1
  5047 ;; Hardware stack levels required when called:   12
  5048 ;; This function calls:
  5049 ;;		Nothing
  5050 ;; This function is called by:
  5051 ;;		_SYSTEM_Initialize
  5052 ;; This function uses a non-reentrant model
  5053 ;;
  5054                           
  5055                           
  5056                           ;psect for function _PWM3_Initialize
  5057  050E                     _PWM3_Initialize:	
  5058                           
  5059                           ;pwm3.c: 62: PWM3CON = 0x80;
  5060                           
  5061                           ;incstack = 0
  5062                           ; Regs used in _PWM3_Initialize: [wreg+status,2+status,0]
  5063  050E  3080               	movlw	128
  5064  050F  002C               	movlb	12	; select bank12
  5065  0510  0099               	movwf	25	;volatile
  5066                           
  5067                           ;pwm3.c: 65: PWM3DCH = 0x0F;
  5068  0511  300F               	movlw	15
  5069  0512  0098               	movwf	24	;volatile
  5070                           
  5071                           ;pwm3.c: 68: PWM3DCL = 0x40;
  5072  0513  3040               	movlw	64
  5073  0514  0097               	movwf	23	;volatile
  5074                           
  5075                           ;pwm3.c: 71: CCPTMRSbits.P3TSEL = 0;
  5076  0515  30CF               	movlw	-49
  5077  0516  0025               	movlb	5	; select bank5
  5078  0517  059E               	andwf	30,f	;volatile
  5079  0518  0008               	return
  5080  0519                     __end_of_PWM3_Initialize:	
  5081                           
  5082                           	psect	text9
  5083  01FD                     __ptext9:	
  5084 ;; *************** function _PIN_MANAGER_Initialize *****************
  5085 ;; Defined at:
  5086 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  5087 ;; Parameters:    Size  Location     Type
  5088 ;;		None
  5089 ;; Auto vars:     Size  Location     Type
  5090 ;;		None
  5091 ;; Return value:  Size  Location     Type
  5092 ;;                  1    wreg      void 
  5093 ;; Registers used:
  5094 ;;		wreg, status,2
  5095 ;; Tracked objects:
  5096 ;;		On entry : 0/0
  5097 ;;		On exit  : 0/0
  5098 ;;		Unchanged: 0/0
  5099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5103 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5104 ;;Total ram usage:        0 bytes
  5105 ;; Hardware stack levels used:    1
  5106 ;; Hardware stack levels required when called:   12
  5107 ;; This function calls:
  5108 ;;		Nothing
  5109 ;; This function is called by:
  5110 ;;		_SYSTEM_Initialize
  5111 ;; This function uses a non-reentrant model
  5112 ;;
  5113                           
  5114                           
  5115                           ;psect for function _PIN_MANAGER_Initialize
  5116  01FD                     _PIN_MANAGER_Initialize:	
  5117                           
  5118                           ;pin_manager.c: 60: LATA = 0x00;
  5119                           
  5120                           ;incstack = 0
  5121                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  5122  01FD  0022               	movlb	2	; select bank2
  5123  01FE  018C               	clrf	12	;volatile
  5124                           
  5125                           ;pin_manager.c: 61: LATB = 0x00;
  5126  01FF  018D               	clrf	13	;volatile
  5127                           
  5128                           ;pin_manager.c: 62: LATC = 0x00;
  5129  0200  018E               	clrf	14	;volatile
  5130                           
  5131                           ;pin_manager.c: 67: TRISA = 0x13;
  5132  0201  3013               	movlw	19
  5133  0202  0021               	movlb	1	; select bank1
  5134  0203  008C               	movwf	12	;volatile
  5135                           
  5136                           ;pin_manager.c: 68: TRISB = 0x70;
  5137  0204  3070               	movlw	112
  5138  0205  008D               	movwf	13	;volatile
  5139                           
  5140                           ;pin_manager.c: 69: TRISC = 0x3F;
  5141  0206  303F               	movlw	63
  5142  0207  008E               	movwf	14	;volatile
  5143                           
  5144                           ;pin_manager.c: 74: ANSELC = 0x0E;
  5145  0208  300E               	movlw	14
  5146  0209  0023               	movlb	3	; select bank3
  5147  020A  008E               	movwf	14	;volatile
  5148                           
  5149                           ;pin_manager.c: 75: ANSELB = 0x00;
  5150  020B  018D               	clrf	13	;volatile
  5151                           
  5152                           ;pin_manager.c: 76: ANSELA = 0x01;
  5153  020C  3001               	movlw	1
  5154  020D  008C               	movwf	12	;volatile
  5155                           
  5156                           ;pin_manager.c: 81: WPUB = 0x00;
  5157  020E  0024               	movlb	4	; select bank4
  5158  020F  018D               	clrf	13	;volatile
  5159                           
  5160                           ;pin_manager.c: 82: WPUA = 0x00;
  5161  0210  018C               	clrf	12	;volatile
  5162                           
  5163                           ;pin_manager.c: 83: WPUC = 0x00;
  5164  0211  018E               	clrf	14	;volatile
  5165                           
  5166                           ;pin_manager.c: 84: OPTION_REGbits.nWPUEN = 1;
  5167  0212  0021               	movlb	1	; select bank1
  5168  0213  1795               	bsf	21,7	;volatile
  5169                           
  5170                           ;pin_manager.c: 89: ODCONA = 0x00;
  5171  0214  0025               	movlb	5	; select bank5
  5172  0215  018C               	clrf	12	;volatile
  5173                           
  5174                           ;pin_manager.c: 90: ODCONB = 0x00;
  5175  0216  018D               	clrf	13	;volatile
  5176                           
  5177                           ;pin_manager.c: 91: ODCONC = 0x00;
  5178  0217  018E               	clrf	14	;volatile
  5179                           
  5180                           ;pin_manager.c: 96: SLRCONA = 0x37;
  5181  0218  3037               	movlw	55
  5182  0219  0026               	movlb	6	; select bank6
  5183  021A  008C               	movwf	12	;volatile
  5184                           
  5185                           ;pin_manager.c: 97: SLRCONB = 0xF0;
  5186  021B  30F0               	movlw	240
  5187  021C  008D               	movwf	13	;volatile
  5188                           
  5189                           ;pin_manager.c: 98: SLRCONC = 0xFF;
  5190  021D  30FF               	movlw	255
  5191  021E  008E               	movwf	14	;volatile
  5192                           
  5193                           ;pin_manager.c: 103: INLVLA = 0x3F;
  5194  021F  303F               	movlw	63
  5195  0220  0027               	movlb	7	; select bank7
  5196  0221  008C               	movwf	12	;volatile
  5197                           
  5198                           ;pin_manager.c: 104: INLVLB = 0xF0;
  5199  0222  30F0               	movlw	240
  5200  0223  008D               	movwf	13	;volatile
  5201                           
  5202                           ;pin_manager.c: 105: INLVLC = 0xFF;
  5203  0224  30FF               	movlw	255
  5204  0225  008E               	movwf	14	;volatile
  5205                           
  5206                           ;pin_manager.c: 114: RXPPS = 0x0D;
  5207  0226  300D               	movlw	13
  5208  0227  003C               	movlb	28	; select bank28
  5209  0228  00A4               	movwf	36	;volatile
  5210                           
  5211                           ;pin_manager.c: 115: SSPDATPPS = 0x0C;
  5212  0229  300C               	movlw	12
  5213  022A  00A1               	movwf	33	;volatile
  5214                           
  5215                           ;pin_manager.c: 116: RB6PPS = 0x10;
  5216  022B  3010               	movlw	16
  5217  022C  003D               	movlb	29	; select bank29
  5218  022D  009E               	movwf	30	;volatile
  5219                           
  5220                           ;pin_manager.c: 117: RB7PPS = 0x12;
  5221  022E  3012               	movlw	18
  5222  022F  009F               	movwf	31	;volatile
  5223                           
  5224                           ;pin_manager.c: 118: RB4PPS = 0x11;
  5225  0230  3011               	movlw	17
  5226  0231  009C               	movwf	28	;volatile
  5227                           
  5228                           ;pin_manager.c: 119: RA2PPS = 0x0E;
  5229  0232  300E               	movlw	14
  5230  0233  0092               	movwf	18	;volatile
  5231                           
  5232                           ;pin_manager.c: 120: SSPCLKPPS = 0x0E;
  5233  0234  300E               	movlw	14
  5234  0235  003C               	movlb	28	; select bank28
  5235  0236  00A0               	movwf	32	;volatile
  5236  0237  0008               	return
  5237  0238                     __end_of_PIN_MANAGER_Initialize:	
  5238                           
  5239                           	psect	text10
  5240  054F                     __ptext10:	
  5241 ;; *************** function _OSCILLATOR_Initialize *****************
  5242 ;; Defined at:
  5243 ;;		line 60 in file "mcc_generated_files/mcc.c"
  5244 ;; Parameters:    Size  Location     Type
  5245 ;;		None
  5246 ;; Auto vars:     Size  Location     Type
  5247 ;;		None
  5248 ;; Return value:  Size  Location     Type
  5249 ;;                  1    wreg      void 
  5250 ;; Registers used:
  5251 ;;		wreg, status,2
  5252 ;; Tracked objects:
  5253 ;;		On entry : 0/0
  5254 ;;		On exit  : 0/0
  5255 ;;		Unchanged: 0/0
  5256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5261 ;;Total ram usage:        0 bytes
  5262 ;; Hardware stack levels used:    1
  5263 ;; Hardware stack levels required when called:   12
  5264 ;; This function calls:
  5265 ;;		Nothing
  5266 ;; This function is called by:
  5267 ;;		_SYSTEM_Initialize
  5268 ;; This function uses a non-reentrant model
  5269 ;;
  5270                           
  5271                           
  5272                           ;psect for function _OSCILLATOR_Initialize
  5273  054F                     _OSCILLATOR_Initialize:	
  5274                           
  5275                           ;mcc.c: 63: OSCCON = 0x6A;
  5276                           
  5277                           ;incstack = 0
  5278                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5279  054F  306A               	movlw	106
  5280  0550  0021               	movlb	1	; select bank1
  5281  0551  0099               	movwf	25	;volatile
  5282                           
  5283                           ;mcc.c: 65: OSCTUNE = 0x00;
  5284  0552  0198               	clrf	24	;volatile
  5285                           
  5286                           ;mcc.c: 67: BORCON = 0x00;
  5287  0553  0022               	movlb	2	; select bank2
  5288  0554  0196               	clrf	22	;volatile
  5289  0555  0008               	return
  5290  0556                     __end_of_OSCILLATOR_Initialize:	
  5291                           
  5292                           	psect	text11
  5293  0519                     __ptext11:	
  5294 ;; *************** function _I2C_Initialize *****************
  5295 ;; Defined at:
  5296 ;;		line 167 in file "mcc_generated_files/i2c_master.c"
  5297 ;; Parameters:    Size  Location     Type
  5298 ;;		None
  5299 ;; Auto vars:     Size  Location     Type
  5300 ;;		None
  5301 ;; Return value:  Size  Location     Type
  5302 ;;                  1    wreg      void 
  5303 ;; Registers used:
  5304 ;;		wreg, status,2
  5305 ;; Tracked objects:
  5306 ;;		On entry : 0/0
  5307 ;;		On exit  : 0/0
  5308 ;;		Unchanged: 0/0
  5309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5313 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5314 ;;Total ram usage:        0 bytes
  5315 ;; Hardware stack levels used:    1
  5316 ;; Hardware stack levels required when called:   12
  5317 ;; This function calls:
  5318 ;;		Nothing
  5319 ;; This function is called by:
  5320 ;;		_SYSTEM_Initialize
  5321 ;; This function uses a non-reentrant model
  5322 ;;
  5323                           
  5324                           
  5325                           ;psect for function _I2C_Initialize
  5326  0519                     _I2C_Initialize:	
  5327                           
  5328                           ;i2c_master.c: 169: SSP1STAT = 0x80;
  5329                           
  5330                           ;incstack = 0
  5331                           ; Regs used in _I2C_Initialize: [wreg+status,2]
  5332  0519  3080               	movlw	128
  5333  051A  0024               	movlb	4	; select bank4
  5334  051B  0094               	movwf	20	;volatile
  5335                           
  5336                           ;i2c_master.c: 170: SSP1CON1 = 0x08;
  5337  051C  3008               	movlw	8
  5338  051D  0095               	movwf	21	;volatile
  5339                           
  5340                           ;i2c_master.c: 171: SSP1CON2 = 0x00;
  5341  051E  0196               	clrf	22	;volatile
  5342                           
  5343                           ;i2c_master.c: 172: SSP1ADD = 0x09;
  5344  051F  3009               	movlw	9
  5345  0520  0092               	movwf	18	;volatile
  5346                           
  5347                           ;i2c_master.c: 173: SSP1CON1bits.SSPEN = 0;
  5348  0521  1295               	bcf	21,5	;volatile
  5349  0522  0008               	return
  5350  0523                     __end_of_I2C_Initialize:	
  5351                           
  5352                           	psect	text12
  5353  02DF                     __ptext12:	
  5354 ;; *************** function _EUSART_Initialize *****************
  5355 ;; Defined at:
  5356 ;;		line 83 in file "mcc_generated_files/eusart.c"
  5357 ;; Parameters:    Size  Location     Type
  5358 ;;		None
  5359 ;; Auto vars:     Size  Location     Type
  5360 ;;		None
  5361 ;; Return value:  Size  Location     Type
  5362 ;;                  1    wreg      void 
  5363 ;; Registers used:
  5364 ;;		wreg, status,2, status,0, pclath, cstack
  5365 ;; Tracked objects:
  5366 ;;		On entry : 0/0
  5367 ;;		On exit  : 0/0
  5368 ;;		Unchanged: 0/0
  5369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5373 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5374 ;;Total ram usage:        0 bytes
  5375 ;; Hardware stack levels used:    1
  5376 ;; Hardware stack levels required when called:   13
  5377 ;; This function calls:
  5378 ;;		_EUSART_SetErrorHandler
  5379 ;;		_EUSART_SetFramingErrorHandler
  5380 ;;		_EUSART_SetOverrunErrorHandler
  5381 ;;		_EUSART_SetRxInterruptHandler
  5382 ;; This function is called by:
  5383 ;;		_SYSTEM_Initialize
  5384 ;; This function uses a non-reentrant model
  5385 ;;
  5386                           
  5387                           
  5388                           ;psect for function _EUSART_Initialize
  5389  02DF                     _EUSART_Initialize:	
  5390                           
  5391                           ;eusart.c: 86: PIE1bits.RCIE = 0;
  5392                           
  5393                           ;incstack = 0
  5394                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5395  02DF  0021               	movlb	1	; select bank1
  5396  02E0  1290               	bcf	16,5	;volatile
  5397                           
  5398                           ;eusart.c: 87: EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  5399  02E1  30A9               	movlw	low _EUSART_Receive_ISR
  5400  02E2  00A6               	movwf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128)
  5401  02E3  3002               	movlw	high _EUSART_Receive_ISR
  5402  02E4  00A7               	movwf	(EUSART_SetRxInterruptHandler@interruptHandler^(0+128)+1)
  5403  02E5  3185  2536  3182   	fcall	_EUSART_SetRxInterruptHandler
  5404                           
  5405                           ;eusart.c: 91: BAUD1CON = 0x09;
  5406  02E8  3009               	movlw	9
  5407  02E9  0023               	movlb	3	; select bank3
  5408  02EA  009F               	movwf	31	;volatile
  5409                           
  5410                           ;eusart.c: 94: RC1STA = 0x90;
  5411  02EB  3090               	movlw	144
  5412  02EC  009D               	movwf	29	;volatile
  5413                           
  5414                           ;eusart.c: 97: TX1STA = 0x24;
  5415  02ED  3024               	movlw	36
  5416  02EE  009E               	movwf	30	;volatile
  5417                           
  5418                           ;eusart.c: 100: SPBRGL = 0x67;
  5419  02EF  3067               	movlw	103
  5420  02F0  009B               	movwf	27	;volatile
  5421                           
  5422                           ;eusart.c: 103: SPBRGH = 0x00;
  5423  02F1  019C               	clrf	28	;volatile
  5424                           
  5425                           ;eusart.c: 106: EUSART_SetFramingErrorHandler(EUSART_DefaultFramingErrorHandler);
  5426  02F2  30F9               	movlw	low _EUSART_DefaultFramingErrorHandler
  5427  02F3  0021               	movlb	1	; select bank1
  5428  02F4  00A6               	movwf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128)
  5429  02F5  3005               	movlw	high _EUSART_DefaultFramingErrorHandler
  5430  02F6  00A7               	movwf	(EUSART_SetFramingErrorHandler@interruptHandler^(0+128)+1)
  5431  02F7  3185  2575  3182   	fcall	_EUSART_SetFramingErrorHandler
  5432                           
  5433                           ;eusart.c: 107: EUSART_SetOverrunErrorHandler(EUSART_DefaultOverrunErrorHandler);
  5434  02FA  30CC               	movlw	low _EUSART_DefaultOverrunErrorHandler
  5435  02FB  0021               	movlb	1	; select bank1
  5436  02FC  00A6               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)
  5437  02FD  3005               	movlw	high _EUSART_DefaultOverrunErrorHandler
  5438  02FE  00A7               	movwf	(EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)+1)
  5439  02FF  3185  256F  3182   	fcall	_EUSART_SetOverrunErrorHandler
  5440                           
  5441                           ;eusart.c: 108: EUSART_SetErrorHandler(EUSART_DefaultErrorHandler);
  5442  0302  30F1               	movlw	low _EUSART_DefaultErrorHandler
  5443  0303  0021               	movlb	1	; select bank1
  5444  0304  00A6               	movwf	EUSART_SetErrorHandler@interruptHandler^(0+128)
  5445  0305  3005               	movlw	high _EUSART_DefaultErrorHandler
  5446  0306  00A7               	movwf	(EUSART_SetErrorHandler@interruptHandler^(0+128)+1)
  5447  0307  3185  257B         	fcall	_EUSART_SetErrorHandler
  5448                           
  5449                           ;eusart.c: 110: eusartRxLastError.status = 0;
  5450  0309  0020               	movlb	0	; select bank0
  5451  030A  01D3               	clrf	_eusartRxLastError	;volatile
  5452                           
  5453                           ;eusart.c: 113: eusartRxHead = 0;
  5454  030B  01D6               	clrf	_eusartRxHead	;volatile
  5455                           
  5456                           ;eusart.c: 114: eusartRxTail = 0;
  5457  030C  01D5               	clrf	_eusartRxTail	;volatile
  5458                           
  5459                           ;eusart.c: 115: eusartRxCount = 0;
  5460  030D  01D4               	clrf	_eusartRxCount	;volatile
  5461                           
  5462                           ;eusart.c: 118: PIE1bits.RCIE = 1;
  5463  030E  0021               	movlb	1	; select bank1
  5464  030F  1690               	bsf	16,5	;volatile
  5465  0310  0008               	return
  5466  0311                     __end_of_EUSART_Initialize:	
  5467                           
  5468                           	psect	text13
  5469  0536                     __ptext13:	
  5470 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  5471 ;; Defined at:
  5472 ;;		line 234 in file "mcc_generated_files/eusart.c"
  5473 ;; Parameters:    Size  Location     Type
  5474 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5475 ;;		 -> MyUART_ISR(1), EUSART_Receive_ISR(1), 
  5476 ;; Auto vars:     Size  Location     Type
  5477 ;;		None
  5478 ;; Return value:  Size  Location     Type
  5479 ;;                  1    wreg      void 
  5480 ;; Registers used:
  5481 ;;		wreg
  5482 ;; Tracked objects:
  5483 ;;		On entry : 0/0
  5484 ;;		On exit  : 0/0
  5485 ;;		Unchanged: 0/0
  5486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5487 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5490 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5491 ;;Total ram usage:        2 bytes
  5492 ;; Hardware stack levels used:    1
  5493 ;; Hardware stack levels required when called:   12
  5494 ;; This function calls:
  5495 ;;		Nothing
  5496 ;; This function is called by:
  5497 ;;		_EUSART_Initialize
  5498 ;;		_main
  5499 ;; This function uses a non-reentrant model
  5500 ;;
  5501                           
  5502                           
  5503                           ;psect for function _EUSART_SetRxInterruptHandler
  5504  0536                     _EUSART_SetRxInterruptHandler:	
  5505                           
  5506                           ;eusart.c: 235: EUSART_RxDefaultInterruptHandler = interruptHandler;
  5507                           
  5508                           ;incstack = 0
  5509                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  5510  0536  0021               	movlb	1	; select bank1
  5511  0537  0827               	movf	(EUSART_SetRxInterruptHandler@interruptHandler+1)^(0+128),w
  5512  0538  0020               	movlb	0	; select bank0
  5513  0539  00E6               	movwf	_EUSART_RxDefaultInterruptHandler+1
  5514  053A  0021               	movlb	1	; select bank1
  5515  053B  0826               	movf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128),w
  5516  053C  0020               	movlb	0	; select bank0
  5517  053D  00E5               	movwf	_EUSART_RxDefaultInterruptHandler
  5518  053E  0008               	return
  5519  053F                     __end_of_EUSART_SetRxInterruptHandler:	
  5520                           
  5521                           	psect	text14
  5522  056F                     __ptext14:	
  5523 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  5524 ;; Defined at:
  5525 ;;		line 225 in file "mcc_generated_files/eusart.c"
  5526 ;; Parameters:    Size  Location     Type
  5527 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5528 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  5529 ;; Auto vars:     Size  Location     Type
  5530 ;;		None
  5531 ;; Return value:  Size  Location     Type
  5532 ;;                  1    wreg      void 
  5533 ;; Registers used:
  5534 ;;		wreg
  5535 ;; Tracked objects:
  5536 ;;		On entry : 0/0
  5537 ;;		On exit  : 0/0
  5538 ;;		Unchanged: 0/0
  5539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5540 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5543 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5544 ;;Total ram usage:        2 bytes
  5545 ;; Hardware stack levels used:    1
  5546 ;; Hardware stack levels required when called:   12
  5547 ;; This function calls:
  5548 ;;		Nothing
  5549 ;; This function is called by:
  5550 ;;		_EUSART_Initialize
  5551 ;; This function uses a non-reentrant model
  5552 ;;
  5553                           
  5554                           
  5555                           ;psect for function _EUSART_SetOverrunErrorHandler
  5556  056F                     _EUSART_SetOverrunErrorHandler:	
  5557                           
  5558                           ;eusart.c: 226: EUSART_OverrunErrorHandler = interruptHandler;
  5559                           
  5560                           ;incstack = 0
  5561                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  5562  056F  0021               	movlb	1	; select bank1
  5563  0570  0827               	movf	(EUSART_SetOverrunErrorHandler@interruptHandler+1)^(0+128),w
  5564  0571  00A3               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  5565  0572  0826               	movf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128),w
  5566  0573  00A2               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  5567  0574  0008               	return
  5568  0575                     __end_of_EUSART_SetOverrunErrorHandler:	
  5569                           
  5570                           	psect	text15
  5571  0575                     __ptext15:	
  5572 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  5573 ;; Defined at:
  5574 ;;		line 221 in file "mcc_generated_files/eusart.c"
  5575 ;; Parameters:    Size  Location     Type
  5576 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5577 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  5578 ;; Auto vars:     Size  Location     Type
  5579 ;;		None
  5580 ;; Return value:  Size  Location     Type
  5581 ;;                  1    wreg      void 
  5582 ;; Registers used:
  5583 ;;		wreg
  5584 ;; Tracked objects:
  5585 ;;		On entry : 0/0
  5586 ;;		On exit  : 0/0
  5587 ;;		Unchanged: 0/0
  5588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5589 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5592 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5593 ;;Total ram usage:        2 bytes
  5594 ;; Hardware stack levels used:    1
  5595 ;; Hardware stack levels required when called:   12
  5596 ;; This function calls:
  5597 ;;		Nothing
  5598 ;; This function is called by:
  5599 ;;		_EUSART_Initialize
  5600 ;; This function uses a non-reentrant model
  5601 ;;
  5602                           
  5603                           
  5604                           ;psect for function _EUSART_SetFramingErrorHandler
  5605  0575                     _EUSART_SetFramingErrorHandler:	
  5606                           
  5607                           ;eusart.c: 222: EUSART_FramingErrorHandler = interruptHandler;
  5608                           
  5609                           ;incstack = 0
  5610                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  5611  0575  0021               	movlb	1	; select bank1
  5612  0576  0827               	movf	(EUSART_SetFramingErrorHandler@interruptHandler+1)^(0+128),w
  5613  0577  00A5               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  5614  0578  0826               	movf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128),w
  5615  0579  00A4               	movwf	_EUSART_FramingErrorHandler^(0+128)
  5616  057A  0008               	return
  5617  057B                     __end_of_EUSART_SetFramingErrorHandler:	
  5618                           
  5619                           	psect	text16
  5620  057B                     __ptext16:	
  5621 ;; *************** function _EUSART_SetErrorHandler *****************
  5622 ;; Defined at:
  5623 ;;		line 229 in file "mcc_generated_files/eusart.c"
  5624 ;; Parameters:    Size  Location     Type
  5625 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5626 ;;		 -> EUSART_DefaultErrorHandler(1), 
  5627 ;; Auto vars:     Size  Location     Type
  5628 ;;		None
  5629 ;; Return value:  Size  Location     Type
  5630 ;;                  1    wreg      void 
  5631 ;; Registers used:
  5632 ;;		wreg
  5633 ;; Tracked objects:
  5634 ;;		On entry : 0/0
  5635 ;;		On exit  : 0/0
  5636 ;;		Unchanged: 0/0
  5637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5638 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5641 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5642 ;;Total ram usage:        2 bytes
  5643 ;; Hardware stack levels used:    1
  5644 ;; Hardware stack levels required when called:   12
  5645 ;; This function calls:
  5646 ;;		Nothing
  5647 ;; This function is called by:
  5648 ;;		_EUSART_Initialize
  5649 ;; This function uses a non-reentrant model
  5650 ;;
  5651                           
  5652                           
  5653                           ;psect for function _EUSART_SetErrorHandler
  5654  057B                     _EUSART_SetErrorHandler:	
  5655                           
  5656                           ;eusart.c: 230: EUSART_ErrorHandler = interruptHandler;
  5657                           
  5658                           ;incstack = 0
  5659                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  5660  057B  0021               	movlb	1	; select bank1
  5661  057C  0827               	movf	(EUSART_SetErrorHandler@interruptHandler+1)^(0+128),w
  5662  057D  00A1               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  5663  057E  0826               	movf	EUSART_SetErrorHandler@interruptHandler^(0+128),w
  5664  057F  00A0               	movwf	_EUSART_ErrorHandler^(0+128)
  5665  0580  0008               	return
  5666  0581                     __end_of_EUSART_SetErrorHandler:	
  5667                           
  5668                           	psect	intentry
  5669  0004                     __pintentry:	
  5670 ;; *************** function _INTERRUPT_InterruptManager *****************
  5671 ;; Defined at:
  5672 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5673 ;; Parameters:    Size  Location     Type
  5674 ;;		None
  5675 ;; Auto vars:     Size  Location     Type
  5676 ;;		None
  5677 ;; Return value:  Size  Location     Type
  5678 ;;                  1    wreg      void 
  5679 ;; Registers used:
  5680 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5681 ;; Tracked objects:
  5682 ;;		On entry : 0/0
  5683 ;;		On exit  : 0/0
  5684 ;;		Unchanged: 0/0
  5685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5688 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5689 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5690 ;;Total ram usage:        1 bytes
  5691 ;; Hardware stack levels used:    1
  5692 ;; Hardware stack levels required when called:   11
  5693 ;; This function calls:
  5694 ;;		Absolute function
  5695 ;;		_EUSART_Receive_ISR
  5696 ;;		_MyUART_ISR
  5697 ;;		_TMR2_ISR
  5698 ;; This function is called by:
  5699 ;;		Interrupt level 1
  5700 ;; This function uses a non-reentrant model
  5701 ;;
  5702                           
  5703  0004                     _INTERRUPT_InterruptManager:	
  5704                           
  5705                           ;incstack = 0
  5706  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  5707                           
  5708                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5709  0005  3180               	pagesel	$
  5710  0006  0020               	movlb	0	; select bank0
  5711  0007  087F               	movf	127,w
  5712  0008  00E2               	movwf	??_INTERRUPT_InterruptManager
  5713                           
  5714                           ;interrupt_manager.c: 55: if(INTCONbits.PEIE == 1)
  5715  0009  1F0B               	btfss	11,6	;volatile
  5716  000A  281F               	goto	i1l123
  5717                           
  5718                           ;interrupt_manager.c: 56: {
  5719                           ;interrupt_manager.c: 57: if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
  5720  000B  0021               	movlb	1	; select bank1
  5721  000C  1E90               	btfss	16,5	;volatile
  5722  000D  2817               	goto	i1l118
  5723  000E  0020               	movlb	0	; select bank0
  5724  000F  1E90               	btfss	16,5	;volatile
  5725  0010  2817               	goto	i1l118
  5726                           
  5727                           ;interrupt_manager.c: 58: {
  5728                           ;interrupt_manager.c: 59: EUSART_RxDefaultInterruptHandler();
  5729  0011  0866               	movf	_EUSART_RxDefaultInterruptHandler+1,w
  5730  0012  008A               	movwf	10
  5731  0013  0865               	movf	_EUSART_RxDefaultInterruptHandler,w
  5732  0014  000A               	callw
  5733  0015  3180               	pagesel	$
  5734                           
  5735                           ;interrupt_manager.c: 60: }
  5736  0016  281F               	goto	i1l123
  5737  0017                     i1l118:	
  5738                           
  5739                           ;interrupt_manager.c: 61: else if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
  5740  0017  0021               	movlb	1	; select bank1
  5741  0018  1C90               	btfss	16,1	;volatile
  5742  0019  281F               	goto	i1l123
  5743  001A  0020               	movlb	0	; select bank0
  5744  001B  1C90               	btfss	16,1	;volatile
  5745  001C  281F               	goto	i1l123
  5746                           
  5747                           ;interrupt_manager.c: 62: {
  5748                           ;interrupt_manager.c: 63: TMR2_ISR();
  5749  001D  3184  24DE         	fcall	_TMR2_ISR
  5750  001F                     i1l123:	
  5751                           ;interrupt_manager.c: 70: else
  5752                           ;interrupt_manager.c: 71: {
  5753                           
  5754                           ;interrupt_manager.c: 68: }
  5755                           ;interrupt_manager.c: 69: }
  5756                           
  5757                           ;interrupt_manager.c: 65: else
  5758                           ;interrupt_manager.c: 66: {
  5759                           
  5760                           ;interrupt_manager.c: 64: }
  5761                           
  5762  001F  0020               	movlb	0	; select bank0
  5763  0020  0862               	movf	??_INTERRUPT_InterruptManager,w
  5764  0021  00FF               	movwf	127
  5765  0022  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  5766  0023  0009               	retfie
  5767  0024                     __end_of_INTERRUPT_InterruptManager:	
  5768                           
  5769                           	psect	text18
  5770  04DE                     __ptext18:	
  5771 ;; *************** function _TMR2_ISR *****************
  5772 ;; Defined at:
  5773 ;;		line 165 in file "mcc_generated_files/tmr2.c"
  5774 ;; Parameters:    Size  Location     Type
  5775 ;;		None
  5776 ;; Auto vars:     Size  Location     Type
  5777 ;;		None
  5778 ;; Return value:  Size  Location     Type
  5779 ;;                  1    wreg      void 
  5780 ;; Registers used:
  5781 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5782 ;; Tracked objects:
  5783 ;;		On entry : 0/0
  5784 ;;		On exit  : 0/0
  5785 ;;		Unchanged: 0/0
  5786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5791 ;;Total ram usage:        0 bytes
  5792 ;; Hardware stack levels used:    1
  5793 ;; Hardware stack levels required when called:   10
  5794 ;; This function calls:
  5795 ;;		Absolute function
  5796 ;;		_MyTimer2ISR
  5797 ;;		_TMR2_DefaultInterruptHandler
  5798 ;; This function is called by:
  5799 ;;		_INTERRUPT_InterruptManager
  5800 ;; This function uses a non-reentrant model
  5801 ;;
  5802                           
  5803                           
  5804                           ;psect for function _TMR2_ISR
  5805  04DE                     _TMR2_ISR:	
  5806                           
  5807                           ;tmr2.c: 169: PIR1bits.TMR2IF = 0;
  5808                           
  5809                           ;incstack = 0
  5810                           ; Regs used in _TMR2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5811  04DE  0020               	movlb	0	; select bank0
  5812  04DF  1090               	bcf	16,1	;volatile
  5813                           
  5814                           ;tmr2.c: 171: if(TMR2_InterruptHandler)
  5815  04E0  0863               	movf	_TMR2_InterruptHandler,w
  5816  04E1  0464               	iorwf	_TMR2_InterruptHandler+1,w
  5817  04E2  1903               	btfsc	3,2
  5818  04E3  0008               	return
  5819                           
  5820                           ;tmr2.c: 172: {
  5821                           ;tmr2.c: 173: TMR2_InterruptHandler();
  5822  04E4  0864               	movf	_TMR2_InterruptHandler+1,w
  5823  04E5  008A               	movwf	10
  5824  04E6  0863               	movf	_TMR2_InterruptHandler,w
  5825  04E7  000A               	callw
  5826  04E8  3184               	pagesel	$
  5827  04E9  0008               	return
  5828  04EA                     __end_of_TMR2_ISR:	
  5829                           
  5830                           	psect	text19
  5831  00F9                     __ptext19:	
  5832 ;; *************** function _MyTimer2ISR *****************
  5833 ;; Defined at:
  5834 ;;		line 59 in file "main.c"
  5835 ;; Parameters:    Size  Location     Type
  5836 ;;		None
  5837 ;; Auto vars:     Size  Location     Type
  5838 ;;		None
  5839 ;; Return value:  Size  Location     Type
  5840 ;;                  1    wreg      void 
  5841 ;; Registers used:
  5842 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5843 ;; Tracked objects:
  5844 ;;		On entry : 0/0
  5845 ;;		On exit  : 0/0
  5846 ;;		Unchanged: 0/0
  5847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5850 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5851 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5852 ;;Total ram usage:        2 bytes
  5853 ;; Hardware stack levels used:    1
  5854 ;; Hardware stack levels required when called:    9
  5855 ;; This function calls:
  5856 ;;		_EUSART_Write
  5857 ;;		_I2C_Write1ByteRegister
  5858 ;;		_PWM3_LoadDutyValue
  5859 ;; This function is called by:
  5860 ;;		_main
  5861 ;;		_TMR2_ISR
  5862 ;; This function uses a non-reentrant model
  5863 ;;
  5864                           
  5865                           
  5866                           ;psect for function _MyTimer2ISR
  5867  00F9                     _MyTimer2ISR:	
  5868                           
  5869                           ;main.c: 65: PWM3_LoadDutyValue((uint8_t)(Angle/2)+20);
  5870                           
  5871                           ;incstack = 0
  5872                           ; Regs used in _MyTimer2ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5873  00F9  0020               	movlb	0	; select bank0
  5874  00FA  0868               	movf	_Angle+1,w
  5875  00FB  00E1               	movwf	??_MyTimer2ISR+1
  5876  00FC  0867               	movf	_Angle,w
  5877  00FD  00E0               	movwf	??_MyTimer2ISR
  5878  00FE  36E1               	lsrf	??_MyTimer2ISR+1,f
  5879  00FF  0CE0               	rrf	??_MyTimer2ISR,f
  5880  0100  0860               	movf	??_MyTimer2ISR,w
  5881  0101  3E14               	addlw	20
  5882  0102  00F0               	movwf	PWM3_LoadDutyValue@dutyValue
  5883  0103  3000               	movlw	0
  5884  0104  1803               	skipnc
  5885  0105  3001               	movlw	1
  5886  0106  00F1               	movwf	PWM3_LoadDutyValue@dutyValue+1
  5887  0107  3184  2454  3180   	fcall	_PWM3_LoadDutyValue
  5888                           
  5889                           ;main.c: 66: if(PORTAbits.RA4) {
  5890  010A  0020               	movlb	0	; select bank0
  5891  010B  1E0C               	btfss	12,4	;volatile
  5892  010C  2942               	goto	i1l2699
  5893                           
  5894                           ;main.c: 67: if(StateBat == S_bat_low) {
  5895  010D  0869               	movf	_StateBat,w
  5896  010E  1D03               	btfss	3,2
  5897  010F  291F               	goto	i1l2687
  5898                           
  5899                           ;main.c: 68: EUSART_Write('B');
  5900  0110  3042               	movlw	66
  5901  0111  3185  2547  3180   	fcall	_EUSART_Write
  5902                           
  5903                           ;main.c: 69: EUSART_Write('1');
  5904  0114  3031               	movlw	49
  5905  0115  3185  2547  3180   	fcall	_EUSART_Write
  5906                           
  5907                           ;main.c: 70: EUSART_Write('s');
  5908  0118  3073               	movlw	115
  5909  0119  3185  2547  3180   	fcall	_EUSART_Write
  5910                           
  5911                           ;main.c: 71: StateBat = S_bat_high;
  5912  011C  0020               	movlb	0	; select bank0
  5913  011D  01E9               	clrf	_StateBat
  5914  011E  0AE9               	incf	_StateBat,f
  5915  011F                     i1l2687:	
  5916                           
  5917                           ;main.c: 72: }
  5918                           ;main.c: 73: if(Validation) {
  5919  011F  086A               	movf	_Validation,w
  5920  0120  1903               	btfsc	3,2
  5921  0121  2939               	goto	i1l2697
  5922                           
  5923                           ;main.c: 75: if(Vitesse > 100) {Vitesse = 100;}
  5924  0122  3000               	movlw	0
  5925  0123  024E               	subwf	_Vitesse+1,w
  5926  0124  3065               	movlw	101
  5927  0125  1903               	skipnz
  5928  0126  024D               	subwf	_Vitesse,w
  5929  0127  1C03               	skipc
  5930  0128  292D               	goto	i1l2693
  5931  0129  3064               	movlw	100
  5932  012A  00CD               	movwf	_Vitesse
  5933  012B  3000               	movlw	0
  5934  012C  00CE               	movwf	_Vitesse+1
  5935  012D                     i1l2693:	
  5936                           
  5937                           ;main.c: 76: I2C_Write1ByteRegister(0x40, Vitesse, 0);
  5938  012D  084D               	movf	_Vitesse,w
  5939  012E  00E0               	movwf	??_MyTimer2ISR
  5940  012F  0860               	movf	??_MyTimer2ISR,w
  5941  0130  00DC               	movwf	I2C_Write1ByteRegister@reg
  5942  0131  01DD               	clrf	I2C_Write1ByteRegister@data
  5943  0132  3040               	movlw	64
  5944  0133  3183  2311         	fcall	_I2C_Write1ByteRegister
  5945                           
  5946                           ;main.c: 78: Validation--;
  5947  0135  3001               	movlw	1
  5948  0136  0020               	movlb	0	; select bank0
  5949  0137  02EA               	subwf	_Validation,f
  5950                           
  5951                           ;main.c: 79: } else {
  5952  0138  0008               	return
  5953  0139                     i1l2697:	
  5954                           
  5955                           ;main.c: 81: I2C_Write1ByteRegister(0x40, 101, 0);
  5956  0139  3065               	movlw	101
  5957  013A  00E0               	movwf	??_MyTimer2ISR
  5958  013B  0860               	movf	??_MyTimer2ISR,w
  5959  013C  00DC               	movwf	I2C_Write1ByteRegister@reg
  5960  013D  01DD               	clrf	I2C_Write1ByteRegister@data
  5961  013E  3040               	movlw	64
  5962  013F  3183  2311         	fcall	_I2C_Write1ByteRegister
  5963                           
  5964                           ;main.c: 83: }
  5965                           ;main.c: 84: } else {
  5966  0141  0008               	return
  5967  0142                     i1l2699:	
  5968                           
  5969                           ;main.c: 85: if(StateBat == S_bat_high) {
  5970  0142  0020               	movlb	0	; select bank0
  5971  0143  0369               	decf	_StateBat,w
  5972  0144  1D03               	btfss	3,2
  5973  0145  2954               	goto	i1l2705
  5974                           
  5975                           ;main.c: 86: EUSART_Write('B');
  5976  0146  3042               	movlw	66
  5977  0147  3185  2547  3180   	fcall	_EUSART_Write
  5978                           
  5979                           ;main.c: 87: EUSART_Write('0');
  5980  014A  3030               	movlw	48
  5981  014B  3185  2547  3180   	fcall	_EUSART_Write
  5982                           
  5983                           ;main.c: 88: EUSART_Write('r');
  5984  014E  3072               	movlw	114
  5985  014F  3185  2547  3180   	fcall	_EUSART_Write
  5986                           
  5987                           ;main.c: 89: StateBat = S_bat_low;
  5988  0152  0020               	movlb	0	; select bank0
  5989  0153  01E9               	clrf	_StateBat
  5990  0154                     i1l2705:	
  5991                           
  5992                           ;main.c: 90: }
  5993                           ;main.c: 92: I2C_Write1ByteRegister(0x40, 101, 0);
  5994  0154  3065               	movlw	101
  5995  0155  00E0               	movwf	??_MyTimer2ISR
  5996  0156  0860               	movf	??_MyTimer2ISR,w
  5997  0157  00DC               	movwf	I2C_Write1ByteRegister@reg
  5998  0158  01DD               	clrf	I2C_Write1ByteRegister@data
  5999  0159  3040               	movlw	64
  6000  015A  3183  2311         	fcall	_I2C_Write1ByteRegister
  6001  015C  0008               	return
  6002  015D                     __end_of_MyTimer2ISR:	
  6003                           
  6004                           	psect	text20
  6005  05F8                     __ptext20:	
  6006 ;; *************** function _TMR2_DefaultInterruptHandler *****************
  6007 ;; Defined at:
  6008 ;;		line 182 in file "mcc_generated_files/tmr2.c"
  6009 ;; Parameters:    Size  Location     Type
  6010 ;;		None
  6011 ;; Auto vars:     Size  Location     Type
  6012 ;;		None
  6013 ;; Return value:  Size  Location     Type
  6014 ;;                  1    wreg      void 
  6015 ;; Registers used:
  6016 ;;		None
  6017 ;; Tracked objects:
  6018 ;;		On entry : 0/0
  6019 ;;		On exit  : 0/0
  6020 ;;		Unchanged: 0/0
  6021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6025 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6026 ;;Total ram usage:        0 bytes
  6027 ;; Hardware stack levels used:    1
  6028 ;; This function calls:
  6029 ;;		Nothing
  6030 ;; This function is called by:
  6031 ;;		_TMR2_Initialize
  6032 ;;		_TMR2_ISR
  6033 ;; This function uses a non-reentrant model
  6034 ;;
  6035                           
  6036                           
  6037                           ;psect for function _TMR2_DefaultInterruptHandler
  6038  05F8                     _TMR2_DefaultInterruptHandler:	
  6039                           
  6040                           ;incstack = 0
  6041                           ; Regs used in _TMR2_DefaultInterruptHandler: []
  6042  05F8  0008               	return
  6043  05F9                     __end_of_TMR2_DefaultInterruptHandler:	
  6044                           
  6045                           	psect	text21
  6046  0454                     __ptext21:	
  6047 ;; *************** function _PWM3_LoadDutyValue *****************
  6048 ;; Defined at:
  6049 ;;		line 74 in file "mcc_generated_files/pwm3.c"
  6050 ;; Parameters:    Size  Location     Type
  6051 ;;  dutyValue       2    0[COMMON] unsigned int 
  6052 ;; Auto vars:     Size  Location     Type
  6053 ;;		None
  6054 ;; Return value:  Size  Location     Type
  6055 ;;                  1    wreg      void 
  6056 ;; Registers used:
  6057 ;;		wreg, status,2, status,0
  6058 ;; Tracked objects:
  6059 ;;		On entry : 0/0
  6060 ;;		On exit  : 0/0
  6061 ;;		Unchanged: 0/0
  6062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6063 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6065 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6066 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6067 ;;Total ram usage:        4 bytes
  6068 ;; Hardware stack levels used:    1
  6069 ;; This function calls:
  6070 ;;		Nothing
  6071 ;; This function is called by:
  6072 ;;		_MyTimer2ISR
  6073 ;; This function uses a non-reentrant model
  6074 ;;
  6075                           
  6076                           
  6077                           ;psect for function _PWM3_LoadDutyValue
  6078  0454                     _PWM3_LoadDutyValue:	
  6079                           
  6080                           ;pwm3.c: 77: PWM3DCH = (dutyValue & 0x03FC)>>2;
  6081                           
  6082                           ;incstack = 0
  6083                           ; Regs used in _PWM3_LoadDutyValue: [wreg+status,2+status,0]
  6084  0454  0871               	movf	PWM3_LoadDutyValue@dutyValue+1,w
  6085  0455  00F3               	movwf	??_PWM3_LoadDutyValue+1
  6086  0456  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
  6087  0457  00F2               	movwf	??_PWM3_LoadDutyValue
  6088  0458  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
  6089  0459  0CF2               	rrf	??_PWM3_LoadDutyValue,f
  6090  045A  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
  6091  045B  0CF2               	rrf	??_PWM3_LoadDutyValue,f
  6092  045C  0872               	movf	??_PWM3_LoadDutyValue,w
  6093  045D  002C               	movlb	12	; select bank12
  6094  045E  0098               	movwf	24	;volatile
  6095                           
  6096                           ;pwm3.c: 80: PWM3DCL = (dutyValue & 0x0003)<<6;
  6097  045F  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
  6098  0460  3903               	andlw	3
  6099  0461  00F2               	movwf	??_PWM3_LoadDutyValue
  6100  0462  3005               	movlw	5
  6101  0463                     u85_25:	
  6102  0463  35F2               	lslf	??_PWM3_LoadDutyValue,f
  6103  0464  3EFF               	addlw	-1
  6104  0465  1D03               	skipz
  6105  0466  2C63               	goto	u85_25
  6106  0467  3572               	lslf	??_PWM3_LoadDutyValue,w
  6107  0468  0097               	movwf	23	;volatile
  6108  0469  0008               	return
  6109  046A                     __end_of_PWM3_LoadDutyValue:	
  6110                           
  6111                           	psect	text22
  6112  0311                     __ptext22:	
  6113 ;; *************** function _I2C_Write1ByteRegister *****************
  6114 ;; Defined at:
  6115 ;;		line 91 in file "mcc_generated_files/examples/i2c_master_example.c"
  6116 ;; Parameters:    Size  Location     Type
  6117 ;;  address         1    wreg     unsigned char 
  6118 ;;  reg             1    5[BANK0 ] unsigned char 
  6119 ;;  data            1    6[BANK0 ] unsigned char 
  6120 ;; Auto vars:     Size  Location     Type
  6121 ;;  address         1    8[BANK0 ] unsigned char 
  6122 ;; Return value:  Size  Location     Type
  6123 ;;                  1    wreg      void 
  6124 ;; Registers used:
  6125 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6126 ;; Tracked objects:
  6127 ;;		On entry : 0/0
  6128 ;;		On exit  : 0/0
  6129 ;;		Unchanged: 0/0
  6130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6131 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6132 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6133 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6134 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6135 ;;Total ram usage:        4 bytes
  6136 ;; Hardware stack levels used:    1
  6137 ;; Hardware stack levels required when called:    8
  6138 ;; This function calls:
  6139 ;;		_I2C_Close
  6140 ;;		_I2C_MasterWrite
  6141 ;;		_I2C_Open
  6142 ;;		_I2C_SetAddressNackCallback
  6143 ;;		_I2C_SetBuffer
  6144 ;;		_I2C_SetDataCompleteCallback
  6145 ;; This function is called by:
  6146 ;;		_MyTimer2ISR
  6147 ;; This function uses a non-reentrant model
  6148 ;;
  6149                           
  6150                           
  6151                           ;psect for function _I2C_Write1ByteRegister
  6152  0311                     _I2C_Write1ByteRegister:	
  6153                           
  6154                           ;incstack = 0
  6155                           ; Regs used in _I2C_Write1ByteRegister: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6156                           ;I2C_Write1ByteRegister@address stored from wreg
  6157  0311  0020               	movlb	0	; select bank0
  6158  0312  00DF               	movwf	I2C_Write1ByteRegister@address
  6159  0313                     i1l2525:	
  6160                           ;i2c_master_example.c: 93: while(!I2C_Open(address));
  6161                           
  6162  0313  0020               	movlb	0	; select bank0
  6163  0314  085F               	movf	I2C_Write1ByteRegister@address,w
  6164  0315  3182  2272  3183   	fcall	_I2C_Open
  6165  0318  3A00               	xorlw	0
  6166  0319  1903               	skipnz
  6167  031A  2B13               	goto	i1l2525
  6168                           
  6169                           ;i2c_master_example.c: 94: I2C_SetDataCompleteCallback(wr1RegCompleteHandler,&data);
  6170  031B  3090               	movlw	low _wr1RegCompleteHandler
  6171  031C  00F5               	movwf	I2C_SetDataCompleteCallback@cb
  6172  031D  3004               	movlw	high _wr1RegCompleteHandler
  6173  031E  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
  6174  031F  305D               	movlw	(low (I2C_Write1ByteRegister@data| 0))& (0+255)
  6175  0320  0020               	movlb	0	; select bank0
  6176  0321  00DE               	movwf	??_I2C_Write1ByteRegister
  6177  0322  085E               	movf	??_I2C_Write1ByteRegister,w
  6178  0323  00F7               	movwf	I2C_SetDataCompleteCallback@ptr
  6179  0324  3185  2502  3183   	fcall	_I2C_SetDataCompleteCallback
  6180                           
  6181                           ;i2c_master_example.c: 95: I2C_SetBuffer(&reg,1);
  6182  0327  3001               	movlw	1
  6183  0328  00F0               	movwf	I2C_SetBuffer@bufferSize
  6184  0329  3000               	movlw	0
  6185  032A  00F1               	movwf	I2C_SetBuffer@bufferSize+1
  6186  032B  305C               	movlw	(low (I2C_Write1ByteRegister@reg| 0))& (0+255)
  6187  032C  3184  24D0  3183   	fcall	_I2C_SetBuffer
  6188                           
  6189                           ;i2c_master_example.c: 96: I2C_SetAddressNackCallback((0),(0));
  6190  032F  3000               	movlw	0
  6191  0330  00F5               	movwf	I2C_SetAddressNackCallback@cb
  6192  0331  00F6               	movwf	I2C_SetAddressNackCallback@cb+1
  6193  0332  01F7               	clrf	I2C_SetAddressNackCallback@ptr
  6194  0333  3184  24EA  3183   	fcall	_I2C_SetAddressNackCallback
  6195                           
  6196                           ;i2c_master_example.c: 97: I2C_MasterWrite();
  6197  0336  3185  25A0  3183   	fcall	_I2C_MasterWrite
  6198  0339                     i1l2535:	
  6199                           ;i2c_master_example.c: 98: while(I2C_BUSY == I2C_Close());
  6200                           
  6201  0339  3184  240D  3183   	fcall	_I2C_Close
  6202  033C  3A01               	xorlw	1
  6203  033D  1D03               	btfss	3,2
  6204  033E  0008               	return
  6205  033F  2B39               	goto	i1l2535
  6206  0340                     __end_of_I2C_Write1ByteRegister:	
  6207                           
  6208                           	psect	text23
  6209  04EA                     __ptext23:	
  6210 ;; *************** function _I2C_SetAddressNackCallback *****************
  6211 ;; Defined at:
  6212 ;;		line 283 in file "mcc_generated_files/i2c_master.c"
  6213 ;; Parameters:    Size  Location     Type
  6214 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
  6215 ;;		 -> Absolute function(1), 
  6216 ;;  ptr             1    7[COMMON] PTR void 
  6217 ;;		 -> NULL(0), 
  6218 ;; Auto vars:     Size  Location     Type
  6219 ;;		None
  6220 ;; Return value:  Size  Location     Type
  6221 ;;                  1    wreg      void 
  6222 ;; Registers used:
  6223 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6224 ;; Tracked objects:
  6225 ;;		On entry : 0/0
  6226 ;;		On exit  : 0/0
  6227 ;;		Unchanged: 0/0
  6228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6229 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6231 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6232 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6233 ;;Total ram usage:        4 bytes
  6234 ;; Hardware stack levels used:    1
  6235 ;; Hardware stack levels required when called:    1
  6236 ;; This function calls:
  6237 ;;		_I2C_SetCallback
  6238 ;; This function is called by:
  6239 ;;		_I2C_Write1ByteRegister
  6240 ;;		_I2C_Read1ByteRegister
  6241 ;;		_I2C_Read2ByteRegister
  6242 ;;		_I2C_Write2ByteRegister
  6243 ;;		_I2C_WriteNBytes
  6244 ;;		_I2C_ReadDataBlock
  6245 ;; This function uses a non-reentrant model
  6246 ;;
  6247                           
  6248                           
  6249                           ;psect for function _I2C_SetAddressNackCallback
  6250  04EA                     _I2C_SetAddressNackCallback:	
  6251                           
  6252                           ;i2c_master.c: 285: I2C_SetCallback(I2C_ADDR_NACK, cb, ptr);
  6253                           
  6254                           ;incstack = 0
  6255                           ; Regs used in _I2C_SetAddressNackCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6256  04EA  0876               	movf	I2C_SetAddressNackCallback@cb+1,w
  6257  04EB  00F1               	movwf	I2C_SetCallback@cb+1
  6258  04EC  0875               	movf	I2C_SetAddressNackCallback@cb,w
  6259  04ED  00F0               	movwf	I2C_SetCallback@cb
  6260  04EE  0877               	movf	I2C_SetAddressNackCallback@ptr,w
  6261  04EF  00F8               	movwf	??_I2C_SetAddressNackCallback
  6262  04F0  0878               	movf	??_I2C_SetAddressNackCallback,w
  6263  04F1  00F2               	movwf	I2C_SetCallback@ptr
  6264  04F2  3002               	movlw	2
  6265  04F3  3183  238C         	fcall	_I2C_SetCallback
  6266  04F5  0008               	return
  6267  04F6                     __end_of_I2C_SetAddressNackCallback:	
  6268                           
  6269                           	psect	text24
  6270  0272                     __ptext24:	
  6271 ;; *************** function _I2C_Open *****************
  6272 ;; Defined at:
  6273 ;;		line 176 in file "mcc_generated_files/i2c_master.c"
  6274 ;; Parameters:    Size  Location     Type
  6275 ;;  address         1    wreg     unsigned char 
  6276 ;; Auto vars:     Size  Location     Type
  6277 ;;  address         1    1[COMMON] unsigned char 
  6278 ;;  returnValue     1    2[COMMON] enum E92
  6279 ;; Return value:  Size  Location     Type
  6280 ;;                  1    wreg      enum E92
  6281 ;; Registers used:
  6282 ;;		wreg, status,2, status,0, pclath, cstack
  6283 ;; Tracked objects:
  6284 ;;		On entry : 0/0
  6285 ;;		On exit  : 0/0
  6286 ;;		Unchanged: 0/0
  6287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6289 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6290 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6291 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6292 ;;Total ram usage:        3 bytes
  6293 ;; Hardware stack levels used:    1
  6294 ;; Hardware stack levels required when called:    1
  6295 ;; This function calls:
  6296 ;;		_I2C_MasterClearIrq
  6297 ;;		_I2C_MasterOpen
  6298 ;; This function is called by:
  6299 ;;		_I2C_Write1ByteRegister
  6300 ;;		_I2C_Read1ByteRegister
  6301 ;;		_I2C_Read2ByteRegister
  6302 ;;		_I2C_Write2ByteRegister
  6303 ;;		_I2C_WriteNBytes
  6304 ;;		_I2C_ReadNBytes
  6305 ;;		_I2C_ReadDataBlock
  6306 ;; This function uses a non-reentrant model
  6307 ;;
  6308                           
  6309                           
  6310                           ;psect for function _I2C_Open
  6311  0272                     _I2C_Open:	
  6312                           
  6313                           ;incstack = 0
  6314                           ; Regs used in _I2C_Open: [wreg+status,2+status,0+pclath+cstack]
  6315                           ;I2C_Open@address stored from wreg
  6316  0272  00F1               	movwf	I2C_Open@address
  6317                           
  6318                           ;i2c_master.c: 178: i2c_error_t returnValue = I2C_BUSY;
  6319  0273  01F2               	clrf	I2C_Open@returnValue
  6320  0274  0AF2               	incf	I2C_Open@returnValue,f
  6321                           
  6322                           ;i2c_master.c: 180: if(!I2C_Status.inUse)
  6323  0275  0020               	movlb	0	; select bank0
  6324  0276  193C               	btfsc	_I2C_Status+28,2
  6325  0277  2AA7               	goto	i1l321
  6326                           
  6327                           ;i2c_master.c: 181: {
  6328                           ;i2c_master.c: 182: I2C_Status.address = address;
  6329  0278  0871               	movf	I2C_Open@address,w
  6330  0279  00F0               	movwf	??_I2C_Open
  6331  027A  0870               	movf	??_I2C_Open,w
  6332  027B  00B6               	movwf	_I2C_Status+22
  6333                           
  6334                           ;i2c_master.c: 183: I2C_Status.busy = 0;
  6335  027C  10BC               	bcf	_I2C_Status+28,1
  6336                           
  6337                           ;i2c_master.c: 184: I2C_Status.inUse = 1;
  6338  027D  153C               	bsf	_I2C_Status+28,2
  6339                           
  6340                           ;i2c_master.c: 185: I2C_Status.addressNackCheck = 0;
  6341  027E  103C               	bcf	_I2C_Status+28,0
  6342                           
  6343                           ;i2c_master.c: 186: I2C_Status.state = I2C_RESET;
  6344  027F  300E               	movlw	14
  6345  0280  00F0               	movwf	??_I2C_Open
  6346  0281  0870               	movf	??_I2C_Open,w
  6347  0282  00BA               	movwf	_I2C_Status+26
  6348                           
  6349                           ;i2c_master.c: 187: I2C_Status.time_out_value = 500;
  6350  0283  30F4               	movlw	244
  6351  0284  00B4               	movwf	_I2C_Status+20
  6352  0285  3001               	movlw	1
  6353  0286  00B5               	movwf	_I2C_Status+21
  6354                           
  6355                           ;i2c_master.c: 188: I2C_Status.bufferFree = 1;
  6356  0287  15BC               	bsf	_I2C_Status+28,3
  6357                           
  6358                           ;i2c_master.c: 191: I2C_Status.callbackTable[I2C_DATA_COMPLETE]=I2C_CallbackReturnStop;
  6359  0288  30F6               	movlw	low _I2C_CallbackReturnStop
  6360  0289  00A0               	movwf	_I2C_Status
  6361  028A  3005               	movlw	high _I2C_CallbackReturnStop
  6362  028B  00A1               	movwf	_I2C_Status+1
  6363                           
  6364                           ;i2c_master.c: 192: I2C_Status.callbackPayload[I2C_DATA_COMPLETE] = (0);
  6365  028C  01AC               	clrf	low ((_I2C_Status| 0+12))
  6366                           
  6367                           ;i2c_master.c: 193: I2C_Status.callbackTable[I2C_WRITE_COLLISION]=I2C_CallbackReturnStop
      +                          ;
  6368  028D  30F6               	movlw	low _I2C_CallbackReturnStop
  6369  028E  00A2               	movwf	low ((_I2C_Status| 0+2))
  6370  028F  3005               	movlw	high _I2C_CallbackReturnStop
  6371  0290  00A3               	movwf	(low ((_I2C_Status| 0+2))+1)
  6372                           
  6373                           ;i2c_master.c: 194: I2C_Status.callbackPayload[I2C_WRITE_COLLISION] = (0);
  6374  0291  01AD               	clrf	low ((_I2C_Status| 0+13))
  6375                           
  6376                           ;i2c_master.c: 195: I2C_Status.callbackTable[I2C_ADDR_NACK]=I2C_CallbackReturnStop;
  6377  0292  30F6               	movlw	low _I2C_CallbackReturnStop
  6378  0293  00A4               	movwf	low ((_I2C_Status| 0+4))
  6379  0294  3005               	movlw	high _I2C_CallbackReturnStop
  6380  0295  00A5               	movwf	(low ((_I2C_Status| 0+4))+1)
  6381                           
  6382                           ;i2c_master.c: 196: I2C_Status.callbackPayload[I2C_ADDR_NACK] = (0);
  6383  0296  01AE               	clrf	low ((_I2C_Status| 0+14))
  6384                           
  6385                           ;i2c_master.c: 197: I2C_Status.callbackTable[I2C_DATA_NACK]=I2C_CallbackReturnStop;
  6386  0297  30F6               	movlw	low _I2C_CallbackReturnStop
  6387  0298  00A6               	movwf	low ((_I2C_Status| 0+6))
  6388  0299  3005               	movlw	high _I2C_CallbackReturnStop
  6389  029A  00A7               	movwf	(low ((_I2C_Status| 0+6))+1)
  6390                           
  6391                           ;i2c_master.c: 198: I2C_Status.callbackPayload[I2C_DATA_NACK] = (0);
  6392  029B  01AF               	clrf	low ((_I2C_Status| 0+15))
  6393                           
  6394                           ;i2c_master.c: 199: I2C_Status.callbackTable[I2C_TIMEOUT]=I2C_CallbackReturnReset;
  6395  029C  30F4               	movlw	low _I2C_CallbackReturnReset
  6396  029D  00A8               	movwf	low ((_I2C_Status| 0+8))
  6397  029E  3005               	movlw	high _I2C_CallbackReturnReset
  6398  029F  00A9               	movwf	(low ((_I2C_Status| 0+8))+1)
  6399                           
  6400                           ;i2c_master.c: 200: I2C_Status.callbackPayload[I2C_TIMEOUT] = (0);
  6401  02A0  01B0               	clrf	low ((_I2C_Status| 0+16))
  6402                           
  6403                           ;i2c_master.c: 202: I2C_MasterClearIrq();
  6404  02A1  3185  25EE  3182   	fcall	_I2C_MasterClearIrq
  6405                           
  6406                           ;i2c_master.c: 203: I2C_MasterOpen();
  6407  02A4  3184  24F6         	fcall	_I2C_MasterOpen
  6408                           
  6409                           ;i2c_master.c: 204: returnValue = I2C_NOERR;
  6410  02A6  01F2               	clrf	I2C_Open@returnValue
  6411  02A7                     i1l321:	
  6412                           
  6413                           ;i2c_master.c: 205: }
  6414                           ;i2c_master.c: 206: return returnValue;
  6415  02A7  0872               	movf	I2C_Open@returnValue,w
  6416  02A8  0008               	return
  6417  02A9                     __end_of_I2C_Open:	
  6418                           
  6419                           	psect	text25
  6420  04F6                     __ptext25:	
  6421 ;; *************** function _I2C_MasterOpen *****************
  6422 ;; Defined at:
  6423 ;;		line 543 in file "mcc_generated_files/i2c_master.c"
  6424 ;; Parameters:    Size  Location     Type
  6425 ;;		None
  6426 ;; Auto vars:     Size  Location     Type
  6427 ;;		None
  6428 ;; Return value:  Size  Location     Type
  6429 ;;                  1    wreg      unsigned char 
  6430 ;; Registers used:
  6431 ;;		wreg, status,2
  6432 ;; Tracked objects:
  6433 ;;		On entry : 0/0
  6434 ;;		On exit  : 0/0
  6435 ;;		Unchanged: 0/0
  6436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6441 ;;Total ram usage:        0 bytes
  6442 ;; Hardware stack levels used:    1
  6443 ;; This function calls:
  6444 ;;		Nothing
  6445 ;; This function is called by:
  6446 ;;		_I2C_Open
  6447 ;; This function uses a non-reentrant model
  6448 ;;
  6449                           
  6450                           
  6451                           ;psect for function _I2C_MasterOpen
  6452  04F6                     _I2C_MasterOpen:	
  6453                           
  6454                           ;i2c_master.c: 545: if(!SSP1CON1bits.SSPEN)
  6455                           
  6456                           ;incstack = 0
  6457                           ; Regs used in _I2C_MasterOpen: [wreg+status,2]
  6458  04F6  0024               	movlb	4	; select bank4
  6459  04F7  1A95               	btfsc	21,5	;volatile
  6460  04F8  0008               	return
  6461                           
  6462                           ;i2c_master.c: 546: {
  6463                           ;i2c_master.c: 547: SSP1STAT = 0x80;
  6464  04F9  3080               	movlw	128
  6465  04FA  0094               	movwf	20	;volatile
  6466                           
  6467                           ;i2c_master.c: 548: SSP1CON1 = 0x08;
  6468  04FB  3008               	movlw	8
  6469  04FC  0095               	movwf	21	;volatile
  6470                           
  6471                           ;i2c_master.c: 549: SSP1CON2 = 0x00;
  6472  04FD  0196               	clrf	22	;volatile
  6473                           
  6474                           ;i2c_master.c: 550: SSP1ADD = 0x09;
  6475  04FE  3009               	movlw	9
  6476  04FF  0092               	movwf	18	;volatile
  6477                           
  6478                           ;i2c_master.c: 551: SSP1CON1bits.SSPEN = 1;
  6479  0500  1695               	bsf	21,5	;volatile
  6480                           
  6481                           ;i2c_master.c: 552: return 1;
  6482                           ;	Return value of _I2C_MasterOpen is never used
  6483  0501  0008               	return
  6484  0502                     __end_of_I2C_MasterOpen:	
  6485                           ;i2c_master.c: 553: }
  6486                           ;i2c_master.c: 554: return 0;
  6487                           ;	Return value of _I2C_MasterOpen is never used
  6488                           
  6489                           
  6490                           	psect	text26
  6491  05A0                     __ptext26:	
  6492 ;; *************** function _I2C_MasterWrite *****************
  6493 ;; Defined at:
  6494 ;;		line 251 in file "mcc_generated_files/i2c_master.c"
  6495 ;; Parameters:    Size  Location     Type
  6496 ;;		None
  6497 ;; Auto vars:     Size  Location     Type
  6498 ;;		None
  6499 ;; Return value:  Size  Location     Type
  6500 ;;                  1    wreg      enum E92
  6501 ;; Registers used:
  6502 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6503 ;; Tracked objects:
  6504 ;;		On entry : 0/0
  6505 ;;		On exit  : 0/0
  6506 ;;		Unchanged: 0/0
  6507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6512 ;;Total ram usage:        0 bytes
  6513 ;; Hardware stack levels used:    1
  6514 ;; Hardware stack levels required when called:    7
  6515 ;; This function calls:
  6516 ;;		_I2C_MasterOperation
  6517 ;; This function is called by:
  6518 ;;		_I2C_Write1ByteRegister
  6519 ;;		_I2C_Read1ByteRegister
  6520 ;;		_I2C_Read2ByteRegister
  6521 ;;		_I2C_Write2ByteRegister
  6522 ;;		_I2C_WriteNBytes
  6523 ;;		_I2C_ReadDataBlock
  6524 ;; This function uses a non-reentrant model
  6525 ;;
  6526                           
  6527                           
  6528                           ;psect for function _I2C_MasterWrite
  6529  05A0                     _I2C_MasterWrite:	
  6530                           
  6531                           ;i2c_master.c: 253: return I2C_MasterOperation(0);
  6532                           ;	Return value of _I2C_MasterWrite is never used
  6533                           
  6534                           ;incstack = 0
  6535                           ; Regs used in _I2C_MasterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6536  05A0  3000               	movlw	0
  6537  05A1  3183  23F3         	fcall	_I2C_MasterOperation
  6538  05A3  0008               	return
  6539  05A4                     __end_of_I2C_MasterWrite:	
  6540                           
  6541                           	psect	text27
  6542  03F3                     __ptext27:	
  6543 ;; *************** function _I2C_MasterOperation *****************
  6544 ;; Defined at:
  6545 ;;		line 224 in file "mcc_generated_files/i2c_master.c"
  6546 ;; Parameters:    Size  Location     Type
  6547 ;;  read            1    wreg     unsigned char 
  6548 ;; Auto vars:     Size  Location     Type
  6549 ;;  read            1    3[BANK0 ] unsigned char 
  6550 ;;  returnValue     1    4[BANK0 ] enum E92
  6551 ;; Return value:  Size  Location     Type
  6552 ;;                  1    wreg      enum E92
  6553 ;; Registers used:
  6554 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6555 ;; Tracked objects:
  6556 ;;		On entry : 0/0
  6557 ;;		On exit  : 0/0
  6558 ;;		Unchanged: 0/0
  6559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6561 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6562 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6563 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6564 ;;Total ram usage:        3 bytes
  6565 ;; Hardware stack levels used:    1
  6566 ;; Hardware stack levels required when called:    6
  6567 ;; This function calls:
  6568 ;;		_I2C_MasterStart
  6569 ;;		_I2C_Poller
  6570 ;; This function is called by:
  6571 ;;		_I2C_MasterWrite
  6572 ;;		_I2C_MasterRead
  6573 ;; This function uses a non-reentrant model
  6574 ;;
  6575                           
  6576                           
  6577                           ;psect for function _I2C_MasterOperation
  6578  03F3                     _I2C_MasterOperation:	
  6579                           
  6580                           ;incstack = 0
  6581                           ; Regs used in _I2C_MasterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6582                           ;I2C_MasterOperation@read stored from wreg
  6583  03F3  0020               	movlb	0	; select bank0
  6584  03F4  00DA               	movwf	I2C_MasterOperation@read
  6585                           
  6586                           ;i2c_master.c: 226: i2c_error_t returnValue = I2C_BUSY;
  6587  03F5  01DB               	clrf	I2C_MasterOperation@returnValue
  6588  03F6  0ADB               	incf	I2C_MasterOperation@returnValue,f
  6589                           
  6590                           ;i2c_master.c: 227: if(!I2C_Status.busy)
  6591  03F7  18BC               	btfsc	_I2C_Status+28,1
  6592  03F8  2C0A               	goto	i1l2463
  6593                           
  6594                           ;i2c_master.c: 228: {
  6595                           ;i2c_master.c: 229: I2C_Status.busy = 1;
  6596  03F9  14BC               	bsf	_I2C_Status+28,1
  6597                           
  6598                           ;i2c_master.c: 230: returnValue = I2C_NOERR;
  6599  03FA  01DB               	clrf	I2C_MasterOperation@returnValue
  6600                           
  6601                           ;i2c_master.c: 232: if(read)
  6602  03FB  085A               	movf	I2C_MasterOperation@read,w
  6603  03FC  1903               	btfsc	3,2
  6604  03FD  2C01               	goto	i1l2457
  6605                           
  6606                           ;i2c_master.c: 233: {
  6607                           ;i2c_master.c: 234: I2C_Status.state = I2C_SEND_ADR_READ;
  6608  03FE  01BA               	clrf	_I2C_Status+26
  6609  03FF  0ABA               	incf	_I2C_Status+26,f
  6610                           
  6611                           ;i2c_master.c: 235: }
  6612  0400  2C05               	goto	i1l2459
  6613  0401                     i1l2457:	
  6614                           
  6615                           ;i2c_master.c: 236: else
  6616                           ;i2c_master.c: 237: {
  6617                           ;i2c_master.c: 238: I2C_Status.state = I2C_SEND_ADR_WRITE;
  6618  0401  3002               	movlw	2
  6619  0402  00FD               	movwf	??_I2C_MasterOperation
  6620  0403  087D               	movf	??_I2C_MasterOperation,w
  6621  0404  00BA               	movwf	_I2C_Status+26
  6622  0405                     i1l2459:	
  6623                           
  6624                           ;i2c_master.c: 239: }
  6625                           ;i2c_master.c: 240: I2C_MasterStart();
  6626  0405  3185  25E5  3183   	fcall	_I2C_MasterStart
  6627                           
  6628                           ;i2c_master.c: 241: I2C_Poller();
  6629  0408  3185  2523         	fcall	_I2C_Poller
  6630  040A                     i1l2463:	
  6631                           
  6632                           ;i2c_master.c: 242: }
  6633                           ;i2c_master.c: 243: return returnValue;
  6634  040A  0020               	movlb	0	; select bank0
  6635  040B  085B               	movf	I2C_MasterOperation@returnValue,w
  6636  040C  0008               	return
  6637  040D                     __end_of_I2C_MasterOperation:	
  6638                           
  6639                           	psect	text28
  6640  0523                     __ptext28:	
  6641 ;; *************** function _I2C_Poller *****************
  6642 ;; Defined at:
  6643 ;;		line 312 in file "mcc_generated_files/i2c_master.c"
  6644 ;; Parameters:    Size  Location     Type
  6645 ;;		None
  6646 ;; Auto vars:     Size  Location     Type
  6647 ;;		None
  6648 ;; Return value:  Size  Location     Type
  6649 ;;                  1    wreg      void 
  6650 ;; Registers used:
  6651 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6652 ;; Tracked objects:
  6653 ;;		On entry : 0/0
  6654 ;;		On exit  : 0/0
  6655 ;;		Unchanged: 0/0
  6656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6660 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6661 ;;Total ram usage:        0 bytes
  6662 ;; Hardware stack levels used:    1
  6663 ;; Hardware stack levels required when called:    5
  6664 ;; This function calls:
  6665 ;;		_I2C_MasterFsm
  6666 ;;		_I2C_MasterWaitForEvent
  6667 ;; This function is called by:
  6668 ;;		_I2C_MasterOperation
  6669 ;; This function uses a non-reentrant model
  6670 ;;
  6671                           
  6672                           
  6673                           ;psect for function _I2C_Poller
  6674  0523                     _I2C_Poller:	
  6675  0523                     i1l2429:	
  6676                           ;i2c_master.c: 314: while(I2C_Status.busy)
  6677                           
  6678                           ;incstack = 0
  6679                           ; Regs used in _I2C_Poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6680                           
  6681  0523  0020               	movlb	0	; select bank0
  6682  0524  1CBC               	btfss	_I2C_Status+28,1
  6683  0525  0008               	return
  6684                           
  6685                           ;i2c_master.c: 315: {
  6686                           ;i2c_master.c: 316: I2C_MasterWaitForEvent();
  6687  0526  3185  25A4  3185   	fcall	_I2C_MasterWaitForEvent
  6688                           
  6689                           ;i2c_master.c: 317: I2C_MasterFsm();
  6690  0529  3183  2340  3185   	fcall	_I2C_MasterFsm
  6691  052C  2D23               	goto	i1l2429
  6692  052D                     __end_of_I2C_Poller:	
  6693                           
  6694                           	psect	text29
  6695  05A4                     __ptext29:	
  6696 ;; *************** function _I2C_MasterWaitForEvent *****************
  6697 ;; Defined at:
  6698 ;;		line 650 in file "mcc_generated_files/i2c_master.c"
  6699 ;; Parameters:    Size  Location     Type
  6700 ;;		None
  6701 ;; Auto vars:     Size  Location     Type
  6702 ;;		None
  6703 ;; Return value:  Size  Location     Type
  6704 ;;                  1    wreg      void 
  6705 ;; Registers used:
  6706 ;;		None
  6707 ;; Tracked objects:
  6708 ;;		On entry : 0/0
  6709 ;;		On exit  : 0/0
  6710 ;;		Unchanged: 0/0
  6711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6716 ;;Total ram usage:        0 bytes
  6717 ;; Hardware stack levels used:    1
  6718 ;; This function calls:
  6719 ;;		Nothing
  6720 ;; This function is called by:
  6721 ;;		_I2C_Poller
  6722 ;; This function uses a non-reentrant model
  6723 ;;
  6724                           
  6725                           
  6726                           ;psect for function _I2C_MasterWaitForEvent
  6727  05A4                     _I2C_MasterWaitForEvent:	
  6728  05A4                     i1l544:	
  6729                           ;incstack = 0
  6730                           ; Regs used in _I2C_MasterWaitForEvent: []
  6731                           ;i2c_master.c: 652: while(1)
  6732                           
  6733                           
  6734                           ;i2c_master.c: 653: {
  6735                           ;i2c_master.c: 654: if(PIR1bits.SSP1IF)
  6736  05A4  0020               	movlb	0	; select bank0
  6737  05A5  1990               	btfsc	16,3	;volatile
  6738  05A6  0008               	return
  6739  05A7  2DA4               	goto	i1l544
  6740  05A8                     __end_of_I2C_MasterWaitForEvent:	
  6741                           ;i2c_master.c: 655: {
  6742                           ;i2c_master.c: 656: break;
  6743                           
  6744                           
  6745                           	psect	text30
  6746  0340                     __ptext30:	
  6747 ;; *************** function _I2C_MasterFsm *****************
  6748 ;; Defined at:
  6749 ;;		line 321 in file "mcc_generated_files/i2c_master.c"
  6750 ;; Parameters:    Size  Location     Type
  6751 ;;		None
  6752 ;; Auto vars:     Size  Location     Type
  6753 ;;		None
  6754 ;; Return value:  Size  Location     Type
  6755 ;;                  1    wreg      void 
  6756 ;; Registers used:
  6757 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6758 ;; Tracked objects:
  6759 ;;		On entry : 0/0
  6760 ;;		On exit  : 0/0
  6761 ;;		Unchanged: 0/0
  6762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6765 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6766 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6767 ;;Total ram usage:        3 bytes
  6768 ;; Hardware stack levels used:    1
  6769 ;; Hardware stack levels required when called:    4
  6770 ;; This function calls:
  6771 ;;		_I2C_DO_ADDRESS_NACK
  6772 ;;		_I2C_DO_IDLE
  6773 ;;		_I2C_DO_RCEN
  6774 ;;		_I2C_DO_RESET
  6775 ;;		_I2C_DO_RX
  6776 ;;		_I2C_DO_RX_ACK
  6777 ;;		_I2C_DO_RX_NACK_RESTART
  6778 ;;		_I2C_DO_RX_NACK_STOP
  6779 ;;		_I2C_DO_SEND_ADR_READ
  6780 ;;		_I2C_DO_SEND_ADR_WRITE
  6781 ;;		_I2C_DO_SEND_RESTART
  6782 ;;		_I2C_DO_SEND_RESTART_READ
  6783 ;;		_I2C_DO_SEND_RESTART_WRITE
  6784 ;;		_I2C_DO_SEND_STOP
  6785 ;;		_I2C_DO_TX
  6786 ;;		_I2C_DO_TX_EMPTY
  6787 ;;		_I2C_MasterClearIrq
  6788 ;;		_I2C_MasterIsNack
  6789 ;; This function is called by:
  6790 ;;		_I2C_Poller
  6791 ;; This function uses a non-reentrant model
  6792 ;;
  6793                           
  6794                           
  6795                           ;psect for function _I2C_MasterFsm
  6796  0340                     _I2C_MasterFsm:	
  6797                           
  6798                           ;i2c_master.c: 323: I2C_MasterClearIrq();
  6799                           
  6800                           ;incstack = 0
  6801                           ; Regs used in _I2C_MasterFsm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6802  0340  3185  25EE  3183   	fcall	_I2C_MasterClearIrq
  6803                           
  6804                           ;i2c_master.c: 325: if(I2C_Status.addressNackCheck && I2C_MasterIsNack())
  6805  0343  0020               	movlb	0	; select bank0
  6806  0344  1C3C               	btfss	_I2C_Status+28,0
  6807  0345  2B51               	goto	i1l2419
  6808  0346  3185  2587  3183   	fcall	_I2C_MasterIsNack
  6809  0349  3A00               	xorlw	0
  6810  034A  1903               	skipnz
  6811  034B  2B51               	goto	i1l2419
  6812                           
  6813                           ;i2c_master.c: 326: {
  6814                           ;i2c_master.c: 327: I2C_Status.state = I2C_ADDRESS_NACK;
  6815  034C  300F               	movlw	15
  6816  034D  0020               	movlb	0	; select bank0
  6817  034E  00D7               	movwf	??_I2C_MasterFsm
  6818  034F  0857               	movf	??_I2C_MasterFsm,w
  6819  0350  00BA               	movwf	_I2C_Status+26
  6820  0351                     i1l2419:	
  6821                           
  6822                           ;i2c_master.c: 328: }
  6823                           ;i2c_master.c: 329: I2C_Status.state = fsmStateTable[I2C_Status.state]();
  6824  0351  0020               	movlb	0	; select bank0
  6825  0352  083A               	movf	_I2C_Status+26,w
  6826  0353  00D7               	movwf	??_I2C_MasterFsm
  6827  0354  01D8               	clrf	??_I2C_MasterFsm+1
  6828  0355  35D7               	lslf	??_I2C_MasterFsm,f
  6829  0356  0DD8               	rlf	??_I2C_MasterFsm+1,f
  6830  0357  30D3               	movlw	low (_fsmStateTable| (0+32768))
  6831  0358  0757               	addwf	??_I2C_MasterFsm,w
  6832  0359  0084               	movwf	4
  6833  035A  3083               	movlw	high (_fsmStateTable| (0+32768))
  6834  035B  3D58               	addwfc	??_I2C_MasterFsm+1,w
  6835  035C  0085               	movwf	5
  6836  035D  3F01               	moviw [1]fsr0
  6837  035E  008A               	movwf	10
  6838  035F  3F00               	moviw [0]fsr0
  6839  0360  000A               	callw
  6840  0361  3183               	pagesel	$
  6841  0362  0020               	movlb	0	; select bank0
  6842  0363  00D9               	movwf	??_I2C_MasterFsm+2
  6843  0364  0859               	movf	??_I2C_MasterFsm+2,w
  6844  0365  00BA               	movwf	_I2C_Status+26
  6845  0366  0008               	return
  6846  0367                     __end_of_I2C_MasterFsm:	
  6847                           
  6848                           	psect	text31
  6849  03B0                     __ptext31:	
  6850 ;; *************** function _I2C_DO_ADDRESS_NACK *****************
  6851 ;; Defined at:
  6852 ;;		line 500 in file "mcc_generated_files/i2c_master.c"
  6853 ;; Parameters:    Size  Location     Type
  6854 ;;		None
  6855 ;; Auto vars:     Size  Location     Type
  6856 ;;		None
  6857 ;; Return value:  Size  Location     Type
  6858 ;;                  1    wreg      enum E12103
  6859 ;; Registers used:
  6860 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6861 ;; Tracked objects:
  6862 ;;		On entry : 0/0
  6863 ;;		On exit  : 0/0
  6864 ;;		Unchanged: 0/0
  6865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6868 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6869 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6870 ;;Total ram usage:        1 bytes
  6871 ;; Hardware stack levels used:    1
  6872 ;; Hardware stack levels required when called:    3
  6873 ;; This function calls:
  6874 ;;		Absolute function
  6875 ;;		_I2C_CallbackReturnReset
  6876 ;;		_I2C_CallbackReturnStop
  6877 ;;		_I2C_DO_SEND_RESTART
  6878 ;;		_I2C_DO_SEND_STOP
  6879 ;;		_rd1RegCompleteHandler
  6880 ;;		_rd2RegCompleteHandler
  6881 ;;		_rdBlkRegCompleteHandler
  6882 ;;		_wr1RegCompleteHandler
  6883 ;;		_wr2RegCompleteHandler
  6884 ;; This function is called by:
  6885 ;;		_I2C_MasterFsm
  6886 ;; This function uses a non-reentrant model
  6887 ;;
  6888                           
  6889                           
  6890                           ;psect for function _I2C_DO_ADDRESS_NACK
  6891  03B0                     _I2C_DO_ADDRESS_NACK:	
  6892                           
  6893                           ;i2c_master.c: 502: I2C_Status.addressNackCheck = 0;
  6894                           
  6895                           ;incstack = 0
  6896                           ; Regs used in _I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6897  03B0  0020               	movlb	0	; select bank0
  6898  03B1  103C               	bcf	_I2C_Status+28,0
  6899                           
  6900                           ;i2c_master.c: 503: I2C_Status.error = I2C_FAIL;
  6901  03B2  3002               	movlw	2
  6902  03B3  00FA               	movwf	??_I2C_DO_ADDRESS_NACK
  6903  03B4  087A               	movf	??_I2C_DO_ADDRESS_NACK,w
  6904  03B5  00BB               	movwf	_I2C_Status+27
  6905                           
  6906                           ;i2c_master.c: 504: switch(I2C_Status.callbackTable[I2C_ADDR_NACK](I2C_Status.callbackPa
      +                          yload[I2C_ADDR_NACK]))
  6907  03B6  2BBD               	goto	i1l2407
  6908  03B7                     i1l2397:	
  6909                           ;i2c_master.c: 505: {
  6910                           ;i2c_master.c: 506: case I2C_RESTART_READ:
  6911                           
  6912                           
  6913                           ;i2c_master.c: 507: case I2C_RESTART_WRITE:
  6914                           ;i2c_master.c: 508: return I2C_DO_SEND_RESTART();
  6915  03B7  3185  25B8         	fcall	_I2C_DO_SEND_RESTART
  6916  03B9  0008               	return
  6917  03BA                     i1l2401:	
  6918                           ;i2c_master.c: 509: default:
  6919                           
  6920                           
  6921                           ;i2c_master.c: 510: return I2C_DO_SEND_STOP();
  6922  03BA  3185  25B4         	fcall	_I2C_DO_SEND_STOP
  6923                           
  6924                           ;i2c_master.c: 511: }
  6925  03BC  0008               	return
  6926  03BD                     i1l2407:	
  6927  03BD  0020               	movlb	0	; select bank0
  6928  03BE  082E               	movf	low ((_I2C_Status| 0+14)),w
  6929  03BF  00FA               	movwf	??_I2C_DO_ADDRESS_NACK
  6930  03C0  087A               	movf	??_I2C_DO_ADDRESS_NACK,w
  6931  03C1  00F9               	movwf	I2C_CallbackReturnReset@funPtr
  6932  03C2  3004               	movlw	4
  6933  03C3  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
  6934  03C4  0086               	movwf	6
  6935  03C5  0187               	clrf	7
  6936  03C6  3F41               	moviw [1]fsr1
  6937  03C7  008A               	movwf	10
  6938  03C8  3F40               	moviw [0]fsr1
  6939  03C9  000A               	callw
  6940  03CA  3183               	pagesel	$
  6941                           
  6942                           ; Switch size 1, requested type "space"
  6943                           ; Number of cases is 2, Range of values is 2 to 3
  6944                           ; switch strategies available:
  6945                           ; Name         Instructions Cycles
  6946                           ; simple_byte            7     4 (average)
  6947                           ; direct_byte           13     9 (fixed)
  6948                           ; jumptable            263     9 (fixed)
  6949                           ;	Chosen strategy is simple_byte
  6950  03CB  3A02               	xorlw	2	; case 2
  6951  03CC  1903               	skipnz
  6952  03CD  2BB7               	goto	i1l2397
  6953  03CE  3A01               	xorlw	1	; case 3
  6954  03CF  1903               	skipnz
  6955  03D0  2BB7               	goto	i1l2397
  6956  03D1  2BBA               	goto	i1l2401
  6957  03D2  0008               	return
  6958  03D3                     __end_of_I2C_DO_ADDRESS_NACK:	
  6959                           
  6960                           	psect	text32
  6961  058D                     __ptext32:	
  6962 ;; *************** function _I2C_DO_RESET *****************
  6963 ;; Defined at:
  6964 ;;		line 494 in file "mcc_generated_files/i2c_master.c"
  6965 ;; Parameters:    Size  Location     Type
  6966 ;;		None
  6967 ;; Auto vars:     Size  Location     Type
  6968 ;;		None
  6969 ;; Return value:  Size  Location     Type
  6970 ;;                  1    wreg      enum E12103
  6971 ;; Registers used:
  6972 ;;		wreg, status,2
  6973 ;; Tracked objects:
  6974 ;;		On entry : 0/0
  6975 ;;		On exit  : 0/0
  6976 ;;		Unchanged: 0/0
  6977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6982 ;;Total ram usage:        0 bytes
  6983 ;; Hardware stack levels used:    1
  6984 ;; This function calls:
  6985 ;;		Nothing
  6986 ;; This function is called by:
  6987 ;;		_I2C_MasterFsm
  6988 ;; This function uses a non-reentrant model
  6989 ;;
  6990                           
  6991                           
  6992                           ;psect for function _I2C_DO_RESET
  6993  058D                     _I2C_DO_RESET:	
  6994                           
  6995                           ;i2c_master.c: 496: I2C_Status.busy = 0;
  6996                           
  6997                           ;incstack = 0
  6998                           ; Regs used in _I2C_DO_RESET: [wreg+status,2]
  6999  058D  0020               	movlb	0	; select bank0
  7000  058E  10BC               	bcf	_I2C_Status+28,1
  7001                           
  7002                           ;i2c_master.c: 497: I2C_Status.error = I2C_NOERR;
  7003  058F  01BB               	clrf	_I2C_Status+27
  7004                           
  7005                           ;i2c_master.c: 498: return I2C_RESET;
  7006  0590  300E               	movlw	14
  7007  0591  0008               	return
  7008  0592                     __end_of_I2C_DO_RESET:	
  7009                           
  7010                           	psect	text33
  7011  05A8                     __ptext33:	
  7012 ;; *************** function _I2C_DO_RX_NACK_RESTART *****************
  7013 ;; Defined at:
  7014 ;;		line 488 in file "mcc_generated_files/i2c_master.c"
  7015 ;; Parameters:    Size  Location     Type
  7016 ;;		None
  7017 ;; Auto vars:     Size  Location     Type
  7018 ;;		None
  7019 ;; Return value:  Size  Location     Type
  7020 ;;                  1    wreg      enum E12103
  7021 ;; Registers used:
  7022 ;;		wreg, status,2, status,0, pclath, cstack
  7023 ;; Tracked objects:
  7024 ;;		On entry : 0/0
  7025 ;;		On exit  : 0/0
  7026 ;;		Unchanged: 0/0
  7027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7031 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7032 ;;Total ram usage:        0 bytes
  7033 ;; Hardware stack levels used:    1
  7034 ;; Hardware stack levels required when called:    1
  7035 ;; This function calls:
  7036 ;;		_I2C_MasterSendNack
  7037 ;; This function is called by:
  7038 ;;		_I2C_DO_RX
  7039 ;;		_I2C_MasterFsm
  7040 ;; This function uses a non-reentrant model
  7041 ;;
  7042                           
  7043                           
  7044                           ;psect for function _I2C_DO_RX_NACK_RESTART
  7045  05A8                     _I2C_DO_RX_NACK_RESTART:	
  7046                           
  7047                           ;i2c_master.c: 490: I2C_MasterSendNack();
  7048                           
  7049                           ;incstack = 0
  7050                           ; Regs used in _I2C_DO_RX_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  7051  05A8  3185  25C8         	fcall	_I2C_MasterSendNack
  7052                           
  7053                           ;i2c_master.c: 491: return I2C_SEND_RESTART;
  7054  05AA  3009               	movlw	9
  7055  05AB  0008               	return
  7056  05AC                     __end_of_I2C_DO_RX_NACK_RESTART:	
  7057                           
  7058                           	psect	text34
  7059  05AC                     __ptext34:	
  7060 ;; *************** function _I2C_DO_RX_NACK_STOP *****************
  7061 ;; Defined at:
  7062 ;;		line 482 in file "mcc_generated_files/i2c_master.c"
  7063 ;; Parameters:    Size  Location     Type
  7064 ;;		None
  7065 ;; Auto vars:     Size  Location     Type
  7066 ;;		None
  7067 ;; Return value:  Size  Location     Type
  7068 ;;                  1    wreg      enum E12103
  7069 ;; Registers used:
  7070 ;;		wreg, status,2, status,0, pclath, cstack
  7071 ;; Tracked objects:
  7072 ;;		On entry : 0/0
  7073 ;;		On exit  : 0/0
  7074 ;;		Unchanged: 0/0
  7075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7080 ;;Total ram usage:        0 bytes
  7081 ;; Hardware stack levels used:    1
  7082 ;; Hardware stack levels required when called:    1
  7083 ;; This function calls:
  7084 ;;		_I2C_MasterSendNack
  7085 ;; This function is called by:
  7086 ;;		_I2C_DO_RX
  7087 ;;		_I2C_MasterFsm
  7088 ;; This function uses a non-reentrant model
  7089 ;;
  7090                           
  7091                           
  7092                           ;psect for function _I2C_DO_RX_NACK_STOP
  7093  05AC                     _I2C_DO_RX_NACK_STOP:	
  7094                           
  7095                           ;i2c_master.c: 484: I2C_MasterSendNack();
  7096                           
  7097                           ;incstack = 0
  7098                           ; Regs used in _I2C_DO_RX_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  7099  05AC  3185  25C8         	fcall	_I2C_MasterSendNack
  7100                           
  7101                           ;i2c_master.c: 485: return I2C_SEND_STOP;
  7102  05AE  300A               	movlw	10
  7103  05AF  0008               	return
  7104  05B0                     __end_of_I2C_DO_RX_NACK_STOP:	
  7105                           
  7106                           	psect	text35
  7107  05B0                     __ptext35:	
  7108 ;; *************** function _I2C_DO_RX_ACK *****************
  7109 ;; Defined at:
  7110 ;;		line 475 in file "mcc_generated_files/i2c_master.c"
  7111 ;; Parameters:    Size  Location     Type
  7112 ;;		None
  7113 ;; Auto vars:     Size  Location     Type
  7114 ;;		None
  7115 ;; Return value:  Size  Location     Type
  7116 ;;                  1    wreg      enum E12103
  7117 ;; Registers used:
  7118 ;;		wreg, status,2, status,0, pclath, cstack
  7119 ;; Tracked objects:
  7120 ;;		On entry : 0/0
  7121 ;;		On exit  : 0/0
  7122 ;;		Unchanged: 0/0
  7123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7128 ;;Total ram usage:        0 bytes
  7129 ;; Hardware stack levels used:    1
  7130 ;; Hardware stack levels required when called:    1
  7131 ;; This function calls:
  7132 ;;		_I2C_MasterSendAck
  7133 ;; This function is called by:
  7134 ;;		_I2C_MasterFsm
  7135 ;; This function uses a non-reentrant model
  7136 ;;
  7137                           
  7138                           
  7139                           ;psect for function _I2C_DO_RX_ACK
  7140  05B0                     _I2C_DO_RX_ACK:	
  7141                           
  7142                           ;i2c_master.c: 477: I2C_MasterSendAck();
  7143                           
  7144                           ;incstack = 0
  7145                           ; Regs used in _I2C_DO_RX_ACK: [wreg+status,2+status,0+pclath+cstack]
  7146  05B0  3185  25C4         	fcall	_I2C_MasterSendAck
  7147                           
  7148                           ;i2c_master.c: 478: return I2C_RCEN;
  7149  05B2  3005               	movlw	5
  7150  05B3  0008               	return
  7151  05B4                     __end_of_I2C_DO_RX_ACK:	
  7152                           
  7153                           	psect	text36
  7154  05B4                     __ptext36:	
  7155 ;; *************** function _I2C_DO_SEND_STOP *****************
  7156 ;; Defined at:
  7157 ;;		line 469 in file "mcc_generated_files/i2c_master.c"
  7158 ;; Parameters:    Size  Location     Type
  7159 ;;		None
  7160 ;; Auto vars:     Size  Location     Type
  7161 ;;		None
  7162 ;; Return value:  Size  Location     Type
  7163 ;;                  1    wreg      enum E12103
  7164 ;; Registers used:
  7165 ;;		wreg, status,2, status,0, pclath, cstack
  7166 ;; Tracked objects:
  7167 ;;		On entry : 0/0
  7168 ;;		On exit  : 0/0
  7169 ;;		Unchanged: 0/0
  7170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7175 ;;Total ram usage:        0 bytes
  7176 ;; Hardware stack levels used:    1
  7177 ;; Hardware stack levels required when called:    1
  7178 ;; This function calls:
  7179 ;;		_I2C_MasterStop
  7180 ;; This function is called by:
  7181 ;;		_I2C_DO_TX
  7182 ;;		_I2C_DO_TX_EMPTY
  7183 ;;		_I2C_DO_ADDRESS_NACK
  7184 ;;		_I2C_MasterFsm
  7185 ;; This function uses a non-reentrant model
  7186 ;;
  7187                           
  7188                           
  7189                           ;psect for function _I2C_DO_SEND_STOP
  7190  05B4                     _I2C_DO_SEND_STOP:	
  7191                           
  7192                           ;i2c_master.c: 471: I2C_MasterStop();
  7193                           
  7194                           ;incstack = 0
  7195                           ; Regs used in _I2C_DO_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
  7196  05B4  3185  25DF         	fcall	_I2C_MasterStop
  7197                           
  7198                           ;i2c_master.c: 472: return I2C_IDLE;
  7199  05B6  3000               	movlw	0
  7200  05B7  0008               	return
  7201  05B8                     __end_of_I2C_DO_SEND_STOP:	
  7202                           
  7203                           	psect	text37
  7204  05B8                     __ptext37:	
  7205 ;; *************** function _I2C_DO_SEND_RESTART *****************
  7206 ;; Defined at:
  7207 ;;		line 463 in file "mcc_generated_files/i2c_master.c"
  7208 ;; Parameters:    Size  Location     Type
  7209 ;;		None
  7210 ;; Auto vars:     Size  Location     Type
  7211 ;;		None
  7212 ;; Return value:  Size  Location     Type
  7213 ;;                  1    wreg      enum E12103
  7214 ;; Registers used:
  7215 ;;		wreg, status,2, status,0, pclath, cstack
  7216 ;; Tracked objects:
  7217 ;;		On entry : 0/0
  7218 ;;		On exit  : 0/0
  7219 ;;		Unchanged: 0/0
  7220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7225 ;;Total ram usage:        0 bytes
  7226 ;; Hardware stack levels used:    1
  7227 ;; Hardware stack levels required when called:    1
  7228 ;; This function calls:
  7229 ;;		_I2C_MasterEnableRestart
  7230 ;; This function is called by:
  7231 ;;		_I2C_DO_TX_EMPTY
  7232 ;;		_I2C_DO_ADDRESS_NACK
  7233 ;;		_I2C_MasterFsm
  7234 ;; This function uses a non-reentrant model
  7235 ;;
  7236                           
  7237                           
  7238                           ;psect for function _I2C_DO_SEND_RESTART
  7239  05B8                     _I2C_DO_SEND_RESTART:	
  7240                           
  7241                           ;i2c_master.c: 465: I2C_MasterEnableRestart();
  7242                           
  7243                           ;incstack = 0
  7244                           ; Regs used in _I2C_DO_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
  7245  05B8  3185  25E2         	fcall	_I2C_MasterEnableRestart
  7246                           
  7247                           ;i2c_master.c: 466: return I2C_SEND_ADR_READ;
  7248  05BA  3001               	movlw	1
  7249  05BB  0008               	return
  7250  05BC                     __end_of_I2C_DO_SEND_RESTART:	
  7251                           
  7252                           	psect	text38
  7253  05BC                     __ptext38:	
  7254 ;; *************** function _I2C_DO_SEND_RESTART_WRITE *****************
  7255 ;; Defined at:
  7256 ;;		line 456 in file "mcc_generated_files/i2c_master.c"
  7257 ;; Parameters:    Size  Location     Type
  7258 ;;		None
  7259 ;; Auto vars:     Size  Location     Type
  7260 ;;		None
  7261 ;; Return value:  Size  Location     Type
  7262 ;;                  1    wreg      enum E12103
  7263 ;; Registers used:
  7264 ;;		wreg, status,2, status,0, pclath, cstack
  7265 ;; Tracked objects:
  7266 ;;		On entry : 0/0
  7267 ;;		On exit  : 0/0
  7268 ;;		Unchanged: 0/0
  7269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7274 ;;Total ram usage:        0 bytes
  7275 ;; Hardware stack levels used:    1
  7276 ;; Hardware stack levels required when called:    1
  7277 ;; This function calls:
  7278 ;;		_I2C_MasterEnableRestart
  7279 ;; This function is called by:
  7280 ;;		_I2C_DO_TX
  7281 ;;		_I2C_MasterFsm
  7282 ;; This function uses a non-reentrant model
  7283 ;;
  7284                           
  7285                           
  7286                           ;psect for function _I2C_DO_SEND_RESTART_WRITE
  7287  05BC                     _I2C_DO_SEND_RESTART_WRITE:	
  7288                           
  7289                           ;i2c_master.c: 458: I2C_MasterEnableRestart();
  7290                           
  7291                           ;incstack = 0
  7292                           ; Regs used in _I2C_DO_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
  7293  05BC  3185  25E2         	fcall	_I2C_MasterEnableRestart
  7294                           
  7295                           ;i2c_master.c: 459: return I2C_SEND_ADR_WRITE;
  7296  05BE  3002               	movlw	2
  7297  05BF  0008               	return
  7298  05C0                     __end_of_I2C_DO_SEND_RESTART_WRITE:	
  7299                           
  7300                           	psect	text39
  7301  05C0                     __ptext39:	
  7302 ;; *************** function _I2C_DO_SEND_RESTART_READ *****************
  7303 ;; Defined at:
  7304 ;;		line 450 in file "mcc_generated_files/i2c_master.c"
  7305 ;; Parameters:    Size  Location     Type
  7306 ;;		None
  7307 ;; Auto vars:     Size  Location     Type
  7308 ;;		None
  7309 ;; Return value:  Size  Location     Type
  7310 ;;                  1    wreg      enum E12103
  7311 ;; Registers used:
  7312 ;;		wreg, status,2, status,0, pclath, cstack
  7313 ;; Tracked objects:
  7314 ;;		On entry : 0/0
  7315 ;;		On exit  : 0/0
  7316 ;;		Unchanged: 0/0
  7317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7321 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7322 ;;Total ram usage:        0 bytes
  7323 ;; Hardware stack levels used:    1
  7324 ;; Hardware stack levels required when called:    1
  7325 ;; This function calls:
  7326 ;;		_I2C_MasterEnableRestart
  7327 ;; This function is called by:
  7328 ;;		_I2C_DO_TX
  7329 ;;		_I2C_MasterFsm
  7330 ;; This function uses a non-reentrant model
  7331 ;;
  7332                           
  7333                           
  7334                           ;psect for function _I2C_DO_SEND_RESTART_READ
  7335  05C0                     _I2C_DO_SEND_RESTART_READ:	
  7336                           
  7337                           ;i2c_master.c: 452: I2C_MasterEnableRestart();
  7338                           
  7339                           ;incstack = 0
  7340                           ; Regs used in _I2C_DO_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
  7341  05C0  3185  25E2         	fcall	_I2C_MasterEnableRestart
  7342                           
  7343                           ;i2c_master.c: 453: return I2C_SEND_ADR_READ;
  7344  05C2  3001               	movlw	1
  7345  05C3  0008               	return
  7346  05C4                     __end_of_I2C_DO_SEND_RESTART_READ:	
  7347                           
  7348                           	psect	text40
  7349  0581                     __ptext40:	
  7350 ;; *************** function _I2C_DO_RCEN *****************
  7351 ;; Defined at:
  7352 ;;		line 402 in file "mcc_generated_files/i2c_master.c"
  7353 ;; Parameters:    Size  Location     Type
  7354 ;;		None
  7355 ;; Auto vars:     Size  Location     Type
  7356 ;;		None
  7357 ;; Return value:  Size  Location     Type
  7358 ;;                  1    wreg      enum E12103
  7359 ;; Registers used:
  7360 ;;		wreg, status,2, status,0, pclath, cstack
  7361 ;; Tracked objects:
  7362 ;;		On entry : 0/0
  7363 ;;		On exit  : 0/0
  7364 ;;		Unchanged: 0/0
  7365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7369 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7370 ;;Total ram usage:        0 bytes
  7371 ;; Hardware stack levels used:    1
  7372 ;; Hardware stack levels required when called:    1
  7373 ;; This function calls:
  7374 ;;		_I2C_MasterStartRx
  7375 ;; This function is called by:
  7376 ;;		_I2C_MasterFsm
  7377 ;; This function uses a non-reentrant model
  7378 ;;
  7379                           
  7380                           
  7381                           ;psect for function _I2C_DO_RCEN
  7382  0581                     _I2C_DO_RCEN:	
  7383                           
  7384                           ;i2c_master.c: 404: I2C_Status.addressNackCheck = 0;
  7385                           
  7386                           ;incstack = 0
  7387                           ; Regs used in _I2C_DO_RCEN: [wreg+status,2+status,0+pclath+cstack]
  7388  0581  0020               	movlb	0	; select bank0
  7389  0582  103C               	bcf	_I2C_Status+28,0
  7390                           
  7391                           ;i2c_master.c: 405: I2C_MasterStartRx();
  7392  0583  3185  25DC         	fcall	_I2C_MasterStartRx
  7393                           
  7394                           ;i2c_master.c: 406: return I2C_RX;
  7395  0585  3004               	movlw	4
  7396  0586  0008               	return
  7397  0587                     __end_of_I2C_DO_RCEN:	
  7398                           
  7399                           	psect	text41
  7400  0238                     __ptext41:	
  7401 ;; *************** function _I2C_DO_RX *****************
  7402 ;; Defined at:
  7403 ;;		line 378 in file "mcc_generated_files/i2c_master.c"
  7404 ;; Parameters:    Size  Location     Type
  7405 ;;		None
  7406 ;; Auto vars:     Size  Location     Type
  7407 ;;		None
  7408 ;; Return value:  Size  Location     Type
  7409 ;;                  1    wreg      enum E12103
  7410 ;; Registers used:
  7411 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7412 ;; Tracked objects:
  7413 ;;		On entry : 0/0
  7414 ;;		On exit  : 0/0
  7415 ;;		Unchanged: 0/0
  7416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7419 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7420 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7421 ;;Total ram usage:        1 bytes
  7422 ;; Hardware stack levels used:    1
  7423 ;; Hardware stack levels required when called:    3
  7424 ;; This function calls:
  7425 ;;		Absolute function
  7426 ;;		_I2C_CallbackReturnReset
  7427 ;;		_I2C_CallbackReturnStop
  7428 ;;		_I2C_DO_RX_NACK_RESTART
  7429 ;;		_I2C_DO_RX_NACK_STOP
  7430 ;;		_I2C_MasterGetRxData
  7431 ;;		_I2C_MasterSendAck
  7432 ;;		_rd1RegCompleteHandler
  7433 ;;		_rd2RegCompleteHandler
  7434 ;;		_rdBlkRegCompleteHandler
  7435 ;;		_wr1RegCompleteHandler
  7436 ;;		_wr2RegCompleteHandler
  7437 ;; This function is called by:
  7438 ;;		_I2C_MasterFsm
  7439 ;; This function uses a non-reentrant model
  7440 ;;
  7441                           
  7442                           
  7443                           ;psect for function _I2C_DO_RX
  7444  0238                     _I2C_DO_RX:	
  7445                           
  7446                           ;i2c_master.c: 380: *I2C_Status.data_ptr++ = I2C_MasterGetRxData();
  7447                           
  7448                           ;incstack = 0
  7449                           ; Regs used in _I2C_DO_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7450  0238  3185  25D9  3182   	fcall	_I2C_MasterGetRxData
  7451  023B  00FA               	movwf	??_I2C_DO_RX
  7452  023C  0020               	movlb	0	; select bank0
  7453  023D  0837               	movf	low ((_I2C_Status| 0+23)),w
  7454  023E  0086               	movwf	6
  7455  023F  0187               	clrf	7
  7456  0240  087A               	movf	??_I2C_DO_RX,w
  7457  0241  0081               	movwf	1
  7458  0242  3001               	movlw	1
  7459  0243  00FA               	movwf	??_I2C_DO_RX
  7460  0244  087A               	movf	??_I2C_DO_RX,w
  7461  0245  07B7               	addwf	low ((_I2C_Status| 0+23)),f
  7462                           
  7463                           ;i2c_master.c: 381: if(--I2C_Status.data_length)
  7464  0246  3001               	movlw	1
  7465  0247  02B8               	subwf	_I2C_Status+24,f
  7466  0248  3000               	movlw	0
  7467  0249  3BB9               	subwfb	_I2C_Status+25,f
  7468  024A  0838               	movf	_I2C_Status+24,w
  7469  024B  0439               	iorwf	_I2C_Status+25,w
  7470  024C  1903               	btfsc	3,2
  7471  024D  2A52               	goto	i1l403
  7472                           
  7473                           ;i2c_master.c: 382: {
  7474                           ;i2c_master.c: 383: I2C_MasterSendAck();
  7475  024E  3185  25C4         	fcall	_I2C_MasterSendAck
  7476                           
  7477                           ;i2c_master.c: 384: return I2C_RCEN;
  7478  0250  3005               	movlw	5
  7479                           
  7480                           ;i2c_master.c: 385: }
  7481  0251  0008               	return
  7482  0252                     i1l403:	
  7483                           
  7484                           ;i2c_master.c: 386: else
  7485                           ;i2c_master.c: 387: {
  7486                           ;i2c_master.c: 388: I2C_Status.bufferFree = 1;
  7487  0252  15BC               	bsf	_I2C_Status+28,3
  7488                           
  7489                           ;i2c_master.c: 389: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
  7490  0253  2A5A               	goto	i1l2349
  7491  0254                     i1l2339:	
  7492                           ;i2c_master.c: 390: {
  7493                           ;i2c_master.c: 391: case I2C_RESTART_WRITE:
  7494                           
  7495                           
  7496                           ;i2c_master.c: 392: case I2C_RESTART_READ:
  7497                           ;i2c_master.c: 393: return I2C_DO_RX_NACK_RESTART();
  7498  0254  3185  25A8         	fcall	_I2C_DO_RX_NACK_RESTART
  7499  0256  0008               	return
  7500  0257                     i1l2343:	
  7501                           ;i2c_master.c: 395: case I2C_CONTINUE:
  7502                           
  7503                           ;i2c_master.c: 394: default:
  7504                           
  7505                           
  7506                           ;i2c_master.c: 396: case I2C_STOP:
  7507                           ;i2c_master.c: 397: return I2C_DO_RX_NACK_STOP();
  7508  0257  3185  25AC         	fcall	_I2C_DO_RX_NACK_STOP
  7509                           
  7510                           ;i2c_master.c: 398: }
  7511  0259  0008               	return
  7512  025A                     i1l2349:	
  7513  025A  0020               	movlb	0	; select bank0
  7514  025B  082C               	movf	low ((_I2C_Status| 0+12)),w
  7515  025C  00FA               	movwf	??_I2C_DO_RX
  7516  025D  087A               	movf	??_I2C_DO_RX,w
  7517  025E  00F9               	movwf	I2C_CallbackReturnReset@funPtr
  7518  025F  0821               	movf	_I2C_Status+1,w
  7519  0260  008A               	movwf	10
  7520  0261  0820               	movf	_I2C_Status,w
  7521  0262  000A               	callw
  7522  0263  3182               	pagesel	$
  7523                           
  7524                           ; Switch size 1, requested type "space"
  7525                           ; Number of cases is 4, Range of values is 1 to 4
  7526                           ; switch strategies available:
  7527                           ; Name         Instructions Cycles
  7528                           ; simple_byte           13     7 (average)
  7529                           ; direct_byte           17     9 (fixed)
  7530                           ; jumptable            263     9 (fixed)
  7531                           ;	Chosen strategy is simple_byte
  7532  0264  3A01               	xorlw	1	; case 1
  7533  0265  1903               	skipnz
  7534  0266  2A57               	goto	i1l2343
  7535  0267  3A03               	xorlw	3	; case 2
  7536  0268  1903               	skipnz
  7537  0269  2A54               	goto	i1l2339
  7538  026A  3A01               	xorlw	1	; case 3
  7539  026B  1903               	skipnz
  7540  026C  2A54               	goto	i1l2339
  7541  026D  3A07               	xorlw	7	; case 4
  7542  026E  1903               	skipnz
  7543  026F  2A57               	goto	i1l2343
  7544  0270  2A57               	goto	i1l2343
  7545  0271  0008               	return
  7546  0272                     __end_of_I2C_DO_RX:	
  7547                           
  7548                           	psect	text42
  7549  01B2                     __ptext42:	
  7550 ;; *************** function _I2C_DO_TX *****************
  7551 ;; Defined at:
  7552 ;;		line 354 in file "mcc_generated_files/i2c_master.c"
  7553 ;; Parameters:    Size  Location     Type
  7554 ;;		None
  7555 ;; Auto vars:     Size  Location     Type
  7556 ;;		None
  7557 ;; Return value:  Size  Location     Type
  7558 ;;                  1    wreg      enum E12103
  7559 ;; Registers used:
  7560 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7561 ;; Tracked objects:
  7562 ;;		On entry : 0/0
  7563 ;;		On exit  : 0/0
  7564 ;;		Unchanged: 0/0
  7565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7567 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7568 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7569 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7570 ;;Total ram usage:        3 bytes
  7571 ;; Hardware stack levels used:    1
  7572 ;; Hardware stack levels required when called:    3
  7573 ;; This function calls:
  7574 ;;		Absolute function
  7575 ;;		_I2C_CallbackReturnReset
  7576 ;;		_I2C_CallbackReturnStop
  7577 ;;		_I2C_DO_SEND_RESTART_READ
  7578 ;;		_I2C_DO_SEND_RESTART_WRITE
  7579 ;;		_I2C_DO_SEND_STOP
  7580 ;;		_I2C_MasterIsNack
  7581 ;;		_I2C_MasterSendTxData
  7582 ;;		_rd1RegCompleteHandler
  7583 ;;		_rd2RegCompleteHandler
  7584 ;;		_rdBlkRegCompleteHandler
  7585 ;;		_wr1RegCompleteHandler
  7586 ;;		_wr2RegCompleteHandler
  7587 ;; This function is called by:
  7588 ;;		_I2C_MasterFsm
  7589 ;; This function uses a non-reentrant model
  7590 ;;
  7591                           
  7592                           
  7593                           ;psect for function _I2C_DO_TX
  7594  01B2                     _I2C_DO_TX:	
  7595                           
  7596                           ;i2c_master.c: 356: if(I2C_MasterIsNack())
  7597                           
  7598                           ;incstack = 0
  7599                           ; Regs used in _I2C_DO_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7600  01B2  3185  2587  3181   	fcall	_I2C_MasterIsNack
  7601  01B5  3A00               	xorlw	0
  7602  01B6  1D03               	btfss	3,2
  7603  01B7  29C2               	goto	i1l2313
  7604  01B8  29DE               	goto	i1l387
  7605  01B9                     i1l2299:	
  7606                           ;i2c_master.c: 359: {
  7607                           ;i2c_master.c: 360: case I2C_RESTART_READ:
  7608                           
  7609                           ;i2c_master.c: 357: {
  7610                           ;i2c_master.c: 358: switch(I2C_Status.callbackTable[I2C_DATA_NACK](I2C_Status.callbackPa
      +                          yload[I2C_DATA_NACK]))
  7611                           
  7612                           
  7613                           ;i2c_master.c: 361: return I2C_DO_SEND_RESTART_READ();
  7614  01B9  3185  25C0         	fcall	_I2C_DO_SEND_RESTART_READ
  7615  01BB  0008               	return
  7616  01BC                     i1l2303:	
  7617                           ;i2c_master.c: 362: case I2C_RESTART_WRITE:
  7618                           
  7619                           
  7620                           ;i2c_master.c: 363: return I2C_DO_SEND_RESTART_WRITE();
  7621  01BC  3185  25BC         	fcall	_I2C_DO_SEND_RESTART_WRITE
  7622  01BE  0008               	return
  7623  01BF                     i1l2307:	
  7624                           ;i2c_master.c: 365: case I2C_CONTINUE:
  7625                           
  7626                           ;i2c_master.c: 364: default:
  7627                           
  7628                           
  7629                           ;i2c_master.c: 366: case I2C_STOP:
  7630                           ;i2c_master.c: 367: return I2C_DO_SEND_STOP();
  7631  01BF  3185  25B4         	fcall	_I2C_DO_SEND_STOP
  7632                           
  7633                           ;i2c_master.c: 368: }
  7634  01C1  0008               	return
  7635  01C2                     i1l2313:	
  7636  01C2  0020               	movlb	0	; select bank0
  7637  01C3  082F               	movf	low ((_I2C_Status| 0+15)),w
  7638  01C4  00FA               	movwf	??_I2C_DO_TX
  7639  01C5  087A               	movf	??_I2C_DO_TX,w
  7640  01C6  00F9               	movwf	I2C_CallbackReturnReset@funPtr
  7641  01C7  3006               	movlw	6
  7642  01C8  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
  7643  01C9  0086               	movwf	6
  7644  01CA  0187               	clrf	7
  7645  01CB  3F41               	moviw [1]fsr1
  7646  01CC  008A               	movwf	10
  7647  01CD  3F40               	moviw [0]fsr1
  7648  01CE  000A               	callw
  7649  01CF  3181               	pagesel	$
  7650                           
  7651                           ; Switch size 1, requested type "space"
  7652                           ; Number of cases is 4, Range of values is 1 to 4
  7653                           ; switch strategies available:
  7654                           ; Name         Instructions Cycles
  7655                           ; simple_byte           13     7 (average)
  7656                           ; direct_byte           17     9 (fixed)
  7657                           ; jumptable            263     9 (fixed)
  7658                           ;	Chosen strategy is simple_byte
  7659  01D0  3A01               	xorlw	1	; case 1
  7660  01D1  1903               	skipnz
  7661  01D2  29BF               	goto	i1l2307
  7662  01D3  3A03               	xorlw	3	; case 2
  7663  01D4  1903               	skipnz
  7664  01D5  29B9               	goto	i1l2299
  7665  01D6  3A01               	xorlw	1	; case 3
  7666  01D7  1903               	skipnz
  7667  01D8  29BC               	goto	i1l2303
  7668  01D9  3A07               	xorlw	7	; case 4
  7669  01DA  1903               	skipnz
  7670  01DB  29BF               	goto	i1l2307
  7671  01DC  29BF               	goto	i1l2307
  7672                           
  7673                           ;i2c_master.c: 369: }
  7674  01DD  0008               	return
  7675  01DE                     i1l387:	
  7676                           
  7677                           ;i2c_master.c: 370: else
  7678                           ;i2c_master.c: 371: {
  7679                           ;i2c_master.c: 372: I2C_Status.addressNackCheck = 0;
  7680  01DE  0020               	movlb	0	; select bank0
  7681  01DF  103C               	bcf	_I2C_Status+28,0
  7682                           
  7683                           ;i2c_master.c: 373: I2C_MasterSendTxData(*I2C_Status.data_ptr++);
  7684  01E0  3017               	movlw	23
  7685  01E1  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
  7686  01E2  0086               	movwf	6
  7687  01E3  0187               	clrf	7
  7688  01E4  3F40               	moviw [0]fsr1
  7689  01E5  0084               	movwf	4
  7690  01E6  0185               	clrf	5
  7691  01E7  0A81               	incf	1,f
  7692  01E8  0800               	movf	0,w
  7693  01E9  3185  2597  3181   	fcall	_I2C_MasterSendTxData
  7694                           
  7695                           ;i2c_master.c: 374: return (--I2C_Status.data_length)?I2C_TX:I2C_TX_EMPTY;
  7696  01EC  3001               	movlw	1
  7697  01ED  0020               	movlb	0	; select bank0
  7698  01EE  02B8               	subwf	_I2C_Status+24,f
  7699  01EF  3000               	movlw	0
  7700  01F0  3BB9               	subwfb	_I2C_Status+25,f
  7701  01F1  0838               	movf	_I2C_Status+24,w
  7702  01F2  0439               	iorwf	_I2C_Status+25,w
  7703  01F3  1D03               	btfss	3,2
  7704  01F4  29F7               	goto	i1l2321
  7705  01F5  3006               	movlw	6
  7706  01F6  29F8               	goto	L1
  7707  01F7                     i1l2321:	
  7708  01F7  3003               	movlw	3
  7709  01F8                     L1:	
  7710  01F8  00FB               	movwf	_I2C_DO_TX$794
  7711  01F9  3000               	movlw	0
  7712  01FA  00FC               	movwf	_I2C_DO_TX$794+1
  7713  01FB  087B               	movf	_I2C_DO_TX$794,w
  7714  01FC  0008               	return
  7715  01FD                     __end_of_I2C_DO_TX:	
  7716                           
  7717                           	psect	text43
  7718  0556                     __ptext43:	
  7719 ;; *************** function _I2C_DO_SEND_ADR_WRITE *****************
  7720 ;; Defined at:
  7721 ;;		line 347 in file "mcc_generated_files/i2c_master.c"
  7722 ;; Parameters:    Size  Location     Type
  7723 ;;		None
  7724 ;; Auto vars:     Size  Location     Type
  7725 ;;		None
  7726 ;; Return value:  Size  Location     Type
  7727 ;;                  1    wreg      enum E12103
  7728 ;; Registers used:
  7729 ;;		wreg, status,2, status,0, pclath, cstack
  7730 ;; Tracked objects:
  7731 ;;		On entry : 0/0
  7732 ;;		On exit  : 0/0
  7733 ;;		Unchanged: 0/0
  7734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7738 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7739 ;;Total ram usage:        0 bytes
  7740 ;; Hardware stack levels used:    1
  7741 ;; Hardware stack levels required when called:    1
  7742 ;; This function calls:
  7743 ;;		_I2C_MasterSendTxData
  7744 ;; This function is called by:
  7745 ;;		_I2C_MasterFsm
  7746 ;; This function uses a non-reentrant model
  7747 ;;
  7748                           
  7749                           
  7750                           ;psect for function _I2C_DO_SEND_ADR_WRITE
  7751  0556                     _I2C_DO_SEND_ADR_WRITE:	
  7752                           
  7753                           ;i2c_master.c: 349: I2C_Status.addressNackCheck = 1;
  7754                           
  7755                           ;incstack = 0
  7756                           ; Regs used in _I2C_DO_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
  7757  0556  0020               	movlb	0	; select bank0
  7758  0557  143C               	bsf	_I2C_Status+28,0
  7759                           
  7760                           ;i2c_master.c: 350: I2C_MasterSendTxData(I2C_Status.address << 1);
  7761  0558  3536               	lslf	_I2C_Status+22,w
  7762  0559  3185  2597         	fcall	_I2C_MasterSendTxData
  7763                           
  7764                           ;i2c_master.c: 351: return I2C_TX;
  7765  055B  3003               	movlw	3
  7766  055C  0008               	return
  7767  055D                     __end_of_I2C_DO_SEND_ADR_WRITE:	
  7768                           
  7769                           	psect	text44
  7770  053F                     __ptext44:	
  7771 ;; *************** function _I2C_DO_SEND_ADR_READ *****************
  7772 ;; Defined at:
  7773 ;;		line 340 in file "mcc_generated_files/i2c_master.c"
  7774 ;; Parameters:    Size  Location     Type
  7775 ;;		None
  7776 ;; Auto vars:     Size  Location     Type
  7777 ;;		None
  7778 ;; Return value:  Size  Location     Type
  7779 ;;                  1    wreg      enum E12103
  7780 ;; Registers used:
  7781 ;;		wreg, status,2, status,0, pclath, cstack
  7782 ;; Tracked objects:
  7783 ;;		On entry : 0/0
  7784 ;;		On exit  : 0/0
  7785 ;;		Unchanged: 0/0
  7786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7791 ;;Total ram usage:        0 bytes
  7792 ;; Hardware stack levels used:    1
  7793 ;; Hardware stack levels required when called:    1
  7794 ;; This function calls:
  7795 ;;		_I2C_MasterSendTxData
  7796 ;; This function is called by:
  7797 ;;		_I2C_MasterFsm
  7798 ;; This function uses a non-reentrant model
  7799 ;;
  7800                           
  7801                           
  7802                           ;psect for function _I2C_DO_SEND_ADR_READ
  7803  053F                     _I2C_DO_SEND_ADR_READ:	
  7804                           
  7805                           ;i2c_master.c: 342: I2C_Status.addressNackCheck = 1;
  7806                           
  7807                           ;incstack = 0
  7808                           ; Regs used in _I2C_DO_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
  7809  053F  0020               	movlb	0	; select bank0
  7810  0540  143C               	bsf	_I2C_Status+28,0
  7811                           
  7812                           ;i2c_master.c: 343: I2C_MasterSendTxData(I2C_Status.address << 1 | 1);
  7813  0541  1403               	setc
  7814  0542  0D36               	rlf	_I2C_Status+22,w
  7815  0543  3185  2597         	fcall	_I2C_MasterSendTxData
  7816                           
  7817                           ;i2c_master.c: 344: return I2C_RCEN;
  7818  0545  3005               	movlw	5
  7819  0546  0008               	return
  7820  0547                     __end_of_I2C_DO_SEND_ADR_READ:	
  7821                           
  7822                           	psect	text45
  7823  0592                     __ptext45:	
  7824 ;; *************** function _I2C_DO_IDLE *****************
  7825 ;; Defined at:
  7826 ;;		line 333 in file "mcc_generated_files/i2c_master.c"
  7827 ;; Parameters:    Size  Location     Type
  7828 ;;		None
  7829 ;; Auto vars:     Size  Location     Type
  7830 ;;		None
  7831 ;; Return value:  Size  Location     Type
  7832 ;;                  1    wreg      enum E12103
  7833 ;; Registers used:
  7834 ;;		wreg, status,2
  7835 ;; Tracked objects:
  7836 ;;		On entry : 0/0
  7837 ;;		On exit  : 0/0
  7838 ;;		Unchanged: 0/0
  7839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7844 ;;Total ram usage:        0 bytes
  7845 ;; Hardware stack levels used:    1
  7846 ;; This function calls:
  7847 ;;		Nothing
  7848 ;; This function is called by:
  7849 ;;		_I2C_MasterFsm
  7850 ;; This function uses a non-reentrant model
  7851 ;;
  7852                           
  7853                           
  7854                           ;psect for function _I2C_DO_IDLE
  7855  0592                     _I2C_DO_IDLE:	
  7856                           
  7857                           ;i2c_master.c: 335: I2C_Status.busy = 0;
  7858                           
  7859                           ;incstack = 0
  7860                           ; Regs used in _I2C_DO_IDLE: [wreg+status,2]
  7861  0592  0020               	movlb	0	; select bank0
  7862  0593  10BC               	bcf	_I2C_Status+28,1
  7863                           
  7864                           ;i2c_master.c: 336: I2C_Status.error = I2C_NOERR;
  7865  0594  01BB               	clrf	_I2C_Status+27
  7866                           
  7867                           ;i2c_master.c: 337: return I2C_RESET;
  7868  0595  300E               	movlw	14
  7869  0596  0008               	return
  7870  0597                     __end_of_I2C_DO_IDLE:	
  7871                           
  7872                           	psect	text46
  7873  0367                     __ptext46:	
  7874 ;; *************** function _I2C_DO_TX_EMPTY *****************
  7875 ;; Defined at:
  7876 ;;		line 409 in file "mcc_generated_files/i2c_master.c"
  7877 ;; Parameters:    Size  Location     Type
  7878 ;;		None
  7879 ;; Auto vars:     Size  Location     Type
  7880 ;;		None
  7881 ;; Return value:  Size  Location     Type
  7882 ;;                  1    wreg      enum E12103
  7883 ;; Registers used:
  7884 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7885 ;; Tracked objects:
  7886 ;;		On entry : 0/0
  7887 ;;		On exit  : 0/0
  7888 ;;		Unchanged: 0/0
  7889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7892 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7893 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7894 ;;Total ram usage:        1 bytes
  7895 ;; Hardware stack levels used:    1
  7896 ;; Hardware stack levels required when called:    3
  7897 ;; This function calls:
  7898 ;;		Absolute function
  7899 ;;		_I2C_CallbackReturnReset
  7900 ;;		_I2C_CallbackReturnStop
  7901 ;;		_I2C_DO_SEND_RESTART
  7902 ;;		_I2C_DO_SEND_STOP
  7903 ;;		_I2C_MasterSetIrq
  7904 ;;		_rd1RegCompleteHandler
  7905 ;;		_rd2RegCompleteHandler
  7906 ;;		_rdBlkRegCompleteHandler
  7907 ;;		_wr1RegCompleteHandler
  7908 ;;		_wr2RegCompleteHandler
  7909 ;; This function is called by:
  7910 ;;		_I2C_MasterFsm
  7911 ;; This function uses a non-reentrant model
  7912 ;;
  7913                           
  7914                           
  7915                           ;psect for function _I2C_DO_TX_EMPTY
  7916  0367                     _I2C_DO_TX_EMPTY:	
  7917                           
  7918                           ;i2c_master.c: 411: I2C_Status.bufferFree = 1;
  7919                           
  7920                           ;incstack = 0
  7921                           ; Regs used in _I2C_DO_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7922  0367  0020               	movlb	0	; select bank0
  7923  0368  15BC               	bsf	_I2C_Status+28,3
  7924                           
  7925                           ;i2c_master.c: 412: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
  7926  0369  2B74               	goto	i1l2377
  7927  036A                     i1l2361:	
  7928                           ;i2c_master.c: 413: {
  7929                           ;i2c_master.c: 414: case I2C_RESTART_READ:
  7930                           
  7931                           
  7932                           ;i2c_master.c: 415: case I2C_RESTART_WRITE:
  7933                           ;i2c_master.c: 416: return I2C_DO_SEND_RESTART();
  7934  036A  3185  25B8         	fcall	_I2C_DO_SEND_RESTART
  7935  036C  0008               	return
  7936  036D                     i1l2365:	
  7937                           ;i2c_master.c: 417: case I2C_CONTINUE:
  7938                           
  7939                           
  7940                           ;i2c_master.c: 418: I2C_MasterSetIrq();
  7941  036D  3185  25D6         	fcall	_I2C_MasterSetIrq
  7942                           
  7943                           ;i2c_master.c: 419: return I2C_TX;
  7944  036F  3003               	movlw	3
  7945  0370  0008               	return
  7946  0371                     i1l2371:	
  7947                           ;i2c_master.c: 421: case I2C_STOP:
  7948                           
  7949                           ;i2c_master.c: 420: default:
  7950                           
  7951                           
  7952                           ;i2c_master.c: 422: return I2C_DO_SEND_STOP();
  7953  0371  3185  25B4         	fcall	_I2C_DO_SEND_STOP
  7954                           
  7955                           ;i2c_master.c: 423: }
  7956  0373  0008               	return
  7957  0374                     i1l2377:	
  7958  0374  0020               	movlb	0	; select bank0
  7959  0375  082C               	movf	low ((_I2C_Status| 0+12)),w
  7960  0376  00FA               	movwf	??_I2C_DO_TX_EMPTY
  7961  0377  087A               	movf	??_I2C_DO_TX_EMPTY,w
  7962  0378  00F9               	movwf	I2C_CallbackReturnReset@funPtr
  7963  0379  0821               	movf	_I2C_Status+1,w
  7964  037A  008A               	movwf	10
  7965  037B  0820               	movf	_I2C_Status,w
  7966  037C  000A               	callw
  7967  037D  3183               	pagesel	$
  7968                           
  7969                           ; Switch size 1, requested type "space"
  7970                           ; Number of cases is 4, Range of values is 1 to 4
  7971                           ; switch strategies available:
  7972                           ; Name         Instructions Cycles
  7973                           ; simple_byte           13     7 (average)
  7974                           ; direct_byte           17     9 (fixed)
  7975                           ; jumptable            263     9 (fixed)
  7976                           ;	Chosen strategy is simple_byte
  7977  037E  3A01               	xorlw	1	; case 1
  7978  037F  1903               	skipnz
  7979  0380  2B71               	goto	i1l2371
  7980  0381  3A03               	xorlw	3	; case 2
  7981  0382  1903               	skipnz
  7982  0383  2B6A               	goto	i1l2361
  7983  0384  3A01               	xorlw	1	; case 3
  7984  0385  1903               	skipnz
  7985  0386  2B6A               	goto	i1l2361
  7986  0387  3A07               	xorlw	7	; case 4
  7987  0388  1903               	skipnz
  7988  0389  2B6D               	goto	i1l2365
  7989  038A  2B71               	goto	i1l2371
  7990  038B  0008               	return
  7991  038C                     __end_of_I2C_DO_TX_EMPTY:	
  7992                           
  7993                           	psect	text47
  7994  05D6                     __ptext47:	
  7995 ;; *************** function _I2C_MasterSetIrq *****************
  7996 ;; Defined at:
  7997 ;;		line 645 in file "mcc_generated_files/i2c_master.c"
  7998 ;; Parameters:    Size  Location     Type
  7999 ;;		None
  8000 ;; Auto vars:     Size  Location     Type
  8001 ;;		None
  8002 ;; Return value:  Size  Location     Type
  8003 ;;                  1    wreg      void 
  8004 ;; Registers used:
  8005 ;;		None
  8006 ;; Tracked objects:
  8007 ;;		On entry : 0/0
  8008 ;;		On exit  : 0/0
  8009 ;;		Unchanged: 0/0
  8010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8015 ;;Total ram usage:        0 bytes
  8016 ;; Hardware stack levels used:    1
  8017 ;; This function calls:
  8018 ;;		Nothing
  8019 ;; This function is called by:
  8020 ;;		_I2C_DO_TX_EMPTY
  8021 ;; This function uses a non-reentrant model
  8022 ;;
  8023                           
  8024                           
  8025                           ;psect for function _I2C_MasterSetIrq
  8026  05D6                     _I2C_MasterSetIrq:	
  8027                           
  8028                           ;i2c_master.c: 647: PIR1bits.SSP1IF = 1;
  8029                           
  8030                           ;incstack = 0
  8031                           ; Regs used in _I2C_MasterSetIrq: []
  8032  05D6  0020               	movlb	0	; select bank0
  8033  05D7  1590               	bsf	16,3	;volatile
  8034  05D8  0008               	return
  8035  05D9                     __end_of_I2C_MasterSetIrq:	
  8036                           
  8037                           	psect	text48
  8038  0587                     __ptext48:	
  8039 ;; *************** function _I2C_MasterIsNack *****************
  8040 ;; Defined at:
  8041 ;;		line 598 in file "mcc_generated_files/i2c_master.c"
  8042 ;; Parameters:    Size  Location     Type
  8043 ;;		None
  8044 ;; Auto vars:     Size  Location     Type
  8045 ;;		None
  8046 ;; Return value:  Size  Location     Type
  8047 ;;                  1    wreg      unsigned char 
  8048 ;; Registers used:
  8049 ;;		wreg, status,2, status,0
  8050 ;; Tracked objects:
  8051 ;;		On entry : 0/0
  8052 ;;		On exit  : 0/0
  8053 ;;		Unchanged: 0/0
  8054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8059 ;;Total ram usage:        0 bytes
  8060 ;; Hardware stack levels used:    1
  8061 ;; This function calls:
  8062 ;;		Nothing
  8063 ;; This function is called by:
  8064 ;;		_I2C_MasterFsm
  8065 ;;		_I2C_DO_TX
  8066 ;; This function uses a non-reentrant model
  8067 ;;
  8068                           
  8069                           
  8070                           ;psect for function _I2C_MasterIsNack
  8071  0587                     _I2C_MasterIsNack:	
  8072                           
  8073                           ;i2c_master.c: 600: return SSP1CON2bits.ACKSTAT;
  8074                           
  8075                           ;incstack = 0
  8076                           ; Regs used in _I2C_MasterIsNack: [wreg+status,2+status,0]
  8077  0587  0024               	movlb	4	; select bank4
  8078  0588  0E16               	swapf	22,w	;volatile
  8079  0589  0C89               	rrf	9,f
  8080  058A  0C89               	rrf	9,f
  8081  058B  3901               	andlw	1
  8082  058C  0008               	return
  8083  058D                     __end_of_I2C_MasterIsNack:	
  8084                           
  8085                           	psect	text49
  8086  0597                     __ptext49:	
  8087 ;; *************** function _I2C_MasterSendTxData *****************
  8088 ;; Defined at:
  8089 ;;		line 568 in file "mcc_generated_files/i2c_master.c"
  8090 ;; Parameters:    Size  Location     Type
  8091 ;;  data            1    wreg     unsigned char 
  8092 ;; Auto vars:     Size  Location     Type
  8093 ;;  data            1    0[COMMON] unsigned char 
  8094 ;; Return value:  Size  Location     Type
  8095 ;;                  1    wreg      void 
  8096 ;; Registers used:
  8097 ;;		wreg
  8098 ;; Tracked objects:
  8099 ;;		On entry : 0/0
  8100 ;;		On exit  : 0/0
  8101 ;;		Unchanged: 0/0
  8102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8104 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8106 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8107 ;;Total ram usage:        1 bytes
  8108 ;; Hardware stack levels used:    1
  8109 ;; This function calls:
  8110 ;;		Nothing
  8111 ;; This function is called by:
  8112 ;;		_I2C_DO_SEND_ADR_READ
  8113 ;;		_I2C_DO_SEND_ADR_WRITE
  8114 ;;		_I2C_DO_TX
  8115 ;; This function uses a non-reentrant model
  8116 ;;
  8117                           
  8118                           
  8119                           ;psect for function _I2C_MasterSendTxData
  8120  0597                     _I2C_MasterSendTxData:	
  8121                           
  8122                           ;incstack = 0
  8123                           ; Regs used in _I2C_MasterSendTxData: [wreg]
  8124                           ;I2C_MasterSendTxData@data stored from wreg
  8125  0597  00F0               	movwf	I2C_MasterSendTxData@data
  8126                           
  8127                           ;i2c_master.c: 570: SSP1BUF = data;
  8128  0598  0870               	movf	I2C_MasterSendTxData@data,w
  8129  0599  0024               	movlb	4	; select bank4
  8130  059A  0091               	movwf	17	;volatile
  8131  059B  0008               	return
  8132  059C                     __end_of_I2C_MasterSendTxData:	
  8133                           
  8134                           	psect	text50
  8135  05C4                     __ptext50:	
  8136 ;; *************** function _I2C_MasterSendAck *****************
  8137 ;; Defined at:
  8138 ;;		line 603 in file "mcc_generated_files/i2c_master.c"
  8139 ;; Parameters:    Size  Location     Type
  8140 ;;		None
  8141 ;; Auto vars:     Size  Location     Type
  8142 ;;		None
  8143 ;; Return value:  Size  Location     Type
  8144 ;;                  1    wreg      void 
  8145 ;; Registers used:
  8146 ;;		None
  8147 ;; Tracked objects:
  8148 ;;		On entry : 0/0
  8149 ;;		On exit  : 0/0
  8150 ;;		Unchanged: 0/0
  8151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8155 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8156 ;;Total ram usage:        0 bytes
  8157 ;; Hardware stack levels used:    1
  8158 ;; This function calls:
  8159 ;;		Nothing
  8160 ;; This function is called by:
  8161 ;;		_I2C_DO_RX
  8162 ;;		_I2C_DO_RX_ACK
  8163 ;; This function uses a non-reentrant model
  8164 ;;
  8165                           
  8166                           
  8167                           ;psect for function _I2C_MasterSendAck
  8168  05C4                     _I2C_MasterSendAck:	
  8169                           
  8170                           ;i2c_master.c: 605: SSP1CON2bits.ACKDT = 0;
  8171                           
  8172                           ;incstack = 0
  8173                           ; Regs used in _I2C_MasterSendAck: []
  8174  05C4  0024               	movlb	4	; select bank4
  8175  05C5  1296               	bcf	22,5	;volatile
  8176                           
  8177                           ;i2c_master.c: 606: SSP1CON2bits.ACKEN = 1;
  8178  05C6  1616               	bsf	22,4	;volatile
  8179  05C7  0008               	return
  8180  05C8                     __end_of_I2C_MasterSendAck:	
  8181                           
  8182                           	psect	text51
  8183  05D9                     __ptext51:	
  8184 ;; *************** function _I2C_MasterGetRxData *****************
  8185 ;; Defined at:
  8186 ;;		line 563 in file "mcc_generated_files/i2c_master.c"
  8187 ;; Parameters:    Size  Location     Type
  8188 ;;		None
  8189 ;; Auto vars:     Size  Location     Type
  8190 ;;		None
  8191 ;; Return value:  Size  Location     Type
  8192 ;;                  1    wreg      unsigned char 
  8193 ;; Registers used:
  8194 ;;		wreg
  8195 ;; Tracked objects:
  8196 ;;		On entry : 0/0
  8197 ;;		On exit  : 0/0
  8198 ;;		Unchanged: 0/0
  8199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8203 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8204 ;;Total ram usage:        0 bytes
  8205 ;; Hardware stack levels used:    1
  8206 ;; This function calls:
  8207 ;;		Nothing
  8208 ;; This function is called by:
  8209 ;;		_I2C_DO_RX
  8210 ;; This function uses a non-reentrant model
  8211 ;;
  8212                           
  8213                           
  8214                           ;psect for function _I2C_MasterGetRxData
  8215  05D9                     _I2C_MasterGetRxData:	
  8216                           
  8217                           ;i2c_master.c: 565: return SSP1BUF;
  8218                           
  8219                           ;incstack = 0
  8220                           ; Regs used in _I2C_MasterGetRxData: [wreg]
  8221  05D9  0024               	movlb	4	; select bank4
  8222  05DA  0811               	movf	17,w	;volatile
  8223  05DB  0008               	return
  8224  05DC                     __end_of_I2C_MasterGetRxData:	
  8225                           
  8226                           	psect	text52
  8227  05C8                     __ptext52:	
  8228 ;; *************** function _I2C_MasterSendNack *****************
  8229 ;; Defined at:
  8230 ;;		line 609 in file "mcc_generated_files/i2c_master.c"
  8231 ;; Parameters:    Size  Location     Type
  8232 ;;		None
  8233 ;; Auto vars:     Size  Location     Type
  8234 ;;		None
  8235 ;; Return value:  Size  Location     Type
  8236 ;;                  1    wreg      void 
  8237 ;; Registers used:
  8238 ;;		None
  8239 ;; Tracked objects:
  8240 ;;		On entry : 0/0
  8241 ;;		On exit  : 0/0
  8242 ;;		Unchanged: 0/0
  8243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8248 ;;Total ram usage:        0 bytes
  8249 ;; Hardware stack levels used:    1
  8250 ;; This function calls:
  8251 ;;		Nothing
  8252 ;; This function is called by:
  8253 ;;		_I2C_DO_RX_NACK_STOP
  8254 ;;		_I2C_DO_RX_NACK_RESTART
  8255 ;; This function uses a non-reentrant model
  8256 ;;
  8257                           
  8258                           
  8259                           ;psect for function _I2C_MasterSendNack
  8260  05C8                     _I2C_MasterSendNack:	
  8261                           
  8262                           ;i2c_master.c: 611: SSP1CON2bits.ACKDT = 1;
  8263                           
  8264                           ;incstack = 0
  8265                           ; Regs used in _I2C_MasterSendNack: []
  8266  05C8  0024               	movlb	4	; select bank4
  8267  05C9  1696               	bsf	22,5	;volatile
  8268                           
  8269                           ;i2c_master.c: 612: SSP1CON2bits.ACKEN = 1;
  8270  05CA  1616               	bsf	22,4	;volatile
  8271  05CB  0008               	return
  8272  05CC                     __end_of_I2C_MasterSendNack:	
  8273                           
  8274                           	psect	text53
  8275  05DC                     __ptext53:	
  8276 ;; *************** function _I2C_MasterStartRx *****************
  8277 ;; Defined at:
  8278 ;;		line 583 in file "mcc_generated_files/i2c_master.c"
  8279 ;; Parameters:    Size  Location     Type
  8280 ;;		None
  8281 ;; Auto vars:     Size  Location     Type
  8282 ;;		None
  8283 ;; Return value:  Size  Location     Type
  8284 ;;                  1    wreg      void 
  8285 ;; Registers used:
  8286 ;;		None
  8287 ;; Tracked objects:
  8288 ;;		On entry : 0/0
  8289 ;;		On exit  : 0/0
  8290 ;;		Unchanged: 0/0
  8291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8296 ;;Total ram usage:        0 bytes
  8297 ;; Hardware stack levels used:    1
  8298 ;; This function calls:
  8299 ;;		Nothing
  8300 ;; This function is called by:
  8301 ;;		_I2C_DO_RCEN
  8302 ;; This function uses a non-reentrant model
  8303 ;;
  8304                           
  8305                           
  8306                           ;psect for function _I2C_MasterStartRx
  8307  05DC                     _I2C_MasterStartRx:	
  8308                           
  8309                           ;i2c_master.c: 585: SSP1CON2bits.RCEN = 1;
  8310                           
  8311                           ;incstack = 0
  8312                           ; Regs used in _I2C_MasterStartRx: []
  8313  05DC  0024               	movlb	4	; select bank4
  8314  05DD  1596               	bsf	22,3	;volatile
  8315  05DE  0008               	return
  8316  05DF                     __end_of_I2C_MasterStartRx:	
  8317                           
  8318                           	psect	text54
  8319  05F4                     __ptext54:	
  8320 ;; *************** function _I2C_CallbackReturnReset *****************
  8321 ;; Defined at:
  8322 ;;		line 525 in file "mcc_generated_files/i2c_master.c"
  8323 ;; Parameters:    Size  Location     Type
  8324 ;;  funPtr          1    9[COMMON] PTR void 
  8325 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8326 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8327 ;; Auto vars:     Size  Location     Type
  8328 ;;		None
  8329 ;; Return value:  Size  Location     Type
  8330 ;;                  1    wreg      enum E97
  8331 ;; Registers used:
  8332 ;;		wreg
  8333 ;; Tracked objects:
  8334 ;;		On entry : 0/0
  8335 ;;		On exit  : 0/0
  8336 ;;		Unchanged: 0/0
  8337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8338 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8341 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8342 ;;Total ram usage:        1 bytes
  8343 ;; Hardware stack levels used:    1
  8344 ;; This function calls:
  8345 ;;		Nothing
  8346 ;; This function is called by:
  8347 ;;		_I2C_Open
  8348 ;;		_I2C_DO_TX
  8349 ;;		_I2C_DO_RX
  8350 ;;		_I2C_DO_TX_EMPTY
  8351 ;;		_I2C_DO_ADDRESS_NACK
  8352 ;;		_I2C_DO_RX_EMPTY
  8353 ;; This function uses a non-reentrant model
  8354 ;;
  8355                           
  8356                           
  8357                           ;psect for function _I2C_CallbackReturnReset
  8358  05F4                     _I2C_CallbackReturnReset:	
  8359                           
  8360                           ;i2c_master.c: 527: return I2C_RESET_LINK;
  8361                           
  8362                           ;incstack = 0
  8363                           ; Regs used in _I2C_CallbackReturnReset: [wreg]
  8364  05F4  3005               	movlw	5
  8365  05F5  0008               	return
  8366  05F6                     __end_of_I2C_CallbackReturnReset:	
  8367                           
  8368                           	psect	text55
  8369  05F6                     __ptext55:	
  8370 ;; *************** function _I2C_CallbackReturnStop *****************
  8371 ;; Defined at:
  8372 ;;		line 520 in file "mcc_generated_files/i2c_master.c"
  8373 ;; Parameters:    Size  Location     Type
  8374 ;;  funPtr          1    9[COMMON] PTR void 
  8375 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8376 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8377 ;; Auto vars:     Size  Location     Type
  8378 ;;		None
  8379 ;; Return value:  Size  Location     Type
  8380 ;;                  1    wreg      enum E97
  8381 ;; Registers used:
  8382 ;;		wreg
  8383 ;; Tracked objects:
  8384 ;;		On entry : 0/0
  8385 ;;		On exit  : 0/0
  8386 ;;		Unchanged: 0/0
  8387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8388 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8391 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8392 ;;Total ram usage:        1 bytes
  8393 ;; Hardware stack levels used:    1
  8394 ;; This function calls:
  8395 ;;		Nothing
  8396 ;; This function is called by:
  8397 ;;		_I2C_Open
  8398 ;;		_I2C_SetCallback
  8399 ;;		_I2C_DO_TX
  8400 ;;		_I2C_DO_RX
  8401 ;;		_I2C_DO_TX_EMPTY
  8402 ;;		_I2C_DO_ADDRESS_NACK
  8403 ;;		_I2C_DO_RX_EMPTY
  8404 ;; This function uses a non-reentrant model
  8405 ;;
  8406                           
  8407                           
  8408                           ;psect for function _I2C_CallbackReturnStop
  8409  05F6                     _I2C_CallbackReturnStop:	
  8410                           
  8411                           ;i2c_master.c: 522: return I2C_STOP;
  8412                           
  8413                           ;incstack = 0
  8414                           ; Regs used in _I2C_CallbackReturnStop: [wreg]
  8415  05F6  3001               	movlw	1
  8416  05F7  0008               	return
  8417  05F8                     __end_of_I2C_CallbackReturnStop:	
  8418                           
  8419                           	psect	text56
  8420  0426                     __ptext56:	
  8421 ;; *************** function _rdBlkRegCompleteHandler *****************
  8422 ;; Defined at:
  8423 ;;		line 170 in file "mcc_generated_files/examples/i2c_master_example.c"
  8424 ;; Parameters:    Size  Location     Type
  8425 ;;  ptr             1    9[COMMON] PTR void 
  8426 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8427 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8428 ;; Auto vars:     Size  Location     Type
  8429 ;;		None
  8430 ;; Return value:  Size  Location     Type
  8431 ;;                  1    wreg      enum E97
  8432 ;; Registers used:
  8433 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8434 ;; Tracked objects:
  8435 ;;		On entry : 0/0
  8436 ;;		On exit  : 0/0
  8437 ;;		Unchanged: 0/0
  8438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8439 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8442 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8443 ;;Total ram usage:        1 bytes
  8444 ;; Hardware stack levels used:    1
  8445 ;; Hardware stack levels required when called:    2
  8446 ;; This function calls:
  8447 ;;		_I2C_SetBuffer
  8448 ;;		_I2C_SetDataCompleteCallback
  8449 ;; This function is called by:
  8450 ;;		_I2C_ReadDataBlock
  8451 ;;		_I2C_DO_TX
  8452 ;;		_I2C_DO_RX
  8453 ;;		_I2C_DO_TX_EMPTY
  8454 ;;		_I2C_DO_ADDRESS_NACK
  8455 ;;		_I2C_DO_RX_EMPTY
  8456 ;; This function uses a non-reentrant model
  8457 ;;
  8458                           
  8459                           
  8460                           ;psect for function _rdBlkRegCompleteHandler
  8461  0426                     _rdBlkRegCompleteHandler:	
  8462                           
  8463                           ;i2c_master_example.c: 172: I2C_SetBuffer(((i2c_buffer_t *)ptr)->data,((i2c_buffer_t*)pt
      +                          r)->len);
  8464                           
  8465                           ;incstack = 0
  8466                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  8467  0426  0879               	movf	rdBlkRegCompleteHandler@ptr,w
  8468  0427  0086               	movwf	6
  8469  0428  0187               	clrf	7
  8470  0429  3F40               	moviw [0]fsr1
  8471  042A  00F0               	movwf	I2C_SetBuffer@bufferSize
  8472  042B  3F41               	moviw [1]fsr1
  8473  042C  00F1               	movwf	I2C_SetBuffer@bufferSize+1
  8474  042D  0879               	movf	rdBlkRegCompleteHandler@ptr,w
  8475  042E  3E02               	addlw	2
  8476  042F  0086               	movwf	6
  8477  0430  0187               	clrf	7
  8478  0431  0801               	movf	1,w
  8479  0432  3184  24D0  3184   	fcall	_I2C_SetBuffer
  8480                           
  8481                           ;i2c_master_example.c: 173: I2C_SetDataCompleteCallback((0),(0));
  8482  0435  3000               	movlw	0
  8483  0436  00F5               	movwf	I2C_SetDataCompleteCallback@cb
  8484  0437  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
  8485  0438  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
  8486  0439  3185  2502         	fcall	_I2C_SetDataCompleteCallback
  8487                           
  8488                           ;i2c_master_example.c: 174: return I2C_RESTART_READ;
  8489  043B  3002               	movlw	2
  8490  043C  0008               	return
  8491  043D                     __end_of_rdBlkRegCompleteHandler:	
  8492                           
  8493                           	psect	text57
  8494  0490                     __ptext57:	
  8495 ;; *************** function _wr1RegCompleteHandler *****************
  8496 ;; Defined at:
  8497 ;;		line 156 in file "mcc_generated_files/examples/i2c_master_example.c"
  8498 ;; Parameters:    Size  Location     Type
  8499 ;;  ptr             1    9[COMMON] PTR void 
  8500 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8501 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8502 ;; Auto vars:     Size  Location     Type
  8503 ;;		None
  8504 ;; Return value:  Size  Location     Type
  8505 ;;                  1    wreg      enum E97
  8506 ;; Registers used:
  8507 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8508 ;; Tracked objects:
  8509 ;;		On entry : 0/0
  8510 ;;		On exit  : 0/0
  8511 ;;		Unchanged: 0/0
  8512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8513 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8516 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8517 ;;Total ram usage:        1 bytes
  8518 ;; Hardware stack levels used:    1
  8519 ;; Hardware stack levels required when called:    2
  8520 ;; This function calls:
  8521 ;;		_I2C_SetBuffer
  8522 ;;		_I2C_SetDataCompleteCallback
  8523 ;; This function is called by:
  8524 ;;		_I2C_Write1ByteRegister
  8525 ;;		_I2C_DO_TX
  8526 ;;		_I2C_DO_RX
  8527 ;;		_I2C_DO_TX_EMPTY
  8528 ;;		_I2C_DO_ADDRESS_NACK
  8529 ;;		_I2C_DO_RX_EMPTY
  8530 ;; This function uses a non-reentrant model
  8531 ;;
  8532                           
  8533                           
  8534                           ;psect for function _wr1RegCompleteHandler
  8535  0490                     _wr1RegCompleteHandler:	
  8536                           
  8537                           ;i2c_master_example.c: 158: I2C_SetBuffer(ptr,1);
  8538                           
  8539                           ;incstack = 0
  8540                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8541  0490  3001               	movlw	1
  8542  0491  00F0               	movwf	I2C_SetBuffer@bufferSize
  8543  0492  3000               	movlw	0
  8544  0493  00F1               	movwf	I2C_SetBuffer@bufferSize+1
  8545  0494  0879               	movf	wr1RegCompleteHandler@ptr,w
  8546  0495  3184  24D0  3184   	fcall	_I2C_SetBuffer
  8547                           
  8548                           ;i2c_master_example.c: 159: I2C_SetDataCompleteCallback((0),(0));
  8549  0498  3000               	movlw	0
  8550  0499  00F5               	movwf	I2C_SetDataCompleteCallback@cb
  8551  049A  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
  8552  049B  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
  8553  049C  3185  2502         	fcall	_I2C_SetDataCompleteCallback
  8554                           
  8555                           ;i2c_master_example.c: 160: return I2C_CONTINUE;
  8556  049E  3004               	movlw	4
  8557  049F  0008               	return
  8558  04A0                     __end_of_wr1RegCompleteHandler:	
  8559                           
  8560                           	psect	text58
  8561  04A0                     __ptext58:	
  8562 ;; *************** function _rd2RegCompleteHandler *****************
  8563 ;; Defined at:
  8564 ;;		line 149 in file "mcc_generated_files/examples/i2c_master_example.c"
  8565 ;; Parameters:    Size  Location     Type
  8566 ;;  ptr             1    9[COMMON] PTR void 
  8567 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8568 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8569 ;; Auto vars:     Size  Location     Type
  8570 ;;		None
  8571 ;; Return value:  Size  Location     Type
  8572 ;;                  1    wreg      enum E97
  8573 ;; Registers used:
  8574 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8575 ;; Tracked objects:
  8576 ;;		On entry : 0/0
  8577 ;;		On exit  : 0/0
  8578 ;;		Unchanged: 0/0
  8579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8580 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8583 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8584 ;;Total ram usage:        1 bytes
  8585 ;; Hardware stack levels used:    1
  8586 ;; Hardware stack levels required when called:    2
  8587 ;; This function calls:
  8588 ;;		_I2C_SetBuffer
  8589 ;;		_I2C_SetDataCompleteCallback
  8590 ;; This function is called by:
  8591 ;;		_I2C_Read2ByteRegister
  8592 ;;		_I2C_DO_TX
  8593 ;;		_I2C_DO_RX
  8594 ;;		_I2C_DO_TX_EMPTY
  8595 ;;		_I2C_DO_ADDRESS_NACK
  8596 ;;		_I2C_DO_RX_EMPTY
  8597 ;; This function uses a non-reentrant model
  8598 ;;
  8599                           
  8600                           
  8601                           ;psect for function _rd2RegCompleteHandler
  8602  04A0                     _rd2RegCompleteHandler:	
  8603                           
  8604                           ;i2c_master_example.c: 151: I2C_SetBuffer(ptr,2);
  8605                           
  8606                           ;incstack = 0
  8607                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8608  04A0  3002               	movlw	2
  8609  04A1  00F0               	movwf	I2C_SetBuffer@bufferSize
  8610  04A2  3000               	movlw	0
  8611  04A3  00F1               	movwf	I2C_SetBuffer@bufferSize+1
  8612  04A4  0879               	movf	rd2RegCompleteHandler@ptr,w
  8613  04A5  3184  24D0  3184   	fcall	_I2C_SetBuffer
  8614                           
  8615                           ;i2c_master_example.c: 152: I2C_SetDataCompleteCallback((0),(0));
  8616  04A8  3000               	movlw	0
  8617  04A9  00F5               	movwf	I2C_SetDataCompleteCallback@cb
  8618  04AA  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
  8619  04AB  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
  8620  04AC  3185  2502         	fcall	_I2C_SetDataCompleteCallback
  8621                           
  8622                           ;i2c_master_example.c: 153: return I2C_RESTART_READ;
  8623  04AE  3002               	movlw	2
  8624  04AF  0008               	return
  8625  04B0                     __end_of_rd2RegCompleteHandler:	
  8626                           
  8627                           	psect	text59
  8628  04B0                     __ptext59:	
  8629 ;; *************** function _rd1RegCompleteHandler *****************
  8630 ;; Defined at:
  8631 ;;		line 142 in file "mcc_generated_files/examples/i2c_master_example.c"
  8632 ;; Parameters:    Size  Location     Type
  8633 ;;  ptr             1    9[COMMON] PTR void 
  8634 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8635 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8636 ;; Auto vars:     Size  Location     Type
  8637 ;;		None
  8638 ;; Return value:  Size  Location     Type
  8639 ;;                  1    wreg      enum E97
  8640 ;; Registers used:
  8641 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8642 ;; Tracked objects:
  8643 ;;		On entry : 0/0
  8644 ;;		On exit  : 0/0
  8645 ;;		Unchanged: 0/0
  8646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8647 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8650 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8651 ;;Total ram usage:        1 bytes
  8652 ;; Hardware stack levels used:    1
  8653 ;; Hardware stack levels required when called:    2
  8654 ;; This function calls:
  8655 ;;		_I2C_SetBuffer
  8656 ;;		_I2C_SetDataCompleteCallback
  8657 ;; This function is called by:
  8658 ;;		_I2C_Read1ByteRegister
  8659 ;;		_I2C_DO_TX
  8660 ;;		_I2C_DO_RX
  8661 ;;		_I2C_DO_TX_EMPTY
  8662 ;;		_I2C_DO_ADDRESS_NACK
  8663 ;;		_I2C_DO_RX_EMPTY
  8664 ;; This function uses a non-reentrant model
  8665 ;;
  8666                           
  8667                           
  8668                           ;psect for function _rd1RegCompleteHandler
  8669  04B0                     _rd1RegCompleteHandler:	
  8670                           
  8671                           ;i2c_master_example.c: 144: I2C_SetBuffer(ptr,1);
  8672                           
  8673                           ;incstack = 0
  8674                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8675  04B0  3001               	movlw	1
  8676  04B1  00F0               	movwf	I2C_SetBuffer@bufferSize
  8677  04B2  3000               	movlw	0
  8678  04B3  00F1               	movwf	I2C_SetBuffer@bufferSize+1
  8679  04B4  0879               	movf	rd1RegCompleteHandler@ptr,w
  8680  04B5  3184  24D0  3184   	fcall	_I2C_SetBuffer
  8681                           
  8682                           ;i2c_master_example.c: 145: I2C_SetDataCompleteCallback((0),(0));
  8683  04B8  3000               	movlw	0
  8684  04B9  00F5               	movwf	I2C_SetDataCompleteCallback@cb
  8685  04BA  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
  8686  04BB  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
  8687  04BC  3185  2502         	fcall	_I2C_SetDataCompleteCallback
  8688                           
  8689                           ;i2c_master_example.c: 146: return I2C_RESTART_READ;
  8690  04BE  3002               	movlw	2
  8691  04BF  0008               	return
  8692  04C0                     __end_of_rd1RegCompleteHandler:	
  8693                           
  8694                           	psect	text60
  8695  04C0                     __ptext60:	
  8696 ;; *************** function _wr2RegCompleteHandler *****************
  8697 ;; Defined at:
  8698 ;;		line 163 in file "mcc_generated_files/examples/i2c_master_example.c"
  8699 ;; Parameters:    Size  Location     Type
  8700 ;;  ptr             1    9[COMMON] PTR void 
  8701 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8702 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8703 ;; Auto vars:     Size  Location     Type
  8704 ;;		None
  8705 ;; Return value:  Size  Location     Type
  8706 ;;                  1    wreg      enum E97
  8707 ;; Registers used:
  8708 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8709 ;; Tracked objects:
  8710 ;;		On entry : 0/0
  8711 ;;		On exit  : 0/0
  8712 ;;		Unchanged: 0/0
  8713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8714 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8717 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8718 ;;Total ram usage:        1 bytes
  8719 ;; Hardware stack levels used:    1
  8720 ;; Hardware stack levels required when called:    2
  8721 ;; This function calls:
  8722 ;;		_I2C_SetBuffer
  8723 ;;		_I2C_SetDataCompleteCallback
  8724 ;; This function is called by:
  8725 ;;		_I2C_Write2ByteRegister
  8726 ;;		_I2C_DO_TX
  8727 ;;		_I2C_DO_RX
  8728 ;;		_I2C_DO_TX_EMPTY
  8729 ;;		_I2C_DO_ADDRESS_NACK
  8730 ;;		_I2C_DO_RX_EMPTY
  8731 ;; This function uses a non-reentrant model
  8732 ;;
  8733                           
  8734                           
  8735                           ;psect for function _wr2RegCompleteHandler
  8736  04C0                     _wr2RegCompleteHandler:	
  8737                           
  8738                           ;i2c_master_example.c: 165: I2C_SetBuffer(ptr,2);
  8739                           
  8740                           ;incstack = 0
  8741                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8742  04C0  3002               	movlw	2
  8743  04C1  00F0               	movwf	I2C_SetBuffer@bufferSize
  8744  04C2  3000               	movlw	0
  8745  04C3  00F1               	movwf	I2C_SetBuffer@bufferSize+1
  8746  04C4  0879               	movf	wr2RegCompleteHandler@ptr,w
  8747  04C5  3184  24D0  3184   	fcall	_I2C_SetBuffer
  8748                           
  8749                           ;i2c_master_example.c: 166: I2C_SetDataCompleteCallback((0),(0));
  8750  04C8  3000               	movlw	0
  8751  04C9  00F5               	movwf	I2C_SetDataCompleteCallback@cb
  8752  04CA  00F6               	movwf	I2C_SetDataCompleteCallback@cb+1
  8753  04CB  01F7               	clrf	I2C_SetDataCompleteCallback@ptr
  8754  04CC  3185  2502         	fcall	_I2C_SetDataCompleteCallback
  8755                           
  8756                           ;i2c_master_example.c: 167: return I2C_CONTINUE;
  8757  04CE  3004               	movlw	4
  8758  04CF  0008               	return
  8759  04D0                     __end_of_wr2RegCompleteHandler:	
  8760                           
  8761                           	psect	text61
  8762  0502                     __ptext61:	
  8763 ;; *************** function _I2C_SetDataCompleteCallback *****************
  8764 ;; Defined at:
  8765 ;;		line 273 in file "mcc_generated_files/i2c_master.c"
  8766 ;; Parameters:    Size  Location     Type
  8767 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
  8768 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), 
  8769 ;;		 -> Absolute function(1), rd1RegCompleteHandler(1), 
  8770 ;;  ptr             1    7[COMMON] PTR void 
  8771 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8772 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8773 ;; Auto vars:     Size  Location     Type
  8774 ;;		None
  8775 ;; Return value:  Size  Location     Type
  8776 ;;                  1    wreg      void 
  8777 ;; Registers used:
  8778 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8779 ;; Tracked objects:
  8780 ;;		On entry : 0/0
  8781 ;;		On exit  : 0/0
  8782 ;;		Unchanged: 0/0
  8783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8784 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8786 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8787 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8788 ;;Total ram usage:        4 bytes
  8789 ;; Hardware stack levels used:    1
  8790 ;; Hardware stack levels required when called:    1
  8791 ;; This function calls:
  8792 ;;		_I2C_SetCallback
  8793 ;; This function is called by:
  8794 ;;		_I2C_Write1ByteRegister
  8795 ;;		_rd1RegCompleteHandler
  8796 ;;		_rd2RegCompleteHandler
  8797 ;;		_wr1RegCompleteHandler
  8798 ;;		_wr2RegCompleteHandler
  8799 ;;		_rdBlkRegCompleteHandler
  8800 ;;		_I2C_Read1ByteRegister
  8801 ;;		_I2C_Read2ByteRegister
  8802 ;;		_I2C_Write2ByteRegister
  8803 ;;		_I2C_ReadDataBlock
  8804 ;; This function uses a non-reentrant model
  8805 ;;
  8806                           
  8807                           
  8808                           ;psect for function _I2C_SetDataCompleteCallback
  8809  0502                     _I2C_SetDataCompleteCallback:	
  8810                           
  8811                           ;i2c_master.c: 275: I2C_SetCallback(I2C_DATA_COMPLETE, cb, ptr);
  8812                           
  8813                           ;incstack = 0
  8814                           ; Regs used in _I2C_SetDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  8815  0502  0876               	movf	I2C_SetDataCompleteCallback@cb+1,w
  8816  0503  00F1               	movwf	I2C_SetCallback@cb+1
  8817  0504  0875               	movf	I2C_SetDataCompleteCallback@cb,w
  8818  0505  00F0               	movwf	I2C_SetCallback@cb
  8819  0506  0877               	movf	I2C_SetDataCompleteCallback@ptr,w
  8820  0507  00F8               	movwf	??_I2C_SetDataCompleteCallback
  8821  0508  0878               	movf	??_I2C_SetDataCompleteCallback,w
  8822  0509  00F2               	movwf	I2C_SetCallback@ptr
  8823  050A  3000               	movlw	0
  8824  050B  3183  238C         	fcall	_I2C_SetCallback
  8825  050D  0008               	return
  8826  050E                     __end_of_I2C_SetDataCompleteCallback:	
  8827                           
  8828                           	psect	text62
  8829  038C                     __ptext62:	
  8830 ;; *************** function _I2C_SetCallback *****************
  8831 ;; Defined at:
  8832 ;;		line 298 in file "mcc_generated_files/i2c_master.c"
  8833 ;; Parameters:    Size  Location     Type
  8834 ;;  idx             1    wreg     enum E12121
  8835 ;;  cb              2    0[COMMON] PTR FTN(PTR void ,)enum 
  8836 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), 
  8837 ;;		 -> Absolute function(1), rd1RegCompleteHandler(1), 
  8838 ;;  ptr             1    2[COMMON] PTR void 
  8839 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8840 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8841 ;; Auto vars:     Size  Location     Type
  8842 ;;  idx             1    4[COMMON] enum E12121
  8843 ;; Return value:  Size  Location     Type
  8844 ;;                  1    wreg      void 
  8845 ;; Registers used:
  8846 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8847 ;; Tracked objects:
  8848 ;;		On entry : 0/0
  8849 ;;		On exit  : 0/0
  8850 ;;		Unchanged: 0/0
  8851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8852 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8853 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8854 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8855 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8856 ;;Total ram usage:        5 bytes
  8857 ;; Hardware stack levels used:    1
  8858 ;; This function calls:
  8859 ;;		Nothing
  8860 ;; This function is called by:
  8861 ;;		_I2C_SetDataCompleteCallback
  8862 ;;		_I2C_SetAddressNackCallback
  8863 ;;		_I2C_SetWriteCollisionCallback
  8864 ;;		_I2C_SetDataNackCallback
  8865 ;;		_I2C_SetTimeoutCallback
  8866 ;; This function uses a non-reentrant model
  8867 ;;
  8868                           
  8869                           
  8870                           ;psect for function _I2C_SetCallback
  8871  038C                     _I2C_SetCallback:	
  8872                           
  8873                           ;incstack = 0
  8874                           ; Regs used in _I2C_SetCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
  8875                           ;I2C_SetCallback@idx stored from wreg
  8876  038C  00F4               	movwf	I2C_SetCallback@idx
  8877                           
  8878                           ;i2c_master.c: 300: if(cb)
  8879  038D  0870               	movf	I2C_SetCallback@cb,w
  8880  038E  0471               	iorwf	I2C_SetCallback@cb+1,w
  8881  038F  1903               	btfsc	3,2
  8882  0390  2BA2               	goto	i1l2155
  8883                           
  8884                           ;i2c_master.c: 301: {
  8885                           ;i2c_master.c: 302: I2C_Status.callbackTable[idx] = cb;
  8886  0391  3574               	lslf	I2C_SetCallback@idx,w
  8887  0392  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
  8888  0393  0086               	movwf	6
  8889  0394  0187               	clrf	7
  8890  0395  0870               	movf	I2C_SetCallback@cb,w
  8891  0396  3FC0               	movwi [0]fsr1
  8892  0397  0871               	movf	I2C_SetCallback@cb+1,w
  8893  0398  3FC1               	movwi [1]fsr1
  8894                           
  8895                           ;i2c_master.c: 303: I2C_Status.callbackPayload[idx] = ptr;
  8896  0399  0872               	movf	I2C_SetCallback@ptr,w
  8897  039A  00F3               	movwf	??_I2C_SetCallback
  8898  039B  0874               	movf	I2C_SetCallback@idx,w
  8899  039C  3E2C               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
  8900  039D  0086               	movwf	6
  8901  039E  0187               	clrf	7
  8902  039F  0873               	movf	??_I2C_SetCallback,w
  8903  03A0  0081               	movwf	1
  8904                           
  8905                           ;i2c_master.c: 304: }
  8906  03A1  0008               	return
  8907  03A2                     i1l2155:	
  8908                           
  8909                           ;i2c_master.c: 305: else
  8910                           ;i2c_master.c: 306: {
  8911                           ;i2c_master.c: 307: I2C_Status.callbackTable[idx] = I2C_CallbackReturnStop;
  8912  03A2  3574               	lslf	I2C_SetCallback@idx,w
  8913  03A3  3E20               	addlw	(low (_I2C_Status| 0))& (0+255)
  8914  03A4  0086               	movwf	6
  8915  03A5  0187               	clrf	7
  8916  03A6  30F6               	movlw	low _I2C_CallbackReturnStop
  8917  03A7  3FC0               	movwi [0]fsr1
  8918  03A8  3005               	movlw	high _I2C_CallbackReturnStop
  8919  03A9  3FC1               	movwi [1]fsr1
  8920                           
  8921                           ;i2c_master.c: 308: I2C_Status.callbackPayload[idx] = (0);
  8922  03AA  0874               	movf	I2C_SetCallback@idx,w
  8923  03AB  3E2C               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
  8924  03AC  0086               	movwf	6
  8925  03AD  0187               	clrf	7
  8926  03AE  0181               	clrf	1
  8927  03AF  0008               	return
  8928  03B0                     __end_of_I2C_SetCallback:	
  8929                           
  8930                           	psect	text63
  8931  04D0                     __ptext63:	
  8932 ;; *************** function _I2C_SetBuffer *****************
  8933 ;; Defined at:
  8934 ;;		line 263 in file "mcc_generated_files/i2c_master.c"
  8935 ;; Parameters:    Size  Location     Type
  8936 ;;  buffer          1    wreg     PTR void 
  8937 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
  8938 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
  8939 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
  8940 ;;  bufferSize      2    0[COMMON] unsigned int 
  8941 ;; Auto vars:     Size  Location     Type
  8942 ;;  buffer          1    3[COMMON] PTR void 
  8943 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
  8944 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
  8945 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
  8946 ;; Return value:  Size  Location     Type
  8947 ;;                  1    wreg      void 
  8948 ;; Registers used:
  8949 ;;		wreg
  8950 ;; Tracked objects:
  8951 ;;		On entry : 0/0
  8952 ;;		On exit  : 0/0
  8953 ;;		Unchanged: 0/0
  8954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8955 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8956 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8957 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8958 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8959 ;;Total ram usage:        4 bytes
  8960 ;; Hardware stack levels used:    1
  8961 ;; This function calls:
  8962 ;;		Nothing
  8963 ;; This function is called by:
  8964 ;;		_I2C_Write1ByteRegister
  8965 ;;		_rd1RegCompleteHandler
  8966 ;;		_rd2RegCompleteHandler
  8967 ;;		_wr1RegCompleteHandler
  8968 ;;		_wr2RegCompleteHandler
  8969 ;;		_rdBlkRegCompleteHandler
  8970 ;;		_I2C_Read1ByteRegister
  8971 ;;		_I2C_Read2ByteRegister
  8972 ;;		_I2C_Write2ByteRegister
  8973 ;;		_I2C_WriteNBytes
  8974 ;;		_I2C_ReadNBytes
  8975 ;;		_I2C_ReadDataBlock
  8976 ;; This function uses a non-reentrant model
  8977 ;;
  8978                           
  8979                           
  8980                           ;psect for function _I2C_SetBuffer
  8981  04D0                     _I2C_SetBuffer:	
  8982                           
  8983                           ;incstack = 0
  8984                           ; Regs used in _I2C_SetBuffer: [wreg]
  8985                           ;I2C_SetBuffer@buffer stored from wreg
  8986  04D0  00F3               	movwf	I2C_SetBuffer@buffer
  8987                           
  8988                           ;i2c_master.c: 265: if(I2C_Status.bufferFree)
  8989  04D1  0020               	movlb	0	; select bank0
  8990  04D2  1DBC               	btfss	_I2C_Status+28,3
  8991  04D3  0008               	return
  8992                           
  8993                           ;i2c_master.c: 266: {
  8994                           ;i2c_master.c: 267: I2C_Status.data_ptr = buffer;
  8995  04D4  0873               	movf	I2C_SetBuffer@buffer,w
  8996  04D5  00F2               	movwf	??_I2C_SetBuffer
  8997  04D6  0872               	movf	??_I2C_SetBuffer,w
  8998  04D7  00B7               	movwf	low ((_I2C_Status| 0+23))
  8999                           
  9000                           ;i2c_master.c: 268: I2C_Status.data_length = bufferSize;
  9001  04D8  0871               	movf	I2C_SetBuffer@bufferSize+1,w
  9002  04D9  00B9               	movwf	_I2C_Status+25
  9003  04DA  0870               	movf	I2C_SetBuffer@bufferSize,w
  9004  04DB  00B8               	movwf	_I2C_Status+24
  9005                           
  9006                           ;i2c_master.c: 269: I2C_Status.bufferFree = 0;
  9007  04DC  11BC               	bcf	_I2C_Status+28,3
  9008  04DD  0008               	return
  9009  04DE                     __end_of_I2C_SetBuffer:	
  9010                           
  9011                           	psect	text64
  9012  05DF                     __ptext64:	
  9013 ;; *************** function _I2C_MasterStop *****************
  9014 ;; Defined at:
  9015 ;;		line 593 in file "mcc_generated_files/i2c_master.c"
  9016 ;; Parameters:    Size  Location     Type
  9017 ;;		None
  9018 ;; Auto vars:     Size  Location     Type
  9019 ;;		None
  9020 ;; Return value:  Size  Location     Type
  9021 ;;                  1    wreg      void 
  9022 ;; Registers used:
  9023 ;;		None
  9024 ;; Tracked objects:
  9025 ;;		On entry : 0/0
  9026 ;;		On exit  : 0/0
  9027 ;;		Unchanged: 0/0
  9028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9033 ;;Total ram usage:        0 bytes
  9034 ;; Hardware stack levels used:    1
  9035 ;; This function calls:
  9036 ;;		Nothing
  9037 ;; This function is called by:
  9038 ;;		_I2C_DO_SEND_STOP
  9039 ;; This function uses a non-reentrant model
  9040 ;;
  9041                           
  9042                           
  9043                           ;psect for function _I2C_MasterStop
  9044  05DF                     _I2C_MasterStop:	
  9045                           
  9046                           ;i2c_master.c: 595: SSP1CON2bits.PEN = 1;
  9047                           
  9048                           ;incstack = 0
  9049                           ; Regs used in _I2C_MasterStop: []
  9050  05DF  0024               	movlb	4	; select bank4
  9051  05E0  1516               	bsf	22,2	;volatile
  9052  05E1  0008               	return
  9053  05E2                     __end_of_I2C_MasterStop:	
  9054                           
  9055                           	psect	text65
  9056  05E2                     __ptext65:	
  9057 ;; *************** function _I2C_MasterEnableRestart *****************
  9058 ;; Defined at:
  9059 ;;		line 573 in file "mcc_generated_files/i2c_master.c"
  9060 ;; Parameters:    Size  Location     Type
  9061 ;;		None
  9062 ;; Auto vars:     Size  Location     Type
  9063 ;;		None
  9064 ;; Return value:  Size  Location     Type
  9065 ;;                  1    wreg      void 
  9066 ;; Registers used:
  9067 ;;		None
  9068 ;; Tracked objects:
  9069 ;;		On entry : 0/0
  9070 ;;		On exit  : 0/0
  9071 ;;		Unchanged: 0/0
  9072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9076 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9077 ;;Total ram usage:        0 bytes
  9078 ;; Hardware stack levels used:    1
  9079 ;; This function calls:
  9080 ;;		Nothing
  9081 ;; This function is called by:
  9082 ;;		_I2C_DO_SEND_RESTART_READ
  9083 ;;		_I2C_DO_SEND_RESTART_WRITE
  9084 ;;		_I2C_DO_SEND_RESTART
  9085 ;;		_I2C_DO_RX_EMPTY
  9086 ;; This function uses a non-reentrant model
  9087 ;;
  9088                           
  9089                           
  9090                           ;psect for function _I2C_MasterEnableRestart
  9091  05E2                     _I2C_MasterEnableRestart:	
  9092                           
  9093                           ;i2c_master.c: 575: SSP1CON2bits.RSEN = 1;
  9094                           
  9095                           ;incstack = 0
  9096                           ; Regs used in _I2C_MasterEnableRestart: []
  9097  05E2  0024               	movlb	4	; select bank4
  9098  05E3  1496               	bsf	22,1	;volatile
  9099  05E4  0008               	return
  9100  05E5                     __end_of_I2C_MasterEnableRestart:	
  9101                           
  9102                           	psect	text66
  9103  05E5                     __ptext66:	
  9104 ;; *************** function _I2C_MasterStart *****************
  9105 ;; Defined at:
  9106 ;;		line 588 in file "mcc_generated_files/i2c_master.c"
  9107 ;; Parameters:    Size  Location     Type
  9108 ;;		None
  9109 ;; Auto vars:     Size  Location     Type
  9110 ;;		None
  9111 ;; Return value:  Size  Location     Type
  9112 ;;                  1    wreg      void 
  9113 ;; Registers used:
  9114 ;;		None
  9115 ;; Tracked objects:
  9116 ;;		On entry : 0/0
  9117 ;;		On exit  : 0/0
  9118 ;;		Unchanged: 0/0
  9119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9124 ;;Total ram usage:        0 bytes
  9125 ;; Hardware stack levels used:    1
  9126 ;; This function calls:
  9127 ;;		Nothing
  9128 ;; This function is called by:
  9129 ;;		_I2C_MasterOperation
  9130 ;; This function uses a non-reentrant model
  9131 ;;
  9132                           
  9133                           
  9134                           ;psect for function _I2C_MasterStart
  9135  05E5                     _I2C_MasterStart:	
  9136                           
  9137                           ;i2c_master.c: 590: SSP1CON2bits.SEN = 1;
  9138                           
  9139                           ;incstack = 0
  9140                           ; Regs used in _I2C_MasterStart: []
  9141  05E5  0024               	movlb	4	; select bank4
  9142  05E6  1416               	bsf	22,0	;volatile
  9143  05E7  0008               	return
  9144  05E8                     __end_of_I2C_MasterStart:	
  9145                           
  9146                           	psect	text67
  9147  040D                     __ptext67:	
  9148 ;; *************** function _I2C_Close *****************
  9149 ;; Defined at:
  9150 ;;		line 209 in file "mcc_generated_files/i2c_master.c"
  9151 ;; Parameters:    Size  Location     Type
  9152 ;;		None
  9153 ;; Auto vars:     Size  Location     Type
  9154 ;;  returnValue     1    1[COMMON] enum E92
  9155 ;; Return value:  Size  Location     Type
  9156 ;;                  1    wreg      enum E92
  9157 ;; Registers used:
  9158 ;;		wreg, status,2, status,0, pclath, cstack
  9159 ;; Tracked objects:
  9160 ;;		On entry : 0/0
  9161 ;;		On exit  : 0/0
  9162 ;;		Unchanged: 0/0
  9163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9165 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9166 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9167 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9168 ;;Total ram usage:        2 bytes
  9169 ;; Hardware stack levels used:    1
  9170 ;; Hardware stack levels required when called:    1
  9171 ;; This function calls:
  9172 ;;		_I2C_MasterClearIrq
  9173 ;;		_I2C_MasterClose
  9174 ;;		_I2C_MasterDisableIrq
  9175 ;; This function is called by:
  9176 ;;		_I2C_Write1ByteRegister
  9177 ;;		_I2C_Read1ByteRegister
  9178 ;;		_I2C_Read2ByteRegister
  9179 ;;		_I2C_Write2ByteRegister
  9180 ;;		_I2C_WriteNBytes
  9181 ;;		_I2C_ReadNBytes
  9182 ;;		_I2C_ReadDataBlock
  9183 ;; This function uses a non-reentrant model
  9184 ;;
  9185                           
  9186                           
  9187                           ;psect for function _I2C_Close
  9188  040D                     _I2C_Close:	
  9189                           
  9190                           ;i2c_master.c: 211: i2c_error_t returnValue = I2C_BUSY;
  9191                           
  9192                           ;incstack = 0
  9193                           ; Regs used in _I2C_Close: [wreg+status,2+status,0+pclath+cstack]
  9194  040D  01F1               	clrf	I2C_Close@returnValue
  9195  040E  0AF1               	incf	I2C_Close@returnValue,f
  9196                           
  9197                           ;i2c_master.c: 212: if(!I2C_Status.busy)
  9198  040F  0020               	movlb	0	; select bank0
  9199  0410  18BC               	btfsc	_I2C_Status+28,1
  9200  0411  2C24               	goto	i1l2519
  9201                           
  9202                           ;i2c_master.c: 213: {
  9203                           ;i2c_master.c: 214: I2C_Status.inUse = 0;
  9204  0412  113C               	bcf	_I2C_Status+28,2
  9205                           
  9206                           ;i2c_master.c: 215: I2C_Status.address = 0xff;
  9207  0413  30FF               	movlw	255
  9208  0414  00F0               	movwf	??_I2C_Close
  9209  0415  0870               	movf	??_I2C_Close,w
  9210  0416  00B6               	movwf	_I2C_Status+22
  9211                           
  9212                           ;i2c_master.c: 216: I2C_MasterClearIrq();
  9213  0417  3185  25EE  3184   	fcall	_I2C_MasterClearIrq
  9214                           
  9215                           ;i2c_master.c: 217: I2C_MasterDisableIrq();
  9216  041A  3185  25E8  3184   	fcall	_I2C_MasterDisableIrq
  9217                           
  9218                           ;i2c_master.c: 218: I2C_MasterClose();
  9219  041D  3185  25EB         	fcall	_I2C_MasterClose
  9220                           
  9221                           ;i2c_master.c: 219: returnValue = I2C_Status.error;
  9222  041F  0020               	movlb	0	; select bank0
  9223  0420  083B               	movf	_I2C_Status+27,w
  9224  0421  00F0               	movwf	??_I2C_Close
  9225  0422  0870               	movf	??_I2C_Close,w
  9226  0423  00F1               	movwf	I2C_Close@returnValue
  9227  0424                     i1l2519:	
  9228                           
  9229                           ;i2c_master.c: 220: }
  9230                           ;i2c_master.c: 221: return returnValue;
  9231  0424  0871               	movf	I2C_Close@returnValue,w
  9232  0425  0008               	return
  9233  0426                     __end_of_I2C_Close:	
  9234                           
  9235                           	psect	text68
  9236  05E8                     __ptext68:	
  9237 ;; *************** function _I2C_MasterDisableIrq *****************
  9238 ;; Defined at:
  9239 ;;		line 635 in file "mcc_generated_files/i2c_master.c"
  9240 ;; Parameters:    Size  Location     Type
  9241 ;;		None
  9242 ;; Auto vars:     Size  Location     Type
  9243 ;;		None
  9244 ;; Return value:  Size  Location     Type
  9245 ;;                  1    wreg      void 
  9246 ;; Registers used:
  9247 ;;		None
  9248 ;; Tracked objects:
  9249 ;;		On entry : 0/0
  9250 ;;		On exit  : 0/0
  9251 ;;		Unchanged: 0/0
  9252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9256 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9257 ;;Total ram usage:        0 bytes
  9258 ;; Hardware stack levels used:    1
  9259 ;; This function calls:
  9260 ;;		Nothing
  9261 ;; This function is called by:
  9262 ;;		_I2C_Close
  9263 ;;		_I2C_SetTimeOut
  9264 ;; This function uses a non-reentrant model
  9265 ;;
  9266                           
  9267                           
  9268                           ;psect for function _I2C_MasterDisableIrq
  9269  05E8                     _I2C_MasterDisableIrq:	
  9270                           
  9271                           ;i2c_master.c: 637: PIE1bits.SSP1IE = 0;
  9272                           
  9273                           ;incstack = 0
  9274                           ; Regs used in _I2C_MasterDisableIrq: []
  9275  05E8  0021               	movlb	1	; select bank1
  9276  05E9  1190               	bcf	16,3	;volatile
  9277  05EA  0008               	return
  9278  05EB                     __end_of_I2C_MasterDisableIrq:	
  9279                           
  9280                           	psect	text69
  9281  05EB                     __ptext69:	
  9282 ;; *************** function _I2C_MasterClose *****************
  9283 ;; Defined at:
  9284 ;;		line 557 in file "mcc_generated_files/i2c_master.c"
  9285 ;; Parameters:    Size  Location     Type
  9286 ;;		None
  9287 ;; Auto vars:     Size  Location     Type
  9288 ;;		None
  9289 ;; Return value:  Size  Location     Type
  9290 ;;                  1    wreg      void 
  9291 ;; Registers used:
  9292 ;;		None
  9293 ;; Tracked objects:
  9294 ;;		On entry : 0/0
  9295 ;;		On exit  : 0/0
  9296 ;;		Unchanged: 0/0
  9297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9302 ;;Total ram usage:        0 bytes
  9303 ;; Hardware stack levels used:    1
  9304 ;; This function calls:
  9305 ;;		Nothing
  9306 ;; This function is called by:
  9307 ;;		_I2C_Close
  9308 ;; This function uses a non-reentrant model
  9309 ;;
  9310                           
  9311                           
  9312                           ;psect for function _I2C_MasterClose
  9313  05EB                     _I2C_MasterClose:	
  9314                           
  9315                           ;i2c_master.c: 560: SSP1CON1bits.SSPEN = 0;
  9316                           
  9317                           ;incstack = 0
  9318                           ; Regs used in _I2C_MasterClose: []
  9319  05EB  0024               	movlb	4	; select bank4
  9320  05EC  1295               	bcf	21,5	;volatile
  9321  05ED  0008               	return
  9322  05EE                     __end_of_I2C_MasterClose:	
  9323                           
  9324                           	psect	text70
  9325  05EE                     __ptext70:	
  9326 ;; *************** function _I2C_MasterClearIrq *****************
  9327 ;; Defined at:
  9328 ;;		line 640 in file "mcc_generated_files/i2c_master.c"
  9329 ;; Parameters:    Size  Location     Type
  9330 ;;		None
  9331 ;; Auto vars:     Size  Location     Type
  9332 ;;		None
  9333 ;; Return value:  Size  Location     Type
  9334 ;;                  1    wreg      void 
  9335 ;; Registers used:
  9336 ;;		None
  9337 ;; Tracked objects:
  9338 ;;		On entry : 0/0
  9339 ;;		On exit  : 0/0
  9340 ;;		Unchanged: 0/0
  9341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9345 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9346 ;;Total ram usage:        0 bytes
  9347 ;; Hardware stack levels used:    1
  9348 ;; This function calls:
  9349 ;;		Nothing
  9350 ;; This function is called by:
  9351 ;;		_I2C_Open
  9352 ;;		_I2C_Close
  9353 ;;		_I2C_MasterFsm
  9354 ;; This function uses a non-reentrant model
  9355 ;;
  9356                           
  9357                           
  9358                           ;psect for function _I2C_MasterClearIrq
  9359  05EE                     _I2C_MasterClearIrq:	
  9360                           
  9361                           ;i2c_master.c: 642: PIR1bits.SSP1IF = 0;
  9362                           
  9363                           ;incstack = 0
  9364                           ; Regs used in _I2C_MasterClearIrq: []
  9365  05EE  0020               	movlb	0	; select bank0
  9366  05EF  1190               	bcf	16,3	;volatile
  9367  05F0  0008               	return
  9368  05F1                     __end_of_I2C_MasterClearIrq:	
  9369                           
  9370                           	psect	text71
  9371  02A9                     __ptext71:	
  9372 ;; *************** function _EUSART_Receive_ISR *****************
  9373 ;; Defined at:
  9374 ;;		line 173 in file "mcc_generated_files/eusart.c"
  9375 ;; Parameters:    Size  Location     Type
  9376 ;;		None
  9377 ;; Auto vars:     Size  Location     Type
  9378 ;;		None
  9379 ;; Return value:  Size  Location     Type
  9380 ;;                  1    wreg      void 
  9381 ;; Registers used:
  9382 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9383 ;; Tracked objects:
  9384 ;;		On entry : 0/0
  9385 ;;		On exit  : 0/0
  9386 ;;		Unchanged: 0/0
  9387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9391 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9392 ;;Total ram usage:        0 bytes
  9393 ;; Hardware stack levels used:    1
  9394 ;; Hardware stack levels required when called:    2
  9395 ;; This function calls:
  9396 ;;		Absolute function
  9397 ;;		_EUSART_DefaultErrorHandler
  9398 ;;		_EUSART_DefaultFramingErrorHandler
  9399 ;;		_EUSART_DefaultOverrunErrorHandler
  9400 ;;		_EUSART_RxDataHandler
  9401 ;; This function is called by:
  9402 ;;		_EUSART_Initialize
  9403 ;;		_INTERRUPT_InterruptManager
  9404 ;; This function uses a non-reentrant model
  9405 ;;
  9406                           
  9407                           
  9408                           ;psect for function _EUSART_Receive_ISR
  9409  02A9                     _EUSART_Receive_ISR:	
  9410                           
  9411                           ;eusart.c: 176: eusartRxStatusBuffer[eusartRxHead].status = 0;
  9412                           
  9413                           ;incstack = 0
  9414                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9415  02A9  0020               	movlb	0	; select bank0
  9416  02AA  0856               	movf	_eusartRxHead,w	;volatile
  9417  02AB  3E3D               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  9418  02AC  0086               	movwf	6
  9419  02AD  0187               	clrf	7
  9420  02AE  0181               	clrf	1
  9421                           
  9422                           ;eusart.c: 178: if(RC1STAbits.FERR){
  9423  02AF  0023               	movlb	3	; select bank3
  9424  02B0  1D1D               	btfss	29,2	;volatile
  9425  02B1  2ABE               	goto	i1l2723
  9426                           
  9427                           ;eusart.c: 179: eusartRxStatusBuffer[eusartRxHead].ferr = 1;
  9428  02B2  0020               	movlb	0	; select bank0
  9429  02B3  0856               	movf	_eusartRxHead,w	;volatile
  9430  02B4  3E3D               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  9431  02B5  0086               	movwf	6
  9432  02B6  0187               	clrf	7
  9433  02B7  1481               	bsf	1,1
  9434                           
  9435                           ;eusart.c: 180: EUSART_FramingErrorHandler();
  9436  02B8  0021               	movlb	1	; select bank1
  9437  02B9  0825               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
  9438  02BA  008A               	movwf	10
  9439  02BB  0824               	movf	_EUSART_FramingErrorHandler^(0+128),w
  9440  02BC  000A               	callw
  9441  02BD  3182               	pagesel	$
  9442  02BE                     i1l2723:	
  9443                           
  9444                           ;eusart.c: 181: }
  9445                           ;eusart.c: 183: if(RC1STAbits.OERR){
  9446  02BE  0023               	movlb	3	; select bank3
  9447  02BF  1C9D               	btfss	29,1	;volatile
  9448  02C0  2ACD               	goto	i1l2729
  9449                           
  9450                           ;eusart.c: 184: eusartRxStatusBuffer[eusartRxHead].oerr = 1;
  9451  02C1  0020               	movlb	0	; select bank0
  9452  02C2  0856               	movf	_eusartRxHead,w	;volatile
  9453  02C3  3E3D               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  9454  02C4  0086               	movwf	6
  9455  02C5  0187               	clrf	7
  9456  02C6  1501               	bsf	1,2
  9457                           
  9458                           ;eusart.c: 185: EUSART_OverrunErrorHandler();
  9459  02C7  0021               	movlb	1	; select bank1
  9460  02C8  0823               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
  9461  02C9  008A               	movwf	10
  9462  02CA  0822               	movf	_EUSART_OverrunErrorHandler^(0+128),w
  9463  02CB  000A               	callw
  9464  02CC  3182               	pagesel	$
  9465  02CD                     i1l2729:	
  9466                           
  9467                           ;eusart.c: 186: }
  9468                           ;eusart.c: 188: if(eusartRxStatusBuffer[eusartRxHead].status){
  9469  02CD  0020               	movlb	0	; select bank0
  9470  02CE  0856               	movf	_eusartRxHead,w	;volatile
  9471  02CF  3E3D               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  9472  02D0  0086               	movwf	6
  9473  02D1  0187               	clrf	7
  9474  02D2  0801               	movf	1,w
  9475  02D3  1903               	btfsc	3,2
  9476  02D4  2ADC               	goto	i1l2733
  9477                           
  9478                           ;eusart.c: 189: EUSART_ErrorHandler();
  9479  02D5  0021               	movlb	1	; select bank1
  9480  02D6  0821               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
  9481  02D7  008A               	movwf	10
  9482  02D8  0820               	movf	_EUSART_ErrorHandler^(0+128),w
  9483  02D9  000A               	callw
  9484  02DA  3182               	pagesel	$
  9485                           
  9486                           ;eusart.c: 190: } else {
  9487  02DB  0008               	return
  9488  02DC                     i1l2733:	
  9489                           
  9490                           ;eusart.c: 191: EUSART_RxDataHandler();
  9491  02DC  3184  243D         	fcall	_EUSART_RxDataHandler
  9492  02DE  0008               	return
  9493  02DF                     __end_of_EUSART_Receive_ISR:	
  9494                           
  9495                           	psect	text72
  9496  0041                     __ptext72:	
  9497 ;; *************** function _MyUART_ISR *****************
  9498 ;; Defined at:
  9499 ;;		line 97 in file "main.c"
  9500 ;; Parameters:    Size  Location     Type
  9501 ;;		None
  9502 ;; Auto vars:     Size  Location     Type
  9503 ;;  c               1    5[COMMON] unsigned char 
  9504 ;; Return value:  Size  Location     Type
  9505 ;;                  1    wreg      void 
  9506 ;; Registers used:
  9507 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9508 ;; Tracked objects:
  9509 ;;		On entry : 0/0
  9510 ;;		On exit  : 0/0
  9511 ;;		Unchanged: 0/0
  9512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9514 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9515 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9516 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9517 ;;Total ram usage:        5 bytes
  9518 ;; Hardware stack levels used:    1
  9519 ;; Hardware stack levels required when called:    1
  9520 ;; This function calls:
  9521 ;;		_EUSART_Write
  9522 ;; This function is called by:
  9523 ;;		_main
  9524 ;;		_INTERRUPT_InterruptManager
  9525 ;; This function uses a non-reentrant model
  9526 ;;
  9527                           
  9528                           
  9529                           ;psect for function _MyUART_ISR
  9530  0041                     _MyUART_ISR:	
  9531                           
  9532                           ;main.c: 98: unsigned char c = RC1REG;
  9533                           
  9534                           ;incstack = 0
  9535                           ; Regs used in _MyUART_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9536  0041  0023               	movlb	3	; select bank3
  9537  0042  0819               	movf	25,w	;volatile
  9538  0043  00F1               	movwf	??_MyUART_ISR
  9539  0044  0871               	movf	??_MyUART_ISR,w
  9540  0045  00F5               	movwf	MyUART_ISR@c
  9541                           
  9542                           ;main.c: 99: if(c) {
  9543  0046  0875               	movf	MyUART_ISR@c,w
  9544  0047  1903               	btfsc	3,2
  9545  0048  0008               	return
  9546  0049  28EC               	goto	i1l2795
  9547  004A                     i1l2745:	
  9548                           ;main.c: 101: case S_Idle:
  9549                           
  9550                           ;main.c: 100: switch(PosUart) {
  9551                           
  9552                           
  9553                           ;main.c: 102: if(c == 'V' || c == 'A' || c == 'P' || c == 'L') {
  9554  004A  3056               	movlw	86
  9555  004B  0675               	xorwf	MyUART_ISR@c,w
  9556  004C  1903               	btfsc	3,2
  9557  004D  285A               	goto	i1l2753
  9558  004E  3041               	movlw	65
  9559  004F  0675               	xorwf	MyUART_ISR@c,w
  9560  0050  1903               	btfsc	3,2
  9561  0051  285A               	goto	i1l2753
  9562  0052  3050               	movlw	80
  9563  0053  0675               	xorwf	MyUART_ISR@c,w
  9564  0054  1903               	btfsc	3,2
  9565  0055  285A               	goto	i1l2753
  9566  0056  304C               	movlw	76
  9567  0057  0675               	xorwf	MyUART_ISR@c,w
  9568  0058  1D03               	btfss	3,2
  9569  0059  0008               	return
  9570  005A                     i1l2753:	
  9571                           
  9572                           ;main.c: 103: Type = c;
  9573  005A  0875               	movf	MyUART_ISR@c,w
  9574  005B  00F1               	movwf	??_MyUART_ISR
  9575  005C  0871               	movf	??_MyUART_ISR,w
  9576  005D  0020               	movlb	0	; select bank0
  9577  005E  00D1               	movwf	_Type
  9578                           
  9579                           ;main.c: 104: PosUart = S_Data;
  9580  005F  01D0               	clrf	_PosUart
  9581  0060  0AD0               	incf	_PosUart,f
  9582                           
  9583                           ;main.c: 105: }
  9584                           ;main.c: 106: break;
  9585  0061  0008               	return
  9586  0062                     i1l2757:	
  9587                           ;main.c: 107: case S_Data:
  9588                           
  9589                           
  9590                           ;main.c: 108: Data = c;
  9591  0062  0875               	movf	MyUART_ISR@c,w
  9592  0063  00F1               	movwf	??_MyUART_ISR
  9593  0064  0871               	movf	??_MyUART_ISR,w
  9594  0065  00D2               	movwf	_Data
  9595                           
  9596                           ;main.c: 109: PosUart = S_Check;
  9597  0066  3002               	movlw	2
  9598  0067  00F1               	movwf	??_MyUART_ISR
  9599  0068  0871               	movf	??_MyUART_ISR,w
  9600  0069  00D0               	movwf	_PosUart
  9601                           
  9602                           ;main.c: 110: break;
  9603  006A  0008               	return
  9604  006B                     i1l2759:	
  9605                           ;main.c: 111: case S_Check:
  9606                           
  9607                           
  9608                           ;main.c: 112: if((Type+Data)%256 == c) {
  9609  006B  0851               	movf	_Type,w
  9610  006C  0752               	addwf	_Data,w
  9611  006D  00F1               	movwf	??_MyUART_ISR
  9612  006E  01F2               	clrf	??_MyUART_ISR+1
  9613  006F  0DF2               	rlf	??_MyUART_ISR+1,f
  9614  0070  30FF               	movlw	255
  9615  0071  0571               	andwf	??_MyUART_ISR,w
  9616  0072  00F3               	movwf	??_MyUART_ISR+2
  9617  0073  3000               	movlw	0
  9618  0074  0572               	andwf	??_MyUART_ISR+1,w
  9619  0075  00F4               	movwf	??_MyUART_ISR+3
  9620  0076  0875               	movf	MyUART_ISR@c,w
  9621  0077  0673               	xorwf	??_MyUART_ISR+2,w
  9622  0078  0474               	iorwf	??_MyUART_ISR+3,w
  9623  0079  1D03               	skipz
  9624  007A  28DC               	goto	i1l2787
  9625                           
  9626                           ;main.c: 113: Validation = 4;
  9627  007B  3004               	movlw	4
  9628  007C  00F1               	movwf	??_MyUART_ISR
  9629  007D  0871               	movf	??_MyUART_ISR,w
  9630  007E  00EA               	movwf	_Validation
  9631                           
  9632                           ;main.c: 114: if(Type == 'V') {
  9633  007F  3056               	movlw	86
  9634  0080  0651               	xorwf	_Type,w
  9635  0081  1D03               	btfss	3,2
  9636  0082  288B               	goto	i1l2767
  9637                           
  9638                           ;main.c: 115: Vitesse = Data;
  9639  0083  0852               	movf	_Data,w
  9640  0084  00F1               	movwf	??_MyUART_ISR
  9641  0085  01F2               	clrf	??_MyUART_ISR+1
  9642  0086  0871               	movf	??_MyUART_ISR,w
  9643  0087  00CD               	movwf	_Vitesse
  9644  0088  0872               	movf	??_MyUART_ISR+1,w
  9645  0089  00CE               	movwf	_Vitesse+1
  9646                           
  9647                           ;main.c: 116: } else if(Type == 'A') {
  9648  008A  28E7               	goto	i1l2789
  9649  008B                     i1l2767:	
  9650  008B  3041               	movlw	65
  9651  008C  0651               	xorwf	_Type,w
  9652  008D  1D03               	btfss	3,2
  9653  008E  2897               	goto	i1l2771
  9654                           
  9655                           ;main.c: 117: Angle = Data;
  9656  008F  0852               	movf	_Data,w
  9657  0090  00F1               	movwf	??_MyUART_ISR
  9658  0091  01F2               	clrf	??_MyUART_ISR+1
  9659  0092  0871               	movf	??_MyUART_ISR,w
  9660  0093  00E7               	movwf	_Angle
  9661  0094  0872               	movf	??_MyUART_ISR+1,w
  9662  0095  00E8               	movwf	_Angle+1
  9663                           
  9664                           ;main.c: 118: } else if(Type == 'P') {
  9665  0096  28E7               	goto	i1l2789
  9666  0097                     i1l2771:	
  9667  0097  3050               	movlw	80
  9668  0098  0651               	xorwf	_Type,w
  9669  0099  1D03               	btfss	3,2
  9670  009A  28A5               	goto	i1l2775
  9671                           
  9672                           ;main.c: 119: EUSART_Write('P');
  9673  009B  3050               	movlw	80
  9674  009C  3185  2547  3180   	fcall	_EUSART_Write
  9675                           
  9676                           ;main.c: 120: EUSART_Write('+');
  9677  009F  302B               	movlw	43
  9678  00A0  3185  2547  3180   	fcall	_EUSART_Write
  9679                           
  9680                           ;main.c: 121: EUSART_Write('{');
  9681  00A3  307B               	movlw	123
  9682  00A4  28E5               	goto	L2
  9683  00A5                     i1l2775:	
  9684                           ;main.c: 122: } else if(Type == 'L') {
  9685                           
  9686  00A5  304C               	movlw	76
  9687  00A6  0020               	movlb	0	; select bank0
  9688  00A7  0651               	xorwf	_Type,w
  9689  00A8  1D03               	btfss	3,2
  9690  00A9  28D2               	goto	i1l2785
  9691                           
  9692                           ;main.c: 123: StateLeds++;
  9693  00AA  3001               	movlw	1
  9694  00AB  00F1               	movwf	??_MyUART_ISR
  9695  00AC  0871               	movf	??_MyUART_ISR,w
  9696  00AD  07CF               	addwf	_StateLeds,f
  9697                           
  9698                           ;main.c: 124: switch(StateLeds) {
  9699  00AE  28C3               	goto	i1l2783
  9700  00AF                     i1l841:	
  9701                           ;main.c: 126: do { LATCbits.LATC6 = 0; } while(0);
  9702                           
  9703                           ;main.c: 125: case S_leds_off:
  9704                           
  9705  00AF  0022               	movlb	2	; select bank2
  9706  00B0  130E               	bcf	14,6	;volatile
  9707  00B1  28B4               	goto	i1l849
  9708  00B2                     i1l847:	
  9709                           ;main.c: 130: do { LATCbits.LATC6 = 1; } while(0);
  9710                           
  9711                           ;main.c: 129: case S_led_r:
  9712                           
  9713                           ;main.c: 128: break;
  9714                           
  9715                           ;main.c: 127: do { LATCbits.LATC7 = 0; } while(0);
  9716                           
  9717  00B2  0022               	movlb	2	; select bank2
  9718  00B3  170E               	bsf	14,6	;volatile
  9719  00B4                     i1l849:	
  9720                           ;main.c: 131: do { LATCbits.LATC7 = 0; } while(0);
  9721                           
  9722  00B4  138E               	bcf	14,7	;volatile
  9723                           
  9724                           ;main.c: 132: break;
  9725  00B5  28E7               	goto	i1l2789
  9726  00B6                     i1l852:	
  9727                           ;main.c: 134: do { LATCbits.LATC6 = 0; } while(0);
  9728                           
  9729                           ;main.c: 133: case S_led_l:
  9730                           
  9731  00B6  0022               	movlb	2	; select bank2
  9732  00B7  130E               	bcf	14,6	;volatile
  9733  00B8  28BB               	goto	i1l859
  9734  00B9                     i1l857:	
  9735                           ;main.c: 138: do { LATCbits.LATC6 = 1; } while(0);
  9736                           
  9737                           ;main.c: 137: case S_leds_on:
  9738                           
  9739                           ;main.c: 136: break;
  9740                           
  9741                           ;main.c: 135: do { LATCbits.LATC7 = 1; } while(0);
  9742                           
  9743  00B9  0022               	movlb	2	; select bank2
  9744  00BA  170E               	bsf	14,6	;volatile
  9745  00BB                     i1l859:	
  9746                           ;main.c: 139: do { LATCbits.LATC7 = 1; } while(0);
  9747                           
  9748  00BB  178E               	bsf	14,7	;volatile
  9749                           
  9750                           ;main.c: 140: break;
  9751  00BC  28E7               	goto	i1l2789
  9752  00BD                     i1l862:	
  9753                           ;main.c: 142: do { LATCbits.LATC6 = 0; } while(0);
  9754                           
  9755                           ;main.c: 141: default:
  9756                           
  9757  00BD  0022               	movlb	2	; select bank2
  9758  00BE  130E               	bcf	14,6	;volatile
  9759                           
  9760                           ;main.c: 143: do { LATCbits.LATC7 = 0; } while(0);
  9761  00BF  138E               	bcf	14,7	;volatile
  9762                           
  9763                           ;main.c: 144: StateLeds = S_leds_off;
  9764  00C0  0020               	movlb	0	; select bank0
  9765  00C1  01CF               	clrf	_StateLeds
  9766                           
  9767                           ;main.c: 146: }
  9768                           
  9769                           ;main.c: 145: break;
  9770  00C2  28E7               	goto	i1l2789
  9771  00C3                     i1l2783:	
  9772  00C3  084F               	movf	_StateLeds,w
  9773                           
  9774                           ; Switch size 1, requested type "space"
  9775                           ; Number of cases is 4, Range of values is 0 to 3
  9776                           ; switch strategies available:
  9777                           ; Name         Instructions Cycles
  9778                           ; simple_byte           13     7 (average)
  9779                           ; direct_byte           14     6 (fixed)
  9780                           ; jumptable            260     6 (fixed)
  9781                           ;	Chosen strategy is simple_byte
  9782  00C4  3A00               	xorlw	0	; case 0
  9783  00C5  1903               	skipnz
  9784  00C6  28AF               	goto	i1l841
  9785  00C7  3A01               	xorlw	1	; case 1
  9786  00C8  1903               	skipnz
  9787  00C9  28B2               	goto	i1l847
  9788  00CA  3A03               	xorlw	3	; case 2
  9789  00CB  1903               	skipnz
  9790  00CC  28B6               	goto	i1l852
  9791  00CD  3A01               	xorlw	1	; case 3
  9792  00CE  1903               	skipnz
  9793  00CF  28B9               	goto	i1l857
  9794  00D0  28BD               	goto	i1l862
  9795                           
  9796                           ;main.c: 147: } else {
  9797  00D1  28E7               	goto	i1l2789
  9798  00D2                     i1l2785:	
  9799                           
  9800                           ;main.c: 148: EUSART_Write('$');
  9801  00D2  3024               	movlw	36
  9802  00D3  3185  2547  3180   	fcall	_EUSART_Write
  9803                           
  9804                           ;main.c: 149: EUSART_Write('M');
  9805  00D6  304D               	movlw	77
  9806  00D7  3185  2547  3180   	fcall	_EUSART_Write
  9807                           
  9808                           ;main.c: 150: EUSART_Write('q');
  9809  00DA  3071               	movlw	113
  9810  00DB  28E5               	goto	L2
  9811  00DC                     i1l2787:	
  9812                           ;main.c: 151: }
  9813                           ;main.c: 152: } else {
  9814                           
  9815                           
  9816                           ;main.c: 153: EUSART_Write('$');
  9817  00DC  3024               	movlw	36
  9818  00DD  3185  2547  3180   	fcall	_EUSART_Write
  9819                           
  9820                           ;main.c: 154: EUSART_Write('C');
  9821  00E0  3043               	movlw	67
  9822  00E1  3185  2547  3180   	fcall	_EUSART_Write
  9823                           
  9824                           ;main.c: 155: EUSART_Write('g');
  9825  00E4  3067               	movlw	103
  9826  00E5                     L2:	
  9827  00E5  3185  2547         	fcall	_EUSART_Write
  9828  00E7                     i1l2789:	
  9829                           
  9830                           ;main.c: 156: }
  9831                           ;main.c: 157: PosUart = S_Idle;
  9832  00E7  0020               	movlb	0	; select bank0
  9833  00E8  01D0               	clrf	_PosUart
  9834                           
  9835                           ;main.c: 158: break;
  9836  00E9  0008               	return
  9837  00EA                     i1l2791:	
  9838                           ;main.c: 159: default:
  9839                           
  9840                           
  9841                           ;main.c: 160: PosUart = S_Idle;
  9842  00EA  01D0               	clrf	_PosUart
  9843                           
  9844                           ;main.c: 162: }
  9845                           
  9846                           ;main.c: 161: break;
  9847  00EB  0008               	return
  9848  00EC                     i1l2795:	
  9849  00EC  0020               	movlb	0	; select bank0
  9850  00ED  0850               	movf	_PosUart,w
  9851                           
  9852                           ; Switch size 1, requested type "space"
  9853                           ; Number of cases is 3, Range of values is 0 to 2
  9854                           ; switch strategies available:
  9855                           ; Name         Instructions Cycles
  9856                           ; simple_byte           10     6 (average)
  9857                           ; direct_byte           12     6 (fixed)
  9858                           ; jumptable            260     6 (fixed)
  9859                           ;	Chosen strategy is simple_byte
  9860  00EE  3A00               	xorlw	0	; case 0
  9861  00EF  1903               	skipnz
  9862  00F0  284A               	goto	i1l2745
  9863  00F1  3A01               	xorlw	1	; case 1
  9864  00F2  1903               	skipnz
  9865  00F3  2862               	goto	i1l2757
  9866  00F4  3A03               	xorlw	3	; case 2
  9867  00F5  1903               	skipnz
  9868  00F6  286B               	goto	i1l2759
  9869  00F7  28EA               	goto	i1l2791
  9870  00F8  0008               	return
  9871  00F9                     __end_of_MyUART_ISR:	
  9872                           
  9873                           	psect	text73
  9874  0547                     __ptext73:	
  9875 ;; *************** function _EUSART_Write *****************
  9876 ;; Defined at:
  9877 ;;		line 162 in file "mcc_generated_files/eusart.c"
  9878 ;; Parameters:    Size  Location     Type
  9879 ;;  txData          1    wreg     unsigned char 
  9880 ;; Auto vars:     Size  Location     Type
  9881 ;;  txData          1    0[COMMON] unsigned char 
  9882 ;; Return value:  Size  Location     Type
  9883 ;;                  1    wreg      void 
  9884 ;; Registers used:
  9885 ;;		wreg
  9886 ;; Tracked objects:
  9887 ;;		On entry : 0/0
  9888 ;;		On exit  : 0/0
  9889 ;;		Unchanged: 0/0
  9890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9892 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9894 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9895 ;;Total ram usage:        1 bytes
  9896 ;; Hardware stack levels used:    1
  9897 ;; This function calls:
  9898 ;;		Nothing
  9899 ;; This function is called by:
  9900 ;;		_MyTimer2ISR
  9901 ;;		_MyUART_ISR
  9902 ;; This function uses a non-reentrant model
  9903 ;;
  9904                           
  9905                           
  9906                           ;psect for function _EUSART_Write
  9907  0547                     _EUSART_Write:	
  9908                           
  9909                           ;incstack = 0
  9910                           ; Regs used in _EUSART_Write: [wreg]
  9911                           ;EUSART_Write@txData stored from wreg
  9912  0547  00F0               	movwf	EUSART_Write@txData
  9913  0548                     i1l635:	
  9914                           ;eusart.c: 165: {
  9915                           
  9916                           ;eusart.c: 164: while(0 == PIR1bits.TXIF)
  9917                           
  9918  0548  0020               	movlb	0	; select bank0
  9919  0549  1E10               	btfss	16,4	;volatile
  9920  054A  2D48               	goto	i1l635
  9921                           
  9922                           ;eusart.c: 166: }
  9923                           ;eusart.c: 168: TX1REG = txData;
  9924  054B  0870               	movf	EUSART_Write@txData,w
  9925  054C  0023               	movlb	3	; select bank3
  9926  054D  009A               	movwf	26	;volatile
  9927  054E  0008               	return
  9928  054F                     __end_of_EUSART_Write:	
  9929                           
  9930                           	psect	text74
  9931  05CC                     __ptext74:	
  9932 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
  9933 ;; Defined at:
  9934 ;;		line 209 in file "mcc_generated_files/eusart.c"
  9935 ;; Parameters:    Size  Location     Type
  9936 ;;		None
  9937 ;; Auto vars:     Size  Location     Type
  9938 ;;		None
  9939 ;; Return value:  Size  Location     Type
  9940 ;;                  1    wreg      void 
  9941 ;; Registers used:
  9942 ;;		None
  9943 ;; Tracked objects:
  9944 ;;		On entry : 0/0
  9945 ;;		On exit  : 0/0
  9946 ;;		Unchanged: 0/0
  9947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9952 ;;Total ram usage:        0 bytes
  9953 ;; Hardware stack levels used:    1
  9954 ;; This function calls:
  9955 ;;		Nothing
  9956 ;; This function is called by:
  9957 ;;		_EUSART_Initialize
  9958 ;;		_EUSART_Receive_ISR
  9959 ;; This function uses a non-reentrant model
  9960 ;;
  9961                           
  9962                           
  9963                           ;psect for function _EUSART_DefaultOverrunErrorHandler
  9964  05CC                     _EUSART_DefaultOverrunErrorHandler:	
  9965                           
  9966                           ;eusart.c: 212: RC1STAbits.CREN = 0;
  9967                           
  9968                           ;incstack = 0
  9969                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
  9970  05CC  0023               	movlb	3	; select bank3
  9971  05CD  121D               	bcf	29,4	;volatile
  9972                           
  9973                           ;eusart.c: 213: RC1STAbits.CREN = 1;
  9974  05CE  161D               	bsf	29,4	;volatile
  9975  05CF  0008               	return
  9976  05D0                     __end_of_EUSART_DefaultOverrunErrorHandler:	
  9977                           
  9978                           	psect	text75
  9979  05F9                     __ptext75:	
  9980 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
  9981 ;; Defined at:
  9982 ;;		line 207 in file "mcc_generated_files/eusart.c"
  9983 ;; Parameters:    Size  Location     Type
  9984 ;;		None
  9985 ;; Auto vars:     Size  Location     Type
  9986 ;;		None
  9987 ;; Return value:  Size  Location     Type
  9988 ;;                  1    wreg      void 
  9989 ;; Registers used:
  9990 ;;		None
  9991 ;; Tracked objects:
  9992 ;;		On entry : 0/0
  9993 ;;		On exit  : 0/0
  9994 ;;		Unchanged: 0/0
  9995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10000 ;;Total ram usage:        0 bytes
 10001 ;; Hardware stack levels used:    1
 10002 ;; This function calls:
 10003 ;;		Nothing
 10004 ;; This function is called by:
 10005 ;;		_EUSART_Initialize
 10006 ;;		_EUSART_Receive_ISR
 10007 ;; This function uses a non-reentrant model
 10008 ;;
 10009                           
 10010                           
 10011                           ;psect for function _EUSART_DefaultFramingErrorHandler
 10012  05F9                     _EUSART_DefaultFramingErrorHandler:	
 10013                           
 10014                           ;incstack = 0
 10015                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 10016  05F9  0008               	return
 10017  05FA                     __end_of_EUSART_DefaultFramingErrorHandler:	
 10018                           
 10019                           	psect	text76
 10020  05F1                     __ptext76:	
 10021 ;; *************** function _EUSART_DefaultErrorHandler *****************
 10022 ;; Defined at:
 10023 ;;		line 217 in file "mcc_generated_files/eusart.c"
 10024 ;; Parameters:    Size  Location     Type
 10025 ;;		None
 10026 ;; Auto vars:     Size  Location     Type
 10027 ;;		None
 10028 ;; Return value:  Size  Location     Type
 10029 ;;                  1    wreg      void 
 10030 ;; Registers used:
 10031 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10032 ;; Tracked objects:
 10033 ;;		On entry : 0/0
 10034 ;;		On exit  : 0/0
 10035 ;;		Unchanged: 0/0
 10036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10041 ;;Total ram usage:        0 bytes
 10042 ;; Hardware stack levels used:    1
 10043 ;; Hardware stack levels required when called:    1
 10044 ;; This function calls:
 10045 ;;		_EUSART_RxDataHandler
 10046 ;; This function is called by:
 10047 ;;		_EUSART_Initialize
 10048 ;;		_EUSART_Receive_ISR
 10049 ;; This function uses a non-reentrant model
 10050 ;;
 10051                           
 10052                           
 10053                           ;psect for function _EUSART_DefaultErrorHandler
 10054  05F1                     _EUSART_DefaultErrorHandler:	
 10055                           
 10056                           ;eusart.c: 218: EUSART_RxDataHandler();
 10057                           
 10058                           ;incstack = 0
 10059                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10060  05F1  3184  243D         	fcall	_EUSART_RxDataHandler
 10061  05F3  0008               	return
 10062  05F4                     __end_of_EUSART_DefaultErrorHandler:	
 10063                           
 10064                           	psect	text77
 10065  043D                     __ptext77:	
 10066 ;; *************** function _EUSART_RxDataHandler *****************
 10067 ;; Defined at:
 10068 ;;		line 197 in file "mcc_generated_files/eusart.c"
 10069 ;; Parameters:    Size  Location     Type
 10070 ;;		None
 10071 ;; Auto vars:     Size  Location     Type
 10072 ;;		None
 10073 ;; Return value:  Size  Location     Type
 10074 ;;                  1    wreg      void 
 10075 ;; Registers used:
 10076 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10077 ;; Tracked objects:
 10078 ;;		On entry : 0/0
 10079 ;;		On exit  : 0/0
 10080 ;;		Unchanged: 0/0
 10081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10084 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10085 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10086 ;;Total ram usage:        1 bytes
 10087 ;; Hardware stack levels used:    1
 10088 ;; This function calls:
 10089 ;;		Nothing
 10090 ;; This function is called by:
 10091 ;;		_EUSART_Receive_ISR
 10092 ;;		_EUSART_DefaultErrorHandler
 10093 ;; This function uses a non-reentrant model
 10094 ;;
 10095                           
 10096                           
 10097                           ;psect for function _EUSART_RxDataHandler
 10098  043D                     _EUSART_RxDataHandler:	
 10099                           
 10100                           ;eusart.c: 199: eusartRxBuffer[eusartRxHead++] = RC1REG;
 10101                           
 10102                           ;incstack = 0
 10103                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 10104  043D  0023               	movlb	3	; select bank3
 10105  043E  0819               	movf	25,w	;volatile
 10106  043F  00F0               	movwf	??_EUSART_RxDataHandler
 10107  0440  0020               	movlb	0	; select bank0
 10108  0441  0856               	movf	_eusartRxHead,w
 10109  0442  3E45               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 10110  0443  0086               	movwf	6
 10111  0444  0187               	clrf	7
 10112  0445  0870               	movf	??_EUSART_RxDataHandler,w
 10113  0446  0081               	movwf	1
 10114  0447  3001               	movlw	1
 10115  0448  00F0               	movwf	??_EUSART_RxDataHandler
 10116  0449  0870               	movf	??_EUSART_RxDataHandler,w
 10117  044A  07D6               	addwf	_eusartRxHead,f	;volatile
 10118                           
 10119                           ;eusart.c: 200: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 10120  044B  3008               	movlw	8
 10121  044C  0256               	subwf	_eusartRxHead,w	;volatile
 10122  044D  1803               	btfsc	3,0
 10123                           
 10124                           ;eusart.c: 201: {
 10125                           ;eusart.c: 202: eusartRxHead = 0;
 10126  044E  01D6               	clrf	_eusartRxHead	;volatile
 10127                           
 10128                           ;eusart.c: 203: }
 10129                           ;eusart.c: 204: eusartRxCount++;
 10130  044F  3001               	movlw	1
 10131  0450  00F0               	movwf	??_EUSART_RxDataHandler
 10132  0451  0870               	movf	??_EUSART_RxDataHandler,w
 10133  0452  07D4               	addwf	_eusartRxCount,f	;volatile
 10134  0453  0008               	return
 10135  0454                     __end_of_EUSART_RxDataHandler:	
 10136  007E                     btemp	set	126	;btemp
 10137  007E                     int$flags	set	126
 10138  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    32
    Data        4
    BSS         55
    Persistent  10
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     12      75
    BANK1            80      4      10
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    I2C_Read1ByteRegister@returnValue.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Read2ByteRegister@returnValue.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Write1ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Write2ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    I2C_DO_TX$1909$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_RX$1915$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX_EMPTY$1921$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_RX_EMPTY$1927$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX_EMPTY$1926	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX_EMPTY$1921	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_DO_RX$1920	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_RX$1915	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_DO_TX$1914	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX$1909	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_MasterFsm$1908	const PTR FTN()enum E12103 size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    I2C_CallbackReturnStop@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_CallbackReturnReset@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    Absolute function$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S443$0$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyTimer2ISR(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyTimer2ISR(), TMR2_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyUART_ISR(), EUSART_Receive_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), Absolute function(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), Absolute function(), 

    I2C_SetCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_SetCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> Absolute function(), rd1RegCompleteHandler(), 

    I2C_SetAddressNackCallback@ptr	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    I2C_SetAddressNackCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> Absolute function(), 

    I2C_SetDataCompleteCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_SetDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> Absolute function(), rd1RegCompleteHandler(), 

    I2C_SetBuffer@buffer	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(BANK0[1]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S443$data_ptr	PTR unsigned char  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(BANK0[1]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_Status.data_ptr	PTR unsigned char  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(BANK0[1]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S443$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_Status.callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S443$callbackTable	PTR FTN(PTR void ,)enum E97[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_Status.callbackTable	PTR FTN(PTR void ,)enum E97[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    fsmStateTable	const PTR FTN()enum E12103[16] size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyUART_ISR(), EUSART_Receive_ISR(), Absolute function(), 

    rdBlkRegCompleteHandler@ptr.data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    wr2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    wr1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    rd2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    rd1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK0[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S85$data	PTR unsigned char  size(1) Largest target is 0

    bufferBlock.data	PTR unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _I2C_SetAddressNackCallback->_I2C_SetCallback
    _I2C_MasterWrite->_I2C_MasterOperation
    _I2C_MasterFsm->_I2C_DO_TX
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnReset
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnStop
    _I2C_DO_TX_EMPTY->_rd1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rd2RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rdBlkRegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr2RegCompleteHandler
    _I2C_DO_TX->_I2C_CallbackReturnReset
    _I2C_DO_TX->_I2C_CallbackReturnStop
    _I2C_DO_TX->_rd1RegCompleteHandler
    _I2C_DO_TX->_rd2RegCompleteHandler
    _I2C_DO_TX->_rdBlkRegCompleteHandler
    _I2C_DO_TX->_wr1RegCompleteHandler
    _I2C_DO_TX->_wr2RegCompleteHandler
    _I2C_DO_SEND_ADR_WRITE->_I2C_MasterSendTxData
    _I2C_DO_RX->_I2C_CallbackReturnReset
    _I2C_DO_RX->_I2C_CallbackReturnStop
    _I2C_DO_RX->_rd1RegCompleteHandler
    _I2C_DO_RX->_rd2RegCompleteHandler
    _I2C_DO_RX->_rdBlkRegCompleteHandler
    _I2C_DO_RX->_wr1RegCompleteHandler
    _I2C_DO_RX->_wr2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnReset
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnStop
    _I2C_DO_ADDRESS_NACK->_rd1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rd2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rdBlkRegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr2RegCompleteHandler
    _wr2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _wr1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rdBlkRegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _I2C_SetDataCompleteCallback->_I2C_SetCallback
    _MyUART_ISR->_EUSART_Write
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _TMR2_ISR->_MyTimer2ISR
    _MyTimer2ISR->_I2C_Write1ByteRegister
    _I2C_MasterWrite->_I2C_MasterOperation
    _I2C_Poller->_I2C_MasterFsm

Critical Paths under _main in BANK1

    _main->_EUSART_SetRxInterruptHandler
    _main->_TMR2_SetInterruptHandler
    _main->_TMR2_WriteTimer
    _TMR2_WriteTimer->_TMR2_Counter8BitSet
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1269
                                              2 BANK1      2     2      0
       _EUSART_SetRxInterruptHandler
                  _SYSTEM_Initialize
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
                    _TMR2_WriteTimer
 ---------------------------------------------------------------------------------
 (1) _TMR2_WriteTimer                                      1     1      0      62
                                              1 BANK1      1     1      0
                _TMR2_Counter8BitSet
 ---------------------------------------------------------------------------------
 (2) _TMR2_Counter8BitSet                                  1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
                         _TMR2_Start
 ---------------------------------------------------------------------------------
 (2) _TMR2_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     785
                  _EUSART_Initialize
                     _I2C_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM3_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     211
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR2_SetInterruptHandler                             2     0      2     211
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     574
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     211
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     121
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     121
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     121
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           1     1      0   84965
                                             11 BANK0      1     1      0
                   Absolute function *
                 _EUSART_Receive_ISR *
                         _MyUART_ISR *
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR2_ISR                                             0     0      0   84766
                   Absolute function *
                        _MyTimer2ISR *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (6) _TMR2_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _MyTimer2ISR                                          2     2      0   84766
                                              9 BANK0      2     2      0
                       _EUSART_Write
             _I2C_Write1ByteRegister
                 _PWM3_LoadDutyValue
 ---------------------------------------------------------------------------------
 (7) _PWM3_LoadDutyValue                                   4     2      2     120
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (7) _I2C_Write1ByteRegister                               4     2      2   84624
                                              5 BANK0      4     2      2
                          _I2C_Close
                    _I2C_MasterWrite
                           _I2C_Open
         _I2C_SetAddressNackCallback
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _I2C_SetAddressNackCallback                           4     1      3    1870
                                              5 COMMON     4     1      3
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (8) _I2C_Open                                             3     3      0      46
                                              0 COMMON     3     3      0
                 _I2C_MasterClearIrq
                     _I2C_MasterOpen
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterOpen                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C_MasterWrite                                      0     0      0   78324
                _I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterOperation                                  3     3      0   78324
                                             13 COMMON     1     1      0
                                              3 BANK0      2     2      0
                    _I2C_MasterStart
                         _I2C_Poller
 ---------------------------------------------------------------------------------
 (10) _I2C_Poller                                          0     0      0   78278
                      _I2C_MasterFsm
             _I2C_MasterWaitForEvent
 ---------------------------------------------------------------------------------
 (11) _I2C_MasterWaitForEvent                              0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _I2C_MasterFsm                                       3     3      0   78278
                                              0 BANK0      3     3      0
                _I2C_DO_ADDRESS_NACK *
                        _I2C_DO_IDLE *
                        _I2C_DO_RCEN *
                       _I2C_DO_RESET *
                          _I2C_DO_RX *
                      _I2C_DO_RX_ACK *
             _I2C_DO_RX_NACK_RESTART *
                _I2C_DO_RX_NACK_STOP *
               _I2C_DO_SEND_ADR_READ *
              _I2C_DO_SEND_ADR_WRITE *
                _I2C_DO_SEND_RESTART *
           _I2C_DO_SEND_RESTART_READ *
          _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_DO_SEND_STOP *
                          _I2C_DO_TX *
                    _I2C_DO_TX_EMPTY *
                 _I2C_MasterClearIrq
                   _I2C_MasterIsNack
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_TX_EMPTY                                     1     1      0   19547
                                             10 COMMON     1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
                   _I2C_MasterSetIrq
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (13) _I2C_MasterSetIrq                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_TX                                           3     3      0   19593
                                             10 COMMON     3     3      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
           _I2C_DO_SEND_RESTART_READ
          _I2C_DO_SEND_RESTART_WRITE
                   _I2C_DO_SEND_STOP
                   _I2C_MasterIsNack
               _I2C_MasterSendTxData
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (12) _I2C_MasterIsNack                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _I2C_DO_SEND_RESTART_WRITE                           0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (13) _I2C_DO_SEND_RESTART_READ                            0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_SEND_ADR_WRITE                               0     0      0      22
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_SEND_ADR_READ                                0     0      0      22
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (13) _I2C_MasterSendTxData                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_RX_ACK                                       0     0      0       0
                  _I2C_MasterSendAck
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_RX                                           1     1      0   19547
                                             10 COMMON     1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
             _I2C_DO_RX_NACK_RESTART
                _I2C_DO_RX_NACK_STOP
                _I2C_MasterGetRxData
                  _I2C_MasterSendAck
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (13) _I2C_MasterSendAck                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _I2C_MasterGetRxData                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_RX_NACK_STOP                                 0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_RX_NACK_RESTART                              0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (13) _I2C_MasterSendNack                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_RESET                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_RCEN                                         0     0      0       0
                  _I2C_MasterStartRx
 ---------------------------------------------------------------------------------
 (13) _I2C_MasterStartRx                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_IDLE                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C_DO_ADDRESS_NACK                                 1     1      0   19547
                                             10 COMMON     1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (13) _wr2RegCompleteHandler                               1     0      1    3852
                                              9 COMMON     1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (13) _wr1RegCompleteHandler                               1     0      1    3852
                                              9 COMMON     1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (13) _rdBlkRegCompleteHandler                             1     0      1    3874
                                              9 COMMON     1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (13) _rd2RegCompleteHandler                               1     0      1    3852
                                              9 COMMON     1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (13) _rd1RegCompleteHandler                               1     0      1    3852
                                              9 COMMON     1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _I2C_SetDataCompleteCallback                          4     1      3    2478
                                              5 COMMON     4     1      3
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (9) _I2C_SetCallback                                      5     2      3     914
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (8) _I2C_SetBuffer                                        4     2      2    1352
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (13) _I2C_DO_SEND_STOP                                    0     0      0       0
                     _I2C_MasterStop
 ---------------------------------------------------------------------------------
 (14) _I2C_MasterStop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _I2C_DO_SEND_RESTART                                 0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (14) _I2C_MasterEnableRestart                             0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _I2C_CallbackReturnStop                              1     0      1       0
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (13) _I2C_CallbackReturnReset                             1     0      1     265
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (10) _I2C_MasterStart                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C_Close                                            2     2      0      24
                                              0 COMMON     2     2      0
                 _I2C_MasterClearIrq
                    _I2C_MasterClose
               _I2C_MasterDisableIrq
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterDisableIrq                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterClose                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterClearIrq                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _MyUART_ISR                                           5     5      0     199
                                              1 COMMON     5     5      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (7) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Receive_ISR                                   0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (6) _EUSART_DefaultOverrunErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_DefaultFramingErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_DefaultErrorHandler                           0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (6) _EUSART_RxDataHandler                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_SetRxInterruptHandler
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
     _I2C_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM3_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
   _TMR2_SetInterruptHandler
   _TMR2_StartTimer
     _TMR2_Start
   _TMR2_WriteTimer
     _TMR2_Counter8BitSet

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _MyUART_ISR *
     _EUSART_Write
   _TMR2_ISR *
     Absolute function(Fake) *
     _MyTimer2ISR *
       _EUSART_Write
       _I2C_Write1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
       _PWM3_LoadDutyValue
     _TMR2_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      C      4B       5       93.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      4       A       7       12.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      63      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      63      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Mar 29 18:07:18 2020

                ?_EUSART_SetRxInterruptHandler 00A6                         ??_I2C_DO_SEND_ADR_READ 0070  
                                  MyUART_ISR@c 0075                    __size_of_I2C_MasterSendNack 0004  
                           __size_of_I2C_Close 0019               __end_of_TMR2_SetInterruptHandler 0536  
                      ??_I2C_DO_SEND_ADR_WRITE 0071                                    __CFG_CP$OFF 0000  
                          __size_of_I2C_Poller 000A                          ??_I2C_DO_SEND_RESTART 0070  
                                  __CFG_LVP$ON 0000                   __size_of_I2C_MasterOperation 001A  
                __size_of_I2C_MasterSendTxData 0005                                            _PR2 001B  
                       ??_EUSART_RxDataHandler 0070                         _I2C_MasterWaitForEvent 05A4  
               ?_EUSART_SetFramingErrorHandler 00A6                                _TMR2_Initialize 046A  
                                 __CFG_BORV$LO 0000                                            wreg 0009  
                                 __CFG_IESO$ON 0000                   ??_I2C_SetAddressNackCallback 0078  
                       _I2C_Write1ByteRegister 0311                       ??_I2C_CallbackReturnStop 007A  
                                 _I2C_DO_RESET 058D                                   __CFG_ZCD$OFF 0000  
                      ??_rd2RegCompleteHandler 007A                                           l3111 018A  
                                         l3113 0198                                           l3105 01AC  
                                         l3115 01A3                                           l3107 017C  
                                         u1330 0188                                           _LATA 010C  
                                         u1350 01A1                                           _LATB 010D  
                                         _LATC 010E                                           u1377 0190  
                                         _T2PR 001B                                           u1387 01A7  
                                         _TMR2 001A                                           _WPUA 020C  
                                         _WPUB 020D                                           _WPUC 020E  
                                         _Data 0052                        ??_wr2RegCompleteHandler 007A  
                                 __CFG_WRT$OFF 0000                                  __CFG_FCMEN$ON 0000  
                                         _Type 0051                                           _main 015D  
                     ?_I2C_CallbackReturnReset 0079                                           fsr0h 0005  
                                         fsr1h 0007                                           indf0 0000  
                                         fsr0l 0004                                           indf1 0001  
                                         fsr1l 0006                               __end_of_I2C_Open 02A9  
                                         btemp 007E                                  __CFG_BOREN$ON 0000  
                                         start 0024                                  __CFG_MCLRE$ON 0000  
                          _TMR2_Counter8BitSet 0569               __size_of_rdBlkRegCompleteHandler 0017  
                                _I2C_DO_TX$794 007B                               ?_I2C_MasterClose 0070  
                                __CFG_PLLEN$ON 0000                                  ?_EUSART_Write 0070  
          __size_of_I2C_SetAddressNackCallback 000C                 __size_of_OSCILLATOR_Initialize 0007  
                             ?_I2C_MasterStart 0070                                  _I2C_DO_RX_ACK 05B0  
                             ?_I2C_MasterWrite 0070                  __end_of_OSCILLATOR_Initialize 0556  
                                        ?_main 0070                                  __CFG_WDTE$OFF 0000  
                                        _T2CON 001C                                          _T2HLT 001D  
                                        i1l123 001F                                          _T2TMR 001A  
                                        i1l118 0017                                          i1l321 02A7  
                                        _T2RST 001F                                          i1l403 0252  
                                        i1l544 05A4                                          i1l635 0548  
                                        i1l387 01DE                                          i1l841 00AF  
                                        i1l852 00B6                                          i1l862 00BD  
                                        i1l847 00B2                                          i1l857 00B9  
                                        i1l849 00B4                                          i1l859 00BB  
                 __size_of_I2C_DO_RX_NACK_STOP 0004                              ??_I2C_DO_TX_EMPTY 007A  
                                        _TRISA 008C                                          _TRISB 008D  
                                        _TRISC 008E                                          u85_25 0463  
                                        _RXPPS 0E24                                          _Angle 0067  
                         ?_TMR2_Counter8BitSet 0070                              __end_of_I2C_DO_RX 0272  
                            __end_of_I2C_DO_TX 01FD                               __end_of_TMR2_ISR 04EA  
                                  ?_TMR2_Start 0070                              __end_of_I2C_Close 0426  
                       __size_of_I2C_MasterFsm 0027                 I2C_MasterOperation@returnValue 005B  
                                   _MyUART_ISR 0041                        _I2C_MasterEnableRestart 05E2  
                      __end_of_PWM3_Initialize 0519                                          pclath 000A  
                             ?_I2C_SetCallback 0070                   I2C_SetAddressNackCallback@cb 0075  
                                        status 0003                                          wtemp0 007E  
                            ?_I2C_DO_SEND_STOP 0070                         __size_of_I2C_SetBuffer 000E  
                              _TMR2_StartTimer 05D0                             ??_I2C_DO_SEND_STOP 0070  
                                _fsmStateTable 03D3                                __initialization 0026  
                                ??_MyTimer2ISR 0060                                   __end_of_main 01B2  
            __size_of_I2C_DO_SEND_RESTART_READ 0004                      ?_I2C_DO_SEND_RESTART_READ 0070  
                               ??_EUSART_Write 0070                                 ?_I2C_DO_RX_ACK 0070  
                      __end_of_TMR2_Initialize 047E                                 __CFG_LPBOR$OFF 0000  
                  ?_INTERRUPT_InterruptManager 0070                 ??_EUSART_SetRxInterruptHandler 00A8  
                     _TMR2_SetInterruptHandler 052D                                         ??_main 00A8  
                            ?_I2C_MasterIsNack 0070                                _TMR2_WriteTimer 0563  
                            ?_I2C_MasterSetIrq 0070                             ??_I2C_MasterIsNack 0070  
                        ??_TMR2_Counter8BitSet 00A6                             ??_I2C_MasterSetIrq 0070  
    __end_of_EUSART_DefaultFramingErrorHandler 05FA     __size_of_EUSART_DefaultFramingErrorHandler 0001  
          ??_EUSART_DefaultFramingErrorHandler 0070             ?_EUSART_DefaultFramingErrorHandler 0070  
            _EUSART_DefaultFramingErrorHandler 05F9                     _EUSART_OverrunErrorHandler 00A2  
              __end_of_I2C_CallbackReturnReset 05F6                __size_of_I2C_CallbackReturnStop 0002  
                I2C_SetDataCompleteCallback@cb 0075                                         _ANSELA 018C  
                                       _ANSELB 018D                                         _ANSELC 018E  
                                       _BORCON 0116                                   ??_I2C_Poller 007D  
                                       _RC1REG 0199                                         _RA2PPS 0E92  
                                       _RC1STA 019D                                         _RB4PPS 0E9C  
                                       _RB6PPS 0E9E                                         _RB7PPS 0E9F  
                                       i1l2303 01BC                                         i1l2321 01F7  
                                       i1l2313 01C2                                         i1l2401 03BA  
                                       _ODCONA 028C                                         _ODCONB 028D  
                                       i1l2155 03A2                                         i1l2307 01BF  
                                       _ODCONC 028E                                         i1l2343 0257  
                                       i1l2407 03BD                                         i1l2361 036A  
                                       i1l2371 0371                                         i1l2339 0254  
                                       i1l2419 0351                                         i1l2365 036D  
                                       i1l2349 025A                                         i1l2429 0523  
                                       i1l2525 0313                                         i1l2519 0424  
                                       i1l2463 040A                                         i1l2535 0339  
                                       i1l2377 0374                                         i1l2457 0401  
                                       i1l2705 0154                                         i1l2723 02BE  
                                       i1l2299 01B9                                         i1l2459 0405  
                                       i1l2733 02DC                                         i1l2397 03B7  
                                       i1l2753 005A                                         i1l2745 004A  
                                       i1l2729 02CD                                         i1l2771 0097  
                                       i1l2757 0062                                         i1l2693 012D  
                                       i1l2791 00EA                                         i1l2783 00C3  
                                       i1l2775 00A5                                         i1l2767 008B  
                                       i1l2759 006B                                         i1l2687 011F  
                                       i1l2785 00D2                                         i1l2697 0139  
                                       i1l2787 00DC                                         i1l2795 00EC  
                                       i1l2699 0142                                         i1l2789 00E7  
                                       _INLVLA 038C                                         _INLVLB 038D  
                                       _INLVLC 038E                                         _OSCCON 0099  
                                       _SPBRGH 019C                                         _SPBRGL 019B  
                                       _TX1REG 019A                                         _TX1STA 019E  
                                   _Validation 006A                                 __CFG_PWRTE$OFF 0000  
                          _I2C_MasterGetRxData 05D9                    __size_of_PWM3_LoadDutyValue 0016  
                                _I2C_MasterFsm 0340                                 __CFG_STVREN$ON 0000  
                          __size_of_TMR2_Start 0003                              I2C_SetCallback@cb 0070  
                      __size_of_I2C_MasterOpen 000C                        __size_of_I2C_MasterStop 0003  
                      __size_of_I2C_Initialize 000A                                  _I2C_SetBuffer 04D0  
                          __end_of_MyTimer2ISR 015D                             __end_of_I2C_Poller 052D  
                 __end_of_I2C_MasterDisableIrq 05EB                            _I2C_DO_ADDRESS_NACK 03B0  
                         ?_I2C_MasterGetRxData 0070                                      ?_I2C_Open 0070  
           __end_of_I2C_SetAddressNackCallback 04F6                     _I2C_SetAddressNackCallback 04EA  
                    ??_I2C_MasterEnableRestart 0070                        __end_of_TMR2_StartTimer 05D3  
     TMR2_SetInterruptHandler@InterruptHandler 00A6                                    ?_MyUART_ISR 0070  
                             ?_PWM3_Initialize 0070                              _SYSTEM_Initialize 047E  
                      __end_of__initialization 003D                            _I2C_MasterOperation 03F3  
                           ?_SYSTEM_Initialize 0070                           ?_I2C_DO_ADDRESS_NACK 0070  
                      _rdBlkRegCompleteHandler 0426                                 __pcstackCOMMON 0070  
                               ?_I2C_MasterFsm 0070                                ??_I2C_DO_RX_ACK 0070  
                                 __pidataBANK0 059C                         _I2C_CallbackReturnStop 05F6  
                          ??_SYSTEM_Initialize 00A8                                      ?_TMR2_ISR 0070  
                      __end_of_TMR2_WriteTimer 0569                               ?_TMR2_Initialize 0070  
                               ?_I2C_SetBuffer 0070                        ?_I2C_MasterWaitForEvent 0070  
               __size_of_I2C_DO_SEND_ADR_WRITE 0007             __size_of_I2C_DO_SEND_RESTART_WRITE 0004  
                __end_of_I2C_DO_SEND_ADR_WRITE 055D                     ?_I2C_DO_SEND_RESTART_WRITE 0070  
                         ?_I2C_MasterOperation 0070                          ??_I2C_MasterGetRxData 0070  
                      ?_I2C_Write1ByteRegister 005C                                 _OPTION_REGbits 0095  
                                   ??_I2C_Open 0070                           _eusartRxStatusBuffer 003D  
                   __end_of_I2C_MasterClearIrq 05F1                ??_EUSART_SetOverrunErrorHandler 00A8  
                    __end_of_SYSTEM_Initialize 0490                              _I2C_MasterSendAck 05C4  
                                   __pbssBANK0 0020                           __end_of_EUSART_Write 054F  
                                ??_I2C_DO_IDLE 0070                 __size_of_rd2RegCompleteHandler 0010  
                                ??_I2C_DO_RCEN 0070                  __end_of_rd2RegCompleteHandler 04B0  
                 __end_of_I2C_MasterSendTxData 059C                             ?_I2C_MasterSendAck 0070  
                            _I2C_MasterStartRx 05DC                 __size_of_wr2RegCompleteHandler 0010  
                        ??_I2C_DO_ADDRESS_NACK 007A                  __end_of_wr2RegCompleteHandler 04D0  
                  __size_of_EUSART_Receive_ISR 0036                            _I2C_DO_RX_NACK_STOP 05AC  
                        _rd1RegCompleteHandler 04B0                             ?_I2C_MasterStartRx 0070  
                   __end_of_I2C_MasterSendNack 05CC                          _wr1RegCompleteHandler 0490  
                                   __pmaintext 015D                            ??_I2C_MasterSendAck 0070  
                     rd1RegCompleteHandler@ptr 0079                    __end_of_I2C_DO_SEND_RESTART 05BC  
                                  _MyTimer2ISR 00F9                                _I2C_DO_TX_EMPTY 0367  
                          I2C_SetBuffer@buffer 0073                                __CFG_PPS1WAY$ON 0000  
                                   ??_TMR2_ISR 007E                                     __pintentry 0004  
               __end_of_I2C_MasterWaitForEvent 05A8                            ??_I2C_MasterStartRx 0070  
                __size_of_I2C_DO_SEND_ADR_READ 0008                            __size_of_MyUART_ISR 00B8  
             __size_of_I2C_CallbackReturnReset 0002                   ??_EUSART_DefaultErrorHandler 0071  
                        ??_I2C_MasterOperation 007D                 I2C_SetDataCompleteCallback@ptr 0077  
               __end_of_I2C_Write1ByteRegister 0340                       ??_I2C_DO_RX_NACK_RESTART 0070  
            __end_of_I2C_DO_SEND_RESTART_WRITE 05C0                           ?_I2C_DO_RX_NACK_STOP 0070  
                                _eusartRxCount 0054                                __CFG_WDTCCS$SWC 0000  
                __size_of_EUSART_RxDataHandler 0017                      __end_of_I2C_MasterSendAck 05C8  
                                      _OSCTUNE 0098                                        _PWM3DCH 0618  
                                      _PWM3DCL 0617                                        _PWM3CON 0619  
                                      _SSP1ADD 0212                                        _SLRCONA 030C  
                                      _SLRCONB 030D                                        _SLRCONC 030E  
                                      _SSP1BUF 0211                                   ??_TMR2_Start 00A6  
                     ??_EUSART_SetErrorHandler 00A8                               ?_TMR2_StartTimer 0070  
                    __end_of_I2C_MasterStartRx 05DF                           I2C_Close@returnValue 0071  
                 ?_I2C_SetDataCompleteCallback 0075                                      _I2C_DO_RX 0238  
                                    _I2C_DO_TX 01B2               __end_of_I2C_DO_SEND_RESTART_READ 05C4  
                                    _I2C_Close 040D                      ??_rdBlkRegCompleteHandler 007A  
                         _I2C_MasterDisableIrq 05E8                                ??_I2C_MasterFsm 0057  
          __size_of_EUSART_DefaultErrorHandler 0003                     ??_TMR2_SetInterruptHandler 00A8  
                                      _PosUart 0050                            __end_of_I2C_DO_IDLE 0597  
                          __end_of_I2C_DO_RCEN 0587                                        _Vitesse 004D  
                              ??_I2C_SetBuffer 0072                               ?_TMR2_WriteTimer 0070  
                      I2C_SetBuffer@bufferSize 0070                             __end_of_TMR2_Start 05D6  
                               _I2C_MasterOpen 04F6                                 _I2C_MasterStop 05DF  
                               _I2C_Initialize 0519                      __size_of_I2C_DO_SEND_STOP 0004  
                                      __ptext1 0563                                        __ptext2 0569  
                                      __ptext3 05D0                                        __ptext4 05D3  
                                      __ptext5 047E                                        __ptext6 046A  
                                      __ptext7 052D                                        __ptext8 050E  
                                      __ptext9 01FD                          ??_I2C_DO_RX_NACK_STOP 0070  
                        _OSCILLATOR_Initialize 054F                                      _T2CONbits 001C  
                           I2C_SetCallback@idx 0074                       __size_of_I2C_MasterClose 0003  
                     ??_PIN_MANAGER_Initialize 00A6                  I2C_CallbackReturnReset@funPtr 0079  
                                    _T2HLTbits 001D                             I2C_SetCallback@ptr 0072  
                     wr1RegCompleteHandler@ptr 0079                      I2C_Write1ByteRegister@reg 005C  
                     __size_of_I2C_MasterStart 0003                       __size_of_I2C_MasterWrite 0004  
                   __size_of_SYSTEM_Initialize 0012                                        clrloop0 055E  
                         end_of_initialization 003D                                      _T2RSTbits 001F  
                                   ?_I2C_DO_RX 0070                                     ?_I2C_DO_TX 0070  
        __end_of_EUSART_SetOverrunErrorHandler 0575         __size_of_EUSART_SetOverrunErrorHandler 0006  
                _EUSART_SetOverrunErrorHandler 056F                      __size_of_I2C_MasterIsNack 0006  
                                   ?_I2C_Close 0070                         ?_rd1RegCompleteHandler 0079  
                      __end_of_I2C_DO_TX_EMPTY 038C                      __size_of_I2C_MasterSetIrq 0003  
                        ?_I2C_MasterDisableIrq 0070                              _EUSART_Initialize 02DF  
                       ?_wr1RegCompleteHandler 0079                             ?_EUSART_Initialize 0070  
                     __size_of_I2C_SetCallback 0024                         __end_of_I2C_MasterOpen 0502  
                       __end_of_I2C_MasterStop 05E2                         __end_of_I2C_Initialize 0523  
                  __end_of_TMR2_Counter8BitSet 056F                            ??_EUSART_Initialize 00A8  
                                    _PORTAbits 000C                __end_of_rdBlkRegCompleteHandler 043D  
                         _I2C_MasterSendTxData 0597                                      _SSPDATPPS 0E21  
              __size_of_I2C_DO_RX_NACK_RESTART 0004                                      _SSPCLKPPS 0E20  
                             __CFG_FOSC$INTOSC 0000                    ?_I2C_SetAddressNackCallback 0075  
                        __size_of_EUSART_Write 0008                     __size_of_I2C_MasterSendAck 0004  
                            __size_of_I2C_Open 0037                                   ??_MyUART_ISR 0071  
              __size_of_EUSART_SetErrorHandler 0006                     __size_of_I2C_MasterStartRx 0003  
                      TMR2_WriteTimer@timerVal 00A7                      __end_of_EUSART_Initialize 0311  
                                  _I2C_DO_IDLE 0592                                    _I2C_DO_RCEN 0581  
                   rdBlkRegCompleteHandler@ptr 0079                  I2C_Write1ByteRegister@address 005F  
                      ?_I2C_CallbackReturnStop 0079                     __end_of_PWM3_LoadDutyValue 046A  
                     _I2C_DO_SEND_RESTART_READ 05C0                   I2C_CallbackReturnStop@funPtr 0079  
                              ?_I2C_MasterOpen 0070                                ?_I2C_MasterStop 0070  
                              ?_I2C_Initialize 0070           __end_of_TMR2_DefaultInterruptHandler 05F9  
        __size_of_TMR2_DefaultInterruptHandler 0001                   _TMR2_DefaultInterruptHandler 05F8  
                      _I2C_CallbackReturnReset 05F4             __end_of_EUSART_DefaultErrorHandler 05F4  
                   _EUSART_DefaultErrorHandler 05F1           __size_of_I2C_SetDataCompleteCallback 000C  
                                 _EUSART_Write 0547                              __size_of_TMR2_ISR 000C  
                           __end_of_MyUART_ISR 00F9                          ?_I2C_MasterSendTxData 0070  
                       ?_OSCILLATOR_Initialize 0070                    ??_I2C_DO_SEND_RESTART_WRITE 0070  
                          start_initialization 0026                __size_of_PIN_MANAGER_Initialize 003B  
                                ?_I2C_DO_RESET 0070   EUSART_SetRxInterruptHandler@interruptHandler 00A6  
                                  ??_I2C_DO_RX 007A                                    ??_I2C_DO_TX 007A  
                            ??_I2C_MasterClose 0070                         ??_I2C_MasterDisableIrq 0070  
                                  ??_I2C_Close 0070                              ??_I2C_MasterStart 0070  
                            ??_I2C_MasterWrite 007E                 __end_of_I2C_CallbackReturnStop 05F8  
                       _I2C_DO_RX_NACK_RESTART 05A8                               ?_I2C_DO_TX_EMPTY 0070  
                           _I2C_MasterClearIrq 05EE                 ?_EUSART_SetOverrunErrorHandler 00A6  
                     __size_of_PWM3_Initialize 000B                     _EUSART_FramingErrorHandler 00A4  
                                 ?_MyTimer2ISR 0070                         _EUSART_SetErrorHandler 057B  
                                  _CCPTMRSbits 029E                            ?_I2C_MasterClearIrq 0070  
                  __end_of_I2C_MasterGetRxData 05DC                                    __pdataBANK0 0067  
                        __end_of_I2C_DO_RX_ACK 05B4                                      _StateLeds 004F  
                ?_TMR2_DefaultInterruptHandler 0070                               _I2C_DO_SEND_STOP 05B4  
                            ??_I2C_SetCallback 0073                            I2C_Open@returnValue 0072  
                           _I2C_MasterSendNack 05C8                       ?_I2C_MasterEnableRestart 0070  
                        _I2C_DO_SEND_ADR_WRITE 0556                                      ___latbits 0002  
                                __pcstackBANK0 0057                                  __pcstackBANK1 00A6  
                               ??_I2C_DO_RESET 0070                       __size_of_TMR2_Initialize 0014  
                          ?_I2C_MasterSendNack 0070                   __end_of_I2C_DO_SEND_ADR_READ 0547  
                         ??_I2C_MasterClearIrq 0070                    __end_of_I2C_DO_ADDRESS_NACK 03D3  
                   __end_of_EUSART_Receive_ISR 02DF                               _I2C_MasterIsNack 0587  
                   __size_of_EUSART_Initialize 0032                      _I2C_DO_SEND_RESTART_WRITE 05BC  
             _EUSART_RxDefaultInterruptHandler 0065                               _I2C_MasterSetIrq 05D6  
                                    __pnvBANK0 0063                                      __pnvBANK1 00A0  
                        _rd2RegCompleteHandler 04A0                          __end_of_fsmStateTable 03F3  
                 __end_of_EUSART_RxDataHandler 0454                         _PIN_MANAGER_Initialize 01FD  
                        _wr2RegCompleteHandler 04C0                      ??_I2C_CallbackReturnReset 007A  
                  __end_of_I2C_MasterOperation 040D                           ??_I2C_MasterSendNack 0070  
                     rd2RegCompleteHandler@ptr 0079                                   _eusartRxHead 0056  
                                 _eusartRxTail 0055                         ??_I2C_MasterSendTxData 0070  
                 ??_INTERRUPT_InterruptManager 0062                   __size_of_I2C_DO_SEND_RESTART 0004  
                                     _BAUD1CON 019F                        I2C_MasterOperation@read 005A  
                                     _I2C_Open 0272                                       _T2CLKCON 001E  
                      ??_rd1RegCompleteHandler 007A                                 _eusartRxBuffer 0045  
                      ??_wr1RegCompleteHandler 007A                                       _LATAbits 010C  
       EUSART_SetErrorHandler@interruptHandler 00A6                                       _LATCbits 010E  
                                    clear_ram0 055D                                       _PIE1bits 0090  
                            _eusartRxLastError 0053                       __size_of_TMR2_StartTimer 0003  
          __size_of_INTERRUPT_InterruptManager 0020                                       _PIR1bits 0010  
              ??_EUSART_SetFramingErrorHandler 00A8                                       _PIR2bits 0011  
                        __end_of_I2C_MasterFsm 0367                    __end_of_I2C_DO_RX_NACK_STOP 05B0  
                         __CFG_WDTCPS$WDTCPS1F 0000                                       _SSP1CON1 0215  
                                     _SSP1CON2 0216      __end_of_EUSART_DefaultOverrunErrorHandler 05D0  
   __size_of_EUSART_DefaultOverrunErrorHandler 0004            ??_EUSART_DefaultOverrunErrorHandler 0070  
           ?_EUSART_DefaultOverrunErrorHandler 0070              _EUSART_DefaultOverrunErrorHandler 05CC  
                                     _TMR2_ISR 04DE                __end_of_I2C_MasterEnableRestart 05E5  
                                     _SSP1STAT 0214                          __end_of_I2C_SetBuffer 04DE  
                            ??_PWM3_Initialize 00A6                         ?_I2C_DO_SEND_ADR_WRITE 0070  
                     I2C_MasterSendTxData@data 0070                 ??_TMR2_DefaultInterruptHandler 0070  
            __size_of_TMR2_SetInterruptHandler 0009                       __size_of_TMR2_WriteTimer 0006  
                    ?_TMR2_SetInterruptHandler 00A6                       wr2RegCompleteHandler@ptr 0079  
                   ??_I2C_DO_SEND_RESTART_READ 0070                       ?_rdBlkRegCompleteHandler 0079  
                                   _I2C_Poller 0523                                     _I2C_Status 0020  
                                 ?_I2C_DO_IDLE 0070                                   ?_I2C_DO_RCEN 0070  
                            ??_TMR2_Initialize 00A8                         ?_rd2RegCompleteHandler 0079  
                             ??_I2C_MasterOpen 0070                         ?_wr2RegCompleteHandler 0079  
                             ??_I2C_MasterStop 0070                       ??_I2C_MasterWaitForEvent 0070  
                             ??_I2C_Initialize 00A6                           __end_of_I2C_DO_RESET 0592  
                     ??_I2C_Write1ByteRegister 005E                                       _StateBat 0069  
                      ??_OSCILLATOR_Initialize 00A6                            _EUSART_ErrorHandler 00A0  
                         _I2C_DO_SEND_ADR_READ 053F                           __size_of_MyTimer2ISR 0064  
                  ?_EUSART_DefaultErrorHandler 0070                             _PWM3_LoadDutyValue 0454  
                              _I2C_MasterClose 05EB                  I2C_SetAddressNackCallback@ptr 0077  
                              I2C_Open@address 0071                                _I2C_MasterStart 05E5  
                              _I2C_MasterWrite 05A0                           _EUSART_RxDataHandler 043D  
                 __size_of_TMR2_Counter8BitSet 0006                                       __ptext10 054F  
                                     __ptext11 0519                                       __ptext20 05F8  
                                     __ptext12 02DF                                       __ptext21 0454  
                                     __ptext13 0536                                       __ptext30 0340  
                                     __ptext22 0311                                       __ptext14 056F  
                                     __ptext31 03B0                                       __ptext23 04EA  
                                     __ptext15 0575                                       __ptext40 0581  
                                     __ptext32 058D                                       __ptext24 0272  
                                     __ptext16 057B                                       __ptext41 0238  
                                     __ptext33 05A8                                       __ptext25 04F6  
                                     __ptext50 05C4                                       __ptext42 01B2  
                                     __ptext34 05AC                                       __ptext26 05A0  
                                     __ptext18 04DE                                       __ptext51 05D9  
                                     __ptext43 0556                                       __ptext35 05B0  
                                     __ptext27 03F3                                       __ptext19 00F9  
                                     __ptext60 04C0                                       __ptext52 05C8  
                                     __ptext44 053F                                       __ptext36 05B4  
                                     __ptext28 0523                                       __ptext61 0502  
                                     __ptext53 05DC                                       __ptext45 0592  
                                     __ptext37 05B8                                       __ptext29 05A4  
                                     __ptext70 05EE                                       __ptext62 038C  
                                     __ptext54 05F4                                       __ptext46 0367  
                                     __ptext38 05BC                                       __ptext71 02A9  
                                     __ptext63 04D0                                       __ptext55 05F6  
                                     __ptext47 05D6                                       __ptext39 05C0  
                                     __ptext72 0041                                       __ptext64 05DF  
                                     __ptext56 0426                                       __ptext48 0587  
                                     __ptext73 0547                                       __ptext65 05E2  
                                     __ptext57 0490                                       __ptext49 0597  
                                     __ptext74 05CC                                       __ptext66 05E5  
                                     __ptext58 04A0                            ?_PWM3_LoadDutyValue 0070  
                                     __ptext75 05F9                                       __ptext67 040D  
                                     __ptext59 04B0                                       __ptext76 05F1  
                                     __ptext68 05E8                                       __ptext77 043D  
                                     __ptext69 05EB                                   _SSP1CON1bits 0215  
                                 _SSP1CON2bits 0216            __end_of_I2C_SetDataCompleteCallback 050E  
                  _I2C_SetDataCompleteCallback 0502                        ?_I2C_DO_RX_NACK_RESTART 0070  
                     __end_of_I2C_DO_SEND_STOP 05B8                                  __size_of_main 0055  
                         __CFG_WDTCWS$WDTCWSSW 0000                        ?_EUSART_SetErrorHandler 00A6  
                              _I2C_SetCallback 038C                  ??_I2C_SetDataCompleteCallback 0078  
                                   _RC1STAbits 019D                     I2C_Write1ByteRegister@data 005D  
EUSART_SetOverrunErrorHandler@interruptHandler 00A6                           ??_PWM3_LoadDutyValue 0072  
                                     int$flags 007E                          ?_I2C_DO_SEND_ADR_READ 0070  
                            ??_TMR2_StartTimer 00A6             __end_of_INTERRUPT_InterruptManager 0024  
                   _INTERRUPT_InterruptManager 0004          __end_of_EUSART_SetFramingErrorHandler 057B  
       __size_of_EUSART_SetFramingErrorHandler 0006                  _EUSART_SetFramingErrorHandler 0575  
                                 _SSP1STATbits 0214                       __end_of_I2C_MasterIsNack 058D  
                     __end_of_I2C_MasterSetIrq 05D9                                     _INTCONbits 000B  
                        ?_EUSART_RxDataHandler 0070                 __end_of_I2C_DO_RX_NACK_RESTART 05AC  
                  TMR2_Counter8BitSet@timerVal 00A6                                       intlevel1 0000  
                                  ?_I2C_Poller 0070                              ??_TMR2_WriteTimer 00A7  
             __size_of_I2C_MasterEnableRestart 0003                        ?_PIN_MANAGER_Initialize 0070  
               __end_of_EUSART_SetErrorHandler 0581                              __CFG_CLKOUTEN$OFF 0000  
                          _I2C_DO_SEND_RESTART 05B8                  __size_of_I2C_MasterDisableIrq 0003  
         __end_of_EUSART_SetRxInterruptHandler 053F          __size_of_EUSART_SetRxInterruptHandler 0009  
                 _EUSART_SetRxInterruptHandler 0536                __size_of_I2C_MasterWaitForEvent 0004  
              __size_of_I2C_Write1ByteRegister 002F                             _EUSART_Receive_ISR 02A9  
EUSART_SetFramingErrorHandler@interruptHandler 00A6                        __end_of_I2C_MasterClose 05EE  
                     __size_of_I2C_DO_TX_EMPTY 0025                    PWM3_LoadDutyValue@dutyValue 0070  
                      __end_of_I2C_MasterStart 05E8                        __end_of_I2C_MasterWrite 05A4  
                                __pstringtext1 03D3                           ?_I2C_DO_SEND_RESTART 0070  
                          ?_EUSART_Receive_ISR 0070                   __size_of_I2C_MasterGetRxData 0003  
                                   _TX1STAbits 019E                                     _TMR2_Start 05D3  
                  __size_of_I2C_MasterClearIrq 0003                             EUSART_Write@txData 0070  
                      __end_of_I2C_SetCallback 03B0                 __end_of_PIN_MANAGER_Initialize 0238  
               __size_of_rd1RegCompleteHandler 0010                  __end_of_rd1RegCompleteHandler 04C0  
                       __size_of_I2C_DO_RX_ACK 0004                 __size_of_wr1RegCompleteHandler 0010  
                         ??_EUSART_Receive_ISR 0071                          __size_of_I2C_DO_RESET 0005  
                __end_of_wr1RegCompleteHandler 04A0                          _TMR2_InterruptHandler 0063  
                 __size_of_I2C_DO_ADDRESS_NACK 0023                           __size_of_I2C_DO_IDLE 0005  
                         __size_of_I2C_DO_RCEN 0006                                _PWM3_Initialize 050E  
                           __size_of_I2C_DO_RX 003A                             __size_of_I2C_DO_TX 004B  
