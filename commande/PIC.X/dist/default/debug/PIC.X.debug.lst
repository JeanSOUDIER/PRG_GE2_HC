

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Mar 26 18:32:16 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2
    51                           	psect	text35,local,class=CODE,merge=1,delta=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,delta=2
    54                           	psect	text38,local,class=CODE,merge=1,delta=2
    55                           	psect	text39,local,class=CODE,merge=1,delta=2
    56                           	psect	text40,local,class=CODE,merge=1,delta=2
    57                           	psect	text41,local,class=CODE,merge=1,delta=2
    58                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    60                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text49,local,class=CODE,merge=1,delta=2
    66                           	psect	text50,local,class=CODE,merge=1,delta=2
    67                           	psect	text51,local,class=CODE,merge=1,delta=2
    68                           	psect	text52,local,class=CODE,merge=1,delta=2
    69                           	psect	text53,local,class=CODE,merge=1,delta=2
    70                           	psect	text54,local,class=CODE,merge=1,delta=2
    71                           	psect	text55,local,class=CODE,merge=1,delta=2
    72                           	psect	text56,local,class=CODE,merge=1,delta=2
    73                           	psect	text57,local,class=CODE,merge=1,delta=2
    74                           	psect	text58,local,class=CODE,merge=1,delta=2
    75                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text62,local,class=CODE,merge=1,delta=2
    79                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text65,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	intentry,global,class=CODE,delta=2
    83                           	psect	text67,local,class=CODE,merge=1,delta=2
    84                           	psect	text68,local,class=CODE,merge=1,delta=2
    85                           	psect	text69,local,class=CODE,merge=1,delta=2
    86                           	psect	text70,local,class=CODE,merge=1,delta=2
    87                           	psect	text71,local,class=CODE,merge=1,delta=2
    88                           	psect	text72,local,class=CODE,merge=1,delta=2
    89                           	psect	text73,local,class=CODE,merge=1,delta=2
    90                           	psect	text74,local,class=CODE,merge=1,delta=2
    91                           	psect	text75,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text76,local,class=CODE,merge=1,delta=2
    93                           	psect	text77,local,class=CODE,merge=1,delta=2
    94                           	psect	text78,local,class=CODE,merge=1,delta=2
    95                           	psect	text79,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text80,local,class=CODE,merge=1,inline,delta=2
    97                           	psect	text81,local,class=CODE,merge=1,delta=2
    98                           	psect	text82,local,class=CODE,merge=1,delta=2
    99                           	psect	text83,local,class=CODE,merge=1,delta=2
   100                           	psect	text84,local,class=CODE,merge=1,delta=2
   101                           	psect	text85,local,class=CODE,merge=1,delta=2
   102                           	psect	text86,local,class=CODE,merge=1,delta=2
   103                           	psect	text87,local,class=CODE,merge=1,delta=2
   104                           	psect	text88,local,class=CODE,merge=1,delta=2
   105                           	psect	text89,local,class=CODE,merge=1,delta=2
   106                           	psect	text90,local,class=CODE,merge=1,delta=2
   107                           	psect	text91,local,class=CODE,merge=1,delta=2
   108                           	psect	text92,local,class=CODE,merge=1,delta=2
   109                           	psect	text93,local,class=CODE,merge=1,delta=2
   110                           	psect	text94,local,class=CODE,merge=1,delta=2
   111                           	psect	text95,local,class=CODE,merge=1,delta=2
   112                           	psect	text96,local,class=CODE,merge=1,delta=2
   113                           	psect	text97,local,class=CODE,merge=1,inline,delta=2
   114                           	psect	text98,local,class=CODE,merge=1,inline,delta=2
   115                           	psect	text99,local,class=CODE,merge=1,inline,delta=2
   116                           	psect	text100,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   120                           	psect	text104,local,class=CODE,merge=1,delta=2
   121                           	psect	text105,local,class=CODE,merge=1,delta=2
   122                           	psect	text106,local,class=CODE,merge=1,delta=2
   123                           	psect	text107,local,class=CODE,merge=1,delta=2
   124                           	psect	text108,local,class=CODE,merge=1,delta=2
   125                           	psect	text109,local,class=CODE,merge=1,delta=2
   126                           	psect	text110,local,class=CODE,merge=1,delta=2
   127                           	psect	text111,local,class=CODE,merge=1,delta=2
   128                           	psect	text112,local,class=CODE,merge=1,delta=2
   129                           	psect	text113,local,class=CODE,merge=1,delta=2
   130                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text115,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text116,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text117,local,class=CODE,merge=1,delta=2
   134                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   137                           	psect	text121,local,class=CODE,merge=1,delta=2
   138                           	psect	text122,local,class=CODE,merge=1,delta=2
   139                           	psect	text123,local,class=CODE,merge=1,delta=2
   140                           	psect	text124,local,class=CODE,merge=1,delta=2
   141                           	psect	text125,local,class=CODE,merge=1,delta=2
   142                           	psect	text126,local,class=CODE,merge=1,delta=2
   143                           	psect	text127,local,class=CODE,merge=1,delta=2
   144                           	dabs	1,0x7E,2
   145  0000                     
   146                           ; Version 1.45
   147                           ; Generated 16/11/2017 GMT
   148                           ; 
   149                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   150                           ; All rights reserved.
   151                           ; 
   152                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   153                           ; 
   154                           ; Redistribution and use in source and binary forms, with or without modification, are
   155                           ; permitted provided that the following conditions are met:
   156                           ; 
   157                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   158                           ;        conditions and the following disclaimer.
   159                           ; 
   160                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   161                           ;        of conditions and the following disclaimer in the documentation and/or other
   162                           ;        materials provided with the distribution.
   163                           ; 
   164                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   165                           ;        software without specific prior written permission.
   166                           ; 
   167                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   168                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   169                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   170                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   171                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   172                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   173                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   174                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   175                           ; 
   176                           ; 
   177                           ; Code-generator required, PIC16F1619 Definitions
   178                           ; 
   179                           ; SFR Addresses
   180  0000                     	;# 
   181  0001                     	;# 
   182  0002                     	;# 
   183  0003                     	;# 
   184  0004                     	;# 
   185  0005                     	;# 
   186  0006                     	;# 
   187  0007                     	;# 
   188  0008                     	;# 
   189  0009                     	;# 
   190  000A                     	;# 
   191  000B                     	;# 
   192  000C                     	;# 
   193  000D                     	;# 
   194  000E                     	;# 
   195  0010                     	;# 
   196  0011                     	;# 
   197  0012                     	;# 
   198  0013                     	;# 
   199  0014                     	;# 
   200  0015                     	;# 
   201  0016                     	;# 
   202  0016                     	;# 
   203  0017                     	;# 
   204  0018                     	;# 
   205  0019                     	;# 
   206  001A                     	;# 
   207  001A                     	;# 
   208  001B                     	;# 
   209  001B                     	;# 
   210  001C                     	;# 
   211  001D                     	;# 
   212  001E                     	;# 
   213  001F                     	;# 
   214  008C                     	;# 
   215  008D                     	;# 
   216  008E                     	;# 
   217  0090                     	;# 
   218  0091                     	;# 
   219  0092                     	;# 
   220  0093                     	;# 
   221  0094                     	;# 
   222  0095                     	;# 
   223  0096                     	;# 
   224  0098                     	;# 
   225  0099                     	;# 
   226  009A                     	;# 
   227  009B                     	;# 
   228  009B                     	;# 
   229  009C                     	;# 
   230  009D                     	;# 
   231  009E                     	;# 
   232  009F                     	;# 
   233  010C                     	;# 
   234  010D                     	;# 
   235  010E                     	;# 
   236  0111                     	;# 
   237  0112                     	;# 
   238  0113                     	;# 
   239  0114                     	;# 
   240  0115                     	;# 
   241  0116                     	;# 
   242  0117                     	;# 
   243  0118                     	;# 
   244  0119                     	;# 
   245  011C                     	;# 
   246  018C                     	;# 
   247  018D                     	;# 
   248  018E                     	;# 
   249  0191                     	;# 
   250  0191                     	;# 
   251  0192                     	;# 
   252  0193                     	;# 
   253  0193                     	;# 
   254  0194                     	;# 
   255  0195                     	;# 
   256  0196                     	;# 
   257  0197                     	;# 
   258  0199                     	;# 
   259  0199                     	;# 
   260  0199                     	;# 
   261  019A                     	;# 
   262  019A                     	;# 
   263  019A                     	;# 
   264  019B                     	;# 
   265  019B                     	;# 
   266  019B                     	;# 
   267  019B                     	;# 
   268  019B                     	;# 
   269  019C                     	;# 
   270  019C                     	;# 
   271  019C                     	;# 
   272  019D                     	;# 
   273  019D                     	;# 
   274  019D                     	;# 
   275  019E                     	;# 
   276  019E                     	;# 
   277  019E                     	;# 
   278  019F                     	;# 
   279  019F                     	;# 
   280  019F                     	;# 
   281  019F                     	;# 
   282  019F                     	;# 
   283  020C                     	;# 
   284  020D                     	;# 
   285  020E                     	;# 
   286  0211                     	;# 
   287  0211                     	;# 
   288  0212                     	;# 
   289  0212                     	;# 
   290  0213                     	;# 
   291  0213                     	;# 
   292  0214                     	;# 
   293  0214                     	;# 
   294  0215                     	;# 
   295  0215                     	;# 
   296  0215                     	;# 
   297  0215                     	;# 
   298  0216                     	;# 
   299  0216                     	;# 
   300  0217                     	;# 
   301  0217                     	;# 
   302  028C                     	;# 
   303  028D                     	;# 
   304  028E                     	;# 
   305  0291                     	;# 
   306  0291                     	;# 
   307  0292                     	;# 
   308  0293                     	;# 
   309  0294                     	;# 
   310  0298                     	;# 
   311  0298                     	;# 
   312  0299                     	;# 
   313  029A                     	;# 
   314  029B                     	;# 
   315  029E                     	;# 
   316  030C                     	;# 
   317  030D                     	;# 
   318  030E                     	;# 
   319  038C                     	;# 
   320  038D                     	;# 
   321  038E                     	;# 
   322  0391                     	;# 
   323  0392                     	;# 
   324  0393                     	;# 
   325  0394                     	;# 
   326  0395                     	;# 
   327  0396                     	;# 
   328  0397                     	;# 
   329  0398                     	;# 
   330  0399                     	;# 
   331  040E                     	;# 
   332  0413                     	;# 
   333  0413                     	;# 
   334  0414                     	;# 
   335  0414                     	;# 
   336  0415                     	;# 
   337  0416                     	;# 
   338  0417                     	;# 
   339  0418                     	;# 
   340  041A                     	;# 
   341  041A                     	;# 
   342  041B                     	;# 
   343  041B                     	;# 
   344  041C                     	;# 
   345  041D                     	;# 
   346  041E                     	;# 
   347  041F                     	;# 
   348  0493                     	;# 
   349  0494                     	;# 
   350  0495                     	;# 
   351  0496                     	;# 
   352  049A                     	;# 
   353  049B                     	;# 
   354  049C                     	;# 
   355  049D                     	;# 
   356  058C                     	;# 
   357  058C                     	;# 
   358  058D                     	;# 
   359  058E                     	;# 
   360  058E                     	;# 
   361  058F                     	;# 
   362  0590                     	;# 
   363  0590                     	;# 
   364  0591                     	;# 
   365  0592                     	;# 
   366  0592                     	;# 
   367  0593                     	;# 
   368  0594                     	;# 
   369  0594                     	;# 
   370  0595                     	;# 
   371  0596                     	;# 
   372  0596                     	;# 
   373  0597                     	;# 
   374  0598                     	;# 
   375  0599                     	;# 
   376  059A                     	;# 
   377  059B                     	;# 
   378  059B                     	;# 
   379  059C                     	;# 
   380  059D                     	;# 
   381  060C                     	;# 
   382  060C                     	;# 
   383  060D                     	;# 
   384  060E                     	;# 
   385  060F                     	;# 
   386  060F                     	;# 
   387  0610                     	;# 
   388  0611                     	;# 
   389  0612                     	;# 
   390  0613                     	;# 
   391  0614                     	;# 
   392  0617                     	;# 
   393  0618                     	;# 
   394  0619                     	;# 
   395  061A                     	;# 
   396  061B                     	;# 
   397  061C                     	;# 
   398  0691                     	;# 
   399  0692                     	;# 
   400  0693                     	;# 
   401  0694                     	;# 
   402  0695                     	;# 
   403  0696                     	;# 
   404  0697                     	;# 
   405  0699                     	;# 
   406  069A                     	;# 
   407  0711                     	;# 
   408  0712                     	;# 
   409  0713                     	;# 
   410  0714                     	;# 
   411  0715                     	;# 
   412  0718                     	;# 
   413  0718                     	;# 
   414  0719                     	;# 
   415  071A                     	;# 
   416  071A                     	;# 
   417  071B                     	;# 
   418  071C                     	;# 
   419  071D                     	;# 
   420  0791                     	;# 
   421  0791                     	;# 
   422  0792                     	;# 
   423  0793                     	;# 
   424  0793                     	;# 
   425  0794                     	;# 
   426  0795                     	;# 
   427  0795                     	;# 
   428  0796                     	;# 
   429  0797                     	;# 
   430  0797                     	;# 
   431  0798                     	;# 
   432  0799                     	;# 
   433  079A                     	;# 
   434  080C                     	;# 
   435  080C                     	;# 
   436  080D                     	;# 
   437  080E                     	;# 
   438  080E                     	;# 
   439  080F                     	;# 
   440  0810                     	;# 
   441  0810                     	;# 
   442  0811                     	;# 
   443  0812                     	;# 
   444  0812                     	;# 
   445  0813                     	;# 
   446  0814                     	;# 
   447  0815                     	;# 
   448  0816                     	;# 
   449  0817                     	;# 
   450  0818                     	;# 
   451  0819                     	;# 
   452  081A                     	;# 
   453  081A                     	;# 
   454  081B                     	;# 
   455  081C                     	;# 
   456  081C                     	;# 
   457  081D                     	;# 
   458  088C                     	;# 
   459  088D                     	;# 
   460  088E                     	;# 
   461  088F                     	;# 
   462  088F                     	;# 
   463  0890                     	;# 
   464  0891                     	;# 
   465  0892                     	;# 
   466  0893                     	;# 
   467  0893                     	;# 
   468  0894                     	;# 
   469  0895                     	;# 
   470  0896                     	;# 
   471  0897                     	;# 
   472  0897                     	;# 
   473  0898                     	;# 
   474  0899                     	;# 
   475  0D8C                     	;# 
   476  0D8C                     	;# 
   477  0D8D                     	;# 
   478  0D8E                     	;# 
   479  0D8F                     	;# 
   480  0D8F                     	;# 
   481  0D90                     	;# 
   482  0D91                     	;# 
   483  0D92                     	;# 
   484  0D92                     	;# 
   485  0D93                     	;# 
   486  0D94                     	;# 
   487  0D95                     	;# 
   488  0D95                     	;# 
   489  0D96                     	;# 
   490  0D97                     	;# 
   491  0D98                     	;# 
   492  0D99                     	;# 
   493  0D9A                     	;# 
   494  0D9B                     	;# 
   495  0D9C                     	;# 
   496  0D9D                     	;# 
   497  0D9E                     	;# 
   498  0D9E                     	;# 
   499  0D9F                     	;# 
   500  0DA0                     	;# 
   501  0DA1                     	;# 
   502  0DA1                     	;# 
   503  0DA2                     	;# 
   504  0DA3                     	;# 
   505  0DA4                     	;# 
   506  0DA4                     	;# 
   507  0DA5                     	;# 
   508  0DA6                     	;# 
   509  0DA7                     	;# 
   510  0DA7                     	;# 
   511  0DA8                     	;# 
   512  0DA9                     	;# 
   513  0DAA                     	;# 
   514  0DAB                     	;# 
   515  0DAC                     	;# 
   516  0DAD                     	;# 
   517  0DAE                     	;# 
   518  0DAF                     	;# 
   519  0E0F                     	;# 
   520  0E10                     	;# 
   521  0E11                     	;# 
   522  0E12                     	;# 
   523  0E13                     	;# 
   524  0E14                     	;# 
   525  0E15                     	;# 
   526  0E16                     	;# 
   527  0E17                     	;# 
   528  0E18                     	;# 
   529  0E19                     	;# 
   530  0E1A                     	;# 
   531  0E1B                     	;# 
   532  0E1C                     	;# 
   533  0E1D                     	;# 
   534  0E1E                     	;# 
   535  0E1F                     	;# 
   536  0E20                     	;# 
   537  0E21                     	;# 
   538  0E22                     	;# 
   539  0E23                     	;# 
   540  0E24                     	;# 
   541  0E25                     	;# 
   542  0E26                     	;# 
   543  0E27                     	;# 
   544  0E28                     	;# 
   545  0E29                     	;# 
   546  0E2A                     	;# 
   547  0E2B                     	;# 
   548  0E2C                     	;# 
   549  0E2D                     	;# 
   550  0E2E                     	;# 
   551  0E90                     	;# 
   552  0E91                     	;# 
   553  0E92                     	;# 
   554  0E94                     	;# 
   555  0E95                     	;# 
   556  0E9C                     	;# 
   557  0E9D                     	;# 
   558  0E9E                     	;# 
   559  0E9F                     	;# 
   560  0EA0                     	;# 
   561  0EA1                     	;# 
   562  0EA2                     	;# 
   563  0EA3                     	;# 
   564  0EA4                     	;# 
   565  0EA5                     	;# 
   566  0EA6                     	;# 
   567  0EA7                     	;# 
   568  0F0F                     	;# 
   569  0F10                     	;# 
   570  0F11                     	;# 
   571  0F12                     	;# 
   572  0F13                     	;# 
   573  0F14                     	;# 
   574  0F15                     	;# 
   575  0F16                     	;# 
   576  0F17                     	;# 
   577  0F18                     	;# 
   578  0F19                     	;# 
   579  0F1A                     	;# 
   580  0F1B                     	;# 
   581  0F1C                     	;# 
   582  0F1D                     	;# 
   583  0F1E                     	;# 
   584  0F1F                     	;# 
   585  0F20                     	;# 
   586  0F21                     	;# 
   587  0F22                     	;# 
   588  0F23                     	;# 
   589  0F24                     	;# 
   590  0F25                     	;# 
   591  0F26                     	;# 
   592  0F27                     	;# 
   593  0F28                     	;# 
   594  0F29                     	;# 
   595  0F2A                     	;# 
   596  0F2B                     	;# 
   597  0F2C                     	;# 
   598  0F2D                     	;# 
   599  0F2E                     	;# 
   600  0F2F                     	;# 
   601  0F30                     	;# 
   602  0F31                     	;# 
   603  0F32                     	;# 
   604  0F33                     	;# 
   605  0F34                     	;# 
   606  0F35                     	;# 
   607  0F36                     	;# 
   608  0F37                     	;# 
   609  0FE4                     	;# 
   610  0FE5                     	;# 
   611  0FE6                     	;# 
   612  0FE7                     	;# 
   613  0FE8                     	;# 
   614  0FE9                     	;# 
   615  0FEA                     	;# 
   616  0FEB                     	;# 
   617  0FED                     	;# 
   618  0FEE                     	;# 
   619  0FEF                     	;# 
   620  0000                     	;# 
   621  0001                     	;# 
   622  0002                     	;# 
   623  0003                     	;# 
   624  0004                     	;# 
   625  0005                     	;# 
   626  0006                     	;# 
   627  0007                     	;# 
   628  0008                     	;# 
   629  0009                     	;# 
   630  000A                     	;# 
   631  000B                     	;# 
   632  000C                     	;# 
   633  000D                     	;# 
   634  000E                     	;# 
   635  0010                     	;# 
   636  0011                     	;# 
   637  0012                     	;# 
   638  0013                     	;# 
   639  0014                     	;# 
   640  0015                     	;# 
   641  0016                     	;# 
   642  0016                     	;# 
   643  0017                     	;# 
   644  0018                     	;# 
   645  0019                     	;# 
   646  001A                     	;# 
   647  001A                     	;# 
   648  001B                     	;# 
   649  001B                     	;# 
   650  001C                     	;# 
   651  001D                     	;# 
   652  001E                     	;# 
   653  001F                     	;# 
   654  008C                     	;# 
   655  008D                     	;# 
   656  008E                     	;# 
   657  0090                     	;# 
   658  0091                     	;# 
   659  0092                     	;# 
   660  0093                     	;# 
   661  0094                     	;# 
   662  0095                     	;# 
   663  0096                     	;# 
   664  0098                     	;# 
   665  0099                     	;# 
   666  009A                     	;# 
   667  009B                     	;# 
   668  009B                     	;# 
   669  009C                     	;# 
   670  009D                     	;# 
   671  009E                     	;# 
   672  009F                     	;# 
   673  010C                     	;# 
   674  010D                     	;# 
   675  010E                     	;# 
   676  0111                     	;# 
   677  0112                     	;# 
   678  0113                     	;# 
   679  0114                     	;# 
   680  0115                     	;# 
   681  0116                     	;# 
   682  0117                     	;# 
   683  0118                     	;# 
   684  0119                     	;# 
   685  011C                     	;# 
   686  018C                     	;# 
   687  018D                     	;# 
   688  018E                     	;# 
   689  0191                     	;# 
   690  0191                     	;# 
   691  0192                     	;# 
   692  0193                     	;# 
   693  0193                     	;# 
   694  0194                     	;# 
   695  0195                     	;# 
   696  0196                     	;# 
   697  0197                     	;# 
   698  0199                     	;# 
   699  0199                     	;# 
   700  0199                     	;# 
   701  019A                     	;# 
   702  019A                     	;# 
   703  019A                     	;# 
   704  019B                     	;# 
   705  019B                     	;# 
   706  019B                     	;# 
   707  019B                     	;# 
   708  019B                     	;# 
   709  019C                     	;# 
   710  019C                     	;# 
   711  019C                     	;# 
   712  019D                     	;# 
   713  019D                     	;# 
   714  019D                     	;# 
   715  019E                     	;# 
   716  019E                     	;# 
   717  019E                     	;# 
   718  019F                     	;# 
   719  019F                     	;# 
   720  019F                     	;# 
   721  019F                     	;# 
   722  019F                     	;# 
   723  020C                     	;# 
   724  020D                     	;# 
   725  020E                     	;# 
   726  0211                     	;# 
   727  0211                     	;# 
   728  0212                     	;# 
   729  0212                     	;# 
   730  0213                     	;# 
   731  0213                     	;# 
   732  0214                     	;# 
   733  0214                     	;# 
   734  0215                     	;# 
   735  0215                     	;# 
   736  0215                     	;# 
   737  0215                     	;# 
   738  0216                     	;# 
   739  0216                     	;# 
   740  0217                     	;# 
   741  0217                     	;# 
   742  028C                     	;# 
   743  028D                     	;# 
   744  028E                     	;# 
   745  0291                     	;# 
   746  0291                     	;# 
   747  0292                     	;# 
   748  0293                     	;# 
   749  0294                     	;# 
   750  0298                     	;# 
   751  0298                     	;# 
   752  0299                     	;# 
   753  029A                     	;# 
   754  029B                     	;# 
   755  029E                     	;# 
   756  030C                     	;# 
   757  030D                     	;# 
   758  030E                     	;# 
   759  038C                     	;# 
   760  038D                     	;# 
   761  038E                     	;# 
   762  0391                     	;# 
   763  0392                     	;# 
   764  0393                     	;# 
   765  0394                     	;# 
   766  0395                     	;# 
   767  0396                     	;# 
   768  0397                     	;# 
   769  0398                     	;# 
   770  0399                     	;# 
   771  040E                     	;# 
   772  0413                     	;# 
   773  0413                     	;# 
   774  0414                     	;# 
   775  0414                     	;# 
   776  0415                     	;# 
   777  0416                     	;# 
   778  0417                     	;# 
   779  0418                     	;# 
   780  041A                     	;# 
   781  041A                     	;# 
   782  041B                     	;# 
   783  041B                     	;# 
   784  041C                     	;# 
   785  041D                     	;# 
   786  041E                     	;# 
   787  041F                     	;# 
   788  0493                     	;# 
   789  0494                     	;# 
   790  0495                     	;# 
   791  0496                     	;# 
   792  049A                     	;# 
   793  049B                     	;# 
   794  049C                     	;# 
   795  049D                     	;# 
   796  058C                     	;# 
   797  058C                     	;# 
   798  058D                     	;# 
   799  058E                     	;# 
   800  058E                     	;# 
   801  058F                     	;# 
   802  0590                     	;# 
   803  0590                     	;# 
   804  0591                     	;# 
   805  0592                     	;# 
   806  0592                     	;# 
   807  0593                     	;# 
   808  0594                     	;# 
   809  0594                     	;# 
   810  0595                     	;# 
   811  0596                     	;# 
   812  0596                     	;# 
   813  0597                     	;# 
   814  0598                     	;# 
   815  0599                     	;# 
   816  059A                     	;# 
   817  059B                     	;# 
   818  059B                     	;# 
   819  059C                     	;# 
   820  059D                     	;# 
   821  060C                     	;# 
   822  060C                     	;# 
   823  060D                     	;# 
   824  060E                     	;# 
   825  060F                     	;# 
   826  060F                     	;# 
   827  0610                     	;# 
   828  0611                     	;# 
   829  0612                     	;# 
   830  0613                     	;# 
   831  0614                     	;# 
   832  0617                     	;# 
   833  0618                     	;# 
   834  0619                     	;# 
   835  061A                     	;# 
   836  061B                     	;# 
   837  061C                     	;# 
   838  0691                     	;# 
   839  0692                     	;# 
   840  0693                     	;# 
   841  0694                     	;# 
   842  0695                     	;# 
   843  0696                     	;# 
   844  0697                     	;# 
   845  0699                     	;# 
   846  069A                     	;# 
   847  0711                     	;# 
   848  0712                     	;# 
   849  0713                     	;# 
   850  0714                     	;# 
   851  0715                     	;# 
   852  0718                     	;# 
   853  0718                     	;# 
   854  0719                     	;# 
   855  071A                     	;# 
   856  071A                     	;# 
   857  071B                     	;# 
   858  071C                     	;# 
   859  071D                     	;# 
   860  0791                     	;# 
   861  0791                     	;# 
   862  0792                     	;# 
   863  0793                     	;# 
   864  0793                     	;# 
   865  0794                     	;# 
   866  0795                     	;# 
   867  0795                     	;# 
   868  0796                     	;# 
   869  0797                     	;# 
   870  0797                     	;# 
   871  0798                     	;# 
   872  0799                     	;# 
   873  079A                     	;# 
   874  080C                     	;# 
   875  080C                     	;# 
   876  080D                     	;# 
   877  080E                     	;# 
   878  080E                     	;# 
   879  080F                     	;# 
   880  0810                     	;# 
   881  0810                     	;# 
   882  0811                     	;# 
   883  0812                     	;# 
   884  0812                     	;# 
   885  0813                     	;# 
   886  0814                     	;# 
   887  0815                     	;# 
   888  0816                     	;# 
   889  0817                     	;# 
   890  0818                     	;# 
   891  0819                     	;# 
   892  081A                     	;# 
   893  081A                     	;# 
   894  081B                     	;# 
   895  081C                     	;# 
   896  081C                     	;# 
   897  081D                     	;# 
   898  088C                     	;# 
   899  088D                     	;# 
   900  088E                     	;# 
   901  088F                     	;# 
   902  088F                     	;# 
   903  0890                     	;# 
   904  0891                     	;# 
   905  0892                     	;# 
   906  0893                     	;# 
   907  0893                     	;# 
   908  0894                     	;# 
   909  0895                     	;# 
   910  0896                     	;# 
   911  0897                     	;# 
   912  0897                     	;# 
   913  0898                     	;# 
   914  0899                     	;# 
   915  0D8C                     	;# 
   916  0D8C                     	;# 
   917  0D8D                     	;# 
   918  0D8E                     	;# 
   919  0D8F                     	;# 
   920  0D8F                     	;# 
   921  0D90                     	;# 
   922  0D91                     	;# 
   923  0D92                     	;# 
   924  0D92                     	;# 
   925  0D93                     	;# 
   926  0D94                     	;# 
   927  0D95                     	;# 
   928  0D95                     	;# 
   929  0D96                     	;# 
   930  0D97                     	;# 
   931  0D98                     	;# 
   932  0D99                     	;# 
   933  0D9A                     	;# 
   934  0D9B                     	;# 
   935  0D9C                     	;# 
   936  0D9D                     	;# 
   937  0D9E                     	;# 
   938  0D9E                     	;# 
   939  0D9F                     	;# 
   940  0DA0                     	;# 
   941  0DA1                     	;# 
   942  0DA1                     	;# 
   943  0DA2                     	;# 
   944  0DA3                     	;# 
   945  0DA4                     	;# 
   946  0DA4                     	;# 
   947  0DA5                     	;# 
   948  0DA6                     	;# 
   949  0DA7                     	;# 
   950  0DA7                     	;# 
   951  0DA8                     	;# 
   952  0DA9                     	;# 
   953  0DAA                     	;# 
   954  0DAB                     	;# 
   955  0DAC                     	;# 
   956  0DAD                     	;# 
   957  0DAE                     	;# 
   958  0DAF                     	;# 
   959  0E0F                     	;# 
   960  0E10                     	;# 
   961  0E11                     	;# 
   962  0E12                     	;# 
   963  0E13                     	;# 
   964  0E14                     	;# 
   965  0E15                     	;# 
   966  0E16                     	;# 
   967  0E17                     	;# 
   968  0E18                     	;# 
   969  0E19                     	;# 
   970  0E1A                     	;# 
   971  0E1B                     	;# 
   972  0E1C                     	;# 
   973  0E1D                     	;# 
   974  0E1E                     	;# 
   975  0E1F                     	;# 
   976  0E20                     	;# 
   977  0E21                     	;# 
   978  0E22                     	;# 
   979  0E23                     	;# 
   980  0E24                     	;# 
   981  0E25                     	;# 
   982  0E26                     	;# 
   983  0E27                     	;# 
   984  0E28                     	;# 
   985  0E29                     	;# 
   986  0E2A                     	;# 
   987  0E2B                     	;# 
   988  0E2C                     	;# 
   989  0E2D                     	;# 
   990  0E2E                     	;# 
   991  0E90                     	;# 
   992  0E91                     	;# 
   993  0E92                     	;# 
   994  0E94                     	;# 
   995  0E95                     	;# 
   996  0E9C                     	;# 
   997  0E9D                     	;# 
   998  0E9E                     	;# 
   999  0E9F                     	;# 
  1000  0EA0                     	;# 
  1001  0EA1                     	;# 
  1002  0EA2                     	;# 
  1003  0EA3                     	;# 
  1004  0EA4                     	;# 
  1005  0EA5                     	;# 
  1006  0EA6                     	;# 
  1007  0EA7                     	;# 
  1008  0F0F                     	;# 
  1009  0F10                     	;# 
  1010  0F11                     	;# 
  1011  0F12                     	;# 
  1012  0F13                     	;# 
  1013  0F14                     	;# 
  1014  0F15                     	;# 
  1015  0F16                     	;# 
  1016  0F17                     	;# 
  1017  0F18                     	;# 
  1018  0F19                     	;# 
  1019  0F1A                     	;# 
  1020  0F1B                     	;# 
  1021  0F1C                     	;# 
  1022  0F1D                     	;# 
  1023  0F1E                     	;# 
  1024  0F1F                     	;# 
  1025  0F20                     	;# 
  1026  0F21                     	;# 
  1027  0F22                     	;# 
  1028  0F23                     	;# 
  1029  0F24                     	;# 
  1030  0F25                     	;# 
  1031  0F26                     	;# 
  1032  0F27                     	;# 
  1033  0F28                     	;# 
  1034  0F29                     	;# 
  1035  0F2A                     	;# 
  1036  0F2B                     	;# 
  1037  0F2C                     	;# 
  1038  0F2D                     	;# 
  1039  0F2E                     	;# 
  1040  0F2F                     	;# 
  1041  0F30                     	;# 
  1042  0F31                     	;# 
  1043  0F32                     	;# 
  1044  0F33                     	;# 
  1045  0F34                     	;# 
  1046  0F35                     	;# 
  1047  0F36                     	;# 
  1048  0F37                     	;# 
  1049  0FE4                     	;# 
  1050  0FE5                     	;# 
  1051  0FE6                     	;# 
  1052  0FE7                     	;# 
  1053  0FE8                     	;# 
  1054  0FE9                     	;# 
  1055  0FEA                     	;# 
  1056  0FEB                     	;# 
  1057  0FED                     	;# 
  1058  0FEE                     	;# 
  1059  0FEF                     	;# 
  1060  0000                     	;# 
  1061  0001                     	;# 
  1062  0002                     	;# 
  1063  0003                     	;# 
  1064  0004                     	;# 
  1065  0005                     	;# 
  1066  0006                     	;# 
  1067  0007                     	;# 
  1068  0008                     	;# 
  1069  0009                     	;# 
  1070  000A                     	;# 
  1071  000B                     	;# 
  1072  000C                     	;# 
  1073  000D                     	;# 
  1074  000E                     	;# 
  1075  0010                     	;# 
  1076  0011                     	;# 
  1077  0012                     	;# 
  1078  0013                     	;# 
  1079  0014                     	;# 
  1080  0015                     	;# 
  1081  0016                     	;# 
  1082  0016                     	;# 
  1083  0017                     	;# 
  1084  0018                     	;# 
  1085  0019                     	;# 
  1086  001A                     	;# 
  1087  001A                     	;# 
  1088  001B                     	;# 
  1089  001B                     	;# 
  1090  001C                     	;# 
  1091  001D                     	;# 
  1092  001E                     	;# 
  1093  001F                     	;# 
  1094  008C                     	;# 
  1095  008D                     	;# 
  1096  008E                     	;# 
  1097  0090                     	;# 
  1098  0091                     	;# 
  1099  0092                     	;# 
  1100  0093                     	;# 
  1101  0094                     	;# 
  1102  0095                     	;# 
  1103  0096                     	;# 
  1104  0098                     	;# 
  1105  0099                     	;# 
  1106  009A                     	;# 
  1107  009B                     	;# 
  1108  009B                     	;# 
  1109  009C                     	;# 
  1110  009D                     	;# 
  1111  009E                     	;# 
  1112  009F                     	;# 
  1113  010C                     	;# 
  1114  010D                     	;# 
  1115  010E                     	;# 
  1116  0111                     	;# 
  1117  0112                     	;# 
  1118  0113                     	;# 
  1119  0114                     	;# 
  1120  0115                     	;# 
  1121  0116                     	;# 
  1122  0117                     	;# 
  1123  0118                     	;# 
  1124  0119                     	;# 
  1125  011C                     	;# 
  1126  018C                     	;# 
  1127  018D                     	;# 
  1128  018E                     	;# 
  1129  0191                     	;# 
  1130  0191                     	;# 
  1131  0192                     	;# 
  1132  0193                     	;# 
  1133  0193                     	;# 
  1134  0194                     	;# 
  1135  0195                     	;# 
  1136  0196                     	;# 
  1137  0197                     	;# 
  1138  0199                     	;# 
  1139  0199                     	;# 
  1140  0199                     	;# 
  1141  019A                     	;# 
  1142  019A                     	;# 
  1143  019A                     	;# 
  1144  019B                     	;# 
  1145  019B                     	;# 
  1146  019B                     	;# 
  1147  019B                     	;# 
  1148  019B                     	;# 
  1149  019C                     	;# 
  1150  019C                     	;# 
  1151  019C                     	;# 
  1152  019D                     	;# 
  1153  019D                     	;# 
  1154  019D                     	;# 
  1155  019E                     	;# 
  1156  019E                     	;# 
  1157  019E                     	;# 
  1158  019F                     	;# 
  1159  019F                     	;# 
  1160  019F                     	;# 
  1161  019F                     	;# 
  1162  019F                     	;# 
  1163  020C                     	;# 
  1164  020D                     	;# 
  1165  020E                     	;# 
  1166  0211                     	;# 
  1167  0211                     	;# 
  1168  0212                     	;# 
  1169  0212                     	;# 
  1170  0213                     	;# 
  1171  0213                     	;# 
  1172  0214                     	;# 
  1173  0214                     	;# 
  1174  0215                     	;# 
  1175  0215                     	;# 
  1176  0215                     	;# 
  1177  0215                     	;# 
  1178  0216                     	;# 
  1179  0216                     	;# 
  1180  0217                     	;# 
  1181  0217                     	;# 
  1182  028C                     	;# 
  1183  028D                     	;# 
  1184  028E                     	;# 
  1185  0291                     	;# 
  1186  0291                     	;# 
  1187  0292                     	;# 
  1188  0293                     	;# 
  1189  0294                     	;# 
  1190  0298                     	;# 
  1191  0298                     	;# 
  1192  0299                     	;# 
  1193  029A                     	;# 
  1194  029B                     	;# 
  1195  029E                     	;# 
  1196  030C                     	;# 
  1197  030D                     	;# 
  1198  030E                     	;# 
  1199  038C                     	;# 
  1200  038D                     	;# 
  1201  038E                     	;# 
  1202  0391                     	;# 
  1203  0392                     	;# 
  1204  0393                     	;# 
  1205  0394                     	;# 
  1206  0395                     	;# 
  1207  0396                     	;# 
  1208  0397                     	;# 
  1209  0398                     	;# 
  1210  0399                     	;# 
  1211  040E                     	;# 
  1212  0413                     	;# 
  1213  0413                     	;# 
  1214  0414                     	;# 
  1215  0414                     	;# 
  1216  0415                     	;# 
  1217  0416                     	;# 
  1218  0417                     	;# 
  1219  0418                     	;# 
  1220  041A                     	;# 
  1221  041A                     	;# 
  1222  041B                     	;# 
  1223  041B                     	;# 
  1224  041C                     	;# 
  1225  041D                     	;# 
  1226  041E                     	;# 
  1227  041F                     	;# 
  1228  0493                     	;# 
  1229  0494                     	;# 
  1230  0495                     	;# 
  1231  0496                     	;# 
  1232  049A                     	;# 
  1233  049B                     	;# 
  1234  049C                     	;# 
  1235  049D                     	;# 
  1236  058C                     	;# 
  1237  058C                     	;# 
  1238  058D                     	;# 
  1239  058E                     	;# 
  1240  058E                     	;# 
  1241  058F                     	;# 
  1242  0590                     	;# 
  1243  0590                     	;# 
  1244  0591                     	;# 
  1245  0592                     	;# 
  1246  0592                     	;# 
  1247  0593                     	;# 
  1248  0594                     	;# 
  1249  0594                     	;# 
  1250  0595                     	;# 
  1251  0596                     	;# 
  1252  0596                     	;# 
  1253  0597                     	;# 
  1254  0598                     	;# 
  1255  0599                     	;# 
  1256  059A                     	;# 
  1257  059B                     	;# 
  1258  059B                     	;# 
  1259  059C                     	;# 
  1260  059D                     	;# 
  1261  060C                     	;# 
  1262  060C                     	;# 
  1263  060D                     	;# 
  1264  060E                     	;# 
  1265  060F                     	;# 
  1266  060F                     	;# 
  1267  0610                     	;# 
  1268  0611                     	;# 
  1269  0612                     	;# 
  1270  0613                     	;# 
  1271  0614                     	;# 
  1272  0617                     	;# 
  1273  0618                     	;# 
  1274  0619                     	;# 
  1275  061A                     	;# 
  1276  061B                     	;# 
  1277  061C                     	;# 
  1278  0691                     	;# 
  1279  0692                     	;# 
  1280  0693                     	;# 
  1281  0694                     	;# 
  1282  0695                     	;# 
  1283  0696                     	;# 
  1284  0697                     	;# 
  1285  0699                     	;# 
  1286  069A                     	;# 
  1287  0711                     	;# 
  1288  0712                     	;# 
  1289  0713                     	;# 
  1290  0714                     	;# 
  1291  0715                     	;# 
  1292  0718                     	;# 
  1293  0718                     	;# 
  1294  0719                     	;# 
  1295  071A                     	;# 
  1296  071A                     	;# 
  1297  071B                     	;# 
  1298  071C                     	;# 
  1299  071D                     	;# 
  1300  0791                     	;# 
  1301  0791                     	;# 
  1302  0792                     	;# 
  1303  0793                     	;# 
  1304  0793                     	;# 
  1305  0794                     	;# 
  1306  0795                     	;# 
  1307  0795                     	;# 
  1308  0796                     	;# 
  1309  0797                     	;# 
  1310  0797                     	;# 
  1311  0798                     	;# 
  1312  0799                     	;# 
  1313  079A                     	;# 
  1314  080C                     	;# 
  1315  080C                     	;# 
  1316  080D                     	;# 
  1317  080E                     	;# 
  1318  080E                     	;# 
  1319  080F                     	;# 
  1320  0810                     	;# 
  1321  0810                     	;# 
  1322  0811                     	;# 
  1323  0812                     	;# 
  1324  0812                     	;# 
  1325  0813                     	;# 
  1326  0814                     	;# 
  1327  0815                     	;# 
  1328  0816                     	;# 
  1329  0817                     	;# 
  1330  0818                     	;# 
  1331  0819                     	;# 
  1332  081A                     	;# 
  1333  081A                     	;# 
  1334  081B                     	;# 
  1335  081C                     	;# 
  1336  081C                     	;# 
  1337  081D                     	;# 
  1338  088C                     	;# 
  1339  088D                     	;# 
  1340  088E                     	;# 
  1341  088F                     	;# 
  1342  088F                     	;# 
  1343  0890                     	;# 
  1344  0891                     	;# 
  1345  0892                     	;# 
  1346  0893                     	;# 
  1347  0893                     	;# 
  1348  0894                     	;# 
  1349  0895                     	;# 
  1350  0896                     	;# 
  1351  0897                     	;# 
  1352  0897                     	;# 
  1353  0898                     	;# 
  1354  0899                     	;# 
  1355  0D8C                     	;# 
  1356  0D8C                     	;# 
  1357  0D8D                     	;# 
  1358  0D8E                     	;# 
  1359  0D8F                     	;# 
  1360  0D8F                     	;# 
  1361  0D90                     	;# 
  1362  0D91                     	;# 
  1363  0D92                     	;# 
  1364  0D92                     	;# 
  1365  0D93                     	;# 
  1366  0D94                     	;# 
  1367  0D95                     	;# 
  1368  0D95                     	;# 
  1369  0D96                     	;# 
  1370  0D97                     	;# 
  1371  0D98                     	;# 
  1372  0D99                     	;# 
  1373  0D9A                     	;# 
  1374  0D9B                     	;# 
  1375  0D9C                     	;# 
  1376  0D9D                     	;# 
  1377  0D9E                     	;# 
  1378  0D9E                     	;# 
  1379  0D9F                     	;# 
  1380  0DA0                     	;# 
  1381  0DA1                     	;# 
  1382  0DA1                     	;# 
  1383  0DA2                     	;# 
  1384  0DA3                     	;# 
  1385  0DA4                     	;# 
  1386  0DA4                     	;# 
  1387  0DA5                     	;# 
  1388  0DA6                     	;# 
  1389  0DA7                     	;# 
  1390  0DA7                     	;# 
  1391  0DA8                     	;# 
  1392  0DA9                     	;# 
  1393  0DAA                     	;# 
  1394  0DAB                     	;# 
  1395  0DAC                     	;# 
  1396  0DAD                     	;# 
  1397  0DAE                     	;# 
  1398  0DAF                     	;# 
  1399  0E0F                     	;# 
  1400  0E10                     	;# 
  1401  0E11                     	;# 
  1402  0E12                     	;# 
  1403  0E13                     	;# 
  1404  0E14                     	;# 
  1405  0E15                     	;# 
  1406  0E16                     	;# 
  1407  0E17                     	;# 
  1408  0E18                     	;# 
  1409  0E19                     	;# 
  1410  0E1A                     	;# 
  1411  0E1B                     	;# 
  1412  0E1C                     	;# 
  1413  0E1D                     	;# 
  1414  0E1E                     	;# 
  1415  0E1F                     	;# 
  1416  0E20                     	;# 
  1417  0E21                     	;# 
  1418  0E22                     	;# 
  1419  0E23                     	;# 
  1420  0E24                     	;# 
  1421  0E25                     	;# 
  1422  0E26                     	;# 
  1423  0E27                     	;# 
  1424  0E28                     	;# 
  1425  0E29                     	;# 
  1426  0E2A                     	;# 
  1427  0E2B                     	;# 
  1428  0E2C                     	;# 
  1429  0E2D                     	;# 
  1430  0E2E                     	;# 
  1431  0E90                     	;# 
  1432  0E91                     	;# 
  1433  0E92                     	;# 
  1434  0E94                     	;# 
  1435  0E95                     	;# 
  1436  0E9C                     	;# 
  1437  0E9D                     	;# 
  1438  0E9E                     	;# 
  1439  0E9F                     	;# 
  1440  0EA0                     	;# 
  1441  0EA1                     	;# 
  1442  0EA2                     	;# 
  1443  0EA3                     	;# 
  1444  0EA4                     	;# 
  1445  0EA5                     	;# 
  1446  0EA6                     	;# 
  1447  0EA7                     	;# 
  1448  0F0F                     	;# 
  1449  0F10                     	;# 
  1450  0F11                     	;# 
  1451  0F12                     	;# 
  1452  0F13                     	;# 
  1453  0F14                     	;# 
  1454  0F15                     	;# 
  1455  0F16                     	;# 
  1456  0F17                     	;# 
  1457  0F18                     	;# 
  1458  0F19                     	;# 
  1459  0F1A                     	;# 
  1460  0F1B                     	;# 
  1461  0F1C                     	;# 
  1462  0F1D                     	;# 
  1463  0F1E                     	;# 
  1464  0F1F                     	;# 
  1465  0F20                     	;# 
  1466  0F21                     	;# 
  1467  0F22                     	;# 
  1468  0F23                     	;# 
  1469  0F24                     	;# 
  1470  0F25                     	;# 
  1471  0F26                     	;# 
  1472  0F27                     	;# 
  1473  0F28                     	;# 
  1474  0F29                     	;# 
  1475  0F2A                     	;# 
  1476  0F2B                     	;# 
  1477  0F2C                     	;# 
  1478  0F2D                     	;# 
  1479  0F2E                     	;# 
  1480  0F2F                     	;# 
  1481  0F30                     	;# 
  1482  0F31                     	;# 
  1483  0F32                     	;# 
  1484  0F33                     	;# 
  1485  0F34                     	;# 
  1486  0F35                     	;# 
  1487  0F36                     	;# 
  1488  0F37                     	;# 
  1489  0FE4                     	;# 
  1490  0FE5                     	;# 
  1491  0FE6                     	;# 
  1492  0FE7                     	;# 
  1493  0FE8                     	;# 
  1494  0FE9                     	;# 
  1495  0FEA                     	;# 
  1496  0FEB                     	;# 
  1497  0FED                     	;# 
  1498  0FEE                     	;# 
  1499  0FEF                     	;# 
  1500  0000                     	;# 
  1501  0001                     	;# 
  1502  0002                     	;# 
  1503  0003                     	;# 
  1504  0004                     	;# 
  1505  0005                     	;# 
  1506  0006                     	;# 
  1507  0007                     	;# 
  1508  0008                     	;# 
  1509  0009                     	;# 
  1510  000A                     	;# 
  1511  000B                     	;# 
  1512  000C                     	;# 
  1513  000D                     	;# 
  1514  000E                     	;# 
  1515  0010                     	;# 
  1516  0011                     	;# 
  1517  0012                     	;# 
  1518  0013                     	;# 
  1519  0014                     	;# 
  1520  0015                     	;# 
  1521  0016                     	;# 
  1522  0016                     	;# 
  1523  0017                     	;# 
  1524  0018                     	;# 
  1525  0019                     	;# 
  1526  001A                     	;# 
  1527  001A                     	;# 
  1528  001B                     	;# 
  1529  001B                     	;# 
  1530  001C                     	;# 
  1531  001D                     	;# 
  1532  001E                     	;# 
  1533  001F                     	;# 
  1534  008C                     	;# 
  1535  008D                     	;# 
  1536  008E                     	;# 
  1537  0090                     	;# 
  1538  0091                     	;# 
  1539  0092                     	;# 
  1540  0093                     	;# 
  1541  0094                     	;# 
  1542  0095                     	;# 
  1543  0096                     	;# 
  1544  0098                     	;# 
  1545  0099                     	;# 
  1546  009A                     	;# 
  1547  009B                     	;# 
  1548  009B                     	;# 
  1549  009C                     	;# 
  1550  009D                     	;# 
  1551  009E                     	;# 
  1552  009F                     	;# 
  1553  010C                     	;# 
  1554  010D                     	;# 
  1555  010E                     	;# 
  1556  0111                     	;# 
  1557  0112                     	;# 
  1558  0113                     	;# 
  1559  0114                     	;# 
  1560  0115                     	;# 
  1561  0116                     	;# 
  1562  0117                     	;# 
  1563  0118                     	;# 
  1564  0119                     	;# 
  1565  011C                     	;# 
  1566  018C                     	;# 
  1567  018D                     	;# 
  1568  018E                     	;# 
  1569  0191                     	;# 
  1570  0191                     	;# 
  1571  0192                     	;# 
  1572  0193                     	;# 
  1573  0193                     	;# 
  1574  0194                     	;# 
  1575  0195                     	;# 
  1576  0196                     	;# 
  1577  0197                     	;# 
  1578  0199                     	;# 
  1579  0199                     	;# 
  1580  0199                     	;# 
  1581  019A                     	;# 
  1582  019A                     	;# 
  1583  019A                     	;# 
  1584  019B                     	;# 
  1585  019B                     	;# 
  1586  019B                     	;# 
  1587  019B                     	;# 
  1588  019B                     	;# 
  1589  019C                     	;# 
  1590  019C                     	;# 
  1591  019C                     	;# 
  1592  019D                     	;# 
  1593  019D                     	;# 
  1594  019D                     	;# 
  1595  019E                     	;# 
  1596  019E                     	;# 
  1597  019E                     	;# 
  1598  019F                     	;# 
  1599  019F                     	;# 
  1600  019F                     	;# 
  1601  019F                     	;# 
  1602  019F                     	;# 
  1603  020C                     	;# 
  1604  020D                     	;# 
  1605  020E                     	;# 
  1606  0211                     	;# 
  1607  0211                     	;# 
  1608  0212                     	;# 
  1609  0212                     	;# 
  1610  0213                     	;# 
  1611  0213                     	;# 
  1612  0214                     	;# 
  1613  0214                     	;# 
  1614  0215                     	;# 
  1615  0215                     	;# 
  1616  0215                     	;# 
  1617  0215                     	;# 
  1618  0216                     	;# 
  1619  0216                     	;# 
  1620  0217                     	;# 
  1621  0217                     	;# 
  1622  028C                     	;# 
  1623  028D                     	;# 
  1624  028E                     	;# 
  1625  0291                     	;# 
  1626  0291                     	;# 
  1627  0292                     	;# 
  1628  0293                     	;# 
  1629  0294                     	;# 
  1630  0298                     	;# 
  1631  0298                     	;# 
  1632  0299                     	;# 
  1633  029A                     	;# 
  1634  029B                     	;# 
  1635  029E                     	;# 
  1636  030C                     	;# 
  1637  030D                     	;# 
  1638  030E                     	;# 
  1639  038C                     	;# 
  1640  038D                     	;# 
  1641  038E                     	;# 
  1642  0391                     	;# 
  1643  0392                     	;# 
  1644  0393                     	;# 
  1645  0394                     	;# 
  1646  0395                     	;# 
  1647  0396                     	;# 
  1648  0397                     	;# 
  1649  0398                     	;# 
  1650  0399                     	;# 
  1651  040E                     	;# 
  1652  0413                     	;# 
  1653  0413                     	;# 
  1654  0414                     	;# 
  1655  0414                     	;# 
  1656  0415                     	;# 
  1657  0416                     	;# 
  1658  0417                     	;# 
  1659  0418                     	;# 
  1660  041A                     	;# 
  1661  041A                     	;# 
  1662  041B                     	;# 
  1663  041B                     	;# 
  1664  041C                     	;# 
  1665  041D                     	;# 
  1666  041E                     	;# 
  1667  041F                     	;# 
  1668  0493                     	;# 
  1669  0494                     	;# 
  1670  0495                     	;# 
  1671  0496                     	;# 
  1672  049A                     	;# 
  1673  049B                     	;# 
  1674  049C                     	;# 
  1675  049D                     	;# 
  1676  058C                     	;# 
  1677  058C                     	;# 
  1678  058D                     	;# 
  1679  058E                     	;# 
  1680  058E                     	;# 
  1681  058F                     	;# 
  1682  0590                     	;# 
  1683  0590                     	;# 
  1684  0591                     	;# 
  1685  0592                     	;# 
  1686  0592                     	;# 
  1687  0593                     	;# 
  1688  0594                     	;# 
  1689  0594                     	;# 
  1690  0595                     	;# 
  1691  0596                     	;# 
  1692  0596                     	;# 
  1693  0597                     	;# 
  1694  0598                     	;# 
  1695  0599                     	;# 
  1696  059A                     	;# 
  1697  059B                     	;# 
  1698  059B                     	;# 
  1699  059C                     	;# 
  1700  059D                     	;# 
  1701  060C                     	;# 
  1702  060C                     	;# 
  1703  060D                     	;# 
  1704  060E                     	;# 
  1705  060F                     	;# 
  1706  060F                     	;# 
  1707  0610                     	;# 
  1708  0611                     	;# 
  1709  0612                     	;# 
  1710  0613                     	;# 
  1711  0614                     	;# 
  1712  0617                     	;# 
  1713  0618                     	;# 
  1714  0619                     	;# 
  1715  061A                     	;# 
  1716  061B                     	;# 
  1717  061C                     	;# 
  1718  0691                     	;# 
  1719  0692                     	;# 
  1720  0693                     	;# 
  1721  0694                     	;# 
  1722  0695                     	;# 
  1723  0696                     	;# 
  1724  0697                     	;# 
  1725  0699                     	;# 
  1726  069A                     	;# 
  1727  0711                     	;# 
  1728  0712                     	;# 
  1729  0713                     	;# 
  1730  0714                     	;# 
  1731  0715                     	;# 
  1732  0718                     	;# 
  1733  0718                     	;# 
  1734  0719                     	;# 
  1735  071A                     	;# 
  1736  071A                     	;# 
  1737  071B                     	;# 
  1738  071C                     	;# 
  1739  071D                     	;# 
  1740  0791                     	;# 
  1741  0791                     	;# 
  1742  0792                     	;# 
  1743  0793                     	;# 
  1744  0793                     	;# 
  1745  0794                     	;# 
  1746  0795                     	;# 
  1747  0795                     	;# 
  1748  0796                     	;# 
  1749  0797                     	;# 
  1750  0797                     	;# 
  1751  0798                     	;# 
  1752  0799                     	;# 
  1753  079A                     	;# 
  1754  080C                     	;# 
  1755  080C                     	;# 
  1756  080D                     	;# 
  1757  080E                     	;# 
  1758  080E                     	;# 
  1759  080F                     	;# 
  1760  0810                     	;# 
  1761  0810                     	;# 
  1762  0811                     	;# 
  1763  0812                     	;# 
  1764  0812                     	;# 
  1765  0813                     	;# 
  1766  0814                     	;# 
  1767  0815                     	;# 
  1768  0816                     	;# 
  1769  0817                     	;# 
  1770  0818                     	;# 
  1771  0819                     	;# 
  1772  081A                     	;# 
  1773  081A                     	;# 
  1774  081B                     	;# 
  1775  081C                     	;# 
  1776  081C                     	;# 
  1777  081D                     	;# 
  1778  088C                     	;# 
  1779  088D                     	;# 
  1780  088E                     	;# 
  1781  088F                     	;# 
  1782  088F                     	;# 
  1783  0890                     	;# 
  1784  0891                     	;# 
  1785  0892                     	;# 
  1786  0893                     	;# 
  1787  0893                     	;# 
  1788  0894                     	;# 
  1789  0895                     	;# 
  1790  0896                     	;# 
  1791  0897                     	;# 
  1792  0897                     	;# 
  1793  0898                     	;# 
  1794  0899                     	;# 
  1795  0D8C                     	;# 
  1796  0D8C                     	;# 
  1797  0D8D                     	;# 
  1798  0D8E                     	;# 
  1799  0D8F                     	;# 
  1800  0D8F                     	;# 
  1801  0D90                     	;# 
  1802  0D91                     	;# 
  1803  0D92                     	;# 
  1804  0D92                     	;# 
  1805  0D93                     	;# 
  1806  0D94                     	;# 
  1807  0D95                     	;# 
  1808  0D95                     	;# 
  1809  0D96                     	;# 
  1810  0D97                     	;# 
  1811  0D98                     	;# 
  1812  0D99                     	;# 
  1813  0D9A                     	;# 
  1814  0D9B                     	;# 
  1815  0D9C                     	;# 
  1816  0D9D                     	;# 
  1817  0D9E                     	;# 
  1818  0D9E                     	;# 
  1819  0D9F                     	;# 
  1820  0DA0                     	;# 
  1821  0DA1                     	;# 
  1822  0DA1                     	;# 
  1823  0DA2                     	;# 
  1824  0DA3                     	;# 
  1825  0DA4                     	;# 
  1826  0DA4                     	;# 
  1827  0DA5                     	;# 
  1828  0DA6                     	;# 
  1829  0DA7                     	;# 
  1830  0DA7                     	;# 
  1831  0DA8                     	;# 
  1832  0DA9                     	;# 
  1833  0DAA                     	;# 
  1834  0DAB                     	;# 
  1835  0DAC                     	;# 
  1836  0DAD                     	;# 
  1837  0DAE                     	;# 
  1838  0DAF                     	;# 
  1839  0E0F                     	;# 
  1840  0E10                     	;# 
  1841  0E11                     	;# 
  1842  0E12                     	;# 
  1843  0E13                     	;# 
  1844  0E14                     	;# 
  1845  0E15                     	;# 
  1846  0E16                     	;# 
  1847  0E17                     	;# 
  1848  0E18                     	;# 
  1849  0E19                     	;# 
  1850  0E1A                     	;# 
  1851  0E1B                     	;# 
  1852  0E1C                     	;# 
  1853  0E1D                     	;# 
  1854  0E1E                     	;# 
  1855  0E1F                     	;# 
  1856  0E20                     	;# 
  1857  0E21                     	;# 
  1858  0E22                     	;# 
  1859  0E23                     	;# 
  1860  0E24                     	;# 
  1861  0E25                     	;# 
  1862  0E26                     	;# 
  1863  0E27                     	;# 
  1864  0E28                     	;# 
  1865  0E29                     	;# 
  1866  0E2A                     	;# 
  1867  0E2B                     	;# 
  1868  0E2C                     	;# 
  1869  0E2D                     	;# 
  1870  0E2E                     	;# 
  1871  0E90                     	;# 
  1872  0E91                     	;# 
  1873  0E92                     	;# 
  1874  0E94                     	;# 
  1875  0E95                     	;# 
  1876  0E9C                     	;# 
  1877  0E9D                     	;# 
  1878  0E9E                     	;# 
  1879  0E9F                     	;# 
  1880  0EA0                     	;# 
  1881  0EA1                     	;# 
  1882  0EA2                     	;# 
  1883  0EA3                     	;# 
  1884  0EA4                     	;# 
  1885  0EA5                     	;# 
  1886  0EA6                     	;# 
  1887  0EA7                     	;# 
  1888  0F0F                     	;# 
  1889  0F10                     	;# 
  1890  0F11                     	;# 
  1891  0F12                     	;# 
  1892  0F13                     	;# 
  1893  0F14                     	;# 
  1894  0F15                     	;# 
  1895  0F16                     	;# 
  1896  0F17                     	;# 
  1897  0F18                     	;# 
  1898  0F19                     	;# 
  1899  0F1A                     	;# 
  1900  0F1B                     	;# 
  1901  0F1C                     	;# 
  1902  0F1D                     	;# 
  1903  0F1E                     	;# 
  1904  0F1F                     	;# 
  1905  0F20                     	;# 
  1906  0F21                     	;# 
  1907  0F22                     	;# 
  1908  0F23                     	;# 
  1909  0F24                     	;# 
  1910  0F25                     	;# 
  1911  0F26                     	;# 
  1912  0F27                     	;# 
  1913  0F28                     	;# 
  1914  0F29                     	;# 
  1915  0F2A                     	;# 
  1916  0F2B                     	;# 
  1917  0F2C                     	;# 
  1918  0F2D                     	;# 
  1919  0F2E                     	;# 
  1920  0F2F                     	;# 
  1921  0F30                     	;# 
  1922  0F31                     	;# 
  1923  0F32                     	;# 
  1924  0F33                     	;# 
  1925  0F34                     	;# 
  1926  0F35                     	;# 
  1927  0F36                     	;# 
  1928  0F37                     	;# 
  1929  0FE4                     	;# 
  1930  0FE5                     	;# 
  1931  0FE6                     	;# 
  1932  0FE7                     	;# 
  1933  0FE8                     	;# 
  1934  0FE9                     	;# 
  1935  0FEA                     	;# 
  1936  0FEB                     	;# 
  1937  0FED                     	;# 
  1938  0FEE                     	;# 
  1939  0FEF                     	;# 
  1940  0000                     	;# 
  1941  0001                     	;# 
  1942  0002                     	;# 
  1943  0003                     	;# 
  1944  0004                     	;# 
  1945  0005                     	;# 
  1946  0006                     	;# 
  1947  0007                     	;# 
  1948  0008                     	;# 
  1949  0009                     	;# 
  1950  000A                     	;# 
  1951  000B                     	;# 
  1952  000C                     	;# 
  1953  000D                     	;# 
  1954  000E                     	;# 
  1955  0010                     	;# 
  1956  0011                     	;# 
  1957  0012                     	;# 
  1958  0013                     	;# 
  1959  0014                     	;# 
  1960  0015                     	;# 
  1961  0016                     	;# 
  1962  0016                     	;# 
  1963  0017                     	;# 
  1964  0018                     	;# 
  1965  0019                     	;# 
  1966  001A                     	;# 
  1967  001A                     	;# 
  1968  001B                     	;# 
  1969  001B                     	;# 
  1970  001C                     	;# 
  1971  001D                     	;# 
  1972  001E                     	;# 
  1973  001F                     	;# 
  1974  008C                     	;# 
  1975  008D                     	;# 
  1976  008E                     	;# 
  1977  0090                     	;# 
  1978  0091                     	;# 
  1979  0092                     	;# 
  1980  0093                     	;# 
  1981  0094                     	;# 
  1982  0095                     	;# 
  1983  0096                     	;# 
  1984  0098                     	;# 
  1985  0099                     	;# 
  1986  009A                     	;# 
  1987  009B                     	;# 
  1988  009B                     	;# 
  1989  009C                     	;# 
  1990  009D                     	;# 
  1991  009E                     	;# 
  1992  009F                     	;# 
  1993  010C                     	;# 
  1994  010D                     	;# 
  1995  010E                     	;# 
  1996  0111                     	;# 
  1997  0112                     	;# 
  1998  0113                     	;# 
  1999  0114                     	;# 
  2000  0115                     	;# 
  2001  0116                     	;# 
  2002  0117                     	;# 
  2003  0118                     	;# 
  2004  0119                     	;# 
  2005  011C                     	;# 
  2006  018C                     	;# 
  2007  018D                     	;# 
  2008  018E                     	;# 
  2009  0191                     	;# 
  2010  0191                     	;# 
  2011  0192                     	;# 
  2012  0193                     	;# 
  2013  0193                     	;# 
  2014  0194                     	;# 
  2015  0195                     	;# 
  2016  0196                     	;# 
  2017  0197                     	;# 
  2018  0199                     	;# 
  2019  0199                     	;# 
  2020  0199                     	;# 
  2021  019A                     	;# 
  2022  019A                     	;# 
  2023  019A                     	;# 
  2024  019B                     	;# 
  2025  019B                     	;# 
  2026  019B                     	;# 
  2027  019B                     	;# 
  2028  019B                     	;# 
  2029  019C                     	;# 
  2030  019C                     	;# 
  2031  019C                     	;# 
  2032  019D                     	;# 
  2033  019D                     	;# 
  2034  019D                     	;# 
  2035  019E                     	;# 
  2036  019E                     	;# 
  2037  019E                     	;# 
  2038  019F                     	;# 
  2039  019F                     	;# 
  2040  019F                     	;# 
  2041  019F                     	;# 
  2042  019F                     	;# 
  2043  020C                     	;# 
  2044  020D                     	;# 
  2045  020E                     	;# 
  2046  0211                     	;# 
  2047  0211                     	;# 
  2048  0212                     	;# 
  2049  0212                     	;# 
  2050  0213                     	;# 
  2051  0213                     	;# 
  2052  0214                     	;# 
  2053  0214                     	;# 
  2054  0215                     	;# 
  2055  0215                     	;# 
  2056  0215                     	;# 
  2057  0215                     	;# 
  2058  0216                     	;# 
  2059  0216                     	;# 
  2060  0217                     	;# 
  2061  0217                     	;# 
  2062  028C                     	;# 
  2063  028D                     	;# 
  2064  028E                     	;# 
  2065  0291                     	;# 
  2066  0291                     	;# 
  2067  0292                     	;# 
  2068  0293                     	;# 
  2069  0294                     	;# 
  2070  0298                     	;# 
  2071  0298                     	;# 
  2072  0299                     	;# 
  2073  029A                     	;# 
  2074  029B                     	;# 
  2075  029E                     	;# 
  2076  030C                     	;# 
  2077  030D                     	;# 
  2078  030E                     	;# 
  2079  038C                     	;# 
  2080  038D                     	;# 
  2081  038E                     	;# 
  2082  0391                     	;# 
  2083  0392                     	;# 
  2084  0393                     	;# 
  2085  0394                     	;# 
  2086  0395                     	;# 
  2087  0396                     	;# 
  2088  0397                     	;# 
  2089  0398                     	;# 
  2090  0399                     	;# 
  2091  040E                     	;# 
  2092  0413                     	;# 
  2093  0413                     	;# 
  2094  0414                     	;# 
  2095  0414                     	;# 
  2096  0415                     	;# 
  2097  0416                     	;# 
  2098  0417                     	;# 
  2099  0418                     	;# 
  2100  041A                     	;# 
  2101  041A                     	;# 
  2102  041B                     	;# 
  2103  041B                     	;# 
  2104  041C                     	;# 
  2105  041D                     	;# 
  2106  041E                     	;# 
  2107  041F                     	;# 
  2108  0493                     	;# 
  2109  0494                     	;# 
  2110  0495                     	;# 
  2111  0496                     	;# 
  2112  049A                     	;# 
  2113  049B                     	;# 
  2114  049C                     	;# 
  2115  049D                     	;# 
  2116  058C                     	;# 
  2117  058C                     	;# 
  2118  058D                     	;# 
  2119  058E                     	;# 
  2120  058E                     	;# 
  2121  058F                     	;# 
  2122  0590                     	;# 
  2123  0590                     	;# 
  2124  0591                     	;# 
  2125  0592                     	;# 
  2126  0592                     	;# 
  2127  0593                     	;# 
  2128  0594                     	;# 
  2129  0594                     	;# 
  2130  0595                     	;# 
  2131  0596                     	;# 
  2132  0596                     	;# 
  2133  0597                     	;# 
  2134  0598                     	;# 
  2135  0599                     	;# 
  2136  059A                     	;# 
  2137  059B                     	;# 
  2138  059B                     	;# 
  2139  059C                     	;# 
  2140  059D                     	;# 
  2141  060C                     	;# 
  2142  060C                     	;# 
  2143  060D                     	;# 
  2144  060E                     	;# 
  2145  060F                     	;# 
  2146  060F                     	;# 
  2147  0610                     	;# 
  2148  0611                     	;# 
  2149  0612                     	;# 
  2150  0613                     	;# 
  2151  0614                     	;# 
  2152  0617                     	;# 
  2153  0618                     	;# 
  2154  0619                     	;# 
  2155  061A                     	;# 
  2156  061B                     	;# 
  2157  061C                     	;# 
  2158  0691                     	;# 
  2159  0692                     	;# 
  2160  0693                     	;# 
  2161  0694                     	;# 
  2162  0695                     	;# 
  2163  0696                     	;# 
  2164  0697                     	;# 
  2165  0699                     	;# 
  2166  069A                     	;# 
  2167  0711                     	;# 
  2168  0712                     	;# 
  2169  0713                     	;# 
  2170  0714                     	;# 
  2171  0715                     	;# 
  2172  0718                     	;# 
  2173  0718                     	;# 
  2174  0719                     	;# 
  2175  071A                     	;# 
  2176  071A                     	;# 
  2177  071B                     	;# 
  2178  071C                     	;# 
  2179  071D                     	;# 
  2180  0791                     	;# 
  2181  0791                     	;# 
  2182  0792                     	;# 
  2183  0793                     	;# 
  2184  0793                     	;# 
  2185  0794                     	;# 
  2186  0795                     	;# 
  2187  0795                     	;# 
  2188  0796                     	;# 
  2189  0797                     	;# 
  2190  0797                     	;# 
  2191  0798                     	;# 
  2192  0799                     	;# 
  2193  079A                     	;# 
  2194  080C                     	;# 
  2195  080C                     	;# 
  2196  080D                     	;# 
  2197  080E                     	;# 
  2198  080E                     	;# 
  2199  080F                     	;# 
  2200  0810                     	;# 
  2201  0810                     	;# 
  2202  0811                     	;# 
  2203  0812                     	;# 
  2204  0812                     	;# 
  2205  0813                     	;# 
  2206  0814                     	;# 
  2207  0815                     	;# 
  2208  0816                     	;# 
  2209  0817                     	;# 
  2210  0818                     	;# 
  2211  0819                     	;# 
  2212  081A                     	;# 
  2213  081A                     	;# 
  2214  081B                     	;# 
  2215  081C                     	;# 
  2216  081C                     	;# 
  2217  081D                     	;# 
  2218  088C                     	;# 
  2219  088D                     	;# 
  2220  088E                     	;# 
  2221  088F                     	;# 
  2222  088F                     	;# 
  2223  0890                     	;# 
  2224  0891                     	;# 
  2225  0892                     	;# 
  2226  0893                     	;# 
  2227  0893                     	;# 
  2228  0894                     	;# 
  2229  0895                     	;# 
  2230  0896                     	;# 
  2231  0897                     	;# 
  2232  0897                     	;# 
  2233  0898                     	;# 
  2234  0899                     	;# 
  2235  0D8C                     	;# 
  2236  0D8C                     	;# 
  2237  0D8D                     	;# 
  2238  0D8E                     	;# 
  2239  0D8F                     	;# 
  2240  0D8F                     	;# 
  2241  0D90                     	;# 
  2242  0D91                     	;# 
  2243  0D92                     	;# 
  2244  0D92                     	;# 
  2245  0D93                     	;# 
  2246  0D94                     	;# 
  2247  0D95                     	;# 
  2248  0D95                     	;# 
  2249  0D96                     	;# 
  2250  0D97                     	;# 
  2251  0D98                     	;# 
  2252  0D99                     	;# 
  2253  0D9A                     	;# 
  2254  0D9B                     	;# 
  2255  0D9C                     	;# 
  2256  0D9D                     	;# 
  2257  0D9E                     	;# 
  2258  0D9E                     	;# 
  2259  0D9F                     	;# 
  2260  0DA0                     	;# 
  2261  0DA1                     	;# 
  2262  0DA1                     	;# 
  2263  0DA2                     	;# 
  2264  0DA3                     	;# 
  2265  0DA4                     	;# 
  2266  0DA4                     	;# 
  2267  0DA5                     	;# 
  2268  0DA6                     	;# 
  2269  0DA7                     	;# 
  2270  0DA7                     	;# 
  2271  0DA8                     	;# 
  2272  0DA9                     	;# 
  2273  0DAA                     	;# 
  2274  0DAB                     	;# 
  2275  0DAC                     	;# 
  2276  0DAD                     	;# 
  2277  0DAE                     	;# 
  2278  0DAF                     	;# 
  2279  0E0F                     	;# 
  2280  0E10                     	;# 
  2281  0E11                     	;# 
  2282  0E12                     	;# 
  2283  0E13                     	;# 
  2284  0E14                     	;# 
  2285  0E15                     	;# 
  2286  0E16                     	;# 
  2287  0E17                     	;# 
  2288  0E18                     	;# 
  2289  0E19                     	;# 
  2290  0E1A                     	;# 
  2291  0E1B                     	;# 
  2292  0E1C                     	;# 
  2293  0E1D                     	;# 
  2294  0E1E                     	;# 
  2295  0E1F                     	;# 
  2296  0E20                     	;# 
  2297  0E21                     	;# 
  2298  0E22                     	;# 
  2299  0E23                     	;# 
  2300  0E24                     	;# 
  2301  0E25                     	;# 
  2302  0E26                     	;# 
  2303  0E27                     	;# 
  2304  0E28                     	;# 
  2305  0E29                     	;# 
  2306  0E2A                     	;# 
  2307  0E2B                     	;# 
  2308  0E2C                     	;# 
  2309  0E2D                     	;# 
  2310  0E2E                     	;# 
  2311  0E90                     	;# 
  2312  0E91                     	;# 
  2313  0E92                     	;# 
  2314  0E94                     	;# 
  2315  0E95                     	;# 
  2316  0E9C                     	;# 
  2317  0E9D                     	;# 
  2318  0E9E                     	;# 
  2319  0E9F                     	;# 
  2320  0EA0                     	;# 
  2321  0EA1                     	;# 
  2322  0EA2                     	;# 
  2323  0EA3                     	;# 
  2324  0EA4                     	;# 
  2325  0EA5                     	;# 
  2326  0EA6                     	;# 
  2327  0EA7                     	;# 
  2328  0F0F                     	;# 
  2329  0F10                     	;# 
  2330  0F11                     	;# 
  2331  0F12                     	;# 
  2332  0F13                     	;# 
  2333  0F14                     	;# 
  2334  0F15                     	;# 
  2335  0F16                     	;# 
  2336  0F17                     	;# 
  2337  0F18                     	;# 
  2338  0F19                     	;# 
  2339  0F1A                     	;# 
  2340  0F1B                     	;# 
  2341  0F1C                     	;# 
  2342  0F1D                     	;# 
  2343  0F1E                     	;# 
  2344  0F1F                     	;# 
  2345  0F20                     	;# 
  2346  0F21                     	;# 
  2347  0F22                     	;# 
  2348  0F23                     	;# 
  2349  0F24                     	;# 
  2350  0F25                     	;# 
  2351  0F26                     	;# 
  2352  0F27                     	;# 
  2353  0F28                     	;# 
  2354  0F29                     	;# 
  2355  0F2A                     	;# 
  2356  0F2B                     	;# 
  2357  0F2C                     	;# 
  2358  0F2D                     	;# 
  2359  0F2E                     	;# 
  2360  0F2F                     	;# 
  2361  0F30                     	;# 
  2362  0F31                     	;# 
  2363  0F32                     	;# 
  2364  0F33                     	;# 
  2365  0F34                     	;# 
  2366  0F35                     	;# 
  2367  0F36                     	;# 
  2368  0F37                     	;# 
  2369  0FE4                     	;# 
  2370  0FE5                     	;# 
  2371  0FE6                     	;# 
  2372  0FE7                     	;# 
  2373  0FE8                     	;# 
  2374  0FE9                     	;# 
  2375  0FEA                     	;# 
  2376  0FEB                     	;# 
  2377  0FED                     	;# 
  2378  0FEE                     	;# 
  2379  0FEF                     	;# 
  2380  0000                     	;# 
  2381  0001                     	;# 
  2382  0002                     	;# 
  2383  0003                     	;# 
  2384  0004                     	;# 
  2385  0005                     	;# 
  2386  0006                     	;# 
  2387  0007                     	;# 
  2388  0008                     	;# 
  2389  0009                     	;# 
  2390  000A                     	;# 
  2391  000B                     	;# 
  2392  000C                     	;# 
  2393  000D                     	;# 
  2394  000E                     	;# 
  2395  0010                     	;# 
  2396  0011                     	;# 
  2397  0012                     	;# 
  2398  0013                     	;# 
  2399  0014                     	;# 
  2400  0015                     	;# 
  2401  0016                     	;# 
  2402  0016                     	;# 
  2403  0017                     	;# 
  2404  0018                     	;# 
  2405  0019                     	;# 
  2406  001A                     	;# 
  2407  001A                     	;# 
  2408  001B                     	;# 
  2409  001B                     	;# 
  2410  001C                     	;# 
  2411  001D                     	;# 
  2412  001E                     	;# 
  2413  001F                     	;# 
  2414  008C                     	;# 
  2415  008D                     	;# 
  2416  008E                     	;# 
  2417  0090                     	;# 
  2418  0091                     	;# 
  2419  0092                     	;# 
  2420  0093                     	;# 
  2421  0094                     	;# 
  2422  0095                     	;# 
  2423  0096                     	;# 
  2424  0098                     	;# 
  2425  0099                     	;# 
  2426  009A                     	;# 
  2427  009B                     	;# 
  2428  009B                     	;# 
  2429  009C                     	;# 
  2430  009D                     	;# 
  2431  009E                     	;# 
  2432  009F                     	;# 
  2433  010C                     	;# 
  2434  010D                     	;# 
  2435  010E                     	;# 
  2436  0111                     	;# 
  2437  0112                     	;# 
  2438  0113                     	;# 
  2439  0114                     	;# 
  2440  0115                     	;# 
  2441  0116                     	;# 
  2442  0117                     	;# 
  2443  0118                     	;# 
  2444  0119                     	;# 
  2445  011C                     	;# 
  2446  018C                     	;# 
  2447  018D                     	;# 
  2448  018E                     	;# 
  2449  0191                     	;# 
  2450  0191                     	;# 
  2451  0192                     	;# 
  2452  0193                     	;# 
  2453  0193                     	;# 
  2454  0194                     	;# 
  2455  0195                     	;# 
  2456  0196                     	;# 
  2457  0197                     	;# 
  2458  0199                     	;# 
  2459  0199                     	;# 
  2460  0199                     	;# 
  2461  019A                     	;# 
  2462  019A                     	;# 
  2463  019A                     	;# 
  2464  019B                     	;# 
  2465  019B                     	;# 
  2466  019B                     	;# 
  2467  019B                     	;# 
  2468  019B                     	;# 
  2469  019C                     	;# 
  2470  019C                     	;# 
  2471  019C                     	;# 
  2472  019D                     	;# 
  2473  019D                     	;# 
  2474  019D                     	;# 
  2475  019E                     	;# 
  2476  019E                     	;# 
  2477  019E                     	;# 
  2478  019F                     	;# 
  2479  019F                     	;# 
  2480  019F                     	;# 
  2481  019F                     	;# 
  2482  019F                     	;# 
  2483  020C                     	;# 
  2484  020D                     	;# 
  2485  020E                     	;# 
  2486  0211                     	;# 
  2487  0211                     	;# 
  2488  0212                     	;# 
  2489  0212                     	;# 
  2490  0213                     	;# 
  2491  0213                     	;# 
  2492  0214                     	;# 
  2493  0214                     	;# 
  2494  0215                     	;# 
  2495  0215                     	;# 
  2496  0215                     	;# 
  2497  0215                     	;# 
  2498  0216                     	;# 
  2499  0216                     	;# 
  2500  0217                     	;# 
  2501  0217                     	;# 
  2502  028C                     	;# 
  2503  028D                     	;# 
  2504  028E                     	;# 
  2505  0291                     	;# 
  2506  0291                     	;# 
  2507  0292                     	;# 
  2508  0293                     	;# 
  2509  0294                     	;# 
  2510  0298                     	;# 
  2511  0298                     	;# 
  2512  0299                     	;# 
  2513  029A                     	;# 
  2514  029B                     	;# 
  2515  029E                     	;# 
  2516  030C                     	;# 
  2517  030D                     	;# 
  2518  030E                     	;# 
  2519  038C                     	;# 
  2520  038D                     	;# 
  2521  038E                     	;# 
  2522  0391                     	;# 
  2523  0392                     	;# 
  2524  0393                     	;# 
  2525  0394                     	;# 
  2526  0395                     	;# 
  2527  0396                     	;# 
  2528  0397                     	;# 
  2529  0398                     	;# 
  2530  0399                     	;# 
  2531  040E                     	;# 
  2532  0413                     	;# 
  2533  0413                     	;# 
  2534  0414                     	;# 
  2535  0414                     	;# 
  2536  0415                     	;# 
  2537  0416                     	;# 
  2538  0417                     	;# 
  2539  0418                     	;# 
  2540  041A                     	;# 
  2541  041A                     	;# 
  2542  041B                     	;# 
  2543  041B                     	;# 
  2544  041C                     	;# 
  2545  041D                     	;# 
  2546  041E                     	;# 
  2547  041F                     	;# 
  2548  0493                     	;# 
  2549  0494                     	;# 
  2550  0495                     	;# 
  2551  0496                     	;# 
  2552  049A                     	;# 
  2553  049B                     	;# 
  2554  049C                     	;# 
  2555  049D                     	;# 
  2556  058C                     	;# 
  2557  058C                     	;# 
  2558  058D                     	;# 
  2559  058E                     	;# 
  2560  058E                     	;# 
  2561  058F                     	;# 
  2562  0590                     	;# 
  2563  0590                     	;# 
  2564  0591                     	;# 
  2565  0592                     	;# 
  2566  0592                     	;# 
  2567  0593                     	;# 
  2568  0594                     	;# 
  2569  0594                     	;# 
  2570  0595                     	;# 
  2571  0596                     	;# 
  2572  0596                     	;# 
  2573  0597                     	;# 
  2574  0598                     	;# 
  2575  0599                     	;# 
  2576  059A                     	;# 
  2577  059B                     	;# 
  2578  059B                     	;# 
  2579  059C                     	;# 
  2580  059D                     	;# 
  2581  060C                     	;# 
  2582  060C                     	;# 
  2583  060D                     	;# 
  2584  060E                     	;# 
  2585  060F                     	;# 
  2586  060F                     	;# 
  2587  0610                     	;# 
  2588  0611                     	;# 
  2589  0612                     	;# 
  2590  0613                     	;# 
  2591  0614                     	;# 
  2592  0617                     	;# 
  2593  0618                     	;# 
  2594  0619                     	;# 
  2595  061A                     	;# 
  2596  061B                     	;# 
  2597  061C                     	;# 
  2598  0691                     	;# 
  2599  0692                     	;# 
  2600  0693                     	;# 
  2601  0694                     	;# 
  2602  0695                     	;# 
  2603  0696                     	;# 
  2604  0697                     	;# 
  2605  0699                     	;# 
  2606  069A                     	;# 
  2607  0711                     	;# 
  2608  0712                     	;# 
  2609  0713                     	;# 
  2610  0714                     	;# 
  2611  0715                     	;# 
  2612  0718                     	;# 
  2613  0718                     	;# 
  2614  0719                     	;# 
  2615  071A                     	;# 
  2616  071A                     	;# 
  2617  071B                     	;# 
  2618  071C                     	;# 
  2619  071D                     	;# 
  2620  0791                     	;# 
  2621  0791                     	;# 
  2622  0792                     	;# 
  2623  0793                     	;# 
  2624  0793                     	;# 
  2625  0794                     	;# 
  2626  0795                     	;# 
  2627  0795                     	;# 
  2628  0796                     	;# 
  2629  0797                     	;# 
  2630  0797                     	;# 
  2631  0798                     	;# 
  2632  0799                     	;# 
  2633  079A                     	;# 
  2634  080C                     	;# 
  2635  080C                     	;# 
  2636  080D                     	;# 
  2637  080E                     	;# 
  2638  080E                     	;# 
  2639  080F                     	;# 
  2640  0810                     	;# 
  2641  0810                     	;# 
  2642  0811                     	;# 
  2643  0812                     	;# 
  2644  0812                     	;# 
  2645  0813                     	;# 
  2646  0814                     	;# 
  2647  0815                     	;# 
  2648  0816                     	;# 
  2649  0817                     	;# 
  2650  0818                     	;# 
  2651  0819                     	;# 
  2652  081A                     	;# 
  2653  081A                     	;# 
  2654  081B                     	;# 
  2655  081C                     	;# 
  2656  081C                     	;# 
  2657  081D                     	;# 
  2658  088C                     	;# 
  2659  088D                     	;# 
  2660  088E                     	;# 
  2661  088F                     	;# 
  2662  088F                     	;# 
  2663  0890                     	;# 
  2664  0891                     	;# 
  2665  0892                     	;# 
  2666  0893                     	;# 
  2667  0893                     	;# 
  2668  0894                     	;# 
  2669  0895                     	;# 
  2670  0896                     	;# 
  2671  0897                     	;# 
  2672  0897                     	;# 
  2673  0898                     	;# 
  2674  0899                     	;# 
  2675  0D8C                     	;# 
  2676  0D8C                     	;# 
  2677  0D8D                     	;# 
  2678  0D8E                     	;# 
  2679  0D8F                     	;# 
  2680  0D8F                     	;# 
  2681  0D90                     	;# 
  2682  0D91                     	;# 
  2683  0D92                     	;# 
  2684  0D92                     	;# 
  2685  0D93                     	;# 
  2686  0D94                     	;# 
  2687  0D95                     	;# 
  2688  0D95                     	;# 
  2689  0D96                     	;# 
  2690  0D97                     	;# 
  2691  0D98                     	;# 
  2692  0D99                     	;# 
  2693  0D9A                     	;# 
  2694  0D9B                     	;# 
  2695  0D9C                     	;# 
  2696  0D9D                     	;# 
  2697  0D9E                     	;# 
  2698  0D9E                     	;# 
  2699  0D9F                     	;# 
  2700  0DA0                     	;# 
  2701  0DA1                     	;# 
  2702  0DA1                     	;# 
  2703  0DA2                     	;# 
  2704  0DA3                     	;# 
  2705  0DA4                     	;# 
  2706  0DA4                     	;# 
  2707  0DA5                     	;# 
  2708  0DA6                     	;# 
  2709  0DA7                     	;# 
  2710  0DA7                     	;# 
  2711  0DA8                     	;# 
  2712  0DA9                     	;# 
  2713  0DAA                     	;# 
  2714  0DAB                     	;# 
  2715  0DAC                     	;# 
  2716  0DAD                     	;# 
  2717  0DAE                     	;# 
  2718  0DAF                     	;# 
  2719  0E0F                     	;# 
  2720  0E10                     	;# 
  2721  0E11                     	;# 
  2722  0E12                     	;# 
  2723  0E13                     	;# 
  2724  0E14                     	;# 
  2725  0E15                     	;# 
  2726  0E16                     	;# 
  2727  0E17                     	;# 
  2728  0E18                     	;# 
  2729  0E19                     	;# 
  2730  0E1A                     	;# 
  2731  0E1B                     	;# 
  2732  0E1C                     	;# 
  2733  0E1D                     	;# 
  2734  0E1E                     	;# 
  2735  0E1F                     	;# 
  2736  0E20                     	;# 
  2737  0E21                     	;# 
  2738  0E22                     	;# 
  2739  0E23                     	;# 
  2740  0E24                     	;# 
  2741  0E25                     	;# 
  2742  0E26                     	;# 
  2743  0E27                     	;# 
  2744  0E28                     	;# 
  2745  0E29                     	;# 
  2746  0E2A                     	;# 
  2747  0E2B                     	;# 
  2748  0E2C                     	;# 
  2749  0E2D                     	;# 
  2750  0E2E                     	;# 
  2751  0E90                     	;# 
  2752  0E91                     	;# 
  2753  0E92                     	;# 
  2754  0E94                     	;# 
  2755  0E95                     	;# 
  2756  0E9C                     	;# 
  2757  0E9D                     	;# 
  2758  0E9E                     	;# 
  2759  0E9F                     	;# 
  2760  0EA0                     	;# 
  2761  0EA1                     	;# 
  2762  0EA2                     	;# 
  2763  0EA3                     	;# 
  2764  0EA4                     	;# 
  2765  0EA5                     	;# 
  2766  0EA6                     	;# 
  2767  0EA7                     	;# 
  2768  0F0F                     	;# 
  2769  0F10                     	;# 
  2770  0F11                     	;# 
  2771  0F12                     	;# 
  2772  0F13                     	;# 
  2773  0F14                     	;# 
  2774  0F15                     	;# 
  2775  0F16                     	;# 
  2776  0F17                     	;# 
  2777  0F18                     	;# 
  2778  0F19                     	;# 
  2779  0F1A                     	;# 
  2780  0F1B                     	;# 
  2781  0F1C                     	;# 
  2782  0F1D                     	;# 
  2783  0F1E                     	;# 
  2784  0F1F                     	;# 
  2785  0F20                     	;# 
  2786  0F21                     	;# 
  2787  0F22                     	;# 
  2788  0F23                     	;# 
  2789  0F24                     	;# 
  2790  0F25                     	;# 
  2791  0F26                     	;# 
  2792  0F27                     	;# 
  2793  0F28                     	;# 
  2794  0F29                     	;# 
  2795  0F2A                     	;# 
  2796  0F2B                     	;# 
  2797  0F2C                     	;# 
  2798  0F2D                     	;# 
  2799  0F2E                     	;# 
  2800  0F2F                     	;# 
  2801  0F30                     	;# 
  2802  0F31                     	;# 
  2803  0F32                     	;# 
  2804  0F33                     	;# 
  2805  0F34                     	;# 
  2806  0F35                     	;# 
  2807  0F36                     	;# 
  2808  0F37                     	;# 
  2809  0FE4                     	;# 
  2810  0FE5                     	;# 
  2811  0FE6                     	;# 
  2812  0FE7                     	;# 
  2813  0FE8                     	;# 
  2814  0FE9                     	;# 
  2815  0FEA                     	;# 
  2816  0FEB                     	;# 
  2817  0FED                     	;# 
  2818  0FEE                     	;# 
  2819  0FEF                     	;# 
  2820  0000                     	;# 
  2821  0001                     	;# 
  2822  0002                     	;# 
  2823  0003                     	;# 
  2824  0004                     	;# 
  2825  0005                     	;# 
  2826  0006                     	;# 
  2827  0007                     	;# 
  2828  0008                     	;# 
  2829  0009                     	;# 
  2830  000A                     	;# 
  2831  000B                     	;# 
  2832  000C                     	;# 
  2833  000D                     	;# 
  2834  000E                     	;# 
  2835  0010                     	;# 
  2836  0011                     	;# 
  2837  0012                     	;# 
  2838  0013                     	;# 
  2839  0014                     	;# 
  2840  0015                     	;# 
  2841  0016                     	;# 
  2842  0016                     	;# 
  2843  0017                     	;# 
  2844  0018                     	;# 
  2845  0019                     	;# 
  2846  001A                     	;# 
  2847  001A                     	;# 
  2848  001B                     	;# 
  2849  001B                     	;# 
  2850  001C                     	;# 
  2851  001D                     	;# 
  2852  001E                     	;# 
  2853  001F                     	;# 
  2854  008C                     	;# 
  2855  008D                     	;# 
  2856  008E                     	;# 
  2857  0090                     	;# 
  2858  0091                     	;# 
  2859  0092                     	;# 
  2860  0093                     	;# 
  2861  0094                     	;# 
  2862  0095                     	;# 
  2863  0096                     	;# 
  2864  0098                     	;# 
  2865  0099                     	;# 
  2866  009A                     	;# 
  2867  009B                     	;# 
  2868  009B                     	;# 
  2869  009C                     	;# 
  2870  009D                     	;# 
  2871  009E                     	;# 
  2872  009F                     	;# 
  2873  010C                     	;# 
  2874  010D                     	;# 
  2875  010E                     	;# 
  2876  0111                     	;# 
  2877  0112                     	;# 
  2878  0113                     	;# 
  2879  0114                     	;# 
  2880  0115                     	;# 
  2881  0116                     	;# 
  2882  0117                     	;# 
  2883  0118                     	;# 
  2884  0119                     	;# 
  2885  011C                     	;# 
  2886  018C                     	;# 
  2887  018D                     	;# 
  2888  018E                     	;# 
  2889  0191                     	;# 
  2890  0191                     	;# 
  2891  0192                     	;# 
  2892  0193                     	;# 
  2893  0193                     	;# 
  2894  0194                     	;# 
  2895  0195                     	;# 
  2896  0196                     	;# 
  2897  0197                     	;# 
  2898  0199                     	;# 
  2899  0199                     	;# 
  2900  0199                     	;# 
  2901  019A                     	;# 
  2902  019A                     	;# 
  2903  019A                     	;# 
  2904  019B                     	;# 
  2905  019B                     	;# 
  2906  019B                     	;# 
  2907  019B                     	;# 
  2908  019B                     	;# 
  2909  019C                     	;# 
  2910  019C                     	;# 
  2911  019C                     	;# 
  2912  019D                     	;# 
  2913  019D                     	;# 
  2914  019D                     	;# 
  2915  019E                     	;# 
  2916  019E                     	;# 
  2917  019E                     	;# 
  2918  019F                     	;# 
  2919  019F                     	;# 
  2920  019F                     	;# 
  2921  019F                     	;# 
  2922  019F                     	;# 
  2923  020C                     	;# 
  2924  020D                     	;# 
  2925  020E                     	;# 
  2926  0211                     	;# 
  2927  0211                     	;# 
  2928  0212                     	;# 
  2929  0212                     	;# 
  2930  0213                     	;# 
  2931  0213                     	;# 
  2932  0214                     	;# 
  2933  0214                     	;# 
  2934  0215                     	;# 
  2935  0215                     	;# 
  2936  0215                     	;# 
  2937  0215                     	;# 
  2938  0216                     	;# 
  2939  0216                     	;# 
  2940  0217                     	;# 
  2941  0217                     	;# 
  2942  028C                     	;# 
  2943  028D                     	;# 
  2944  028E                     	;# 
  2945  0291                     	;# 
  2946  0291                     	;# 
  2947  0292                     	;# 
  2948  0293                     	;# 
  2949  0294                     	;# 
  2950  0298                     	;# 
  2951  0298                     	;# 
  2952  0299                     	;# 
  2953  029A                     	;# 
  2954  029B                     	;# 
  2955  029E                     	;# 
  2956  030C                     	;# 
  2957  030D                     	;# 
  2958  030E                     	;# 
  2959  038C                     	;# 
  2960  038D                     	;# 
  2961  038E                     	;# 
  2962  0391                     	;# 
  2963  0392                     	;# 
  2964  0393                     	;# 
  2965  0394                     	;# 
  2966  0395                     	;# 
  2967  0396                     	;# 
  2968  0397                     	;# 
  2969  0398                     	;# 
  2970  0399                     	;# 
  2971  040E                     	;# 
  2972  0413                     	;# 
  2973  0413                     	;# 
  2974  0414                     	;# 
  2975  0414                     	;# 
  2976  0415                     	;# 
  2977  0416                     	;# 
  2978  0417                     	;# 
  2979  0418                     	;# 
  2980  041A                     	;# 
  2981  041A                     	;# 
  2982  041B                     	;# 
  2983  041B                     	;# 
  2984  041C                     	;# 
  2985  041D                     	;# 
  2986  041E                     	;# 
  2987  041F                     	;# 
  2988  0493                     	;# 
  2989  0494                     	;# 
  2990  0495                     	;# 
  2991  0496                     	;# 
  2992  049A                     	;# 
  2993  049B                     	;# 
  2994  049C                     	;# 
  2995  049D                     	;# 
  2996  058C                     	;# 
  2997  058C                     	;# 
  2998  058D                     	;# 
  2999  058E                     	;# 
  3000  058E                     	;# 
  3001  058F                     	;# 
  3002  0590                     	;# 
  3003  0590                     	;# 
  3004  0591                     	;# 
  3005  0592                     	;# 
  3006  0592                     	;# 
  3007  0593                     	;# 
  3008  0594                     	;# 
  3009  0594                     	;# 
  3010  0595                     	;# 
  3011  0596                     	;# 
  3012  0596                     	;# 
  3013  0597                     	;# 
  3014  0598                     	;# 
  3015  0599                     	;# 
  3016  059A                     	;# 
  3017  059B                     	;# 
  3018  059B                     	;# 
  3019  059C                     	;# 
  3020  059D                     	;# 
  3021  060C                     	;# 
  3022  060C                     	;# 
  3023  060D                     	;# 
  3024  060E                     	;# 
  3025  060F                     	;# 
  3026  060F                     	;# 
  3027  0610                     	;# 
  3028  0611                     	;# 
  3029  0612                     	;# 
  3030  0613                     	;# 
  3031  0614                     	;# 
  3032  0617                     	;# 
  3033  0618                     	;# 
  3034  0619                     	;# 
  3035  061A                     	;# 
  3036  061B                     	;# 
  3037  061C                     	;# 
  3038  0691                     	;# 
  3039  0692                     	;# 
  3040  0693                     	;# 
  3041  0694                     	;# 
  3042  0695                     	;# 
  3043  0696                     	;# 
  3044  0697                     	;# 
  3045  0699                     	;# 
  3046  069A                     	;# 
  3047  0711                     	;# 
  3048  0712                     	;# 
  3049  0713                     	;# 
  3050  0714                     	;# 
  3051  0715                     	;# 
  3052  0718                     	;# 
  3053  0718                     	;# 
  3054  0719                     	;# 
  3055  071A                     	;# 
  3056  071A                     	;# 
  3057  071B                     	;# 
  3058  071C                     	;# 
  3059  071D                     	;# 
  3060  0791                     	;# 
  3061  0791                     	;# 
  3062  0792                     	;# 
  3063  0793                     	;# 
  3064  0793                     	;# 
  3065  0794                     	;# 
  3066  0795                     	;# 
  3067  0795                     	;# 
  3068  0796                     	;# 
  3069  0797                     	;# 
  3070  0797                     	;# 
  3071  0798                     	;# 
  3072  0799                     	;# 
  3073  079A                     	;# 
  3074  080C                     	;# 
  3075  080C                     	;# 
  3076  080D                     	;# 
  3077  080E                     	;# 
  3078  080E                     	;# 
  3079  080F                     	;# 
  3080  0810                     	;# 
  3081  0810                     	;# 
  3082  0811                     	;# 
  3083  0812                     	;# 
  3084  0812                     	;# 
  3085  0813                     	;# 
  3086  0814                     	;# 
  3087  0815                     	;# 
  3088  0816                     	;# 
  3089  0817                     	;# 
  3090  0818                     	;# 
  3091  0819                     	;# 
  3092  081A                     	;# 
  3093  081A                     	;# 
  3094  081B                     	;# 
  3095  081C                     	;# 
  3096  081C                     	;# 
  3097  081D                     	;# 
  3098  088C                     	;# 
  3099  088D                     	;# 
  3100  088E                     	;# 
  3101  088F                     	;# 
  3102  088F                     	;# 
  3103  0890                     	;# 
  3104  0891                     	;# 
  3105  0892                     	;# 
  3106  0893                     	;# 
  3107  0893                     	;# 
  3108  0894                     	;# 
  3109  0895                     	;# 
  3110  0896                     	;# 
  3111  0897                     	;# 
  3112  0897                     	;# 
  3113  0898                     	;# 
  3114  0899                     	;# 
  3115  0D8C                     	;# 
  3116  0D8C                     	;# 
  3117  0D8D                     	;# 
  3118  0D8E                     	;# 
  3119  0D8F                     	;# 
  3120  0D8F                     	;# 
  3121  0D90                     	;# 
  3122  0D91                     	;# 
  3123  0D92                     	;# 
  3124  0D92                     	;# 
  3125  0D93                     	;# 
  3126  0D94                     	;# 
  3127  0D95                     	;# 
  3128  0D95                     	;# 
  3129  0D96                     	;# 
  3130  0D97                     	;# 
  3131  0D98                     	;# 
  3132  0D99                     	;# 
  3133  0D9A                     	;# 
  3134  0D9B                     	;# 
  3135  0D9C                     	;# 
  3136  0D9D                     	;# 
  3137  0D9E                     	;# 
  3138  0D9E                     	;# 
  3139  0D9F                     	;# 
  3140  0DA0                     	;# 
  3141  0DA1                     	;# 
  3142  0DA1                     	;# 
  3143  0DA2                     	;# 
  3144  0DA3                     	;# 
  3145  0DA4                     	;# 
  3146  0DA4                     	;# 
  3147  0DA5                     	;# 
  3148  0DA6                     	;# 
  3149  0DA7                     	;# 
  3150  0DA7                     	;# 
  3151  0DA8                     	;# 
  3152  0DA9                     	;# 
  3153  0DAA                     	;# 
  3154  0DAB                     	;# 
  3155  0DAC                     	;# 
  3156  0DAD                     	;# 
  3157  0DAE                     	;# 
  3158  0DAF                     	;# 
  3159  0E0F                     	;# 
  3160  0E10                     	;# 
  3161  0E11                     	;# 
  3162  0E12                     	;# 
  3163  0E13                     	;# 
  3164  0E14                     	;# 
  3165  0E15                     	;# 
  3166  0E16                     	;# 
  3167  0E17                     	;# 
  3168  0E18                     	;# 
  3169  0E19                     	;# 
  3170  0E1A                     	;# 
  3171  0E1B                     	;# 
  3172  0E1C                     	;# 
  3173  0E1D                     	;# 
  3174  0E1E                     	;# 
  3175  0E1F                     	;# 
  3176  0E20                     	;# 
  3177  0E21                     	;# 
  3178  0E22                     	;# 
  3179  0E23                     	;# 
  3180  0E24                     	;# 
  3181  0E25                     	;# 
  3182  0E26                     	;# 
  3183  0E27                     	;# 
  3184  0E28                     	;# 
  3185  0E29                     	;# 
  3186  0E2A                     	;# 
  3187  0E2B                     	;# 
  3188  0E2C                     	;# 
  3189  0E2D                     	;# 
  3190  0E2E                     	;# 
  3191  0E90                     	;# 
  3192  0E91                     	;# 
  3193  0E92                     	;# 
  3194  0E94                     	;# 
  3195  0E95                     	;# 
  3196  0E9C                     	;# 
  3197  0E9D                     	;# 
  3198  0E9E                     	;# 
  3199  0E9F                     	;# 
  3200  0EA0                     	;# 
  3201  0EA1                     	;# 
  3202  0EA2                     	;# 
  3203  0EA3                     	;# 
  3204  0EA4                     	;# 
  3205  0EA5                     	;# 
  3206  0EA6                     	;# 
  3207  0EA7                     	;# 
  3208  0F0F                     	;# 
  3209  0F10                     	;# 
  3210  0F11                     	;# 
  3211  0F12                     	;# 
  3212  0F13                     	;# 
  3213  0F14                     	;# 
  3214  0F15                     	;# 
  3215  0F16                     	;# 
  3216  0F17                     	;# 
  3217  0F18                     	;# 
  3218  0F19                     	;# 
  3219  0F1A                     	;# 
  3220  0F1B                     	;# 
  3221  0F1C                     	;# 
  3222  0F1D                     	;# 
  3223  0F1E                     	;# 
  3224  0F1F                     	;# 
  3225  0F20                     	;# 
  3226  0F21                     	;# 
  3227  0F22                     	;# 
  3228  0F23                     	;# 
  3229  0F24                     	;# 
  3230  0F25                     	;# 
  3231  0F26                     	;# 
  3232  0F27                     	;# 
  3233  0F28                     	;# 
  3234  0F29                     	;# 
  3235  0F2A                     	;# 
  3236  0F2B                     	;# 
  3237  0F2C                     	;# 
  3238  0F2D                     	;# 
  3239  0F2E                     	;# 
  3240  0F2F                     	;# 
  3241  0F30                     	;# 
  3242  0F31                     	;# 
  3243  0F32                     	;# 
  3244  0F33                     	;# 
  3245  0F34                     	;# 
  3246  0F35                     	;# 
  3247  0F36                     	;# 
  3248  0F37                     	;# 
  3249  0FE4                     	;# 
  3250  0FE5                     	;# 
  3251  0FE6                     	;# 
  3252  0FE7                     	;# 
  3253  0FE8                     	;# 
  3254  0FE9                     	;# 
  3255  0FEA                     	;# 
  3256  0FEB                     	;# 
  3257  0FED                     	;# 
  3258  0FEE                     	;# 
  3259  0FEF                     	;# 
  3260  0000                     	;# 
  3261  0001                     	;# 
  3262  0002                     	;# 
  3263  0003                     	;# 
  3264  0004                     	;# 
  3265  0005                     	;# 
  3266  0006                     	;# 
  3267  0007                     	;# 
  3268  0008                     	;# 
  3269  0009                     	;# 
  3270  000A                     	;# 
  3271  000B                     	;# 
  3272  000C                     	;# 
  3273  000D                     	;# 
  3274  000E                     	;# 
  3275  0010                     	;# 
  3276  0011                     	;# 
  3277  0012                     	;# 
  3278  0013                     	;# 
  3279  0014                     	;# 
  3280  0015                     	;# 
  3281  0016                     	;# 
  3282  0016                     	;# 
  3283  0017                     	;# 
  3284  0018                     	;# 
  3285  0019                     	;# 
  3286  001A                     	;# 
  3287  001A                     	;# 
  3288  001B                     	;# 
  3289  001B                     	;# 
  3290  001C                     	;# 
  3291  001D                     	;# 
  3292  001E                     	;# 
  3293  001F                     	;# 
  3294  008C                     	;# 
  3295  008D                     	;# 
  3296  008E                     	;# 
  3297  0090                     	;# 
  3298  0091                     	;# 
  3299  0092                     	;# 
  3300  0093                     	;# 
  3301  0094                     	;# 
  3302  0095                     	;# 
  3303  0096                     	;# 
  3304  0098                     	;# 
  3305  0099                     	;# 
  3306  009A                     	;# 
  3307  009B                     	;# 
  3308  009B                     	;# 
  3309  009C                     	;# 
  3310  009D                     	;# 
  3311  009E                     	;# 
  3312  009F                     	;# 
  3313  010C                     	;# 
  3314  010D                     	;# 
  3315  010E                     	;# 
  3316  0111                     	;# 
  3317  0112                     	;# 
  3318  0113                     	;# 
  3319  0114                     	;# 
  3320  0115                     	;# 
  3321  0116                     	;# 
  3322  0117                     	;# 
  3323  0118                     	;# 
  3324  0119                     	;# 
  3325  011C                     	;# 
  3326  018C                     	;# 
  3327  018D                     	;# 
  3328  018E                     	;# 
  3329  0191                     	;# 
  3330  0191                     	;# 
  3331  0192                     	;# 
  3332  0193                     	;# 
  3333  0193                     	;# 
  3334  0194                     	;# 
  3335  0195                     	;# 
  3336  0196                     	;# 
  3337  0197                     	;# 
  3338  0199                     	;# 
  3339  0199                     	;# 
  3340  0199                     	;# 
  3341  019A                     	;# 
  3342  019A                     	;# 
  3343  019A                     	;# 
  3344  019B                     	;# 
  3345  019B                     	;# 
  3346  019B                     	;# 
  3347  019B                     	;# 
  3348  019B                     	;# 
  3349  019C                     	;# 
  3350  019C                     	;# 
  3351  019C                     	;# 
  3352  019D                     	;# 
  3353  019D                     	;# 
  3354  019D                     	;# 
  3355  019E                     	;# 
  3356  019E                     	;# 
  3357  019E                     	;# 
  3358  019F                     	;# 
  3359  019F                     	;# 
  3360  019F                     	;# 
  3361  019F                     	;# 
  3362  019F                     	;# 
  3363  020C                     	;# 
  3364  020D                     	;# 
  3365  020E                     	;# 
  3366  0211                     	;# 
  3367  0211                     	;# 
  3368  0212                     	;# 
  3369  0212                     	;# 
  3370  0213                     	;# 
  3371  0213                     	;# 
  3372  0214                     	;# 
  3373  0214                     	;# 
  3374  0215                     	;# 
  3375  0215                     	;# 
  3376  0215                     	;# 
  3377  0215                     	;# 
  3378  0216                     	;# 
  3379  0216                     	;# 
  3380  0217                     	;# 
  3381  0217                     	;# 
  3382  028C                     	;# 
  3383  028D                     	;# 
  3384  028E                     	;# 
  3385  0291                     	;# 
  3386  0291                     	;# 
  3387  0292                     	;# 
  3388  0293                     	;# 
  3389  0294                     	;# 
  3390  0298                     	;# 
  3391  0298                     	;# 
  3392  0299                     	;# 
  3393  029A                     	;# 
  3394  029B                     	;# 
  3395  029E                     	;# 
  3396  030C                     	;# 
  3397  030D                     	;# 
  3398  030E                     	;# 
  3399  038C                     	;# 
  3400  038D                     	;# 
  3401  038E                     	;# 
  3402  0391                     	;# 
  3403  0392                     	;# 
  3404  0393                     	;# 
  3405  0394                     	;# 
  3406  0395                     	;# 
  3407  0396                     	;# 
  3408  0397                     	;# 
  3409  0398                     	;# 
  3410  0399                     	;# 
  3411  040E                     	;# 
  3412  0413                     	;# 
  3413  0413                     	;# 
  3414  0414                     	;# 
  3415  0414                     	;# 
  3416  0415                     	;# 
  3417  0416                     	;# 
  3418  0417                     	;# 
  3419  0418                     	;# 
  3420  041A                     	;# 
  3421  041A                     	;# 
  3422  041B                     	;# 
  3423  041B                     	;# 
  3424  041C                     	;# 
  3425  041D                     	;# 
  3426  041E                     	;# 
  3427  041F                     	;# 
  3428  0493                     	;# 
  3429  0494                     	;# 
  3430  0495                     	;# 
  3431  0496                     	;# 
  3432  049A                     	;# 
  3433  049B                     	;# 
  3434  049C                     	;# 
  3435  049D                     	;# 
  3436  058C                     	;# 
  3437  058C                     	;# 
  3438  058D                     	;# 
  3439  058E                     	;# 
  3440  058E                     	;# 
  3441  058F                     	;# 
  3442  0590                     	;# 
  3443  0590                     	;# 
  3444  0591                     	;# 
  3445  0592                     	;# 
  3446  0592                     	;# 
  3447  0593                     	;# 
  3448  0594                     	;# 
  3449  0594                     	;# 
  3450  0595                     	;# 
  3451  0596                     	;# 
  3452  0596                     	;# 
  3453  0597                     	;# 
  3454  0598                     	;# 
  3455  0599                     	;# 
  3456  059A                     	;# 
  3457  059B                     	;# 
  3458  059B                     	;# 
  3459  059C                     	;# 
  3460  059D                     	;# 
  3461  060C                     	;# 
  3462  060C                     	;# 
  3463  060D                     	;# 
  3464  060E                     	;# 
  3465  060F                     	;# 
  3466  060F                     	;# 
  3467  0610                     	;# 
  3468  0611                     	;# 
  3469  0612                     	;# 
  3470  0613                     	;# 
  3471  0614                     	;# 
  3472  0617                     	;# 
  3473  0618                     	;# 
  3474  0619                     	;# 
  3475  061A                     	;# 
  3476  061B                     	;# 
  3477  061C                     	;# 
  3478  0691                     	;# 
  3479  0692                     	;# 
  3480  0693                     	;# 
  3481  0694                     	;# 
  3482  0695                     	;# 
  3483  0696                     	;# 
  3484  0697                     	;# 
  3485  0699                     	;# 
  3486  069A                     	;# 
  3487  0711                     	;# 
  3488  0712                     	;# 
  3489  0713                     	;# 
  3490  0714                     	;# 
  3491  0715                     	;# 
  3492  0718                     	;# 
  3493  0718                     	;# 
  3494  0719                     	;# 
  3495  071A                     	;# 
  3496  071A                     	;# 
  3497  071B                     	;# 
  3498  071C                     	;# 
  3499  071D                     	;# 
  3500  0791                     	;# 
  3501  0791                     	;# 
  3502  0792                     	;# 
  3503  0793                     	;# 
  3504  0793                     	;# 
  3505  0794                     	;# 
  3506  0795                     	;# 
  3507  0795                     	;# 
  3508  0796                     	;# 
  3509  0797                     	;# 
  3510  0797                     	;# 
  3511  0798                     	;# 
  3512  0799                     	;# 
  3513  079A                     	;# 
  3514  080C                     	;# 
  3515  080C                     	;# 
  3516  080D                     	;# 
  3517  080E                     	;# 
  3518  080E                     	;# 
  3519  080F                     	;# 
  3520  0810                     	;# 
  3521  0810                     	;# 
  3522  0811                     	;# 
  3523  0812                     	;# 
  3524  0812                     	;# 
  3525  0813                     	;# 
  3526  0814                     	;# 
  3527  0815                     	;# 
  3528  0816                     	;# 
  3529  0817                     	;# 
  3530  0818                     	;# 
  3531  0819                     	;# 
  3532  081A                     	;# 
  3533  081A                     	;# 
  3534  081B                     	;# 
  3535  081C                     	;# 
  3536  081C                     	;# 
  3537  081D                     	;# 
  3538  088C                     	;# 
  3539  088D                     	;# 
  3540  088E                     	;# 
  3541  088F                     	;# 
  3542  088F                     	;# 
  3543  0890                     	;# 
  3544  0891                     	;# 
  3545  0892                     	;# 
  3546  0893                     	;# 
  3547  0893                     	;# 
  3548  0894                     	;# 
  3549  0895                     	;# 
  3550  0896                     	;# 
  3551  0897                     	;# 
  3552  0897                     	;# 
  3553  0898                     	;# 
  3554  0899                     	;# 
  3555  0D8C                     	;# 
  3556  0D8C                     	;# 
  3557  0D8D                     	;# 
  3558  0D8E                     	;# 
  3559  0D8F                     	;# 
  3560  0D8F                     	;# 
  3561  0D90                     	;# 
  3562  0D91                     	;# 
  3563  0D92                     	;# 
  3564  0D92                     	;# 
  3565  0D93                     	;# 
  3566  0D94                     	;# 
  3567  0D95                     	;# 
  3568  0D95                     	;# 
  3569  0D96                     	;# 
  3570  0D97                     	;# 
  3571  0D98                     	;# 
  3572  0D99                     	;# 
  3573  0D9A                     	;# 
  3574  0D9B                     	;# 
  3575  0D9C                     	;# 
  3576  0D9D                     	;# 
  3577  0D9E                     	;# 
  3578  0D9E                     	;# 
  3579  0D9F                     	;# 
  3580  0DA0                     	;# 
  3581  0DA1                     	;# 
  3582  0DA1                     	;# 
  3583  0DA2                     	;# 
  3584  0DA3                     	;# 
  3585  0DA4                     	;# 
  3586  0DA4                     	;# 
  3587  0DA5                     	;# 
  3588  0DA6                     	;# 
  3589  0DA7                     	;# 
  3590  0DA7                     	;# 
  3591  0DA8                     	;# 
  3592  0DA9                     	;# 
  3593  0DAA                     	;# 
  3594  0DAB                     	;# 
  3595  0DAC                     	;# 
  3596  0DAD                     	;# 
  3597  0DAE                     	;# 
  3598  0DAF                     	;# 
  3599  0E0F                     	;# 
  3600  0E10                     	;# 
  3601  0E11                     	;# 
  3602  0E12                     	;# 
  3603  0E13                     	;# 
  3604  0E14                     	;# 
  3605  0E15                     	;# 
  3606  0E16                     	;# 
  3607  0E17                     	;# 
  3608  0E18                     	;# 
  3609  0E19                     	;# 
  3610  0E1A                     	;# 
  3611  0E1B                     	;# 
  3612  0E1C                     	;# 
  3613  0E1D                     	;# 
  3614  0E1E                     	;# 
  3615  0E1F                     	;# 
  3616  0E20                     	;# 
  3617  0E21                     	;# 
  3618  0E22                     	;# 
  3619  0E23                     	;# 
  3620  0E24                     	;# 
  3621  0E25                     	;# 
  3622  0E26                     	;# 
  3623  0E27                     	;# 
  3624  0E28                     	;# 
  3625  0E29                     	;# 
  3626  0E2A                     	;# 
  3627  0E2B                     	;# 
  3628  0E2C                     	;# 
  3629  0E2D                     	;# 
  3630  0E2E                     	;# 
  3631  0E90                     	;# 
  3632  0E91                     	;# 
  3633  0E92                     	;# 
  3634  0E94                     	;# 
  3635  0E95                     	;# 
  3636  0E9C                     	;# 
  3637  0E9D                     	;# 
  3638  0E9E                     	;# 
  3639  0E9F                     	;# 
  3640  0EA0                     	;# 
  3641  0EA1                     	;# 
  3642  0EA2                     	;# 
  3643  0EA3                     	;# 
  3644  0EA4                     	;# 
  3645  0EA5                     	;# 
  3646  0EA6                     	;# 
  3647  0EA7                     	;# 
  3648  0F0F                     	;# 
  3649  0F10                     	;# 
  3650  0F11                     	;# 
  3651  0F12                     	;# 
  3652  0F13                     	;# 
  3653  0F14                     	;# 
  3654  0F15                     	;# 
  3655  0F16                     	;# 
  3656  0F17                     	;# 
  3657  0F18                     	;# 
  3658  0F19                     	;# 
  3659  0F1A                     	;# 
  3660  0F1B                     	;# 
  3661  0F1C                     	;# 
  3662  0F1D                     	;# 
  3663  0F1E                     	;# 
  3664  0F1F                     	;# 
  3665  0F20                     	;# 
  3666  0F21                     	;# 
  3667  0F22                     	;# 
  3668  0F23                     	;# 
  3669  0F24                     	;# 
  3670  0F25                     	;# 
  3671  0F26                     	;# 
  3672  0F27                     	;# 
  3673  0F28                     	;# 
  3674  0F29                     	;# 
  3675  0F2A                     	;# 
  3676  0F2B                     	;# 
  3677  0F2C                     	;# 
  3678  0F2D                     	;# 
  3679  0F2E                     	;# 
  3680  0F2F                     	;# 
  3681  0F30                     	;# 
  3682  0F31                     	;# 
  3683  0F32                     	;# 
  3684  0F33                     	;# 
  3685  0F34                     	;# 
  3686  0F35                     	;# 
  3687  0F36                     	;# 
  3688  0F37                     	;# 
  3689  0FE4                     	;# 
  3690  0FE5                     	;# 
  3691  0FE6                     	;# 
  3692  0FE7                     	;# 
  3693  0FE8                     	;# 
  3694  0FE9                     	;# 
  3695  0FEA                     	;# 
  3696  0FEB                     	;# 
  3697  0FED                     	;# 
  3698  0FEE                     	;# 
  3699  0FEF                     	;# 
  3700                           
  3701                           	psect	idataBANK0
  3702  0E94                     __pidataBANK0:	
  3703                           
  3704                           ;initializer for _Angle
  3705  0E94  340A               	retlw	10
  3706  0E95  3400               	retlw	0
  3707                           
  3708                           ;initializer for _Validation
  3709  0E96  3404               	retlw	4
  3710                           
  3711                           	psect	stringtext1
  3712  05DD                     __pstringtext1:	
  3713  05DD                     _fsmStateTable:	
  3714  05DD  3483               	retlw	low _I2C_DO_IDLE
  3715  05DE  340F               	retlw	high _I2C_DO_IDLE
  3716  05DF  34DF               	retlw	low _I2C_DO_SEND_ADR_READ
  3717  05E0  3407               	retlw	high _I2C_DO_SEND_ADR_READ
  3718  05E1  34C6               	retlw	low _I2C_DO_SEND_ADR_WRITE
  3719  05E2  340F               	retlw	high _I2C_DO_SEND_ADR_WRITE
  3720  05E3  34D9               	retlw	low _I2C_DO_TX
  3721  05E4  3401               	retlw	high _I2C_DO_TX
  3722  05E5  34B6               	retlw	low _I2C_DO_RX
  3723  05E6  3402               	retlw	high _I2C_DO_RX
  3724  05E7  34A8               	retlw	low _I2C_DO_RCEN
  3725  05E8  340F               	retlw	high _I2C_DO_RCEN
  3726  05E9  34A8               	retlw	low _I2C_DO_TX_EMPTY
  3727  05EA  3404               	retlw	high _I2C_DO_TX_EMPTY
  3728  05EB  344B               	retlw	low _I2C_DO_SEND_RESTART_READ
  3729  05EC  340F               	retlw	high _I2C_DO_SEND_RESTART_READ
  3730  05ED  3453               	retlw	low _I2C_DO_SEND_RESTART_WRITE
  3731  05EE  340F               	retlw	high _I2C_DO_SEND_RESTART_WRITE
  3732  05EF  345B               	retlw	low _I2C_DO_SEND_RESTART
  3733  05F0  340F               	retlw	high _I2C_DO_SEND_RESTART
  3734  05F1  3463               	retlw	low _I2C_DO_SEND_STOP
  3735  05F2  340F               	retlw	high _I2C_DO_SEND_STOP
  3736  05F3  346B               	retlw	low _I2C_DO_RX_ACK
  3737  05F4  340F               	retlw	high _I2C_DO_RX_ACK
  3738  05F5  3473               	retlw	low _I2C_DO_RX_NACK_STOP
  3739  05F6  340F               	retlw	high _I2C_DO_RX_NACK_STOP
  3740  05F7  347B               	retlw	low _I2C_DO_RX_NACK_RESTART
  3741  05F8  340F               	retlw	high _I2C_DO_RX_NACK_RESTART
  3742  05F9  348C               	retlw	low _I2C_DO_RESET
  3743  05FA  340F               	retlw	high _I2C_DO_RESET
  3744  05FB  34FD               	retlw	low _I2C_DO_ADDRESS_NACK
  3745  05FC  3404               	retlw	high _I2C_DO_ADDRESS_NACK
  3746  05FD                     __end_of_fsmStateTable:	
  3747                           
  3748                           	psect	nvBANK0
  3749  0054                     __pnvBANK0:	
  3750  0054                     _TMR2_InterruptHandler:	
  3751  0054                     	ds	2
  3752  0056                     _EUSART_FramingErrorHandler:	
  3753  0056                     	ds	2
  3754  0058                     _EUSART_RxDefaultInterruptHandler:	
  3755  0058                     	ds	2
  3756                           
  3757                           	psect	nvBANK1
  3758  00CF                     __pnvBANK1:	
  3759  00CF                     _EUSART_ErrorHandler:	
  3760  00CF                     	ds	2
  3761  00D1                     _EUSART_OverrunErrorHandler:	
  3762  00D1                     	ds	2
  3763  000C                     _PORTAbits	set	12
  3764  001B                     _PR2	set	27
  3765  001A                     _TMR2	set	26
  3766  001C                     _T2CONbits	set	28
  3767  001F                     _T2RSTbits	set	31
  3768  001D                     _T2HLTbits	set	29
  3769  001C                     _T2CON	set	28
  3770  001A                     _T2TMR	set	26
  3771  001B                     _T2PR	set	27
  3772  001F                     _T2RST	set	31
  3773  001D                     _T2HLT	set	29
  3774  001E                     _T2CLKCON	set	30
  3775  0011                     _PIR2bits	set	17
  3776  0010                     _PIR1bits	set	16
  3777  000B                     _INTCONbits	set	11
  3778  0095                     _OPTION_REGbits	set	149
  3779  008E                     _TRISC	set	142
  3780  008D                     _TRISB	set	141
  3781  008C                     _TRISA	set	140
  3782  0098                     _OSCTUNE	set	152
  3783  0099                     _OSCCON	set	153
  3784  0090                     _PIE1bits	set	144
  3785  010C                     _LATAbits	set	268
  3786  010E                     _LATCbits	set	270
  3787  010E                     _LATC	set	270
  3788  010D                     _LATB	set	269
  3789  010C                     _LATA	set	268
  3790  0116                     _BORCON	set	278
  3791  0199                     _RC1REG	set	409
  3792  019D                     _RC1STAbits	set	413
  3793  019A                     _TX1REG	set	410
  3794  019E                     _TX1STAbits	set	414
  3795  019C                     _SPBRGH	set	412
  3796  019B                     _SPBRGL	set	411
  3797  019E                     _TX1STA	set	414
  3798  019D                     _RC1STA	set	413
  3799  019F                     _BAUD1CON	set	415
  3800  018C                     _ANSELA	set	396
  3801  018D                     _ANSELB	set	397
  3802  018E                     _ANSELC	set	398
  3803  0214                     _SSP1STATbits	set	532
  3804  0216                     _SSP1CON2bits	set	534
  3805  0211                     _SSP1BUF	set	529
  3806  0215                     _SSP1CON1bits	set	533
  3807  0212                     _SSP1ADD	set	530
  3808  0216                     _SSP1CON2	set	534
  3809  0215                     _SSP1CON1	set	533
  3810  0214                     _SSP1STAT	set	532
  3811  020E                     _WPUC	set	526
  3812  020C                     _WPUA	set	524
  3813  020D                     _WPUB	set	525
  3814  029E                     _CCPTMRSbits	set	670
  3815  028E                     _ODCONC	set	654
  3816  028D                     _ODCONB	set	653
  3817  028C                     _ODCONA	set	652
  3818  030E                     _SLRCONC	set	782
  3819  030D                     _SLRCONB	set	781
  3820  030C                     _SLRCONA	set	780
  3821  038E                     _INLVLC	set	910
  3822  038D                     _INLVLB	set	909
  3823  038C                     _INLVLA	set	908
  3824  0617                     _PWM3DCL	set	1559
  3825  0618                     _PWM3DCH	set	1560
  3826  0619                     _PWM3CON	set	1561
  3827  0E20                     _SSPCLKPPS	set	3616
  3828  0E21                     _SSPDATPPS	set	3617
  3829  0E24                     _RXPPS	set	3620
  3830  0E92                     _RA2PPS	set	3730
  3831  0E9C                     _RB4PPS	set	3740
  3832  0E9F                     _RB7PPS	set	3743
  3833  0E9E                     _RB6PPS	set	3742
  3834                           
  3835                           ; #config settings
  3836  0000                     
  3837                           	psect	cinit
  3838  0026                     start_initialization:	
  3839  0026                     __initialization:	
  3840                           
  3841                           ; Initialize objects allocated to BANK0
  3842  0026  318E  2694  3180   	fcall	__pidataBANK0	;fetch initializer
  3843  0029  00DA               	movwf	__pdataBANK0& (0+127)
  3844  002A  318E  2695  3180   	fcall	__pidataBANK0+1	;fetch initializer
  3845  002D  00DB               	movwf	(__pdataBANK0+1)& (0+127)
  3846  002E  318E  2696  3180   	fcall	__pidataBANK0+2	;fetch initializer
  3847  0031  00DC               	movwf	(__pdataBANK0+2)& (0+127)
  3848                           
  3849                           ; Clear objects allocated to BANK0
  3850  0032  3020               	movlw	low __pbssBANK0
  3851  0033  0084               	movwf	4
  3852  0034  3000               	movlw	high __pbssBANK0
  3853  0035  0085               	movwf	5
  3854  0036  301A               	movlw	26
  3855  0037  318F  2727  3180   	fcall	clear_ram0
  3856                           
  3857                           ; Clear objects allocated to BANK1
  3858  003A  30A0               	movlw	low __pbssBANK1
  3859  003B  0084               	movwf	4
  3860  003C  3000               	movlw	high __pbssBANK1
  3861  003D  0085               	movwf	5
  3862  003E  301D               	movlw	29
  3863  003F  318F  2727         	fcall	clear_ram0
  3864  0041                     end_of_initialization:	
  3865                           ;End of C runtime variable initialization code
  3866                           
  3867  0041                     __end_of__initialization:	
  3868  0041  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3869  0042  0020               	movlb	0
  3870  0043  3180  28FD         	ljmp	_main	;jump to C main() function
  3871                           
  3872                           	psect	bssBANK0
  3873  0020                     __pbssBANK0:	
  3874  0020                     _eusartRxStatusBuffer:	
  3875  0020                     	ds	8
  3876  0028                     _eusartRxBuffer:	
  3877  0028                     	ds	8
  3878  0030                     _Vitesse:	
  3879  0030                     	ds	2
  3880  0032                     _SateLeds:	
  3881  0032                     	ds	1
  3882  0033                     _PosUart:	
  3883  0033                     	ds	1
  3884  0034                     _Type:	
  3885  0034                     	ds	1
  3886  0035                     _Data:	
  3887  0035                     	ds	1
  3888  0036                     _eusartRxLastError:	
  3889  0036                     	ds	1
  3890  0037                     _eusartRxCount:	
  3891  0037                     	ds	1
  3892  0038                     _eusartRxTail:	
  3893  0038                     	ds	1
  3894  0039                     _eusartRxHead:	
  3895  0039                     	ds	1
  3896                           
  3897                           	psect	dataBANK0
  3898  005A                     __pdataBANK0:	
  3899  005A                     _Angle:	
  3900  005A                     	ds	2
  3901  005C                     _Validation:	
  3902  005C                     	ds	1
  3903                           
  3904                           	psect	bssBANK1
  3905  00A0                     __pbssBANK1:	
  3906  00A0                     _I2C_Status:	
  3907  00A0                     	ds	29
  3908                           
  3909                           	psect	clrtext
  3910  0F27                     clear_ram0:	
  3911                           ;	Called with FSR0 containing the base address, and
  3912                           ;	WREG with the size to clear
  3913                           
  3914  0F27  0064               	clrwdt	;clear the watchdog before getting into this loop
  3915  0F28                     clrloop0:	
  3916  0F28  0180               	clrf	0	;clear RAM location pointed to by FSR
  3917  0F29  3101               	addfsr 0,1
  3918  0F2A  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3919  0F2B  2F28               	goto	clrloop0	;have we reached the end yet?
  3920  0F2C  3400               	retlw	0	;all done for this memory range, return
  3921                           
  3922                           	psect	cstackBANK1
  3923  00BD                     __pcstackBANK1:	
  3924  00BD                     ?_I2C_SetDataCompleteCallback:	
  3925  00BD                     ?_I2C_SetAddressNackCallback:	
  3926                           ; 1 bytes @ 0x0
  3927                           
  3928  00BD                     I2C_SetDataCompleteCallback@cb:	
  3929                           ; 1 bytes @ 0x0
  3930                           
  3931  00BD                     I2C_SetAddressNackCallback@cb:	
  3932                           ; 2 bytes @ 0x0
  3933                           
  3934                           
  3935                           ; 2 bytes @ 0x0
  3936  00BD                     	ds	2
  3937  00BF                     I2C_SetDataCompleteCallback@ptr:	
  3938  00BF                     I2C_SetAddressNackCallback@ptr:	
  3939                           ; 1 bytes @ 0x2
  3940                           
  3941                           
  3942                           ; 1 bytes @ 0x2
  3943  00BF                     	ds	1
  3944  00C0                     ??_I2C_DO_TX:	
  3945  00C0                     ??_I2C_DO_RX:	
  3946                           ; 1 bytes @ 0x3
  3947                           
  3948  00C0                     ??_I2C_DO_TX_EMPTY:	
  3949                           ; 1 bytes @ 0x3
  3950                           
  3951  00C0                     ??_I2C_DO_ADDRESS_NACK:	
  3952                           ; 1 bytes @ 0x3
  3953                           
  3954                           
  3955                           ; 1 bytes @ 0x3
  3956  00C0                     	ds	1
  3957  00C1                     _I2C_DO_TX$794:	
  3958                           
  3959                           ; 2 bytes @ 0x4
  3960  00C1                     	ds	2
  3961  00C3                     ??_I2C_MasterFsm:	
  3962                           
  3963                           ; 1 bytes @ 0x6
  3964  00C3                     	ds	3
  3965  00C6                     ??_I2C_MasterOperation:	
  3966                           
  3967                           ; 1 bytes @ 0x9
  3968  00C6                     	ds	1
  3969  00C7                     I2C_MasterOperation@read:	
  3970                           
  3971                           ; 1 bytes @ 0xA
  3972  00C7                     	ds	1
  3973  00C8                     I2C_MasterOperation@returnValue:	
  3974                           
  3975                           ; 1 bytes @ 0xB
  3976  00C8                     	ds	1
  3977  00C9                     ?_I2C_Write1ByteRegister:	
  3978  00C9                     I2C_Write1ByteRegister@reg:	
  3979                           ; 1 bytes @ 0xC
  3980                           
  3981                           
  3982                           ; 1 bytes @ 0xC
  3983  00C9                     	ds	1
  3984  00CA                     I2C_Write1ByteRegister@data:	
  3985                           
  3986                           ; 1 bytes @ 0xD
  3987  00CA                     	ds	1
  3988  00CB                     ??_I2C_Write1ByteRegister:	
  3989                           
  3990                           ; 1 bytes @ 0xE
  3991  00CB                     	ds	1
  3992  00CC                     I2C_Write1ByteRegister@address:	
  3993                           
  3994                           ; 1 bytes @ 0xF
  3995  00CC                     	ds	1
  3996  00CD                     ??_main:	
  3997                           
  3998                           ; 1 bytes @ 0x10
  3999  00CD                     	ds	2
  4000                           
  4001                           	psect	cstackCOMMON
  4002  0070                     __pcstackCOMMON:	
  4003  0070                     ?_I2C_Open:	
  4004  0070                     ?_I2C_MasterWrite:	
  4005                           ; 1 bytes @ 0x0
  4006                           
  4007  0070                     ?_I2C_Close:	
  4008                           ; 1 bytes @ 0x0
  4009                           
  4010  0070                     ?_TMR2_ISR:	
  4011                           ; 1 bytes @ 0x0
  4012                           
  4013  0070                     ?_I2C_Initialize:	
  4014                           ; 1 bytes @ 0x0
  4015                           
  4016  0070                     ?_PIN_MANAGER_Initialize:	
  4017                           ; 1 bytes @ 0x0
  4018                           
  4019  0070                     ?_OSCILLATOR_Initialize:	
  4020                           ; 1 bytes @ 0x0
  4021                           
  4022  0070                     ?_PWM3_Initialize:	
  4023                           ; 1 bytes @ 0x0
  4024                           
  4025  0070                     ?_TMR2_Initialize:	
  4026                           ; 1 bytes @ 0x0
  4027                           
  4028  0070                     ?_EUSART_Initialize:	
  4029                           ; 1 bytes @ 0x0
  4030                           
  4031  0070                     ?_I2C_DO_IDLE:	
  4032                           ; 1 bytes @ 0x0
  4033                           
  4034  0070                     ?_I2C_DO_SEND_ADR_READ:	
  4035                           ; 1 bytes @ 0x0
  4036                           
  4037  0070                     ?_I2C_DO_SEND_ADR_WRITE:	
  4038                           ; 1 bytes @ 0x0
  4039                           
  4040  0070                     ?_I2C_DO_TX:	
  4041                           ; 1 bytes @ 0x0
  4042                           
  4043  0070                     ?_I2C_DO_RX:	
  4044                           ; 1 bytes @ 0x0
  4045                           
  4046  0070                     ?_I2C_DO_RCEN:	
  4047                           ; 1 bytes @ 0x0
  4048                           
  4049  0070                     ?_I2C_DO_TX_EMPTY:	
  4050                           ; 1 bytes @ 0x0
  4051                           
  4052  0070                     ?_I2C_DO_SEND_RESTART_READ:	
  4053                           ; 1 bytes @ 0x0
  4054                           
  4055  0070                     ?_I2C_DO_SEND_RESTART_WRITE:	
  4056                           ; 1 bytes @ 0x0
  4057                           
  4058  0070                     ?_I2C_DO_SEND_RESTART:	
  4059                           ; 1 bytes @ 0x0
  4060                           
  4061  0070                     ?_I2C_DO_SEND_STOP:	
  4062                           ; 1 bytes @ 0x0
  4063                           
  4064  0070                     ?_I2C_DO_RX_ACK:	
  4065                           ; 1 bytes @ 0x0
  4066                           
  4067  0070                     ?_I2C_DO_RX_NACK_STOP:	
  4068                           ; 1 bytes @ 0x0
  4069                           
  4070  0070                     ?_I2C_DO_RX_NACK_RESTART:	
  4071                           ; 1 bytes @ 0x0
  4072                           
  4073  0070                     ?_I2C_DO_RESET:	
  4074                           ; 1 bytes @ 0x0
  4075                           
  4076  0070                     ?_I2C_DO_ADDRESS_NACK:	
  4077                           ; 1 bytes @ 0x0
  4078                           
  4079  0070                     ?_I2C_MasterClearIrq:	
  4080                           ; 1 bytes @ 0x0
  4081                           
  4082  0070                     ?_I2C_MasterOpen:	
  4083                           ; 1 bytes @ 0x0
  4084                           
  4085  0070                     ?_I2C_MasterDisableIrq:	
  4086                           ; 1 bytes @ 0x0
  4087                           
  4088  0070                     ?_I2C_MasterClose:	
  4089                           ; 1 bytes @ 0x0
  4090                           
  4091  0070                     ?_I2C_MasterStart:	
  4092                           ; 1 bytes @ 0x0
  4093                           
  4094  0070                     ?_I2C_Poller:	
  4095                           ; 1 bytes @ 0x0
  4096                           
  4097  0070                     ?_I2C_MasterWaitForEvent:	
  4098                           ; 1 bytes @ 0x0
  4099                           
  4100  0070                     ?_I2C_MasterFsm:	
  4101                           ; 1 bytes @ 0x0
  4102                           
  4103  0070                     ?_I2C_MasterIsNack:	
  4104                           ; 1 bytes @ 0x0
  4105                           
  4106  0070                     ?_I2C_MasterSendTxData:	
  4107                           ; 1 bytes @ 0x0
  4108                           
  4109  0070                     ?_I2C_MasterGetRxData:	
  4110                           ; 1 bytes @ 0x0
  4111                           
  4112  0070                     ?_I2C_MasterSendAck:	
  4113                           ; 1 bytes @ 0x0
  4114                           
  4115  0070                     ?_I2C_MasterStartRx:	
  4116                           ; 1 bytes @ 0x0
  4117                           
  4118  0070                     ?_I2C_MasterSetIrq:	
  4119                           ; 1 bytes @ 0x0
  4120                           
  4121  0070                     ?_I2C_MasterEnableRestart:	
  4122                           ; 1 bytes @ 0x0
  4123                           
  4124  0070                     ?_I2C_MasterStop:	
  4125                           ; 1 bytes @ 0x0
  4126                           
  4127  0070                     ?_I2C_MasterSendNack:	
  4128                           ; 1 bytes @ 0x0
  4129                           
  4130  0070                     ?_EUSART_Receive_ISR:	
  4131                           ; 1 bytes @ 0x0
  4132                           
  4133  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  4134                           ; 1 bytes @ 0x0
  4135                           
  4136  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  4137                           ; 1 bytes @ 0x0
  4138                           
  4139  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  4140                           ; 1 bytes @ 0x0
  4141                           
  4142  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  4143                           ; 1 bytes @ 0x0
  4144                           
  4145  0070                     ?_EUSART_DefaultErrorHandler:	
  4146                           ; 1 bytes @ 0x0
  4147                           
  4148  0070                     ?_EUSART_RxDataHandler:	
  4149                           ; 1 bytes @ 0x0
  4150                           
  4151  0070                     ??_EUSART_RxDataHandler:	
  4152                           ; 1 bytes @ 0x0
  4153                           
  4154  0070                     ?_TMR2_DefaultInterruptHandler:	
  4155                           ; 1 bytes @ 0x0
  4156                           
  4157  0070                     ??_TMR2_DefaultInterruptHandler:	
  4158                           ; 1 bytes @ 0x0
  4159                           
  4160  0070                     ?_INTERRUPT_InterruptManager:	
  4161                           ; 1 bytes @ 0x0
  4162                           
  4163  0070                     ?_SYSTEM_Initialize:	
  4164                           ; 1 bytes @ 0x0
  4165                           
  4166  0070                     ?_I2C_MasterOperation:	
  4167                           ; 1 bytes @ 0x0
  4168                           
  4169  0070                     ?_EUSART_Write:	
  4170                           ; 1 bytes @ 0x0
  4171                           
  4172  0070                     ??_EUSART_Write:	
  4173                           ; 1 bytes @ 0x0
  4174                           
  4175  0070                     ?_PWM3_LoadDutyValue:	
  4176                           ; 1 bytes @ 0x0
  4177                           
  4178  0070                     ?_TMR2_Start:	
  4179                           ; 1 bytes @ 0x0
  4180                           
  4181  0070                     ?_TMR2_StartTimer:	
  4182                           ; 1 bytes @ 0x0
  4183                           
  4184  0070                     ?_TMR2_Counter8BitSet:	
  4185                           ; 1 bytes @ 0x0
  4186                           
  4187  0070                     ?_TMR2_WriteTimer:	
  4188                           ; 1 bytes @ 0x0
  4189                           
  4190  0070                     ?_MyTimer2ISR:	
  4191                           ; 1 bytes @ 0x0
  4192                           
  4193  0070                     ?_MyUART_ISR:	
  4194                           ; 1 bytes @ 0x0
  4195                           
  4196  0070                     ?_main:	
  4197                           ; 1 bytes @ 0x0
  4198                           
  4199  0070                     ?i1_I2C_Open:	
  4200                           ; 1 bytes @ 0x0
  4201                           
  4202  0070                     ??i1_I2C_Open:	
  4203                           ; 1 bytes @ 0x0
  4204                           
  4205  0070                     ?i1_I2C_Close:	
  4206                           ; 1 bytes @ 0x0
  4207                           
  4208  0070                     ??i1_I2C_Close:	
  4209                           ; 1 bytes @ 0x0
  4210                           
  4211  0070                     ?i1_I2C_MasterOperation:	
  4212                           ; 1 bytes @ 0x0
  4213                           
  4214  0070                     ?i1_I2C_MasterWrite:	
  4215                           ; 1 bytes @ 0x0
  4216                           
  4217  0070                     ?i1_I2C_SetBuffer:	
  4218                           ; 1 bytes @ 0x0
  4219                           
  4220  0070                     ?i1_I2C_SetCallback:	
  4221                           ; 1 bytes @ 0x0
  4222                           
  4223  0070                     ?i1_I2C_Poller:	
  4224                           ; 1 bytes @ 0x0
  4225                           
  4226  0070                     ?i1_I2C_MasterFsm:	
  4227                           ; 1 bytes @ 0x0
  4228                           
  4229  0070                     ?i1_I2C_DO_IDLE:	
  4230                           ; 1 bytes @ 0x0
  4231                           
  4232  0070                     ??i1_I2C_DO_IDLE:	
  4233                           ; 1 bytes @ 0x0
  4234                           
  4235  0070                     ?i1_I2C_DO_SEND_ADR_READ:	
  4236                           ; 1 bytes @ 0x0
  4237                           
  4238  0070                     ??i1_I2C_DO_SEND_ADR_READ:	
  4239                           ; 1 bytes @ 0x0
  4240                           
  4241  0070                     ?i1_I2C_DO_SEND_ADR_WRITE:	
  4242                           ; 1 bytes @ 0x0
  4243                           
  4244  0070                     ??i1_I2C_DO_SEND_ADR_WRITE:	
  4245                           ; 1 bytes @ 0x0
  4246                           
  4247  0070                     ?i1_I2C_DO_TX:	
  4248                           ; 1 bytes @ 0x0
  4249                           
  4250  0070                     ?i1_I2C_DO_RX:	
  4251                           ; 1 bytes @ 0x0
  4252                           
  4253  0070                     ?i1_I2C_DO_RCEN:	
  4254                           ; 1 bytes @ 0x0
  4255                           
  4256  0070                     ??i1_I2C_DO_RCEN:	
  4257                           ; 1 bytes @ 0x0
  4258                           
  4259  0070                     ?i1_I2C_DO_TX_EMPTY:	
  4260                           ; 1 bytes @ 0x0
  4261                           
  4262  0070                     ?i1_I2C_DO_SEND_RESTART_READ:	
  4263                           ; 1 bytes @ 0x0
  4264                           
  4265  0070                     ??i1_I2C_DO_SEND_RESTART_READ:	
  4266                           ; 1 bytes @ 0x0
  4267                           
  4268  0070                     ?i1_I2C_DO_SEND_RESTART_WRITE:	
  4269                           ; 1 bytes @ 0x0
  4270                           
  4271  0070                     ??i1_I2C_DO_SEND_RESTART_WRITE:	
  4272                           ; 1 bytes @ 0x0
  4273                           
  4274  0070                     ?i1_I2C_DO_SEND_RESTART:	
  4275                           ; 1 bytes @ 0x0
  4276                           
  4277  0070                     ??i1_I2C_DO_SEND_RESTART:	
  4278                           ; 1 bytes @ 0x0
  4279                           
  4280  0070                     ?i1_I2C_DO_SEND_STOP:	
  4281                           ; 1 bytes @ 0x0
  4282                           
  4283  0070                     ??i1_I2C_DO_SEND_STOP:	
  4284                           ; 1 bytes @ 0x0
  4285                           
  4286  0070                     ?i1_I2C_DO_RX_ACK:	
  4287                           ; 1 bytes @ 0x0
  4288                           
  4289  0070                     ??i1_I2C_DO_RX_ACK:	
  4290                           ; 1 bytes @ 0x0
  4291                           
  4292  0070                     ?i1_I2C_DO_RX_NACK_STOP:	
  4293                           ; 1 bytes @ 0x0
  4294                           
  4295  0070                     ??i1_I2C_DO_RX_NACK_STOP:	
  4296                           ; 1 bytes @ 0x0
  4297                           
  4298  0070                     ?i1_I2C_DO_RX_NACK_RESTART:	
  4299                           ; 1 bytes @ 0x0
  4300                           
  4301  0070                     ??i1_I2C_DO_RX_NACK_RESTART:	
  4302                           ; 1 bytes @ 0x0
  4303                           
  4304  0070                     ?i1_I2C_DO_RESET:	
  4305                           ; 1 bytes @ 0x0
  4306                           
  4307  0070                     ??i1_I2C_DO_RESET:	
  4308                           ; 1 bytes @ 0x0
  4309                           
  4310  0070                     ?i1_I2C_DO_ADDRESS_NACK:	
  4311                           ; 1 bytes @ 0x0
  4312                           
  4313  0070                     ?i1_I2C_MasterOpen:	
  4314                           ; 1 bytes @ 0x0
  4315                           
  4316  0070                     ??i1_I2C_MasterOpen:	
  4317                           ; 1 bytes @ 0x0
  4318                           
  4319  0070                     ?i1_I2C_MasterClose:	
  4320                           ; 1 bytes @ 0x0
  4321                           
  4322  0070                     ??i1_I2C_MasterClose:	
  4323                           ; 1 bytes @ 0x0
  4324                           
  4325  0070                     ?i1_I2C_MasterGetRxData:	
  4326                           ; 1 bytes @ 0x0
  4327                           
  4328  0070                     ??i1_I2C_MasterGetRxData:	
  4329                           ; 1 bytes @ 0x0
  4330                           
  4331  0070                     ?i1_I2C_MasterSendTxData:	
  4332                           ; 1 bytes @ 0x0
  4333                           
  4334  0070                     ??i1_I2C_MasterSendTxData:	
  4335                           ; 1 bytes @ 0x0
  4336                           
  4337  0070                     ?i1_I2C_MasterEnableRestart:	
  4338                           ; 1 bytes @ 0x0
  4339                           
  4340  0070                     ??i1_I2C_MasterEnableRestart:	
  4341                           ; 1 bytes @ 0x0
  4342                           
  4343  0070                     ?i1_I2C_MasterStartRx:	
  4344                           ; 1 bytes @ 0x0
  4345                           
  4346  0070                     ??i1_I2C_MasterStartRx:	
  4347                           ; 1 bytes @ 0x0
  4348                           
  4349  0070                     ?i1_I2C_MasterStart:	
  4350                           ; 1 bytes @ 0x0
  4351                           
  4352  0070                     ??i1_I2C_MasterStart:	
  4353                           ; 1 bytes @ 0x0
  4354                           
  4355  0070                     ?i1_I2C_MasterStop:	
  4356                           ; 1 bytes @ 0x0
  4357                           
  4358  0070                     ??i1_I2C_MasterStop:	
  4359                           ; 1 bytes @ 0x0
  4360                           
  4361  0070                     ?i1_I2C_MasterIsNack:	
  4362                           ; 1 bytes @ 0x0
  4363                           
  4364  0070                     ??i1_I2C_MasterIsNack:	
  4365                           ; 1 bytes @ 0x0
  4366                           
  4367  0070                     ?i1_I2C_MasterSendAck:	
  4368                           ; 1 bytes @ 0x0
  4369                           
  4370  0070                     ??i1_I2C_MasterSendAck:	
  4371                           ; 1 bytes @ 0x0
  4372                           
  4373  0070                     ?i1_I2C_MasterSendNack:	
  4374                           ; 1 bytes @ 0x0
  4375                           
  4376  0070                     ??i1_I2C_MasterSendNack:	
  4377                           ; 1 bytes @ 0x0
  4378                           
  4379  0070                     ?i1_I2C_MasterDisableIrq:	
  4380                           ; 1 bytes @ 0x0
  4381                           
  4382  0070                     ??i1_I2C_MasterDisableIrq:	
  4383                           ; 1 bytes @ 0x0
  4384                           
  4385  0070                     ?i1_I2C_MasterClearIrq:	
  4386                           ; 1 bytes @ 0x0
  4387                           
  4388  0070                     ??i1_I2C_MasterClearIrq:	
  4389                           ; 1 bytes @ 0x0
  4390                           
  4391  0070                     ?i1_I2C_MasterSetIrq:	
  4392                           ; 1 bytes @ 0x0
  4393                           
  4394  0070                     ??i1_I2C_MasterSetIrq:	
  4395                           ; 1 bytes @ 0x0
  4396                           
  4397  0070                     ?i1_I2C_MasterWaitForEvent:	
  4398                           ; 1 bytes @ 0x0
  4399                           
  4400  0070                     ??i1_I2C_MasterWaitForEvent:	
  4401                           ; 1 bytes @ 0x0
  4402                           
  4403  0070                     EUSART_Write@txData:	
  4404                           ; 1 bytes @ 0x0
  4405                           
  4406  0070                     i1I2C_MasterSendTxData@data:	
  4407                           ; 1 bytes @ 0x0
  4408                           
  4409  0070                     PWM3_LoadDutyValue@dutyValue:	
  4410                           ; 1 bytes @ 0x0
  4411                           
  4412  0070                     i1I2C_SetBuffer@bufferSize:	
  4413                           ; 2 bytes @ 0x0
  4414                           
  4415  0070                     i1I2C_SetCallback@cb:	
  4416                           ; 2 bytes @ 0x0
  4417                           
  4418                           
  4419                           ; 2 bytes @ 0x0
  4420  0070                     	ds	1
  4421  0071                     ??_EUSART_Receive_ISR:	
  4422  0071                     ??_EUSART_DefaultErrorHandler:	
  4423                           ; 1 bytes @ 0x1
  4424                           
  4425  0071                     ??_MyUART_ISR:	
  4426                           ; 1 bytes @ 0x1
  4427                           
  4428  0071                     i1I2C_Open@address:	
  4429                           ; 1 bytes @ 0x1
  4430                           
  4431  0071                     i1I2C_Close@returnValue:	
  4432                           ; 1 bytes @ 0x1
  4433                           
  4434                           
  4435                           ; 1 bytes @ 0x1
  4436  0071                     	ds	1
  4437  0072                     ??_PWM3_LoadDutyValue:	
  4438  0072                     ??i1_I2C_SetBuffer:	
  4439                           ; 1 bytes @ 0x2
  4440                           
  4441  0072                     i1I2C_Open@returnValue:	
  4442                           ; 1 bytes @ 0x2
  4443                           
  4444  0072                     i1I2C_SetCallback@ptr:	
  4445                           ; 1 bytes @ 0x2
  4446                           
  4447                           
  4448                           ; 1 bytes @ 0x2
  4449  0072                     	ds	1
  4450  0073                     ??i1_I2C_SetCallback:	
  4451  0073                     i1I2C_SetBuffer@buffer:	
  4452                           ; 1 bytes @ 0x3
  4453                           
  4454                           
  4455                           ; 1 bytes @ 0x3
  4456  0073                     	ds	1
  4457  0074                     i1I2C_SetCallback@idx:	
  4458                           
  4459                           ; 1 bytes @ 0x4
  4460  0074                     	ds	1
  4461  0075                     ?i1_I2C_SetDataCompleteCallback:	
  4462  0075                     ?i1_I2C_SetAddressNackCallback:	
  4463                           ; 1 bytes @ 0x5
  4464                           
  4465  0075                     MyUART_ISR@c:	
  4466                           ; 1 bytes @ 0x5
  4467                           
  4468  0075                     i1I2C_SetDataCompleteCallback@cb:	
  4469                           ; 1 bytes @ 0x5
  4470                           
  4471  0075                     i1I2C_SetAddressNackCallback@cb:	
  4472                           ; 2 bytes @ 0x5
  4473                           
  4474                           
  4475                           ; 2 bytes @ 0x5
  4476  0075                     	ds	2
  4477  0077                     i1I2C_SetDataCompleteCallback@ptr:	
  4478  0077                     i1I2C_SetAddressNackCallback@ptr:	
  4479                           ; 1 bytes @ 0x7
  4480                           
  4481                           
  4482                           ; 1 bytes @ 0x7
  4483  0077                     	ds	1
  4484  0078                     ??i1_I2C_SetDataCompleteCallback:	
  4485  0078                     ??i1_I2C_SetAddressNackCallback:	
  4486                           ; 1 bytes @ 0x8
  4487                           
  4488                           
  4489                           ; 1 bytes @ 0x8
  4490  0078                     	ds	1
  4491  0079                     ?i1_rd1RegCompleteHandler:	
  4492  0079                     ?i1_rd2RegCompleteHandler:	
  4493                           ; 1 bytes @ 0x9
  4494                           
  4495  0079                     ?i1_wr1RegCompleteHandler:	
  4496                           ; 1 bytes @ 0x9
  4497                           
  4498  0079                     ?i1_wr2RegCompleteHandler:	
  4499                           ; 1 bytes @ 0x9
  4500                           
  4501  0079                     ?i1_rdBlkRegCompleteHandler:	
  4502                           ; 1 bytes @ 0x9
  4503                           
  4504  0079                     ?i1_I2C_CallbackReturnStop:	
  4505                           ; 1 bytes @ 0x9
  4506                           
  4507  0079                     ?i1_I2C_CallbackReturnReset:	
  4508                           ; 1 bytes @ 0x9
  4509                           
  4510  0079                     i1rd1RegCompleteHandler@ptr:	
  4511                           ; 1 bytes @ 0x9
  4512                           
  4513  0079                     i1rd2RegCompleteHandler@ptr:	
  4514                           ; 1 bytes @ 0x9
  4515                           
  4516  0079                     i1wr1RegCompleteHandler@ptr:	
  4517                           ; 1 bytes @ 0x9
  4518                           
  4519  0079                     i1wr2RegCompleteHandler@ptr:	
  4520                           ; 1 bytes @ 0x9
  4521                           
  4522  0079                     i1rdBlkRegCompleteHandler@ptr:	
  4523                           ; 1 bytes @ 0x9
  4524                           
  4525  0079                     i1I2C_CallbackReturnStop@funPtr:	
  4526                           ; 1 bytes @ 0x9
  4527                           
  4528  0079                     i1I2C_CallbackReturnReset@funPtr:	
  4529                           ; 1 bytes @ 0x9
  4530                           
  4531                           
  4532                           ; 1 bytes @ 0x9
  4533  0079                     	ds	1
  4534  007A                     ??i1_rd1RegCompleteHandler:	
  4535  007A                     ??i1_rd2RegCompleteHandler:	
  4536                           ; 1 bytes @ 0xA
  4537                           
  4538  007A                     ??i1_wr1RegCompleteHandler:	
  4539                           ; 1 bytes @ 0xA
  4540                           
  4541  007A                     ??i1_wr2RegCompleteHandler:	
  4542                           ; 1 bytes @ 0xA
  4543                           
  4544  007A                     ??i1_rdBlkRegCompleteHandler:	
  4545                           ; 1 bytes @ 0xA
  4546                           
  4547  007A                     ??i1_I2C_DO_TX:	
  4548                           ; 1 bytes @ 0xA
  4549                           
  4550  007A                     ??i1_I2C_DO_RX:	
  4551                           ; 1 bytes @ 0xA
  4552                           
  4553  007A                     ??i1_I2C_DO_TX_EMPTY:	
  4554                           ; 1 bytes @ 0xA
  4555                           
  4556  007A                     ??i1_I2C_DO_ADDRESS_NACK:	
  4557                           ; 1 bytes @ 0xA
  4558                           
  4559  007A                     ??i1_I2C_CallbackReturnStop:	
  4560                           ; 1 bytes @ 0xA
  4561                           
  4562  007A                     ??i1_I2C_CallbackReturnReset:	
  4563                           ; 1 bytes @ 0xA
  4564                           
  4565                           
  4566                           ; 1 bytes @ 0xA
  4567  007A                     	ds	1
  4568  007B                     i1_I2C_DO_TX$794:	
  4569                           
  4570                           ; 2 bytes @ 0xB
  4571  007B                     	ds	2
  4572  007D                     ??i1_I2C_MasterOperation:	
  4573  007D                     ??i1_I2C_Poller:	
  4574                           ; 1 bytes @ 0xD
  4575                           
  4576                           
  4577                           ; 1 bytes @ 0xD
  4578  007D                     	ds	1
  4579  007E                     ??_TMR2_ISR:	
  4580  007E                     ??i1_I2C_MasterWrite:	
  4581                           ; 1 bytes @ 0xE
  4582                           
  4583                           
  4584                           	psect	cstackBANK0
  4585  003A                     __pcstackBANK0:	
  4586                           ; 1 bytes @ 0xE
  4587                           
  4588  003A                     ??i1_I2C_MasterFsm:	
  4589                           
  4590                           ; 1 bytes @ 0x0
  4591  003A                     	ds	3
  4592  003D                     i1I2C_MasterOperation@read:	
  4593                           
  4594                           ; 1 bytes @ 0x3
  4595  003D                     	ds	1
  4596  003E                     i1I2C_MasterOperation@returnValue:	
  4597                           
  4598                           ; 1 bytes @ 0x4
  4599  003E                     	ds	1
  4600  003F                     ?i1_I2C_Write1ByteRegister:	
  4601  003F                     ?_I2C_Read2ByteRegister:	
  4602                           ; 1 bytes @ 0x5
  4603                           
  4604  003F                     I2C_Read2ByteRegister@reg:	
  4605                           ; 2 bytes @ 0x5
  4606                           
  4607  003F                     i1I2C_Write1ByteRegister@reg:	
  4608                           ; 1 bytes @ 0x5
  4609                           
  4610                           
  4611                           ; 1 bytes @ 0x5
  4612  003F                     	ds	1
  4613  0040                     i1I2C_Write1ByteRegister@data:	
  4614                           
  4615                           ; 1 bytes @ 0x6
  4616  0040                     	ds	1
  4617  0041                     ??_I2C_Read2ByteRegister:	
  4618  0041                     ??i1_I2C_Write1ByteRegister:	
  4619                           ; 1 bytes @ 0x7
  4620                           
  4621                           
  4622                           ; 1 bytes @ 0x7
  4623  0041                     	ds	1
  4624  0042                     i1I2C_Write1ByteRegister@address:	
  4625                           
  4626                           ; 1 bytes @ 0x8
  4627  0042                     	ds	3
  4628  0045                     I2C_Read2ByteRegister@address:	
  4629                           
  4630                           ; 1 bytes @ 0xB
  4631  0045                     	ds	1
  4632  0046                     I2C_Read2ByteRegister@returnValue:	
  4633                           
  4634                           ; 2 bytes @ 0xC
  4635  0046                     	ds	2
  4636  0048                     ??_MyTimer2ISR:	
  4637                           
  4638                           ; 1 bytes @ 0xE
  4639  0048                     	ds	2
  4640  004A                     MyTimer2ISR@g:	
  4641                           
  4642                           ; 2 bytes @ 0x10
  4643  004A                     	ds	2
  4644  004C                     ??_INTERRUPT_InterruptManager:	
  4645                           
  4646                           ; 1 bytes @ 0x12
  4647  004C                     	ds	1
  4648  004D                     ??_I2C_Open:	
  4649  004D                     ?_I2C_SetBuffer:	
  4650                           ; 1 bytes @ 0x13
  4651                           
  4652  004D                     ??_I2C_Close:	
  4653                           ; 1 bytes @ 0x13
  4654                           
  4655  004D                     ??_I2C_Initialize:	
  4656                           ; 1 bytes @ 0x13
  4657                           
  4658  004D                     ??_PIN_MANAGER_Initialize:	
  4659                           ; 1 bytes @ 0x13
  4660                           
  4661  004D                     ??_OSCILLATOR_Initialize:	
  4662                           ; 1 bytes @ 0x13
  4663                           
  4664  004D                     ??_PWM3_Initialize:	
  4665                           ; 1 bytes @ 0x13
  4666                           
  4667  004D                     ??_I2C_DO_IDLE:	
  4668                           ; 1 bytes @ 0x13
  4669                           
  4670  004D                     ??_I2C_DO_SEND_ADR_READ:	
  4671                           ; 1 bytes @ 0x13
  4672                           
  4673  004D                     ??_I2C_DO_RCEN:	
  4674                           ; 1 bytes @ 0x13
  4675                           
  4676  004D                     ??_I2C_DO_SEND_RESTART_READ:	
  4677                           ; 1 bytes @ 0x13
  4678                           
  4679  004D                     ??_I2C_DO_SEND_RESTART_WRITE:	
  4680                           ; 1 bytes @ 0x13
  4681                           
  4682  004D                     ??_I2C_DO_SEND_RESTART:	
  4683                           ; 1 bytes @ 0x13
  4684                           
  4685  004D                     ??_I2C_DO_SEND_STOP:	
  4686                           ; 1 bytes @ 0x13
  4687                           
  4688  004D                     ??_I2C_DO_RX_ACK:	
  4689                           ; 1 bytes @ 0x13
  4690                           
  4691  004D                     ??_I2C_DO_RX_NACK_STOP:	
  4692                           ; 1 bytes @ 0x13
  4693                           
  4694  004D                     ??_I2C_DO_RX_NACK_RESTART:	
  4695                           ; 1 bytes @ 0x13
  4696                           
  4697  004D                     ??_I2C_DO_RESET:	
  4698                           ; 1 bytes @ 0x13
  4699                           
  4700  004D                     ??_I2C_MasterClearIrq:	
  4701                           ; 1 bytes @ 0x13
  4702                           
  4703  004D                     ??_I2C_MasterOpen:	
  4704                           ; 1 bytes @ 0x13
  4705                           
  4706  004D                     ??_I2C_MasterDisableIrq:	
  4707                           ; 1 bytes @ 0x13
  4708                           
  4709  004D                     ??_I2C_MasterClose:	
  4710                           ; 1 bytes @ 0x13
  4711                           
  4712  004D                     ??_I2C_MasterStart:	
  4713                           ; 1 bytes @ 0x13
  4714                           
  4715  004D                     ?_I2C_SetCallback:	
  4716                           ; 1 bytes @ 0x13
  4717                           
  4718  004D                     ??_I2C_MasterWaitForEvent:	
  4719                           ; 1 bytes @ 0x13
  4720                           
  4721  004D                     ??_I2C_MasterIsNack:	
  4722                           ; 1 bytes @ 0x13
  4723                           
  4724  004D                     ??_I2C_MasterSendTxData:	
  4725                           ; 1 bytes @ 0x13
  4726                           
  4727  004D                     ??_I2C_MasterGetRxData:	
  4728                           ; 1 bytes @ 0x13
  4729                           
  4730  004D                     ??_I2C_MasterSendAck:	
  4731                           ; 1 bytes @ 0x13
  4732                           
  4733  004D                     ??_I2C_MasterStartRx:	
  4734                           ; 1 bytes @ 0x13
  4735                           
  4736  004D                     ??_I2C_MasterSetIrq:	
  4737                           ; 1 bytes @ 0x13
  4738                           
  4739  004D                     ??_I2C_MasterEnableRestart:	
  4740                           ; 1 bytes @ 0x13
  4741                           
  4742  004D                     ??_I2C_MasterStop:	
  4743                           ; 1 bytes @ 0x13
  4744                           
  4745  004D                     ??_I2C_MasterSendNack:	
  4746                           ; 1 bytes @ 0x13
  4747                           
  4748  004D                     ?_EUSART_SetRxInterruptHandler:	
  4749                           ; 1 bytes @ 0x13
  4750                           
  4751  004D                     ?_EUSART_SetFramingErrorHandler:	
  4752                           ; 1 bytes @ 0x13
  4753                           
  4754  004D                     ?_EUSART_SetOverrunErrorHandler:	
  4755                           ; 1 bytes @ 0x13
  4756                           
  4757  004D                     ?_EUSART_SetErrorHandler:	
  4758                           ; 1 bytes @ 0x13
  4759                           
  4760  004D                     ?_TMR2_SetInterruptHandler:	
  4761                           ; 1 bytes @ 0x13
  4762                           
  4763  004D                     ??_TMR2_Start:	
  4764                           ; 1 bytes @ 0x13
  4765                           
  4766  004D                     ??_TMR2_StartTimer:	
  4767                           ; 1 bytes @ 0x13
  4768                           
  4769  004D                     ??_TMR2_Counter8BitSet:	
  4770                           ; 1 bytes @ 0x13
  4771                           
  4772  004D                     I2C_MasterSendTxData@data:	
  4773                           ; 1 bytes @ 0x13
  4774                           
  4775  004D                     TMR2_Counter8BitSet@timerVal:	
  4776                           ; 1 bytes @ 0x13
  4777                           
  4778  004D                     I2C_SetBuffer@bufferSize:	
  4779                           ; 1 bytes @ 0x13
  4780                           
  4781  004D                     I2C_SetCallback@cb:	
  4782                           ; 2 bytes @ 0x13
  4783                           
  4784  004D                     EUSART_SetFramingErrorHandler@interruptHandler:	
  4785                           ; 2 bytes @ 0x13
  4786                           
  4787  004D                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  4788                           ; 2 bytes @ 0x13
  4789                           
  4790  004D                     EUSART_SetErrorHandler@interruptHandler:	
  4791                           ; 2 bytes @ 0x13
  4792                           
  4793  004D                     EUSART_SetRxInterruptHandler@interruptHandler:	
  4794                           ; 2 bytes @ 0x13
  4795                           
  4796  004D                     TMR2_SetInterruptHandler@InterruptHandler:	
  4797                           ; 2 bytes @ 0x13
  4798                           
  4799                           
  4800                           ; 2 bytes @ 0x13
  4801  004D                     	ds	1
  4802  004E                     ??_I2C_DO_SEND_ADR_WRITE:	
  4803  004E                     ??_TMR2_WriteTimer:	
  4804                           ; 1 bytes @ 0x14
  4805                           
  4806  004E                     I2C_Open@address:	
  4807                           ; 1 bytes @ 0x14
  4808                           
  4809  004E                     I2C_Close@returnValue:	
  4810                           ; 1 bytes @ 0x14
  4811                           
  4812  004E                     TMR2_WriteTimer@timerVal:	
  4813                           ; 1 bytes @ 0x14
  4814                           
  4815                           
  4816                           ; 1 bytes @ 0x14
  4817  004E                     	ds	1
  4818  004F                     ??_I2C_SetBuffer:	
  4819  004F                     ??_TMR2_Initialize:	
  4820                           ; 1 bytes @ 0x15
  4821                           
  4822  004F                     ??_EUSART_Initialize:	
  4823                           ; 1 bytes @ 0x15
  4824                           
  4825  004F                     ??_EUSART_SetRxInterruptHandler:	
  4826                           ; 1 bytes @ 0x15
  4827                           
  4828  004F                     ??_EUSART_SetFramingErrorHandler:	
  4829                           ; 1 bytes @ 0x15
  4830                           
  4831  004F                     ??_EUSART_SetOverrunErrorHandler:	
  4832                           ; 1 bytes @ 0x15
  4833                           
  4834  004F                     ??_EUSART_SetErrorHandler:	
  4835                           ; 1 bytes @ 0x15
  4836                           
  4837  004F                     ??_TMR2_SetInterruptHandler:	
  4838                           ; 1 bytes @ 0x15
  4839                           
  4840  004F                     ??_SYSTEM_Initialize:	
  4841                           ; 1 bytes @ 0x15
  4842                           
  4843  004F                     I2C_Open@returnValue:	
  4844                           ; 1 bytes @ 0x15
  4845                           
  4846  004F                     I2C_SetCallback@ptr:	
  4847                           ; 1 bytes @ 0x15
  4848                           
  4849                           
  4850                           ; 1 bytes @ 0x15
  4851  004F                     	ds	1
  4852  0050                     ??_I2C_SetCallback:	
  4853  0050                     I2C_SetBuffer@buffer:	
  4854                           ; 1 bytes @ 0x16
  4855                           
  4856                           
  4857                           ; 1 bytes @ 0x16
  4858  0050                     	ds	1
  4859  0051                     I2C_SetCallback@idx:	
  4860                           
  4861                           ; 1 bytes @ 0x17
  4862  0051                     	ds	1
  4863  0052                     ??_I2C_SetDataCompleteCallback:	
  4864  0052                     ??_I2C_SetAddressNackCallback:	
  4865                           ; 1 bytes @ 0x18
  4866                           
  4867                           
  4868                           ; 1 bytes @ 0x18
  4869  0052                     	ds	1
  4870  0053                     ?_rd1RegCompleteHandler:	
  4871  0053                     ?_rd2RegCompleteHandler:	
  4872                           ; 1 bytes @ 0x19
  4873                           
  4874  0053                     ?_wr1RegCompleteHandler:	
  4875                           ; 1 bytes @ 0x19
  4876                           
  4877  0053                     ?_wr2RegCompleteHandler:	
  4878                           ; 1 bytes @ 0x19
  4879                           
  4880  0053                     ?_rdBlkRegCompleteHandler:	
  4881                           ; 1 bytes @ 0x19
  4882                           
  4883  0053                     ?_I2C_CallbackReturnStop:	
  4884                           ; 1 bytes @ 0x19
  4885                           
  4886  0053                     ?_I2C_CallbackReturnReset:	
  4887                           ; 1 bytes @ 0x19
  4888                           
  4889  0053                     rd1RegCompleteHandler@ptr:	
  4890                           ; 1 bytes @ 0x19
  4891                           
  4892  0053                     rd2RegCompleteHandler@ptr:	
  4893                           ; 1 bytes @ 0x19
  4894                           
  4895  0053                     wr1RegCompleteHandler@ptr:	
  4896                           ; 1 bytes @ 0x19
  4897                           
  4898  0053                     wr2RegCompleteHandler@ptr:	
  4899                           ; 1 bytes @ 0x19
  4900                           
  4901  0053                     rdBlkRegCompleteHandler@ptr:	
  4902                           ; 1 bytes @ 0x19
  4903                           
  4904  0053                     I2C_CallbackReturnStop@funPtr:	
  4905                           ; 1 bytes @ 0x19
  4906                           
  4907  0053                     I2C_CallbackReturnReset@funPtr:	
  4908                           ; 1 bytes @ 0x19
  4909                           
  4910                           
  4911                           ; 1 bytes @ 0x19
  4912  0053                     	ds	1
  4913  0054                     ??_rd1RegCompleteHandler:	
  4914  0054                     ??_I2C_MasterWrite:	
  4915                           ; 1 bytes @ 0x1A
  4916                           
  4917  0054                     ??_rd2RegCompleteHandler:	
  4918                           ; 1 bytes @ 0x1A
  4919                           
  4920  0054                     ??_wr1RegCompleteHandler:	
  4921                           ; 1 bytes @ 0x1A
  4922                           
  4923  0054                     ??_wr2RegCompleteHandler:	
  4924                           ; 1 bytes @ 0x1A
  4925                           
  4926  0054                     ??_rdBlkRegCompleteHandler:	
  4927                           ; 1 bytes @ 0x1A
  4928                           
  4929  0054                     ??_I2C_CallbackReturnStop:	
  4930                           ; 1 bytes @ 0x1A
  4931                           
  4932  0054                     ??_I2C_CallbackReturnReset:	
  4933                           ; 1 bytes @ 0x1A
  4934                           
  4935  0054                     ??_I2C_Poller:	
  4936                           ; 1 bytes @ 0x1A
  4937                           
  4938                           
  4939                           	psect	maintext
  4940  00FD                     __pmaintext:	
  4941                           ; 1 bytes @ 0x1A
  4942 ;;
  4943 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4944 ;;
  4945 ;; *************** function _main *****************
  4946 ;; Defined at:
  4947 ;;		line 160 in file "main.c"
  4948 ;; Parameters:    Size  Location     Type
  4949 ;;		None
  4950 ;; Auto vars:     Size  Location     Type
  4951 ;;		None
  4952 ;; Return value:  Size  Location     Type
  4953 ;;                  1    wreg      void 
  4954 ;; Registers used:
  4955 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4956 ;; Tracked objects:
  4957 ;;		On entry : B1F/0
  4958 ;;		On exit  : 0/0
  4959 ;;		Unchanged: 0/0
  4960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4963 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4964 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4965 ;;Total ram usage:        2 bytes
  4966 ;; Hardware stack levels required when called:   21
  4967 ;; This function calls:
  4968 ;;		_EUSART_SetRxInterruptHandler
  4969 ;;		_I2C_Write1ByteRegister
  4970 ;;		_SYSTEM_Initialize
  4971 ;;		_TMR2_SetInterruptHandler
  4972 ;;		_TMR2_StartTimer
  4973 ;;		_TMR2_WriteTimer
  4974 ;; This function is called by:
  4975 ;;		Startup code after reset
  4976 ;; This function uses a non-reentrant model
  4977 ;;
  4978                           
  4979                           
  4980                           ;psect for function _main
  4981  00FD                     _main:	
  4982                           
  4983                           ;main.c: 161: SYSTEM_Initialize();
  4984                           
  4985                           ;incstack = 0
  4986 ;; hardware stack exceeded
  4987                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4988  00FD  3187  274F  3180   	fcall	_SYSTEM_Initialize
  4989                           
  4990                           ;main.c: 163: do { LATAbits.LATA5 = 1; } while(0);
  4991  0100  0022               	movlb	2	; select bank2
  4992  0101  168C               	bsf	12,5	;volatile
  4993                           
  4994                           ;main.c: 166: I2C_Write1ByteRegister(0x68, 0x26, 0x02);
  4995  0102  3026               	movlw	38
  4996  0103  0021               	movlb	1	; select bank1
  4997  0104  00CD               	movwf	??_main^(0+128)
  4998  0105  084D               	movf	??_main^(0+128),w
  4999  0106  00C9               	movwf	I2C_Write1ByteRegister@reg^(0+128)
  5000  0107  3002               	movlw	2
  5001  0108  00CE               	movwf	(??_main+1)^(0+128)
  5002  0109  084E               	movf	(??_main+1)^(0+128),w
  5003  010A  00CA               	movwf	I2C_Write1ByteRegister@data^(0+128)
  5004  010B  3068               	movlw	104
  5005  010C  3184  2448  3180   	fcall	_I2C_Write1ByteRegister
  5006                           
  5007                           ;main.c: 167: I2C_Write1ByteRegister(0x68, 0x27, 0x10);
  5008  010F  3027               	movlw	39
  5009  0110  0021               	movlb	1	; select bank1
  5010  0111  00CD               	movwf	??_main^(0+128)
  5011  0112  084D               	movf	??_main^(0+128),w
  5012  0113  00C9               	movwf	I2C_Write1ByteRegister@reg^(0+128)
  5013  0114  3010               	movlw	16
  5014  0115  00CE               	movwf	(??_main+1)^(0+128)
  5015  0116  084E               	movf	(??_main+1)^(0+128),w
  5016  0117  00CA               	movwf	I2C_Write1ByteRegister@data^(0+128)
  5017  0118  3068               	movlw	104
  5018  0119  3184  2448  3180   	fcall	_I2C_Write1ByteRegister
  5019                           
  5020                           ;main.c: 170: TMR2_SetInterruptHandler(MyTimer2ISR);
  5021  011C  306C               	movlw	low _MyTimer2ISR
  5022  011D  0020               	movlb	0	; select bank0
  5023  011E  00CD               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  5024  011F  3001               	movlw	high _MyTimer2ISR
  5025  0120  00CE               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  5026  0121  318F  271B  3180   	fcall	_TMR2_SetInterruptHandler
  5027                           
  5028                           ;main.c: 171: TMR2_WriteTimer(255);
  5029  0124  30FF               	movlw	255
  5030  0125  318F  2721  3180   	fcall	_TMR2_WriteTimer
  5031                           
  5032                           ;main.c: 172: TMR2_StartTimer();
  5033  0128  318E  2691  3180   	fcall	_TMR2_StartTimer
  5034                           
  5035                           ;main.c: 174: EUSART_SetRxInterruptHandler(MyUART_ISR);
  5036  012B  3045               	movlw	low _MyUART_ISR
  5037  012C  0020               	movlb	0	; select bank0
  5038  012D  00CD               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  5039  012E  3000               	movlw	high _MyUART_ISR
  5040  012F  00CE               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  5041  0130  318F  2715  3180   	fcall	_EUSART_SetRxInterruptHandler
  5042                           
  5043                           ;main.c: 176: (INTCONbits.PEIE = 1);
  5044  0133  170B               	bsf	11,6	;volatile
  5045                           
  5046                           ;main.c: 177: (INTCONbits.GIE = 1);
  5047  0134  178B               	bsf	11,7	;volatile
  5048  0135  2966               	goto	l6058
  5049  0136                     l6060:	
  5050                           
  5051                           ;main.c: 181: if(Validation) {
  5052  0136  085C               	movf	_Validation,w
  5053  0137  1903               	btfsc	3,2
  5054  0138  2952               	goto	l6066
  5055                           
  5056                           ;main.c: 182: do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  5057  0139  1003               	clrc
  5058  013A  0022               	movlb	2	; select bank2
  5059  013B  1E8C               	btfss	12,5	;volatile
  5060  013C  1403               	setc
  5061  013D  1C03               	btfss	3,0
  5062  013E  2942               	goto	u3710
  5063  013F  0022               	movlb	2	; select bank2
  5064  0140  168C               	bsf	12,5	;volatile
  5065  0141  2944               	goto	l6064
  5066  0142                     u3710:	
  5067  0142  0022               	movlb	2	; select bank2
  5068  0143  128C               	bcf	12,5	;volatile
  5069  0144                     l6064:	
  5070                           
  5071                           ;main.c: 183: _delay((unsigned long)((500)*(4000000/4000.0)));
  5072  0144  3003               	movlw	3
  5073  0145  0021               	movlb	1	; select bank1
  5074  0146  00CE               	movwf	(??_main^(0+128)+1)
  5075  0147  308A               	movlw	138
  5076  0148  00CD               	movwf	??_main^(0+128)
  5077  0149  3055               	movlw	85
  5078  014A                     u3757:	
  5079  014A  0B89               	decfsz	9,f
  5080  014B  294A               	goto	u3757
  5081  014C  0BCD               	decfsz	??_main^(0+128),f
  5082  014D  294A               	goto	u3757
  5083  014E  0BCE               	decfsz	(??_main^(0+128)+1),f
  5084  014F  294A               	goto	u3757
  5085  0150  3200               	nop2
  5086                           
  5087                           ;main.c: 184: } else {
  5088  0151  2966               	goto	l6058
  5089  0152                     l6066:	
  5090                           ;main.c: 185: do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  5091                           
  5092  0152  1003               	clrc
  5093  0153  0022               	movlb	2	; select bank2
  5094  0154  1E8C               	btfss	12,5	;volatile
  5095  0155  1403               	setc
  5096  0156  1C03               	btfss	3,0
  5097  0157  295B               	goto	u3730
  5098  0158  0022               	movlb	2	; select bank2
  5099  0159  168C               	bsf	12,5	;volatile
  5100  015A  295D               	goto	l6068
  5101  015B                     u3730:	
  5102  015B  0022               	movlb	2	; select bank2
  5103  015C  128C               	bcf	12,5	;volatile
  5104  015D                     l6068:	
  5105                           
  5106                           ;main.c: 186: _delay((unsigned long)((100)*(4000000/4000.0)));
  5107  015D  3082               	movlw	130
  5108  015E  0021               	movlb	1	; select bank1
  5109  015F  00CD               	movwf	??_main^(0+128)
  5110  0160  30DD               	movlw	221
  5111  0161                     u3767:	
  5112  0161  0B89               	decfsz	9,f
  5113  0162  2961               	goto	u3767
  5114  0163  0BCD               	decfsz	??_main^(0+128),f
  5115  0164  2961               	goto	u3767
  5116  0165  3200               	nop2
  5117  0166                     l6058:	
  5118                           ;main.c: 179: while (1) {
  5119                           
  5120                           ;main.c: 187: }
  5121                           ;main.c: 188: } else {
  5122                           
  5123                           
  5124                           ;main.c: 180: if(PORTAbits.RA4) {
  5125  0166  0020               	movlb	0	; select bank0
  5126  0167  1A0C               	btfsc	12,4	;volatile
  5127  0168  2936               	goto	l6060
  5128                           
  5129                           ;main.c: 189: do { LATAbits.LATA5 = 1; } while(0);
  5130  0169  0022               	movlb	2	; select bank2
  5131  016A  168C               	bsf	12,5	;volatile
  5132  016B  2966               	goto	l6058
  5133  016C                     __end_of_main:	
  5134                           
  5135                           	psect	text1
  5136  0F21                     __ptext1:	
  5137 ;; *************** function _TMR2_WriteTimer *****************
  5138 ;; Defined at:
  5139 ;;		line 150 in file "mcc_generated_files/tmr2.c"
  5140 ;; Parameters:    Size  Location     Type
  5141 ;;  timerVal        1    wreg     unsigned char 
  5142 ;; Auto vars:     Size  Location     Type
  5143 ;;  timerVal        1   20[BANK0 ] unsigned char 
  5144 ;; Return value:  Size  Location     Type
  5145 ;;                  1    wreg      void 
  5146 ;; Registers used:
  5147 ;;		wreg, status,2, status,0, pclath, cstack
  5148 ;; Tracked objects:
  5149 ;;		On entry : 0/0
  5150 ;;		On exit  : 0/0
  5151 ;;		Unchanged: 0/0
  5152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5154 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5156 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5157 ;;Total ram usage:        1 bytes
  5158 ;; Hardware stack levels used:    1
  5159 ;; Hardware stack levels required when called:   13
  5160 ;; This function calls:
  5161 ;;		_TMR2_Counter8BitSet
  5162 ;; This function is called by:
  5163 ;;		_main
  5164 ;; This function uses a non-reentrant model
  5165 ;;
  5166                           
  5167                           
  5168                           ;psect for function _TMR2_WriteTimer
  5169  0F21                     _TMR2_WriteTimer:	
  5170                           
  5171                           ;incstack = 0
  5172                           ; Regs used in _TMR2_WriteTimer: [wreg+status,2+status,0+pclath+cstack]
  5173                           ;TMR2_WriteTimer@timerVal stored from wreg
  5174  0F21  0020               	movlb	0	; select bank0
  5175  0F22  00CE               	movwf	TMR2_WriteTimer@timerVal
  5176                           
  5177                           ;tmr2.c: 152: TMR2_Counter8BitSet(timerVal);
  5178  0F23  084E               	movf	TMR2_WriteTimer@timerVal,w
  5179  0F24  318E  26E6         	fcall	_TMR2_Counter8BitSet
  5180  0F26  0008               	return
  5181  0F27                     __end_of_TMR2_WriteTimer:	
  5182                           
  5183                           	psect	text2
  5184  0EE6                     __ptext2:	
  5185 ;; *************** function _TMR2_Counter8BitSet *****************
  5186 ;; Defined at:
  5187 ;;		line 144 in file "mcc_generated_files/tmr2.c"
  5188 ;; Parameters:    Size  Location     Type
  5189 ;;  timerVal        1    wreg     unsigned char 
  5190 ;; Auto vars:     Size  Location     Type
  5191 ;;  timerVal        1   19[BANK0 ] unsigned char 
  5192 ;; Return value:  Size  Location     Type
  5193 ;;                  1    wreg      void 
  5194 ;; Registers used:
  5195 ;;		wreg
  5196 ;; Tracked objects:
  5197 ;;		On entry : 0/0
  5198 ;;		On exit  : 0/0
  5199 ;;		Unchanged: 0/0
  5200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5202 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5204 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5205 ;;Total ram usage:        1 bytes
  5206 ;; Hardware stack levels used:    1
  5207 ;; Hardware stack levels required when called:   12
  5208 ;; This function calls:
  5209 ;;		Nothing
  5210 ;; This function is called by:
  5211 ;;		_TMR2_WriteTimer
  5212 ;; This function uses a non-reentrant model
  5213 ;;
  5214                           
  5215                           
  5216                           ;psect for function _TMR2_Counter8BitSet
  5217  0EE6                     _TMR2_Counter8BitSet:	
  5218                           
  5219                           ;incstack = 0
  5220                           ; Regs used in _TMR2_Counter8BitSet: [wreg]
  5221                           ;TMR2_Counter8BitSet@timerVal stored from wreg
  5222  0EE6  0020               	movlb	0	; select bank0
  5223  0EE7  00CD               	movwf	TMR2_Counter8BitSet@timerVal
  5224                           
  5225                           ;tmr2.c: 147: TMR2 = timerVal;
  5226  0EE8  084D               	movf	TMR2_Counter8BitSet@timerVal,w
  5227  0EE9  009A               	movwf	26	;volatile
  5228  0EEA  0008               	return
  5229  0EEB                     __end_of_TMR2_Counter8BitSet:	
  5230                           
  5231                           	psect	text3
  5232  0E91                     __ptext3:	
  5233 ;; *************** function _TMR2_StartTimer *****************
  5234 ;; Defined at:
  5235 ;;		line 114 in file "mcc_generated_files/tmr2.c"
  5236 ;; Parameters:    Size  Location     Type
  5237 ;;		None
  5238 ;; Auto vars:     Size  Location     Type
  5239 ;;		None
  5240 ;; Return value:  Size  Location     Type
  5241 ;;                  1    wreg      void 
  5242 ;; Registers used:
  5243 ;;		status,2, status,0, pclath, cstack
  5244 ;; Tracked objects:
  5245 ;;		On entry : 0/0
  5246 ;;		On exit  : 0/0
  5247 ;;		Unchanged: 0/0
  5248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5253 ;;Total ram usage:        0 bytes
  5254 ;; Hardware stack levels used:    1
  5255 ;; Hardware stack levels required when called:   13
  5256 ;; This function calls:
  5257 ;;		_TMR2_Start
  5258 ;; This function is called by:
  5259 ;;		_main
  5260 ;; This function uses a non-reentrant model
  5261 ;;
  5262                           
  5263                           
  5264                           ;psect for function _TMR2_StartTimer
  5265  0E91                     _TMR2_StartTimer:	
  5266                           
  5267                           ;tmr2.c: 116: TMR2_Start();
  5268                           
  5269                           ;incstack = 0
  5270                           ; Regs used in _TMR2_StartTimer: [status,2+status,0+pclath+cstack]
  5271  0E91  318E  268E         	fcall	_TMR2_Start
  5272  0E93  0008               	return
  5273  0E94                     __end_of_TMR2_StartTimer:	
  5274                           
  5275                           	psect	text4
  5276  0E8E                     __ptext4:	
  5277 ;; *************** function _TMR2_Start *****************
  5278 ;; Defined at:
  5279 ;;		line 108 in file "mcc_generated_files/tmr2.c"
  5280 ;; Parameters:    Size  Location     Type
  5281 ;;		None
  5282 ;; Auto vars:     Size  Location     Type
  5283 ;;		None
  5284 ;; Return value:  Size  Location     Type
  5285 ;;                  1    wreg      void 
  5286 ;; Registers used:
  5287 ;;		None
  5288 ;; Tracked objects:
  5289 ;;		On entry : 0/0
  5290 ;;		On exit  : 0/0
  5291 ;;		Unchanged: 0/0
  5292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5296 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5297 ;;Total ram usage:        0 bytes
  5298 ;; Hardware stack levels used:    1
  5299 ;; Hardware stack levels required when called:   12
  5300 ;; This function calls:
  5301 ;;		Nothing
  5302 ;; This function is called by:
  5303 ;;		_TMR2_StartTimer
  5304 ;; This function uses a non-reentrant model
  5305 ;;
  5306                           
  5307                           
  5308                           ;psect for function _TMR2_Start
  5309  0E8E                     _TMR2_Start:	
  5310                           
  5311                           ;tmr2.c: 111: T2CONbits.TMR2ON = 1;
  5312                           
  5313                           ;incstack = 0
  5314                           ; Regs used in _TMR2_Start: []
  5315  0E8E  0020               	movlb	0	; select bank0
  5316  0E8F  179C               	bsf	28,7	;volatile
  5317  0E90  0008               	return
  5318  0E91                     __end_of_TMR2_Start:	
  5319                           
  5320                           	psect	text5
  5321  074F                     __ptext5:	
  5322 ;; *************** function _SYSTEM_Initialize *****************
  5323 ;; Defined at:
  5324 ;;		line 50 in file "mcc_generated_files/mcc.c"
  5325 ;; Parameters:    Size  Location     Type
  5326 ;;		None
  5327 ;; Auto vars:     Size  Location     Type
  5328 ;;		None
  5329 ;; Return value:  Size  Location     Type
  5330 ;;                  1    wreg      void 
  5331 ;; Registers used:
  5332 ;;		wreg, status,2, status,0, pclath, cstack
  5333 ;; Tracked objects:
  5334 ;;		On entry : 0/0
  5335 ;;		On exit  : 0/0
  5336 ;;		Unchanged: 0/0
  5337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5341 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5342 ;;Total ram usage:        0 bytes
  5343 ;; Hardware stack levels used:    1
  5344 ;; Hardware stack levels required when called:   14
  5345 ;; This function calls:
  5346 ;;		_EUSART_Initialize
  5347 ;;		_I2C_Initialize
  5348 ;;		_OSCILLATOR_Initialize
  5349 ;;		_PIN_MANAGER_Initialize
  5350 ;;		_PWM3_Initialize
  5351 ;;		_TMR2_Initialize
  5352 ;; This function is called by:
  5353 ;;		_main
  5354 ;; This function uses a non-reentrant model
  5355 ;;
  5356                           
  5357                           
  5358                           ;psect for function _SYSTEM_Initialize
  5359  074F                     _SYSTEM_Initialize:	
  5360                           
  5361                           ;mcc.c: 52: I2C_Initialize();
  5362                           
  5363                           ;incstack = 0
  5364                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5365  074F  318F  27BC  3187   	fcall	_I2C_Initialize
  5366                           
  5367                           ;mcc.c: 53: PIN_MANAGER_Initialize();
  5368  0752  3183  2334  3187   	fcall	_PIN_MANAGER_Initialize
  5369                           
  5370                           ;mcc.c: 54: OSCILLATOR_Initialize();
  5371  0755  318F  2734  3187   	fcall	_OSCILLATOR_Initialize
  5372                           
  5373                           ;mcc.c: 55: PWM3_Initialize();
  5374  0758  318F  27D1  3187   	fcall	_PWM3_Initialize
  5375                           
  5376                           ;mcc.c: 56: TMR2_Initialize();
  5377  075B  3187  2725  3187   	fcall	_TMR2_Initialize
  5378                           
  5379                           ;mcc.c: 57: EUSART_Initialize();
  5380  075E  3184  2415         	fcall	_EUSART_Initialize
  5381  0760  0008               	return
  5382  0761                     __end_of_SYSTEM_Initialize:	
  5383                           
  5384                           	psect	text6
  5385  0725                     __ptext6:	
  5386 ;; *************** function _TMR2_Initialize *****************
  5387 ;; Defined at:
  5388 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  5389 ;; Parameters:    Size  Location     Type
  5390 ;;		None
  5391 ;; Auto vars:     Size  Location     Type
  5392 ;;		None
  5393 ;; Return value:  Size  Location     Type
  5394 ;;                  1    wreg      void 
  5395 ;; Registers used:
  5396 ;;		wreg, status,2, status,0, pclath, cstack
  5397 ;; Tracked objects:
  5398 ;;		On entry : 0/0
  5399 ;;		On exit  : 0/0
  5400 ;;		Unchanged: 0/0
  5401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5406 ;;Total ram usage:        0 bytes
  5407 ;; Hardware stack levels used:    1
  5408 ;; Hardware stack levels required when called:   13
  5409 ;; This function calls:
  5410 ;;		_TMR2_SetInterruptHandler
  5411 ;; This function is called by:
  5412 ;;		_SYSTEM_Initialize
  5413 ;; This function uses a non-reentrant model
  5414 ;;
  5415                           
  5416                           
  5417                           ;psect for function _TMR2_Initialize
  5418  0725                     _TMR2_Initialize:	
  5419                           
  5420                           ;tmr2.c: 69: T2CLKCON = 0x00;
  5421                           
  5422                           ;incstack = 0
  5423                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5424  0725  0020               	movlb	0	; select bank0
  5425  0726  019E               	clrf	30	;volatile
  5426                           
  5427                           ;tmr2.c: 72: T2HLT = 0x00;
  5428  0727  019D               	clrf	29	;volatile
  5429                           
  5430                           ;tmr2.c: 75: T2RST = 0x00;
  5431  0728  019F               	clrf	31	;volatile
  5432                           
  5433                           ;tmr2.c: 78: T2PR = 0x9B;
  5434  0729  309B               	movlw	155
  5435  072A  009B               	movwf	27	;volatile
  5436                           
  5437                           ;tmr2.c: 81: T2TMR = 0x00;
  5438  072B  019A               	clrf	26	;volatile
  5439                           
  5440                           ;tmr2.c: 84: PIR1bits.TMR2IF = 0;
  5441  072C  1090               	bcf	16,1	;volatile
  5442                           
  5443                           ;tmr2.c: 87: PIE1bits.TMR2IE = 1;
  5444  072D  0021               	movlb	1	; select bank1
  5445  072E  1490               	bsf	16,1	;volatile
  5446                           
  5447                           ;tmr2.c: 90: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
  5448  072F  3003               	movlw	low _TMR2_DefaultInterruptHandler
  5449  0730  0020               	movlb	0	; select bank0
  5450  0731  00CD               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  5451  0732  3000               	movlw	high _TMR2_DefaultInterruptHandler
  5452  0733  00CE               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  5453  0734  318F  271B         	fcall	_TMR2_SetInterruptHandler
  5454                           
  5455                           ;tmr2.c: 93: T2CON = 0xF0;
  5456  0736  30F0               	movlw	240
  5457  0737  0020               	movlb	0	; select bank0
  5458  0738  009C               	movwf	28	;volatile
  5459  0739  0008               	return
  5460  073A                     __end_of_TMR2_Initialize:	
  5461                           
  5462                           	psect	text7
  5463  0F1B                     __ptext7:	
  5464 ;; *************** function _TMR2_SetInterruptHandler *****************
  5465 ;; Defined at:
  5466 ;;		line 178 in file "mcc_generated_files/tmr2.c"
  5467 ;; Parameters:    Size  Location     Type
  5468 ;;  InterruptHan    2   19[BANK0 ] PTR FTN()void 
  5469 ;;		 -> MyTimer2ISR(1), TMR2_DefaultInterruptHandler(1), 
  5470 ;; Auto vars:     Size  Location     Type
  5471 ;;		None
  5472 ;; Return value:  Size  Location     Type
  5473 ;;                  1    wreg      void 
  5474 ;; Registers used:
  5475 ;;		wreg
  5476 ;; Tracked objects:
  5477 ;;		On entry : 0/0
  5478 ;;		On exit  : 0/0
  5479 ;;		Unchanged: 0/0
  5480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5481 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5484 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5485 ;;Total ram usage:        2 bytes
  5486 ;; Hardware stack levels used:    1
  5487 ;; Hardware stack levels required when called:   12
  5488 ;; This function calls:
  5489 ;;		Nothing
  5490 ;; This function is called by:
  5491 ;;		_TMR2_Initialize
  5492 ;;		_main
  5493 ;; This function uses a non-reentrant model
  5494 ;;
  5495                           
  5496                           
  5497                           ;psect for function _TMR2_SetInterruptHandler
  5498  0F1B                     _TMR2_SetInterruptHandler:	
  5499                           
  5500                           ;tmr2.c: 179: TMR2_InterruptHandler = InterruptHandler;
  5501                           
  5502                           ;incstack = 0
  5503                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  5504  0F1B  0020               	movlb	0	; select bank0
  5505  0F1C  084E               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  5506  0F1D  00D5               	movwf	_TMR2_InterruptHandler+1
  5507  0F1E  084D               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  5508  0F1F  00D4               	movwf	_TMR2_InterruptHandler
  5509  0F20  0008               	return
  5510  0F21                     __end_of_TMR2_SetInterruptHandler:	
  5511                           
  5512                           	psect	text8
  5513  0FD1                     __ptext8:	
  5514 ;; *************** function _PWM3_Initialize *****************
  5515 ;; Defined at:
  5516 ;;		line 58 in file "mcc_generated_files/pwm3.c"
  5517 ;; Parameters:    Size  Location     Type
  5518 ;;		None
  5519 ;; Auto vars:     Size  Location     Type
  5520 ;;		None
  5521 ;; Return value:  Size  Location     Type
  5522 ;;                  1    wreg      void 
  5523 ;; Registers used:
  5524 ;;		wreg, status,2, status,0
  5525 ;; Tracked objects:
  5526 ;;		On entry : 0/0
  5527 ;;		On exit  : 0/0
  5528 ;;		Unchanged: 0/0
  5529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5533 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5534 ;;Total ram usage:        0 bytes
  5535 ;; Hardware stack levels used:    1
  5536 ;; Hardware stack levels required when called:   12
  5537 ;; This function calls:
  5538 ;;		Nothing
  5539 ;; This function is called by:
  5540 ;;		_SYSTEM_Initialize
  5541 ;; This function uses a non-reentrant model
  5542 ;;
  5543                           
  5544                           
  5545                           ;psect for function _PWM3_Initialize
  5546  0FD1                     _PWM3_Initialize:	
  5547                           
  5548                           ;pwm3.c: 62: PWM3CON = 0x80;
  5549                           
  5550                           ;incstack = 0
  5551                           ; Regs used in _PWM3_Initialize: [wreg+status,2+status,0]
  5552  0FD1  3080               	movlw	128
  5553  0FD2  002C               	movlb	12	; select bank12
  5554  0FD3  0099               	movwf	25	;volatile
  5555                           
  5556                           ;pwm3.c: 65: PWM3DCH = 0x0F;
  5557  0FD4  300F               	movlw	15
  5558  0FD5  0098               	movwf	24	;volatile
  5559                           
  5560                           ;pwm3.c: 68: PWM3DCL = 0x40;
  5561  0FD6  3040               	movlw	64
  5562  0FD7  0097               	movwf	23	;volatile
  5563                           
  5564                           ;pwm3.c: 71: CCPTMRSbits.P3TSEL = 0;
  5565  0FD8  30CF               	movlw	-49
  5566  0FD9  0025               	movlb	5	; select bank5
  5567  0FDA  059E               	andwf	30,f	;volatile
  5568  0FDB  0008               	return
  5569  0FDC                     __end_of_PWM3_Initialize:	
  5570                           
  5571                           	psect	text9
  5572  0334                     __ptext9:	
  5573 ;; *************** function _PIN_MANAGER_Initialize *****************
  5574 ;; Defined at:
  5575 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  5576 ;; Parameters:    Size  Location     Type
  5577 ;;		None
  5578 ;; Auto vars:     Size  Location     Type
  5579 ;;		None
  5580 ;; Return value:  Size  Location     Type
  5581 ;;                  1    wreg      void 
  5582 ;; Registers used:
  5583 ;;		wreg, status,2
  5584 ;; Tracked objects:
  5585 ;;		On entry : 0/0
  5586 ;;		On exit  : 0/0
  5587 ;;		Unchanged: 0/0
  5588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5593 ;;Total ram usage:        0 bytes
  5594 ;; Hardware stack levels used:    1
  5595 ;; Hardware stack levels required when called:   12
  5596 ;; This function calls:
  5597 ;;		Nothing
  5598 ;; This function is called by:
  5599 ;;		_SYSTEM_Initialize
  5600 ;; This function uses a non-reentrant model
  5601 ;;
  5602                           
  5603                           
  5604                           ;psect for function _PIN_MANAGER_Initialize
  5605  0334                     _PIN_MANAGER_Initialize:	
  5606                           
  5607                           ;pin_manager.c: 60: LATA = 0x00;
  5608                           
  5609                           ;incstack = 0
  5610                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  5611  0334  0022               	movlb	2	; select bank2
  5612  0335  018C               	clrf	12	;volatile
  5613                           
  5614                           ;pin_manager.c: 61: LATB = 0x00;
  5615  0336  018D               	clrf	13	;volatile
  5616                           
  5617                           ;pin_manager.c: 62: LATC = 0x00;
  5618  0337  018E               	clrf	14	;volatile
  5619                           
  5620                           ;pin_manager.c: 67: TRISA = 0x13;
  5621  0338  3013               	movlw	19
  5622  0339  0021               	movlb	1	; select bank1
  5623  033A  008C               	movwf	12	;volatile
  5624                           
  5625                           ;pin_manager.c: 68: TRISB = 0x70;
  5626  033B  3070               	movlw	112
  5627  033C  008D               	movwf	13	;volatile
  5628                           
  5629                           ;pin_manager.c: 69: TRISC = 0x3F;
  5630  033D  303F               	movlw	63
  5631  033E  008E               	movwf	14	;volatile
  5632                           
  5633                           ;pin_manager.c: 74: ANSELC = 0x0E;
  5634  033F  300E               	movlw	14
  5635  0340  0023               	movlb	3	; select bank3
  5636  0341  008E               	movwf	14	;volatile
  5637                           
  5638                           ;pin_manager.c: 75: ANSELB = 0x00;
  5639  0342  018D               	clrf	13	;volatile
  5640                           
  5641                           ;pin_manager.c: 76: ANSELA = 0x01;
  5642  0343  3001               	movlw	1
  5643  0344  008C               	movwf	12	;volatile
  5644                           
  5645                           ;pin_manager.c: 81: WPUB = 0x00;
  5646  0345  0024               	movlb	4	; select bank4
  5647  0346  018D               	clrf	13	;volatile
  5648                           
  5649                           ;pin_manager.c: 82: WPUA = 0x00;
  5650  0347  018C               	clrf	12	;volatile
  5651                           
  5652                           ;pin_manager.c: 83: WPUC = 0x00;
  5653  0348  018E               	clrf	14	;volatile
  5654                           
  5655                           ;pin_manager.c: 84: OPTION_REGbits.nWPUEN = 1;
  5656  0349  0021               	movlb	1	; select bank1
  5657  034A  1795               	bsf	21,7	;volatile
  5658                           
  5659                           ;pin_manager.c: 89: ODCONA = 0x00;
  5660  034B  0025               	movlb	5	; select bank5
  5661  034C  018C               	clrf	12	;volatile
  5662                           
  5663                           ;pin_manager.c: 90: ODCONB = 0x00;
  5664  034D  018D               	clrf	13	;volatile
  5665                           
  5666                           ;pin_manager.c: 91: ODCONC = 0x00;
  5667  034E  018E               	clrf	14	;volatile
  5668                           
  5669                           ;pin_manager.c: 96: SLRCONA = 0x37;
  5670  034F  3037               	movlw	55
  5671  0350  0026               	movlb	6	; select bank6
  5672  0351  008C               	movwf	12	;volatile
  5673                           
  5674                           ;pin_manager.c: 97: SLRCONB = 0xF0;
  5675  0352  30F0               	movlw	240
  5676  0353  008D               	movwf	13	;volatile
  5677                           
  5678                           ;pin_manager.c: 98: SLRCONC = 0xFF;
  5679  0354  30FF               	movlw	255
  5680  0355  008E               	movwf	14	;volatile
  5681                           
  5682                           ;pin_manager.c: 103: INLVLA = 0x3F;
  5683  0356  303F               	movlw	63
  5684  0357  0027               	movlb	7	; select bank7
  5685  0358  008C               	movwf	12	;volatile
  5686                           
  5687                           ;pin_manager.c: 104: INLVLB = 0xF0;
  5688  0359  30F0               	movlw	240
  5689  035A  008D               	movwf	13	;volatile
  5690                           
  5691                           ;pin_manager.c: 105: INLVLC = 0xFF;
  5692  035B  30FF               	movlw	255
  5693  035C  008E               	movwf	14	;volatile
  5694                           
  5695                           ;pin_manager.c: 114: RXPPS = 0x0D;
  5696  035D  300D               	movlw	13
  5697  035E  003C               	movlb	28	; select bank28
  5698  035F  00A4               	movwf	36	;volatile
  5699                           
  5700                           ;pin_manager.c: 115: SSPDATPPS = 0x0C;
  5701  0360  300C               	movlw	12
  5702  0361  00A1               	movwf	33	;volatile
  5703                           
  5704                           ;pin_manager.c: 116: RB6PPS = 0x10;
  5705  0362  3010               	movlw	16
  5706  0363  003D               	movlb	29	; select bank29
  5707  0364  009E               	movwf	30	;volatile
  5708                           
  5709                           ;pin_manager.c: 117: RB7PPS = 0x12;
  5710  0365  3012               	movlw	18
  5711  0366  009F               	movwf	31	;volatile
  5712                           
  5713                           ;pin_manager.c: 118: RB4PPS = 0x11;
  5714  0367  3011               	movlw	17
  5715  0368  009C               	movwf	28	;volatile
  5716                           
  5717                           ;pin_manager.c: 119: RA2PPS = 0x0E;
  5718  0369  300E               	movlw	14
  5719  036A  0092               	movwf	18	;volatile
  5720                           
  5721                           ;pin_manager.c: 120: SSPCLKPPS = 0x0E;
  5722  036B  300E               	movlw	14
  5723  036C  003C               	movlb	28	; select bank28
  5724  036D  00A0               	movwf	32	;volatile
  5725  036E  0008               	return
  5726  036F                     __end_of_PIN_MANAGER_Initialize:	
  5727                           
  5728                           	psect	text10
  5729  0F34                     __ptext10:	
  5730 ;; *************** function _OSCILLATOR_Initialize *****************
  5731 ;; Defined at:
  5732 ;;		line 60 in file "mcc_generated_files/mcc.c"
  5733 ;; Parameters:    Size  Location     Type
  5734 ;;		None
  5735 ;; Auto vars:     Size  Location     Type
  5736 ;;		None
  5737 ;; Return value:  Size  Location     Type
  5738 ;;                  1    wreg      void 
  5739 ;; Registers used:
  5740 ;;		wreg, status,2
  5741 ;; Tracked objects:
  5742 ;;		On entry : 0/0
  5743 ;;		On exit  : 0/0
  5744 ;;		Unchanged: 0/0
  5745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5750 ;;Total ram usage:        0 bytes
  5751 ;; Hardware stack levels used:    1
  5752 ;; Hardware stack levels required when called:   12
  5753 ;; This function calls:
  5754 ;;		Nothing
  5755 ;; This function is called by:
  5756 ;;		_SYSTEM_Initialize
  5757 ;; This function uses a non-reentrant model
  5758 ;;
  5759                           
  5760                           
  5761                           ;psect for function _OSCILLATOR_Initialize
  5762  0F34                     _OSCILLATOR_Initialize:	
  5763                           
  5764                           ;mcc.c: 63: OSCCON = 0x6A;
  5765                           
  5766                           ;incstack = 0
  5767                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5768  0F34  306A               	movlw	106
  5769  0F35  0021               	movlb	1	; select bank1
  5770  0F36  0099               	movwf	25	;volatile
  5771                           
  5772                           ;mcc.c: 65: OSCTUNE = 0x00;
  5773  0F37  0198               	clrf	24	;volatile
  5774                           
  5775                           ;mcc.c: 67: BORCON = 0x00;
  5776  0F38  0022               	movlb	2	; select bank2
  5777  0F39  0196               	clrf	22	;volatile
  5778  0F3A  0008               	return
  5779  0F3B                     __end_of_OSCILLATOR_Initialize:	
  5780                           
  5781                           	psect	text11
  5782  0FBC                     __ptext11:	
  5783 ;; *************** function _I2C_Initialize *****************
  5784 ;; Defined at:
  5785 ;;		line 167 in file "mcc_generated_files/i2c_master.c"
  5786 ;; Parameters:    Size  Location     Type
  5787 ;;		None
  5788 ;; Auto vars:     Size  Location     Type
  5789 ;;		None
  5790 ;; Return value:  Size  Location     Type
  5791 ;;                  1    wreg      void 
  5792 ;; Registers used:
  5793 ;;		wreg, status,2
  5794 ;; Tracked objects:
  5795 ;;		On entry : 0/0
  5796 ;;		On exit  : 0/0
  5797 ;;		Unchanged: 0/0
  5798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5803 ;;Total ram usage:        0 bytes
  5804 ;; Hardware stack levels used:    1
  5805 ;; Hardware stack levels required when called:   12
  5806 ;; This function calls:
  5807 ;;		Nothing
  5808 ;; This function is called by:
  5809 ;;		_SYSTEM_Initialize
  5810 ;; This function uses a non-reentrant model
  5811 ;;
  5812                           
  5813                           
  5814                           ;psect for function _I2C_Initialize
  5815  0FBC                     _I2C_Initialize:	
  5816                           
  5817                           ;i2c_master.c: 169: SSP1STAT = 0x80;
  5818                           
  5819                           ;incstack = 0
  5820                           ; Regs used in _I2C_Initialize: [wreg+status,2]
  5821  0FBC  3080               	movlw	128
  5822  0FBD  0024               	movlb	4	; select bank4
  5823  0FBE  0094               	movwf	20	;volatile
  5824                           
  5825                           ;i2c_master.c: 170: SSP1CON1 = 0x08;
  5826  0FBF  3008               	movlw	8
  5827  0FC0  0095               	movwf	21	;volatile
  5828                           
  5829                           ;i2c_master.c: 171: SSP1CON2 = 0x00;
  5830  0FC1  0196               	clrf	22	;volatile
  5831                           
  5832                           ;i2c_master.c: 172: SSP1ADD = 0x09;
  5833  0FC2  3009               	movlw	9
  5834  0FC3  0092               	movwf	18	;volatile
  5835                           
  5836                           ;i2c_master.c: 173: SSP1CON1bits.SSPEN = 0;
  5837  0FC4  1295               	bcf	21,5	;volatile
  5838  0FC5  0008               	return
  5839  0FC6                     __end_of_I2C_Initialize:	
  5840                           
  5841                           	psect	text12
  5842  0415                     __ptext12:	
  5843 ;; *************** function _EUSART_Initialize *****************
  5844 ;; Defined at:
  5845 ;;		line 83 in file "mcc_generated_files/eusart.c"
  5846 ;; Parameters:    Size  Location     Type
  5847 ;;		None
  5848 ;; Auto vars:     Size  Location     Type
  5849 ;;		None
  5850 ;; Return value:  Size  Location     Type
  5851 ;;                  1    wreg      void 
  5852 ;; Registers used:
  5853 ;;		wreg, status,2, status,0, pclath, cstack
  5854 ;; Tracked objects:
  5855 ;;		On entry : 0/0
  5856 ;;		On exit  : 0/0
  5857 ;;		Unchanged: 0/0
  5858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5863 ;;Total ram usage:        0 bytes
  5864 ;; Hardware stack levels used:    1
  5865 ;; Hardware stack levels required when called:   13
  5866 ;; This function calls:
  5867 ;;		_EUSART_SetErrorHandler
  5868 ;;		_EUSART_SetFramingErrorHandler
  5869 ;;		_EUSART_SetOverrunErrorHandler
  5870 ;;		_EUSART_SetRxInterruptHandler
  5871 ;; This function is called by:
  5872 ;;		_SYSTEM_Initialize
  5873 ;; This function uses a non-reentrant model
  5874 ;;
  5875                           
  5876                           
  5877                           ;psect for function _EUSART_Initialize
  5878  0415                     _EUSART_Initialize:	
  5879                           
  5880                           ;eusart.c: 86: PIE1bits.RCIE = 0;
  5881                           
  5882                           ;incstack = 0
  5883                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5884  0415  0021               	movlb	1	; select bank1
  5885  0416  1290               	bcf	16,5	;volatile
  5886                           
  5887                           ;eusart.c: 87: EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  5888  0417  30E0               	movlw	low _EUSART_Receive_ISR
  5889  0418  0020               	movlb	0	; select bank0
  5890  0419  00CD               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  5891  041A  3003               	movlw	high _EUSART_Receive_ISR
  5892  041B  00CE               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  5893  041C  318F  2715  3184   	fcall	_EUSART_SetRxInterruptHandler
  5894                           
  5895                           ;eusart.c: 91: BAUD1CON = 0x09;
  5896  041F  3009               	movlw	9
  5897  0420  0023               	movlb	3	; select bank3
  5898  0421  009F               	movwf	31	;volatile
  5899                           
  5900                           ;eusart.c: 94: RC1STA = 0x90;
  5901  0422  3090               	movlw	144
  5902  0423  009D               	movwf	29	;volatile
  5903                           
  5904                           ;eusart.c: 97: TX1STA = 0x24;
  5905  0424  3024               	movlw	36
  5906  0425  009E               	movwf	30	;volatile
  5907                           
  5908                           ;eusart.c: 100: SPBRGL = 0x67;
  5909  0426  3067               	movlw	103
  5910  0427  009B               	movwf	27	;volatile
  5911                           
  5912                           ;eusart.c: 103: SPBRGH = 0x00;
  5913  0428  019C               	clrf	28	;volatile
  5914                           
  5915                           ;eusart.c: 106: EUSART_SetFramingErrorHandler(EUSART_DefaultFramingErrorHandler);
  5916  0429  3050               	movlw	low _EUSART_DefaultFramingErrorHandler
  5917  042A  0020               	movlb	0	; select bank0
  5918  042B  00CD               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  5919  042C  300E               	movlw	high _EUSART_DefaultFramingErrorHandler
  5920  042D  00CE               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  5921  042E  318F  270F  3184   	fcall	_EUSART_SetFramingErrorHandler
  5922                           
  5923                           ;eusart.c: 107: EUSART_SetOverrunErrorHandler(EUSART_DefaultOverrunErrorHandler);
  5924  0431  3097               	movlw	low _EUSART_DefaultOverrunErrorHandler
  5925  0432  0020               	movlb	0	; select bank0
  5926  0433  00CD               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  5927  0434  300E               	movlw	high _EUSART_DefaultOverrunErrorHandler
  5928  0435  00CE               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  5929  0436  3187  27F7  3184   	fcall	_EUSART_SetOverrunErrorHandler
  5930                           
  5931                           ;eusart.c: 108: EUSART_SetErrorHandler(EUSART_DefaultErrorHandler);
  5932  0439  3055               	movlw	low _EUSART_DefaultErrorHandler
  5933  043A  0020               	movlb	0	; select bank0
  5934  043B  00CD               	movwf	EUSART_SetErrorHandler@interruptHandler
  5935  043C  300E               	movlw	high _EUSART_DefaultErrorHandler
  5936  043D  00CE               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  5937  043E  318F  2795         	fcall	_EUSART_SetErrorHandler
  5938                           
  5939                           ;eusart.c: 110: eusartRxLastError.status = 0;
  5940  0440  0020               	movlb	0	; select bank0
  5941  0441  01B6               	clrf	_eusartRxLastError	;volatile
  5942                           
  5943                           ;eusart.c: 113: eusartRxHead = 0;
  5944  0442  01B9               	clrf	_eusartRxHead	;volatile
  5945                           
  5946                           ;eusart.c: 114: eusartRxTail = 0;
  5947  0443  01B8               	clrf	_eusartRxTail	;volatile
  5948                           
  5949                           ;eusart.c: 115: eusartRxCount = 0;
  5950  0444  01B7               	clrf	_eusartRxCount	;volatile
  5951                           
  5952                           ;eusart.c: 118: PIE1bits.RCIE = 1;
  5953  0445  0021               	movlb	1	; select bank1
  5954  0446  1690               	bsf	16,5	;volatile
  5955  0447  0008               	return
  5956  0448                     __end_of_EUSART_Initialize:	
  5957                           
  5958                           	psect	text13
  5959  0F15                     __ptext13:	
  5960 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  5961 ;; Defined at:
  5962 ;;		line 234 in file "mcc_generated_files/eusart.c"
  5963 ;; Parameters:    Size  Location     Type
  5964 ;;  interruptHan    2   19[BANK0 ] PTR FTN()void 
  5965 ;;		 -> MyUART_ISR(1), EUSART_Receive_ISR(1), 
  5966 ;; Auto vars:     Size  Location     Type
  5967 ;;		None
  5968 ;; Return value:  Size  Location     Type
  5969 ;;                  1    wreg      void 
  5970 ;; Registers used:
  5971 ;;		wreg
  5972 ;; Tracked objects:
  5973 ;;		On entry : 0/0
  5974 ;;		On exit  : 0/0
  5975 ;;		Unchanged: 0/0
  5976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5977 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5980 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5981 ;;Total ram usage:        2 bytes
  5982 ;; Hardware stack levels used:    1
  5983 ;; Hardware stack levels required when called:   12
  5984 ;; This function calls:
  5985 ;;		Nothing
  5986 ;; This function is called by:
  5987 ;;		_EUSART_Initialize
  5988 ;;		_main
  5989 ;; This function uses a non-reentrant model
  5990 ;;
  5991                           
  5992                           
  5993                           ;psect for function _EUSART_SetRxInterruptHandler
  5994  0F15                     _EUSART_SetRxInterruptHandler:	
  5995                           
  5996                           ;eusart.c: 235: EUSART_RxDefaultInterruptHandler = interruptHandler;
  5997                           
  5998                           ;incstack = 0
  5999                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  6000  0F15  0020               	movlb	0	; select bank0
  6001  0F16  084E               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  6002  0F17  00D9               	movwf	_EUSART_RxDefaultInterruptHandler+1
  6003  0F18  084D               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  6004  0F19  00D8               	movwf	_EUSART_RxDefaultInterruptHandler
  6005  0F1A  0008               	return
  6006  0F1B                     __end_of_EUSART_SetRxInterruptHandler:	
  6007                           
  6008                           	psect	text14
  6009  07F7                     __ptext14:	
  6010 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  6011 ;; Defined at:
  6012 ;;		line 225 in file "mcc_generated_files/eusart.c"
  6013 ;; Parameters:    Size  Location     Type
  6014 ;;  interruptHan    2   19[BANK0 ] PTR FTN()void 
  6015 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  6016 ;; Auto vars:     Size  Location     Type
  6017 ;;		None
  6018 ;; Return value:  Size  Location     Type
  6019 ;;                  1    wreg      void 
  6020 ;; Registers used:
  6021 ;;		wreg
  6022 ;; Tracked objects:
  6023 ;;		On entry : 0/0
  6024 ;;		On exit  : 0/0
  6025 ;;		Unchanged: 0/0
  6026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6027 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6030 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6031 ;;Total ram usage:        2 bytes
  6032 ;; Hardware stack levels used:    1
  6033 ;; Hardware stack levels required when called:   12
  6034 ;; This function calls:
  6035 ;;		Nothing
  6036 ;; This function is called by:
  6037 ;;		_EUSART_Initialize
  6038 ;; This function uses a non-reentrant model
  6039 ;;
  6040                           
  6041                           
  6042                           ;psect for function _EUSART_SetOverrunErrorHandler
  6043  07F7                     _EUSART_SetOverrunErrorHandler:	
  6044                           
  6045                           ;eusart.c: 226: EUSART_OverrunErrorHandler = interruptHandler;
  6046                           
  6047                           ;incstack = 0
  6048                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  6049  07F7  0020               	movlb	0	; select bank0
  6050  07F8  084E               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  6051  07F9  0021               	movlb	1	; select bank1
  6052  07FA  00D2               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  6053  07FB  0020               	movlb	0	; select bank0
  6054  07FC  084D               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  6055  07FD  0021               	movlb	1	; select bank1
  6056  07FE  00D1               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  6057  07FF  0008               	return
  6058  0800                     __end_of_EUSART_SetOverrunErrorHandler:	
  6059                           
  6060                           	psect	text15
  6061  0F0F                     __ptext15:	
  6062 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  6063 ;; Defined at:
  6064 ;;		line 221 in file "mcc_generated_files/eusart.c"
  6065 ;; Parameters:    Size  Location     Type
  6066 ;;  interruptHan    2   19[BANK0 ] PTR FTN()void 
  6067 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  6068 ;; Auto vars:     Size  Location     Type
  6069 ;;		None
  6070 ;; Return value:  Size  Location     Type
  6071 ;;                  1    wreg      void 
  6072 ;; Registers used:
  6073 ;;		wreg
  6074 ;; Tracked objects:
  6075 ;;		On entry : 0/0
  6076 ;;		On exit  : 0/0
  6077 ;;		Unchanged: 0/0
  6078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6079 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6082 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6083 ;;Total ram usage:        2 bytes
  6084 ;; Hardware stack levels used:    1
  6085 ;; Hardware stack levels required when called:   12
  6086 ;; This function calls:
  6087 ;;		Nothing
  6088 ;; This function is called by:
  6089 ;;		_EUSART_Initialize
  6090 ;; This function uses a non-reentrant model
  6091 ;;
  6092                           
  6093                           
  6094                           ;psect for function _EUSART_SetFramingErrorHandler
  6095  0F0F                     _EUSART_SetFramingErrorHandler:	
  6096                           
  6097                           ;eusart.c: 222: EUSART_FramingErrorHandler = interruptHandler;
  6098                           
  6099                           ;incstack = 0
  6100                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  6101  0F0F  0020               	movlb	0	; select bank0
  6102  0F10  084E               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  6103  0F11  00D7               	movwf	_EUSART_FramingErrorHandler+1
  6104  0F12  084D               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  6105  0F13  00D6               	movwf	_EUSART_FramingErrorHandler
  6106  0F14  0008               	return
  6107  0F15                     __end_of_EUSART_SetFramingErrorHandler:	
  6108                           
  6109                           	psect	text16
  6110  0F95                     __ptext16:	
  6111 ;; *************** function _EUSART_SetErrorHandler *****************
  6112 ;; Defined at:
  6113 ;;		line 229 in file "mcc_generated_files/eusart.c"
  6114 ;; Parameters:    Size  Location     Type
  6115 ;;  interruptHan    2   19[BANK0 ] PTR FTN()void 
  6116 ;;		 -> EUSART_DefaultErrorHandler(1), 
  6117 ;; Auto vars:     Size  Location     Type
  6118 ;;		None
  6119 ;; Return value:  Size  Location     Type
  6120 ;;                  1    wreg      void 
  6121 ;; Registers used:
  6122 ;;		wreg
  6123 ;; Tracked objects:
  6124 ;;		On entry : 0/0
  6125 ;;		On exit  : 0/0
  6126 ;;		Unchanged: 0/0
  6127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6128 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6131 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6132 ;;Total ram usage:        2 bytes
  6133 ;; Hardware stack levels used:    1
  6134 ;; Hardware stack levels required when called:   12
  6135 ;; This function calls:
  6136 ;;		Nothing
  6137 ;; This function is called by:
  6138 ;;		_EUSART_Initialize
  6139 ;; This function uses a non-reentrant model
  6140 ;;
  6141                           
  6142                           
  6143                           ;psect for function _EUSART_SetErrorHandler
  6144  0F95                     _EUSART_SetErrorHandler:	
  6145                           
  6146                           ;eusart.c: 230: EUSART_ErrorHandler = interruptHandler;
  6147                           
  6148                           ;incstack = 0
  6149                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  6150  0F95  0020               	movlb	0	; select bank0
  6151  0F96  084E               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  6152  0F97  0021               	movlb	1	; select bank1
  6153  0F98  00D0               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  6154  0F99  0020               	movlb	0	; select bank0
  6155  0F9A  084D               	movf	EUSART_SetErrorHandler@interruptHandler,w
  6156  0F9B  0021               	movlb	1	; select bank1
  6157  0F9C  00CF               	movwf	_EUSART_ErrorHandler^(0+128)
  6158  0F9D  0008               	return
  6159  0F9E                     __end_of_EUSART_SetErrorHandler:	
  6160                           
  6161                           	psect	text17
  6162  0448                     __ptext17:	
  6163 ;; *************** function _I2C_Write1ByteRegister *****************
  6164 ;; Defined at:
  6165 ;;		line 91 in file "mcc_generated_files/examples/i2c_master_example.c"
  6166 ;; Parameters:    Size  Location     Type
  6167 ;;  address         1    wreg     unsigned char 
  6168 ;;  reg             1   12[BANK1 ] unsigned char 
  6169 ;;  data            1   13[BANK1 ] unsigned char 
  6170 ;; Auto vars:     Size  Location     Type
  6171 ;;  address         1   15[BANK1 ] unsigned char 
  6172 ;; Return value:  Size  Location     Type
  6173 ;;                  1    wreg      void 
  6174 ;; Registers used:
  6175 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6176 ;; Tracked objects:
  6177 ;;		On entry : 0/0
  6178 ;;		On exit  : 0/0
  6179 ;;		Unchanged: 0/0
  6180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6181 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6182 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6183 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6184 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6185 ;;Total ram usage:        4 bytes
  6186 ;; Hardware stack levels used:    1
  6187 ;; Hardware stack levels required when called:   20
  6188 ;; This function calls:
  6189 ;;		_I2C_Close
  6190 ;;		_I2C_MasterWrite
  6191 ;;		_I2C_Open
  6192 ;;		_I2C_SetAddressNackCallback
  6193 ;;		_I2C_SetBuffer
  6194 ;;		_I2C_SetDataCompleteCallback
  6195 ;; This function is called by:
  6196 ;;		_main
  6197 ;; This function uses a non-reentrant model
  6198 ;;
  6199                           
  6200                           
  6201                           ;psect for function _I2C_Write1ByteRegister
  6202  0448                     _I2C_Write1ByteRegister:	
  6203                           
  6204                           ;incstack = 0
  6205 ;; hardware stack exceeded
  6206                           ; Regs used in _I2C_Write1ByteRegister: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6207                           ;I2C_Write1ByteRegister@address stored from wreg
  6208  0448  0021               	movlb	1	; select bank1
  6209  0449  00CC               	movwf	I2C_Write1ByteRegister@address^(0+128)
  6210  044A                     l5902:	
  6211                           ;i2c_master_example.c: 93: while(!I2C_Open(address));
  6212                           
  6213  044A  0021               	movlb	1	; select bank1
  6214  044B  084C               	movf	I2C_Write1ByteRegister@address^(0+128),w
  6215  044C  3182  22F6  3184   	fcall	_I2C_Open
  6216  044F  3A00               	xorlw	0
  6217  0450  1903               	skipnz
  6218  0451  2C4A               	goto	l5902
  6219                           
  6220                           ;i2c_master_example.c: 94: I2C_SetDataCompleteCallback(wr1RegCompleteHandler,&data);
  6221  0452  30B7               	movlw	low _wr1RegCompleteHandler
  6222  0453  0021               	movlb	1	; select bank1
  6223  0454  00BD               	movwf	I2C_SetDataCompleteCallback@cb^(0+128)
  6224  0455  3006               	movlw	high _wr1RegCompleteHandler
  6225  0456  00BE               	movwf	(I2C_SetDataCompleteCallback@cb^(0+128)+1)
  6226  0457  30CA               	movlw	(low (I2C_Write1ByteRegister@data| 0))& (0+255)
  6227  0458  00CB               	movwf	??_I2C_Write1ByteRegister^(0+128)
  6228  0459  084B               	movf	??_I2C_Write1ByteRegister^(0+128),w
  6229  045A  00BF               	movwf	I2C_SetDataCompleteCallback@ptr^(0+128)
  6230  045B  3187  2773  3184   	fcall	_I2C_SetDataCompleteCallback
  6231                           
  6232                           ;i2c_master_example.c: 95: I2C_SetBuffer(&reg,1);
  6233  045E  3001               	movlw	1
  6234  045F  0020               	movlb	0	; select bank0
  6235  0460  00CD               	movwf	I2C_SetBuffer@bufferSize
  6236  0461  3000               	movlw	0
  6237  0462  00CE               	movwf	I2C_SetBuffer@bufferSize+1
  6238  0463  30C9               	movlw	(low (I2C_Write1ByteRegister@reg| 0))& (0+255)
  6239  0464  3187  273A  3184   	fcall	_I2C_SetBuffer
  6240                           
  6241                           ;i2c_master_example.c: 96: I2C_SetAddressNackCallback((0),(0));
  6242  0467  3000               	movlw	0
  6243  0468  0021               	movlb	1	; select bank1
  6244  0469  00BD               	movwf	I2C_SetAddressNackCallback@cb^(0+128)
  6245  046A  00BE               	movwf	(I2C_SetAddressNackCallback@cb+1)^(0+128)
  6246  046B  01BF               	clrf	I2C_SetAddressNackCallback@ptr^(0+128)
  6247  046C  3187  2761  3184   	fcall	_I2C_SetAddressNackCallback
  6248                           
  6249                           ;i2c_master_example.c: 97: I2C_MasterWrite();
  6250  046F  318E  26D3  3184   	fcall	_I2C_MasterWrite
  6251  0472                     l5912:	
  6252                           ;i2c_master_example.c: 98: while(I2C_BUSY == I2C_Close());
  6253                           
  6254  0472  3185  25FD  3184   	fcall	_I2C_Close
  6255  0475  3A01               	xorlw	1
  6256  0476  1D03               	btfss	3,2
  6257  0477  0008               	return
  6258  0478  2C72               	goto	l5912
  6259  0479                     __end_of_I2C_Write1ByteRegister:	
  6260                           
  6261                           	psect	text18
  6262  0761                     __ptext18:	
  6263 ;; *************** function _I2C_SetAddressNackCallback *****************
  6264 ;; Defined at:
  6265 ;;		line 283 in file "mcc_generated_files/i2c_master.c"
  6266 ;; Parameters:    Size  Location     Type
  6267 ;;  cb              2    0[BANK1 ] PTR FTN(PTR void ,)enum 
  6268 ;;		 -> Absolute function(1), 
  6269 ;;  ptr             1    2[BANK1 ] PTR void 
  6270 ;;		 -> NULL(0), 
  6271 ;; Auto vars:     Size  Location     Type
  6272 ;;		None
  6273 ;; Return value:  Size  Location     Type
  6274 ;;                  1    wreg      void 
  6275 ;; Registers used:
  6276 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6277 ;; Tracked objects:
  6278 ;;		On entry : 0/0
  6279 ;;		On exit  : 0/0
  6280 ;;		Unchanged: 0/0
  6281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6282 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6284 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6285 ;;      Totals:         0       1       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6286 ;;Total ram usage:        4 bytes
  6287 ;; Hardware stack levels used:    1
  6288 ;; Hardware stack levels required when called:   13
  6289 ;; This function calls:
  6290 ;;		_I2C_SetCallback
  6291 ;; This function is called by:
  6292 ;;		_I2C_Write1ByteRegister
  6293 ;;		_I2C_Read1ByteRegister
  6294 ;;		_I2C_Write2ByteRegister
  6295 ;;		_I2C_WriteNBytes
  6296 ;;		_I2C_ReadDataBlock
  6297 ;; This function uses a non-reentrant model
  6298 ;;
  6299                           
  6300                           
  6301                           ;psect for function _I2C_SetAddressNackCallback
  6302  0761                     _I2C_SetAddressNackCallback:	
  6303                           
  6304                           ;i2c_master.c: 285: I2C_SetCallback(I2C_ADDR_NACK, cb, ptr);
  6305                           
  6306                           ;incstack = 0
  6307                           ; Regs used in _I2C_SetAddressNackCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6308  0761  0021               	movlb	1	; select bank1
  6309  0762  083E               	movf	(I2C_SetAddressNackCallback@cb+1)^(0+128),w
  6310  0763  0020               	movlb	0	; select bank0
  6311  0764  00CE               	movwf	I2C_SetCallback@cb+1
  6312  0765  0021               	movlb	1	; select bank1
  6313  0766  083D               	movf	I2C_SetAddressNackCallback@cb^(0+128),w
  6314  0767  0020               	movlb	0	; select bank0
  6315  0768  00CD               	movwf	I2C_SetCallback@cb
  6316  0769  0021               	movlb	1	; select bank1
  6317  076A  083F               	movf	I2C_SetAddressNackCallback@ptr^(0+128),w
  6318  076B  0020               	movlb	0	; select bank0
  6319  076C  00D2               	movwf	??_I2C_SetAddressNackCallback
  6320  076D  0852               	movf	??_I2C_SetAddressNackCallback,w
  6321  076E  00CF               	movwf	I2C_SetCallback@ptr
  6322  076F  3002               	movlw	2
  6323  0770  3185  254C         	fcall	_I2C_SetCallback
  6324  0772  0008               	return
  6325  0773                     __end_of_I2C_SetAddressNackCallback:	
  6326                           
  6327                           	psect	text19
  6328  02F6                     __ptext19:	
  6329 ;; *************** function _I2C_Open *****************
  6330 ;; Defined at:
  6331 ;;		line 176 in file "mcc_generated_files/i2c_master.c"
  6332 ;; Parameters:    Size  Location     Type
  6333 ;;  address         1    wreg     unsigned char 
  6334 ;; Auto vars:     Size  Location     Type
  6335 ;;  address         1   20[BANK0 ] unsigned char 
  6336 ;;  returnValue     1   21[BANK0 ] enum E92
  6337 ;; Return value:  Size  Location     Type
  6338 ;;                  1    wreg      enum E92
  6339 ;; Registers used:
  6340 ;;		wreg, status,2, status,0, pclath, cstack
  6341 ;; Tracked objects:
  6342 ;;		On entry : 0/0
  6343 ;;		On exit  : 0/0
  6344 ;;		Unchanged: 0/0
  6345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6347 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6348 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6349 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6350 ;;Total ram usage:        3 bytes
  6351 ;; Hardware stack levels used:    1
  6352 ;; Hardware stack levels required when called:   13
  6353 ;; This function calls:
  6354 ;;		_I2C_MasterClearIrq
  6355 ;;		_I2C_MasterOpen
  6356 ;; This function is called by:
  6357 ;;		_I2C_Write1ByteRegister
  6358 ;;		_I2C_Read1ByteRegister
  6359 ;;		_I2C_Write2ByteRegister
  6360 ;;		_I2C_WriteNBytes
  6361 ;;		_I2C_ReadNBytes
  6362 ;;		_I2C_ReadDataBlock
  6363 ;; This function uses a non-reentrant model
  6364 ;;
  6365                           
  6366                           
  6367                           ;psect for function _I2C_Open
  6368  02F6                     _I2C_Open:	
  6369                           
  6370                           ;incstack = 0
  6371                           ; Regs used in _I2C_Open: [wreg+status,2+status,0+pclath+cstack]
  6372                           ;I2C_Open@address stored from wreg
  6373  02F6  0020               	movlb	0	; select bank0
  6374  02F7  00CE               	movwf	I2C_Open@address
  6375                           
  6376                           ;i2c_master.c: 178: i2c_error_t returnValue = I2C_BUSY;
  6377  02F8  01CF               	clrf	I2C_Open@returnValue
  6378  02F9  0ACF               	incf	I2C_Open@returnValue,f
  6379                           
  6380                           ;i2c_master.c: 180: if(!I2C_Status.inUse)
  6381  02FA  0021               	movlb	1	; select bank1
  6382  02FB  193C               	btfsc	(_I2C_Status^(0+128)+28),2
  6383  02FC  2B31               	goto	l321
  6384                           
  6385                           ;i2c_master.c: 181: {
  6386                           ;i2c_master.c: 182: I2C_Status.address = address;
  6387  02FD  0020               	movlb	0	; select bank0
  6388  02FE  084E               	movf	I2C_Open@address,w
  6389  02FF  00CD               	movwf	??_I2C_Open
  6390  0300  084D               	movf	??_I2C_Open,w
  6391  0301  0021               	movlb	1	; select bank1
  6392  0302  00B6               	movwf	(_I2C_Status^(0+128)+22)
  6393                           
  6394                           ;i2c_master.c: 183: I2C_Status.busy = 0;
  6395  0303  10BC               	bcf	(_I2C_Status^(0+128)+28),1
  6396                           
  6397                           ;i2c_master.c: 184: I2C_Status.inUse = 1;
  6398  0304  153C               	bsf	(_I2C_Status^(0+128)+28),2
  6399                           
  6400                           ;i2c_master.c: 185: I2C_Status.addressNackCheck = 0;
  6401  0305  103C               	bcf	(_I2C_Status^(0+128)+28),0
  6402                           
  6403                           ;i2c_master.c: 186: I2C_Status.state = I2C_RESET;
  6404  0306  300E               	movlw	14
  6405  0307  0020               	movlb	0	; select bank0
  6406  0308  00CD               	movwf	??_I2C_Open
  6407  0309  084D               	movf	??_I2C_Open,w
  6408  030A  0021               	movlb	1	; select bank1
  6409  030B  00BA               	movwf	(_I2C_Status^(0+128)+26)
  6410                           
  6411                           ;i2c_master.c: 187: I2C_Status.time_out_value = 500;
  6412  030C  30F4               	movlw	244
  6413  030D  00B4               	movwf	(_I2C_Status^(0+128)+20)
  6414  030E  3001               	movlw	1
  6415  030F  00B5               	movwf	(_I2C_Status^(0+128)+21)
  6416                           
  6417                           ;i2c_master.c: 188: I2C_Status.bufferFree = 1;
  6418  0310  15BC               	bsf	(_I2C_Status^(0+128)+28),3
  6419                           
  6420                           ;i2c_master.c: 191: I2C_Status.callbackTable[I2C_DATA_COMPLETE]=I2C_CallbackReturnStop;
  6421  0311  30F7               	movlw	low _I2C_CallbackReturnStop
  6422  0312  00A0               	movwf	_I2C_Status^(0+128)
  6423  0313  300E               	movlw	high _I2C_CallbackReturnStop
  6424  0314  00A1               	movwf	(_I2C_Status^(0+128)+1)
  6425                           
  6426                           ;i2c_master.c: 192: I2C_Status.callbackPayload[I2C_DATA_COMPLETE] = (0);
  6427  0315  01AC               	clrf	(low ((_I2C_Status| 0+12)))^(0+128)
  6428                           
  6429                           ;i2c_master.c: 193: I2C_Status.callbackTable[I2C_WRITE_COLLISION]=I2C_CallbackReturnStop
      +                          ;
  6430  0316  30F7               	movlw	low _I2C_CallbackReturnStop
  6431  0317  00A2               	movwf	(low ((_I2C_Status| 0+2)))^(0+128)
  6432  0318  300E               	movlw	high _I2C_CallbackReturnStop
  6433  0319  00A3               	movwf	((low ((_I2C_Status| 0+2)))^(0+128)+1)
  6434                           
  6435                           ;i2c_master.c: 194: I2C_Status.callbackPayload[I2C_WRITE_COLLISION] = (0);
  6436  031A  01AD               	clrf	(low ((_I2C_Status| 0+13)))^(0+128)
  6437                           
  6438                           ;i2c_master.c: 195: I2C_Status.callbackTable[I2C_ADDR_NACK]=I2C_CallbackReturnStop;
  6439  031B  30F7               	movlw	low _I2C_CallbackReturnStop
  6440  031C  00A4               	movwf	(low ((_I2C_Status| 0+4)))^(0+128)
  6441  031D  300E               	movlw	high _I2C_CallbackReturnStop
  6442  031E  00A5               	movwf	((low ((_I2C_Status| 0+4)))^(0+128)+1)
  6443                           
  6444                           ;i2c_master.c: 196: I2C_Status.callbackPayload[I2C_ADDR_NACK] = (0);
  6445  031F  01AE               	clrf	(low ((_I2C_Status| 0+14)))^(0+128)
  6446                           
  6447                           ;i2c_master.c: 197: I2C_Status.callbackTable[I2C_DATA_NACK]=I2C_CallbackReturnStop;
  6448  0320  30F7               	movlw	low _I2C_CallbackReturnStop
  6449  0321  00A6               	movwf	(low ((_I2C_Status| 0+6)))^(0+128)
  6450  0322  300E               	movlw	high _I2C_CallbackReturnStop
  6451  0323  00A7               	movwf	((low ((_I2C_Status| 0+6)))^(0+128)+1)
  6452                           
  6453                           ;i2c_master.c: 198: I2C_Status.callbackPayload[I2C_DATA_NACK] = (0);
  6454  0324  01AF               	clrf	(low ((_I2C_Status| 0+15)))^(0+128)
  6455                           
  6456                           ;i2c_master.c: 199: I2C_Status.callbackTable[I2C_TIMEOUT]=I2C_CallbackReturnReset;
  6457  0325  30FD               	movlw	low _I2C_CallbackReturnReset
  6458  0326  00A8               	movwf	(low ((_I2C_Status| 0+8)))^(0+128)
  6459  0327  300E               	movlw	high _I2C_CallbackReturnReset
  6460  0328  00A9               	movwf	((low ((_I2C_Status| 0+8)))^(0+128)+1)
  6461                           
  6462                           ;i2c_master.c: 200: I2C_Status.callbackPayload[I2C_TIMEOUT] = (0);
  6463  0329  01B0               	clrf	(low ((_I2C_Status| 0+16)))^(0+128)
  6464                           
  6465                           ;i2c_master.c: 202: I2C_MasterClearIrq();
  6466  032A  318E  2673  3182   	fcall	_I2C_MasterClearIrq
  6467                           
  6468                           ;i2c_master.c: 203: I2C_MasterOpen();
  6469  032D  3187  27D3         	fcall	_I2C_MasterOpen
  6470                           
  6471                           ;i2c_master.c: 204: returnValue = I2C_NOERR;
  6472  032F  0020               	movlb	0	; select bank0
  6473  0330  01CF               	clrf	I2C_Open@returnValue
  6474  0331                     l321:	
  6475                           
  6476                           ;i2c_master.c: 205: }
  6477                           ;i2c_master.c: 206: return returnValue;
  6478  0331  0020               	movlb	0	; select bank0
  6479  0332  084F               	movf	I2C_Open@returnValue,w
  6480  0333  0008               	return
  6481  0334                     __end_of_I2C_Open:	
  6482                           
  6483                           	psect	text20
  6484  07D3                     __ptext20:	
  6485 ;; *************** function _I2C_MasterOpen *****************
  6486 ;; Defined at:
  6487 ;;		line 543 in file "mcc_generated_files/i2c_master.c"
  6488 ;; Parameters:    Size  Location     Type
  6489 ;;		None
  6490 ;; Auto vars:     Size  Location     Type
  6491 ;;		None
  6492 ;; Return value:  Size  Location     Type
  6493 ;;                  1    wreg      unsigned char 
  6494 ;; Registers used:
  6495 ;;		wreg, status,2
  6496 ;; Tracked objects:
  6497 ;;		On entry : 0/0
  6498 ;;		On exit  : 0/0
  6499 ;;		Unchanged: 0/0
  6500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6505 ;;Total ram usage:        0 bytes
  6506 ;; Hardware stack levels used:    1
  6507 ;; Hardware stack levels required when called:   12
  6508 ;; This function calls:
  6509 ;;		Nothing
  6510 ;; This function is called by:
  6511 ;;		_I2C_Open
  6512 ;; This function uses a non-reentrant model
  6513 ;;
  6514                           
  6515                           
  6516                           ;psect for function _I2C_MasterOpen
  6517  07D3                     _I2C_MasterOpen:	
  6518                           
  6519                           ;i2c_master.c: 545: if(!SSP1CON1bits.SSPEN)
  6520                           
  6521                           ;incstack = 0
  6522                           ; Regs used in _I2C_MasterOpen: [wreg+status,2]
  6523  07D3  0024               	movlb	4	; select bank4
  6524  07D4  1A95               	btfsc	21,5	;volatile
  6525  07D5  0008               	return
  6526                           
  6527                           ;i2c_master.c: 546: {
  6528                           ;i2c_master.c: 547: SSP1STAT = 0x80;
  6529  07D6  3080               	movlw	128
  6530  07D7  0094               	movwf	20	;volatile
  6531                           
  6532                           ;i2c_master.c: 548: SSP1CON1 = 0x08;
  6533  07D8  3008               	movlw	8
  6534  07D9  0095               	movwf	21	;volatile
  6535                           
  6536                           ;i2c_master.c: 549: SSP1CON2 = 0x00;
  6537  07DA  0196               	clrf	22	;volatile
  6538                           
  6539                           ;i2c_master.c: 550: SSP1ADD = 0x09;
  6540  07DB  3009               	movlw	9
  6541  07DC  0092               	movwf	18	;volatile
  6542                           
  6543                           ;i2c_master.c: 551: SSP1CON1bits.SSPEN = 1;
  6544  07DD  1695               	bsf	21,5	;volatile
  6545                           
  6546                           ;i2c_master.c: 552: return 1;
  6547                           ;	Return value of _I2C_MasterOpen is never used
  6548  07DE  0008               	return
  6549  07DF                     __end_of_I2C_MasterOpen:	
  6550                           ;i2c_master.c: 553: }
  6551                           ;i2c_master.c: 554: return 0;
  6552                           ;	Return value of _I2C_MasterOpen is never used
  6553                           
  6554                           
  6555                           	psect	text21
  6556  0ED3                     __ptext21:	
  6557 ;; *************** function _I2C_MasterWrite *****************
  6558 ;; Defined at:
  6559 ;;		line 251 in file "mcc_generated_files/i2c_master.c"
  6560 ;; Parameters:    Size  Location     Type
  6561 ;;		None
  6562 ;; Auto vars:     Size  Location     Type
  6563 ;;		None
  6564 ;; Return value:  Size  Location     Type
  6565 ;;                  1    wreg      enum E92
  6566 ;; Registers used:
  6567 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6568 ;; Tracked objects:
  6569 ;;		On entry : 0/0
  6570 ;;		On exit  : 0/0
  6571 ;;		Unchanged: 0/0
  6572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6576 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6577 ;;Total ram usage:        0 bytes
  6578 ;; Hardware stack levels used:    1
  6579 ;; Hardware stack levels required when called:   19
  6580 ;; This function calls:
  6581 ;;		_I2C_MasterOperation
  6582 ;; This function is called by:
  6583 ;;		_I2C_Write1ByteRegister
  6584 ;;		_I2C_Read1ByteRegister
  6585 ;;		_I2C_Write2ByteRegister
  6586 ;;		_I2C_WriteNBytes
  6587 ;;		_I2C_ReadDataBlock
  6588 ;; This function uses a non-reentrant model
  6589 ;;
  6590                           
  6591                           
  6592                           ;psect for function _I2C_MasterWrite
  6593  0ED3                     _I2C_MasterWrite:	
  6594                           
  6595                           ;i2c_master.c: 253: return I2C_MasterOperation(0);
  6596                           ;	Return value of _I2C_MasterWrite is never used
  6597                           
  6598                           ;incstack = 0
  6599 ;; hardware stack exceeded
  6600                           ; Regs used in _I2C_MasterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6601  0ED3  3000               	movlw	0
  6602  0ED4  3186  2656         	fcall	_I2C_MasterOperation
  6603  0ED6  0008               	return
  6604  0ED7                     __end_of_I2C_MasterWrite:	
  6605                           
  6606                           	psect	text22
  6607  0656                     __ptext22:	
  6608 ;; *************** function _I2C_MasterOperation *****************
  6609 ;; Defined at:
  6610 ;;		line 224 in file "mcc_generated_files/i2c_master.c"
  6611 ;; Parameters:    Size  Location     Type
  6612 ;;  read            1    wreg     unsigned char 
  6613 ;; Auto vars:     Size  Location     Type
  6614 ;;  read            1   10[BANK1 ] unsigned char 
  6615 ;;  returnValue     1   11[BANK1 ] enum E92
  6616 ;; Return value:  Size  Location     Type
  6617 ;;                  1    wreg      enum E92
  6618 ;; Registers used:
  6619 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6620 ;; Tracked objects:
  6621 ;;		On entry : 0/0
  6622 ;;		On exit  : 0/0
  6623 ;;		Unchanged: 0/0
  6624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6626 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6627 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6628 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6629 ;;Total ram usage:        3 bytes
  6630 ;; Hardware stack levels used:    1
  6631 ;; Hardware stack levels required when called:   18
  6632 ;; This function calls:
  6633 ;;		_I2C_MasterStart
  6634 ;;		_I2C_Poller
  6635 ;; This function is called by:
  6636 ;;		_I2C_MasterWrite
  6637 ;;		_I2C_MasterRead
  6638 ;; This function uses a non-reentrant model
  6639 ;;
  6640                           
  6641                           
  6642                           ;psect for function _I2C_MasterOperation
  6643  0656                     _I2C_MasterOperation:	
  6644                           
  6645                           ;incstack = 0
  6646 ;; hardware stack exceeded
  6647                           ; Regs used in _I2C_MasterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6648                           ;I2C_MasterOperation@read stored from wreg
  6649  0656  0021               	movlb	1	; select bank1
  6650  0657  00C7               	movwf	I2C_MasterOperation@read^(0+128)
  6651                           
  6652                           ;i2c_master.c: 226: i2c_error_t returnValue = I2C_BUSY;
  6653  0658  01C8               	clrf	I2C_MasterOperation@returnValue^(0+128)
  6654  0659  0AC8               	incf	I2C_MasterOperation@returnValue^(0+128),f
  6655                           
  6656                           ;i2c_master.c: 227: if(!I2C_Status.busy)
  6657  065A  18BC               	btfsc	(_I2C_Status^(0+128)+28),1
  6658  065B  2E6D               	goto	l5832
  6659                           
  6660                           ;i2c_master.c: 228: {
  6661                           ;i2c_master.c: 229: I2C_Status.busy = 1;
  6662  065C  14BC               	bsf	(_I2C_Status^(0+128)+28),1
  6663                           
  6664                           ;i2c_master.c: 230: returnValue = I2C_NOERR;
  6665  065D  01C8               	clrf	I2C_MasterOperation@returnValue^(0+128)
  6666                           
  6667                           ;i2c_master.c: 232: if(read)
  6668  065E  0847               	movf	I2C_MasterOperation@read^(0+128),w
  6669  065F  1903               	btfsc	3,2
  6670  0660  2E64               	goto	l5826
  6671                           
  6672                           ;i2c_master.c: 233: {
  6673                           ;i2c_master.c: 234: I2C_Status.state = I2C_SEND_ADR_READ;
  6674  0661  01BA               	clrf	(_I2C_Status^(0+128)+26)
  6675  0662  0ABA               	incf	(_I2C_Status^(0+128)+26),f
  6676                           
  6677                           ;i2c_master.c: 235: }
  6678  0663  2E68               	goto	l5828
  6679  0664                     l5826:	
  6680                           
  6681                           ;i2c_master.c: 236: else
  6682                           ;i2c_master.c: 237: {
  6683                           ;i2c_master.c: 238: I2C_Status.state = I2C_SEND_ADR_WRITE;
  6684  0664  3002               	movlw	2
  6685  0665  00C6               	movwf	??_I2C_MasterOperation^(0+128)
  6686  0666  0846               	movf	??_I2C_MasterOperation^(0+128),w
  6687  0667  00BA               	movwf	(_I2C_Status^(0+128)+26)
  6688  0668                     l5828:	
  6689                           
  6690                           ;i2c_master.c: 239: }
  6691                           ;i2c_master.c: 240: I2C_MasterStart();
  6692  0668  318E  267C  3186   	fcall	_I2C_MasterStart
  6693                           
  6694                           ;i2c_master.c: 241: I2C_Poller();
  6695  066B  318F  27B2         	fcall	_I2C_Poller
  6696  066D                     l5832:	
  6697                           
  6698                           ;i2c_master.c: 242: }
  6699                           ;i2c_master.c: 243: return returnValue;
  6700  066D  0021               	movlb	1	; select bank1
  6701  066E  0848               	movf	I2C_MasterOperation@returnValue^(0+128),w
  6702  066F  0008               	return
  6703  0670                     __end_of_I2C_MasterOperation:	
  6704                           
  6705                           	psect	text23
  6706  0FB2                     __ptext23:	
  6707 ;; *************** function _I2C_Poller *****************
  6708 ;; Defined at:
  6709 ;;		line 312 in file "mcc_generated_files/i2c_master.c"
  6710 ;; Parameters:    Size  Location     Type
  6711 ;;		None
  6712 ;; Auto vars:     Size  Location     Type
  6713 ;;		None
  6714 ;; Return value:  Size  Location     Type
  6715 ;;                  1    wreg      void 
  6716 ;; Registers used:
  6717 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6718 ;; Tracked objects:
  6719 ;;		On entry : 0/0
  6720 ;;		On exit  : 0/0
  6721 ;;		Unchanged: 0/0
  6722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6727 ;;Total ram usage:        0 bytes
  6728 ;; Hardware stack levels used:    1
  6729 ;; Hardware stack levels required when called:   17
  6730 ;; This function calls:
  6731 ;;		_I2C_MasterFsm
  6732 ;;		_I2C_MasterWaitForEvent
  6733 ;; This function is called by:
  6734 ;;		_I2C_MasterOperation
  6735 ;; This function uses a non-reentrant model
  6736 ;;
  6737                           
  6738                           
  6739                           ;psect for function _I2C_Poller
  6740  0FB2                     _I2C_Poller:	
  6741  0FB2                     l5792:	
  6742                           ;i2c_master.c: 314: while(I2C_Status.busy)
  6743                           
  6744                           ;incstack = 0
  6745 ;; hardware stack exceeded
  6746                           ; Regs used in _I2C_Poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6747                           
  6748  0FB2  0021               	movlb	1	; select bank1
  6749  0FB3  1CBC               	btfss	(_I2C_Status^(0+128)+28),1
  6750  0FB4  0008               	return
  6751                           
  6752                           ;i2c_master.c: 315: {
  6753                           ;i2c_master.c: 316: I2C_MasterWaitForEvent();
  6754  0FB5  318E  26CF  318F   	fcall	_I2C_MasterWaitForEvent
  6755                           
  6756                           ;i2c_master.c: 317: I2C_MasterFsm();
  6757  0FB8  3185  2525  318F   	fcall	_I2C_MasterFsm
  6758  0FBB  2FB2               	goto	l5792
  6759  0FBC                     __end_of_I2C_Poller:	
  6760                           
  6761                           	psect	text24
  6762  0ECF                     __ptext24:	
  6763 ;; *************** function _I2C_MasterWaitForEvent *****************
  6764 ;; Defined at:
  6765 ;;		line 650 in file "mcc_generated_files/i2c_master.c"
  6766 ;; Parameters:    Size  Location     Type
  6767 ;;		None
  6768 ;; Auto vars:     Size  Location     Type
  6769 ;;		None
  6770 ;; Return value:  Size  Location     Type
  6771 ;;                  1    wreg      void 
  6772 ;; Registers used:
  6773 ;;		None
  6774 ;; Tracked objects:
  6775 ;;		On entry : 0/0
  6776 ;;		On exit  : 0/0
  6777 ;;		Unchanged: 0/0
  6778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6782 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6783 ;;Total ram usage:        0 bytes
  6784 ;; Hardware stack levels used:    1
  6785 ;; Hardware stack levels required when called:   12
  6786 ;; This function calls:
  6787 ;;		Nothing
  6788 ;; This function is called by:
  6789 ;;		_I2C_Poller
  6790 ;; This function uses a non-reentrant model
  6791 ;;
  6792                           
  6793                           
  6794                           ;psect for function _I2C_MasterWaitForEvent
  6795  0ECF                     _I2C_MasterWaitForEvent:	
  6796  0ECF                     l544:	
  6797                           ;incstack = 0
  6798 ;; hardware stack exceeded
  6799                           ; Regs used in _I2C_MasterWaitForEvent: []
  6800                           ;i2c_master.c: 652: while(1)
  6801                           
  6802                           
  6803                           ;i2c_master.c: 653: {
  6804                           ;i2c_master.c: 654: if(PIR1bits.SSP1IF)
  6805  0ECF  0020               	movlb	0	; select bank0
  6806  0ED0  1990               	btfsc	16,3	;volatile
  6807  0ED1  0008               	return
  6808  0ED2  2ECF               	goto	l544
  6809  0ED3                     __end_of_I2C_MasterWaitForEvent:	
  6810                           ;i2c_master.c: 655: {
  6811                           ;i2c_master.c: 656: break;
  6812                           
  6813                           
  6814                           	psect	text25
  6815  0525                     __ptext25:	
  6816 ;; *************** function _I2C_MasterFsm *****************
  6817 ;; Defined at:
  6818 ;;		line 321 in file "mcc_generated_files/i2c_master.c"
  6819 ;; Parameters:    Size  Location     Type
  6820 ;;		None
  6821 ;; Auto vars:     Size  Location     Type
  6822 ;;		None
  6823 ;; Return value:  Size  Location     Type
  6824 ;;                  1    wreg      void 
  6825 ;; Registers used:
  6826 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6827 ;; Tracked objects:
  6828 ;;		On entry : 0/0
  6829 ;;		On exit  : 0/0
  6830 ;;		Unchanged: 0/0
  6831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6834 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6835 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6836 ;;Total ram usage:        3 bytes
  6837 ;; Hardware stack levels used:    1
  6838 ;; Hardware stack levels required when called:   16
  6839 ;; This function calls:
  6840 ;;		_I2C_DO_ADDRESS_NACK
  6841 ;;		_I2C_DO_IDLE
  6842 ;;		_I2C_DO_RCEN
  6843 ;;		_I2C_DO_RESET
  6844 ;;		_I2C_DO_RX
  6845 ;;		_I2C_DO_RX_ACK
  6846 ;;		_I2C_DO_RX_NACK_RESTART
  6847 ;;		_I2C_DO_RX_NACK_STOP
  6848 ;;		_I2C_DO_SEND_ADR_READ
  6849 ;;		_I2C_DO_SEND_ADR_WRITE
  6850 ;;		_I2C_DO_SEND_RESTART
  6851 ;;		_I2C_DO_SEND_RESTART_READ
  6852 ;;		_I2C_DO_SEND_RESTART_WRITE
  6853 ;;		_I2C_DO_SEND_STOP
  6854 ;;		_I2C_DO_TX
  6855 ;;		_I2C_DO_TX_EMPTY
  6856 ;;		_I2C_MasterClearIrq
  6857 ;;		_I2C_MasterIsNack
  6858 ;; This function is called by:
  6859 ;;		_I2C_Poller
  6860 ;; This function uses a non-reentrant model
  6861 ;;
  6862                           
  6863                           
  6864                           ;psect for function _I2C_MasterFsm
  6865  0525                     _I2C_MasterFsm:	
  6866                           
  6867                           ;i2c_master.c: 323: I2C_MasterClearIrq();
  6868                           
  6869                           ;incstack = 0
  6870 ;; hardware stack exceeded
  6871                           ; Regs used in _I2C_MasterFsm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6872  0525  318E  2673  3185   	fcall	_I2C_MasterClearIrq
  6873                           
  6874                           ;i2c_master.c: 325: if(I2C_Status.addressNackCheck && I2C_MasterIsNack())
  6875  0528  0021               	movlb	1	; select bank1
  6876  0529  1C3C               	btfss	(_I2C_Status^(0+128)+28),0
  6877  052A  2D36               	goto	l5764
  6878  052B  318F  2709  3185   	fcall	_I2C_MasterIsNack
  6879  052E  3A00               	xorlw	0
  6880  052F  1903               	skipnz
  6881  0530  2D36               	goto	l5764
  6882                           
  6883                           ;i2c_master.c: 326: {
  6884                           ;i2c_master.c: 327: I2C_Status.state = I2C_ADDRESS_NACK;
  6885  0531  300F               	movlw	15
  6886  0532  0021               	movlb	1	; select bank1
  6887  0533  00C3               	movwf	??_I2C_MasterFsm^(0+128)
  6888  0534  0843               	movf	??_I2C_MasterFsm^(0+128),w
  6889  0535  00BA               	movwf	(_I2C_Status^(0+128)+26)
  6890  0536                     l5764:	
  6891                           
  6892                           ;i2c_master.c: 328: }
  6893                           ;i2c_master.c: 329: I2C_Status.state = fsmStateTable[I2C_Status.state]();
  6894  0536  0021               	movlb	1	; select bank1
  6895  0537  083A               	movf	(_I2C_Status^(0+128)+26),w
  6896  0538  00C3               	movwf	??_I2C_MasterFsm^(0+128)
  6897  0539  01C4               	clrf	(??_I2C_MasterFsm^(0+128)+1)
  6898  053A  35C3               	lslf	??_I2C_MasterFsm^(0+128),f
  6899  053B  0DC4               	rlf	(??_I2C_MasterFsm^(0+128)+1),f
  6900  053C  30DD               	movlw	low (_fsmStateTable| (0+32768))
  6901  053D  0743               	addwf	??_I2C_MasterFsm^(0+128),w
  6902  053E  0084               	movwf	4
  6903  053F  3085               	movlw	high (_fsmStateTable| (0+32768))
  6904  0540  3D44               	addwfc	(??_I2C_MasterFsm+1)^(0+128),w
  6905  0541  0085               	movwf	5
  6906  0542  3F01               	moviw [1]fsr0
  6907  0543  008A               	movwf	10
  6908  0544  3F00               	moviw [0]fsr0
  6909  0545  000A               	callw
  6910  0546  3185               	pagesel	$
  6911  0547  0021               	movlb	1	; select bank1
  6912  0548  00C5               	movwf	(??_I2C_MasterFsm+2)^(0+128)
  6913  0549  0845               	movf	(??_I2C_MasterFsm+2)^(0+128),w
  6914  054A  00BA               	movwf	(_I2C_Status^(0+128)+26)
  6915  054B  0008               	return
  6916  054C                     __end_of_I2C_MasterFsm:	
  6917                           
  6918                           	psect	text26
  6919  04FD                     __ptext26:	
  6920 ;; *************** function _I2C_DO_ADDRESS_NACK *****************
  6921 ;; Defined at:
  6922 ;;		line 500 in file "mcc_generated_files/i2c_master.c"
  6923 ;; Parameters:    Size  Location     Type
  6924 ;;		None
  6925 ;; Auto vars:     Size  Location     Type
  6926 ;;		None
  6927 ;; Return value:  Size  Location     Type
  6928 ;;                  1    wreg      enum E12103
  6929 ;; Registers used:
  6930 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6931 ;; Tracked objects:
  6932 ;;		On entry : 0/0
  6933 ;;		On exit  : 0/0
  6934 ;;		Unchanged: 0/0
  6935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6938 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6939 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6940 ;;Total ram usage:        1 bytes
  6941 ;; Hardware stack levels used:    1
  6942 ;; Hardware stack levels required when called:   15
  6943 ;; This function calls:
  6944 ;;		Absolute function
  6945 ;;		_I2C_CallbackReturnReset
  6946 ;;		_I2C_CallbackReturnStop
  6947 ;;		_I2C_DO_SEND_RESTART
  6948 ;;		_I2C_DO_SEND_STOP
  6949 ;;		_rd1RegCompleteHandler
  6950 ;;		_rd2RegCompleteHandler
  6951 ;;		_rdBlkRegCompleteHandler
  6952 ;;		_wr1RegCompleteHandler
  6953 ;;		_wr2RegCompleteHandler
  6954 ;; This function is called by:
  6955 ;;		i1_I2C_MasterFsm
  6956 ;;		_I2C_MasterFsm
  6957 ;; This function uses a non-reentrant model
  6958 ;;
  6959                           
  6960                           
  6961                           ;psect for function _I2C_DO_ADDRESS_NACK
  6962  04FD                     _I2C_DO_ADDRESS_NACK:	
  6963                           
  6964                           ;Skip over the trampoline to the duplicate function for level 1
  6965  04FD  1C7E               	btfss	126,0
  6966  04FE  2D01               	goto	l5732
  6967  04FF  3185  2DBA         	ljmp	i1l5630
  6968  0501                     _I2C_DO_ADDRESS_NACK$intlevel0:	
  6969  0501                     l5732:	
  6970                           ;incstack = 0
  6971 ;; hardware stack exceeded
  6972                           ; Regs used in _I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6973                           
  6974                           
  6975                           ;i2c_master.c: 502: I2C_Status.addressNackCheck = 0;
  6976  0501  0021               	movlb	1	; select bank1
  6977  0502  103C               	bcf	(_I2C_Status^(0+128)+28),0
  6978                           
  6979                           ;i2c_master.c: 503: I2C_Status.error = I2C_FAIL;
  6980  0503  3002               	movlw	2
  6981  0504  00C0               	movwf	??_I2C_DO_ADDRESS_NACK^(0+128)
  6982  0505  0840               	movf	??_I2C_DO_ADDRESS_NACK^(0+128),w
  6983  0506  00BB               	movwf	(_I2C_Status^(0+128)+27)
  6984                           
  6985                           ;i2c_master.c: 504: switch(I2C_Status.callbackTable[I2C_ADDR_NACK](I2C_Status.callbackPa
      +                          yload[I2C_ADDR_NACK]))
  6986  0507  2D0E               	goto	l5746
  6987  0508                     l5736:	
  6988                           ;i2c_master.c: 505: {
  6989                           ;i2c_master.c: 506: case I2C_RESTART_READ:
  6990                           
  6991                           
  6992                           ;i2c_master.c: 507: case I2C_RESTART_WRITE:
  6993                           ;i2c_master.c: 508: return I2C_DO_SEND_RESTART();
  6994  0508  318F  275B         	fcall	_I2C_DO_SEND_RESTART
  6995  050A  0008               	return
  6996  050B                     l5740:	
  6997                           ;i2c_master.c: 509: default:
  6998                           
  6999                           
  7000                           ;i2c_master.c: 510: return I2C_DO_SEND_STOP();
  7001  050B  318F  2763         	fcall	_I2C_DO_SEND_STOP
  7002                           
  7003                           ;i2c_master.c: 511: }
  7004  050D  0008               	return
  7005  050E                     l5746:	
  7006  050E  0021               	movlb	1	; select bank1
  7007  050F  082E               	movf	(low ((_I2C_Status| 0+14)))^(0+128),w
  7008  0510  00C0               	movwf	??_I2C_DO_ADDRESS_NACK^(0+128)
  7009  0511  0840               	movf	??_I2C_DO_ADDRESS_NACK^(0+128),w
  7010  0512  0020               	movlb	0	; select bank0
  7011  0513  00D3               	movwf	I2C_CallbackReturnReset@funPtr
  7012  0514  3004               	movlw	4
  7013  0515  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
  7014  0516  0086               	movwf	6
  7015  0517  0187               	clrf	7
  7016  0518  3F41               	moviw [1]fsr1
  7017  0519  008A               	movwf	10
  7018  051A  3F40               	moviw [0]fsr1
  7019  051B  000A               	callw
  7020  051C  3184               	pagesel	$
  7021                           
  7022                           ; Switch size 1, requested type "space"
  7023                           ; Number of cases is 2, Range of values is 2 to 3
  7024                           ; switch strategies available:
  7025                           ; Name         Instructions Cycles
  7026                           ; simple_byte            7     4 (average)
  7027                           ; direct_byte           13     9 (fixed)
  7028                           ; jumptable            263     9 (fixed)
  7029                           ;	Chosen strategy is simple_byte
  7030  051D  3A02               	xorlw	2	; case 2
  7031  051E  1903               	skipnz
  7032  051F  2D08               	goto	l5736
  7033  0520  3A01               	xorlw	1	; case 3
  7034  0521  1903               	skipnz
  7035  0522  2D08               	goto	l5736
  7036  0523  2D0B               	goto	l5740
  7037  0524  0008               	return
  7038  0525                     __end_of_I2C_DO_ADDRESS_NACK:	
  7039                           
  7040                           	psect	text27
  7041  0F8C                     __ptext27:	
  7042 ;; *************** function _I2C_DO_RESET *****************
  7043 ;; Defined at:
  7044 ;;		line 494 in file "mcc_generated_files/i2c_master.c"
  7045 ;; Parameters:    Size  Location     Type
  7046 ;;		None
  7047 ;; Auto vars:     Size  Location     Type
  7048 ;;		None
  7049 ;; Return value:  Size  Location     Type
  7050 ;;                  1    wreg      enum E12103
  7051 ;; Registers used:
  7052 ;;		wreg, status,2
  7053 ;; Tracked objects:
  7054 ;;		On entry : 0/0
  7055 ;;		On exit  : 0/0
  7056 ;;		Unchanged: 0/0
  7057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7061 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7062 ;;Total ram usage:        0 bytes
  7063 ;; Hardware stack levels used:    1
  7064 ;; Hardware stack levels required when called:   12
  7065 ;; This function calls:
  7066 ;;		Nothing
  7067 ;; This function is called by:
  7068 ;;		i1_I2C_MasterFsm
  7069 ;;		_I2C_MasterFsm
  7070 ;; This function uses a non-reentrant model
  7071 ;;
  7072                           
  7073                           
  7074                           ;psect for function _I2C_DO_RESET
  7075  0F8C                     _I2C_DO_RESET:	
  7076                           
  7077                           ;Skip over the trampoline to the duplicate function for level 1
  7078  0F8C  1C7E               	btfss	126,0
  7079  0F8D  2F90               	goto	l4092
  7080  0F8E  318E  2EE1         	ljmp	i1l2794
  7081  0F90                     _I2C_DO_RESET$intlevel0:	
  7082  0F90                     l4092:	
  7083                           ;incstack = 0
  7084 ;; hardware stack exceeded
  7085                           ; Regs used in _I2C_DO_RESET: [wreg+status,2]
  7086                           
  7087                           
  7088                           ;i2c_master.c: 496: I2C_Status.busy = 0;
  7089  0F90  0021               	movlb	1	; select bank1
  7090  0F91  10BC               	bcf	(_I2C_Status^(0+128)+28),1
  7091                           
  7092                           ;i2c_master.c: 497: I2C_Status.error = I2C_NOERR;
  7093  0F92  01BB               	clrf	(_I2C_Status^(0+128)+27)
  7094                           
  7095                           ;i2c_master.c: 498: return I2C_RESET;
  7096  0F93  300E               	movlw	14
  7097  0F94  0008               	return
  7098  0F95                     __end_of_I2C_DO_RESET:	
  7099                           
  7100                           	psect	text28
  7101  0F7B                     __ptext28:	
  7102 ;; *************** function _I2C_DO_RX_NACK_RESTART *****************
  7103 ;; Defined at:
  7104 ;;		line 488 in file "mcc_generated_files/i2c_master.c"
  7105 ;; Parameters:    Size  Location     Type
  7106 ;;		None
  7107 ;; Auto vars:     Size  Location     Type
  7108 ;;		None
  7109 ;; Return value:  Size  Location     Type
  7110 ;;                  1    wreg      enum E12103
  7111 ;; Registers used:
  7112 ;;		wreg, status,2, status,0, pclath, cstack
  7113 ;; Tracked objects:
  7114 ;;		On entry : 0/0
  7115 ;;		On exit  : 0/0
  7116 ;;		Unchanged: 0/0
  7117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7122 ;;Total ram usage:        0 bytes
  7123 ;; Hardware stack levels used:    1
  7124 ;; Hardware stack levels required when called:   13
  7125 ;; This function calls:
  7126 ;;		_I2C_MasterSendNack
  7127 ;; This function is called by:
  7128 ;;		_I2C_DO_RX
  7129 ;;		i1_I2C_MasterFsm
  7130 ;;		_I2C_MasterFsm
  7131 ;; This function uses a non-reentrant model
  7132 ;;
  7133                           
  7134                           
  7135                           ;psect for function _I2C_DO_RX_NACK_RESTART
  7136  0F7B                     _I2C_DO_RX_NACK_RESTART:	
  7137                           
  7138                           ;Skip over the trampoline to the duplicate function for level 1
  7139  0F7B  1C7E               	btfss	126,0
  7140  0F7C  2F7F               	goto	l3936
  7141  0F7D  318E  2EBB         	ljmp	i1l2636
  7142  0F7F                     _I2C_DO_RX_NACK_RESTART$intlevel0:	
  7143  0F7F                     l3936:	
  7144                           ;incstack = 0
  7145 ;; hardware stack exceeded
  7146                           ; Regs used in _I2C_DO_RX_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  7147                           
  7148                           
  7149                           ;i2c_master.c: 490: I2C_MasterSendNack();
  7150  0F7F  318E  26C7         	fcall	_I2C_MasterSendNack
  7151                           
  7152                           ;i2c_master.c: 491: return I2C_SEND_RESTART;
  7153  0F81  3009               	movlw	9
  7154  0F82  0008               	return
  7155  0F83                     __end_of_I2C_DO_RX_NACK_RESTART:	
  7156                           
  7157                           	psect	text29
  7158  0F73                     __ptext29:	
  7159 ;; *************** function _I2C_DO_RX_NACK_STOP *****************
  7160 ;; Defined at:
  7161 ;;		line 482 in file "mcc_generated_files/i2c_master.c"
  7162 ;; Parameters:    Size  Location     Type
  7163 ;;		None
  7164 ;; Auto vars:     Size  Location     Type
  7165 ;;		None
  7166 ;; Return value:  Size  Location     Type
  7167 ;;                  1    wreg      enum E12103
  7168 ;; Registers used:
  7169 ;;		wreg, status,2, status,0, pclath, cstack
  7170 ;; Tracked objects:
  7171 ;;		On entry : 0/0
  7172 ;;		On exit  : 0/0
  7173 ;;		Unchanged: 0/0
  7174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7179 ;;Total ram usage:        0 bytes
  7180 ;; Hardware stack levels used:    1
  7181 ;; Hardware stack levels required when called:   13
  7182 ;; This function calls:
  7183 ;;		_I2C_MasterSendNack
  7184 ;; This function is called by:
  7185 ;;		_I2C_DO_RX
  7186 ;;		i1_I2C_MasterFsm
  7187 ;;		_I2C_MasterFsm
  7188 ;; This function uses a non-reentrant model
  7189 ;;
  7190                           
  7191                           
  7192                           ;psect for function _I2C_DO_RX_NACK_STOP
  7193  0F73                     _I2C_DO_RX_NACK_STOP:	
  7194                           
  7195                           ;Skip over the trampoline to the duplicate function for level 1
  7196  0F73  1C7E               	btfss	126,0
  7197  0F74  2F77               	goto	l3942
  7198  0F75  318E  2EB7         	ljmp	i1l2630
  7199  0F77                     _I2C_DO_RX_NACK_STOP$intlevel0:	
  7200  0F77                     l3942:	
  7201                           ;incstack = 0
  7202 ;; hardware stack exceeded
  7203                           ; Regs used in _I2C_DO_RX_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  7204                           
  7205                           
  7206                           ;i2c_master.c: 484: I2C_MasterSendNack();
  7207  0F77  318E  26C7         	fcall	_I2C_MasterSendNack
  7208                           
  7209                           ;i2c_master.c: 485: return I2C_SEND_STOP;
  7210  0F79  300A               	movlw	10
  7211  0F7A  0008               	return
  7212  0F7B                     __end_of_I2C_DO_RX_NACK_STOP:	
  7213                           
  7214                           	psect	text30
  7215  0F6B                     __ptext30:	
  7216 ;; *************** function _I2C_DO_RX_ACK *****************
  7217 ;; Defined at:
  7218 ;;		line 475 in file "mcc_generated_files/i2c_master.c"
  7219 ;; Parameters:    Size  Location     Type
  7220 ;;		None
  7221 ;; Auto vars:     Size  Location     Type
  7222 ;;		None
  7223 ;; Return value:  Size  Location     Type
  7224 ;;                  1    wreg      enum E12103
  7225 ;; Registers used:
  7226 ;;		wreg, status,2, status,0, pclath, cstack
  7227 ;; Tracked objects:
  7228 ;;		On entry : 0/0
  7229 ;;		On exit  : 0/0
  7230 ;;		Unchanged: 0/0
  7231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7235 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7236 ;;Total ram usage:        0 bytes
  7237 ;; Hardware stack levels used:    1
  7238 ;; Hardware stack levels required when called:   13
  7239 ;; This function calls:
  7240 ;;		_I2C_MasterSendAck
  7241 ;; This function is called by:
  7242 ;;		i1_I2C_MasterFsm
  7243 ;;		_I2C_MasterFsm
  7244 ;; This function uses a non-reentrant model
  7245 ;;
  7246                           
  7247                           
  7248                           ;psect for function _I2C_DO_RX_ACK
  7249  0F6B                     _I2C_DO_RX_ACK:	
  7250                           
  7251                           ;Skip over the trampoline to the duplicate function for level 1
  7252  0F6B  1C7E               	btfss	126,0
  7253  0F6C  2F6F               	goto	l4086
  7254  0F6D  318E  2EB3         	ljmp	i1l2788
  7255  0F6F                     _I2C_DO_RX_ACK$intlevel0:	
  7256  0F6F                     l4086:	
  7257                           ;incstack = 0
  7258 ;; hardware stack exceeded
  7259                           ; Regs used in _I2C_DO_RX_ACK: [wreg+status,2+status,0+pclath+cstack]
  7260                           
  7261                           
  7262                           ;i2c_master.c: 477: I2C_MasterSendAck();
  7263  0F6F  318E  26CB         	fcall	_I2C_MasterSendAck
  7264                           
  7265                           ;i2c_master.c: 478: return I2C_RCEN;
  7266  0F71  3005               	movlw	5
  7267  0F72  0008               	return
  7268  0F73                     __end_of_I2C_DO_RX_ACK:	
  7269                           
  7270                           	psect	text31
  7271  0F63                     __ptext31:	
  7272 ;; *************** function _I2C_DO_SEND_STOP *****************
  7273 ;; Defined at:
  7274 ;;		line 469 in file "mcc_generated_files/i2c_master.c"
  7275 ;; Parameters:    Size  Location     Type
  7276 ;;		None
  7277 ;; Auto vars:     Size  Location     Type
  7278 ;;		None
  7279 ;; Return value:  Size  Location     Type
  7280 ;;                  1    wreg      enum E12103
  7281 ;; Registers used:
  7282 ;;		wreg, status,2, status,0, pclath, cstack
  7283 ;; Tracked objects:
  7284 ;;		On entry : 0/0
  7285 ;;		On exit  : 0/0
  7286 ;;		Unchanged: 0/0
  7287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7292 ;;Total ram usage:        0 bytes
  7293 ;; Hardware stack levels used:    1
  7294 ;; Hardware stack levels required when called:   13
  7295 ;; This function calls:
  7296 ;;		_I2C_MasterStop
  7297 ;; This function is called by:
  7298 ;;		_I2C_DO_TX
  7299 ;;		_I2C_DO_TX_EMPTY
  7300 ;;		_I2C_DO_ADDRESS_NACK
  7301 ;;		i1_I2C_MasterFsm
  7302 ;;		_I2C_MasterFsm
  7303 ;; This function uses a non-reentrant model
  7304 ;;
  7305                           
  7306                           
  7307                           ;psect for function _I2C_DO_SEND_STOP
  7308  0F63                     _I2C_DO_SEND_STOP:	
  7309                           
  7310                           ;Skip over the trampoline to the duplicate function for level 1
  7311  0F63  1C7E               	btfss	126,0
  7312  0F64  2F67               	goto	l3924
  7313  0F65  318E  2EAF         	ljmp	i1l2624
  7314  0F67                     _I2C_DO_SEND_STOP$intlevel0:	
  7315  0F67                     l3924:	
  7316                           ;incstack = 0
  7317 ;; hardware stack exceeded
  7318                           ; Regs used in _I2C_DO_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
  7319                           
  7320                           
  7321                           ;i2c_master.c: 471: I2C_MasterStop();
  7322  0F67  318E  2682         	fcall	_I2C_MasterStop
  7323                           
  7324                           ;i2c_master.c: 472: return I2C_IDLE;
  7325  0F69  3000               	movlw	0
  7326  0F6A  0008               	return
  7327  0F6B                     __end_of_I2C_DO_SEND_STOP:	
  7328                           
  7329                           	psect	text32
  7330  0F5B                     __ptext32:	
  7331 ;; *************** function _I2C_DO_SEND_RESTART *****************
  7332 ;; Defined at:
  7333 ;;		line 463 in file "mcc_generated_files/i2c_master.c"
  7334 ;; Parameters:    Size  Location     Type
  7335 ;;		None
  7336 ;; Auto vars:     Size  Location     Type
  7337 ;;		None
  7338 ;; Return value:  Size  Location     Type
  7339 ;;                  1    wreg      enum E12103
  7340 ;; Registers used:
  7341 ;;		wreg, status,2, status,0, pclath, cstack
  7342 ;; Tracked objects:
  7343 ;;		On entry : 0/0
  7344 ;;		On exit  : 0/0
  7345 ;;		Unchanged: 0/0
  7346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7350 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7351 ;;Total ram usage:        0 bytes
  7352 ;; Hardware stack levels used:    1
  7353 ;; Hardware stack levels required when called:   13
  7354 ;; This function calls:
  7355 ;;		_I2C_MasterEnableRestart
  7356 ;; This function is called by:
  7357 ;;		_I2C_DO_TX_EMPTY
  7358 ;;		_I2C_DO_ADDRESS_NACK
  7359 ;;		i1_I2C_MasterFsm
  7360 ;;		_I2C_MasterFsm
  7361 ;; This function uses a non-reentrant model
  7362 ;;
  7363                           
  7364                           
  7365                           ;psect for function _I2C_DO_SEND_RESTART
  7366  0F5B                     _I2C_DO_SEND_RESTART:	
  7367                           
  7368                           ;Skip over the trampoline to the duplicate function for level 1
  7369  0F5B  1C7E               	btfss	126,0
  7370  0F5C  2F5F               	goto	l3950
  7371  0F5D  318E  2EAB         	ljmp	i1l2618
  7372  0F5F                     _I2C_DO_SEND_RESTART$intlevel0:	
  7373  0F5F                     l3950:	
  7374                           ;incstack = 0
  7375 ;; hardware stack exceeded
  7376                           ; Regs used in _I2C_DO_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
  7377                           
  7378                           
  7379                           ;i2c_master.c: 465: I2C_MasterEnableRestart();
  7380  0F5F  318E  267F         	fcall	_I2C_MasterEnableRestart
  7381                           
  7382                           ;i2c_master.c: 466: return I2C_SEND_ADR_READ;
  7383  0F61  3001               	movlw	1
  7384  0F62  0008               	return
  7385  0F63                     __end_of_I2C_DO_SEND_RESTART:	
  7386                           
  7387                           	psect	text33
  7388  0F53                     __ptext33:	
  7389 ;; *************** function _I2C_DO_SEND_RESTART_WRITE *****************
  7390 ;; Defined at:
  7391 ;;		line 456 in file "mcc_generated_files/i2c_master.c"
  7392 ;; Parameters:    Size  Location     Type
  7393 ;;		None
  7394 ;; Auto vars:     Size  Location     Type
  7395 ;;		None
  7396 ;; Return value:  Size  Location     Type
  7397 ;;                  1    wreg      enum E12103
  7398 ;; Registers used:
  7399 ;;		wreg, status,2, status,0, pclath, cstack
  7400 ;; Tracked objects:
  7401 ;;		On entry : 0/0
  7402 ;;		On exit  : 0/0
  7403 ;;		Unchanged: 0/0
  7404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7409 ;;Total ram usage:        0 bytes
  7410 ;; Hardware stack levels used:    1
  7411 ;; Hardware stack levels required when called:   13
  7412 ;; This function calls:
  7413 ;;		_I2C_MasterEnableRestart
  7414 ;; This function is called by:
  7415 ;;		_I2C_DO_TX
  7416 ;;		i1_I2C_MasterFsm
  7417 ;;		_I2C_MasterFsm
  7418 ;; This function uses a non-reentrant model
  7419 ;;
  7420                           
  7421                           
  7422                           ;psect for function _I2C_DO_SEND_RESTART_WRITE
  7423  0F53                     _I2C_DO_SEND_RESTART_WRITE:	
  7424                           
  7425                           ;Skip over the trampoline to the duplicate function for level 1
  7426  0F53  1C7E               	btfss	126,0
  7427  0F54  2F57               	goto	l3918
  7428  0F55  318E  2EA7         	ljmp	i1l2612
  7429  0F57                     _I2C_DO_SEND_RESTART_WRITE$intlevel0:	
  7430  0F57                     l3918:	
  7431                           ;incstack = 0
  7432 ;; hardware stack exceeded
  7433                           ; Regs used in _I2C_DO_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
  7434                           
  7435                           
  7436                           ;i2c_master.c: 458: I2C_MasterEnableRestart();
  7437  0F57  318E  267F         	fcall	_I2C_MasterEnableRestart
  7438                           
  7439                           ;i2c_master.c: 459: return I2C_SEND_ADR_WRITE;
  7440  0F59  3002               	movlw	2
  7441  0F5A  0008               	return
  7442  0F5B                     __end_of_I2C_DO_SEND_RESTART_WRITE:	
  7443                           
  7444                           	psect	text34
  7445  0F4B                     __ptext34:	
  7446 ;; *************** function _I2C_DO_SEND_RESTART_READ *****************
  7447 ;; Defined at:
  7448 ;;		line 450 in file "mcc_generated_files/i2c_master.c"
  7449 ;; Parameters:    Size  Location     Type
  7450 ;;		None
  7451 ;; Auto vars:     Size  Location     Type
  7452 ;;		None
  7453 ;; Return value:  Size  Location     Type
  7454 ;;                  1    wreg      enum E12103
  7455 ;; Registers used:
  7456 ;;		wreg, status,2, status,0, pclath, cstack
  7457 ;; Tracked objects:
  7458 ;;		On entry : 0/0
  7459 ;;		On exit  : 0/0
  7460 ;;		Unchanged: 0/0
  7461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7466 ;;Total ram usage:        0 bytes
  7467 ;; Hardware stack levels used:    1
  7468 ;; Hardware stack levels required when called:   13
  7469 ;; This function calls:
  7470 ;;		_I2C_MasterEnableRestart
  7471 ;; This function is called by:
  7472 ;;		_I2C_DO_TX
  7473 ;;		i1_I2C_MasterFsm
  7474 ;;		_I2C_MasterFsm
  7475 ;; This function uses a non-reentrant model
  7476 ;;
  7477                           
  7478                           
  7479                           ;psect for function _I2C_DO_SEND_RESTART_READ
  7480  0F4B                     _I2C_DO_SEND_RESTART_READ:	
  7481                           
  7482                           ;Skip over the trampoline to the duplicate function for level 1
  7483  0F4B  1C7E               	btfss	126,0
  7484  0F4C  2F4F               	goto	l3912
  7485  0F4D  318E  2EA3         	ljmp	i1l2606
  7486  0F4F                     _I2C_DO_SEND_RESTART_READ$intlevel0:	
  7487  0F4F                     l3912:	
  7488                           ;incstack = 0
  7489 ;; hardware stack exceeded
  7490                           ; Regs used in _I2C_DO_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
  7491                           
  7492                           
  7493                           ;i2c_master.c: 452: I2C_MasterEnableRestart();
  7494  0F4F  318E  267F         	fcall	_I2C_MasterEnableRestart
  7495                           
  7496                           ;i2c_master.c: 453: return I2C_SEND_ADR_READ;
  7497  0F51  3001               	movlw	1
  7498  0F52  0008               	return
  7499  0F53                     __end_of_I2C_DO_SEND_RESTART_READ:	
  7500                           
  7501                           	psect	text35
  7502  0FA8                     __ptext35:	
  7503 ;; *************** function _I2C_DO_RCEN *****************
  7504 ;; Defined at:
  7505 ;;		line 402 in file "mcc_generated_files/i2c_master.c"
  7506 ;; Parameters:    Size  Location     Type
  7507 ;;		None
  7508 ;; Auto vars:     Size  Location     Type
  7509 ;;		None
  7510 ;; Return value:  Size  Location     Type
  7511 ;;                  1    wreg      enum E12103
  7512 ;; Registers used:
  7513 ;;		wreg, status,2, status,0, pclath, cstack
  7514 ;; Tracked objects:
  7515 ;;		On entry : 0/0
  7516 ;;		On exit  : 0/0
  7517 ;;		Unchanged: 0/0
  7518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7523 ;;Total ram usage:        0 bytes
  7524 ;; Hardware stack levels used:    1
  7525 ;; Hardware stack levels required when called:   13
  7526 ;; This function calls:
  7527 ;;		_I2C_MasterStartRx
  7528 ;; This function is called by:
  7529 ;;		i1_I2C_MasterFsm
  7530 ;;		_I2C_MasterFsm
  7531 ;; This function uses a non-reentrant model
  7532 ;;
  7533                           
  7534                           
  7535                           ;psect for function _I2C_DO_RCEN
  7536  0FA8                     _I2C_DO_RCEN:	
  7537                           
  7538                           ;Skip over the trampoline to the duplicate function for level 1
  7539  0FA8  1C7E               	btfss	126,0
  7540  0FA9  2FAC               	goto	l4058
  7541  0FAA  318E  2EF1         	ljmp	i1l2760
  7542  0FAC                     _I2C_DO_RCEN$intlevel0:	
  7543  0FAC                     l4058:	
  7544                           ;incstack = 0
  7545 ;; hardware stack exceeded
  7546                           ; Regs used in _I2C_DO_RCEN: [wreg+status,2+status,0+pclath+cstack]
  7547                           
  7548                           
  7549                           ;i2c_master.c: 404: I2C_Status.addressNackCheck = 0;
  7550  0FAC  0021               	movlb	1	; select bank1
  7551  0FAD  103C               	bcf	(_I2C_Status^(0+128)+28),0
  7552                           
  7553                           ;i2c_master.c: 405: I2C_MasterStartRx();
  7554  0FAE  318E  2685         	fcall	_I2C_MasterStartRx
  7555                           
  7556                           ;i2c_master.c: 406: return I2C_RX;
  7557  0FB0  3004               	movlw	4
  7558  0FB1  0008               	return
  7559  0FB2                     __end_of_I2C_DO_RCEN:	
  7560                           
  7561                           	psect	text36
  7562  02B6                     __ptext36:	
  7563 ;; *************** function _I2C_DO_RX *****************
  7564 ;; Defined at:
  7565 ;;		line 378 in file "mcc_generated_files/i2c_master.c"
  7566 ;; Parameters:    Size  Location     Type
  7567 ;;		None
  7568 ;; Auto vars:     Size  Location     Type
  7569 ;;		None
  7570 ;; Return value:  Size  Location     Type
  7571 ;;                  1    wreg      enum E12103
  7572 ;; Registers used:
  7573 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7574 ;; Tracked objects:
  7575 ;;		On entry : 0/0
  7576 ;;		On exit  : 0/0
  7577 ;;		Unchanged: 0/0
  7578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7581 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7582 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7583 ;;Total ram usage:        1 bytes
  7584 ;; Hardware stack levels used:    1
  7585 ;; Hardware stack levels required when called:   15
  7586 ;; This function calls:
  7587 ;;		Absolute function
  7588 ;;		_I2C_CallbackReturnReset
  7589 ;;		_I2C_CallbackReturnStop
  7590 ;;		_I2C_DO_RX_NACK_RESTART
  7591 ;;		_I2C_DO_RX_NACK_STOP
  7592 ;;		_I2C_MasterGetRxData
  7593 ;;		_I2C_MasterSendAck
  7594 ;;		_rd1RegCompleteHandler
  7595 ;;		_rd2RegCompleteHandler
  7596 ;;		_rdBlkRegCompleteHandler
  7597 ;;		_wr1RegCompleteHandler
  7598 ;;		_wr2RegCompleteHandler
  7599 ;; This function is called by:
  7600 ;;		i1_I2C_MasterFsm
  7601 ;;		_I2C_MasterFsm
  7602 ;; This function uses a non-reentrant model
  7603 ;;
  7604                           
  7605                           
  7606                           ;psect for function _I2C_DO_RX
  7607  02B6                     _I2C_DO_RX:	
  7608                           
  7609                           ;Skip over the trampoline to the duplicate function for level 1
  7610  02B6  1C7E               	btfss	126,0
  7611  02B7  2ABA               	goto	l5686
  7612  02B8  3183  2B6F         	ljmp	i1l5584
  7613  02BA                     _I2C_DO_RX$intlevel0:	
  7614  02BA                     l5686:	
  7615                           ;incstack = 0
  7616 ;; hardware stack exceeded
  7617                           ; Regs used in _I2C_DO_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7618                           
  7619                           
  7620                           ;i2c_master.c: 380: *I2C_Status.data_ptr++ = I2C_MasterGetRxData();
  7621  02BA  318E  2688  3182   	fcall	_I2C_MasterGetRxData
  7622  02BD  0021               	movlb	1	; select bank1
  7623  02BE  00C0               	movwf	??_I2C_DO_RX^(0+128)
  7624  02BF  0837               	movf	(low ((_I2C_Status| 0+23)))^(0+128),w
  7625  02C0  0086               	movwf	6
  7626  02C1  0187               	clrf	7
  7627  02C2  0840               	movf	??_I2C_DO_RX^(0+128),w
  7628  02C3  0081               	movwf	1
  7629  02C4  3001               	movlw	1
  7630  02C5  00C0               	movwf	??_I2C_DO_RX^(0+128)
  7631  02C6  0840               	movf	??_I2C_DO_RX^(0+128),w
  7632  02C7  07B7               	addwf	(low ((_I2C_Status| 0+23)))^(0+128),f
  7633                           
  7634                           ;i2c_master.c: 381: if(--I2C_Status.data_length)
  7635  02C8  3001               	movlw	1
  7636  02C9  02B8               	subwf	(_I2C_Status^(0+128)+24),f
  7637  02CA  3000               	movlw	0
  7638  02CB  3BB9               	subwfb	((_I2C_Status+1)^(0+128)+24),f
  7639  02CC  0838               	movf	(_I2C_Status^(0+128)+24),w
  7640  02CD  0439               	iorwf	((_I2C_Status+1)^(0+128)+24),w
  7641  02CE  1903               	btfsc	3,2
  7642  02CF  2AD4               	goto	l403
  7643                           
  7644                           ;i2c_master.c: 382: {
  7645                           ;i2c_master.c: 383: I2C_MasterSendAck();
  7646  02D0  318E  26CB         	fcall	_I2C_MasterSendAck
  7647                           
  7648                           ;i2c_master.c: 384: return I2C_RCEN;
  7649  02D2  3005               	movlw	5
  7650                           
  7651                           ;i2c_master.c: 385: }
  7652  02D3  0008               	return
  7653  02D4                     l403:	
  7654                           
  7655                           ;i2c_master.c: 386: else
  7656                           ;i2c_master.c: 387: {
  7657                           ;i2c_master.c: 388: I2C_Status.bufferFree = 1;
  7658  02D4  15BC               	bsf	(_I2C_Status^(0+128)+28),3
  7659                           
  7660                           ;i2c_master.c: 389: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
  7661  02D5  2ADC               	goto	l5710
  7662  02D6                     l5700:	
  7663                           ;i2c_master.c: 390: {
  7664                           ;i2c_master.c: 391: case I2C_RESTART_WRITE:
  7665                           
  7666                           
  7667                           ;i2c_master.c: 392: case I2C_RESTART_READ:
  7668                           ;i2c_master.c: 393: return I2C_DO_RX_NACK_RESTART();
  7669  02D6  318F  277B         	fcall	_I2C_DO_RX_NACK_RESTART
  7670  02D8  0008               	return
  7671  02D9                     l5704:	
  7672                           ;i2c_master.c: 395: case I2C_CONTINUE:
  7673                           
  7674                           ;i2c_master.c: 394: default:
  7675                           
  7676                           
  7677                           ;i2c_master.c: 396: case I2C_STOP:
  7678                           ;i2c_master.c: 397: return I2C_DO_RX_NACK_STOP();
  7679  02D9  318F  2773         	fcall	_I2C_DO_RX_NACK_STOP
  7680                           
  7681                           ;i2c_master.c: 398: }
  7682  02DB  0008               	return
  7683  02DC                     l5710:	
  7684  02DC  0021               	movlb	1	; select bank1
  7685  02DD  082C               	movf	(low ((_I2C_Status| 0+12)))^(0+128),w
  7686  02DE  00C0               	movwf	??_I2C_DO_RX^(0+128)
  7687  02DF  0840               	movf	??_I2C_DO_RX^(0+128),w
  7688  02E0  0020               	movlb	0	; select bank0
  7689  02E1  00D3               	movwf	I2C_CallbackReturnReset@funPtr
  7690  02E2  0021               	movlb	1	; select bank1
  7691  02E3  0821               	movf	(_I2C_Status+1)^(0+128),w
  7692  02E4  008A               	movwf	10
  7693  02E5  0820               	movf	_I2C_Status^(0+128),w
  7694  02E6  000A               	callw
  7695  02E7  3182               	pagesel	$
  7696                           
  7697                           ; Switch size 1, requested type "space"
  7698                           ; Number of cases is 4, Range of values is 1 to 4
  7699                           ; switch strategies available:
  7700                           ; Name         Instructions Cycles
  7701                           ; simple_byte           13     7 (average)
  7702                           ; direct_byte           17     9 (fixed)
  7703                           ; jumptable            263     9 (fixed)
  7704                           ;	Chosen strategy is simple_byte
  7705  02E8  3A01               	xorlw	1	; case 1
  7706  02E9  1903               	skipnz
  7707  02EA  2AD9               	goto	l5704
  7708  02EB  3A03               	xorlw	3	; case 2
  7709  02EC  1903               	skipnz
  7710  02ED  2AD6               	goto	l5700
  7711  02EE  3A01               	xorlw	1	; case 3
  7712  02EF  1903               	skipnz
  7713  02F0  2AD6               	goto	l5700
  7714  02F1  3A07               	xorlw	7	; case 4
  7715  02F2  1903               	skipnz
  7716  02F3  2AD9               	goto	l5704
  7717  02F4  2AD9               	goto	l5704
  7718  02F5  0008               	return
  7719  02F6                     __end_of_I2C_DO_RX:	
  7720                           
  7721                           	psect	text37
  7722  01D9                     __ptext37:	
  7723 ;; *************** function _I2C_DO_TX *****************
  7724 ;; Defined at:
  7725 ;;		line 354 in file "mcc_generated_files/i2c_master.c"
  7726 ;; Parameters:    Size  Location     Type
  7727 ;;		None
  7728 ;; Auto vars:     Size  Location     Type
  7729 ;;		None
  7730 ;; Return value:  Size  Location     Type
  7731 ;;                  1    wreg      enum E12103
  7732 ;; Registers used:
  7733 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7734 ;; Tracked objects:
  7735 ;;		On entry : 0/0
  7736 ;;		On exit  : 0/0
  7737 ;;		Unchanged: 0/0
  7738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7740 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7741 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7742 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7743 ;;Total ram usage:        3 bytes
  7744 ;; Hardware stack levels used:    1
  7745 ;; Hardware stack levels required when called:   15
  7746 ;; This function calls:
  7747 ;;		Absolute function
  7748 ;;		_I2C_CallbackReturnReset
  7749 ;;		_I2C_CallbackReturnStop
  7750 ;;		_I2C_DO_SEND_RESTART_READ
  7751 ;;		_I2C_DO_SEND_RESTART_WRITE
  7752 ;;		_I2C_DO_SEND_STOP
  7753 ;;		_I2C_MasterIsNack
  7754 ;;		_I2C_MasterSendTxData
  7755 ;;		_rd1RegCompleteHandler
  7756 ;;		_rd2RegCompleteHandler
  7757 ;;		_rdBlkRegCompleteHandler
  7758 ;;		_wr1RegCompleteHandler
  7759 ;;		_wr2RegCompleteHandler
  7760 ;; This function is called by:
  7761 ;;		i1_I2C_MasterFsm
  7762 ;;		_I2C_MasterFsm
  7763 ;; This function uses a non-reentrant model
  7764 ;;
  7765                           
  7766                           
  7767                           ;psect for function _I2C_DO_TX
  7768  01D9                     _I2C_DO_TX:	
  7769                           
  7770                           ;Skip over the trampoline to the duplicate function for level 1
  7771  01D9  1C7E               	btfss	126,0
  7772  01DA  29DD               	goto	l5656
  7773  01DB  3182  2A29         	ljmp	i1l5554
  7774  01DD                     _I2C_DO_TX$intlevel0:	
  7775  01DD                     l5656:	
  7776                           ;incstack = 0
  7777 ;; hardware stack exceeded
  7778                           ; Regs used in _I2C_DO_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7779                           
  7780                           
  7781                           ;i2c_master.c: 356: if(I2C_MasterIsNack())
  7782  01DD  318F  2709  3181   	fcall	_I2C_MasterIsNack
  7783  01E0  3A00               	xorlw	0
  7784  01E1  1D03               	btfss	3,2
  7785  01E2  29ED               	goto	l5674
  7786  01E3  2A0A               	goto	l387
  7787  01E4                     l5660:	
  7788                           ;i2c_master.c: 359: {
  7789                           ;i2c_master.c: 360: case I2C_RESTART_READ:
  7790                           
  7791                           ;i2c_master.c: 357: {
  7792                           ;i2c_master.c: 358: switch(I2C_Status.callbackTable[I2C_DATA_NACK](I2C_Status.callbackPa
      +                          yload[I2C_DATA_NACK]))
  7793                           
  7794                           
  7795                           ;i2c_master.c: 361: return I2C_DO_SEND_RESTART_READ();
  7796  01E4  318F  274B         	fcall	_I2C_DO_SEND_RESTART_READ
  7797  01E6  0008               	return
  7798  01E7                     l5664:	
  7799                           ;i2c_master.c: 362: case I2C_RESTART_WRITE:
  7800                           
  7801                           
  7802                           ;i2c_master.c: 363: return I2C_DO_SEND_RESTART_WRITE();
  7803  01E7  318F  2753         	fcall	_I2C_DO_SEND_RESTART_WRITE
  7804  01E9  0008               	return
  7805  01EA                     l5668:	
  7806                           ;i2c_master.c: 365: case I2C_CONTINUE:
  7807                           
  7808                           ;i2c_master.c: 364: default:
  7809                           
  7810                           
  7811                           ;i2c_master.c: 366: case I2C_STOP:
  7812                           ;i2c_master.c: 367: return I2C_DO_SEND_STOP();
  7813  01EA  318F  2763         	fcall	_I2C_DO_SEND_STOP
  7814                           
  7815                           ;i2c_master.c: 368: }
  7816  01EC  0008               	return
  7817  01ED                     l5674:	
  7818  01ED  0021               	movlb	1	; select bank1
  7819  01EE  082F               	movf	(low ((_I2C_Status| 0+15)))^(0+128),w
  7820  01EF  00C0               	movwf	??_I2C_DO_TX^(0+128)
  7821  01F0  0840               	movf	??_I2C_DO_TX^(0+128),w
  7822  01F1  0020               	movlb	0	; select bank0
  7823  01F2  00D3               	movwf	I2C_CallbackReturnReset@funPtr
  7824  01F3  3006               	movlw	6
  7825  01F4  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
  7826  01F5  0086               	movwf	6
  7827  01F6  0187               	clrf	7
  7828  01F7  3F41               	moviw [1]fsr1
  7829  01F8  008A               	movwf	10
  7830  01F9  3F40               	moviw [0]fsr1
  7831  01FA  000A               	callw
  7832  01FB  3181               	pagesel	$
  7833                           
  7834                           ; Switch size 1, requested type "space"
  7835                           ; Number of cases is 4, Range of values is 1 to 4
  7836                           ; switch strategies available:
  7837                           ; Name         Instructions Cycles
  7838                           ; simple_byte           13     7 (average)
  7839                           ; direct_byte           17     9 (fixed)
  7840                           ; jumptable            263     9 (fixed)
  7841                           ;	Chosen strategy is simple_byte
  7842  01FC  3A01               	xorlw	1	; case 1
  7843  01FD  1903               	skipnz
  7844  01FE  29EA               	goto	l5668
  7845  01FF  3A03               	xorlw	3	; case 2
  7846  0200  1903               	skipnz
  7847  0201  29E4               	goto	l5660
  7848  0202  3A01               	xorlw	1	; case 3
  7849  0203  1903               	skipnz
  7850  0204  29E7               	goto	l5664
  7851  0205  3A07               	xorlw	7	; case 4
  7852  0206  1903               	skipnz
  7853  0207  29EA               	goto	l5668
  7854  0208  29EA               	goto	l5668
  7855                           
  7856                           ;i2c_master.c: 369: }
  7857  0209  0008               	return
  7858  020A                     l387:	
  7859                           
  7860                           ;i2c_master.c: 370: else
  7861                           ;i2c_master.c: 371: {
  7862                           ;i2c_master.c: 372: I2C_Status.addressNackCheck = 0;
  7863  020A  0021               	movlb	1	; select bank1
  7864  020B  103C               	bcf	(_I2C_Status^(0+128)+28),0
  7865                           
  7866                           ;i2c_master.c: 373: I2C_MasterSendTxData(*I2C_Status.data_ptr++);
  7867  020C  3017               	movlw	23
  7868  020D  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
  7869  020E  0086               	movwf	6
  7870  020F  0187               	clrf	7
  7871  0210  3F40               	moviw [0]fsr1
  7872  0211  0084               	movwf	4
  7873  0212  0185               	clrf	5
  7874  0213  0A81               	incf	1,f
  7875  0214  0800               	movf	0,w
  7876  0215  318F  2703  3181   	fcall	_I2C_MasterSendTxData
  7877                           
  7878                           ;i2c_master.c: 374: return (--I2C_Status.data_length)?I2C_TX:I2C_TX_EMPTY;
  7879  0218  3001               	movlw	1
  7880  0219  0021               	movlb	1	; select bank1
  7881  021A  02B8               	subwf	(_I2C_Status^(0+128)+24),f
  7882  021B  3000               	movlw	0
  7883  021C  3BB9               	subwfb	((_I2C_Status+1)^(0+128)+24),f
  7884  021D  0838               	movf	(_I2C_Status^(0+128)+24),w
  7885  021E  0439               	iorwf	((_I2C_Status+1)^(0+128)+24),w
  7886  021F  1D03               	btfss	3,2
  7887  0220  2A23               	goto	l5682
  7888  0221  3006               	movlw	6
  7889  0222  2A24               	goto	L1
  7890  0223                     l5682:	
  7891  0223  3003               	movlw	3
  7892  0224                     L1:	
  7893  0224  00C1               	movwf	_I2C_DO_TX$794^(0+128)
  7894  0225  3000               	movlw	0
  7895  0226  00C2               	movwf	(_I2C_DO_TX$794^(0+128)+1)
  7896  0227  0841               	movf	_I2C_DO_TX$794^(0+128),w
  7897  0228  0008               	return
  7898  0229                     __end_of_I2C_DO_TX:	
  7899                           
  7900                           	psect	text38
  7901  0FC6                     __ptext38:	
  7902 ;; *************** function _I2C_DO_SEND_ADR_WRITE *****************
  7903 ;; Defined at:
  7904 ;;		line 347 in file "mcc_generated_files/i2c_master.c"
  7905 ;; Parameters:    Size  Location     Type
  7906 ;;		None
  7907 ;; Auto vars:     Size  Location     Type
  7908 ;;		None
  7909 ;; Return value:  Size  Location     Type
  7910 ;;                  1    wreg      enum E12103
  7911 ;; Registers used:
  7912 ;;		wreg, status,2, status,0, pclath, cstack
  7913 ;; Tracked objects:
  7914 ;;		On entry : 0/0
  7915 ;;		On exit  : 0/0
  7916 ;;		Unchanged: 0/0
  7917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7922 ;;Total ram usage:        0 bytes
  7923 ;; Hardware stack levels used:    1
  7924 ;; Hardware stack levels required when called:   13
  7925 ;; This function calls:
  7926 ;;		_I2C_MasterSendTxData
  7927 ;; This function is called by:
  7928 ;;		i1_I2C_MasterFsm
  7929 ;;		_I2C_MasterFsm
  7930 ;; This function uses a non-reentrant model
  7931 ;;
  7932                           
  7933                           
  7934                           ;psect for function _I2C_DO_SEND_ADR_WRITE
  7935  0FC6                     _I2C_DO_SEND_ADR_WRITE:	
  7936                           
  7937                           ;Skip over the trampoline to the duplicate function for level 1
  7938  0FC6  1C7E               	btfss	126,0
  7939  0FC7  2FCA               	goto	l3994
  7940  0FC8  318F  2F2D         	ljmp	i1l2696
  7941  0FCA                     _I2C_DO_SEND_ADR_WRITE$intlevel0:	
  7942  0FCA                     l3994:	
  7943                           ;incstack = 0
  7944 ;; hardware stack exceeded
  7945                           ; Regs used in _I2C_DO_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
  7946                           
  7947                           
  7948                           ;i2c_master.c: 349: I2C_Status.addressNackCheck = 1;
  7949  0FCA  0021               	movlb	1	; select bank1
  7950  0FCB  143C               	bsf	(_I2C_Status^(0+128)+28),0
  7951                           
  7952                           ;i2c_master.c: 350: I2C_MasterSendTxData(I2C_Status.address << 1);
  7953  0FCC  3536               	lslf	(_I2C_Status^(0+128)+22),w
  7954  0FCD  318F  2703         	fcall	_I2C_MasterSendTxData
  7955                           
  7956                           ;i2c_master.c: 351: return I2C_TX;
  7957  0FCF  3003               	movlw	3
  7958  0FD0  0008               	return
  7959  0FD1                     __end_of_I2C_DO_SEND_ADR_WRITE:	
  7960                           
  7961                           	psect	text39
  7962  07DF                     __ptext39:	
  7963 ;; *************** function _I2C_DO_SEND_ADR_READ *****************
  7964 ;; Defined at:
  7965 ;;		line 340 in file "mcc_generated_files/i2c_master.c"
  7966 ;; Parameters:    Size  Location     Type
  7967 ;;		None
  7968 ;; Auto vars:     Size  Location     Type
  7969 ;;		None
  7970 ;; Return value:  Size  Location     Type
  7971 ;;                  1    wreg      enum E12103
  7972 ;; Registers used:
  7973 ;;		wreg, status,2, status,0, pclath, cstack
  7974 ;; Tracked objects:
  7975 ;;		On entry : 0/0
  7976 ;;		On exit  : 0/0
  7977 ;;		Unchanged: 0/0
  7978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7983 ;;Total ram usage:        0 bytes
  7984 ;; Hardware stack levels used:    1
  7985 ;; Hardware stack levels required when called:   13
  7986 ;; This function calls:
  7987 ;;		_I2C_MasterSendTxData
  7988 ;; This function is called by:
  7989 ;;		i1_I2C_MasterFsm
  7990 ;;		_I2C_MasterFsm
  7991 ;; This function uses a non-reentrant model
  7992 ;;
  7993                           
  7994                           
  7995                           ;psect for function _I2C_DO_SEND_ADR_READ
  7996  07DF                     _I2C_DO_SEND_ADR_READ:	
  7997                           
  7998                           ;Skip over the trampoline to the duplicate function for level 1
  7999  07DF  1C7E               	btfss	126,0
  8000  07E0  2FE3               	goto	l3986
  8001  07E1  318F  2F43         	ljmp	i1l2688
  8002  07E3                     _I2C_DO_SEND_ADR_READ$intlevel0:	
  8003  07E3                     l3986:	
  8004                           ;incstack = 0
  8005 ;; hardware stack exceeded
  8006                           ; Regs used in _I2C_DO_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
  8007                           
  8008                           
  8009                           ;i2c_master.c: 342: I2C_Status.addressNackCheck = 1;
  8010  07E3  0021               	movlb	1	; select bank1
  8011  07E4  143C               	bsf	(_I2C_Status^(0+128)+28),0
  8012                           
  8013                           ;i2c_master.c: 343: I2C_MasterSendTxData(I2C_Status.address << 1 | 1);
  8014  07E5  1403               	setc
  8015  07E6  0D36               	rlf	(_I2C_Status^(0+128)+22),w
  8016  07E7  318F  2703         	fcall	_I2C_MasterSendTxData
  8017                           
  8018                           ;i2c_master.c: 344: return I2C_RCEN;
  8019  07E9  3005               	movlw	5
  8020  07EA  0008               	return
  8021  07EB                     __end_of_I2C_DO_SEND_ADR_READ:	
  8022                           
  8023                           	psect	text40
  8024  0F83                     __ptext40:	
  8025 ;; *************** function _I2C_DO_IDLE *****************
  8026 ;; Defined at:
  8027 ;;		line 333 in file "mcc_generated_files/i2c_master.c"
  8028 ;; Parameters:    Size  Location     Type
  8029 ;;		None
  8030 ;; Auto vars:     Size  Location     Type
  8031 ;;		None
  8032 ;; Return value:  Size  Location     Type
  8033 ;;                  1    wreg      enum E12103
  8034 ;; Registers used:
  8035 ;;		wreg, status,2
  8036 ;; Tracked objects:
  8037 ;;		On entry : 0/0
  8038 ;;		On exit  : 0/0
  8039 ;;		Unchanged: 0/0
  8040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8044 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8045 ;;Total ram usage:        0 bytes
  8046 ;; Hardware stack levels used:    1
  8047 ;; Hardware stack levels required when called:   12
  8048 ;; This function calls:
  8049 ;;		Nothing
  8050 ;; This function is called by:
  8051 ;;		i1_I2C_MasterFsm
  8052 ;;		_I2C_MasterFsm
  8053 ;; This function uses a non-reentrant model
  8054 ;;
  8055                           
  8056                           
  8057                           ;psect for function _I2C_DO_IDLE
  8058  0F83                     _I2C_DO_IDLE:	
  8059                           
  8060                           ;Skip over the trampoline to the duplicate function for level 1
  8061  0F83  1C7E               	btfss	126,0
  8062  0F84  2F87               	goto	l3978
  8063  0F85  318E  2EDC         	ljmp	i1l2680
  8064  0F87                     _I2C_DO_IDLE$intlevel0:	
  8065  0F87                     l3978:	
  8066                           ;incstack = 0
  8067 ;; hardware stack exceeded
  8068                           ; Regs used in _I2C_DO_IDLE: [wreg+status,2]
  8069                           
  8070                           
  8071                           ;i2c_master.c: 335: I2C_Status.busy = 0;
  8072  0F87  0021               	movlb	1	; select bank1
  8073  0F88  10BC               	bcf	(_I2C_Status^(0+128)+28),1
  8074                           
  8075                           ;i2c_master.c: 336: I2C_Status.error = I2C_NOERR;
  8076  0F89  01BB               	clrf	(_I2C_Status^(0+128)+27)
  8077                           
  8078                           ;i2c_master.c: 337: return I2C_RESET;
  8079  0F8A  300E               	movlw	14
  8080  0F8B  0008               	return
  8081  0F8C                     __end_of_I2C_DO_IDLE:	
  8082                           
  8083                           	psect	text41
  8084  04A8                     __ptext41:	
  8085 ;; *************** function _I2C_DO_TX_EMPTY *****************
  8086 ;; Defined at:
  8087 ;;		line 409 in file "mcc_generated_files/i2c_master.c"
  8088 ;; Parameters:    Size  Location     Type
  8089 ;;		None
  8090 ;; Auto vars:     Size  Location     Type
  8091 ;;		None
  8092 ;; Return value:  Size  Location     Type
  8093 ;;                  1    wreg      enum E12103
  8094 ;; Registers used:
  8095 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8096 ;; Tracked objects:
  8097 ;;		On entry : 0/0
  8098 ;;		On exit  : 0/0
  8099 ;;		Unchanged: 0/0
  8100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8103 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8104 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8105 ;;Total ram usage:        1 bytes
  8106 ;; Hardware stack levels used:    1
  8107 ;; Hardware stack levels required when called:   15
  8108 ;; This function calls:
  8109 ;;		Absolute function
  8110 ;;		_I2C_CallbackReturnReset
  8111 ;;		_I2C_CallbackReturnStop
  8112 ;;		_I2C_DO_SEND_RESTART
  8113 ;;		_I2C_DO_SEND_STOP
  8114 ;;		_I2C_MasterSetIrq
  8115 ;;		_rd1RegCompleteHandler
  8116 ;;		_rd2RegCompleteHandler
  8117 ;;		_rdBlkRegCompleteHandler
  8118 ;;		_wr1RegCompleteHandler
  8119 ;;		_wr2RegCompleteHandler
  8120 ;; This function is called by:
  8121 ;;		i1_I2C_MasterFsm
  8122 ;;		_I2C_MasterFsm
  8123 ;; This function uses a non-reentrant model
  8124 ;;
  8125                           
  8126                           
  8127                           ;psect for function _I2C_DO_TX_EMPTY
  8128  04A8                     _I2C_DO_TX_EMPTY:	
  8129                           
  8130                           ;Skip over the trampoline to the duplicate function for level 1
  8131  04A8  1C7E               	btfss	126,0
  8132  04A9  2CAC               	goto	l5712
  8133  04AA  3185  2D71         	ljmp	i1l5610
  8134  04AC                     _I2C_DO_TX_EMPTY$intlevel0:	
  8135  04AC                     l5712:	
  8136                           ;incstack = 0
  8137 ;; hardware stack exceeded
  8138                           ; Regs used in _I2C_DO_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8139                           
  8140                           
  8141                           ;i2c_master.c: 411: I2C_Status.bufferFree = 1;
  8142  04AC  0021               	movlb	1	; select bank1
  8143  04AD  15BC               	bsf	(_I2C_Status^(0+128)+28),3
  8144                           
  8145                           ;i2c_master.c: 412: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
  8146  04AE  2CB9               	goto	l5730
  8147  04AF                     l5714:	
  8148                           ;i2c_master.c: 413: {
  8149                           ;i2c_master.c: 414: case I2C_RESTART_READ:
  8150                           
  8151                           
  8152                           ;i2c_master.c: 415: case I2C_RESTART_WRITE:
  8153                           ;i2c_master.c: 416: return I2C_DO_SEND_RESTART();
  8154  04AF  318F  275B         	fcall	_I2C_DO_SEND_RESTART
  8155  04B1  0008               	return
  8156  04B2                     l5718:	
  8157                           ;i2c_master.c: 417: case I2C_CONTINUE:
  8158                           
  8159                           
  8160                           ;i2c_master.c: 418: I2C_MasterSetIrq();
  8161  04B2  318E  268B         	fcall	_I2C_MasterSetIrq
  8162                           
  8163                           ;i2c_master.c: 419: return I2C_TX;
  8164  04B4  3003               	movlw	3
  8165  04B5  0008               	return
  8166  04B6                     l5724:	
  8167                           ;i2c_master.c: 421: case I2C_STOP:
  8168                           
  8169                           ;i2c_master.c: 420: default:
  8170                           
  8171                           
  8172                           ;i2c_master.c: 422: return I2C_DO_SEND_STOP();
  8173  04B6  318F  2763         	fcall	_I2C_DO_SEND_STOP
  8174                           
  8175                           ;i2c_master.c: 423: }
  8176  04B8  0008               	return
  8177  04B9                     l5730:	
  8178  04B9  0021               	movlb	1	; select bank1
  8179  04BA  082C               	movf	(low ((_I2C_Status| 0+12)))^(0+128),w
  8180  04BB  00C0               	movwf	??_I2C_DO_TX_EMPTY^(0+128)
  8181  04BC  0840               	movf	??_I2C_DO_TX_EMPTY^(0+128),w
  8182  04BD  0020               	movlb	0	; select bank0
  8183  04BE  00D3               	movwf	I2C_CallbackReturnReset@funPtr
  8184  04BF  0021               	movlb	1	; select bank1
  8185  04C0  0821               	movf	(_I2C_Status+1)^(0+128),w
  8186  04C1  008A               	movwf	10
  8187  04C2  0820               	movf	_I2C_Status^(0+128),w
  8188  04C3  000A               	callw
  8189  04C4  3184               	pagesel	$
  8190                           
  8191                           ; Switch size 1, requested type "space"
  8192                           ; Number of cases is 4, Range of values is 1 to 4
  8193                           ; switch strategies available:
  8194                           ; Name         Instructions Cycles
  8195                           ; simple_byte           13     7 (average)
  8196                           ; direct_byte           17     9 (fixed)
  8197                           ; jumptable            263     9 (fixed)
  8198                           ;	Chosen strategy is simple_byte
  8199  04C5  3A01               	xorlw	1	; case 1
  8200  04C6  1903               	skipnz
  8201  04C7  2CB6               	goto	l5724
  8202  04C8  3A03               	xorlw	3	; case 2
  8203  04C9  1903               	skipnz
  8204  04CA  2CAF               	goto	l5714
  8205  04CB  3A01               	xorlw	1	; case 3
  8206  04CC  1903               	skipnz
  8207  04CD  2CAF               	goto	l5714
  8208  04CE  3A07               	xorlw	7	; case 4
  8209  04CF  1903               	skipnz
  8210  04D0  2CB2               	goto	l5718
  8211  04D1  2CB6               	goto	l5724
  8212  04D2  0008               	return
  8213  04D3                     __end_of_I2C_DO_TX_EMPTY:	
  8214                           
  8215                           	psect	text42
  8216  0E8B                     __ptext42:	
  8217 ;; *************** function _I2C_MasterSetIrq *****************
  8218 ;; Defined at:
  8219 ;;		line 645 in file "mcc_generated_files/i2c_master.c"
  8220 ;; Parameters:    Size  Location     Type
  8221 ;;		None
  8222 ;; Auto vars:     Size  Location     Type
  8223 ;;		None
  8224 ;; Return value:  Size  Location     Type
  8225 ;;                  1    wreg      void 
  8226 ;; Registers used:
  8227 ;;		None
  8228 ;; Tracked objects:
  8229 ;;		On entry : 0/0
  8230 ;;		On exit  : 0/0
  8231 ;;		Unchanged: 0/0
  8232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8236 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8237 ;;Total ram usage:        0 bytes
  8238 ;; Hardware stack levels used:    1
  8239 ;; Hardware stack levels required when called:   12
  8240 ;; This function calls:
  8241 ;;		Nothing
  8242 ;; This function is called by:
  8243 ;;		_I2C_DO_TX_EMPTY
  8244 ;; This function uses a non-reentrant model
  8245 ;;
  8246                           
  8247                           
  8248                           ;psect for function _I2C_MasterSetIrq
  8249  0E8B                     _I2C_MasterSetIrq:	
  8250                           
  8251                           ;i2c_master.c: 647: PIR1bits.SSP1IF = 1;
  8252                           
  8253                           ;incstack = 0
  8254 ;; hardware stack exceeded
  8255                           ; Regs used in _I2C_MasterSetIrq: []
  8256  0E8B  0020               	movlb	0	; select bank0
  8257  0E8C  1590               	bsf	16,3	;volatile
  8258  0E8D  0008               	return
  8259  0E8E                     __end_of_I2C_MasterSetIrq:	
  8260                           
  8261                           	psect	text43
  8262  0F09                     __ptext43:	
  8263 ;; *************** function _I2C_MasterIsNack *****************
  8264 ;; Defined at:
  8265 ;;		line 598 in file "mcc_generated_files/i2c_master.c"
  8266 ;; Parameters:    Size  Location     Type
  8267 ;;		None
  8268 ;; Auto vars:     Size  Location     Type
  8269 ;;		None
  8270 ;; Return value:  Size  Location     Type
  8271 ;;                  1    wreg      unsigned char 
  8272 ;; Registers used:
  8273 ;;		wreg, status,2, status,0
  8274 ;; Tracked objects:
  8275 ;;		On entry : 0/0
  8276 ;;		On exit  : 0/0
  8277 ;;		Unchanged: 0/0
  8278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8282 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8283 ;;Total ram usage:        0 bytes
  8284 ;; Hardware stack levels used:    1
  8285 ;; Hardware stack levels required when called:   12
  8286 ;; This function calls:
  8287 ;;		Nothing
  8288 ;; This function is called by:
  8289 ;;		_I2C_MasterFsm
  8290 ;;		_I2C_DO_TX
  8291 ;; This function uses a non-reentrant model
  8292 ;;
  8293                           
  8294                           
  8295                           ;psect for function _I2C_MasterIsNack
  8296  0F09                     _I2C_MasterIsNack:	
  8297                           
  8298                           ;i2c_master.c: 600: return SSP1CON2bits.ACKSTAT;
  8299                           
  8300                           ;incstack = 0
  8301 ;; hardware stack exceeded
  8302                           ; Regs used in _I2C_MasterIsNack: [wreg+status,2+status,0]
  8303  0F09  0024               	movlb	4	; select bank4
  8304  0F0A  0E16               	swapf	22,w	;volatile
  8305  0F0B  0C89               	rrf	9,f
  8306  0F0C  0C89               	rrf	9,f
  8307  0F0D  3901               	andlw	1
  8308  0F0E  0008               	return
  8309  0F0F                     __end_of_I2C_MasterIsNack:	
  8310                           
  8311                           	psect	text44
  8312  0F03                     __ptext44:	
  8313 ;; *************** function _I2C_MasterSendTxData *****************
  8314 ;; Defined at:
  8315 ;;		line 568 in file "mcc_generated_files/i2c_master.c"
  8316 ;; Parameters:    Size  Location     Type
  8317 ;;  data            1    wreg     unsigned char 
  8318 ;; Auto vars:     Size  Location     Type
  8319 ;;  data            1   19[BANK0 ] unsigned char 
  8320 ;; Return value:  Size  Location     Type
  8321 ;;                  1    wreg      void 
  8322 ;; Registers used:
  8323 ;;		wreg
  8324 ;; Tracked objects:
  8325 ;;		On entry : 0/0
  8326 ;;		On exit  : 0/0
  8327 ;;		Unchanged: 0/0
  8328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8330 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8332 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8333 ;;Total ram usage:        1 bytes
  8334 ;; Hardware stack levels used:    1
  8335 ;; Hardware stack levels required when called:   12
  8336 ;; This function calls:
  8337 ;;		Nothing
  8338 ;; This function is called by:
  8339 ;;		_I2C_DO_SEND_ADR_READ
  8340 ;;		_I2C_DO_SEND_ADR_WRITE
  8341 ;;		_I2C_DO_TX
  8342 ;; This function uses a non-reentrant model
  8343 ;;
  8344                           
  8345                           
  8346                           ;psect for function _I2C_MasterSendTxData
  8347  0F03                     _I2C_MasterSendTxData:	
  8348                           
  8349                           ;incstack = 0
  8350 ;; hardware stack exceeded
  8351                           ; Regs used in _I2C_MasterSendTxData: [wreg]
  8352                           ;I2C_MasterSendTxData@data stored from wreg
  8353  0F03  0020               	movlb	0	; select bank0
  8354  0F04  00CD               	movwf	I2C_MasterSendTxData@data
  8355                           
  8356                           ;i2c_master.c: 570: SSP1BUF = data;
  8357  0F05  084D               	movf	I2C_MasterSendTxData@data,w
  8358  0F06  0024               	movlb	4	; select bank4
  8359  0F07  0091               	movwf	17	;volatile
  8360  0F08  0008               	return
  8361  0F09                     __end_of_I2C_MasterSendTxData:	
  8362                           
  8363                           	psect	text45
  8364  0ECB                     __ptext45:	
  8365 ;; *************** function _I2C_MasterSendAck *****************
  8366 ;; Defined at:
  8367 ;;		line 603 in file "mcc_generated_files/i2c_master.c"
  8368 ;; Parameters:    Size  Location     Type
  8369 ;;		None
  8370 ;; Auto vars:     Size  Location     Type
  8371 ;;		None
  8372 ;; Return value:  Size  Location     Type
  8373 ;;                  1    wreg      void 
  8374 ;; Registers used:
  8375 ;;		None
  8376 ;; Tracked objects:
  8377 ;;		On entry : 0/0
  8378 ;;		On exit  : 0/0
  8379 ;;		Unchanged: 0/0
  8380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8385 ;;Total ram usage:        0 bytes
  8386 ;; Hardware stack levels used:    1
  8387 ;; Hardware stack levels required when called:   12
  8388 ;; This function calls:
  8389 ;;		Nothing
  8390 ;; This function is called by:
  8391 ;;		_I2C_DO_RX
  8392 ;;		_I2C_DO_RX_ACK
  8393 ;; This function uses a non-reentrant model
  8394 ;;
  8395                           
  8396                           
  8397                           ;psect for function _I2C_MasterSendAck
  8398  0ECB                     _I2C_MasterSendAck:	
  8399                           
  8400                           ;i2c_master.c: 605: SSP1CON2bits.ACKDT = 0;
  8401                           
  8402                           ;incstack = 0
  8403 ;; hardware stack exceeded
  8404                           ; Regs used in _I2C_MasterSendAck: []
  8405  0ECB  0024               	movlb	4	; select bank4
  8406  0ECC  1296               	bcf	22,5	;volatile
  8407                           
  8408                           ;i2c_master.c: 606: SSP1CON2bits.ACKEN = 1;
  8409  0ECD  1616               	bsf	22,4	;volatile
  8410  0ECE  0008               	return
  8411  0ECF                     __end_of_I2C_MasterSendAck:	
  8412                           
  8413                           	psect	text46
  8414  0E88                     __ptext46:	
  8415 ;; *************** function _I2C_MasterGetRxData *****************
  8416 ;; Defined at:
  8417 ;;		line 563 in file "mcc_generated_files/i2c_master.c"
  8418 ;; Parameters:    Size  Location     Type
  8419 ;;		None
  8420 ;; Auto vars:     Size  Location     Type
  8421 ;;		None
  8422 ;; Return value:  Size  Location     Type
  8423 ;;                  1    wreg      unsigned char 
  8424 ;; Registers used:
  8425 ;;		wreg
  8426 ;; Tracked objects:
  8427 ;;		On entry : 0/0
  8428 ;;		On exit  : 0/0
  8429 ;;		Unchanged: 0/0
  8430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8434 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8435 ;;Total ram usage:        0 bytes
  8436 ;; Hardware stack levels used:    1
  8437 ;; Hardware stack levels required when called:   12
  8438 ;; This function calls:
  8439 ;;		Nothing
  8440 ;; This function is called by:
  8441 ;;		_I2C_DO_RX
  8442 ;; This function uses a non-reentrant model
  8443 ;;
  8444                           
  8445                           
  8446                           ;psect for function _I2C_MasterGetRxData
  8447  0E88                     _I2C_MasterGetRxData:	
  8448                           
  8449                           ;i2c_master.c: 565: return SSP1BUF;
  8450                           
  8451                           ;incstack = 0
  8452 ;; hardware stack exceeded
  8453                           ; Regs used in _I2C_MasterGetRxData: [wreg]
  8454  0E88  0024               	movlb	4	; select bank4
  8455  0E89  0811               	movf	17,w	;volatile
  8456  0E8A  0008               	return
  8457  0E8B                     __end_of_I2C_MasterGetRxData:	
  8458                           
  8459                           	psect	text47
  8460  0EC7                     __ptext47:	
  8461 ;; *************** function _I2C_MasterSendNack *****************
  8462 ;; Defined at:
  8463 ;;		line 609 in file "mcc_generated_files/i2c_master.c"
  8464 ;; Parameters:    Size  Location     Type
  8465 ;;		None
  8466 ;; Auto vars:     Size  Location     Type
  8467 ;;		None
  8468 ;; Return value:  Size  Location     Type
  8469 ;;                  1    wreg      void 
  8470 ;; Registers used:
  8471 ;;		None
  8472 ;; Tracked objects:
  8473 ;;		On entry : 0/0
  8474 ;;		On exit  : 0/0
  8475 ;;		Unchanged: 0/0
  8476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8481 ;;Total ram usage:        0 bytes
  8482 ;; Hardware stack levels used:    1
  8483 ;; Hardware stack levels required when called:   12
  8484 ;; This function calls:
  8485 ;;		Nothing
  8486 ;; This function is called by:
  8487 ;;		_I2C_DO_RX_NACK_STOP
  8488 ;;		_I2C_DO_RX_NACK_RESTART
  8489 ;; This function uses a non-reentrant model
  8490 ;;
  8491                           
  8492                           
  8493                           ;psect for function _I2C_MasterSendNack
  8494  0EC7                     _I2C_MasterSendNack:	
  8495                           
  8496                           ;i2c_master.c: 611: SSP1CON2bits.ACKDT = 1;
  8497                           
  8498                           ;incstack = 0
  8499 ;; hardware stack exceeded
  8500                           ; Regs used in _I2C_MasterSendNack: []
  8501  0EC7  0024               	movlb	4	; select bank4
  8502  0EC8  1696               	bsf	22,5	;volatile
  8503                           
  8504                           ;i2c_master.c: 612: SSP1CON2bits.ACKEN = 1;
  8505  0EC9  1616               	bsf	22,4	;volatile
  8506  0ECA  0008               	return
  8507  0ECB                     __end_of_I2C_MasterSendNack:	
  8508                           
  8509                           	psect	text48
  8510  0E85                     __ptext48:	
  8511 ;; *************** function _I2C_MasterStartRx *****************
  8512 ;; Defined at:
  8513 ;;		line 583 in file "mcc_generated_files/i2c_master.c"
  8514 ;; Parameters:    Size  Location     Type
  8515 ;;		None
  8516 ;; Auto vars:     Size  Location     Type
  8517 ;;		None
  8518 ;; Return value:  Size  Location     Type
  8519 ;;                  1    wreg      void 
  8520 ;; Registers used:
  8521 ;;		None
  8522 ;; Tracked objects:
  8523 ;;		On entry : 0/0
  8524 ;;		On exit  : 0/0
  8525 ;;		Unchanged: 0/0
  8526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8530 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8531 ;;Total ram usage:        0 bytes
  8532 ;; Hardware stack levels used:    1
  8533 ;; Hardware stack levels required when called:   12
  8534 ;; This function calls:
  8535 ;;		Nothing
  8536 ;; This function is called by:
  8537 ;;		_I2C_DO_RCEN
  8538 ;; This function uses a non-reentrant model
  8539 ;;
  8540                           
  8541                           
  8542                           ;psect for function _I2C_MasterStartRx
  8543  0E85                     _I2C_MasterStartRx:	
  8544                           
  8545                           ;i2c_master.c: 585: SSP1CON2bits.RCEN = 1;
  8546                           
  8547                           ;incstack = 0
  8548 ;; hardware stack exceeded
  8549                           ; Regs used in _I2C_MasterStartRx: []
  8550  0E85  0024               	movlb	4	; select bank4
  8551  0E86  1596               	bsf	22,3	;volatile
  8552  0E87  0008               	return
  8553  0E88                     __end_of_I2C_MasterStartRx:	
  8554                           
  8555                           	psect	text49
  8556  0EFD                     __ptext49:	
  8557 ;; *************** function _I2C_CallbackReturnReset *****************
  8558 ;; Defined at:
  8559 ;;		line 525 in file "mcc_generated_files/i2c_master.c"
  8560 ;; Parameters:    Size  Location     Type
  8561 ;;  funPtr          1   25[BANK0 ] PTR void 
  8562 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8563 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8564 ;; Auto vars:     Size  Location     Type
  8565 ;;		None
  8566 ;; Return value:  Size  Location     Type
  8567 ;;                  1    wreg      enum E97
  8568 ;; Registers used:
  8569 ;;		wreg
  8570 ;; Tracked objects:
  8571 ;;		On entry : 0/0
  8572 ;;		On exit  : 0/0
  8573 ;;		Unchanged: 0/0
  8574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8575 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8578 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8579 ;;Total ram usage:        1 bytes
  8580 ;; Hardware stack levels used:    1
  8581 ;; Hardware stack levels required when called:   12
  8582 ;; This function calls:
  8583 ;;		Nothing
  8584 ;; This function is called by:
  8585 ;;		_I2C_Open
  8586 ;;		i1_I2C_DO_TX
  8587 ;;		i1_I2C_DO_RX
  8588 ;;		i1_I2C_DO_TX_EMPTY
  8589 ;;		i1_I2C_DO_ADDRESS_NACK
  8590 ;;		_I2C_DO_TX
  8591 ;;		_I2C_DO_RX
  8592 ;;		_I2C_DO_TX_EMPTY
  8593 ;;		_I2C_DO_ADDRESS_NACK
  8594 ;;		_I2C_DO_RX_EMPTY
  8595 ;; This function uses a non-reentrant model
  8596 ;;
  8597                           
  8598                           
  8599                           ;psect for function _I2C_CallbackReturnReset
  8600  0EFD                     _I2C_CallbackReturnReset:	
  8601                           
  8602                           ;Skip over the trampoline to the duplicate function for level 1
  8603  0EFD  1C7E               	btfss	126,0
  8604  0EFE  2F01               	goto	l3962
  8605  0EFF  318E  2E53         	ljmp	i1l2646
  8606  0F01                     _I2C_CallbackReturnReset$intlevel0:	
  8607  0F01                     l3962:	
  8608                           ;incstack = 0
  8609 ;; hardware stack exceeded
  8610                           ; Regs used in _I2C_CallbackReturnReset: [wreg]
  8611                           
  8612                           
  8613                           ;i2c_master.c: 527: return I2C_RESET_LINK;
  8614  0F01  3005               	movlw	5
  8615  0F02  0008               	return
  8616  0F03                     __end_of_I2C_CallbackReturnReset:	
  8617                           
  8618                           	psect	text50
  8619  0EF7                     __ptext50:	
  8620 ;; *************** function _I2C_CallbackReturnStop *****************
  8621 ;; Defined at:
  8622 ;;		line 520 in file "mcc_generated_files/i2c_master.c"
  8623 ;; Parameters:    Size  Location     Type
  8624 ;;  funPtr          1   25[BANK0 ] PTR void 
  8625 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8626 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8627 ;; Auto vars:     Size  Location     Type
  8628 ;;		None
  8629 ;; Return value:  Size  Location     Type
  8630 ;;                  1    wreg      enum E97
  8631 ;; Registers used:
  8632 ;;		wreg
  8633 ;; Tracked objects:
  8634 ;;		On entry : 0/0
  8635 ;;		On exit  : 0/0
  8636 ;;		Unchanged: 0/0
  8637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8638 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8641 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8642 ;;Total ram usage:        1 bytes
  8643 ;; Hardware stack levels used:    1
  8644 ;; Hardware stack levels required when called:   12
  8645 ;; This function calls:
  8646 ;;		Nothing
  8647 ;; This function is called by:
  8648 ;;		_I2C_Open
  8649 ;;		_I2C_SetCallback
  8650 ;;		i1_I2C_DO_TX
  8651 ;;		i1_I2C_DO_RX
  8652 ;;		i1_I2C_DO_TX_EMPTY
  8653 ;;		i1_I2C_DO_ADDRESS_NACK
  8654 ;;		_I2C_DO_TX
  8655 ;;		_I2C_DO_RX
  8656 ;;		_I2C_DO_TX_EMPTY
  8657 ;;		_I2C_DO_ADDRESS_NACK
  8658 ;;		_I2C_DO_RX_EMPTY
  8659 ;; This function uses a non-reentrant model
  8660 ;;
  8661                           
  8662                           
  8663                           ;psect for function _I2C_CallbackReturnStop
  8664  0EF7                     _I2C_CallbackReturnStop:	
  8665                           
  8666                           ;Skip over the trampoline to the duplicate function for level 1
  8667  0EF7  1C7E               	btfss	126,0
  8668  0EF8  2EFB               	goto	l3958
  8669  0EF9  318E  2E51         	ljmp	i1l2642
  8670  0EFB                     _I2C_CallbackReturnStop$intlevel0:	
  8671  0EFB                     l3958:	
  8672                           ;incstack = 0
  8673 ;; hardware stack exceeded
  8674                           ; Regs used in _I2C_CallbackReturnStop: [wreg]
  8675                           
  8676                           
  8677                           ;i2c_master.c: 522: return I2C_STOP;
  8678  0EFB  3001               	movlw	1
  8679  0EFC  0008               	return
  8680  0EFD                     __end_of_I2C_CallbackReturnStop:	
  8681                           
  8682                           	psect	text51
  8683  0639                     __ptext51:	
  8684 ;; *************** function _rdBlkRegCompleteHandler *****************
  8685 ;; Defined at:
  8686 ;;		line 170 in file "mcc_generated_files/examples/i2c_master_example.c"
  8687 ;; Parameters:    Size  Location     Type
  8688 ;;  ptr             1   25[BANK0 ] PTR void 
  8689 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8690 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8691 ;; Auto vars:     Size  Location     Type
  8692 ;;		None
  8693 ;; Return value:  Size  Location     Type
  8694 ;;                  1    wreg      enum E97
  8695 ;; Registers used:
  8696 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8697 ;; Tracked objects:
  8698 ;;		On entry : 0/0
  8699 ;;		On exit  : 0/0
  8700 ;;		Unchanged: 0/0
  8701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8702 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8705 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8706 ;;Total ram usage:        1 bytes
  8707 ;; Hardware stack levels used:    1
  8708 ;; Hardware stack levels required when called:   14
  8709 ;; This function calls:
  8710 ;;		_I2C_SetBuffer
  8711 ;;		_I2C_SetDataCompleteCallback
  8712 ;; This function is called by:
  8713 ;;		_I2C_ReadDataBlock
  8714 ;;		i1_I2C_DO_TX
  8715 ;;		i1_I2C_DO_RX
  8716 ;;		i1_I2C_DO_TX_EMPTY
  8717 ;;		i1_I2C_DO_ADDRESS_NACK
  8718 ;;		_I2C_DO_TX
  8719 ;;		_I2C_DO_RX
  8720 ;;		_I2C_DO_TX_EMPTY
  8721 ;;		_I2C_DO_ADDRESS_NACK
  8722 ;;		_I2C_DO_RX_EMPTY
  8723 ;; This function uses a non-reentrant model
  8724 ;;
  8725                           
  8726                           
  8727                           ;psect for function _rdBlkRegCompleteHandler
  8728  0639                     _rdBlkRegCompleteHandler:	
  8729                           
  8730                           ;Skip over the trampoline to the duplicate function for level 1
  8731  0639  1C7E               	btfss	126,0
  8732  063A  2E3D               	goto	l3900
  8733  063B  3186  2E89         	ljmp	i1l2600
  8734  063D                     _rdBlkRegCompleteHandler$intlevel0:	
  8735  063D                     l3900:	
  8736                           ;incstack = 0
  8737 ;; hardware stack exceeded
  8738                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  8739                           
  8740                           
  8741                           ;i2c_master_example.c: 172: I2C_SetBuffer(((i2c_buffer_t *)ptr)->data,((i2c_buffer_t*)pt
      +                          r)->len);
  8742  063D  0020               	movlb	0	; select bank0
  8743  063E  0853               	movf	rdBlkRegCompleteHandler@ptr,w
  8744  063F  0086               	movwf	6
  8745  0640  0187               	clrf	7
  8746  0641  3F40               	moviw [0]fsr1
  8747  0642  00CD               	movwf	I2C_SetBuffer@bufferSize
  8748  0643  3F41               	moviw [1]fsr1
  8749  0644  00CE               	movwf	I2C_SetBuffer@bufferSize+1
  8750  0645  0853               	movf	rdBlkRegCompleteHandler@ptr,w
  8751  0646  3E02               	addlw	2
  8752  0647  0086               	movwf	6
  8753  0648  0187               	clrf	7
  8754  0649  0801               	movf	1,w
  8755  064A  3187  273A  3186   	fcall	_I2C_SetBuffer
  8756                           
  8757                           ;i2c_master_example.c: 173: I2C_SetDataCompleteCallback((0),(0));
  8758  064D  3000               	movlw	0
  8759  064E  0021               	movlb	1	; select bank1
  8760  064F  00BD               	movwf	I2C_SetDataCompleteCallback@cb^(0+128)
  8761  0650  00BE               	movwf	(I2C_SetDataCompleteCallback@cb+1)^(0+128)
  8762  0651  01BF               	clrf	I2C_SetDataCompleteCallback@ptr^(0+128)
  8763  0652  3187  2773         	fcall	_I2C_SetDataCompleteCallback
  8764                           
  8765                           ;i2c_master_example.c: 174: return I2C_RESTART_READ;
  8766  0654  3002               	movlw	2
  8767  0655  0008               	return
  8768  0656                     __end_of_rdBlkRegCompleteHandler:	
  8769                           
  8770                           	psect	text52
  8771  06B7                     __ptext52:	
  8772 ;; *************** function _wr1RegCompleteHandler *****************
  8773 ;; Defined at:
  8774 ;;		line 156 in file "mcc_generated_files/examples/i2c_master_example.c"
  8775 ;; Parameters:    Size  Location     Type
  8776 ;;  ptr             1   25[BANK0 ] PTR void 
  8777 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8778 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8779 ;; Auto vars:     Size  Location     Type
  8780 ;;		None
  8781 ;; Return value:  Size  Location     Type
  8782 ;;                  1    wreg      enum E97
  8783 ;; Registers used:
  8784 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8785 ;; Tracked objects:
  8786 ;;		On entry : 0/0
  8787 ;;		On exit  : 0/0
  8788 ;;		Unchanged: 0/0
  8789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8790 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8793 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8794 ;;Total ram usage:        1 bytes
  8795 ;; Hardware stack levels used:    1
  8796 ;; Hardware stack levels required when called:   14
  8797 ;; This function calls:
  8798 ;;		_I2C_SetBuffer
  8799 ;;		_I2C_SetDataCompleteCallback
  8800 ;; This function is called by:
  8801 ;;		_I2C_Write1ByteRegister
  8802 ;;		i1_I2C_DO_TX
  8803 ;;		i1_I2C_DO_RX
  8804 ;;		i1_I2C_DO_TX_EMPTY
  8805 ;;		i1_I2C_DO_ADDRESS_NACK
  8806 ;;		_I2C_DO_TX
  8807 ;;		_I2C_DO_RX
  8808 ;;		_I2C_DO_TX_EMPTY
  8809 ;;		_I2C_DO_ADDRESS_NACK
  8810 ;;		_I2C_DO_RX_EMPTY
  8811 ;; This function uses a non-reentrant model
  8812 ;;
  8813                           
  8814                           
  8815                           ;psect for function _wr1RegCompleteHandler
  8816  06B7                     _wr1RegCompleteHandler:	
  8817                           
  8818                           ;Skip over the trampoline to the duplicate function for level 1
  8819  06B7  1C7E               	btfss	126,0
  8820  06B8  2EBB               	goto	l3884
  8821  06B9  3187  2F85         	ljmp	i1l2584
  8822  06BB                     _wr1RegCompleteHandler$intlevel0:	
  8823  06BB                     l3884:	
  8824                           ;incstack = 0
  8825 ;; hardware stack exceeded
  8826                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8827                           
  8828                           
  8829                           ;i2c_master_example.c: 158: I2C_SetBuffer(ptr,1);
  8830  06BB  3001               	movlw	1
  8831  06BC  0020               	movlb	0	; select bank0
  8832  06BD  00CD               	movwf	I2C_SetBuffer@bufferSize
  8833  06BE  3000               	movlw	0
  8834  06BF  00CE               	movwf	I2C_SetBuffer@bufferSize+1
  8835  06C0  0853               	movf	wr1RegCompleteHandler@ptr,w
  8836  06C1  3187  273A  3186   	fcall	_I2C_SetBuffer
  8837                           
  8838                           ;i2c_master_example.c: 159: I2C_SetDataCompleteCallback((0),(0));
  8839  06C4  3000               	movlw	0
  8840  06C5  0021               	movlb	1	; select bank1
  8841  06C6  00BD               	movwf	I2C_SetDataCompleteCallback@cb^(0+128)
  8842  06C7  00BE               	movwf	(I2C_SetDataCompleteCallback@cb+1)^(0+128)
  8843  06C8  01BF               	clrf	I2C_SetDataCompleteCallback@ptr^(0+128)
  8844  06C9  3187  2773         	fcall	_I2C_SetDataCompleteCallback
  8845                           
  8846                           ;i2c_master_example.c: 160: return I2C_CONTINUE;
  8847  06CB  3004               	movlw	4
  8848  06CC  0008               	return
  8849  06CD                     __end_of_wr1RegCompleteHandler:	
  8850                           
  8851                           	psect	text53
  8852  06CD                     __ptext53:	
  8853 ;; *************** function _rd2RegCompleteHandler *****************
  8854 ;; Defined at:
  8855 ;;		line 149 in file "mcc_generated_files/examples/i2c_master_example.c"
  8856 ;; Parameters:    Size  Location     Type
  8857 ;;  ptr             1   25[BANK0 ] PTR void 
  8858 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8859 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8860 ;; Auto vars:     Size  Location     Type
  8861 ;;		None
  8862 ;; Return value:  Size  Location     Type
  8863 ;;                  1    wreg      enum E97
  8864 ;; Registers used:
  8865 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8866 ;; Tracked objects:
  8867 ;;		On entry : 0/0
  8868 ;;		On exit  : 0/0
  8869 ;;		Unchanged: 0/0
  8870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8871 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8874 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8875 ;;Total ram usage:        1 bytes
  8876 ;; Hardware stack levels used:    1
  8877 ;; Hardware stack levels required when called:   14
  8878 ;; This function calls:
  8879 ;;		_I2C_SetBuffer
  8880 ;;		_I2C_SetDataCompleteCallback
  8881 ;; This function is called by:
  8882 ;;		i1_I2C_DO_TX
  8883 ;;		i1_I2C_DO_RX
  8884 ;;		i1_I2C_DO_TX_EMPTY
  8885 ;;		i1_I2C_DO_ADDRESS_NACK
  8886 ;;		_I2C_DO_TX
  8887 ;;		_I2C_DO_RX
  8888 ;;		_I2C_DO_TX_EMPTY
  8889 ;;		_I2C_DO_ADDRESS_NACK
  8890 ;;		_I2C_DO_RX_EMPTY
  8891 ;; This function uses a non-reentrant model
  8892 ;;
  8893                           
  8894                           
  8895                           ;psect for function _rd2RegCompleteHandler
  8896  06CD                     _rd2RegCompleteHandler:	
  8897                           
  8898                           ;Skip over the trampoline to the duplicate function for level 1
  8899  06CD  1C7E               	btfss	126,0
  8900  06CE  2ED1               	goto	l3876
  8901  06CF  3187  2F95         	ljmp	i1l2576
  8902  06D1                     _rd2RegCompleteHandler$intlevel0:	
  8903  06D1                     l3876:	
  8904                           ;incstack = 0
  8905 ;; hardware stack exceeded
  8906                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8907                           
  8908                           
  8909                           ;i2c_master_example.c: 151: I2C_SetBuffer(ptr,2);
  8910  06D1  3002               	movlw	2
  8911  06D2  0020               	movlb	0	; select bank0
  8912  06D3  00CD               	movwf	I2C_SetBuffer@bufferSize
  8913  06D4  3000               	movlw	0
  8914  06D5  00CE               	movwf	I2C_SetBuffer@bufferSize+1
  8915  06D6  0853               	movf	rd2RegCompleteHandler@ptr,w
  8916  06D7  3187  273A  3186   	fcall	_I2C_SetBuffer
  8917                           
  8918                           ;i2c_master_example.c: 152: I2C_SetDataCompleteCallback((0),(0));
  8919  06DA  3000               	movlw	0
  8920  06DB  0021               	movlb	1	; select bank1
  8921  06DC  00BD               	movwf	I2C_SetDataCompleteCallback@cb^(0+128)
  8922  06DD  00BE               	movwf	(I2C_SetDataCompleteCallback@cb+1)^(0+128)
  8923  06DE  01BF               	clrf	I2C_SetDataCompleteCallback@ptr^(0+128)
  8924  06DF  3187  2773         	fcall	_I2C_SetDataCompleteCallback
  8925                           
  8926                           ;i2c_master_example.c: 153: return I2C_RESTART_READ;
  8927  06E1  3002               	movlw	2
  8928  06E2  0008               	return
  8929  06E3                     __end_of_rd2RegCompleteHandler:	
  8930                           
  8931                           	psect	text54
  8932  06E3                     __ptext54:	
  8933 ;; *************** function _rd1RegCompleteHandler *****************
  8934 ;; Defined at:
  8935 ;;		line 142 in file "mcc_generated_files/examples/i2c_master_example.c"
  8936 ;; Parameters:    Size  Location     Type
  8937 ;;  ptr             1   25[BANK0 ] PTR void 
  8938 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  8939 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  8940 ;; Auto vars:     Size  Location     Type
  8941 ;;		None
  8942 ;; Return value:  Size  Location     Type
  8943 ;;                  1    wreg      enum E97
  8944 ;; Registers used:
  8945 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8946 ;; Tracked objects:
  8947 ;;		On entry : 0/0
  8948 ;;		On exit  : 0/0
  8949 ;;		Unchanged: 0/0
  8950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8951 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8954 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8955 ;;Total ram usage:        1 bytes
  8956 ;; Hardware stack levels used:    1
  8957 ;; Hardware stack levels required when called:   14
  8958 ;; This function calls:
  8959 ;;		_I2C_SetBuffer
  8960 ;;		_I2C_SetDataCompleteCallback
  8961 ;; This function is called by:
  8962 ;;		_I2C_Read1ByteRegister
  8963 ;;		i1_I2C_DO_TX
  8964 ;;		i1_I2C_DO_RX
  8965 ;;		i1_I2C_DO_TX_EMPTY
  8966 ;;		i1_I2C_DO_ADDRESS_NACK
  8967 ;;		_I2C_DO_TX
  8968 ;;		_I2C_DO_RX
  8969 ;;		_I2C_DO_TX_EMPTY
  8970 ;;		_I2C_DO_ADDRESS_NACK
  8971 ;;		_I2C_DO_RX_EMPTY
  8972 ;; This function uses a non-reentrant model
  8973 ;;
  8974                           
  8975                           
  8976                           ;psect for function _rd1RegCompleteHandler
  8977  06E3                     _rd1RegCompleteHandler:	
  8978                           
  8979                           ;Skip over the trampoline to the duplicate function for level 1
  8980  06E3  1C7E               	btfss	126,0
  8981  06E4  2EE7               	goto	l3868
  8982  06E5  3187  2FA5         	ljmp	i1l2568
  8983  06E7                     _rd1RegCompleteHandler$intlevel0:	
  8984  06E7                     l3868:	
  8985                           ;incstack = 0
  8986 ;; hardware stack exceeded
  8987                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8988                           
  8989                           
  8990                           ;i2c_master_example.c: 144: I2C_SetBuffer(ptr,1);
  8991  06E7  3001               	movlw	1
  8992  06E8  0020               	movlb	0	; select bank0
  8993  06E9  00CD               	movwf	I2C_SetBuffer@bufferSize
  8994  06EA  3000               	movlw	0
  8995  06EB  00CE               	movwf	I2C_SetBuffer@bufferSize+1
  8996  06EC  0853               	movf	rd1RegCompleteHandler@ptr,w
  8997  06ED  3187  273A  3186   	fcall	_I2C_SetBuffer
  8998                           
  8999                           ;i2c_master_example.c: 145: I2C_SetDataCompleteCallback((0),(0));
  9000  06F0  3000               	movlw	0
  9001  06F1  0021               	movlb	1	; select bank1
  9002  06F2  00BD               	movwf	I2C_SetDataCompleteCallback@cb^(0+128)
  9003  06F3  00BE               	movwf	(I2C_SetDataCompleteCallback@cb+1)^(0+128)
  9004  06F4  01BF               	clrf	I2C_SetDataCompleteCallback@ptr^(0+128)
  9005  06F5  3187  2773         	fcall	_I2C_SetDataCompleteCallback
  9006                           
  9007                           ;i2c_master_example.c: 146: return I2C_RESTART_READ;
  9008  06F7  3002               	movlw	2
  9009  06F8  0008               	return
  9010  06F9                     __end_of_rd1RegCompleteHandler:	
  9011                           
  9012                           	psect	text55
  9013  06F9                     __ptext55:	
  9014 ;; *************** function _wr2RegCompleteHandler *****************
  9015 ;; Defined at:
  9016 ;;		line 163 in file "mcc_generated_files/examples/i2c_master_example.c"
  9017 ;; Parameters:    Size  Location     Type
  9018 ;;  ptr             1   25[BANK0 ] PTR void 
  9019 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  9020 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  9021 ;; Auto vars:     Size  Location     Type
  9022 ;;		None
  9023 ;; Return value:  Size  Location     Type
  9024 ;;                  1    wreg      enum E97
  9025 ;; Registers used:
  9026 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9027 ;; Tracked objects:
  9028 ;;		On entry : 0/0
  9029 ;;		On exit  : 0/0
  9030 ;;		Unchanged: 0/0
  9031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9032 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9035 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9036 ;;Total ram usage:        1 bytes
  9037 ;; Hardware stack levels used:    1
  9038 ;; Hardware stack levels required when called:   14
  9039 ;; This function calls:
  9040 ;;		_I2C_SetBuffer
  9041 ;;		_I2C_SetDataCompleteCallback
  9042 ;; This function is called by:
  9043 ;;		_I2C_Write2ByteRegister
  9044 ;;		i1_I2C_DO_TX
  9045 ;;		i1_I2C_DO_RX
  9046 ;;		i1_I2C_DO_TX_EMPTY
  9047 ;;		i1_I2C_DO_ADDRESS_NACK
  9048 ;;		_I2C_DO_TX
  9049 ;;		_I2C_DO_RX
  9050 ;;		_I2C_DO_TX_EMPTY
  9051 ;;		_I2C_DO_ADDRESS_NACK
  9052 ;;		_I2C_DO_RX_EMPTY
  9053 ;; This function uses a non-reentrant model
  9054 ;;
  9055                           
  9056                           
  9057                           ;psect for function _wr2RegCompleteHandler
  9058  06F9                     _wr2RegCompleteHandler:	
  9059                           
  9060                           ;Skip over the trampoline to the duplicate function for level 1
  9061  06F9  1C7E               	btfss	126,0
  9062  06FA  2EFD               	goto	l3892
  9063  06FB  3187  2FB5         	ljmp	i1l2592
  9064  06FD                     _wr2RegCompleteHandler$intlevel0:	
  9065  06FD                     l3892:	
  9066                           ;incstack = 0
  9067 ;; hardware stack exceeded
  9068                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9069                           
  9070                           
  9071                           ;i2c_master_example.c: 165: I2C_SetBuffer(ptr,2);
  9072  06FD  3002               	movlw	2
  9073  06FE  0020               	movlb	0	; select bank0
  9074  06FF  00CD               	movwf	I2C_SetBuffer@bufferSize
  9075  0700  3000               	movlw	0
  9076  0701  00CE               	movwf	I2C_SetBuffer@bufferSize+1
  9077  0702  0853               	movf	wr2RegCompleteHandler@ptr,w
  9078  0703  3187  273A  3186   	fcall	_I2C_SetBuffer
  9079                           
  9080                           ;i2c_master_example.c: 166: I2C_SetDataCompleteCallback((0),(0));
  9081  0706  3000               	movlw	0
  9082  0707  0021               	movlb	1	; select bank1
  9083  0708  00BD               	movwf	I2C_SetDataCompleteCallback@cb^(0+128)
  9084  0709  00BE               	movwf	(I2C_SetDataCompleteCallback@cb+1)^(0+128)
  9085  070A  01BF               	clrf	I2C_SetDataCompleteCallback@ptr^(0+128)
  9086  070B  3187  2773         	fcall	_I2C_SetDataCompleteCallback
  9087                           
  9088                           ;i2c_master_example.c: 167: return I2C_CONTINUE;
  9089  070D  3004               	movlw	4
  9090  070E  0008               	return
  9091  070F                     __end_of_wr2RegCompleteHandler:	
  9092                           
  9093                           	psect	text56
  9094  0773                     __ptext56:	
  9095 ;; *************** function _I2C_SetDataCompleteCallback *****************
  9096 ;; Defined at:
  9097 ;;		line 273 in file "mcc_generated_files/i2c_master.c"
  9098 ;; Parameters:    Size  Location     Type
  9099 ;;  cb              2    0[BANK1 ] PTR FTN(PTR void ,)enum 
  9100 ;;		 -> i1_wr1RegCompleteHandler(1), i1_rd2RegCompleteHandler(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), 
  9101 ;;		 -> wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), Absolute function(1), rd1RegCompleteHandler(1), 
  9102 ;;  ptr             1    2[BANK1 ] PTR void 
  9103 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  9104 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  9105 ;; Auto vars:     Size  Location     Type
  9106 ;;		None
  9107 ;; Return value:  Size  Location     Type
  9108 ;;                  1    wreg      void 
  9109 ;; Registers used:
  9110 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9111 ;; Tracked objects:
  9112 ;;		On entry : 0/0
  9113 ;;		On exit  : 0/0
  9114 ;;		Unchanged: 0/0
  9115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9116 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  9117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9118 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9119 ;;      Totals:         0       1       3       0       0       0       0       0       0       0       0       0       
      +0       0
  9120 ;;Total ram usage:        4 bytes
  9121 ;; Hardware stack levels used:    1
  9122 ;; Hardware stack levels required when called:   13
  9123 ;; This function calls:
  9124 ;;		_I2C_SetCallback
  9125 ;; This function is called by:
  9126 ;;		_I2C_Write1ByteRegister
  9127 ;;		_rd1RegCompleteHandler
  9128 ;;		_rd2RegCompleteHandler
  9129 ;;		_wr1RegCompleteHandler
  9130 ;;		_wr2RegCompleteHandler
  9131 ;;		_rdBlkRegCompleteHandler
  9132 ;;		_I2C_Read1ByteRegister
  9133 ;;		_I2C_Write2ByteRegister
  9134 ;;		_I2C_ReadDataBlock
  9135 ;; This function uses a non-reentrant model
  9136 ;;
  9137                           
  9138                           
  9139                           ;psect for function _I2C_SetDataCompleteCallback
  9140  0773                     _I2C_SetDataCompleteCallback:	
  9141                           
  9142                           ;i2c_master.c: 275: I2C_SetCallback(I2C_DATA_COMPLETE, cb, ptr);
  9143                           
  9144                           ;incstack = 0
  9145                           ; Regs used in _I2C_SetDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  9146  0773  0021               	movlb	1	; select bank1
  9147  0774  083E               	movf	(I2C_SetDataCompleteCallback@cb+1)^(0+128),w
  9148  0775  0020               	movlb	0	; select bank0
  9149  0776  00CE               	movwf	I2C_SetCallback@cb+1
  9150  0777  0021               	movlb	1	; select bank1
  9151  0778  083D               	movf	I2C_SetDataCompleteCallback@cb^(0+128),w
  9152  0779  0020               	movlb	0	; select bank0
  9153  077A  00CD               	movwf	I2C_SetCallback@cb
  9154  077B  0021               	movlb	1	; select bank1
  9155  077C  083F               	movf	I2C_SetDataCompleteCallback@ptr^(0+128),w
  9156  077D  0020               	movlb	0	; select bank0
  9157  077E  00D2               	movwf	??_I2C_SetDataCompleteCallback
  9158  077F  0852               	movf	??_I2C_SetDataCompleteCallback,w
  9159  0780  00CF               	movwf	I2C_SetCallback@ptr
  9160  0781  3000               	movlw	0
  9161  0782  3185  254C         	fcall	_I2C_SetCallback
  9162  0784  0008               	return
  9163  0785                     __end_of_I2C_SetDataCompleteCallback:	
  9164                           
  9165                           	psect	text57
  9166  054C                     __ptext57:	
  9167 ;; *************** function _I2C_SetCallback *****************
  9168 ;; Defined at:
  9169 ;;		line 298 in file "mcc_generated_files/i2c_master.c"
  9170 ;; Parameters:    Size  Location     Type
  9171 ;;  idx             1    wreg     enum E12121
  9172 ;;  cb              2   19[BANK0 ] PTR FTN(PTR void ,)enum 
  9173 ;;		 -> i1_wr1RegCompleteHandler(1), i1_rd2RegCompleteHandler(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), 
  9174 ;;		 -> wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), Absolute function(1), rd1RegCompleteHandler(1), 
  9175 ;;  ptr             1   21[BANK0 ] PTR void 
  9176 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  9177 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  9178 ;; Auto vars:     Size  Location     Type
  9179 ;;  idx             1   23[BANK0 ] enum E12121
  9180 ;; Return value:  Size  Location     Type
  9181 ;;                  1    wreg      void 
  9182 ;; Registers used:
  9183 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9184 ;; Tracked objects:
  9185 ;;		On entry : 0/0
  9186 ;;		On exit  : 0/0
  9187 ;;		Unchanged: 0/0
  9188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9189 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9190 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9191 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9192 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9193 ;;Total ram usage:        5 bytes
  9194 ;; Hardware stack levels used:    1
  9195 ;; Hardware stack levels required when called:   12
  9196 ;; This function calls:
  9197 ;;		Nothing
  9198 ;; This function is called by:
  9199 ;;		_I2C_SetDataCompleteCallback
  9200 ;;		_I2C_SetAddressNackCallback
  9201 ;;		_I2C_SetWriteCollisionCallback
  9202 ;;		_I2C_SetDataNackCallback
  9203 ;;		_I2C_SetTimeoutCallback
  9204 ;; This function uses a non-reentrant model
  9205 ;;
  9206                           
  9207                           
  9208                           ;psect for function _I2C_SetCallback
  9209  054C                     _I2C_SetCallback:	
  9210                           
  9211                           ;incstack = 0
  9212                           ; Regs used in _I2C_SetCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
  9213                           ;I2C_SetCallback@idx stored from wreg
  9214  054C  0020               	movlb	0	; select bank0
  9215  054D  00D1               	movwf	I2C_SetCallback@idx
  9216                           
  9217                           ;i2c_master.c: 300: if(cb)
  9218  054E  084D               	movf	I2C_SetCallback@cb,w
  9219  054F  044E               	iorwf	I2C_SetCallback@cb+1,w
  9220  0550  1903               	btfsc	3,2
  9221  0551  2D63               	goto	l3760
  9222                           
  9223                           ;i2c_master.c: 301: {
  9224                           ;i2c_master.c: 302: I2C_Status.callbackTable[idx] = cb;
  9225  0552  3551               	lslf	I2C_SetCallback@idx,w
  9226  0553  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
  9227  0554  0086               	movwf	6
  9228  0555  0187               	clrf	7
  9229  0556  084D               	movf	I2C_SetCallback@cb,w
  9230  0557  3FC0               	movwi [0]fsr1
  9231  0558  084E               	movf	I2C_SetCallback@cb+1,w
  9232  0559  3FC1               	movwi [1]fsr1
  9233                           
  9234                           ;i2c_master.c: 303: I2C_Status.callbackPayload[idx] = ptr;
  9235  055A  084F               	movf	I2C_SetCallback@ptr,w
  9236  055B  00D0               	movwf	??_I2C_SetCallback
  9237  055C  0851               	movf	I2C_SetCallback@idx,w
  9238  055D  3EAC               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
  9239  055E  0086               	movwf	6
  9240  055F  0187               	clrf	7
  9241  0560  0850               	movf	??_I2C_SetCallback,w
  9242  0561  0081               	movwf	1
  9243                           
  9244                           ;i2c_master.c: 304: }
  9245  0562  0008               	return
  9246  0563                     l3760:	
  9247                           
  9248                           ;i2c_master.c: 305: else
  9249                           ;i2c_master.c: 306: {
  9250                           ;i2c_master.c: 307: I2C_Status.callbackTable[idx] = I2C_CallbackReturnStop;
  9251  0563  3551               	lslf	I2C_SetCallback@idx,w
  9252  0564  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
  9253  0565  0086               	movwf	6
  9254  0566  0187               	clrf	7
  9255  0567  30F7               	movlw	low _I2C_CallbackReturnStop
  9256  0568  3FC0               	movwi [0]fsr1
  9257  0569  300E               	movlw	high _I2C_CallbackReturnStop
  9258  056A  3FC1               	movwi [1]fsr1
  9259                           
  9260                           ;i2c_master.c: 308: I2C_Status.callbackPayload[idx] = (0);
  9261  056B  0851               	movf	I2C_SetCallback@idx,w
  9262  056C  3EAC               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
  9263  056D  0086               	movwf	6
  9264  056E  0187               	clrf	7
  9265  056F  0181               	clrf	1
  9266  0570  0008               	return
  9267  0571                     __end_of_I2C_SetCallback:	
  9268                           
  9269                           	psect	text58
  9270  073A                     __ptext58:	
  9271 ;; *************** function _I2C_SetBuffer *****************
  9272 ;; Defined at:
  9273 ;;		line 263 in file "mcc_generated_files/i2c_master.c"
  9274 ;; Parameters:    Size  Location     Type
  9275 ;;  buffer          1    wreg     PTR void 
  9276 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
  9277 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
  9278 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
  9279 ;;  bufferSize      2   19[BANK0 ] unsigned int 
  9280 ;; Auto vars:     Size  Location     Type
  9281 ;;  buffer          1   22[BANK0 ] PTR void 
  9282 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
  9283 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
  9284 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
  9285 ;; Return value:  Size  Location     Type
  9286 ;;                  1    wreg      void 
  9287 ;; Registers used:
  9288 ;;		wreg
  9289 ;; Tracked objects:
  9290 ;;		On entry : 0/0
  9291 ;;		On exit  : 0/0
  9292 ;;		Unchanged: 0/0
  9293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9294 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9295 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9296 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9297 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9298 ;;Total ram usage:        4 bytes
  9299 ;; Hardware stack levels used:    1
  9300 ;; Hardware stack levels required when called:   12
  9301 ;; This function calls:
  9302 ;;		Nothing
  9303 ;; This function is called by:
  9304 ;;		_I2C_Write1ByteRegister
  9305 ;;		_rd1RegCompleteHandler
  9306 ;;		_rd2RegCompleteHandler
  9307 ;;		_wr1RegCompleteHandler
  9308 ;;		_wr2RegCompleteHandler
  9309 ;;		_rdBlkRegCompleteHandler
  9310 ;;		_I2C_Read1ByteRegister
  9311 ;;		_I2C_Write2ByteRegister
  9312 ;;		_I2C_WriteNBytes
  9313 ;;		_I2C_ReadNBytes
  9314 ;;		_I2C_ReadDataBlock
  9315 ;; This function uses a non-reentrant model
  9316 ;;
  9317                           
  9318                           
  9319                           ;psect for function _I2C_SetBuffer
  9320  073A                     _I2C_SetBuffer:	
  9321                           
  9322                           ;incstack = 0
  9323                           ; Regs used in _I2C_SetBuffer: [wreg]
  9324                           ;I2C_SetBuffer@buffer stored from wreg
  9325  073A  0020               	movlb	0	; select bank0
  9326  073B  00D0               	movwf	I2C_SetBuffer@buffer
  9327                           
  9328                           ;i2c_master.c: 265: if(I2C_Status.bufferFree)
  9329  073C  0021               	movlb	1	; select bank1
  9330  073D  1DBC               	btfss	(_I2C_Status^(0+128)+28),3
  9331  073E  0008               	return
  9332                           
  9333                           ;i2c_master.c: 266: {
  9334                           ;i2c_master.c: 267: I2C_Status.data_ptr = buffer;
  9335  073F  0020               	movlb	0	; select bank0
  9336  0740  0850               	movf	I2C_SetBuffer@buffer,w
  9337  0741  00CF               	movwf	??_I2C_SetBuffer
  9338  0742  084F               	movf	??_I2C_SetBuffer,w
  9339  0743  0021               	movlb	1	; select bank1
  9340  0744  00B7               	movwf	(low ((_I2C_Status| 0+23)))^(0+128)
  9341                           
  9342                           ;i2c_master.c: 268: I2C_Status.data_length = bufferSize;
  9343  0745  0020               	movlb	0	; select bank0
  9344  0746  084E               	movf	I2C_SetBuffer@bufferSize+1,w
  9345  0747  0021               	movlb	1	; select bank1
  9346  0748  00B9               	movwf	((_I2C_Status+1)^(0+128)+24)
  9347  0749  0020               	movlb	0	; select bank0
  9348  074A  084D               	movf	I2C_SetBuffer@bufferSize,w
  9349  074B  0021               	movlb	1	; select bank1
  9350  074C  00B8               	movwf	(_I2C_Status^(0+128)+24)
  9351                           
  9352                           ;i2c_master.c: 269: I2C_Status.bufferFree = 0;
  9353  074D  11BC               	bcf	(_I2C_Status^(0+128)+28),3
  9354  074E  0008               	return
  9355  074F                     __end_of_I2C_SetBuffer:	
  9356                           
  9357                           	psect	text59
  9358  0E82                     __ptext59:	
  9359 ;; *************** function _I2C_MasterStop *****************
  9360 ;; Defined at:
  9361 ;;		line 593 in file "mcc_generated_files/i2c_master.c"
  9362 ;; Parameters:    Size  Location     Type
  9363 ;;		None
  9364 ;; Auto vars:     Size  Location     Type
  9365 ;;		None
  9366 ;; Return value:  Size  Location     Type
  9367 ;;                  1    wreg      void 
  9368 ;; Registers used:
  9369 ;;		None
  9370 ;; Tracked objects:
  9371 ;;		On entry : 0/0
  9372 ;;		On exit  : 0/0
  9373 ;;		Unchanged: 0/0
  9374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9378 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9379 ;;Total ram usage:        0 bytes
  9380 ;; Hardware stack levels used:    1
  9381 ;; Hardware stack levels required when called:   12
  9382 ;; This function calls:
  9383 ;;		Nothing
  9384 ;; This function is called by:
  9385 ;;		_I2C_DO_SEND_STOP
  9386 ;; This function uses a non-reentrant model
  9387 ;;
  9388                           
  9389                           
  9390                           ;psect for function _I2C_MasterStop
  9391  0E82                     _I2C_MasterStop:	
  9392                           
  9393                           ;i2c_master.c: 595: SSP1CON2bits.PEN = 1;
  9394                           
  9395                           ;incstack = 0
  9396 ;; hardware stack exceeded
  9397                           ; Regs used in _I2C_MasterStop: []
  9398  0E82  0024               	movlb	4	; select bank4
  9399  0E83  1516               	bsf	22,2	;volatile
  9400  0E84  0008               	return
  9401  0E85                     __end_of_I2C_MasterStop:	
  9402                           
  9403                           	psect	text60
  9404  0E7F                     __ptext60:	
  9405 ;; *************** function _I2C_MasterEnableRestart *****************
  9406 ;; Defined at:
  9407 ;;		line 573 in file "mcc_generated_files/i2c_master.c"
  9408 ;; Parameters:    Size  Location     Type
  9409 ;;		None
  9410 ;; Auto vars:     Size  Location     Type
  9411 ;;		None
  9412 ;; Return value:  Size  Location     Type
  9413 ;;                  1    wreg      void 
  9414 ;; Registers used:
  9415 ;;		None
  9416 ;; Tracked objects:
  9417 ;;		On entry : 0/0
  9418 ;;		On exit  : 0/0
  9419 ;;		Unchanged: 0/0
  9420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9424 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9425 ;;Total ram usage:        0 bytes
  9426 ;; Hardware stack levels used:    1
  9427 ;; Hardware stack levels required when called:   12
  9428 ;; This function calls:
  9429 ;;		Nothing
  9430 ;; This function is called by:
  9431 ;;		_I2C_DO_SEND_RESTART_READ
  9432 ;;		_I2C_DO_SEND_RESTART_WRITE
  9433 ;;		_I2C_DO_SEND_RESTART
  9434 ;;		_I2C_DO_RX_EMPTY
  9435 ;; This function uses a non-reentrant model
  9436 ;;
  9437                           
  9438                           
  9439                           ;psect for function _I2C_MasterEnableRestart
  9440  0E7F                     _I2C_MasterEnableRestart:	
  9441                           
  9442                           ;i2c_master.c: 575: SSP1CON2bits.RSEN = 1;
  9443                           
  9444                           ;incstack = 0
  9445 ;; hardware stack exceeded
  9446                           ; Regs used in _I2C_MasterEnableRestart: []
  9447  0E7F  0024               	movlb	4	; select bank4
  9448  0E80  1496               	bsf	22,1	;volatile
  9449  0E81  0008               	return
  9450  0E82                     __end_of_I2C_MasterEnableRestart:	
  9451                           
  9452                           	psect	text61
  9453  0E7C                     __ptext61:	
  9454 ;; *************** function _I2C_MasterStart *****************
  9455 ;; Defined at:
  9456 ;;		line 588 in file "mcc_generated_files/i2c_master.c"
  9457 ;; Parameters:    Size  Location     Type
  9458 ;;		None
  9459 ;; Auto vars:     Size  Location     Type
  9460 ;;		None
  9461 ;; Return value:  Size  Location     Type
  9462 ;;                  1    wreg      void 
  9463 ;; Registers used:
  9464 ;;		None
  9465 ;; Tracked objects:
  9466 ;;		On entry : 0/0
  9467 ;;		On exit  : 0/0
  9468 ;;		Unchanged: 0/0
  9469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9473 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9474 ;;Total ram usage:        0 bytes
  9475 ;; Hardware stack levels used:    1
  9476 ;; Hardware stack levels required when called:   12
  9477 ;; This function calls:
  9478 ;;		Nothing
  9479 ;; This function is called by:
  9480 ;;		_I2C_MasterOperation
  9481 ;; This function uses a non-reentrant model
  9482 ;;
  9483                           
  9484                           
  9485                           ;psect for function _I2C_MasterStart
  9486  0E7C                     _I2C_MasterStart:	
  9487                           
  9488                           ;i2c_master.c: 590: SSP1CON2bits.SEN = 1;
  9489                           
  9490                           ;incstack = 0
  9491                           ; Regs used in _I2C_MasterStart: []
  9492  0E7C  0024               	movlb	4	; select bank4
  9493  0E7D  1416               	bsf	22,0	;volatile
  9494  0E7E  0008               	return
  9495  0E7F                     __end_of_I2C_MasterStart:	
  9496                           
  9497                           	psect	text62
  9498  05FD                     __ptext62:	
  9499 ;; *************** function _I2C_Close *****************
  9500 ;; Defined at:
  9501 ;;		line 209 in file "mcc_generated_files/i2c_master.c"
  9502 ;; Parameters:    Size  Location     Type
  9503 ;;		None
  9504 ;; Auto vars:     Size  Location     Type
  9505 ;;  returnValue     1   20[BANK0 ] enum E92
  9506 ;; Return value:  Size  Location     Type
  9507 ;;                  1    wreg      enum E92
  9508 ;; Registers used:
  9509 ;;		wreg, status,2, status,0, pclath, cstack
  9510 ;; Tracked objects:
  9511 ;;		On entry : 0/0
  9512 ;;		On exit  : 0/0
  9513 ;;		Unchanged: 0/0
  9514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9516 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9517 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9518 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9519 ;;Total ram usage:        2 bytes
  9520 ;; Hardware stack levels used:    1
  9521 ;; Hardware stack levels required when called:   13
  9522 ;; This function calls:
  9523 ;;		_I2C_MasterClearIrq
  9524 ;;		_I2C_MasterClose
  9525 ;;		_I2C_MasterDisableIrq
  9526 ;; This function is called by:
  9527 ;;		_I2C_Write1ByteRegister
  9528 ;;		_I2C_Read1ByteRegister
  9529 ;;		_I2C_Write2ByteRegister
  9530 ;;		_I2C_WriteNBytes
  9531 ;;		_I2C_ReadNBytes
  9532 ;;		_I2C_ReadDataBlock
  9533 ;; This function uses a non-reentrant model
  9534 ;;
  9535                           
  9536                           
  9537                           ;psect for function _I2C_Close
  9538  05FD                     _I2C_Close:	
  9539                           
  9540                           ;i2c_master.c: 211: i2c_error_t returnValue = I2C_BUSY;
  9541                           
  9542                           ;incstack = 0
  9543                           ; Regs used in _I2C_Close: [wreg+status,2+status,0+pclath+cstack]
  9544  05FD  0020               	movlb	0	; select bank0
  9545  05FE  01CE               	clrf	I2C_Close@returnValue
  9546  05FF  0ACE               	incf	I2C_Close@returnValue,f
  9547                           
  9548                           ;i2c_master.c: 212: if(!I2C_Status.busy)
  9549  0600  0021               	movlb	1	; select bank1
  9550  0601  18BC               	btfsc	(_I2C_Status^(0+128)+28),1
  9551  0602  2E18               	goto	l4290
  9552                           
  9553                           ;i2c_master.c: 213: {
  9554                           ;i2c_master.c: 214: I2C_Status.inUse = 0;
  9555  0603  113C               	bcf	(_I2C_Status^(0+128)+28),2
  9556                           
  9557                           ;i2c_master.c: 215: I2C_Status.address = 0xff;
  9558  0604  30FF               	movlw	255
  9559  0605  0020               	movlb	0	; select bank0
  9560  0606  00CD               	movwf	??_I2C_Close
  9561  0607  084D               	movf	??_I2C_Close,w
  9562  0608  0021               	movlb	1	; select bank1
  9563  0609  00B6               	movwf	(_I2C_Status^(0+128)+22)
  9564                           
  9565                           ;i2c_master.c: 216: I2C_MasterClearIrq();
  9566  060A  318E  2673  3185   	fcall	_I2C_MasterClearIrq
  9567                           
  9568                           ;i2c_master.c: 217: I2C_MasterDisableIrq();
  9569  060D  318E  2679  3185   	fcall	_I2C_MasterDisableIrq
  9570                           
  9571                           ;i2c_master.c: 218: I2C_MasterClose();
  9572  0610  318E  2676         	fcall	_I2C_MasterClose
  9573                           
  9574                           ;i2c_master.c: 219: returnValue = I2C_Status.error;
  9575  0612  0021               	movlb	1	; select bank1
  9576  0613  083B               	movf	(_I2C_Status^(0+128)+27),w
  9577  0614  0020               	movlb	0	; select bank0
  9578  0615  00CD               	movwf	??_I2C_Close
  9579  0616  084D               	movf	??_I2C_Close,w
  9580  0617  00CE               	movwf	I2C_Close@returnValue
  9581  0618                     l4290:	
  9582                           
  9583                           ;i2c_master.c: 220: }
  9584                           ;i2c_master.c: 221: return returnValue;
  9585  0618  0020               	movlb	0	; select bank0
  9586  0619  084E               	movf	I2C_Close@returnValue,w
  9587  061A  0008               	return
  9588  061B                     __end_of_I2C_Close:	
  9589                           
  9590                           	psect	text63
  9591  0E79                     __ptext63:	
  9592 ;; *************** function _I2C_MasterDisableIrq *****************
  9593 ;; Defined at:
  9594 ;;		line 635 in file "mcc_generated_files/i2c_master.c"
  9595 ;; Parameters:    Size  Location     Type
  9596 ;;		None
  9597 ;; Auto vars:     Size  Location     Type
  9598 ;;		None
  9599 ;; Return value:  Size  Location     Type
  9600 ;;                  1    wreg      void 
  9601 ;; Registers used:
  9602 ;;		None
  9603 ;; Tracked objects:
  9604 ;;		On entry : 0/0
  9605 ;;		On exit  : 0/0
  9606 ;;		Unchanged: 0/0
  9607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9612 ;;Total ram usage:        0 bytes
  9613 ;; Hardware stack levels used:    1
  9614 ;; Hardware stack levels required when called:   12
  9615 ;; This function calls:
  9616 ;;		Nothing
  9617 ;; This function is called by:
  9618 ;;		_I2C_Close
  9619 ;;		_I2C_SetTimeOut
  9620 ;; This function uses a non-reentrant model
  9621 ;;
  9622                           
  9623                           
  9624                           ;psect for function _I2C_MasterDisableIrq
  9625  0E79                     _I2C_MasterDisableIrq:	
  9626                           
  9627                           ;i2c_master.c: 637: PIE1bits.SSP1IE = 0;
  9628                           
  9629                           ;incstack = 0
  9630                           ; Regs used in _I2C_MasterDisableIrq: []
  9631  0E79  0021               	movlb	1	; select bank1
  9632  0E7A  1190               	bcf	16,3	;volatile
  9633  0E7B  0008               	return
  9634  0E7C                     __end_of_I2C_MasterDisableIrq:	
  9635                           
  9636                           	psect	text64
  9637  0E76                     __ptext64:	
  9638 ;; *************** function _I2C_MasterClose *****************
  9639 ;; Defined at:
  9640 ;;		line 557 in file "mcc_generated_files/i2c_master.c"
  9641 ;; Parameters:    Size  Location     Type
  9642 ;;		None
  9643 ;; Auto vars:     Size  Location     Type
  9644 ;;		None
  9645 ;; Return value:  Size  Location     Type
  9646 ;;                  1    wreg      void 
  9647 ;; Registers used:
  9648 ;;		None
  9649 ;; Tracked objects:
  9650 ;;		On entry : 0/0
  9651 ;;		On exit  : 0/0
  9652 ;;		Unchanged: 0/0
  9653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9657 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9658 ;;Total ram usage:        0 bytes
  9659 ;; Hardware stack levels used:    1
  9660 ;; Hardware stack levels required when called:   12
  9661 ;; This function calls:
  9662 ;;		Nothing
  9663 ;; This function is called by:
  9664 ;;		_I2C_Close
  9665 ;; This function uses a non-reentrant model
  9666 ;;
  9667                           
  9668                           
  9669                           ;psect for function _I2C_MasterClose
  9670  0E76                     _I2C_MasterClose:	
  9671                           
  9672                           ;i2c_master.c: 560: SSP1CON1bits.SSPEN = 0;
  9673                           
  9674                           ;incstack = 0
  9675                           ; Regs used in _I2C_MasterClose: []
  9676  0E76  0024               	movlb	4	; select bank4
  9677  0E77  1295               	bcf	21,5	;volatile
  9678  0E78  0008               	return
  9679  0E79                     __end_of_I2C_MasterClose:	
  9680                           
  9681                           	psect	text65
  9682  0E73                     __ptext65:	
  9683 ;; *************** function _I2C_MasterClearIrq *****************
  9684 ;; Defined at:
  9685 ;;		line 640 in file "mcc_generated_files/i2c_master.c"
  9686 ;; Parameters:    Size  Location     Type
  9687 ;;		None
  9688 ;; Auto vars:     Size  Location     Type
  9689 ;;		None
  9690 ;; Return value:  Size  Location     Type
  9691 ;;                  1    wreg      void 
  9692 ;; Registers used:
  9693 ;;		None
  9694 ;; Tracked objects:
  9695 ;;		On entry : 0/0
  9696 ;;		On exit  : 0/0
  9697 ;;		Unchanged: 0/0
  9698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9703 ;;Total ram usage:        0 bytes
  9704 ;; Hardware stack levels used:    1
  9705 ;; Hardware stack levels required when called:   12
  9706 ;; This function calls:
  9707 ;;		Nothing
  9708 ;; This function is called by:
  9709 ;;		_I2C_Open
  9710 ;;		_I2C_Close
  9711 ;;		_I2C_MasterFsm
  9712 ;; This function uses a non-reentrant model
  9713 ;;
  9714                           
  9715                           
  9716                           ;psect for function _I2C_MasterClearIrq
  9717  0E73                     _I2C_MasterClearIrq:	
  9718                           
  9719                           ;i2c_master.c: 642: PIR1bits.SSP1IF = 0;
  9720                           
  9721                           ;incstack = 0
  9722                           ; Regs used in _I2C_MasterClearIrq: []
  9723  0E73  0020               	movlb	0	; select bank0
  9724  0E74  1190               	bcf	16,3	;volatile
  9725  0E75  0008               	return
  9726  0E76                     __end_of_I2C_MasterClearIrq:	
  9727                           
  9728                           	psect	intentry
  9729  0004                     __pintentry:	
  9730 ;; *************** function _INTERRUPT_InterruptManager *****************
  9731 ;; Defined at:
  9732 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  9733 ;; Parameters:    Size  Location     Type
  9734 ;;		None
  9735 ;; Auto vars:     Size  Location     Type
  9736 ;;		None
  9737 ;; Return value:  Size  Location     Type
  9738 ;;                  1    wreg      void 
  9739 ;; Registers used:
  9740 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9741 ;; Tracked objects:
  9742 ;;		On entry : 0/0
  9743 ;;		On exit  : 0/0
  9744 ;;		Unchanged: 0/0
  9745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9748 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9749 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9750 ;;Total ram usage:        1 bytes
  9751 ;; Hardware stack levels used:    1
  9752 ;; Hardware stack levels required when called:   11
  9753 ;; This function calls:
  9754 ;;		Absolute function
  9755 ;;		_EUSART_Receive_ISR
  9756 ;;		_MyUART_ISR
  9757 ;;		_TMR2_ISR
  9758 ;; This function is called by:
  9759 ;;		Interrupt level 1
  9760 ;; This function uses a non-reentrant model
  9761 ;;
  9762                           
  9763  0004                     _INTERRUPT_InterruptManager:	
  9764                           
  9765                           ;incstack = 0
  9766 ;; hardware stack exceeded
  9767  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9768                           
  9769                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9770  0005  3180               	pagesel	$
  9771  0006  0020               	movlb	0	; select bank0
  9772  0007  087F               	movf	127,w
  9773  0008  00CC               	movwf	??_INTERRUPT_InterruptManager
  9774                           
  9775                           ;interrupt_manager.c: 55: if(INTCONbits.PEIE == 1)
  9776  0009  1F0B               	btfss	11,6	;volatile
  9777  000A  281F               	goto	i1l123
  9778                           
  9779                           ;interrupt_manager.c: 56: {
  9780                           ;interrupt_manager.c: 57: if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
  9781  000B  0021               	movlb	1	; select bank1
  9782  000C  1E90               	btfss	16,5	;volatile
  9783  000D  2817               	goto	i1l118
  9784  000E  0020               	movlb	0	; select bank0
  9785  000F  1E90               	btfss	16,5	;volatile
  9786  0010  2817               	goto	i1l118
  9787                           
  9788                           ;interrupt_manager.c: 58: {
  9789                           ;interrupt_manager.c: 59: EUSART_RxDefaultInterruptHandler();
  9790  0011  0859               	movf	_EUSART_RxDefaultInterruptHandler+1,w
  9791  0012  008A               	movwf	10
  9792  0013  0858               	movf	_EUSART_RxDefaultInterruptHandler,w
  9793  0014  000A               	callw
  9794  0015  3180               	pagesel	$
  9795                           
  9796                           ;interrupt_manager.c: 60: }
  9797  0016  281F               	goto	i1l123
  9798  0017                     i1l118:	
  9799                           
  9800                           ;interrupt_manager.c: 61: else if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
  9801  0017  0021               	movlb	1	; select bank1
  9802  0018  1C90               	btfss	16,1	;volatile
  9803  0019  281F               	goto	i1l123
  9804  001A  0020               	movlb	0	; select bank0
  9805  001B  1C90               	btfss	16,1	;volatile
  9806  001C  281F               	goto	i1l123
  9807                           
  9808                           ;interrupt_manager.c: 62: {
  9809                           ;interrupt_manager.c: 63: TMR2_ISR();
  9810  001D  3187  27EB         	fcall	_TMR2_ISR
  9811  001F                     i1l123:	
  9812                           ;interrupt_manager.c: 70: else
  9813                           ;interrupt_manager.c: 71: {
  9814                           
  9815                           ;interrupt_manager.c: 68: }
  9816                           ;interrupt_manager.c: 69: }
  9817                           
  9818                           ;interrupt_manager.c: 65: else
  9819                           ;interrupt_manager.c: 66: {
  9820                           
  9821                           ;interrupt_manager.c: 64: }
  9822                           
  9823  001F  0020               	movlb	0	; select bank0
  9824  0020  084C               	movf	??_INTERRUPT_InterruptManager,w
  9825  0021  00FF               	movwf	127
  9826  0022  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9827  0023  0009               	retfie
  9828  0024                     __end_of_INTERRUPT_InterruptManager:	
  9829                           
  9830                           	psect	text67
  9831  07EB                     __ptext67:	
  9832 ;; *************** function _TMR2_ISR *****************
  9833 ;; Defined at:
  9834 ;;		line 165 in file "mcc_generated_files/tmr2.c"
  9835 ;; Parameters:    Size  Location     Type
  9836 ;;		None
  9837 ;; Auto vars:     Size  Location     Type
  9838 ;;		None
  9839 ;; Return value:  Size  Location     Type
  9840 ;;                  1    wreg      void 
  9841 ;; Registers used:
  9842 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9843 ;; Tracked objects:
  9844 ;;		On entry : 0/0
  9845 ;;		On exit  : 0/0
  9846 ;;		Unchanged: 0/0
  9847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9852 ;;Total ram usage:        0 bytes
  9853 ;; Hardware stack levels used:    1
  9854 ;; Hardware stack levels required when called:   10
  9855 ;; This function calls:
  9856 ;;		Absolute function
  9857 ;;		_MyTimer2ISR
  9858 ;;		_TMR2_DefaultInterruptHandler
  9859 ;; This function is called by:
  9860 ;;		_INTERRUPT_InterruptManager
  9861 ;; This function uses a non-reentrant model
  9862 ;;
  9863                           
  9864                           
  9865                           ;psect for function _TMR2_ISR
  9866  07EB                     _TMR2_ISR:	
  9867                           
  9868                           ;tmr2.c: 169: PIR1bits.TMR2IF = 0;
  9869                           
  9870                           ;incstack = 0
  9871 ;; hardware stack exceeded
  9872                           ; Regs used in _TMR2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9873  07EB  0020               	movlb	0	; select bank0
  9874  07EC  1090               	bcf	16,1	;volatile
  9875                           
  9876                           ;tmr2.c: 171: if(TMR2_InterruptHandler)
  9877  07ED  0854               	movf	_TMR2_InterruptHandler,w
  9878  07EE  0455               	iorwf	_TMR2_InterruptHandler+1,w
  9879  07EF  1903               	btfsc	3,2
  9880  07F0  0008               	return
  9881                           
  9882                           ;tmr2.c: 172: {
  9883                           ;tmr2.c: 173: TMR2_InterruptHandler();
  9884  07F1  0855               	movf	_TMR2_InterruptHandler+1,w
  9885  07F2  008A               	movwf	10
  9886  07F3  0854               	movf	_TMR2_InterruptHandler,w
  9887  07F4  000A               	callw
  9888  07F5  3187               	pagesel	$
  9889  07F6  0008               	return
  9890  07F7                     __end_of_TMR2_ISR:	
  9891                           
  9892                           	psect	text68
  9893  016C                     __ptext68:	
  9894 ;; *************** function _MyTimer2ISR *****************
  9895 ;; Defined at:
  9896 ;;		line 58 in file "main.c"
  9897 ;; Parameters:    Size  Location     Type
  9898 ;;		None
  9899 ;; Auto vars:     Size  Location     Type
  9900 ;;  g               2   16[BANK0 ] unsigned int 
  9901 ;; Return value:  Size  Location     Type
  9902 ;;                  1    wreg      void 
  9903 ;; Registers used:
  9904 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9905 ;; Tracked objects:
  9906 ;;		On entry : 0/0
  9907 ;;		On exit  : 0/0
  9908 ;;		Unchanged: 0/0
  9909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9911 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9912 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9913 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9914 ;;Total ram usage:        4 bytes
  9915 ;; Hardware stack levels used:    1
  9916 ;; Hardware stack levels required when called:    9
  9917 ;; This function calls:
  9918 ;;		_EUSART_Write
  9919 ;;		_I2C_Read2ByteRegister
  9920 ;;		_PWM3_LoadDutyValue
  9921 ;;		i1_I2C_Close
  9922 ;;		i1_I2C_Write1ByteRegister
  9923 ;; This function is called by:
  9924 ;;		_main
  9925 ;;		_TMR2_ISR
  9926 ;; This function uses a non-reentrant model
  9927 ;;
  9928                           
  9929                           
  9930                           ;psect for function _MyTimer2ISR
  9931  016C                     _MyTimer2ISR:	
  9932                           
  9933                           ;main.c: 60: uint16_t g = I2C_Read2ByteRegister(0xE8, 0x48-1);
  9934                           
  9935                           ;incstack = 0
  9936 ;; hardware stack exceeded
  9937                           ; Regs used in _MyTimer2ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9938  016C  3047               	movlw	71
  9939  016D  0020               	movlb	0	; select bank0
  9940  016E  00C8               	movwf	??_MyTimer2ISR
  9941  016F  0848               	movf	??_MyTimer2ISR,w
  9942  0170  00BF               	movwf	I2C_Read2ByteRegister@reg
  9943  0171  30E8               	movlw	232
  9944  0172  3182  2274  3181   	fcall	_I2C_Read2ByteRegister
  9945  0175  0020               	movlb	0	; select bank0
  9946  0176  0840               	movf	?_I2C_Read2ByteRegister+1,w
  9947  0177  00CB               	movwf	MyTimer2ISR@g+1
  9948  0178  083F               	movf	?_I2C_Read2ByteRegister,w
  9949  0179  00CA               	movwf	MyTimer2ISR@g
  9950                           
  9951                           ;main.c: 64: PWM3_LoadDutyValue((uint8_t)(Angle/2)+20);
  9952  017A  085B               	movf	_Angle+1,w
  9953  017B  00C9               	movwf	??_MyTimer2ISR+1
  9954  017C  085A               	movf	_Angle,w
  9955  017D  00C8               	movwf	??_MyTimer2ISR
  9956  017E  36C9               	lsrf	??_MyTimer2ISR+1,f
  9957  017F  0CC8               	rrf	??_MyTimer2ISR,f
  9958  0180  0848               	movf	??_MyTimer2ISR,w
  9959  0181  3E14               	addlw	20
  9960  0182  00F0               	movwf	PWM3_LoadDutyValue@dutyValue
  9961  0183  3000               	movlw	0
  9962  0184  1803               	skipnc
  9963  0185  3001               	movlw	1
  9964  0186  00F1               	movwf	PWM3_LoadDutyValue@dutyValue+1
  9965  0187  3187  270F  3181   	fcall	_PWM3_LoadDutyValue
  9966  018A                     i1l5880:	
  9967                           ;main.c: 65: while(I2C_BUSY == I2C_Close());
  9968                           
  9969  018A  3186  2670  3181   	fcall	i1_I2C_Close
  9970  018D  3A01               	xorlw	1
  9971  018E  1903               	skipnz
  9972  018F  298A               	goto	i1l5880
  9973                           
  9974                           ;main.c: 66: if(PORTAbits.RA4) {
  9975  0190  0020               	movlb	0	; select bank0
  9976  0191  1E0C               	btfss	12,4	;volatile
  9977  0192  29C3               	goto	i1l5896
  9978                           
  9979                           ;main.c: 67: EUSART_Write('B');
  9980  0193  3042               	movlw	66
  9981  0194  318F  273B  3181   	fcall	_EUSART_Write
  9982                           
  9983                           ;main.c: 68: EUSART_Write('1');
  9984  0197  3031               	movlw	49
  9985  0198  318F  273B  3181   	fcall	_EUSART_Write
  9986                           
  9987                           ;main.c: 69: EUSART_Write('s');
  9988  019B  3073               	movlw	115
  9989  019C  318F  273B  3181   	fcall	_EUSART_Write
  9990                           
  9991                           ;main.c: 70: if(Validation) {
  9992  019F  0020               	movlb	0	; select bank0
  9993  01A0  085C               	movf	_Validation,w
  9994  01A1  1903               	btfsc	3,2
  9995  01A2  29BA               	goto	i1l5894
  9996                           
  9997                           ;main.c: 72: if(Vitesse > 100) {Vitesse = 100;}
  9998  01A3  3000               	movlw	0
  9999  01A4  0231               	subwf	_Vitesse+1,w
 10000  01A5  3065               	movlw	101
 10001  01A6  1903               	skipnz
 10002  01A7  0230               	subwf	_Vitesse,w
 10003  01A8  1C03               	skipc
 10004  01A9  29AE               	goto	i1l5890
 10005  01AA  3064               	movlw	100
 10006  01AB  00B0               	movwf	_Vitesse
 10007  01AC  3000               	movlw	0
 10008  01AD  00B1               	movwf	_Vitesse+1
 10009  01AE                     i1l5890:	
 10010                           
 10011                           ;main.c: 73: I2C_Write1ByteRegister(0x40, Vitesse, 0);
 10012  01AE  0830               	movf	_Vitesse,w
 10013  01AF  00C8               	movwf	??_MyTimer2ISR
 10014  01B0  0848               	movf	??_MyTimer2ISR,w
 10015  01B1  00BF               	movwf	i1I2C_Write1ByteRegister@reg
 10016  01B2  01C0               	clrf	i1I2C_Write1ByteRegister@data
 10017  01B3  3040               	movlw	64
 10018  01B4  3184  2479         	fcall	i1_I2C_Write1ByteRegister
 10019                           
 10020                           ;main.c: 75: Validation--;
 10021  01B6  3001               	movlw	1
 10022  01B7  0020               	movlb	0	; select bank0
 10023  01B8  02DC               	subwf	_Validation,f
 10024                           
 10025                           ;main.c: 76: } else {
 10026  01B9  0008               	return
 10027  01BA                     i1l5894:	
 10028                           
 10029                           ;main.c: 78: I2C_Write1ByteRegister(0x40, 101, 0);
 10030  01BA  3065               	movlw	101
 10031  01BB  00C8               	movwf	??_MyTimer2ISR
 10032  01BC  0848               	movf	??_MyTimer2ISR,w
 10033  01BD  00BF               	movwf	i1I2C_Write1ByteRegister@reg
 10034  01BE  01C0               	clrf	i1I2C_Write1ByteRegister@data
 10035  01BF  3040               	movlw	64
 10036  01C0  3184  2479         	fcall	i1_I2C_Write1ByteRegister
 10037                           
 10038                           ;main.c: 80: }
 10039                           ;main.c: 81: } else {
 10040  01C2  0008               	return
 10041  01C3                     i1l5896:	
 10042                           
 10043                           ;main.c: 82: EUSART_Write('B');
 10044  01C3  3042               	movlw	66
 10045  01C4  318F  273B  3181   	fcall	_EUSART_Write
 10046                           
 10047                           ;main.c: 83: EUSART_Write('0');
 10048  01C7  3030               	movlw	48
 10049  01C8  318F  273B  3181   	fcall	_EUSART_Write
 10050                           
 10051                           ;main.c: 84: EUSART_Write('r');
 10052  01CB  3072               	movlw	114
 10053  01CC  318F  273B  3181   	fcall	_EUSART_Write
 10054                           
 10055                           ;main.c: 86: I2C_Write1ByteRegister(0x40, 101, 0);
 10056  01CF  3065               	movlw	101
 10057  01D0  0020               	movlb	0	; select bank0
 10058  01D1  00C8               	movwf	??_MyTimer2ISR
 10059  01D2  0848               	movf	??_MyTimer2ISR,w
 10060  01D3  00BF               	movwf	i1I2C_Write1ByteRegister@reg
 10061  01D4  01C0               	clrf	i1I2C_Write1ByteRegister@data
 10062  01D5  3040               	movlw	64
 10063  01D6  3184  2479         	fcall	i1_I2C_Write1ByteRegister
 10064  01D8  0008               	return
 10065  01D9                     __end_of_MyTimer2ISR:	
 10066                           
 10067                           	psect	text69
 10068  0003                     __ptext69:	
 10069 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 10070 ;; Defined at:
 10071 ;;		line 182 in file "mcc_generated_files/tmr2.c"
 10072 ;; Parameters:    Size  Location     Type
 10073 ;;		None
 10074 ;; Auto vars:     Size  Location     Type
 10075 ;;		None
 10076 ;; Return value:  Size  Location     Type
 10077 ;;                  1    wreg      void 
 10078 ;; Registers used:
 10079 ;;		None
 10080 ;; Tracked objects:
 10081 ;;		On entry : 0/0
 10082 ;;		On exit  : 0/0
 10083 ;;		Unchanged: 0/0
 10084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10089 ;;Total ram usage:        0 bytes
 10090 ;; Hardware stack levels used:    1
 10091 ;; This function calls:
 10092 ;;		Nothing
 10093 ;; This function is called by:
 10094 ;;		_TMR2_Initialize
 10095 ;;		_TMR2_ISR
 10096 ;; This function uses a non-reentrant model
 10097 ;;
 10098                           
 10099                           
 10100                           ;psect for function _TMR2_DefaultInterruptHandler
 10101  0003                     _TMR2_DefaultInterruptHandler:	
 10102                           
 10103                           ;incstack = 0
 10104                           ; Regs used in _TMR2_DefaultInterruptHandler: []
 10105  0003  0008               	return
 10106  0004                     __end_of_TMR2_DefaultInterruptHandler:	
 10107                           
 10108                           	psect	text70
 10109  0479                     __ptext70:	
 10110 ;; *************** function i1_I2C_Write1ByteRegister *****************
 10111 ;; Defined at:
 10112 ;;		line 91 in file "mcc_generated_files/examples/i2c_master_example.c"
 10113 ;; Parameters:    Size  Location     Type
 10114 ;;  address         1    wreg     unsigned char 
 10115 ;;  reg             1    5[BANK0 ] unsigned char 
 10116 ;;  data            1    6[BANK0 ] unsigned char 
 10117 ;; Auto vars:     Size  Location     Type
 10118 ;;  address         1    8[BANK0 ] unsigned char 
 10119 ;; Return value:  Size  Location     Type
 10120 ;;                  1    wreg      void 
 10121 ;; Registers used:
 10122 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10123 ;; Tracked objects:
 10124 ;;		On entry : 0/0
 10125 ;;		On exit  : 0/0
 10126 ;;		Unchanged: 0/0
 10127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10128 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10129 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10130 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10131 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10132 ;;Total ram usage:        4 bytes
 10133 ;; Hardware stack levels used:    1
 10134 ;; Hardware stack levels required when called:    8
 10135 ;; This function calls:
 10136 ;;		i1_I2C_Close
 10137 ;;		i1_I2C_MasterWrite
 10138 ;;		i1_I2C_Open
 10139 ;;		i1_I2C_SetAddressNackCallback
 10140 ;;		i1_I2C_SetBuffer
 10141 ;;		i1_I2C_SetDataCompleteCallback
 10142 ;; This function is called by:
 10143 ;;		_MyTimer2ISR
 10144 ;; This function uses a non-reentrant model
 10145 ;;
 10146                           
 10147                           
 10148                           ;psect for function i1_I2C_Write1ByteRegister
 10149  0479                     i1_I2C_Write1ByteRegister:	
 10150                           
 10151                           ;incstack = 0
 10152 ;; hardware stack exceeded
 10153                           ; Regs used in i1_I2C_Write1ByteRegister: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10154                           ;i1I2C_Write1ByteRegister@address stored from wreg
 10155  0479  0020               	movlb	0	; select bank0
 10156  047A  00C2               	movwf	i1I2C_Write1ByteRegister@address
 10157  047B                     i1l5838:	
 10158                           ;i2c_master_example.c: 93: while(!I2C_Open(address));
 10159                           
 10160  047B  0020               	movlb	0	; select bank0
 10161  047C  0842               	movf	i1I2C_Write1ByteRegister@address,w
 10162  047D  3183  23A9  3184   	fcall	i1_I2C_Open
 10163  0480  3A00               	xorlw	0
 10164  0481  1903               	skipnz
 10165  0482  2C7B               	goto	i1l5838
 10166                           
 10167                           ;i2c_master_example.c: 94: I2C_SetDataCompleteCallback(wr1RegCompleteHandler,&data);
 10168  0483  30B7               	movlw	low _wr1RegCompleteHandler
 10169  0484  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 10170  0485  3006               	movlw	high _wr1RegCompleteHandler
 10171  0486  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 10172  0487  3040               	movlw	(low (i1I2C_Write1ByteRegister@data| 0))& (0+255)
 10173  0488  0020               	movlb	0	; select bank0
 10174  0489  00C1               	movwf	??i1_I2C_Write1ByteRegister
 10175  048A  0841               	movf	??i1_I2C_Write1ByteRegister,w
 10176  048B  00F7               	movwf	i1I2C_SetDataCompleteCallback@ptr
 10177  048C  318F  27DC  3184   	fcall	i1_I2C_SetDataCompleteCallback
 10178                           
 10179                           ;i2c_master_example.c: 95: I2C_SetBuffer(&reg,1);
 10180  048F  3001               	movlw	1
 10181  0490  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 10182  0491  3000               	movlw	0
 10183  0492  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 10184  0493  303F               	movlw	(low (i1I2C_Write1ByteRegister@reg| 0))& (0+255)
 10185  0494  3187  27C5  3184   	fcall	i1_I2C_SetBuffer
 10186                           
 10187                           ;i2c_master_example.c: 96: I2C_SetAddressNackCallback((0),(0));
 10188  0497  3000               	movlw	0
 10189  0498  00F5               	movwf	i1I2C_SetAddressNackCallback@cb
 10190  0499  00F6               	movwf	i1I2C_SetAddressNackCallback@cb+1
 10191  049A  01F7               	clrf	i1I2C_SetAddressNackCallback@ptr
 10192  049B  318F  27F4  3184   	fcall	i1_I2C_SetAddressNackCallback
 10193                           
 10194                           ;i2c_master_example.c: 97: I2C_MasterWrite();
 10195  049E  318E  26C3  3184   	fcall	i1_I2C_MasterWrite
 10196  04A1                     i1l5848:	
 10197                           ;i2c_master_example.c: 98: while(I2C_BUSY == I2C_Close());
 10198                           
 10199  04A1  3186  2670  3184   	fcall	i1_I2C_Close
 10200  04A4  3A01               	xorlw	1
 10201  04A5  1D03               	btfss	3,2
 10202  04A6  0008               	return
 10203  04A7  2CA1               	goto	i1l5848
 10204  04A8                     __end_ofi1_I2C_Write1ByteRegister:	
 10205                           
 10206                           	psect	text71
 10207  070F                     __ptext71:	
 10208 ;; *************** function _PWM3_LoadDutyValue *****************
 10209 ;; Defined at:
 10210 ;;		line 74 in file "mcc_generated_files/pwm3.c"
 10211 ;; Parameters:    Size  Location     Type
 10212 ;;  dutyValue       2    0[COMMON] unsigned int 
 10213 ;; Auto vars:     Size  Location     Type
 10214 ;;		None
 10215 ;; Return value:  Size  Location     Type
 10216 ;;                  1    wreg      void 
 10217 ;; Registers used:
 10218 ;;		wreg, status,2, status,0
 10219 ;; Tracked objects:
 10220 ;;		On entry : 0/0
 10221 ;;		On exit  : 0/0
 10222 ;;		Unchanged: 0/0
 10223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10224 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10226 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10227 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10228 ;;Total ram usage:        4 bytes
 10229 ;; Hardware stack levels used:    1
 10230 ;; This function calls:
 10231 ;;		Nothing
 10232 ;; This function is called by:
 10233 ;;		_MyTimer2ISR
 10234 ;; This function uses a non-reentrant model
 10235 ;;
 10236                           
 10237                           
 10238                           ;psect for function _PWM3_LoadDutyValue
 10239  070F                     _PWM3_LoadDutyValue:	
 10240                           
 10241                           ;pwm3.c: 77: PWM3DCH = (dutyValue & 0x03FC)>>2;
 10242                           
 10243                           ;incstack = 0
 10244                           ; Regs used in _PWM3_LoadDutyValue: [wreg+status,2+status,0]
 10245  070F  0871               	movf	PWM3_LoadDutyValue@dutyValue+1,w
 10246  0710  00F3               	movwf	??_PWM3_LoadDutyValue+1
 10247  0711  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
 10248  0712  00F2               	movwf	??_PWM3_LoadDutyValue
 10249  0713  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
 10250  0714  0CF2               	rrf	??_PWM3_LoadDutyValue,f
 10251  0715  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
 10252  0716  0CF2               	rrf	??_PWM3_LoadDutyValue,f
 10253  0717  0872               	movf	??_PWM3_LoadDutyValue,w
 10254  0718  002C               	movlb	12	; select bank12
 10255  0719  0098               	movwf	24	;volatile
 10256                           
 10257                           ;pwm3.c: 80: PWM3DCL = (dutyValue & 0x0003)<<6;
 10258  071A  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
 10259  071B  3903               	andlw	3
 10260  071C  00F2               	movwf	??_PWM3_LoadDutyValue
 10261  071D  3005               	movlw	5
 10262  071E                     u112_25:	
 10263  071E  35F2               	lslf	??_PWM3_LoadDutyValue,f
 10264  071F  3EFF               	addlw	-1
 10265  0720  1D03               	skipz
 10266  0721  2F1E               	goto	u112_25
 10267  0722  3572               	lslf	??_PWM3_LoadDutyValue,w
 10268  0723  0097               	movwf	23	;volatile
 10269  0724  0008               	return
 10270  0725                     __end_of_PWM3_LoadDutyValue:	
 10271                           
 10272                           	psect	text72
 10273  0274                     __ptext72:	
 10274 ;; *************** function _I2C_Read2ByteRegister *****************
 10275 ;; Defined at:
 10276 ;;		line 77 in file "mcc_generated_files/examples/i2c_master_example.c"
 10277 ;; Parameters:    Size  Location     Type
 10278 ;;  address         1    wreg     unsigned char 
 10279 ;;  reg             1    5[BANK0 ] unsigned char 
 10280 ;; Auto vars:     Size  Location     Type
 10281 ;;  address         1   11[BANK0 ] unsigned char 
 10282 ;;  returnValue     2   12[BANK0 ] unsigned int 
 10283 ;; Return value:  Size  Location     Type
 10284 ;;                  2    5[BANK0 ] unsigned int 
 10285 ;; Registers used:
 10286 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10287 ;; Tracked objects:
 10288 ;;		On entry : 0/0
 10289 ;;		On exit  : 0/0
 10290 ;;		Unchanged: 0/0
 10291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10292 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10293 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10294 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10295 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10296 ;;Total ram usage:        9 bytes
 10297 ;; Hardware stack levels used:    1
 10298 ;; Hardware stack levels required when called:    8
 10299 ;; This function calls:
 10300 ;;		i1_I2C_Close
 10301 ;;		i1_I2C_MasterWrite
 10302 ;;		i1_I2C_Open
 10303 ;;		i1_I2C_SetAddressNackCallback
 10304 ;;		i1_I2C_SetBuffer
 10305 ;;		i1_I2C_SetDataCompleteCallback
 10306 ;; This function is called by:
 10307 ;;		_MyTimer2ISR
 10308 ;; This function uses a non-reentrant model
 10309 ;;
 10310                           
 10311                           
 10312                           ;psect for function _I2C_Read2ByteRegister
 10313  0274                     _I2C_Read2ByteRegister:	
 10314                           
 10315                           ;incstack = 0
 10316 ;; hardware stack exceeded
 10317                           ; Regs used in _I2C_Read2ByteRegister: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10318                           ;I2C_Read2ByteRegister@address stored from wreg
 10319  0274  0020               	movlb	0	; select bank0
 10320  0275  00C5               	movwf	I2C_Read2ByteRegister@address
 10321                           
 10322                           ;i2c_master_example.c: 79: uint16_t returnValue =0x00;
 10323  0276  01C6               	clrf	I2C_Read2ByteRegister@returnValue
 10324  0277  01C7               	clrf	I2C_Read2ByteRegister@returnValue+1
 10325  0278                     i1l5800:	
 10326                           ;i2c_master_example.c: 81: while(!I2C_Open(address));
 10327                           
 10328  0278  0020               	movlb	0	; select bank0
 10329  0279  0845               	movf	I2C_Read2ByteRegister@address,w
 10330  027A  3183  23A9  3182   	fcall	i1_I2C_Open
 10331  027D  3A00               	xorlw	0
 10332  027E  1903               	skipnz
 10333  027F  2A78               	goto	i1l5800
 10334                           
 10335                           ;i2c_master_example.c: 82: I2C_SetDataCompleteCallback(rd2RegCompleteHandler,&returnValu
      +                          e);
 10336  0280  30CD               	movlw	low _rd2RegCompleteHandler
 10337  0281  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 10338  0282  3006               	movlw	high _rd2RegCompleteHandler
 10339  0283  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 10340  0284  3046               	movlw	(low (I2C_Read2ByteRegister@returnValue| 0))& (0+255)
 10341  0285  0020               	movlb	0	; select bank0
 10342  0286  00C1               	movwf	??_I2C_Read2ByteRegister
 10343  0287  0841               	movf	??_I2C_Read2ByteRegister,w
 10344  0288  00F7               	movwf	i1I2C_SetDataCompleteCallback@ptr
 10345  0289  318F  27DC  3182   	fcall	i1_I2C_SetDataCompleteCallback
 10346                           
 10347                           ;i2c_master_example.c: 83: I2C_SetBuffer(&reg,1);
 10348  028C  3001               	movlw	1
 10349  028D  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 10350  028E  3000               	movlw	0
 10351  028F  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 10352  0290  303F               	movlw	(low (I2C_Read2ByteRegister@reg| 0))& (0+255)
 10353  0291  3187  27C5  3182   	fcall	i1_I2C_SetBuffer
 10354                           
 10355                           ;i2c_master_example.c: 84: I2C_SetAddressNackCallback((0),(0));
 10356  0294  3000               	movlw	0
 10357  0295  00F5               	movwf	i1I2C_SetAddressNackCallback@cb
 10358  0296  00F6               	movwf	i1I2C_SetAddressNackCallback@cb+1
 10359  0297  01F7               	clrf	i1I2C_SetAddressNackCallback@ptr
 10360  0298  318F  27F4  3182   	fcall	i1_I2C_SetAddressNackCallback
 10361                           
 10362                           ;i2c_master_example.c: 85: I2C_MasterWrite();
 10363  029B  318E  26C3  3182   	fcall	i1_I2C_MasterWrite
 10364  029E                     i1l5810:	
 10365                           ;i2c_master_example.c: 86: while(I2C_BUSY == I2C_Close());
 10366                           
 10367  029E  3186  2670  3182   	fcall	i1_I2C_Close
 10368  02A1  3A01               	xorlw	1
 10369  02A2  1903               	skipnz
 10370  02A3  2A9E               	goto	i1l5810
 10371                           
 10372                           ;i2c_master_example.c: 88: return (returnValue << 8 | returnValue >> 8);
 10373  02A4  0020               	movlb	0	; select bank0
 10374  02A5  0847               	movf	I2C_Read2ByteRegister@returnValue+1,w
 10375  02A6  00C2               	movwf	??_I2C_Read2ByteRegister+1
 10376  02A7  0846               	movf	I2C_Read2ByteRegister@returnValue,w
 10377  02A8  00C1               	movwf	??_I2C_Read2ByteRegister
 10378  02A9  0842               	movf	??_I2C_Read2ByteRegister+1,w
 10379  02AA  00C1               	movwf	??_I2C_Read2ByteRegister
 10380  02AB  01C2               	clrf	??_I2C_Read2ByteRegister+1
 10381  02AC  0846               	movf	I2C_Read2ByteRegister@returnValue,w
 10382  02AD  00C4               	movwf	??_I2C_Read2ByteRegister+3
 10383  02AE  01C3               	clrf	??_I2C_Read2ByteRegister+2
 10384  02AF  0841               	movf	??_I2C_Read2ByteRegister,w
 10385  02B0  0443               	iorwf	??_I2C_Read2ByteRegister+2,w
 10386  02B1  00BF               	movwf	?_I2C_Read2ByteRegister
 10387  02B2  0842               	movf	??_I2C_Read2ByteRegister+1,w
 10388  02B3  0444               	iorwf	??_I2C_Read2ByteRegister+3,w
 10389  02B4  00C0               	movwf	?_I2C_Read2ByteRegister+1
 10390  02B5  0008               	return
 10391  02B6                     __end_of_I2C_Read2ByteRegister:	
 10392                           
 10393                           	psect	text73
 10394  0FF4                     __ptext73:	
 10395 ;; *************** function i1_I2C_SetAddressNackCallback *****************
 10396 ;; Defined at:
 10397 ;;		line 283 in file "mcc_generated_files/i2c_master.c"
 10398 ;; Parameters:    Size  Location     Type
 10399 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
 10400 ;;		 -> Absolute function(1), 
 10401 ;;  ptr             1    7[COMMON] PTR void 
 10402 ;;		 -> NULL(0), 
 10403 ;; Auto vars:     Size  Location     Type
 10404 ;;		None
 10405 ;; Return value:  Size  Location     Type
 10406 ;;                  1    wreg      void 
 10407 ;; Registers used:
 10408 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10409 ;; Tracked objects:
 10410 ;;		On entry : 0/0
 10411 ;;		On exit  : 0/0
 10412 ;;		Unchanged: 0/0
 10413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10414 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10416 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10417 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10418 ;;Total ram usage:        4 bytes
 10419 ;; Hardware stack levels used:    1
 10420 ;; Hardware stack levels required when called:    1
 10421 ;; This function calls:
 10422 ;;		i1_I2C_SetCallback
 10423 ;; This function is called by:
 10424 ;;		_I2C_Read2ByteRegister
 10425 ;;		i1_I2C_Write1ByteRegister
 10426 ;; This function uses a non-reentrant model
 10427 ;;
 10428                           
 10429                           
 10430                           ;psect for function i1_I2C_SetAddressNackCallback
 10431  0FF4                     i1_I2C_SetAddressNackCallback:	
 10432                           
 10433                           ;i2c_master.c: 285: I2C_SetCallback(I2C_ADDR_NACK, cb, ptr);
 10434                           
 10435                           ;incstack = 0
 10436                           ; Regs used in i1_I2C_SetAddressNackCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 10437  0FF4  0876               	movf	i1I2C_SetAddressNackCallback@cb+1,w
 10438  0FF5  00F1               	movwf	i1I2C_SetCallback@cb+1
 10439  0FF6  0875               	movf	i1I2C_SetAddressNackCallback@cb,w
 10440  0FF7  00F0               	movwf	i1I2C_SetCallback@cb
 10441  0FF8  0877               	movf	i1I2C_SetAddressNackCallback@ptr,w
 10442  0FF9  00F8               	movwf	??i1_I2C_SetAddressNackCallback
 10443  0FFA  0878               	movf	??i1_I2C_SetAddressNackCallback,w
 10444  0FFB  00F2               	movwf	i1I2C_SetCallback@ptr
 10445  0FFC  3002               	movlw	2
 10446  0FFD  3185  2596         	fcall	i1_I2C_SetCallback
 10447  0FFF  0008               	return
 10448  1000                     __end_ofi1_I2C_SetAddressNackCallback:	
 10449                           
 10450                           	psect	text74
 10451  03A9                     __ptext74:	
 10452 ;; *************** function i1_I2C_Open *****************
 10453 ;; Defined at:
 10454 ;;		line 176 in file "mcc_generated_files/i2c_master.c"
 10455 ;; Parameters:    Size  Location     Type
 10456 ;;  address         1    wreg     unsigned char 
 10457 ;; Auto vars:     Size  Location     Type
 10458 ;;  address         1    1[COMMON] unsigned char 
 10459 ;;  I2C_Open        1    2[COMMON] enum E92
 10460 ;; Return value:  Size  Location     Type
 10461 ;;                  1    wreg      enum E92
 10462 ;; Registers used:
 10463 ;;		wreg, status,2, status,0, pclath, cstack
 10464 ;; Tracked objects:
 10465 ;;		On entry : 0/0
 10466 ;;		On exit  : 0/0
 10467 ;;		Unchanged: 0/0
 10468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10470 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10471 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10472 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10473 ;;Total ram usage:        3 bytes
 10474 ;; Hardware stack levels used:    1
 10475 ;; Hardware stack levels required when called:    1
 10476 ;; This function calls:
 10477 ;;		i1_I2C_MasterClearIrq
 10478 ;;		i1_I2C_MasterOpen
 10479 ;; This function is called by:
 10480 ;;		_I2C_Read2ByteRegister
 10481 ;;		i1_I2C_Write1ByteRegister
 10482 ;; This function uses a non-reentrant model
 10483 ;;
 10484                           
 10485                           
 10486                           ;psect for function i1_I2C_Open
 10487  03A9                     i1_I2C_Open:	
 10488                           
 10489                           ;incstack = 0
 10490                           ; Regs used in i1_I2C_Open: [wreg+status,2+status,0+pclath+cstack]
 10491                           ;i1I2C_Open@address stored from wreg
 10492  03A9  00F1               	movwf	i1I2C_Open@address
 10493                           
 10494                           ;i2c_master.c: 178: i2c_error_t returnValue = I2C_BUSY;
 10495  03AA  01F2               	clrf	i1I2C_Open@returnValue
 10496  03AB  0AF2               	incf	i1I2C_Open@returnValue,f
 10497                           
 10498                           ;i2c_master.c: 180: if(!I2C_Status.inUse)
 10499  03AC  0021               	movlb	1	; select bank1
 10500  03AD  193C               	btfsc	(_I2C_Status^(0+128)+28),2
 10501  03AE  2BDE               	goto	i1l321
 10502                           
 10503                           ;i2c_master.c: 181: {
 10504                           ;i2c_master.c: 182: I2C_Status.address = address;
 10505  03AF  0871               	movf	i1I2C_Open@address,w
 10506  03B0  00F0               	movwf	??i1_I2C_Open
 10507  03B1  0870               	movf	??i1_I2C_Open,w
 10508  03B2  00B6               	movwf	(_I2C_Status^(0+128)+22)
 10509                           
 10510                           ;i2c_master.c: 183: I2C_Status.busy = 0;
 10511  03B3  10BC               	bcf	(_I2C_Status^(0+128)+28),1
 10512                           
 10513                           ;i2c_master.c: 184: I2C_Status.inUse = 1;
 10514  03B4  153C               	bsf	(_I2C_Status^(0+128)+28),2
 10515                           
 10516                           ;i2c_master.c: 185: I2C_Status.addressNackCheck = 0;
 10517  03B5  103C               	bcf	(_I2C_Status^(0+128)+28),0
 10518                           
 10519                           ;i2c_master.c: 186: I2C_Status.state = I2C_RESET;
 10520  03B6  300E               	movlw	14
 10521  03B7  00F0               	movwf	??i1_I2C_Open
 10522  03B8  0870               	movf	??i1_I2C_Open,w
 10523  03B9  00BA               	movwf	(_I2C_Status^(0+128)+26)
 10524                           
 10525                           ;i2c_master.c: 187: I2C_Status.time_out_value = 500;
 10526  03BA  30F4               	movlw	244
 10527  03BB  00B4               	movwf	(_I2C_Status^(0+128)+20)
 10528  03BC  3001               	movlw	1
 10529  03BD  00B5               	movwf	(_I2C_Status^(0+128)+21)
 10530                           
 10531                           ;i2c_master.c: 188: I2C_Status.bufferFree = 1;
 10532  03BE  15BC               	bsf	(_I2C_Status^(0+128)+28),3
 10533                           
 10534                           ;i2c_master.c: 191: I2C_Status.callbackTable[I2C_DATA_COMPLETE]=I2C_CallbackReturnStop;
 10535  03BF  30F7               	movlw	low _I2C_CallbackReturnStop
 10536  03C0  00A0               	movwf	_I2C_Status^(0+128)
 10537  03C1  300E               	movlw	high _I2C_CallbackReturnStop
 10538  03C2  00A1               	movwf	(_I2C_Status^(0+128)+1)
 10539                           
 10540                           ;i2c_master.c: 192: I2C_Status.callbackPayload[I2C_DATA_COMPLETE] = (0);
 10541  03C3  01AC               	clrf	(low ((_I2C_Status| 0+12)))^(0+128)
 10542                           
 10543                           ;i2c_master.c: 193: I2C_Status.callbackTable[I2C_WRITE_COLLISION]=I2C_CallbackReturnStop
      +                          ;
 10544  03C4  30F7               	movlw	low _I2C_CallbackReturnStop
 10545  03C5  00A2               	movwf	(low ((_I2C_Status| 0+2)))^(0+128)
 10546  03C6  300E               	movlw	high _I2C_CallbackReturnStop
 10547  03C7  00A3               	movwf	((low ((_I2C_Status| 0+2)))^(0+128)+1)
 10548                           
 10549                           ;i2c_master.c: 194: I2C_Status.callbackPayload[I2C_WRITE_COLLISION] = (0);
 10550  03C8  01AD               	clrf	(low ((_I2C_Status| 0+13)))^(0+128)
 10551                           
 10552                           ;i2c_master.c: 195: I2C_Status.callbackTable[I2C_ADDR_NACK]=I2C_CallbackReturnStop;
 10553  03C9  30F7               	movlw	low _I2C_CallbackReturnStop
 10554  03CA  00A4               	movwf	(low ((_I2C_Status| 0+4)))^(0+128)
 10555  03CB  300E               	movlw	high _I2C_CallbackReturnStop
 10556  03CC  00A5               	movwf	((low ((_I2C_Status| 0+4)))^(0+128)+1)
 10557                           
 10558                           ;i2c_master.c: 196: I2C_Status.callbackPayload[I2C_ADDR_NACK] = (0);
 10559  03CD  01AE               	clrf	(low ((_I2C_Status| 0+14)))^(0+128)
 10560                           
 10561                           ;i2c_master.c: 197: I2C_Status.callbackTable[I2C_DATA_NACK]=I2C_CallbackReturnStop;
 10562  03CE  30F7               	movlw	low _I2C_CallbackReturnStop
 10563  03CF  00A6               	movwf	(low ((_I2C_Status| 0+6)))^(0+128)
 10564  03D0  300E               	movlw	high _I2C_CallbackReturnStop
 10565  03D1  00A7               	movwf	((low ((_I2C_Status| 0+6)))^(0+128)+1)
 10566                           
 10567                           ;i2c_master.c: 198: I2C_Status.callbackPayload[I2C_DATA_NACK] = (0);
 10568  03D2  01AF               	clrf	(low ((_I2C_Status| 0+15)))^(0+128)
 10569                           
 10570                           ;i2c_master.c: 199: I2C_Status.callbackTable[I2C_TIMEOUT]=I2C_CallbackReturnReset;
 10571  03D3  30FD               	movlw	low _I2C_CallbackReturnReset
 10572  03D4  00A8               	movwf	(low ((_I2C_Status| 0+8)))^(0+128)
 10573  03D5  300E               	movlw	high _I2C_CallbackReturnReset
 10574  03D6  00A9               	movwf	((low ((_I2C_Status| 0+8)))^(0+128)+1)
 10575                           
 10576                           ;i2c_master.c: 200: I2C_Status.callbackPayload[I2C_TIMEOUT] = (0);
 10577  03D7  01B0               	clrf	(low ((_I2C_Status| 0+16)))^(0+128)
 10578                           
 10579                           ;i2c_master.c: 202: I2C_MasterClearIrq();
 10580  03D8  318E  2658  3183   	fcall	i1_I2C_MasterClearIrq
 10581                           
 10582                           ;i2c_master.c: 203: I2C_MasterOpen();
 10583  03DB  318F  27E8         	fcall	i1_I2C_MasterOpen
 10584                           
 10585                           ;i2c_master.c: 204: returnValue = I2C_NOERR;
 10586  03DD  01F2               	clrf	i1I2C_Open@returnValue
 10587  03DE                     i1l321:	
 10588                           
 10589                           ;i2c_master.c: 205: }
 10590                           ;i2c_master.c: 206: return returnValue;
 10591  03DE  0872               	movf	i1I2C_Open@returnValue,w
 10592  03DF  0008               	return
 10593  03E0                     __end_ofi1_I2C_Open:	
 10594                           
 10595                           	psect	text75
 10596  0FE8                     __ptext75:	
 10597 ;; *************** function i1_I2C_MasterOpen *****************
 10598 ;; Defined at:
 10599 ;;		line 543 in file "mcc_generated_files/i2c_master.c"
 10600 ;; Parameters:    Size  Location     Type
 10601 ;;		None
 10602 ;; Auto vars:     Size  Location     Type
 10603 ;;		None
 10604 ;; Return value:  Size  Location     Type
 10605 ;;                  1    wreg      unsigned char 
 10606 ;; Registers used:
 10607 ;;		wreg, status,2
 10608 ;; Tracked objects:
 10609 ;;		On entry : 0/0
 10610 ;;		On exit  : 0/0
 10611 ;;		Unchanged: 0/0
 10612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10616 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10617 ;;Total ram usage:        0 bytes
 10618 ;; Hardware stack levels used:    1
 10619 ;; This function calls:
 10620 ;;		Nothing
 10621 ;; This function is called by:
 10622 ;;		i1_I2C_Open
 10623 ;; This function uses a non-reentrant model
 10624 ;;
 10625                           
 10626                           
 10627                           ;psect for function i1_I2C_MasterOpen
 10628  0FE8                     i1_I2C_MasterOpen:	
 10629                           
 10630                           ;i2c_master.c: 545: if(!SSP1CON1bits.SSPEN)
 10631                           
 10632                           ;incstack = 0
 10633                           ; Regs used in i1_I2C_MasterOpen: [wreg+status,2]
 10634  0FE8  0024               	movlb	4	; select bank4
 10635  0FE9  1A95               	btfsc	21,5	;volatile
 10636  0FEA  0008               	return
 10637                           
 10638                           ;i2c_master.c: 546: {
 10639                           ;i2c_master.c: 547: SSP1STAT = 0x80;
 10640  0FEB  3080               	movlw	128
 10641  0FEC  0094               	movwf	20	;volatile
 10642                           
 10643                           ;i2c_master.c: 548: SSP1CON1 = 0x08;
 10644  0FED  3008               	movlw	8
 10645  0FEE  0095               	movwf	21	;volatile
 10646                           
 10647                           ;i2c_master.c: 549: SSP1CON2 = 0x00;
 10648  0FEF  0196               	clrf	22	;volatile
 10649                           
 10650                           ;i2c_master.c: 550: SSP1ADD = 0x09;
 10651  0FF0  3009               	movlw	9
 10652  0FF1  0092               	movwf	18	;volatile
 10653                           
 10654                           ;i2c_master.c: 551: SSP1CON1bits.SSPEN = 1;
 10655  0FF2  1695               	bsf	21,5	;volatile
 10656                           
 10657                           ;i2c_master.c: 552: return 1;
 10658                           ;	Return value of i1_I2C_MasterOpen is never used
 10659  0FF3  0008               	return
 10660  0FF4                     __end_ofi1_I2C_MasterOpen:	
 10661                           ;i2c_master.c: 553: }
 10662                           ;i2c_master.c: 554: return 0;
 10663                           ;	Return value of i1_I2C_MasterOpen is never used
 10664                           
 10665                           
 10666                           	psect	text76
 10667  0EC3                     __ptext76:	
 10668 ;; *************** function i1_I2C_MasterWrite *****************
 10669 ;; Defined at:
 10670 ;;		line 251 in file "mcc_generated_files/i2c_master.c"
 10671 ;; Parameters:    Size  Location     Type
 10672 ;;		None
 10673 ;; Auto vars:     Size  Location     Type
 10674 ;;		None
 10675 ;; Return value:  Size  Location     Type
 10676 ;;                  1    wreg      enum E92
 10677 ;; Registers used:
 10678 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10679 ;; Tracked objects:
 10680 ;;		On entry : 0/0
 10681 ;;		On exit  : 0/0
 10682 ;;		Unchanged: 0/0
 10683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10687 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10688 ;;Total ram usage:        0 bytes
 10689 ;; Hardware stack levels used:    1
 10690 ;; Hardware stack levels required when called:    7
 10691 ;; This function calls:
 10692 ;;		i1_I2C_MasterOperation
 10693 ;; This function is called by:
 10694 ;;		_I2C_Read2ByteRegister
 10695 ;;		i1_I2C_Write1ByteRegister
 10696 ;; This function uses a non-reentrant model
 10697 ;;
 10698                           
 10699                           
 10700                           ;psect for function i1_I2C_MasterWrite
 10701  0EC3                     i1_I2C_MasterWrite:	
 10702                           
 10703                           ;i2c_master.c: 253: return I2C_MasterOperation(0);
 10704                           ;	Return value of i1_I2C_MasterWrite is never used
 10705                           
 10706                           ;incstack = 0
 10707 ;; hardware stack exceeded
 10708                           ; Regs used in i1_I2C_MasterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10709  0EC3  3000               	movlw	0
 10710  0EC4  3186  261B         	fcall	i1_I2C_MasterOperation
 10711  0EC6  0008               	return
 10712  0EC7                     __end_ofi1_I2C_MasterWrite:	
 10713                           
 10714                           	psect	text77
 10715  061B                     __ptext77:	
 10716 ;; *************** function i1_I2C_MasterOperation *****************
 10717 ;; Defined at:
 10718 ;;		line 224 in file "mcc_generated_files/i2c_master.c"
 10719 ;; Parameters:    Size  Location     Type
 10720 ;;  read            1    wreg     unsigned char 
 10721 ;; Auto vars:     Size  Location     Type
 10722 ;;  read            1    3[BANK0 ] unsigned char 
 10723 ;;  I2C_MasterOp    1    4[BANK0 ] enum E92
 10724 ;; Return value:  Size  Location     Type
 10725 ;;                  1    wreg      enum E92
 10726 ;; Registers used:
 10727 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10728 ;; Tracked objects:
 10729 ;;		On entry : 0/0
 10730 ;;		On exit  : 0/0
 10731 ;;		Unchanged: 0/0
 10732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10734 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10735 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10736 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10737 ;;Total ram usage:        3 bytes
 10738 ;; Hardware stack levels used:    1
 10739 ;; Hardware stack levels required when called:    6
 10740 ;; This function calls:
 10741 ;;		i1_I2C_MasterStart
 10742 ;;		i1_I2C_Poller
 10743 ;; This function is called by:
 10744 ;;		i1_I2C_MasterWrite
 10745 ;; This function uses a non-reentrant model
 10746 ;;
 10747                           
 10748                           
 10749                           ;psect for function i1_I2C_MasterOperation
 10750  061B                     i1_I2C_MasterOperation:	
 10751                           
 10752                           ;incstack = 0
 10753 ;; hardware stack exceeded
 10754                           ; Regs used in i1_I2C_MasterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10755                           ;i1I2C_MasterOperation@read stored from wreg
 10756  061B  0020               	movlb	0	; select bank0
 10757  061C  00BD               	movwf	i1I2C_MasterOperation@read
 10758                           
 10759                           ;i2c_master.c: 226: i2c_error_t returnValue = I2C_BUSY;
 10760  061D  01BE               	clrf	i1I2C_MasterOperation@returnValue
 10761  061E  0ABE               	incf	i1I2C_MasterOperation@returnValue,f
 10762                           
 10763                           ;i2c_master.c: 227: if(!I2C_Status.busy)
 10764  061F  0021               	movlb	1	; select bank1
 10765  0620  18BC               	btfsc	(_I2C_Status^(0+128)+28),1
 10766  0621  2E36               	goto	i1l5782
 10767                           
 10768                           ;i2c_master.c: 228: {
 10769                           ;i2c_master.c: 229: I2C_Status.busy = 1;
 10770  0622  14BC               	bsf	(_I2C_Status^(0+128)+28),1
 10771                           
 10772                           ;i2c_master.c: 230: returnValue = I2C_NOERR;
 10773  0623  0020               	movlb	0	; select bank0
 10774  0624  01BE               	clrf	i1I2C_MasterOperation@returnValue
 10775                           
 10776                           ;i2c_master.c: 232: if(read)
 10777  0625  083D               	movf	i1I2C_MasterOperation@read,w
 10778  0626  1903               	btfsc	3,2
 10779  0627  2E2C               	goto	i1l5776
 10780                           
 10781                           ;i2c_master.c: 233: {
 10782                           ;i2c_master.c: 234: I2C_Status.state = I2C_SEND_ADR_READ;
 10783  0628  0021               	movlb	1	; select bank1
 10784  0629  01BA               	clrf	(_I2C_Status^(0+128)+26)
 10785  062A  0ABA               	incf	(_I2C_Status^(0+128)+26),f
 10786                           
 10787                           ;i2c_master.c: 235: }
 10788  062B  2E31               	goto	i1l5778
 10789  062C                     i1l5776:	
 10790                           
 10791                           ;i2c_master.c: 236: else
 10792                           ;i2c_master.c: 237: {
 10793                           ;i2c_master.c: 238: I2C_Status.state = I2C_SEND_ADR_WRITE;
 10794  062C  3002               	movlw	2
 10795  062D  00FD               	movwf	??i1_I2C_MasterOperation
 10796  062E  087D               	movf	??i1_I2C_MasterOperation,w
 10797  062F  0021               	movlb	1	; select bank1
 10798  0630  00BA               	movwf	(_I2C_Status^(0+128)+26)
 10799  0631                     i1l5778:	
 10800                           
 10801                           ;i2c_master.c: 239: }
 10802                           ;i2c_master.c: 240: I2C_MasterStart();
 10803  0631  318E  2661  3186   	fcall	i1_I2C_MasterStart
 10804                           
 10805                           ;i2c_master.c: 241: I2C_Poller();
 10806  0634  318F  279E         	fcall	i1_I2C_Poller
 10807  0636                     i1l5782:	
 10808                           
 10809                           ;i2c_master.c: 242: }
 10810                           ;i2c_master.c: 243: return returnValue;
 10811  0636  0020               	movlb	0	; select bank0
 10812  0637  083E               	movf	i1I2C_MasterOperation@returnValue,w
 10813  0638  0008               	return
 10814  0639                     __end_ofi1_I2C_MasterOperation:	
 10815                           
 10816                           	psect	text78
 10817  0F9E                     __ptext78:	
 10818 ;; *************** function i1_I2C_Poller *****************
 10819 ;; Defined at:
 10820 ;;		line 312 in file "mcc_generated_files/i2c_master.c"
 10821 ;; Parameters:    Size  Location     Type
 10822 ;;		None
 10823 ;; Auto vars:     Size  Location     Type
 10824 ;;		None
 10825 ;; Return value:  Size  Location     Type
 10826 ;;                  1    wreg      void 
 10827 ;; Registers used:
 10828 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10829 ;; Tracked objects:
 10830 ;;		On entry : 0/0
 10831 ;;		On exit  : 0/0
 10832 ;;		Unchanged: 0/0
 10833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10838 ;;Total ram usage:        0 bytes
 10839 ;; Hardware stack levels used:    1
 10840 ;; Hardware stack levels required when called:    5
 10841 ;; This function calls:
 10842 ;;		i1_I2C_MasterFsm
 10843 ;;		i1_I2C_MasterWaitForEvent
 10844 ;; This function is called by:
 10845 ;;		i1_I2C_MasterOperation
 10846 ;; This function uses a non-reentrant model
 10847 ;;
 10848                           
 10849                           
 10850                           ;psect for function i1_I2C_Poller
 10851  0F9E                     i1_I2C_Poller:	
 10852  0F9E                     i1l5754:	
 10853                           ;i2c_master.c: 314: while(I2C_Status.busy)
 10854                           
 10855                           ;incstack = 0
 10856 ;; hardware stack exceeded
 10857                           ; Regs used in i1_I2C_Poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10858                           
 10859  0F9E  0021               	movlb	1	; select bank1
 10860  0F9F  1CBC               	btfss	(_I2C_Status^(0+128)+28),1
 10861  0FA0  0008               	return
 10862                           
 10863                           ;i2c_master.c: 315: {
 10864                           ;i2c_master.c: 316: I2C_MasterWaitForEvent();
 10865  0FA1  318E  26BF  318F   	fcall	i1_I2C_MasterWaitForEvent
 10866                           
 10867                           ;i2c_master.c: 317: I2C_MasterFsm();
 10868  0FA4  3184  24D3  318F   	fcall	i1_I2C_MasterFsm
 10869  0FA7  2F9E               	goto	i1l5754
 10870  0FA8                     __end_ofi1_I2C_Poller:	
 10871                           
 10872                           	psect	text79
 10873  0EBF                     __ptext79:	
 10874 ;; *************** function i1_I2C_MasterWaitForEvent *****************
 10875 ;; Defined at:
 10876 ;;		line 650 in file "mcc_generated_files/i2c_master.c"
 10877 ;; Parameters:    Size  Location     Type
 10878 ;;		None
 10879 ;; Auto vars:     Size  Location     Type
 10880 ;;		None
 10881 ;; Return value:  Size  Location     Type
 10882 ;;                  1    wreg      void 
 10883 ;; Registers used:
 10884 ;;		None
 10885 ;; Tracked objects:
 10886 ;;		On entry : 0/0
 10887 ;;		On exit  : 0/0
 10888 ;;		Unchanged: 0/0
 10889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10894 ;;Total ram usage:        0 bytes
 10895 ;; Hardware stack levels used:    1
 10896 ;; This function calls:
 10897 ;;		Nothing
 10898 ;; This function is called by:
 10899 ;;		i1_I2C_Poller
 10900 ;; This function uses a non-reentrant model
 10901 ;;
 10902                           
 10903                           
 10904                           ;psect for function i1_I2C_MasterWaitForEvent
 10905  0EBF                     i1_I2C_MasterWaitForEvent:	
 10906  0EBF                     i1l544:	
 10907                           ;incstack = 0
 10908 ;; hardware stack exceeded
 10909                           ; Regs used in i1_I2C_MasterWaitForEvent: []
 10910                           ;i2c_master.c: 652: while(1)
 10911                           
 10912                           
 10913                           ;i2c_master.c: 653: {
 10914                           ;i2c_master.c: 654: if(PIR1bits.SSP1IF)
 10915  0EBF  0020               	movlb	0	; select bank0
 10916  0EC0  1990               	btfsc	16,3	;volatile
 10917  0EC1  0008               	return
 10918  0EC2  2EBF               	goto	i1l544
 10919  0EC3                     __end_ofi1_I2C_MasterWaitForEvent:	
 10920                           ;i2c_master.c: 655: {
 10921                           ;i2c_master.c: 656: break;
 10922                           
 10923                           
 10924                           	psect	text80
 10925  04D3                     __ptext80:	
 10926 ;; *************** function i1_I2C_MasterFsm *****************
 10927 ;; Defined at:
 10928 ;;		line 321 in file "mcc_generated_files/i2c_master.c"
 10929 ;; Parameters:    Size  Location     Type
 10930 ;;		None
 10931 ;; Auto vars:     Size  Location     Type
 10932 ;;		None
 10933 ;; Return value:  Size  Location     Type
 10934 ;;                  1    wreg      void 
 10935 ;; Registers used:
 10936 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10937 ;; Tracked objects:
 10938 ;;		On entry : 0/0
 10939 ;;		On exit  : 0/0
 10940 ;;		Unchanged: 0/0
 10941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10944 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10945 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10946 ;;Total ram usage:        3 bytes
 10947 ;; Hardware stack levels used:    1
 10948 ;; Hardware stack levels required when called:    4
 10949 ;; This function calls:
 10950 ;;		i1_I2C_DO_ADDRESS_NACK
 10951 ;;		i1_I2C_DO_IDLE
 10952 ;;		i1_I2C_DO_RCEN
 10953 ;;		i1_I2C_DO_RESET
 10954 ;;		i1_I2C_DO_RX
 10955 ;;		i1_I2C_DO_RX_ACK
 10956 ;;		i1_I2C_DO_RX_NACK_RESTART
 10957 ;;		i1_I2C_DO_RX_NACK_STOP
 10958 ;;		i1_I2C_DO_SEND_ADR_READ
 10959 ;;		i1_I2C_DO_SEND_ADR_WRITE
 10960 ;;		i1_I2C_DO_SEND_RESTART
 10961 ;;		i1_I2C_DO_SEND_RESTART_READ
 10962 ;;		i1_I2C_DO_SEND_RESTART_WRITE
 10963 ;;		i1_I2C_DO_SEND_STOP
 10964 ;;		i1_I2C_DO_TX
 10965 ;;		i1_I2C_DO_TX_EMPTY
 10966 ;;		i1_I2C_MasterClearIrq
 10967 ;;		i1_I2C_MasterIsNack
 10968 ;; This function is called by:
 10969 ;;		i1_I2C_Poller
 10970 ;; This function uses a non-reentrant model
 10971 ;;
 10972                           
 10973                           
 10974                           ;psect for function i1_I2C_MasterFsm
 10975  04D3                     i1_I2C_MasterFsm:	
 10976                           
 10977                           ;i2c_master.c: 323: I2C_MasterClearIrq();
 10978                           
 10979                           ;incstack = 0
 10980 ;; hardware stack exceeded
 10981                           ; Regs used in i1_I2C_MasterFsm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10982  04D3  318E  2658  3184   	fcall	i1_I2C_MasterClearIrq
 10983                           
 10984                           ;i2c_master.c: 325: if(I2C_Status.addressNackCheck && I2C_MasterIsNack())
 10985  04D6  0021               	movlb	1	; select bank1
 10986  04D7  1C3C               	btfss	(_I2C_Status^(0+128)+28),0
 10987  04D8  2CE5               	goto	i1l5654
 10988  04D9  318E  26EB  3184   	fcall	i1_I2C_MasterIsNack
 10989  04DC  3A00               	xorlw	0
 10990  04DD  1903               	skipnz
 10991  04DE  2CE5               	goto	i1l5654
 10992                           
 10993                           ;i2c_master.c: 326: {
 10994                           ;i2c_master.c: 327: I2C_Status.state = I2C_ADDRESS_NACK;
 10995  04DF  300F               	movlw	15
 10996  04E0  0020               	movlb	0	; select bank0
 10997  04E1  00BA               	movwf	??i1_I2C_MasterFsm
 10998  04E2  083A               	movf	??i1_I2C_MasterFsm,w
 10999  04E3  0021               	movlb	1	; select bank1
 11000  04E4  00BA               	movwf	(_I2C_Status^(0+128)+26)
 11001  04E5                     i1l5654:	
 11002                           
 11003                           ;i2c_master.c: 328: }
 11004                           ;i2c_master.c: 329: I2C_Status.state = fsmStateTable[I2C_Status.state]();
 11005  04E5  0021               	movlb	1	; select bank1
 11006  04E6  083A               	movf	(_I2C_Status^(0+128)+26),w
 11007  04E7  0020               	movlb	0	; select bank0
 11008  04E8  00BA               	movwf	??i1_I2C_MasterFsm
 11009  04E9  01BB               	clrf	??i1_I2C_MasterFsm+1
 11010  04EA  35BA               	lslf	??i1_I2C_MasterFsm,f
 11011  04EB  0DBB               	rlf	??i1_I2C_MasterFsm+1,f
 11012  04EC  30DD               	movlw	low (_fsmStateTable| (0+32768))
 11013  04ED  073A               	addwf	??i1_I2C_MasterFsm,w
 11014  04EE  0084               	movwf	4
 11015  04EF  3085               	movlw	high (_fsmStateTable| (0+32768))
 11016  04F0  3D3B               	addwfc	??i1_I2C_MasterFsm+1,w
 11017  04F1  0085               	movwf	5
 11018  04F2  3F01               	moviw [1]fsr0
 11019  04F3  008A               	movwf	10
 11020  04F4  3F00               	moviw [0]fsr0
 11021  04F5  000A               	callw
 11022  04F6  3184               	pagesel	$
 11023  04F7  0020               	movlb	0	; select bank0
 11024  04F8  00BC               	movwf	??i1_I2C_MasterFsm+2
 11025  04F9  083C               	movf	??i1_I2C_MasterFsm+2,w
 11026  04FA  0021               	movlb	1	; select bank1
 11027  04FB  00BA               	movwf	(_I2C_Status^(0+128)+26)
 11028  04FC  0008               	return
 11029  04FD                     __end_ofi1_I2C_MasterFsm:	
 11030                           
 11031                           	psect	text81
 11032  05BA                     __ptext81:	
 11033 ;; *************** function i1_I2C_DO_ADDRESS_NACK *****************
 11034 ;; Defined at:
 11035 ;;		line 500 in file "mcc_generated_files/i2c_master.c"
 11036 ;; Parameters:    Size  Location     Type
 11037 ;;		None
 11038 ;; Auto vars:     Size  Location     Type
 11039 ;;		None
 11040 ;; Return value:  Size  Location     Type
 11041 ;;                  1    wreg      enum E12103
 11042 ;; Registers used:
 11043 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11044 ;; Tracked objects:
 11045 ;;		On entry : 0/0
 11046 ;;		On exit  : 0/0
 11047 ;;		Unchanged: 0/0
 11048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11051 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11052 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11053 ;;Total ram usage:        1 bytes
 11054 ;; Hardware stack levels used:    1
 11055 ;; Hardware stack levels required when called:    3
 11056 ;; This function calls:
 11057 ;;		Absolute function
 11058 ;;		i1_I2C_CallbackReturnReset
 11059 ;;		i1_I2C_CallbackReturnStop
 11060 ;;		i1_I2C_DO_SEND_RESTART
 11061 ;;		i1_I2C_DO_SEND_STOP
 11062 ;;		i1_rd1RegCompleteHandler
 11063 ;;		i1_rd2RegCompleteHandler
 11064 ;;		i1_rdBlkRegCompleteHandler
 11065 ;;		i1_wr1RegCompleteHandler
 11066 ;;		i1_wr2RegCompleteHandler
 11067 ;; This function is called by:
 11068 ;; This function uses a non-reentrant model
 11069 ;;
 11070                           
 11071                           
 11072                           ;psect for function i1_I2C_DO_ADDRESS_NACK
 11073  05BA                     i1_I2C_DO_ADDRESS_NACK:	
 11074  05BA                     i1l5630:	
 11075                           ;incstack = 0
 11076 ;; hardware stack exceeded
 11077                           ; Regs used in i1_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11078                           
 11079                           
 11080                           ;i2c_master.c: 502: I2C_Status.addressNackCheck = 0;
 11081  05BA  0021               	movlb	1	; select bank1
 11082  05BB  103C               	bcf	(_I2C_Status^(0+128)+28),0
 11083                           
 11084                           ;i2c_master.c: 503: I2C_Status.error = I2C_FAIL;
 11085  05BC  3002               	movlw	2
 11086  05BD  00FA               	movwf	??i1_I2C_DO_ADDRESS_NACK
 11087  05BE  087A               	movf	??i1_I2C_DO_ADDRESS_NACK,w
 11088  05BF  00BB               	movwf	(_I2C_Status^(0+128)+27)
 11089                           
 11090                           ;i2c_master.c: 504: switch(I2C_Status.callbackTable[I2C_ADDR_NACK](I2C_Status.callbackPa
      +                          yload[I2C_ADDR_NACK]))
 11091  05C0  2DC7               	goto	i1l5644
 11092  05C1                     i1l5634:	
 11093                           ;i2c_master.c: 505: {
 11094                           ;i2c_master.c: 506: case I2C_RESTART_READ:
 11095                           
 11096                           
 11097                           ;i2c_master.c: 507: case I2C_RESTART_WRITE:
 11098                           ;i2c_master.c: 508: return I2C_DO_SEND_RESTART();
 11099  05C1  318E  26AB         	fcall	i1_I2C_DO_SEND_RESTART
 11100  05C3  0008               	return
 11101  05C4                     i1l5638:	
 11102                           ;i2c_master.c: 509: default:
 11103                           
 11104                           
 11105                           ;i2c_master.c: 510: return I2C_DO_SEND_STOP();
 11106  05C4  318E  26AF         	fcall	i1_I2C_DO_SEND_STOP
 11107                           
 11108                           ;i2c_master.c: 511: }
 11109  05C6  0008               	return
 11110  05C7                     i1l5644:	
 11111  05C7  0021               	movlb	1	; select bank1
 11112  05C8  082E               	movf	(low ((_I2C_Status| 0+14)))^(0+128),w
 11113  05C9  00FA               	movwf	??i1_I2C_DO_ADDRESS_NACK
 11114  05CA  087A               	movf	??i1_I2C_DO_ADDRESS_NACK,w
 11115  05CB  00F9               	movwf	i1I2C_CallbackReturnReset@funPtr
 11116  05CC  3004               	movlw	4
 11117  05CD  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
 11118  05CE  0086               	movwf	6
 11119  05CF  0187               	clrf	7
 11120  05D0  3F41               	moviw [1]fsr1
 11121  05D1  008A               	movwf	10
 11122  05D2  3F40               	moviw [0]fsr1
 11123  05D3  000A               	callw
 11124  05D4  3185               	pagesel	$
 11125                           
 11126                           ; Switch size 1, requested type "space"
 11127                           ; Number of cases is 2, Range of values is 2 to 3
 11128                           ; switch strategies available:
 11129                           ; Name         Instructions Cycles
 11130                           ; simple_byte            7     4 (average)
 11131                           ; direct_byte           13     9 (fixed)
 11132                           ; jumptable            263     9 (fixed)
 11133                           ;	Chosen strategy is simple_byte
 11134  05D5  3A02               	xorlw	2	; case 2
 11135  05D6  1903               	skipnz
 11136  05D7  2DC1               	goto	i1l5634
 11137  05D8  3A01               	xorlw	1	; case 3
 11138  05D9  1903               	skipnz
 11139  05DA  2DC1               	goto	i1l5634
 11140  05DB  2DC4               	goto	i1l5638
 11141  05DC  0008               	return
 11142  05DD                     __end_ofi1_I2C_DO_ADDRESS_NACK:	
 11143                           
 11144                           	psect	text82
 11145  0EE1                     __ptext82:	
 11146 ;; *************** function i1_I2C_DO_RESET *****************
 11147 ;; Defined at:
 11148 ;;		line 494 in file "mcc_generated_files/i2c_master.c"
 11149 ;; Parameters:    Size  Location     Type
 11150 ;;		None
 11151 ;; Auto vars:     Size  Location     Type
 11152 ;;		None
 11153 ;; Return value:  Size  Location     Type
 11154 ;;                  1    wreg      enum E12103
 11155 ;; Registers used:
 11156 ;;		wreg, status,2
 11157 ;; Tracked objects:
 11158 ;;		On entry : 0/0
 11159 ;;		On exit  : 0/0
 11160 ;;		Unchanged: 0/0
 11161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11165 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11166 ;;Total ram usage:        0 bytes
 11167 ;; Hardware stack levels used:    1
 11168 ;; This function calls:
 11169 ;;		Nothing
 11170 ;; This function is called by:
 11171 ;; This function uses a non-reentrant model
 11172 ;;
 11173                           
 11174                           
 11175                           ;psect for function i1_I2C_DO_RESET
 11176  0EE1                     i1_I2C_DO_RESET:	
 11177  0EE1                     i1l2794:	
 11178                           ;incstack = 0
 11179 ;; hardware stack exceeded
 11180                           ; Regs used in i1_I2C_DO_RESET: [wreg+status,2]
 11181                           
 11182                           
 11183                           ;i2c_master.c: 496: I2C_Status.busy = 0;
 11184  0EE1  0021               	movlb	1	; select bank1
 11185  0EE2  10BC               	bcf	(_I2C_Status^(0+128)+28),1
 11186                           
 11187                           ;i2c_master.c: 497: I2C_Status.error = I2C_NOERR;
 11188  0EE3  01BB               	clrf	(_I2C_Status^(0+128)+27)
 11189                           
 11190                           ;i2c_master.c: 498: return I2C_RESET;
 11191  0EE4  300E               	movlw	14
 11192  0EE5  0008               	return
 11193  0EE6                     __end_ofi1_I2C_DO_RESET:	
 11194                           
 11195                           	psect	text83
 11196  0EBB                     __ptext83:	
 11197 ;; *************** function i1_I2C_DO_RX_NACK_RESTART *****************
 11198 ;; Defined at:
 11199 ;;		line 488 in file "mcc_generated_files/i2c_master.c"
 11200 ;; Parameters:    Size  Location     Type
 11201 ;;		None
 11202 ;; Auto vars:     Size  Location     Type
 11203 ;;		None
 11204 ;; Return value:  Size  Location     Type
 11205 ;;                  1    wreg      enum E12103
 11206 ;; Registers used:
 11207 ;;		wreg, status,2, status,0, pclath, cstack
 11208 ;; Tracked objects:
 11209 ;;		On entry : 0/0
 11210 ;;		On exit  : 0/0
 11211 ;;		Unchanged: 0/0
 11212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11217 ;;Total ram usage:        0 bytes
 11218 ;; Hardware stack levels used:    1
 11219 ;; Hardware stack levels required when called:    1
 11220 ;; This function calls:
 11221 ;;		i1_I2C_MasterSendNack
 11222 ;; This function is called by:
 11223 ;;		i1_I2C_DO_RX
 11224 ;; This function uses a non-reentrant model
 11225 ;;
 11226                           
 11227                           
 11228                           ;psect for function i1_I2C_DO_RX_NACK_RESTART
 11229  0EBB                     i1_I2C_DO_RX_NACK_RESTART:	
 11230  0EBB                     i1l2636:	
 11231                           ;incstack = 0
 11232 ;; hardware stack exceeded
 11233                           ; Regs used in i1_I2C_DO_RX_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 11234                           
 11235                           
 11236                           ;i2c_master.c: 490: I2C_MasterSendNack();
 11237  0EBB  318E  269B         	fcall	i1_I2C_MasterSendNack
 11238                           
 11239                           ;i2c_master.c: 491: return I2C_SEND_RESTART;
 11240  0EBD  3009               	movlw	9
 11241  0EBE  0008               	return
 11242  0EBF                     __end_ofi1_I2C_DO_RX_NACK_RESTART:	
 11243                           
 11244                           	psect	text84
 11245  0EB7                     __ptext84:	
 11246 ;; *************** function i1_I2C_DO_RX_NACK_STOP *****************
 11247 ;; Defined at:
 11248 ;;		line 482 in file "mcc_generated_files/i2c_master.c"
 11249 ;; Parameters:    Size  Location     Type
 11250 ;;		None
 11251 ;; Auto vars:     Size  Location     Type
 11252 ;;		None
 11253 ;; Return value:  Size  Location     Type
 11254 ;;                  1    wreg      enum E12103
 11255 ;; Registers used:
 11256 ;;		wreg, status,2, status,0, pclath, cstack
 11257 ;; Tracked objects:
 11258 ;;		On entry : 0/0
 11259 ;;		On exit  : 0/0
 11260 ;;		Unchanged: 0/0
 11261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11265 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11266 ;;Total ram usage:        0 bytes
 11267 ;; Hardware stack levels used:    1
 11268 ;; Hardware stack levels required when called:    1
 11269 ;; This function calls:
 11270 ;;		i1_I2C_MasterSendNack
 11271 ;; This function is called by:
 11272 ;;		i1_I2C_DO_RX
 11273 ;; This function uses a non-reentrant model
 11274 ;;
 11275                           
 11276                           
 11277                           ;psect for function i1_I2C_DO_RX_NACK_STOP
 11278  0EB7                     i1_I2C_DO_RX_NACK_STOP:	
 11279  0EB7                     i1l2630:	
 11280                           ;incstack = 0
 11281 ;; hardware stack exceeded
 11282                           ; Regs used in i1_I2C_DO_RX_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 11283                           
 11284                           
 11285                           ;i2c_master.c: 484: I2C_MasterSendNack();
 11286  0EB7  318E  269B         	fcall	i1_I2C_MasterSendNack
 11287                           
 11288                           ;i2c_master.c: 485: return I2C_SEND_STOP;
 11289  0EB9  300A               	movlw	10
 11290  0EBA  0008               	return
 11291  0EBB                     __end_ofi1_I2C_DO_RX_NACK_STOP:	
 11292                           
 11293                           	psect	text85
 11294  0EB3                     __ptext85:	
 11295 ;; *************** function i1_I2C_DO_RX_ACK *****************
 11296 ;; Defined at:
 11297 ;;		line 475 in file "mcc_generated_files/i2c_master.c"
 11298 ;; Parameters:    Size  Location     Type
 11299 ;;		None
 11300 ;; Auto vars:     Size  Location     Type
 11301 ;;		None
 11302 ;; Return value:  Size  Location     Type
 11303 ;;                  1    wreg      enum E12103
 11304 ;; Registers used:
 11305 ;;		wreg, status,2, status,0, pclath, cstack
 11306 ;; Tracked objects:
 11307 ;;		On entry : 0/0
 11308 ;;		On exit  : 0/0
 11309 ;;		Unchanged: 0/0
 11310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11315 ;;Total ram usage:        0 bytes
 11316 ;; Hardware stack levels used:    1
 11317 ;; Hardware stack levels required when called:    1
 11318 ;; This function calls:
 11319 ;;		i1_I2C_MasterSendAck
 11320 ;; This function is called by:
 11321 ;; This function uses a non-reentrant model
 11322 ;;
 11323                           
 11324                           
 11325                           ;psect for function i1_I2C_DO_RX_ACK
 11326  0EB3                     i1_I2C_DO_RX_ACK:	
 11327  0EB3                     i1l2788:	
 11328                           ;incstack = 0
 11329 ;; hardware stack exceeded
 11330                           ; Regs used in i1_I2C_DO_RX_ACK: [wreg+status,2+status,0+pclath+cstack]
 11331                           
 11332                           
 11333                           ;i2c_master.c: 477: I2C_MasterSendAck();
 11334  0EB3  318E  269F         	fcall	i1_I2C_MasterSendAck
 11335                           
 11336                           ;i2c_master.c: 478: return I2C_RCEN;
 11337  0EB5  3005               	movlw	5
 11338  0EB6  0008               	return
 11339  0EB7                     __end_ofi1_I2C_DO_RX_ACK:	
 11340                           
 11341                           	psect	text86
 11342  0EAF                     __ptext86:	
 11343 ;; *************** function i1_I2C_DO_SEND_STOP *****************
 11344 ;; Defined at:
 11345 ;;		line 469 in file "mcc_generated_files/i2c_master.c"
 11346 ;; Parameters:    Size  Location     Type
 11347 ;;		None
 11348 ;; Auto vars:     Size  Location     Type
 11349 ;;		None
 11350 ;; Return value:  Size  Location     Type
 11351 ;;                  1    wreg      enum E12103
 11352 ;; Registers used:
 11353 ;;		wreg, status,2, status,0, pclath, cstack
 11354 ;; Tracked objects:
 11355 ;;		On entry : 0/0
 11356 ;;		On exit  : 0/0
 11357 ;;		Unchanged: 0/0
 11358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11362 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11363 ;;Total ram usage:        0 bytes
 11364 ;; Hardware stack levels used:    1
 11365 ;; Hardware stack levels required when called:    1
 11366 ;; This function calls:
 11367 ;;		i1_I2C_MasterStop
 11368 ;; This function is called by:
 11369 ;;		i1_I2C_DO_TX
 11370 ;;		i1_I2C_DO_TX_EMPTY
 11371 ;;		i1_I2C_DO_ADDRESS_NACK
 11372 ;; This function uses a non-reentrant model
 11373 ;;
 11374                           
 11375                           
 11376                           ;psect for function i1_I2C_DO_SEND_STOP
 11377  0EAF                     i1_I2C_DO_SEND_STOP:	
 11378  0EAF                     i1l2624:	
 11379                           ;incstack = 0
 11380 ;; hardware stack exceeded
 11381                           ; Regs used in i1_I2C_DO_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 11382                           
 11383                           
 11384                           ;i2c_master.c: 471: I2C_MasterStop();
 11385  0EAF  318E  2667         	fcall	i1_I2C_MasterStop
 11386                           
 11387                           ;i2c_master.c: 472: return I2C_IDLE;
 11388  0EB1  3000               	movlw	0
 11389  0EB2  0008               	return
 11390  0EB3                     __end_ofi1_I2C_DO_SEND_STOP:	
 11391                           
 11392                           	psect	text87
 11393  0EAB                     __ptext87:	
 11394 ;; *************** function i1_I2C_DO_SEND_RESTART *****************
 11395 ;; Defined at:
 11396 ;;		line 463 in file "mcc_generated_files/i2c_master.c"
 11397 ;; Parameters:    Size  Location     Type
 11398 ;;		None
 11399 ;; Auto vars:     Size  Location     Type
 11400 ;;		None
 11401 ;; Return value:  Size  Location     Type
 11402 ;;                  1    wreg      enum E12103
 11403 ;; Registers used:
 11404 ;;		wreg, status,2, status,0, pclath, cstack
 11405 ;; Tracked objects:
 11406 ;;		On entry : 0/0
 11407 ;;		On exit  : 0/0
 11408 ;;		Unchanged: 0/0
 11409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11414 ;;Total ram usage:        0 bytes
 11415 ;; Hardware stack levels used:    1
 11416 ;; Hardware stack levels required when called:    1
 11417 ;; This function calls:
 11418 ;;		i1_I2C_MasterEnableRestart
 11419 ;; This function is called by:
 11420 ;;		i1_I2C_DO_TX_EMPTY
 11421 ;;		i1_I2C_DO_ADDRESS_NACK
 11422 ;; This function uses a non-reentrant model
 11423 ;;
 11424                           
 11425                           
 11426                           ;psect for function i1_I2C_DO_SEND_RESTART
 11427  0EAB                     i1_I2C_DO_SEND_RESTART:	
 11428  0EAB                     i1l2618:	
 11429                           ;incstack = 0
 11430 ;; hardware stack exceeded
 11431                           ; Regs used in i1_I2C_DO_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 11432                           
 11433                           
 11434                           ;i2c_master.c: 465: I2C_MasterEnableRestart();
 11435  0EAB  318E  2664         	fcall	i1_I2C_MasterEnableRestart
 11436                           
 11437                           ;i2c_master.c: 466: return I2C_SEND_ADR_READ;
 11438  0EAD  3001               	movlw	1
 11439  0EAE  0008               	return
 11440  0EAF                     __end_ofi1_I2C_DO_SEND_RESTART:	
 11441                           
 11442                           	psect	text88
 11443  0EA7                     __ptext88:	
 11444 ;; *************** function i1_I2C_DO_SEND_RESTART_WRITE *****************
 11445 ;; Defined at:
 11446 ;;		line 456 in file "mcc_generated_files/i2c_master.c"
 11447 ;; Parameters:    Size  Location     Type
 11448 ;;		None
 11449 ;; Auto vars:     Size  Location     Type
 11450 ;;		None
 11451 ;; Return value:  Size  Location     Type
 11452 ;;                  1    wreg      enum E12103
 11453 ;; Registers used:
 11454 ;;		wreg, status,2, status,0, pclath, cstack
 11455 ;; Tracked objects:
 11456 ;;		On entry : 0/0
 11457 ;;		On exit  : 0/0
 11458 ;;		Unchanged: 0/0
 11459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11463 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11464 ;;Total ram usage:        0 bytes
 11465 ;; Hardware stack levels used:    1
 11466 ;; Hardware stack levels required when called:    1
 11467 ;; This function calls:
 11468 ;;		i1_I2C_MasterEnableRestart
 11469 ;; This function is called by:
 11470 ;;		i1_I2C_DO_TX
 11471 ;; This function uses a non-reentrant model
 11472 ;;
 11473                           
 11474                           
 11475                           ;psect for function i1_I2C_DO_SEND_RESTART_WRITE
 11476  0EA7                     i1_I2C_DO_SEND_RESTART_WRITE:	
 11477  0EA7                     i1l2612:	
 11478                           ;incstack = 0
 11479 ;; hardware stack exceeded
 11480                           ; Regs used in i1_I2C_DO_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 11481                           
 11482                           
 11483                           ;i2c_master.c: 458: I2C_MasterEnableRestart();
 11484  0EA7  318E  2664         	fcall	i1_I2C_MasterEnableRestart
 11485                           
 11486                           ;i2c_master.c: 459: return I2C_SEND_ADR_WRITE;
 11487  0EA9  3002               	movlw	2
 11488  0EAA  0008               	return
 11489  0EAB                     __end_ofi1_I2C_DO_SEND_RESTART_WRITE:	
 11490                           
 11491                           	psect	text89
 11492  0EA3                     __ptext89:	
 11493 ;; *************** function i1_I2C_DO_SEND_RESTART_READ *****************
 11494 ;; Defined at:
 11495 ;;		line 450 in file "mcc_generated_files/i2c_master.c"
 11496 ;; Parameters:    Size  Location     Type
 11497 ;;		None
 11498 ;; Auto vars:     Size  Location     Type
 11499 ;;		None
 11500 ;; Return value:  Size  Location     Type
 11501 ;;                  1    wreg      enum E12103
 11502 ;; Registers used:
 11503 ;;		wreg, status,2, status,0, pclath, cstack
 11504 ;; Tracked objects:
 11505 ;;		On entry : 0/0
 11506 ;;		On exit  : 0/0
 11507 ;;		Unchanged: 0/0
 11508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11512 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11513 ;;Total ram usage:        0 bytes
 11514 ;; Hardware stack levels used:    1
 11515 ;; Hardware stack levels required when called:    1
 11516 ;; This function calls:
 11517 ;;		i1_I2C_MasterEnableRestart
 11518 ;; This function is called by:
 11519 ;;		i1_I2C_DO_TX
 11520 ;; This function uses a non-reentrant model
 11521 ;;
 11522                           
 11523                           
 11524                           ;psect for function i1_I2C_DO_SEND_RESTART_READ
 11525  0EA3                     i1_I2C_DO_SEND_RESTART_READ:	
 11526  0EA3                     i1l2606:	
 11527                           ;incstack = 0
 11528 ;; hardware stack exceeded
 11529                           ; Regs used in i1_I2C_DO_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 11530                           
 11531                           
 11532                           ;i2c_master.c: 452: I2C_MasterEnableRestart();
 11533  0EA3  318E  2664         	fcall	i1_I2C_MasterEnableRestart
 11534                           
 11535                           ;i2c_master.c: 453: return I2C_SEND_ADR_READ;
 11536  0EA5  3001               	movlw	1
 11537  0EA6  0008               	return
 11538  0EA7                     __end_ofi1_I2C_DO_SEND_RESTART_READ:	
 11539                           
 11540                           	psect	text90
 11541  0EF1                     __ptext90:	
 11542 ;; *************** function i1_I2C_DO_RCEN *****************
 11543 ;; Defined at:
 11544 ;;		line 402 in file "mcc_generated_files/i2c_master.c"
 11545 ;; Parameters:    Size  Location     Type
 11546 ;;		None
 11547 ;; Auto vars:     Size  Location     Type
 11548 ;;		None
 11549 ;; Return value:  Size  Location     Type
 11550 ;;                  1    wreg      enum E12103
 11551 ;; Registers used:
 11552 ;;		wreg, status,2, status,0, pclath, cstack
 11553 ;; Tracked objects:
 11554 ;;		On entry : 0/0
 11555 ;;		On exit  : 0/0
 11556 ;;		Unchanged: 0/0
 11557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11562 ;;Total ram usage:        0 bytes
 11563 ;; Hardware stack levels used:    1
 11564 ;; Hardware stack levels required when called:    1
 11565 ;; This function calls:
 11566 ;;		i1_I2C_MasterStartRx
 11567 ;; This function is called by:
 11568 ;; This function uses a non-reentrant model
 11569 ;;
 11570                           
 11571                           
 11572                           ;psect for function i1_I2C_DO_RCEN
 11573  0EF1                     i1_I2C_DO_RCEN:	
 11574  0EF1                     i1l2760:	
 11575                           ;incstack = 0
 11576 ;; hardware stack exceeded
 11577                           ; Regs used in i1_I2C_DO_RCEN: [wreg+status,2+status,0+pclath+cstack]
 11578                           
 11579                           
 11580                           ;i2c_master.c: 404: I2C_Status.addressNackCheck = 0;
 11581  0EF1  0021               	movlb	1	; select bank1
 11582  0EF2  103C               	bcf	(_I2C_Status^(0+128)+28),0
 11583                           
 11584                           ;i2c_master.c: 405: I2C_MasterStartRx();
 11585  0EF3  318E  266A         	fcall	i1_I2C_MasterStartRx
 11586                           
 11587                           ;i2c_master.c: 406: return I2C_RX;
 11588  0EF5  3004               	movlw	4
 11589  0EF6  0008               	return
 11590  0EF7                     __end_ofi1_I2C_DO_RCEN:	
 11591                           
 11592                           	psect	text91
 11593  036F                     __ptext91:	
 11594 ;; *************** function i1_I2C_DO_RX *****************
 11595 ;; Defined at:
 11596 ;;		line 378 in file "mcc_generated_files/i2c_master.c"
 11597 ;; Parameters:    Size  Location     Type
 11598 ;;		None
 11599 ;; Auto vars:     Size  Location     Type
 11600 ;;		None
 11601 ;; Return value:  Size  Location     Type
 11602 ;;                  1    wreg      enum E12103
 11603 ;; Registers used:
 11604 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11605 ;; Tracked objects:
 11606 ;;		On entry : 0/0
 11607 ;;		On exit  : 0/0
 11608 ;;		Unchanged: 0/0
 11609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11612 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11613 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11614 ;;Total ram usage:        1 bytes
 11615 ;; Hardware stack levels used:    1
 11616 ;; Hardware stack levels required when called:    3
 11617 ;; This function calls:
 11618 ;;		Absolute function
 11619 ;;		i1_I2C_CallbackReturnReset
 11620 ;;		i1_I2C_CallbackReturnStop
 11621 ;;		i1_I2C_DO_RX_NACK_RESTART
 11622 ;;		i1_I2C_DO_RX_NACK_STOP
 11623 ;;		i1_I2C_MasterGetRxData
 11624 ;;		i1_I2C_MasterSendAck
 11625 ;;		i1_rd1RegCompleteHandler
 11626 ;;		i1_rd2RegCompleteHandler
 11627 ;;		i1_rdBlkRegCompleteHandler
 11628 ;;		i1_wr1RegCompleteHandler
 11629 ;;		i1_wr2RegCompleteHandler
 11630 ;; This function is called by:
 11631 ;; This function uses a non-reentrant model
 11632 ;;
 11633                           
 11634                           
 11635                           ;psect for function i1_I2C_DO_RX
 11636  036F                     i1_I2C_DO_RX:	
 11637  036F                     i1l5584:	
 11638                           ;incstack = 0
 11639 ;; hardware stack exceeded
 11640                           ; Regs used in i1_I2C_DO_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11641                           
 11642                           
 11643                           ;i2c_master.c: 380: *I2C_Status.data_ptr++ = I2C_MasterGetRxData();
 11644  036F  318E  266D  3183   	fcall	i1_I2C_MasterGetRxData
 11645  0372  00FA               	movwf	??i1_I2C_DO_RX
 11646  0373  0021               	movlb	1	; select bank1
 11647  0374  0837               	movf	(low ((_I2C_Status| 0+23)))^(0+128),w
 11648  0375  0086               	movwf	6
 11649  0376  0187               	clrf	7
 11650  0377  087A               	movf	??i1_I2C_DO_RX,w
 11651  0378  0081               	movwf	1
 11652  0379  3001               	movlw	1
 11653  037A  00FA               	movwf	??i1_I2C_DO_RX
 11654  037B  087A               	movf	??i1_I2C_DO_RX,w
 11655  037C  07B7               	addwf	(low ((_I2C_Status| 0+23)))^(0+128),f
 11656                           
 11657                           ;i2c_master.c: 381: if(--I2C_Status.data_length)
 11658  037D  3001               	movlw	1
 11659  037E  02B8               	subwf	(_I2C_Status^(0+128)+24),f
 11660  037F  3000               	movlw	0
 11661  0380  3BB9               	subwfb	((_I2C_Status+1)^(0+128)+24),f
 11662  0381  0838               	movf	(_I2C_Status^(0+128)+24),w
 11663  0382  0439               	iorwf	((_I2C_Status+1)^(0+128)+24),w
 11664  0383  1903               	btfsc	3,2
 11665  0384  2B89               	goto	i1l403
 11666                           
 11667                           ;i2c_master.c: 382: {
 11668                           ;i2c_master.c: 383: I2C_MasterSendAck();
 11669  0385  318E  269F         	fcall	i1_I2C_MasterSendAck
 11670                           
 11671                           ;i2c_master.c: 384: return I2C_RCEN;
 11672  0387  3005               	movlw	5
 11673                           
 11674                           ;i2c_master.c: 385: }
 11675  0388  0008               	return
 11676  0389                     i1l403:	
 11677                           
 11678                           ;i2c_master.c: 386: else
 11679                           ;i2c_master.c: 387: {
 11680                           ;i2c_master.c: 388: I2C_Status.bufferFree = 1;
 11681  0389  15BC               	bsf	(_I2C_Status^(0+128)+28),3
 11682                           
 11683                           ;i2c_master.c: 389: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
 11684  038A  2B91               	goto	i1l5608
 11685  038B                     i1l5598:	
 11686                           ;i2c_master.c: 390: {
 11687                           ;i2c_master.c: 391: case I2C_RESTART_WRITE:
 11688                           
 11689                           
 11690                           ;i2c_master.c: 392: case I2C_RESTART_READ:
 11691                           ;i2c_master.c: 393: return I2C_DO_RX_NACK_RESTART();
 11692  038B  318E  26BB         	fcall	i1_I2C_DO_RX_NACK_RESTART
 11693  038D  0008               	return
 11694  038E                     i1l5602:	
 11695                           ;i2c_master.c: 395: case I2C_CONTINUE:
 11696                           
 11697                           ;i2c_master.c: 394: default:
 11698                           
 11699                           
 11700                           ;i2c_master.c: 396: case I2C_STOP:
 11701                           ;i2c_master.c: 397: return I2C_DO_RX_NACK_STOP();
 11702  038E  318E  26B7         	fcall	i1_I2C_DO_RX_NACK_STOP
 11703                           
 11704                           ;i2c_master.c: 398: }
 11705  0390  0008               	return
 11706  0391                     i1l5608:	
 11707  0391  0021               	movlb	1	; select bank1
 11708  0392  082C               	movf	(low ((_I2C_Status| 0+12)))^(0+128),w
 11709  0393  00FA               	movwf	??i1_I2C_DO_RX
 11710  0394  087A               	movf	??i1_I2C_DO_RX,w
 11711  0395  00F9               	movwf	i1I2C_CallbackReturnReset@funPtr
 11712  0396  0821               	movf	(_I2C_Status+1)^(0+128),w
 11713  0397  008A               	movwf	10
 11714  0398  0820               	movf	_I2C_Status^(0+128),w
 11715  0399  000A               	callw
 11716  039A  3183               	pagesel	$
 11717                           
 11718                           ; Switch size 1, requested type "space"
 11719                           ; Number of cases is 4, Range of values is 1 to 4
 11720                           ; switch strategies available:
 11721                           ; Name         Instructions Cycles
 11722                           ; simple_byte           13     7 (average)
 11723                           ; direct_byte           17     9 (fixed)
 11724                           ; jumptable            263     9 (fixed)
 11725                           ;	Chosen strategy is simple_byte
 11726  039B  3A01               	xorlw	1	; case 1
 11727  039C  1903               	skipnz
 11728  039D  2B8E               	goto	i1l5602
 11729  039E  3A03               	xorlw	3	; case 2
 11730  039F  1903               	skipnz
 11731  03A0  2B8B               	goto	i1l5598
 11732  03A1  3A01               	xorlw	1	; case 3
 11733  03A2  1903               	skipnz
 11734  03A3  2B8B               	goto	i1l5598
 11735  03A4  3A07               	xorlw	7	; case 4
 11736  03A5  1903               	skipnz
 11737  03A6  2B8E               	goto	i1l5602
 11738  03A7  2B8E               	goto	i1l5602
 11739  03A8  0008               	return
 11740  03A9                     __end_ofi1_I2C_DO_RX:	
 11741                           
 11742                           	psect	text92
 11743  0229                     __ptext92:	
 11744 ;; *************** function i1_I2C_DO_TX *****************
 11745 ;; Defined at:
 11746 ;;		line 354 in file "mcc_generated_files/i2c_master.c"
 11747 ;; Parameters:    Size  Location     Type
 11748 ;;		None
 11749 ;; Auto vars:     Size  Location     Type
 11750 ;;		None
 11751 ;; Return value:  Size  Location     Type
 11752 ;;                  1    wreg      enum E12103
 11753 ;; Registers used:
 11754 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11755 ;; Tracked objects:
 11756 ;;		On entry : 0/0
 11757 ;;		On exit  : 0/0
 11758 ;;		Unchanged: 0/0
 11759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11761 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11762 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11763 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11764 ;;Total ram usage:        3 bytes
 11765 ;; Hardware stack levels used:    1
 11766 ;; Hardware stack levels required when called:    3
 11767 ;; This function calls:
 11768 ;;		Absolute function
 11769 ;;		i1_I2C_CallbackReturnReset
 11770 ;;		i1_I2C_CallbackReturnStop
 11771 ;;		i1_I2C_DO_SEND_RESTART_READ
 11772 ;;		i1_I2C_DO_SEND_RESTART_WRITE
 11773 ;;		i1_I2C_DO_SEND_STOP
 11774 ;;		i1_I2C_MasterIsNack
 11775 ;;		i1_I2C_MasterSendTxData
 11776 ;;		i1_rd1RegCompleteHandler
 11777 ;;		i1_rd2RegCompleteHandler
 11778 ;;		i1_rdBlkRegCompleteHandler
 11779 ;;		i1_wr1RegCompleteHandler
 11780 ;;		i1_wr2RegCompleteHandler
 11781 ;; This function is called by:
 11782 ;; This function uses a non-reentrant model
 11783 ;;
 11784                           
 11785                           
 11786                           ;psect for function i1_I2C_DO_TX
 11787  0229                     i1_I2C_DO_TX:	
 11788  0229                     i1l5554:	
 11789                           ;incstack = 0
 11790 ;; hardware stack exceeded
 11791                           ; Regs used in i1_I2C_DO_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11792                           
 11793                           
 11794                           ;i2c_master.c: 356: if(I2C_MasterIsNack())
 11795  0229  318E  26EB  3182   	fcall	i1_I2C_MasterIsNack
 11796  022C  3A00               	xorlw	0
 11797  022D  1D03               	btfss	3,2
 11798  022E  2A39               	goto	i1l5572
 11799  022F  2A55               	goto	i1l387
 11800  0230                     i1l5558:	
 11801                           ;i2c_master.c: 359: {
 11802                           ;i2c_master.c: 360: case I2C_RESTART_READ:
 11803                           
 11804                           ;i2c_master.c: 357: {
 11805                           ;i2c_master.c: 358: switch(I2C_Status.callbackTable[I2C_DATA_NACK](I2C_Status.callbackPa
      +                          yload[I2C_DATA_NACK]))
 11806                           
 11807                           
 11808                           ;i2c_master.c: 361: return I2C_DO_SEND_RESTART_READ();
 11809  0230  318E  26A3         	fcall	i1_I2C_DO_SEND_RESTART_READ
 11810  0232  0008               	return
 11811  0233                     i1l5562:	
 11812                           ;i2c_master.c: 362: case I2C_RESTART_WRITE:
 11813                           
 11814                           
 11815                           ;i2c_master.c: 363: return I2C_DO_SEND_RESTART_WRITE();
 11816  0233  318E  26A7         	fcall	i1_I2C_DO_SEND_RESTART_WRITE
 11817  0235  0008               	return
 11818  0236                     i1l5566:	
 11819                           ;i2c_master.c: 365: case I2C_CONTINUE:
 11820                           
 11821                           ;i2c_master.c: 364: default:
 11822                           
 11823                           
 11824                           ;i2c_master.c: 366: case I2C_STOP:
 11825                           ;i2c_master.c: 367: return I2C_DO_SEND_STOP();
 11826  0236  318E  26AF         	fcall	i1_I2C_DO_SEND_STOP
 11827                           
 11828                           ;i2c_master.c: 368: }
 11829  0238  0008               	return
 11830  0239                     i1l5572:	
 11831  0239  0021               	movlb	1	; select bank1
 11832  023A  082F               	movf	(low ((_I2C_Status| 0+15)))^(0+128),w
 11833  023B  00FA               	movwf	??i1_I2C_DO_TX
 11834  023C  087A               	movf	??i1_I2C_DO_TX,w
 11835  023D  00F9               	movwf	i1I2C_CallbackReturnReset@funPtr
 11836  023E  3006               	movlw	6
 11837  023F  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
 11838  0240  0086               	movwf	6
 11839  0241  0187               	clrf	7
 11840  0242  3F41               	moviw [1]fsr1
 11841  0243  008A               	movwf	10
 11842  0244  3F40               	moviw [0]fsr1
 11843  0245  000A               	callw
 11844  0246  3182               	pagesel	$
 11845                           
 11846                           ; Switch size 1, requested type "space"
 11847                           ; Number of cases is 4, Range of values is 1 to 4
 11848                           ; switch strategies available:
 11849                           ; Name         Instructions Cycles
 11850                           ; simple_byte           13     7 (average)
 11851                           ; direct_byte           17     9 (fixed)
 11852                           ; jumptable            263     9 (fixed)
 11853                           ;	Chosen strategy is simple_byte
 11854  0247  3A01               	xorlw	1	; case 1
 11855  0248  1903               	skipnz
 11856  0249  2A36               	goto	i1l5566
 11857  024A  3A03               	xorlw	3	; case 2
 11858  024B  1903               	skipnz
 11859  024C  2A30               	goto	i1l5558
 11860  024D  3A01               	xorlw	1	; case 3
 11861  024E  1903               	skipnz
 11862  024F  2A33               	goto	i1l5562
 11863  0250  3A07               	xorlw	7	; case 4
 11864  0251  1903               	skipnz
 11865  0252  2A36               	goto	i1l5566
 11866  0253  2A36               	goto	i1l5566
 11867                           
 11868                           ;i2c_master.c: 369: }
 11869  0254  0008               	return
 11870  0255                     i1l387:	
 11871                           
 11872                           ;i2c_master.c: 370: else
 11873                           ;i2c_master.c: 371: {
 11874                           ;i2c_master.c: 372: I2C_Status.addressNackCheck = 0;
 11875  0255  0021               	movlb	1	; select bank1
 11876  0256  103C               	bcf	(_I2C_Status^(0+128)+28),0
 11877                           
 11878                           ;i2c_master.c: 373: I2C_MasterSendTxData(*I2C_Status.data_ptr++);
 11879  0257  3017               	movlw	23
 11880  0258  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
 11881  0259  0086               	movwf	6
 11882  025A  0187               	clrf	7
 11883  025B  3F40               	moviw [0]fsr1
 11884  025C  0084               	movwf	4
 11885  025D  0185               	clrf	5
 11886  025E  0A81               	incf	1,f
 11887  025F  0800               	movf	0,w
 11888  0260  318E  26D7  3182   	fcall	i1_I2C_MasterSendTxData
 11889                           
 11890                           ;i2c_master.c: 374: return (--I2C_Status.data_length)?I2C_TX:I2C_TX_EMPTY;
 11891  0263  3001               	movlw	1
 11892  0264  0021               	movlb	1	; select bank1
 11893  0265  02B8               	subwf	(_I2C_Status^(0+128)+24),f
 11894  0266  3000               	movlw	0
 11895  0267  3BB9               	subwfb	((_I2C_Status+1)^(0+128)+24),f
 11896  0268  0838               	movf	(_I2C_Status^(0+128)+24),w
 11897  0269  0439               	iorwf	((_I2C_Status+1)^(0+128)+24),w
 11898  026A  1D03               	btfss	3,2
 11899  026B  2A6E               	goto	i1l5580
 11900  026C  3006               	movlw	6
 11901  026D  2A6F               	goto	L2
 11902  026E                     i1l5580:	
 11903  026E  3003               	movlw	3
 11904  026F                     L2:	
 11905  026F  00FB               	movwf	i1_I2C_DO_TX$794
 11906  0270  3000               	movlw	0
 11907  0271  00FC               	movwf	i1_I2C_DO_TX$794+1
 11908  0272  087B               	movf	i1_I2C_DO_TX$794,w
 11909  0273  0008               	return
 11910  0274                     __end_ofi1_I2C_DO_TX:	
 11911                           
 11912                           	psect	text93
 11913  0F2D                     __ptext93:	
 11914 ;; *************** function i1_I2C_DO_SEND_ADR_WRITE *****************
 11915 ;; Defined at:
 11916 ;;		line 347 in file "mcc_generated_files/i2c_master.c"
 11917 ;; Parameters:    Size  Location     Type
 11918 ;;		None
 11919 ;; Auto vars:     Size  Location     Type
 11920 ;;		None
 11921 ;; Return value:  Size  Location     Type
 11922 ;;                  1    wreg      enum E12103
 11923 ;; Registers used:
 11924 ;;		wreg, status,2, status,0, pclath, cstack
 11925 ;; Tracked objects:
 11926 ;;		On entry : 0/0
 11927 ;;		On exit  : 0/0
 11928 ;;		Unchanged: 0/0
 11929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11934 ;;Total ram usage:        0 bytes
 11935 ;; Hardware stack levels used:    1
 11936 ;; Hardware stack levels required when called:    1
 11937 ;; This function calls:
 11938 ;;		i1_I2C_MasterSendTxData
 11939 ;; This function is called by:
 11940 ;; This function uses a non-reentrant model
 11941 ;;
 11942                           
 11943                           
 11944                           ;psect for function i1_I2C_DO_SEND_ADR_WRITE
 11945  0F2D                     i1_I2C_DO_SEND_ADR_WRITE:	
 11946  0F2D                     i1l2696:	
 11947                           ;incstack = 0
 11948 ;; hardware stack exceeded
 11949                           ; Regs used in i1_I2C_DO_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 11950                           
 11951                           
 11952                           ;i2c_master.c: 349: I2C_Status.addressNackCheck = 1;
 11953  0F2D  0021               	movlb	1	; select bank1
 11954  0F2E  143C               	bsf	(_I2C_Status^(0+128)+28),0
 11955                           
 11956                           ;i2c_master.c: 350: I2C_MasterSendTxData(I2C_Status.address << 1);
 11957  0F2F  3536               	lslf	(_I2C_Status^(0+128)+22),w
 11958  0F30  318E  26D7         	fcall	i1_I2C_MasterSendTxData
 11959                           
 11960                           ;i2c_master.c: 351: return I2C_TX;
 11961  0F32  3003               	movlw	3
 11962  0F33  0008               	return
 11963  0F34                     __end_ofi1_I2C_DO_SEND_ADR_WRITE:	
 11964                           
 11965                           	psect	text94
 11966  0F43                     __ptext94:	
 11967 ;; *************** function i1_I2C_DO_SEND_ADR_READ *****************
 11968 ;; Defined at:
 11969 ;;		line 340 in file "mcc_generated_files/i2c_master.c"
 11970 ;; Parameters:    Size  Location     Type
 11971 ;;		None
 11972 ;; Auto vars:     Size  Location     Type
 11973 ;;		None
 11974 ;; Return value:  Size  Location     Type
 11975 ;;                  1    wreg      enum E12103
 11976 ;; Registers used:
 11977 ;;		wreg, status,2, status,0, pclath, cstack
 11978 ;; Tracked objects:
 11979 ;;		On entry : 0/0
 11980 ;;		On exit  : 0/0
 11981 ;;		Unchanged: 0/0
 11982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11987 ;;Total ram usage:        0 bytes
 11988 ;; Hardware stack levels used:    1
 11989 ;; Hardware stack levels required when called:    1
 11990 ;; This function calls:
 11991 ;;		i1_I2C_MasterSendTxData
 11992 ;; This function is called by:
 11993 ;; This function uses a non-reentrant model
 11994 ;;
 11995                           
 11996                           
 11997                           ;psect for function i1_I2C_DO_SEND_ADR_READ
 11998  0F43                     i1_I2C_DO_SEND_ADR_READ:	
 11999  0F43                     i1l2688:	
 12000                           ;incstack = 0
 12001 ;; hardware stack exceeded
 12002                           ; Regs used in i1_I2C_DO_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 12003                           
 12004                           
 12005                           ;i2c_master.c: 342: I2C_Status.addressNackCheck = 1;
 12006  0F43  0021               	movlb	1	; select bank1
 12007  0F44  143C               	bsf	(_I2C_Status^(0+128)+28),0
 12008                           
 12009                           ;i2c_master.c: 343: I2C_MasterSendTxData(I2C_Status.address << 1 | 1);
 12010  0F45  1403               	setc
 12011  0F46  0D36               	rlf	(_I2C_Status^(0+128)+22),w
 12012  0F47  318E  26D7         	fcall	i1_I2C_MasterSendTxData
 12013                           
 12014                           ;i2c_master.c: 344: return I2C_RCEN;
 12015  0F49  3005               	movlw	5
 12016  0F4A  0008               	return
 12017  0F4B                     __end_ofi1_I2C_DO_SEND_ADR_READ:	
 12018                           
 12019                           	psect	text95
 12020  0EDC                     __ptext95:	
 12021 ;; *************** function i1_I2C_DO_IDLE *****************
 12022 ;; Defined at:
 12023 ;;		line 333 in file "mcc_generated_files/i2c_master.c"
 12024 ;; Parameters:    Size  Location     Type
 12025 ;;		None
 12026 ;; Auto vars:     Size  Location     Type
 12027 ;;		None
 12028 ;; Return value:  Size  Location     Type
 12029 ;;                  1    wreg      enum E12103
 12030 ;; Registers used:
 12031 ;;		wreg, status,2
 12032 ;; Tracked objects:
 12033 ;;		On entry : 0/0
 12034 ;;		On exit  : 0/0
 12035 ;;		Unchanged: 0/0
 12036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12041 ;;Total ram usage:        0 bytes
 12042 ;; Hardware stack levels used:    1
 12043 ;; This function calls:
 12044 ;;		Nothing
 12045 ;; This function is called by:
 12046 ;; This function uses a non-reentrant model
 12047 ;;
 12048                           
 12049                           
 12050                           ;psect for function i1_I2C_DO_IDLE
 12051  0EDC                     i1_I2C_DO_IDLE:	
 12052  0EDC                     i1l2680:	
 12053                           ;incstack = 0
 12054 ;; hardware stack exceeded
 12055                           ; Regs used in i1_I2C_DO_IDLE: [wreg+status,2]
 12056                           
 12057                           
 12058                           ;i2c_master.c: 335: I2C_Status.busy = 0;
 12059  0EDC  0021               	movlb	1	; select bank1
 12060  0EDD  10BC               	bcf	(_I2C_Status^(0+128)+28),1
 12061                           
 12062                           ;i2c_master.c: 336: I2C_Status.error = I2C_NOERR;
 12063  0EDE  01BB               	clrf	(_I2C_Status^(0+128)+27)
 12064                           
 12065                           ;i2c_master.c: 337: return I2C_RESET;
 12066  0EDF  300E               	movlw	14
 12067  0EE0  0008               	return
 12068  0EE1                     __end_ofi1_I2C_DO_IDLE:	
 12069                           
 12070                           	psect	text96
 12071  0571                     __ptext96:	
 12072 ;; *************** function i1_I2C_DO_TX_EMPTY *****************
 12073 ;; Defined at:
 12074 ;;		line 409 in file "mcc_generated_files/i2c_master.c"
 12075 ;; Parameters:    Size  Location     Type
 12076 ;;		None
 12077 ;; Auto vars:     Size  Location     Type
 12078 ;;		None
 12079 ;; Return value:  Size  Location     Type
 12080 ;;                  1    wreg      enum E12103
 12081 ;; Registers used:
 12082 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12083 ;; Tracked objects:
 12084 ;;		On entry : 0/0
 12085 ;;		On exit  : 0/0
 12086 ;;		Unchanged: 0/0
 12087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12090 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12091 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12092 ;;Total ram usage:        1 bytes
 12093 ;; Hardware stack levels used:    1
 12094 ;; Hardware stack levels required when called:    3
 12095 ;; This function calls:
 12096 ;;		Absolute function
 12097 ;;		i1_I2C_CallbackReturnReset
 12098 ;;		i1_I2C_CallbackReturnStop
 12099 ;;		i1_I2C_DO_SEND_RESTART
 12100 ;;		i1_I2C_DO_SEND_STOP
 12101 ;;		i1_I2C_MasterSetIrq
 12102 ;;		i1_rd1RegCompleteHandler
 12103 ;;		i1_rd2RegCompleteHandler
 12104 ;;		i1_rdBlkRegCompleteHandler
 12105 ;;		i1_wr1RegCompleteHandler
 12106 ;;		i1_wr2RegCompleteHandler
 12107 ;; This function is called by:
 12108 ;; This function uses a non-reentrant model
 12109 ;;
 12110                           
 12111                           
 12112                           ;psect for function i1_I2C_DO_TX_EMPTY
 12113  0571                     i1_I2C_DO_TX_EMPTY:	
 12114  0571                     i1l5610:	
 12115                           ;incstack = 0
 12116 ;; hardware stack exceeded
 12117                           ; Regs used in i1_I2C_DO_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12118                           
 12119                           
 12120                           ;i2c_master.c: 411: I2C_Status.bufferFree = 1;
 12121  0571  0021               	movlb	1	; select bank1
 12122  0572  15BC               	bsf	(_I2C_Status^(0+128)+28),3
 12123                           
 12124                           ;i2c_master.c: 412: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
 12125  0573  2D7E               	goto	i1l5628
 12126  0574                     i1l5612:	
 12127                           ;i2c_master.c: 413: {
 12128                           ;i2c_master.c: 414: case I2C_RESTART_READ:
 12129                           
 12130                           
 12131                           ;i2c_master.c: 415: case I2C_RESTART_WRITE:
 12132                           ;i2c_master.c: 416: return I2C_DO_SEND_RESTART();
 12133  0574  318E  26AB         	fcall	i1_I2C_DO_SEND_RESTART
 12134  0576  0008               	return
 12135  0577                     i1l5616:	
 12136                           ;i2c_master.c: 417: case I2C_CONTINUE:
 12137                           
 12138                           
 12139                           ;i2c_master.c: 418: I2C_MasterSetIrq();
 12140  0577  318E  2670         	fcall	i1_I2C_MasterSetIrq
 12141                           
 12142                           ;i2c_master.c: 419: return I2C_TX;
 12143  0579  3003               	movlw	3
 12144  057A  0008               	return
 12145  057B                     i1l5622:	
 12146                           ;i2c_master.c: 421: case I2C_STOP:
 12147                           
 12148                           ;i2c_master.c: 420: default:
 12149                           
 12150                           
 12151                           ;i2c_master.c: 422: return I2C_DO_SEND_STOP();
 12152  057B  318E  26AF         	fcall	i1_I2C_DO_SEND_STOP
 12153                           
 12154                           ;i2c_master.c: 423: }
 12155  057D  0008               	return
 12156  057E                     i1l5628:	
 12157  057E  0021               	movlb	1	; select bank1
 12158  057F  082C               	movf	(low ((_I2C_Status| 0+12)))^(0+128),w
 12159  0580  00FA               	movwf	??i1_I2C_DO_TX_EMPTY
 12160  0581  087A               	movf	??i1_I2C_DO_TX_EMPTY,w
 12161  0582  00F9               	movwf	i1I2C_CallbackReturnReset@funPtr
 12162  0583  0821               	movf	(_I2C_Status+1)^(0+128),w
 12163  0584  008A               	movwf	10
 12164  0585  0820               	movf	_I2C_Status^(0+128),w
 12165  0586  000A               	callw
 12166  0587  3185               	pagesel	$
 12167                           
 12168                           ; Switch size 1, requested type "space"
 12169                           ; Number of cases is 4, Range of values is 1 to 4
 12170                           ; switch strategies available:
 12171                           ; Name         Instructions Cycles
 12172                           ; simple_byte           13     7 (average)
 12173                           ; direct_byte           17     9 (fixed)
 12174                           ; jumptable            263     9 (fixed)
 12175                           ;	Chosen strategy is simple_byte
 12176  0588  3A01               	xorlw	1	; case 1
 12177  0589  1903               	skipnz
 12178  058A  2D7B               	goto	i1l5622
 12179  058B  3A03               	xorlw	3	; case 2
 12180  058C  1903               	skipnz
 12181  058D  2D74               	goto	i1l5612
 12182  058E  3A01               	xorlw	1	; case 3
 12183  058F  1903               	skipnz
 12184  0590  2D74               	goto	i1l5612
 12185  0591  3A07               	xorlw	7	; case 4
 12186  0592  1903               	skipnz
 12187  0593  2D77               	goto	i1l5616
 12188  0594  2D7B               	goto	i1l5622
 12189  0595  0008               	return
 12190  0596                     __end_ofi1_I2C_DO_TX_EMPTY:	
 12191                           
 12192                           	psect	text97
 12193  0E70                     __ptext97:	
 12194 ;; *************** function i1_I2C_MasterSetIrq *****************
 12195 ;; Defined at:
 12196 ;;		line 645 in file "mcc_generated_files/i2c_master.c"
 12197 ;; Parameters:    Size  Location     Type
 12198 ;;		None
 12199 ;; Auto vars:     Size  Location     Type
 12200 ;;		None
 12201 ;; Return value:  Size  Location     Type
 12202 ;;                  1    wreg      void 
 12203 ;; Registers used:
 12204 ;;		None
 12205 ;; Tracked objects:
 12206 ;;		On entry : 0/0
 12207 ;;		On exit  : 0/0
 12208 ;;		Unchanged: 0/0
 12209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12214 ;;Total ram usage:        0 bytes
 12215 ;; Hardware stack levels used:    1
 12216 ;; This function calls:
 12217 ;;		Nothing
 12218 ;; This function is called by:
 12219 ;;		i1_I2C_DO_TX_EMPTY
 12220 ;; This function uses a non-reentrant model
 12221 ;;
 12222                           
 12223                           
 12224                           ;psect for function i1_I2C_MasterSetIrq
 12225  0E70                     i1_I2C_MasterSetIrq:	
 12226                           
 12227                           ;i2c_master.c: 647: PIR1bits.SSP1IF = 1;
 12228                           
 12229                           ;incstack = 0
 12230 ;; hardware stack exceeded
 12231                           ; Regs used in i1_I2C_MasterSetIrq: []
 12232  0E70  0020               	movlb	0	; select bank0
 12233  0E71  1590               	bsf	16,3	;volatile
 12234  0E72  0008               	return
 12235  0E73                     __end_ofi1_I2C_MasterSetIrq:	
 12236                           
 12237                           	psect	text98
 12238  0EEB                     __ptext98:	
 12239 ;; *************** function i1_I2C_MasterIsNack *****************
 12240 ;; Defined at:
 12241 ;;		line 598 in file "mcc_generated_files/i2c_master.c"
 12242 ;; Parameters:    Size  Location     Type
 12243 ;;		None
 12244 ;; Auto vars:     Size  Location     Type
 12245 ;;		None
 12246 ;; Return value:  Size  Location     Type
 12247 ;;                  1    wreg      unsigned char 
 12248 ;; Registers used:
 12249 ;;		wreg, status,2, status,0
 12250 ;; Tracked objects:
 12251 ;;		On entry : 0/0
 12252 ;;		On exit  : 0/0
 12253 ;;		Unchanged: 0/0
 12254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12259 ;;Total ram usage:        0 bytes
 12260 ;; Hardware stack levels used:    1
 12261 ;; This function calls:
 12262 ;;		Nothing
 12263 ;; This function is called by:
 12264 ;;		i1_I2C_MasterFsm
 12265 ;;		i1_I2C_DO_TX
 12266 ;; This function uses a non-reentrant model
 12267 ;;
 12268                           
 12269                           
 12270                           ;psect for function i1_I2C_MasterIsNack
 12271  0EEB                     i1_I2C_MasterIsNack:	
 12272                           
 12273                           ;i2c_master.c: 600: return SSP1CON2bits.ACKSTAT;
 12274                           
 12275                           ;incstack = 0
 12276 ;; hardware stack exceeded
 12277                           ; Regs used in i1_I2C_MasterIsNack: [wreg+status,2+status,0]
 12278  0EEB  0024               	movlb	4	; select bank4
 12279  0EEC  0E16               	swapf	22,w	;volatile
 12280  0EED  0C89               	rrf	9,f
 12281  0EEE  0C89               	rrf	9,f
 12282  0EEF  3901               	andlw	1
 12283  0EF0  0008               	return
 12284  0EF1                     __end_ofi1_I2C_MasterIsNack:	
 12285                           
 12286                           	psect	text99
 12287  0ED7                     __ptext99:	
 12288 ;; *************** function i1_I2C_MasterSendTxData *****************
 12289 ;; Defined at:
 12290 ;;		line 568 in file "mcc_generated_files/i2c_master.c"
 12291 ;; Parameters:    Size  Location     Type
 12292 ;;  data            1    wreg     unsigned char 
 12293 ;; Auto vars:     Size  Location     Type
 12294 ;;  data            1    0[COMMON] unsigned char 
 12295 ;; Return value:  Size  Location     Type
 12296 ;;                  1    wreg      void 
 12297 ;; Registers used:
 12298 ;;		wreg
 12299 ;; Tracked objects:
 12300 ;;		On entry : 0/0
 12301 ;;		On exit  : 0/0
 12302 ;;		Unchanged: 0/0
 12303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12305 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12307 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12308 ;;Total ram usage:        1 bytes
 12309 ;; Hardware stack levels used:    1
 12310 ;; This function calls:
 12311 ;;		Nothing
 12312 ;; This function is called by:
 12313 ;;		i1_I2C_DO_SEND_ADR_READ
 12314 ;;		i1_I2C_DO_SEND_ADR_WRITE
 12315 ;;		i1_I2C_DO_TX
 12316 ;; This function uses a non-reentrant model
 12317 ;;
 12318                           
 12319                           
 12320                           ;psect for function i1_I2C_MasterSendTxData
 12321  0ED7                     i1_I2C_MasterSendTxData:	
 12322                           
 12323                           ;incstack = 0
 12324 ;; hardware stack exceeded
 12325                           ; Regs used in i1_I2C_MasterSendTxData: [wreg]
 12326                           ;i1I2C_MasterSendTxData@data stored from wreg
 12327  0ED7  00F0               	movwf	i1I2C_MasterSendTxData@data
 12328                           
 12329                           ;i2c_master.c: 570: SSP1BUF = data;
 12330  0ED8  0870               	movf	i1I2C_MasterSendTxData@data,w
 12331  0ED9  0024               	movlb	4	; select bank4
 12332  0EDA  0091               	movwf	17	;volatile
 12333  0EDB  0008               	return
 12334  0EDC                     __end_ofi1_I2C_MasterSendTxData:	
 12335                           
 12336                           	psect	text100
 12337  0E9F                     __ptext100:	
 12338 ;; *************** function i1_I2C_MasterSendAck *****************
 12339 ;; Defined at:
 12340 ;;		line 603 in file "mcc_generated_files/i2c_master.c"
 12341 ;; Parameters:    Size  Location     Type
 12342 ;;		None
 12343 ;; Auto vars:     Size  Location     Type
 12344 ;;		None
 12345 ;; Return value:  Size  Location     Type
 12346 ;;                  1    wreg      void 
 12347 ;; Registers used:
 12348 ;;		None
 12349 ;; Tracked objects:
 12350 ;;		On entry : 0/0
 12351 ;;		On exit  : 0/0
 12352 ;;		Unchanged: 0/0
 12353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12358 ;;Total ram usage:        0 bytes
 12359 ;; Hardware stack levels used:    1
 12360 ;; This function calls:
 12361 ;;		Nothing
 12362 ;; This function is called by:
 12363 ;;		i1_I2C_DO_RX
 12364 ;;		i1_I2C_DO_RX_ACK
 12365 ;; This function uses a non-reentrant model
 12366 ;;
 12367                           
 12368                           
 12369                           ;psect for function i1_I2C_MasterSendAck
 12370  0E9F                     i1_I2C_MasterSendAck:	
 12371                           
 12372                           ;i2c_master.c: 605: SSP1CON2bits.ACKDT = 0;
 12373                           
 12374                           ;incstack = 0
 12375 ;; hardware stack exceeded
 12376                           ; Regs used in i1_I2C_MasterSendAck: []
 12377  0E9F  0024               	movlb	4	; select bank4
 12378  0EA0  1296               	bcf	22,5	;volatile
 12379                           
 12380                           ;i2c_master.c: 606: SSP1CON2bits.ACKEN = 1;
 12381  0EA1  1616               	bsf	22,4	;volatile
 12382  0EA2  0008               	return
 12383  0EA3                     __end_ofi1_I2C_MasterSendAck:	
 12384                           
 12385                           	psect	text101
 12386  0E6D                     __ptext101:	
 12387 ;; *************** function i1_I2C_MasterGetRxData *****************
 12388 ;; Defined at:
 12389 ;;		line 563 in file "mcc_generated_files/i2c_master.c"
 12390 ;; Parameters:    Size  Location     Type
 12391 ;;		None
 12392 ;; Auto vars:     Size  Location     Type
 12393 ;;		None
 12394 ;; Return value:  Size  Location     Type
 12395 ;;                  1    wreg      unsigned char 
 12396 ;; Registers used:
 12397 ;;		wreg
 12398 ;; Tracked objects:
 12399 ;;		On entry : 0/0
 12400 ;;		On exit  : 0/0
 12401 ;;		Unchanged: 0/0
 12402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12407 ;;Total ram usage:        0 bytes
 12408 ;; Hardware stack levels used:    1
 12409 ;; This function calls:
 12410 ;;		Nothing
 12411 ;; This function is called by:
 12412 ;;		i1_I2C_DO_RX
 12413 ;; This function uses a non-reentrant model
 12414 ;;
 12415                           
 12416                           
 12417                           ;psect for function i1_I2C_MasterGetRxData
 12418  0E6D                     i1_I2C_MasterGetRxData:	
 12419                           
 12420                           ;i2c_master.c: 565: return SSP1BUF;
 12421                           
 12422                           ;incstack = 0
 12423 ;; hardware stack exceeded
 12424                           ; Regs used in i1_I2C_MasterGetRxData: [wreg]
 12425  0E6D  0024               	movlb	4	; select bank4
 12426  0E6E  0811               	movf	17,w	;volatile
 12427  0E6F  0008               	return
 12428  0E70                     __end_ofi1_I2C_MasterGetRxData:	
 12429                           
 12430                           	psect	text102
 12431  0E9B                     __ptext102:	
 12432 ;; *************** function i1_I2C_MasterSendNack *****************
 12433 ;; Defined at:
 12434 ;;		line 609 in file "mcc_generated_files/i2c_master.c"
 12435 ;; Parameters:    Size  Location     Type
 12436 ;;		None
 12437 ;; Auto vars:     Size  Location     Type
 12438 ;;		None
 12439 ;; Return value:  Size  Location     Type
 12440 ;;                  1    wreg      void 
 12441 ;; Registers used:
 12442 ;;		None
 12443 ;; Tracked objects:
 12444 ;;		On entry : 0/0
 12445 ;;		On exit  : 0/0
 12446 ;;		Unchanged: 0/0
 12447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12452 ;;Total ram usage:        0 bytes
 12453 ;; Hardware stack levels used:    1
 12454 ;; This function calls:
 12455 ;;		Nothing
 12456 ;; This function is called by:
 12457 ;;		i1_I2C_DO_RX_NACK_STOP
 12458 ;;		i1_I2C_DO_RX_NACK_RESTART
 12459 ;; This function uses a non-reentrant model
 12460 ;;
 12461                           
 12462                           
 12463                           ;psect for function i1_I2C_MasterSendNack
 12464  0E9B                     i1_I2C_MasterSendNack:	
 12465                           
 12466                           ;i2c_master.c: 611: SSP1CON2bits.ACKDT = 1;
 12467                           
 12468                           ;incstack = 0
 12469 ;; hardware stack exceeded
 12470                           ; Regs used in i1_I2C_MasterSendNack: []
 12471  0E9B  0024               	movlb	4	; select bank4
 12472  0E9C  1696               	bsf	22,5	;volatile
 12473                           
 12474                           ;i2c_master.c: 612: SSP1CON2bits.ACKEN = 1;
 12475  0E9D  1616               	bsf	22,4	;volatile
 12476  0E9E  0008               	return
 12477  0E9F                     __end_ofi1_I2C_MasterSendNack:	
 12478                           
 12479                           	psect	text103
 12480  0E6A                     __ptext103:	
 12481 ;; *************** function i1_I2C_MasterStartRx *****************
 12482 ;; Defined at:
 12483 ;;		line 583 in file "mcc_generated_files/i2c_master.c"
 12484 ;; Parameters:    Size  Location     Type
 12485 ;;		None
 12486 ;; Auto vars:     Size  Location     Type
 12487 ;;		None
 12488 ;; Return value:  Size  Location     Type
 12489 ;;                  1    wreg      void 
 12490 ;; Registers used:
 12491 ;;		None
 12492 ;; Tracked objects:
 12493 ;;		On entry : 0/0
 12494 ;;		On exit  : 0/0
 12495 ;;		Unchanged: 0/0
 12496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12500 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12501 ;;Total ram usage:        0 bytes
 12502 ;; Hardware stack levels used:    1
 12503 ;; This function calls:
 12504 ;;		Nothing
 12505 ;; This function is called by:
 12506 ;;		i1_I2C_DO_RCEN
 12507 ;; This function uses a non-reentrant model
 12508 ;;
 12509                           
 12510                           
 12511                           ;psect for function i1_I2C_MasterStartRx
 12512  0E6A                     i1_I2C_MasterStartRx:	
 12513                           
 12514                           ;i2c_master.c: 585: SSP1CON2bits.RCEN = 1;
 12515                           
 12516                           ;incstack = 0
 12517 ;; hardware stack exceeded
 12518                           ; Regs used in i1_I2C_MasterStartRx: []
 12519  0E6A  0024               	movlb	4	; select bank4
 12520  0E6B  1596               	bsf	22,3	;volatile
 12521  0E6C  0008               	return
 12522  0E6D                     __end_ofi1_I2C_MasterStartRx:	
 12523                           
 12524                           	psect	text104
 12525  0E53                     __ptext104:	
 12526 ;; *************** function i1_I2C_CallbackReturnReset *****************
 12527 ;; Defined at:
 12528 ;;		line 525 in file "mcc_generated_files/i2c_master.c"
 12529 ;; Parameters:    Size  Location     Type
 12530 ;;  funPtr          1    9[COMMON] PTR void 
 12531 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 12532 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 12533 ;; Auto vars:     Size  Location     Type
 12534 ;;		None
 12535 ;; Return value:  Size  Location     Type
 12536 ;;                  1    wreg      enum E97
 12537 ;; Registers used:
 12538 ;;		wreg
 12539 ;; Tracked objects:
 12540 ;;		On entry : 0/0
 12541 ;;		On exit  : 0/0
 12542 ;;		Unchanged: 0/0
 12543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12544 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12547 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12548 ;;Total ram usage:        1 bytes
 12549 ;; Hardware stack levels used:    1
 12550 ;; This function calls:
 12551 ;;		Nothing
 12552 ;; This function is called by:
 12553 ;;		i1_I2C_Open
 12554 ;;		i1_I2C_DO_TX
 12555 ;;		i1_I2C_DO_RX
 12556 ;;		i1_I2C_DO_TX_EMPTY
 12557 ;;		i1_I2C_DO_ADDRESS_NACK
 12558 ;;		_I2C_DO_TX
 12559 ;;		_I2C_DO_RX
 12560 ;;		_I2C_DO_TX_EMPTY
 12561 ;;		_I2C_DO_ADDRESS_NACK
 12562 ;;		_I2C_DO_RX_EMPTY
 12563 ;; This function uses a non-reentrant model
 12564 ;;
 12565                           
 12566                           
 12567                           ;psect for function i1_I2C_CallbackReturnReset
 12568  0E53                     i1_I2C_CallbackReturnReset:	
 12569  0E53                     i1l2646:	
 12570                           ;incstack = 0
 12571 ;; hardware stack exceeded
 12572                           ; Regs used in i1_I2C_CallbackReturnReset: [wreg]
 12573                           
 12574                           
 12575                           ;i2c_master.c: 527: return I2C_RESET_LINK;
 12576  0E53  3005               	movlw	5
 12577  0E54  0008               	return
 12578  0E55                     __end_ofi1_I2C_CallbackReturnReset:	
 12579                           
 12580                           	psect	text105
 12581  0E51                     __ptext105:	
 12582 ;; *************** function i1_I2C_CallbackReturnStop *****************
 12583 ;; Defined at:
 12584 ;;		line 520 in file "mcc_generated_files/i2c_master.c"
 12585 ;; Parameters:    Size  Location     Type
 12586 ;;  funPtr          1    9[COMMON] PTR void 
 12587 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 12588 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 12589 ;; Auto vars:     Size  Location     Type
 12590 ;;		None
 12591 ;; Return value:  Size  Location     Type
 12592 ;;                  1    wreg      enum E97
 12593 ;; Registers used:
 12594 ;;		wreg
 12595 ;; Tracked objects:
 12596 ;;		On entry : 0/0
 12597 ;;		On exit  : 0/0
 12598 ;;		Unchanged: 0/0
 12599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12600 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12603 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12604 ;;Total ram usage:        1 bytes
 12605 ;; Hardware stack levels used:    1
 12606 ;; This function calls:
 12607 ;;		Nothing
 12608 ;; This function is called by:
 12609 ;;		i1_I2C_Open
 12610 ;;		i1_I2C_SetCallback
 12611 ;;		i1_I2C_DO_TX
 12612 ;;		i1_I2C_DO_RX
 12613 ;;		i1_I2C_DO_TX_EMPTY
 12614 ;;		i1_I2C_DO_ADDRESS_NACK
 12615 ;;		_I2C_DO_TX
 12616 ;;		_I2C_DO_RX
 12617 ;;		_I2C_DO_TX_EMPTY
 12618 ;;		_I2C_DO_ADDRESS_NACK
 12619 ;;		_I2C_DO_RX_EMPTY
 12620 ;; This function uses a non-reentrant model
 12621 ;;
 12622                           
 12623                           
 12624                           ;psect for function i1_I2C_CallbackReturnStop
 12625  0E51                     i1_I2C_CallbackReturnStop:	
 12626  0E51                     i1l2642:	
 12627                           ;incstack = 0
 12628 ;; hardware stack exceeded
 12629                           ; Regs used in i1_I2C_CallbackReturnStop: [wreg]
 12630                           
 12631                           
 12632                           ;i2c_master.c: 522: return I2C_STOP;
 12633  0E51  3001               	movlw	1
 12634  0E52  0008               	return
 12635  0E53                     __end_ofi1_I2C_CallbackReturnStop:	
 12636                           
 12637                           	psect	text106
 12638  0689                     __ptext106:	
 12639 ;; *************** function i1_rdBlkRegCompleteHandler *****************
 12640 ;; Defined at:
 12641 ;;		line 170 in file "mcc_generated_files/examples/i2c_master_example.c"
 12642 ;; Parameters:    Size  Location     Type
 12643 ;;  ptr             1    9[COMMON] PTR void 
 12644 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 12645 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 12646 ;; Auto vars:     Size  Location     Type
 12647 ;;		None
 12648 ;; Return value:  Size  Location     Type
 12649 ;;                  1    wreg      enum E97
 12650 ;; Registers used:
 12651 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12652 ;; Tracked objects:
 12653 ;;		On entry : 0/0
 12654 ;;		On exit  : 0/0
 12655 ;;		Unchanged: 0/0
 12656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12657 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12660 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12661 ;;Total ram usage:        1 bytes
 12662 ;; Hardware stack levels used:    1
 12663 ;; Hardware stack levels required when called:    2
 12664 ;; This function calls:
 12665 ;;		i1_I2C_SetBuffer
 12666 ;;		i1_I2C_SetDataCompleteCallback
 12667 ;; This function is called by:
 12668 ;; This function uses a non-reentrant model
 12669 ;;
 12670                           
 12671                           
 12672                           ;psect for function i1_rdBlkRegCompleteHandler
 12673  0689                     i1_rdBlkRegCompleteHandler:	
 12674  0689                     i1l2600:	
 12675                           ;incstack = 0
 12676 ;; hardware stack exceeded
 12677                           ; Regs used in i1_rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 12678                           
 12679                           
 12680                           ;i2c_master_example.c: 172: I2C_SetBuffer(((i2c_buffer_t *)ptr)->data,((i2c_buffer_t*)pt
      +                          r)->len);
 12681  0689  0879               	movf	i1rdBlkRegCompleteHandler@ptr,w
 12682  068A  0086               	movwf	6
 12683  068B  0187               	clrf	7
 12684  068C  3F40               	moviw [0]fsr1
 12685  068D  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 12686  068E  3F41               	moviw [1]fsr1
 12687  068F  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 12688  0690  0879               	movf	i1rdBlkRegCompleteHandler@ptr,w
 12689  0691  3E02               	addlw	2
 12690  0692  0086               	movwf	6
 12691  0693  0187               	clrf	7
 12692  0694  0801               	movf	1,w
 12693  0695  3187  27C5  3186   	fcall	i1_I2C_SetBuffer
 12694                           
 12695                           ;i2c_master_example.c: 173: I2C_SetDataCompleteCallback((0),(0));
 12696  0698  3000               	movlw	0
 12697  0699  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 12698  069A  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 12699  069B  01F7               	clrf	i1I2C_SetDataCompleteCallback@ptr
 12700  069C  318F  27DC         	fcall	i1_I2C_SetDataCompleteCallback
 12701                           
 12702                           ;i2c_master_example.c: 174: return I2C_RESTART_READ;
 12703  069E  3002               	movlw	2
 12704  069F  0008               	return
 12705  06A0                     __end_ofi1_rdBlkRegCompleteHandler:	
 12706                           
 12707                           	psect	text107
 12708  0785                     __ptext107:	
 12709 ;; *************** function i1_wr1RegCompleteHandler *****************
 12710 ;; Defined at:
 12711 ;;		line 156 in file "mcc_generated_files/examples/i2c_master_example.c"
 12712 ;; Parameters:    Size  Location     Type
 12713 ;;  ptr             1    9[COMMON] PTR void 
 12714 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 12715 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 12716 ;; Auto vars:     Size  Location     Type
 12717 ;;		None
 12718 ;; Return value:  Size  Location     Type
 12719 ;;                  1    wreg      enum E97
 12720 ;; Registers used:
 12721 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12722 ;; Tracked objects:
 12723 ;;		On entry : 0/0
 12724 ;;		On exit  : 0/0
 12725 ;;		Unchanged: 0/0
 12726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12727 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12730 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12731 ;;Total ram usage:        1 bytes
 12732 ;; Hardware stack levels used:    1
 12733 ;; Hardware stack levels required when called:    2
 12734 ;; This function calls:
 12735 ;;		i1_I2C_SetBuffer
 12736 ;;		i1_I2C_SetDataCompleteCallback
 12737 ;; This function is called by:
 12738 ;;		i1_I2C_Write1ByteRegister
 12739 ;;		i1_I2C_DO_TX
 12740 ;;		i1_I2C_DO_RX
 12741 ;;		i1_I2C_DO_TX_EMPTY
 12742 ;;		i1_I2C_DO_ADDRESS_NACK
 12743 ;;		_I2C_DO_TX
 12744 ;;		_I2C_DO_RX
 12745 ;;		_I2C_DO_TX_EMPTY
 12746 ;;		_I2C_DO_ADDRESS_NACK
 12747 ;;		_I2C_DO_RX_EMPTY
 12748 ;; This function uses a non-reentrant model
 12749 ;;
 12750                           
 12751                           
 12752                           ;psect for function i1_wr1RegCompleteHandler
 12753  0785                     i1_wr1RegCompleteHandler:	
 12754  0785                     i1l2584:	
 12755                           ;incstack = 0
 12756 ;; hardware stack exceeded
 12757                           ; Regs used in i1_wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12758                           
 12759                           
 12760                           ;i2c_master_example.c: 158: I2C_SetBuffer(ptr,1);
 12761  0785  3001               	movlw	1
 12762  0786  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 12763  0787  3000               	movlw	0
 12764  0788  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 12765  0789  0879               	movf	i1wr1RegCompleteHandler@ptr,w
 12766  078A  3187  27C5  3187   	fcall	i1_I2C_SetBuffer
 12767                           
 12768                           ;i2c_master_example.c: 159: I2C_SetDataCompleteCallback((0),(0));
 12769  078D  3000               	movlw	0
 12770  078E  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 12771  078F  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 12772  0790  01F7               	clrf	i1I2C_SetDataCompleteCallback@ptr
 12773  0791  318F  27DC         	fcall	i1_I2C_SetDataCompleteCallback
 12774                           
 12775                           ;i2c_master_example.c: 160: return I2C_CONTINUE;
 12776  0793  3004               	movlw	4
 12777  0794  0008               	return
 12778  0795                     __end_ofi1_wr1RegCompleteHandler:	
 12779                           
 12780                           	psect	text108
 12781  0795                     __ptext108:	
 12782 ;; *************** function i1_rd2RegCompleteHandler *****************
 12783 ;; Defined at:
 12784 ;;		line 149 in file "mcc_generated_files/examples/i2c_master_example.c"
 12785 ;; Parameters:    Size  Location     Type
 12786 ;;  ptr             1    9[COMMON] PTR void 
 12787 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 12788 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 12789 ;; Auto vars:     Size  Location     Type
 12790 ;;		None
 12791 ;; Return value:  Size  Location     Type
 12792 ;;                  1    wreg      enum E97
 12793 ;; Registers used:
 12794 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12795 ;; Tracked objects:
 12796 ;;		On entry : 0/0
 12797 ;;		On exit  : 0/0
 12798 ;;		Unchanged: 0/0
 12799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12800 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12803 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12804 ;;Total ram usage:        1 bytes
 12805 ;; Hardware stack levels used:    1
 12806 ;; Hardware stack levels required when called:    2
 12807 ;; This function calls:
 12808 ;;		i1_I2C_SetBuffer
 12809 ;;		i1_I2C_SetDataCompleteCallback
 12810 ;; This function is called by:
 12811 ;;		_I2C_Read2ByteRegister
 12812 ;;		i1_I2C_DO_TX
 12813 ;;		i1_I2C_DO_RX
 12814 ;;		i1_I2C_DO_TX_EMPTY
 12815 ;;		i1_I2C_DO_ADDRESS_NACK
 12816 ;;		_I2C_DO_TX
 12817 ;;		_I2C_DO_RX
 12818 ;;		_I2C_DO_TX_EMPTY
 12819 ;;		_I2C_DO_ADDRESS_NACK
 12820 ;;		_I2C_DO_RX_EMPTY
 12821 ;; This function uses a non-reentrant model
 12822 ;;
 12823                           
 12824                           
 12825                           ;psect for function i1_rd2RegCompleteHandler
 12826  0795                     i1_rd2RegCompleteHandler:	
 12827  0795                     i1l2576:	
 12828                           ;incstack = 0
 12829 ;; hardware stack exceeded
 12830                           ; Regs used in i1_rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12831                           
 12832                           
 12833                           ;i2c_master_example.c: 151: I2C_SetBuffer(ptr,2);
 12834  0795  3002               	movlw	2
 12835  0796  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 12836  0797  3000               	movlw	0
 12837  0798  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 12838  0799  0879               	movf	i1rd2RegCompleteHandler@ptr,w
 12839  079A  3187  27C5  3187   	fcall	i1_I2C_SetBuffer
 12840                           
 12841                           ;i2c_master_example.c: 152: I2C_SetDataCompleteCallback((0),(0));
 12842  079D  3000               	movlw	0
 12843  079E  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 12844  079F  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 12845  07A0  01F7               	clrf	i1I2C_SetDataCompleteCallback@ptr
 12846  07A1  318F  27DC         	fcall	i1_I2C_SetDataCompleteCallback
 12847                           
 12848                           ;i2c_master_example.c: 153: return I2C_RESTART_READ;
 12849  07A3  3002               	movlw	2
 12850  07A4  0008               	return
 12851  07A5                     __end_ofi1_rd2RegCompleteHandler:	
 12852                           
 12853                           	psect	text109
 12854  07A5                     __ptext109:	
 12855 ;; *************** function i1_rd1RegCompleteHandler *****************
 12856 ;; Defined at:
 12857 ;;		line 142 in file "mcc_generated_files/examples/i2c_master_example.c"
 12858 ;; Parameters:    Size  Location     Type
 12859 ;;  ptr             1    9[COMMON] PTR void 
 12860 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 12861 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 12862 ;; Auto vars:     Size  Location     Type
 12863 ;;		None
 12864 ;; Return value:  Size  Location     Type
 12865 ;;                  1    wreg      enum E97
 12866 ;; Registers used:
 12867 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12868 ;; Tracked objects:
 12869 ;;		On entry : 0/0
 12870 ;;		On exit  : 0/0
 12871 ;;		Unchanged: 0/0
 12872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12873 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12876 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12877 ;;Total ram usage:        1 bytes
 12878 ;; Hardware stack levels used:    1
 12879 ;; Hardware stack levels required when called:    2
 12880 ;; This function calls:
 12881 ;;		i1_I2C_SetBuffer
 12882 ;;		i1_I2C_SetDataCompleteCallback
 12883 ;; This function is called by:
 12884 ;; This function uses a non-reentrant model
 12885 ;;
 12886                           
 12887                           
 12888                           ;psect for function i1_rd1RegCompleteHandler
 12889  07A5                     i1_rd1RegCompleteHandler:	
 12890  07A5                     i1l2568:	
 12891                           ;incstack = 0
 12892 ;; hardware stack exceeded
 12893                           ; Regs used in i1_rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12894                           
 12895                           
 12896                           ;i2c_master_example.c: 144: I2C_SetBuffer(ptr,1);
 12897  07A5  3001               	movlw	1
 12898  07A6  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 12899  07A7  3000               	movlw	0
 12900  07A8  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 12901  07A9  0879               	movf	i1rd1RegCompleteHandler@ptr,w
 12902  07AA  3187  27C5  3187   	fcall	i1_I2C_SetBuffer
 12903                           
 12904                           ;i2c_master_example.c: 145: I2C_SetDataCompleteCallback((0),(0));
 12905  07AD  3000               	movlw	0
 12906  07AE  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 12907  07AF  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 12908  07B0  01F7               	clrf	i1I2C_SetDataCompleteCallback@ptr
 12909  07B1  318F  27DC         	fcall	i1_I2C_SetDataCompleteCallback
 12910                           
 12911                           ;i2c_master_example.c: 146: return I2C_RESTART_READ;
 12912  07B3  3002               	movlw	2
 12913  07B4  0008               	return
 12914  07B5                     __end_ofi1_rd1RegCompleteHandler:	
 12915                           
 12916                           	psect	text110
 12917  07B5                     __ptext110:	
 12918 ;; *************** function i1_wr2RegCompleteHandler *****************
 12919 ;; Defined at:
 12920 ;;		line 163 in file "mcc_generated_files/examples/i2c_master_example.c"
 12921 ;; Parameters:    Size  Location     Type
 12922 ;;  ptr             1    9[COMMON] PTR void 
 12923 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 12924 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 12925 ;; Auto vars:     Size  Location     Type
 12926 ;;		None
 12927 ;; Return value:  Size  Location     Type
 12928 ;;                  1    wreg      enum E97
 12929 ;; Registers used:
 12930 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12931 ;; Tracked objects:
 12932 ;;		On entry : 0/0
 12933 ;;		On exit  : 0/0
 12934 ;;		Unchanged: 0/0
 12935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12936 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12939 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12940 ;;Total ram usage:        1 bytes
 12941 ;; Hardware stack levels used:    1
 12942 ;; Hardware stack levels required when called:    2
 12943 ;; This function calls:
 12944 ;;		i1_I2C_SetBuffer
 12945 ;;		i1_I2C_SetDataCompleteCallback
 12946 ;; This function is called by:
 12947 ;; This function uses a non-reentrant model
 12948 ;;
 12949                           
 12950                           
 12951                           ;psect for function i1_wr2RegCompleteHandler
 12952  07B5                     i1_wr2RegCompleteHandler:	
 12953  07B5                     i1l2592:	
 12954                           ;incstack = 0
 12955 ;; hardware stack exceeded
 12956                           ; Regs used in i1_wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12957                           
 12958                           
 12959                           ;i2c_master_example.c: 165: I2C_SetBuffer(ptr,2);
 12960  07B5  3002               	movlw	2
 12961  07B6  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 12962  07B7  3000               	movlw	0
 12963  07B8  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 12964  07B9  0879               	movf	i1wr2RegCompleteHandler@ptr,w
 12965  07BA  3187  27C5  3187   	fcall	i1_I2C_SetBuffer
 12966                           
 12967                           ;i2c_master_example.c: 166: I2C_SetDataCompleteCallback((0),(0));
 12968  07BD  3000               	movlw	0
 12969  07BE  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 12970  07BF  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 12971  07C0  01F7               	clrf	i1I2C_SetDataCompleteCallback@ptr
 12972  07C1  318F  27DC         	fcall	i1_I2C_SetDataCompleteCallback
 12973                           
 12974                           ;i2c_master_example.c: 167: return I2C_CONTINUE;
 12975  07C3  3004               	movlw	4
 12976  07C4  0008               	return
 12977  07C5                     __end_ofi1_wr2RegCompleteHandler:	
 12978                           
 12979                           	psect	text111
 12980  0FDC                     __ptext111:	
 12981 ;; *************** function i1_I2C_SetDataCompleteCallback *****************
 12982 ;; Defined at:
 12983 ;;		line 273 in file "mcc_generated_files/i2c_master.c"
 12984 ;; Parameters:    Size  Location     Type
 12985 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
 12986 ;;		 -> i1_wr1RegCompleteHandler(1), i1_rd2RegCompleteHandler(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), 
 12987 ;;		 -> wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), Absolute function(1), rd1RegCompleteHandler(1), 
 12988 ;;  ptr             1    7[COMMON] PTR void 
 12989 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 12990 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 12991 ;; Auto vars:     Size  Location     Type
 12992 ;;		None
 12993 ;; Return value:  Size  Location     Type
 12994 ;;                  1    wreg      void 
 12995 ;; Registers used:
 12996 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12997 ;; Tracked objects:
 12998 ;;		On entry : 0/0
 12999 ;;		On exit  : 0/0
 13000 ;;		Unchanged: 0/0
 13001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13002 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13004 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13005 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13006 ;;Total ram usage:        4 bytes
 13007 ;; Hardware stack levels used:    1
 13008 ;; Hardware stack levels required when called:    1
 13009 ;; This function calls:
 13010 ;;		i1_I2C_SetCallback
 13011 ;; This function is called by:
 13012 ;;		_I2C_Read2ByteRegister
 13013 ;;		i1_I2C_Write1ByteRegister
 13014 ;;		i1_rd1RegCompleteHandler
 13015 ;;		i1_rd2RegCompleteHandler
 13016 ;;		i1_wr1RegCompleteHandler
 13017 ;;		i1_wr2RegCompleteHandler
 13018 ;;		i1_rdBlkRegCompleteHandler
 13019 ;; This function uses a non-reentrant model
 13020 ;;
 13021                           
 13022                           
 13023                           ;psect for function i1_I2C_SetDataCompleteCallback
 13024  0FDC                     i1_I2C_SetDataCompleteCallback:	
 13025                           
 13026                           ;i2c_master.c: 275: I2C_SetCallback(I2C_DATA_COMPLETE, cb, ptr);
 13027                           
 13028                           ;incstack = 0
 13029                           ; Regs used in i1_I2C_SetDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclat
      +                          h+cstack]
 13030  0FDC  0876               	movf	i1I2C_SetDataCompleteCallback@cb+1,w
 13031  0FDD  00F1               	movwf	i1I2C_SetCallback@cb+1
 13032  0FDE  0875               	movf	i1I2C_SetDataCompleteCallback@cb,w
 13033  0FDF  00F0               	movwf	i1I2C_SetCallback@cb
 13034  0FE0  0877               	movf	i1I2C_SetDataCompleteCallback@ptr,w
 13035  0FE1  00F8               	movwf	??i1_I2C_SetDataCompleteCallback
 13036  0FE2  0878               	movf	??i1_I2C_SetDataCompleteCallback,w
 13037  0FE3  00F2               	movwf	i1I2C_SetCallback@ptr
 13038  0FE4  3000               	movlw	0
 13039  0FE5  3185  2596         	fcall	i1_I2C_SetCallback
 13040  0FE7  0008               	return
 13041  0FE8                     __end_ofi1_I2C_SetDataCompleteCallback:	
 13042                           
 13043                           	psect	text112
 13044  0596                     __ptext112:	
 13045 ;; *************** function i1_I2C_SetCallback *****************
 13046 ;; Defined at:
 13047 ;;		line 298 in file "mcc_generated_files/i2c_master.c"
 13048 ;; Parameters:    Size  Location     Type
 13049 ;;  idx             1    wreg     enum E12121
 13050 ;;  cb              2    0[COMMON] PTR FTN(PTR void ,)enum 
 13051 ;;		 -> i1_wr1RegCompleteHandler(1), i1_rd2RegCompleteHandler(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), 
 13052 ;;		 -> wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), Absolute function(1), rd1RegCompleteHandler(1), 
 13053 ;;  ptr             1    2[COMMON] PTR void 
 13054 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 13055 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 13056 ;; Auto vars:     Size  Location     Type
 13057 ;;  idx             1    4[COMMON] enum E12121
 13058 ;; Return value:  Size  Location     Type
 13059 ;;                  1    wreg      void 
 13060 ;; Registers used:
 13061 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13062 ;; Tracked objects:
 13063 ;;		On entry : 0/0
 13064 ;;		On exit  : 0/0
 13065 ;;		Unchanged: 0/0
 13066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13067 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13068 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13069 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13070 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13071 ;;Total ram usage:        5 bytes
 13072 ;; Hardware stack levels used:    1
 13073 ;; This function calls:
 13074 ;;		Nothing
 13075 ;; This function is called by:
 13076 ;;		i1_I2C_SetDataCompleteCallback
 13077 ;;		i1_I2C_SetAddressNackCallback
 13078 ;; This function uses a non-reentrant model
 13079 ;;
 13080                           
 13081                           
 13082                           ;psect for function i1_I2C_SetCallback
 13083  0596                     i1_I2C_SetCallback:	
 13084                           
 13085                           ;incstack = 0
 13086                           ; Regs used in i1_I2C_SetCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
 13087                           ;i1I2C_SetCallback@idx stored from wreg
 13088  0596  00F4               	movwf	i1I2C_SetCallback@idx
 13089                           
 13090                           ;i2c_master.c: 300: if(cb)
 13091  0597  0870               	movf	i1I2C_SetCallback@cb,w
 13092  0598  0471               	iorwf	i1I2C_SetCallback@cb+1,w
 13093  0599  1903               	btfsc	3,2
 13094  059A  2DAC               	goto	i1l2546
 13095                           
 13096                           ;i2c_master.c: 301: {
 13097                           ;i2c_master.c: 302: I2C_Status.callbackTable[idx] = cb;
 13098  059B  3574               	lslf	i1I2C_SetCallback@idx,w
 13099  059C  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
 13100  059D  0086               	movwf	6
 13101  059E  0187               	clrf	7
 13102  059F  0870               	movf	i1I2C_SetCallback@cb,w
 13103  05A0  3FC0               	movwi [0]fsr1
 13104  05A1  0871               	movf	i1I2C_SetCallback@cb+1,w
 13105  05A2  3FC1               	movwi [1]fsr1
 13106                           
 13107                           ;i2c_master.c: 303: I2C_Status.callbackPayload[idx] = ptr;
 13108  05A3  0872               	movf	i1I2C_SetCallback@ptr,w
 13109  05A4  00F3               	movwf	??i1_I2C_SetCallback
 13110  05A5  0874               	movf	i1I2C_SetCallback@idx,w
 13111  05A6  3EAC               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
 13112  05A7  0086               	movwf	6
 13113  05A8  0187               	clrf	7
 13114  05A9  0873               	movf	??i1_I2C_SetCallback,w
 13115  05AA  0081               	movwf	1
 13116                           
 13117                           ;i2c_master.c: 304: }
 13118  05AB  0008               	return
 13119  05AC                     i1l2546:	
 13120                           
 13121                           ;i2c_master.c: 305: else
 13122                           ;i2c_master.c: 306: {
 13123                           ;i2c_master.c: 307: I2C_Status.callbackTable[idx] = I2C_CallbackReturnStop;
 13124  05AC  3574               	lslf	i1I2C_SetCallback@idx,w
 13125  05AD  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
 13126  05AE  0086               	movwf	6
 13127  05AF  0187               	clrf	7
 13128  05B0  30F7               	movlw	low _I2C_CallbackReturnStop
 13129  05B1  3FC0               	movwi [0]fsr1
 13130  05B2  300E               	movlw	high _I2C_CallbackReturnStop
 13131  05B3  3FC1               	movwi [1]fsr1
 13132                           
 13133                           ;i2c_master.c: 308: I2C_Status.callbackPayload[idx] = (0);
 13134  05B4  0874               	movf	i1I2C_SetCallback@idx,w
 13135  05B5  3EAC               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
 13136  05B6  0086               	movwf	6
 13137  05B7  0187               	clrf	7
 13138  05B8  0181               	clrf	1
 13139  05B9  0008               	return
 13140  05BA                     __end_ofi1_I2C_SetCallback:	
 13141                           
 13142                           	psect	text113
 13143  07C5                     __ptext113:	
 13144 ;; *************** function i1_I2C_SetBuffer *****************
 13145 ;; Defined at:
 13146 ;;		line 263 in file "mcc_generated_files/i2c_master.c"
 13147 ;; Parameters:    Size  Location     Type
 13148 ;;  buffer          1    wreg     PTR void 
 13149 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
 13150 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
 13151 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
 13152 ;;  bufferSize      2    0[COMMON] unsigned int 
 13153 ;; Auto vars:     Size  Location     Type
 13154 ;;  buffer          1    3[COMMON] PTR void 
 13155 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
 13156 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
 13157 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
 13158 ;; Return value:  Size  Location     Type
 13159 ;;                  1    wreg      void 
 13160 ;; Registers used:
 13161 ;;		wreg
 13162 ;; Tracked objects:
 13163 ;;		On entry : 0/0
 13164 ;;		On exit  : 0/0
 13165 ;;		Unchanged: 0/0
 13166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13167 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13168 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13169 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13170 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13171 ;;Total ram usage:        4 bytes
 13172 ;; Hardware stack levels used:    1
 13173 ;; This function calls:
 13174 ;;		Nothing
 13175 ;; This function is called by:
 13176 ;;		_I2C_Read2ByteRegister
 13177 ;;		i1_I2C_Write1ByteRegister
 13178 ;;		i1_rd1RegCompleteHandler
 13179 ;;		i1_rd2RegCompleteHandler
 13180 ;;		i1_wr1RegCompleteHandler
 13181 ;;		i1_wr2RegCompleteHandler
 13182 ;;		i1_rdBlkRegCompleteHandler
 13183 ;; This function uses a non-reentrant model
 13184 ;;
 13185                           
 13186                           
 13187                           ;psect for function i1_I2C_SetBuffer
 13188  07C5                     i1_I2C_SetBuffer:	
 13189                           
 13190                           ;incstack = 0
 13191                           ; Regs used in i1_I2C_SetBuffer: [wreg]
 13192                           ;i1I2C_SetBuffer@buffer stored from wreg
 13193  07C5  00F3               	movwf	i1I2C_SetBuffer@buffer
 13194                           
 13195                           ;i2c_master.c: 265: if(I2C_Status.bufferFree)
 13196  07C6  0021               	movlb	1	; select bank1
 13197  07C7  1DBC               	btfss	(_I2C_Status^(0+128)+28),3
 13198  07C8  0008               	return
 13199                           
 13200                           ;i2c_master.c: 266: {
 13201                           ;i2c_master.c: 267: I2C_Status.data_ptr = buffer;
 13202  07C9  0873               	movf	i1I2C_SetBuffer@buffer,w
 13203  07CA  00F2               	movwf	??i1_I2C_SetBuffer
 13204  07CB  0872               	movf	??i1_I2C_SetBuffer,w
 13205  07CC  00B7               	movwf	(low ((_I2C_Status| 0+23)))^(0+128)
 13206                           
 13207                           ;i2c_master.c: 268: I2C_Status.data_length = bufferSize;
 13208  07CD  0871               	movf	i1I2C_SetBuffer@bufferSize+1,w
 13209  07CE  00B9               	movwf	((_I2C_Status+1)^(0+128)+24)
 13210  07CF  0870               	movf	i1I2C_SetBuffer@bufferSize,w
 13211  07D0  00B8               	movwf	(_I2C_Status^(0+128)+24)
 13212                           
 13213                           ;i2c_master.c: 269: I2C_Status.bufferFree = 0;
 13214  07D1  11BC               	bcf	(_I2C_Status^(0+128)+28),3
 13215  07D2  0008               	return
 13216  07D3                     __end_ofi1_I2C_SetBuffer:	
 13217                           
 13218                           	psect	text114
 13219  0E67                     __ptext114:	
 13220 ;; *************** function i1_I2C_MasterStop *****************
 13221 ;; Defined at:
 13222 ;;		line 593 in file "mcc_generated_files/i2c_master.c"
 13223 ;; Parameters:    Size  Location     Type
 13224 ;;		None
 13225 ;; Auto vars:     Size  Location     Type
 13226 ;;		None
 13227 ;; Return value:  Size  Location     Type
 13228 ;;                  1    wreg      void 
 13229 ;; Registers used:
 13230 ;;		None
 13231 ;; Tracked objects:
 13232 ;;		On entry : 0/0
 13233 ;;		On exit  : 0/0
 13234 ;;		Unchanged: 0/0
 13235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13240 ;;Total ram usage:        0 bytes
 13241 ;; Hardware stack levels used:    1
 13242 ;; This function calls:
 13243 ;;		Nothing
 13244 ;; This function is called by:
 13245 ;;		i1_I2C_DO_SEND_STOP
 13246 ;; This function uses a non-reentrant model
 13247 ;;
 13248                           
 13249                           
 13250                           ;psect for function i1_I2C_MasterStop
 13251  0E67                     i1_I2C_MasterStop:	
 13252                           
 13253                           ;i2c_master.c: 595: SSP1CON2bits.PEN = 1;
 13254                           
 13255                           ;incstack = 0
 13256 ;; hardware stack exceeded
 13257                           ; Regs used in i1_I2C_MasterStop: []
 13258  0E67  0024               	movlb	4	; select bank4
 13259  0E68  1516               	bsf	22,2	;volatile
 13260  0E69  0008               	return
 13261  0E6A                     __end_ofi1_I2C_MasterStop:	
 13262                           
 13263                           	psect	text115
 13264  0E64                     __ptext115:	
 13265 ;; *************** function i1_I2C_MasterEnableRestart *****************
 13266 ;; Defined at:
 13267 ;;		line 573 in file "mcc_generated_files/i2c_master.c"
 13268 ;; Parameters:    Size  Location     Type
 13269 ;;		None
 13270 ;; Auto vars:     Size  Location     Type
 13271 ;;		None
 13272 ;; Return value:  Size  Location     Type
 13273 ;;                  1    wreg      void 
 13274 ;; Registers used:
 13275 ;;		None
 13276 ;; Tracked objects:
 13277 ;;		On entry : 0/0
 13278 ;;		On exit  : 0/0
 13279 ;;		Unchanged: 0/0
 13280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13284 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13285 ;;Total ram usage:        0 bytes
 13286 ;; Hardware stack levels used:    1
 13287 ;; This function calls:
 13288 ;;		Nothing
 13289 ;; This function is called by:
 13290 ;;		i1_I2C_DO_SEND_RESTART_READ
 13291 ;;		i1_I2C_DO_SEND_RESTART_WRITE
 13292 ;;		i1_I2C_DO_SEND_RESTART
 13293 ;; This function uses a non-reentrant model
 13294 ;;
 13295                           
 13296                           
 13297                           ;psect for function i1_I2C_MasterEnableRestart
 13298  0E64                     i1_I2C_MasterEnableRestart:	
 13299                           
 13300                           ;i2c_master.c: 575: SSP1CON2bits.RSEN = 1;
 13301                           
 13302                           ;incstack = 0
 13303 ;; hardware stack exceeded
 13304                           ; Regs used in i1_I2C_MasterEnableRestart: []
 13305  0E64  0024               	movlb	4	; select bank4
 13306  0E65  1496               	bsf	22,1	;volatile
 13307  0E66  0008               	return
 13308  0E67                     __end_ofi1_I2C_MasterEnableRestart:	
 13309                           
 13310                           	psect	text116
 13311  0E61                     __ptext116:	
 13312 ;; *************** function i1_I2C_MasterStart *****************
 13313 ;; Defined at:
 13314 ;;		line 588 in file "mcc_generated_files/i2c_master.c"
 13315 ;; Parameters:    Size  Location     Type
 13316 ;;		None
 13317 ;; Auto vars:     Size  Location     Type
 13318 ;;		None
 13319 ;; Return value:  Size  Location     Type
 13320 ;;                  1    wreg      void 
 13321 ;; Registers used:
 13322 ;;		None
 13323 ;; Tracked objects:
 13324 ;;		On entry : 0/0
 13325 ;;		On exit  : 0/0
 13326 ;;		Unchanged: 0/0
 13327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13332 ;;Total ram usage:        0 bytes
 13333 ;; Hardware stack levels used:    1
 13334 ;; This function calls:
 13335 ;;		Nothing
 13336 ;; This function is called by:
 13337 ;;		i1_I2C_MasterOperation
 13338 ;; This function uses a non-reentrant model
 13339 ;;
 13340                           
 13341                           
 13342                           ;psect for function i1_I2C_MasterStart
 13343  0E61                     i1_I2C_MasterStart:	
 13344                           
 13345                           ;i2c_master.c: 590: SSP1CON2bits.SEN = 1;
 13346                           
 13347                           ;incstack = 0
 13348                           ; Regs used in i1_I2C_MasterStart: []
 13349  0E61  0024               	movlb	4	; select bank4
 13350  0E62  1416               	bsf	22,0	;volatile
 13351  0E63  0008               	return
 13352  0E64                     __end_ofi1_I2C_MasterStart:	
 13353                           
 13354                           	psect	text117
 13355  0670                     __ptext117:	
 13356 ;; *************** function i1_I2C_Close *****************
 13357 ;; Defined at:
 13358 ;;		line 209 in file "mcc_generated_files/i2c_master.c"
 13359 ;; Parameters:    Size  Location     Type
 13360 ;;		None
 13361 ;; Auto vars:     Size  Location     Type
 13362 ;;  I2C_Close       1    1[COMMON] enum E92
 13363 ;; Return value:  Size  Location     Type
 13364 ;;                  1    wreg      enum E92
 13365 ;; Registers used:
 13366 ;;		wreg, status,2, status,0, pclath, cstack
 13367 ;; Tracked objects:
 13368 ;;		On entry : 0/0
 13369 ;;		On exit  : 0/0
 13370 ;;		Unchanged: 0/0
 13371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13373 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13374 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13375 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13376 ;;Total ram usage:        2 bytes
 13377 ;; Hardware stack levels used:    1
 13378 ;; Hardware stack levels required when called:    1
 13379 ;; This function calls:
 13380 ;;		i1_I2C_MasterClearIrq
 13381 ;;		i1_I2C_MasterClose
 13382 ;;		i1_I2C_MasterDisableIrq
 13383 ;; This function is called by:
 13384 ;;		_I2C_Read2ByteRegister
 13385 ;;		_MyTimer2ISR
 13386 ;;		i1_I2C_Write1ByteRegister
 13387 ;; This function uses a non-reentrant model
 13388 ;;
 13389                           
 13390                           
 13391                           ;psect for function i1_I2C_Close
 13392  0670                     i1_I2C_Close:	
 13393                           
 13394                           ;i2c_master.c: 211: i2c_error_t returnValue = I2C_BUSY;
 13395                           
 13396                           ;incstack = 0
 13397                           ; Regs used in i1_I2C_Close: [wreg+status,2+status,0+pclath+cstack]
 13398  0670  01F1               	clrf	i1I2C_Close@returnValue
 13399  0671  0AF1               	incf	i1I2C_Close@returnValue,f
 13400                           
 13401                           ;i2c_master.c: 212: if(!I2C_Status.busy)
 13402  0672  0021               	movlb	1	; select bank1
 13403  0673  18BC               	btfsc	(_I2C_Status^(0+128)+28),1
 13404  0674  2E87               	goto	i1l3184
 13405                           
 13406                           ;i2c_master.c: 213: {
 13407                           ;i2c_master.c: 214: I2C_Status.inUse = 0;
 13408  0675  113C               	bcf	(_I2C_Status^(0+128)+28),2
 13409                           
 13410                           ;i2c_master.c: 215: I2C_Status.address = 0xff;
 13411  0676  30FF               	movlw	255
 13412  0677  00F0               	movwf	??i1_I2C_Close
 13413  0678  0870               	movf	??i1_I2C_Close,w
 13414  0679  00B6               	movwf	(_I2C_Status^(0+128)+22)
 13415                           
 13416                           ;i2c_master.c: 216: I2C_MasterClearIrq();
 13417  067A  318E  2658  3186   	fcall	i1_I2C_MasterClearIrq
 13418                           
 13419                           ;i2c_master.c: 217: I2C_MasterDisableIrq();
 13420  067D  318E  265E  3186   	fcall	i1_I2C_MasterDisableIrq
 13421                           
 13422                           ;i2c_master.c: 218: I2C_MasterClose();
 13423  0680  318E  265B         	fcall	i1_I2C_MasterClose
 13424                           
 13425                           ;i2c_master.c: 219: returnValue = I2C_Status.error;
 13426  0682  0021               	movlb	1	; select bank1
 13427  0683  083B               	movf	(_I2C_Status^(0+128)+27),w
 13428  0684  00F0               	movwf	??i1_I2C_Close
 13429  0685  0870               	movf	??i1_I2C_Close,w
 13430  0686  00F1               	movwf	i1I2C_Close@returnValue
 13431  0687                     i1l3184:	
 13432                           
 13433                           ;i2c_master.c: 220: }
 13434                           ;i2c_master.c: 221: return returnValue;
 13435  0687  0871               	movf	i1I2C_Close@returnValue,w
 13436  0688  0008               	return
 13437  0689                     __end_ofi1_I2C_Close:	
 13438                           
 13439                           	psect	text118
 13440  0E5E                     __ptext118:	
 13441 ;; *************** function i1_I2C_MasterDisableIrq *****************
 13442 ;; Defined at:
 13443 ;;		line 635 in file "mcc_generated_files/i2c_master.c"
 13444 ;; Parameters:    Size  Location     Type
 13445 ;;		None
 13446 ;; Auto vars:     Size  Location     Type
 13447 ;;		None
 13448 ;; Return value:  Size  Location     Type
 13449 ;;                  1    wreg      void 
 13450 ;; Registers used:
 13451 ;;		None
 13452 ;; Tracked objects:
 13453 ;;		On entry : 0/0
 13454 ;;		On exit  : 0/0
 13455 ;;		Unchanged: 0/0
 13456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13461 ;;Total ram usage:        0 bytes
 13462 ;; Hardware stack levels used:    1
 13463 ;; This function calls:
 13464 ;;		Nothing
 13465 ;; This function is called by:
 13466 ;;		i1_I2C_Close
 13467 ;; This function uses a non-reentrant model
 13468 ;;
 13469                           
 13470                           
 13471                           ;psect for function i1_I2C_MasterDisableIrq
 13472  0E5E                     i1_I2C_MasterDisableIrq:	
 13473                           
 13474                           ;i2c_master.c: 637: PIE1bits.SSP1IE = 0;
 13475                           
 13476                           ;incstack = 0
 13477                           ; Regs used in i1_I2C_MasterDisableIrq: []
 13478  0E5E  0021               	movlb	1	; select bank1
 13479  0E5F  1190               	bcf	16,3	;volatile
 13480  0E60  0008               	return
 13481  0E61                     __end_ofi1_I2C_MasterDisableIrq:	
 13482                           
 13483                           	psect	text119
 13484  0E5B                     __ptext119:	
 13485 ;; *************** function i1_I2C_MasterClose *****************
 13486 ;; Defined at:
 13487 ;;		line 557 in file "mcc_generated_files/i2c_master.c"
 13488 ;; Parameters:    Size  Location     Type
 13489 ;;		None
 13490 ;; Auto vars:     Size  Location     Type
 13491 ;;		None
 13492 ;; Return value:  Size  Location     Type
 13493 ;;                  1    wreg      void 
 13494 ;; Registers used:
 13495 ;;		None
 13496 ;; Tracked objects:
 13497 ;;		On entry : 0/0
 13498 ;;		On exit  : 0/0
 13499 ;;		Unchanged: 0/0
 13500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13505 ;;Total ram usage:        0 bytes
 13506 ;; Hardware stack levels used:    1
 13507 ;; This function calls:
 13508 ;;		Nothing
 13509 ;; This function is called by:
 13510 ;;		i1_I2C_Close
 13511 ;; This function uses a non-reentrant model
 13512 ;;
 13513                           
 13514                           
 13515                           ;psect for function i1_I2C_MasterClose
 13516  0E5B                     i1_I2C_MasterClose:	
 13517                           
 13518                           ;i2c_master.c: 560: SSP1CON1bits.SSPEN = 0;
 13519                           
 13520                           ;incstack = 0
 13521                           ; Regs used in i1_I2C_MasterClose: []
 13522  0E5B  0024               	movlb	4	; select bank4
 13523  0E5C  1295               	bcf	21,5	;volatile
 13524  0E5D  0008               	return
 13525  0E5E                     __end_ofi1_I2C_MasterClose:	
 13526                           
 13527                           	psect	text120
 13528  0E58                     __ptext120:	
 13529 ;; *************** function i1_I2C_MasterClearIrq *****************
 13530 ;; Defined at:
 13531 ;;		line 640 in file "mcc_generated_files/i2c_master.c"
 13532 ;; Parameters:    Size  Location     Type
 13533 ;;		None
 13534 ;; Auto vars:     Size  Location     Type
 13535 ;;		None
 13536 ;; Return value:  Size  Location     Type
 13537 ;;                  1    wreg      void 
 13538 ;; Registers used:
 13539 ;;		None
 13540 ;; Tracked objects:
 13541 ;;		On entry : 0/0
 13542 ;;		On exit  : 0/0
 13543 ;;		Unchanged: 0/0
 13544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13549 ;;Total ram usage:        0 bytes
 13550 ;; Hardware stack levels used:    1
 13551 ;; This function calls:
 13552 ;;		Nothing
 13553 ;; This function is called by:
 13554 ;;		i1_I2C_Open
 13555 ;;		i1_I2C_Close
 13556 ;;		i1_I2C_MasterFsm
 13557 ;; This function uses a non-reentrant model
 13558 ;;
 13559                           
 13560                           
 13561                           ;psect for function i1_I2C_MasterClearIrq
 13562  0E58                     i1_I2C_MasterClearIrq:	
 13563                           
 13564                           ;i2c_master.c: 642: PIR1bits.SSP1IF = 0;
 13565                           
 13566                           ;incstack = 0
 13567                           ; Regs used in i1_I2C_MasterClearIrq: []
 13568  0E58  0020               	movlb	0	; select bank0
 13569  0E59  1190               	bcf	16,3	;volatile
 13570  0E5A  0008               	return
 13571  0E5B                     __end_ofi1_I2C_MasterClearIrq:	
 13572                           
 13573                           	psect	text121
 13574  03E0                     __ptext121:	
 13575 ;; *************** function _EUSART_Receive_ISR *****************
 13576 ;; Defined at:
 13577 ;;		line 173 in file "mcc_generated_files/eusart.c"
 13578 ;; Parameters:    Size  Location     Type
 13579 ;;		None
 13580 ;; Auto vars:     Size  Location     Type
 13581 ;;		None
 13582 ;; Return value:  Size  Location     Type
 13583 ;;                  1    wreg      void 
 13584 ;; Registers used:
 13585 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13586 ;; Tracked objects:
 13587 ;;		On entry : 0/0
 13588 ;;		On exit  : 0/0
 13589 ;;		Unchanged: 0/0
 13590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13594 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13595 ;;Total ram usage:        0 bytes
 13596 ;; Hardware stack levels used:    1
 13597 ;; Hardware stack levels required when called:    2
 13598 ;; This function calls:
 13599 ;;		Absolute function
 13600 ;;		_EUSART_DefaultErrorHandler
 13601 ;;		_EUSART_DefaultFramingErrorHandler
 13602 ;;		_EUSART_DefaultOverrunErrorHandler
 13603 ;;		_EUSART_RxDataHandler
 13604 ;; This function is called by:
 13605 ;;		_EUSART_Initialize
 13606 ;;		_INTERRUPT_InterruptManager
 13607 ;; This function uses a non-reentrant model
 13608 ;;
 13609                           
 13610                           
 13611                           ;psect for function _EUSART_Receive_ISR
 13612  03E0                     _EUSART_Receive_ISR:	
 13613                           
 13614                           ;eusart.c: 176: eusartRxStatusBuffer[eusartRxHead].status = 0;
 13615                           
 13616                           ;incstack = 0
 13617                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13618  03E0  0020               	movlb	0	; select bank0
 13619  03E1  0839               	movf	_eusartRxHead,w	;volatile
 13620  03E2  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13621  03E3  0086               	movwf	6
 13622  03E4  0187               	clrf	7
 13623  03E5  0181               	clrf	1
 13624                           
 13625                           ;eusart.c: 178: if(RC1STAbits.FERR){
 13626  03E6  0023               	movlb	3	; select bank3
 13627  03E7  1D1D               	btfss	29,2	;volatile
 13628  03E8  2BF4               	goto	i1l5930
 13629                           
 13630                           ;eusart.c: 179: eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 13631  03E9  0020               	movlb	0	; select bank0
 13632  03EA  0839               	movf	_eusartRxHead,w	;volatile
 13633  03EB  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13634  03EC  0086               	movwf	6
 13635  03ED  0187               	clrf	7
 13636  03EE  1481               	bsf	1,1
 13637                           
 13638                           ;eusart.c: 180: EUSART_FramingErrorHandler();
 13639  03EF  0857               	movf	_EUSART_FramingErrorHandler+1,w
 13640  03F0  008A               	movwf	10
 13641  03F1  0856               	movf	_EUSART_FramingErrorHandler,w
 13642  03F2  000A               	callw
 13643  03F3  3183               	pagesel	$
 13644  03F4                     i1l5930:	
 13645                           
 13646                           ;eusart.c: 181: }
 13647                           ;eusart.c: 183: if(RC1STAbits.OERR){
 13648  03F4  0023               	movlb	3	; select bank3
 13649  03F5  1C9D               	btfss	29,1	;volatile
 13650  03F6  2C03               	goto	i1l5936
 13651                           
 13652                           ;eusart.c: 184: eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 13653  03F7  0020               	movlb	0	; select bank0
 13654  03F8  0839               	movf	_eusartRxHead,w	;volatile
 13655  03F9  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13656  03FA  0086               	movwf	6
 13657  03FB  0187               	clrf	7
 13658  03FC  1501               	bsf	1,2
 13659                           
 13660                           ;eusart.c: 185: EUSART_OverrunErrorHandler();
 13661  03FD  0021               	movlb	1	; select bank1
 13662  03FE  0852               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
 13663  03FF  008A               	movwf	10
 13664  0400  0851               	movf	_EUSART_OverrunErrorHandler^(0+128),w
 13665  0401  000A               	callw
 13666  0402  3183               	pagesel	$
 13667  0403                     i1l5936:	
 13668                           
 13669                           ;eusart.c: 186: }
 13670                           ;eusart.c: 188: if(eusartRxStatusBuffer[eusartRxHead].status){
 13671  0403  0020               	movlb	0	; select bank0
 13672  0404  0839               	movf	_eusartRxHead,w	;volatile
 13673  0405  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13674  0406  0086               	movwf	6
 13675  0407  0187               	clrf	7
 13676  0408  0801               	movf	1,w
 13677  0409  1903               	btfsc	3,2
 13678  040A  2C12               	goto	i1l5940
 13679                           
 13680                           ;eusart.c: 189: EUSART_ErrorHandler();
 13681  040B  0021               	movlb	1	; select bank1
 13682  040C  0850               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
 13683  040D  008A               	movwf	10
 13684  040E  084F               	movf	_EUSART_ErrorHandler^(0+128),w
 13685  040F  000A               	callw
 13686  0410  3183               	pagesel	$
 13687                           
 13688                           ;eusart.c: 190: } else {
 13689  0411  0008               	return
 13690  0412                     i1l5940:	
 13691                           
 13692                           ;eusart.c: 191: EUSART_RxDataHandler();
 13693  0412  3186  26A0         	fcall	_EUSART_RxDataHandler
 13694  0414  0008               	return
 13695  0415                     __end_of_EUSART_Receive_ISR:	
 13696                           
 13697                           	psect	text122
 13698  0045                     __ptext122:	
 13699 ;; *************** function _MyUART_ISR *****************
 13700 ;; Defined at:
 13701 ;;		line 91 in file "main.c"
 13702 ;; Parameters:    Size  Location     Type
 13703 ;;		None
 13704 ;; Auto vars:     Size  Location     Type
 13705 ;;  c               1    5[COMMON] unsigned char 
 13706 ;; Return value:  Size  Location     Type
 13707 ;;                  1    wreg      void 
 13708 ;; Registers used:
 13709 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13710 ;; Tracked objects:
 13711 ;;		On entry : 0/0
 13712 ;;		On exit  : 0/0
 13713 ;;		Unchanged: 0/0
 13714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13716 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13717 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13718 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13719 ;;Total ram usage:        5 bytes
 13720 ;; Hardware stack levels used:    1
 13721 ;; Hardware stack levels required when called:    1
 13722 ;; This function calls:
 13723 ;;		_EUSART_Write
 13724 ;; This function is called by:
 13725 ;;		_main
 13726 ;;		_INTERRUPT_InterruptManager
 13727 ;; This function uses a non-reentrant model
 13728 ;;
 13729                           
 13730                           
 13731                           ;psect for function _MyUART_ISR
 13732  0045                     _MyUART_ISR:	
 13733                           
 13734                           ;main.c: 92: unsigned char c = RC1REG;
 13735                           
 13736                           ;incstack = 0
 13737                           ; Regs used in _MyUART_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13738  0045  0023               	movlb	3	; select bank3
 13739  0046  0819               	movf	25,w	;volatile
 13740  0047  00F1               	movwf	??_MyUART_ISR
 13741  0048  0871               	movf	??_MyUART_ISR,w
 13742  0049  00F5               	movwf	MyUART_ISR@c
 13743                           
 13744                           ;main.c: 93: if(c) {
 13745  004A  0875               	movf	MyUART_ISR@c,w
 13746  004B  1903               	btfsc	3,2
 13747  004C  0008               	return
 13748  004D  28F0               	goto	i1l3584
 13749  004E                     i1l3534:	
 13750                           ;main.c: 95: case S_Idle:
 13751                           
 13752                           ;main.c: 94: switch(PosUart) {
 13753                           
 13754                           
 13755                           ;main.c: 96: if(c == 'V' || c == 'A' || c == 'P' || c == 'L') {
 13756  004E  3056               	movlw	86
 13757  004F  0675               	xorwf	MyUART_ISR@c,w
 13758  0050  1903               	btfsc	3,2
 13759  0051  285E               	goto	i1l3542
 13760  0052  3041               	movlw	65
 13761  0053  0675               	xorwf	MyUART_ISR@c,w
 13762  0054  1903               	btfsc	3,2
 13763  0055  285E               	goto	i1l3542
 13764  0056  3050               	movlw	80
 13765  0057  0675               	xorwf	MyUART_ISR@c,w
 13766  0058  1903               	btfsc	3,2
 13767  0059  285E               	goto	i1l3542
 13768  005A  304C               	movlw	76
 13769  005B  0675               	xorwf	MyUART_ISR@c,w
 13770  005C  1D03               	btfss	3,2
 13771  005D  0008               	return
 13772  005E                     i1l3542:	
 13773                           
 13774                           ;main.c: 97: Type = c;
 13775  005E  0875               	movf	MyUART_ISR@c,w
 13776  005F  00F1               	movwf	??_MyUART_ISR
 13777  0060  0871               	movf	??_MyUART_ISR,w
 13778  0061  0020               	movlb	0	; select bank0
 13779  0062  00B4               	movwf	_Type
 13780                           
 13781                           ;main.c: 98: PosUart = S_Data;
 13782  0063  01B3               	clrf	_PosUart
 13783  0064  0AB3               	incf	_PosUart,f
 13784                           
 13785                           ;main.c: 99: }
 13786                           ;main.c: 100: break;
 13787  0065  0008               	return
 13788  0066                     i1l3546:	
 13789                           ;main.c: 101: case S_Data:
 13790                           
 13791                           
 13792                           ;main.c: 102: Data = c;
 13793  0066  0875               	movf	MyUART_ISR@c,w
 13794  0067  00F1               	movwf	??_MyUART_ISR
 13795  0068  0871               	movf	??_MyUART_ISR,w
 13796  0069  00B5               	movwf	_Data
 13797                           
 13798                           ;main.c: 103: PosUart = S_Check;
 13799  006A  3002               	movlw	2
 13800  006B  00F1               	movwf	??_MyUART_ISR
 13801  006C  0871               	movf	??_MyUART_ISR,w
 13802  006D  00B3               	movwf	_PosUart
 13803                           
 13804                           ;main.c: 104: break;
 13805  006E  0008               	return
 13806  006F                     i1l3548:	
 13807                           ;main.c: 105: case S_Check:
 13808                           
 13809                           
 13810                           ;main.c: 106: if((Type+Data)%256 == c) {
 13811  006F  0834               	movf	_Type,w
 13812  0070  0735               	addwf	_Data,w
 13813  0071  00F1               	movwf	??_MyUART_ISR
 13814  0072  01F2               	clrf	??_MyUART_ISR+1
 13815  0073  0DF2               	rlf	??_MyUART_ISR+1,f
 13816  0074  30FF               	movlw	255
 13817  0075  0571               	andwf	??_MyUART_ISR,w
 13818  0076  00F3               	movwf	??_MyUART_ISR+2
 13819  0077  3000               	movlw	0
 13820  0078  0572               	andwf	??_MyUART_ISR+1,w
 13821  0079  00F4               	movwf	??_MyUART_ISR+3
 13822  007A  0875               	movf	MyUART_ISR@c,w
 13823  007B  0673               	xorwf	??_MyUART_ISR+2,w
 13824  007C  0474               	iorwf	??_MyUART_ISR+3,w
 13825  007D  1D03               	skipz
 13826  007E  28E0               	goto	i1l3576
 13827                           
 13828                           ;main.c: 107: Validation = 4;
 13829  007F  3004               	movlw	4
 13830  0080  00F1               	movwf	??_MyUART_ISR
 13831  0081  0871               	movf	??_MyUART_ISR,w
 13832  0082  00DC               	movwf	_Validation
 13833                           
 13834                           ;main.c: 108: if(Type == 'V') {
 13835  0083  3056               	movlw	86
 13836  0084  0634               	xorwf	_Type,w
 13837  0085  1D03               	btfss	3,2
 13838  0086  288F               	goto	i1l3556
 13839                           
 13840                           ;main.c: 109: Vitesse = Data;
 13841  0087  0835               	movf	_Data,w
 13842  0088  00F1               	movwf	??_MyUART_ISR
 13843  0089  01F2               	clrf	??_MyUART_ISR+1
 13844  008A  0871               	movf	??_MyUART_ISR,w
 13845  008B  00B0               	movwf	_Vitesse
 13846  008C  0872               	movf	??_MyUART_ISR+1,w
 13847  008D  00B1               	movwf	_Vitesse+1
 13848                           
 13849                           ;main.c: 110: } else if(Type == 'A') {
 13850  008E  28EB               	goto	i1l3578
 13851  008F                     i1l3556:	
 13852  008F  3041               	movlw	65
 13853  0090  0634               	xorwf	_Type,w
 13854  0091  1D03               	btfss	3,2
 13855  0092  289B               	goto	i1l3560
 13856                           
 13857                           ;main.c: 111: Angle = Data;
 13858  0093  0835               	movf	_Data,w
 13859  0094  00F1               	movwf	??_MyUART_ISR
 13860  0095  01F2               	clrf	??_MyUART_ISR+1
 13861  0096  0871               	movf	??_MyUART_ISR,w
 13862  0097  00DA               	movwf	_Angle
 13863  0098  0872               	movf	??_MyUART_ISR+1,w
 13864  0099  00DB               	movwf	_Angle+1
 13865                           
 13866                           ;main.c: 112: } else if(Type == 'P') {
 13867  009A  28EB               	goto	i1l3578
 13868  009B                     i1l3560:	
 13869  009B  3050               	movlw	80
 13870  009C  0634               	xorwf	_Type,w
 13871  009D  1D03               	btfss	3,2
 13872  009E  28A9               	goto	i1l3564
 13873                           
 13874                           ;main.c: 113: EUSART_Write('P');
 13875  009F  3050               	movlw	80
 13876  00A0  318F  273B  3180   	fcall	_EUSART_Write
 13877                           
 13878                           ;main.c: 114: EUSART_Write('+');
 13879  00A3  302B               	movlw	43
 13880  00A4  318F  273B  3180   	fcall	_EUSART_Write
 13881                           
 13882                           ;main.c: 115: EUSART_Write('{');
 13883  00A7  307B               	movlw	123
 13884  00A8  28E9               	goto	L3
 13885  00A9                     i1l3564:	
 13886                           ;main.c: 116: } else if(Type == 'L') {
 13887                           
 13888  00A9  304C               	movlw	76
 13889  00AA  0020               	movlb	0	; select bank0
 13890  00AB  0634               	xorwf	_Type,w
 13891  00AC  1D03               	btfss	3,2
 13892  00AD  28D6               	goto	i1l3574
 13893                           
 13894                           ;main.c: 117: SateLeds++;
 13895  00AE  3001               	movlw	1
 13896  00AF  00F1               	movwf	??_MyUART_ISR
 13897  00B0  0871               	movf	??_MyUART_ISR,w
 13898  00B1  07B2               	addwf	_SateLeds,f
 13899                           
 13900                           ;main.c: 118: switch(SateLeds) {
 13901  00B2  28C7               	goto	i1l3572
 13902  00B3                     i1l844:	
 13903                           ;main.c: 120: do { LATCbits.LATC6 = 0; } while(0);
 13904                           
 13905                           ;main.c: 119: case S_leds_off:
 13906                           
 13907  00B3  0022               	movlb	2	; select bank2
 13908  00B4  130E               	bcf	14,6	;volatile
 13909  00B5  28B8               	goto	i1l852
 13910  00B6                     i1l850:	
 13911                           ;main.c: 124: do { LATCbits.LATC6 = 1; } while(0);
 13912                           
 13913                           ;main.c: 123: case S_led_r:
 13914                           
 13915                           ;main.c: 122: break;
 13916                           
 13917                           ;main.c: 121: do { LATCbits.LATC7 = 0; } while(0);
 13918                           
 13919  00B6  0022               	movlb	2	; select bank2
 13920  00B7  170E               	bsf	14,6	;volatile
 13921  00B8                     i1l852:	
 13922                           ;main.c: 125: do { LATCbits.LATC7 = 0; } while(0);
 13923                           
 13924  00B8  138E               	bcf	14,7	;volatile
 13925                           
 13926                           ;main.c: 126: break;
 13927  00B9  28EB               	goto	i1l3578
 13928  00BA                     i1l855:	
 13929                           ;main.c: 128: do { LATCbits.LATC6 = 0; } while(0);
 13930                           
 13931                           ;main.c: 127: case S_led_l:
 13932                           
 13933  00BA  0022               	movlb	2	; select bank2
 13934  00BB  130E               	bcf	14,6	;volatile
 13935  00BC  28BF               	goto	i1l862
 13936  00BD                     i1l860:	
 13937                           ;main.c: 132: do { LATCbits.LATC6 = 1; } while(0);
 13938                           
 13939                           ;main.c: 131: case S_leds_on:
 13940                           
 13941                           ;main.c: 130: break;
 13942                           
 13943                           ;main.c: 129: do { LATCbits.LATC7 = 1; } while(0);
 13944                           
 13945  00BD  0022               	movlb	2	; select bank2
 13946  00BE  170E               	bsf	14,6	;volatile
 13947  00BF                     i1l862:	
 13948                           ;main.c: 133: do { LATCbits.LATC7 = 1; } while(0);
 13949                           
 13950  00BF  178E               	bsf	14,7	;volatile
 13951                           
 13952                           ;main.c: 134: break;
 13953  00C0  28EB               	goto	i1l3578
 13954  00C1                     i1l865:	
 13955                           ;main.c: 136: do { LATCbits.LATC6 = 0; } while(0);
 13956                           
 13957                           ;main.c: 135: default:
 13958                           
 13959  00C1  0022               	movlb	2	; select bank2
 13960  00C2  130E               	bcf	14,6	;volatile
 13961                           
 13962                           ;main.c: 137: do { LATCbits.LATC7 = 0; } while(0);
 13963  00C3  138E               	bcf	14,7	;volatile
 13964                           
 13965                           ;main.c: 138: SateLeds = S_leds_off;
 13966  00C4  0020               	movlb	0	; select bank0
 13967  00C5  01B2               	clrf	_SateLeds
 13968                           
 13969                           ;main.c: 140: }
 13970                           
 13971                           ;main.c: 139: break;
 13972  00C6  28EB               	goto	i1l3578
 13973  00C7                     i1l3572:	
 13974  00C7  0832               	movf	_SateLeds,w
 13975                           
 13976                           ; Switch size 1, requested type "space"
 13977                           ; Number of cases is 4, Range of values is 0 to 3
 13978                           ; switch strategies available:
 13979                           ; Name         Instructions Cycles
 13980                           ; simple_byte           13     7 (average)
 13981                           ; direct_byte           14     6 (fixed)
 13982                           ; jumptable            260     6 (fixed)
 13983                           ;	Chosen strategy is simple_byte
 13984  00C8  3A00               	xorlw	0	; case 0
 13985  00C9  1903               	skipnz
 13986  00CA  28B3               	goto	i1l844
 13987  00CB  3A01               	xorlw	1	; case 1
 13988  00CC  1903               	skipnz
 13989  00CD  28B6               	goto	i1l850
 13990  00CE  3A03               	xorlw	3	; case 2
 13991  00CF  1903               	skipnz
 13992  00D0  28BA               	goto	i1l855
 13993  00D1  3A01               	xorlw	1	; case 3
 13994  00D2  1903               	skipnz
 13995  00D3  28BD               	goto	i1l860
 13996  00D4  28C1               	goto	i1l865
 13997                           
 13998                           ;main.c: 141: } else {
 13999  00D5  28EB               	goto	i1l3578
 14000  00D6                     i1l3574:	
 14001                           
 14002                           ;main.c: 142: EUSART_Write('$');
 14003  00D6  3024               	movlw	36
 14004  00D7  318F  273B  3180   	fcall	_EUSART_Write
 14005                           
 14006                           ;main.c: 143: EUSART_Write('M');
 14007  00DA  304D               	movlw	77
 14008  00DB  318F  273B  3180   	fcall	_EUSART_Write
 14009                           
 14010                           ;main.c: 144: EUSART_Write('q');
 14011  00DE  3071               	movlw	113
 14012  00DF  28E9               	goto	L3
 14013  00E0                     i1l3576:	
 14014                           ;main.c: 145: }
 14015                           ;main.c: 146: } else {
 14016                           
 14017                           
 14018                           ;main.c: 147: EUSART_Write('$');
 14019  00E0  3024               	movlw	36
 14020  00E1  318F  273B  3180   	fcall	_EUSART_Write
 14021                           
 14022                           ;main.c: 148: EUSART_Write('C');
 14023  00E4  3043               	movlw	67
 14024  00E5  318F  273B  3180   	fcall	_EUSART_Write
 14025                           
 14026                           ;main.c: 149: EUSART_Write('g');
 14027  00E8  3067               	movlw	103
 14028  00E9                     L3:	
 14029  00E9  318F  273B         	fcall	_EUSART_Write
 14030  00EB                     i1l3578:	
 14031                           
 14032                           ;main.c: 150: }
 14033                           ;main.c: 151: PosUart = S_Idle;
 14034  00EB  0020               	movlb	0	; select bank0
 14035  00EC  01B3               	clrf	_PosUart
 14036                           
 14037                           ;main.c: 152: break;
 14038  00ED  0008               	return
 14039  00EE                     i1l3580:	
 14040                           ;main.c: 153: default:
 14041                           
 14042                           
 14043                           ;main.c: 154: PosUart = S_Idle;
 14044  00EE  01B3               	clrf	_PosUart
 14045                           
 14046                           ;main.c: 156: }
 14047                           
 14048                           ;main.c: 155: break;
 14049  00EF  0008               	return
 14050  00F0                     i1l3584:	
 14051  00F0  0020               	movlb	0	; select bank0
 14052  00F1  0833               	movf	_PosUart,w
 14053                           
 14054                           ; Switch size 1, requested type "space"
 14055                           ; Number of cases is 3, Range of values is 0 to 2
 14056                           ; switch strategies available:
 14057                           ; Name         Instructions Cycles
 14058                           ; simple_byte           10     6 (average)
 14059                           ; direct_byte           12     6 (fixed)
 14060                           ; jumptable            260     6 (fixed)
 14061                           ;	Chosen strategy is simple_byte
 14062  00F2  3A00               	xorlw	0	; case 0
 14063  00F3  1903               	skipnz
 14064  00F4  284E               	goto	i1l3534
 14065  00F5  3A01               	xorlw	1	; case 1
 14066  00F6  1903               	skipnz
 14067  00F7  2866               	goto	i1l3546
 14068  00F8  3A03               	xorlw	3	; case 2
 14069  00F9  1903               	skipnz
 14070  00FA  286F               	goto	i1l3548
 14071  00FB  28EE               	goto	i1l3580
 14072  00FC  0008               	return
 14073  00FD                     __end_of_MyUART_ISR:	
 14074                           
 14075                           	psect	text123
 14076  0F3B                     __ptext123:	
 14077 ;; *************** function _EUSART_Write *****************
 14078 ;; Defined at:
 14079 ;;		line 162 in file "mcc_generated_files/eusart.c"
 14080 ;; Parameters:    Size  Location     Type
 14081 ;;  txData          1    wreg     unsigned char 
 14082 ;; Auto vars:     Size  Location     Type
 14083 ;;  txData          1    0[COMMON] unsigned char 
 14084 ;; Return value:  Size  Location     Type
 14085 ;;                  1    wreg      void 
 14086 ;; Registers used:
 14087 ;;		wreg
 14088 ;; Tracked objects:
 14089 ;;		On entry : 0/0
 14090 ;;		On exit  : 0/0
 14091 ;;		Unchanged: 0/0
 14092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14094 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14096 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14097 ;;Total ram usage:        1 bytes
 14098 ;; Hardware stack levels used:    1
 14099 ;; This function calls:
 14100 ;;		Nothing
 14101 ;; This function is called by:
 14102 ;;		_MyTimer2ISR
 14103 ;;		_MyUART_ISR
 14104 ;; This function uses a non-reentrant model
 14105 ;;
 14106                           
 14107                           
 14108                           ;psect for function _EUSART_Write
 14109  0F3B                     _EUSART_Write:	
 14110                           
 14111                           ;incstack = 0
 14112                           ; Regs used in _EUSART_Write: [wreg]
 14113                           ;EUSART_Write@txData stored from wreg
 14114  0F3B  00F0               	movwf	EUSART_Write@txData
 14115  0F3C                     i1l635:	
 14116                           ;eusart.c: 165: {
 14117                           
 14118                           ;eusart.c: 164: while(0 == PIR1bits.TXIF)
 14119                           
 14120  0F3C  0020               	movlb	0	; select bank0
 14121  0F3D  1E10               	btfss	16,4	;volatile
 14122  0F3E  2F3C               	goto	i1l635
 14123                           
 14124                           ;eusart.c: 166: }
 14125                           ;eusart.c: 168: TX1REG = txData;
 14126  0F3F  0870               	movf	EUSART_Write@txData,w
 14127  0F40  0023               	movlb	3	; select bank3
 14128  0F41  009A               	movwf	26	;volatile
 14129  0F42  0008               	return
 14130  0F43                     __end_of_EUSART_Write:	
 14131                           
 14132                           	psect	text124
 14133  0E97                     __ptext124:	
 14134 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 14135 ;; Defined at:
 14136 ;;		line 209 in file "mcc_generated_files/eusart.c"
 14137 ;; Parameters:    Size  Location     Type
 14138 ;;		None
 14139 ;; Auto vars:     Size  Location     Type
 14140 ;;		None
 14141 ;; Return value:  Size  Location     Type
 14142 ;;                  1    wreg      void 
 14143 ;; Registers used:
 14144 ;;		None
 14145 ;; Tracked objects:
 14146 ;;		On entry : 0/0
 14147 ;;		On exit  : 0/0
 14148 ;;		Unchanged: 0/0
 14149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14154 ;;Total ram usage:        0 bytes
 14155 ;; Hardware stack levels used:    1
 14156 ;; This function calls:
 14157 ;;		Nothing
 14158 ;; This function is called by:
 14159 ;;		_EUSART_Initialize
 14160 ;;		_EUSART_Receive_ISR
 14161 ;; This function uses a non-reentrant model
 14162 ;;
 14163                           
 14164                           
 14165                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 14166  0E97                     _EUSART_DefaultOverrunErrorHandler:	
 14167                           
 14168                           ;eusart.c: 212: RC1STAbits.CREN = 0;
 14169                           
 14170                           ;incstack = 0
 14171                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 14172  0E97  0023               	movlb	3	; select bank3
 14173  0E98  121D               	bcf	29,4	;volatile
 14174                           
 14175                           ;eusart.c: 213: RC1STAbits.CREN = 1;
 14176  0E99  161D               	bsf	29,4	;volatile
 14177  0E9A  0008               	return
 14178  0E9B                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 14179                           
 14180                           	psect	text125
 14181  0E50                     __ptext125:	
 14182 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 14183 ;; Defined at:
 14184 ;;		line 207 in file "mcc_generated_files/eusart.c"
 14185 ;; Parameters:    Size  Location     Type
 14186 ;;		None
 14187 ;; Auto vars:     Size  Location     Type
 14188 ;;		None
 14189 ;; Return value:  Size  Location     Type
 14190 ;;                  1    wreg      void 
 14191 ;; Registers used:
 14192 ;;		None
 14193 ;; Tracked objects:
 14194 ;;		On entry : 0/0
 14195 ;;		On exit  : 0/0
 14196 ;;		Unchanged: 0/0
 14197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14201 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14202 ;;Total ram usage:        0 bytes
 14203 ;; Hardware stack levels used:    1
 14204 ;; This function calls:
 14205 ;;		Nothing
 14206 ;; This function is called by:
 14207 ;;		_EUSART_Initialize
 14208 ;;		_EUSART_Receive_ISR
 14209 ;; This function uses a non-reentrant model
 14210 ;;
 14211                           
 14212                           
 14213                           ;psect for function _EUSART_DefaultFramingErrorHandler
 14214  0E50                     _EUSART_DefaultFramingErrorHandler:	
 14215                           
 14216                           ;incstack = 0
 14217                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 14218  0E50  0008               	return
 14219  0E51                     __end_of_EUSART_DefaultFramingErrorHandler:	
 14220                           
 14221                           	psect	text126
 14222  0E55                     __ptext126:	
 14223 ;; *************** function _EUSART_DefaultErrorHandler *****************
 14224 ;; Defined at:
 14225 ;;		line 217 in file "mcc_generated_files/eusart.c"
 14226 ;; Parameters:    Size  Location     Type
 14227 ;;		None
 14228 ;; Auto vars:     Size  Location     Type
 14229 ;;		None
 14230 ;; Return value:  Size  Location     Type
 14231 ;;                  1    wreg      void 
 14232 ;; Registers used:
 14233 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14234 ;; Tracked objects:
 14235 ;;		On entry : 0/0
 14236 ;;		On exit  : 0/0
 14237 ;;		Unchanged: 0/0
 14238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14243 ;;Total ram usage:        0 bytes
 14244 ;; Hardware stack levels used:    1
 14245 ;; Hardware stack levels required when called:    1
 14246 ;; This function calls:
 14247 ;;		_EUSART_RxDataHandler
 14248 ;; This function is called by:
 14249 ;;		_EUSART_Initialize
 14250 ;;		_EUSART_Receive_ISR
 14251 ;; This function uses a non-reentrant model
 14252 ;;
 14253                           
 14254                           
 14255                           ;psect for function _EUSART_DefaultErrorHandler
 14256  0E55                     _EUSART_DefaultErrorHandler:	
 14257                           
 14258                           ;eusart.c: 218: EUSART_RxDataHandler();
 14259                           
 14260                           ;incstack = 0
 14261                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 14262  0E55  3186  26A0         	fcall	_EUSART_RxDataHandler
 14263  0E57  0008               	return
 14264  0E58                     __end_of_EUSART_DefaultErrorHandler:	
 14265                           
 14266                           	psect	text127
 14267  06A0                     __ptext127:	
 14268 ;; *************** function _EUSART_RxDataHandler *****************
 14269 ;; Defined at:
 14270 ;;		line 197 in file "mcc_generated_files/eusart.c"
 14271 ;; Parameters:    Size  Location     Type
 14272 ;;		None
 14273 ;; Auto vars:     Size  Location     Type
 14274 ;;		None
 14275 ;; Return value:  Size  Location     Type
 14276 ;;                  1    wreg      void 
 14277 ;; Registers used:
 14278 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14279 ;; Tracked objects:
 14280 ;;		On entry : 0/0
 14281 ;;		On exit  : 0/0
 14282 ;;		Unchanged: 0/0
 14283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14286 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14287 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14288 ;;Total ram usage:        1 bytes
 14289 ;; Hardware stack levels used:    1
 14290 ;; This function calls:
 14291 ;;		Nothing
 14292 ;; This function is called by:
 14293 ;;		_EUSART_Receive_ISR
 14294 ;;		_EUSART_DefaultErrorHandler
 14295 ;; This function uses a non-reentrant model
 14296 ;;
 14297                           
 14298                           
 14299                           ;psect for function _EUSART_RxDataHandler
 14300  06A0                     _EUSART_RxDataHandler:	
 14301                           
 14302                           ;eusart.c: 199: eusartRxBuffer[eusartRxHead++] = RC1REG;
 14303                           
 14304                           ;incstack = 0
 14305                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 14306  06A0  0023               	movlb	3	; select bank3
 14307  06A1  0819               	movf	25,w	;volatile
 14308  06A2  00F0               	movwf	??_EUSART_RxDataHandler
 14309  06A3  0020               	movlb	0	; select bank0
 14310  06A4  0839               	movf	_eusartRxHead,w
 14311  06A5  3E28               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 14312  06A6  0086               	movwf	6
 14313  06A7  0187               	clrf	7
 14314  06A8  0870               	movf	??_EUSART_RxDataHandler,w
 14315  06A9  0081               	movwf	1
 14316  06AA  3001               	movlw	1
 14317  06AB  00F0               	movwf	??_EUSART_RxDataHandler
 14318  06AC  0870               	movf	??_EUSART_RxDataHandler,w
 14319  06AD  07B9               	addwf	_eusartRxHead,f	;volatile
 14320                           
 14321                           ;eusart.c: 200: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 14322  06AE  3008               	movlw	8
 14323  06AF  0239               	subwf	_eusartRxHead,w	;volatile
 14324  06B0  1803               	btfsc	3,0
 14325                           
 14326                           ;eusart.c: 201: {
 14327                           ;eusart.c: 202: eusartRxHead = 0;
 14328  06B1  01B9               	clrf	_eusartRxHead	;volatile
 14329                           
 14330                           ;eusart.c: 203: }
 14331                           ;eusart.c: 204: eusartRxCount++;
 14332  06B2  3001               	movlw	1
 14333  06B3  00F0               	movwf	??_EUSART_RxDataHandler
 14334  06B4  0870               	movf	??_EUSART_RxDataHandler,w
 14335  06B5  07B7               	addwf	_eusartRxCount,f	;volatile
 14336  06B6  0008               	return
 14337  06B7                     __end_of_EUSART_RxDataHandler:	
 14338  007E                     btemp	set	126	;btemp
 14339  007E                     int$flags	set	126
 14340  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    32
    Data        3
    BSS         55
    Persistent  10
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     26      61
    BANK1            80     18      51
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    I2C_Read1ByteRegister@returnValue.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Read2ByteRegister@returnValue.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Write1ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Write2ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    I2C_DO_TX$1912$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_RX$1918$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX_EMPTY$1924$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_RX_EMPTY$1930$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX_EMPTY$1929	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX_EMPTY$1924	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_DO_RX$1923	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_RX$1918	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_DO_TX$1917	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX$1912	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_MasterFsm$1911	const PTR FTN()enum E12103 size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    I2C_CallbackReturnStop@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_CallbackReturnReset@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    Absolute function$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S443$0$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyTimer2ISR(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyTimer2ISR(), TMR2_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyUART_ISR(), EUSART_Receive_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), Absolute function(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), Absolute function(), 

    I2C_SetCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_SetCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> i1_wr1RegCompleteHandler(), i1_rd2RegCompleteHandler(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_SetAddressNackCallback@ptr	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    I2C_SetAddressNackCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> Absolute function(), 

    I2C_SetDataCompleteCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_SetDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> i1_wr1RegCompleteHandler(), i1_rd2RegCompleteHandler(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_SetBuffer@buffer	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(BANK1[1]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@reg(BANK0[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S443$data_ptr	PTR unsigned char  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(BANK1[1]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@reg(BANK0[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_Status.data_ptr	PTR unsigned char  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(BANK1[1]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@reg(BANK0[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S443$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_Status.callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S443$callbackTable	PTR FTN(PTR void ,)enum E97[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_Status.callbackTable	PTR FTN(PTR void ,)enum E97[6] size(2) Largest target is 1
		 -> i1_I2C_CallbackReturnReset(), i1_I2C_CallbackReturnStop(), i1_wr1RegCompleteHandler(), i1_rd2RegCompleteHandler(), 
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    fsmStateTable	const PTR FTN()enum E12103[16] size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyUART_ISR(), EUSART_Receive_ISR(), Absolute function(), 

    rdBlkRegCompleteHandler@ptr.data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    wr2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    wr1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    rd2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    rd1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(BANK0[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S85$data	PTR unsigned char  size(1) Largest target is 0

    bufferBlock.data	PTR unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    i1_I2C_SetAddressNackCallback->i1_I2C_SetCallback
    i1_I2C_MasterWrite->i1_I2C_MasterOperation
    i1_I2C_MasterFsm->i1_I2C_DO_TX
    i1_I2C_DO_TX_EMPTY->i1_I2C_CallbackReturnReset
    i1_I2C_DO_TX_EMPTY->i1_I2C_CallbackReturnStop
    i1_I2C_DO_TX_EMPTY->i1_rd1RegCompleteHandler
    i1_I2C_DO_TX_EMPTY->i1_rd2RegCompleteHandler
    i1_I2C_DO_TX_EMPTY->i1_rdBlkRegCompleteHandler
    i1_I2C_DO_TX_EMPTY->i1_wr1RegCompleteHandler
    i1_I2C_DO_TX_EMPTY->i1_wr2RegCompleteHandler
    i1_I2C_DO_TX->i1_I2C_CallbackReturnReset
    i1_I2C_DO_TX->i1_I2C_CallbackReturnStop
    i1_I2C_DO_TX->i1_rd1RegCompleteHandler
    i1_I2C_DO_TX->i1_rd2RegCompleteHandler
    i1_I2C_DO_TX->i1_rdBlkRegCompleteHandler
    i1_I2C_DO_TX->i1_wr1RegCompleteHandler
    i1_I2C_DO_TX->i1_wr2RegCompleteHandler
    i1_I2C_DO_RX->i1_I2C_CallbackReturnReset
    i1_I2C_DO_RX->i1_I2C_CallbackReturnStop
    i1_I2C_DO_RX->i1_rd1RegCompleteHandler
    i1_I2C_DO_RX->i1_rd2RegCompleteHandler
    i1_I2C_DO_RX->i1_rdBlkRegCompleteHandler
    i1_I2C_DO_RX->i1_wr1RegCompleteHandler
    i1_I2C_DO_RX->i1_wr2RegCompleteHandler
    i1_I2C_DO_ADDRESS_NACK->i1_I2C_CallbackReturnReset
    i1_I2C_DO_ADDRESS_NACK->i1_I2C_CallbackReturnStop
    i1_I2C_DO_ADDRESS_NACK->i1_rd1RegCompleteHandler
    i1_I2C_DO_ADDRESS_NACK->i1_rd2RegCompleteHandler
    i1_I2C_DO_ADDRESS_NACK->i1_rdBlkRegCompleteHandler
    i1_I2C_DO_ADDRESS_NACK->i1_wr1RegCompleteHandler
    i1_I2C_DO_ADDRESS_NACK->i1_wr2RegCompleteHandler
    i1_wr2RegCompleteHandler->i1_I2C_SetDataCompleteCallback
    i1_wr1RegCompleteHandler->i1_I2C_SetDataCompleteCallback
    i1_rdBlkRegCompleteHandler->i1_I2C_SetDataCompleteCallback
    i1_rd2RegCompleteHandler->i1_I2C_SetDataCompleteCallback
    i1_rd1RegCompleteHandler->i1_I2C_SetDataCompleteCallback
    i1_I2C_SetDataCompleteCallback->i1_I2C_SetCallback
    _MyUART_ISR->_EUSART_Write
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _TMR2_WriteTimer->_TMR2_Counter8BitSet
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _I2C_SetAddressNackCallback->_I2C_SetCallback
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnReset
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnStop
    _I2C_DO_TX_EMPTY->_rd1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rd2RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rdBlkRegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr2RegCompleteHandler
    _I2C_DO_TX->_I2C_CallbackReturnReset
    _I2C_DO_TX->_I2C_CallbackReturnStop
    _I2C_DO_TX->_rd1RegCompleteHandler
    _I2C_DO_TX->_rd2RegCompleteHandler
    _I2C_DO_TX->_rdBlkRegCompleteHandler
    _I2C_DO_TX->_wr1RegCompleteHandler
    _I2C_DO_TX->_wr2RegCompleteHandler
    _I2C_DO_SEND_ADR_WRITE->_I2C_MasterSendTxData
    _I2C_DO_RX->_I2C_CallbackReturnReset
    _I2C_DO_RX->_I2C_CallbackReturnStop
    _I2C_DO_RX->_rd1RegCompleteHandler
    _I2C_DO_RX->_rd2RegCompleteHandler
    _I2C_DO_RX->_rdBlkRegCompleteHandler
    _I2C_DO_RX->_wr1RegCompleteHandler
    _I2C_DO_RX->_wr2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnReset
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnStop
    _I2C_DO_ADDRESS_NACK->_rd1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rd2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rdBlkRegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr2RegCompleteHandler
    _wr2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _wr1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rdBlkRegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _I2C_SetDataCompleteCallback->_I2C_SetCallback

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _TMR2_ISR->_MyTimer2ISR
    _MyTimer2ISR->_I2C_Read2ByteRegister
    i1_I2C_MasterWrite->i1_I2C_MasterOperation
    i1_I2C_Poller->i1_I2C_MasterFsm

Critical Paths under _main in BANK1

    _main->_I2C_Write1ByteRegister
    _I2C_MasterWrite->_I2C_MasterOperation
    _I2C_Poller->_I2C_MasterFsm
    _I2C_MasterFsm->_I2C_DO_TX
    _wr2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _wr1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rdBlkRegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd1RegCompleteHandler->_I2C_SetDataCompleteCallback

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  100571
                                             16 BANK1      2     2      0
       _EUSART_SetRxInterruptHandler
             _I2C_Write1ByteRegister
                  _SYSTEM_Initialize
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
                    _TMR2_WriteTimer
 ---------------------------------------------------------------------------------
 (1) _TMR2_WriteTimer                                      1     1      0      44
                                             20 BANK0      1     1      0
                _TMR2_Counter8BitSet
 ---------------------------------------------------------------------------------
 (2) _TMR2_Counter8BitSet                                  1     1      0      22
                                             19 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
                         _TMR2_Start
 ---------------------------------------------------------------------------------
 (2) _TMR2_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     642
                  _EUSART_Initialize
                     _I2C_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM3_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     174
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR2_SetInterruptHandler                             2     0      2     174
                                             19 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     468
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     174
                                             19 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                             19 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                             19 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                             19 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _I2C_Write1ByteRegister                               4     2      2   99537
                                             12 BANK1      4     2      2
                          _I2C_Close
                    _I2C_MasterWrite
                           _I2C_Open
         _I2C_SetAddressNackCallback
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (2) _I2C_SetAddressNackCallback                           4     1      3    2189
                                             24 BANK0      1     1      0
                                              0 BANK1      3     0      3
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (2) _I2C_Open                                             3     3      0      68
                                             19 BANK0      3     3      0
                 _I2C_MasterClearIrq
                     _I2C_MasterOpen
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterOpen                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_MasterWrite                                      0     0      0   91367
                _I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterOperation                                  3     3      0   91367
                                              9 BANK1      3     3      0
                    _I2C_MasterStart
                         _I2C_Poller
 ---------------------------------------------------------------------------------
 (4) _I2C_Poller                                           0     0      0   91197
                      _I2C_MasterFsm
             _I2C_MasterWaitForEvent
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterWaitForEvent                               0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterFsm                                        3     3      0   91197
                                              6 BANK1      3     3      0
                _I2C_DO_ADDRESS_NACK *
                        _I2C_DO_IDLE *
                        _I2C_DO_RCEN *
                       _I2C_DO_RESET *
                          _I2C_DO_RX *
                      _I2C_DO_RX_ACK *
             _I2C_DO_RX_NACK_RESTART *
                _I2C_DO_RX_NACK_STOP *
               _I2C_DO_SEND_ADR_READ *
              _I2C_DO_SEND_ADR_WRITE *
                _I2C_DO_SEND_RESTART *
           _I2C_DO_SEND_RESTART_READ *
          _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_DO_SEND_STOP *
                          _I2C_DO_TX *
                    _I2C_DO_TX_EMPTY *
                 _I2C_MasterClearIrq
                   _I2C_MasterIsNack
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_TX_EMPTY                                      1     1      0   22751
                                              3 BANK1      1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
                   _I2C_MasterSetIrq
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterSetIrq                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_TX                                            3     3      0   22882
                                              3 BANK1      3     3      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
           _I2C_DO_SEND_RESTART_READ
          _I2C_DO_SEND_RESTART_WRITE
                   _I2C_DO_SEND_STOP
                   _I2C_MasterIsNack
               _I2C_MasterSendTxData
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterIsNack                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_SEND_RESTART_WRITE                            0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_SEND_RESTART_READ                             0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_SEND_ADR_WRITE                                0     0      0      31
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_SEND_ADR_READ                                 0     0      0      31
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterSendTxData                                 1     1      0      31
                                             19 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RX_ACK                                        0     0      0       0
                  _I2C_MasterSendAck
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RX                                            1     1      0   22751
                                              3 BANK1      1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
             _I2C_DO_RX_NACK_RESTART
                _I2C_DO_RX_NACK_STOP
                _I2C_MasterGetRxData
                  _I2C_MasterSendAck
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterSendAck                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterGetRxData                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RX_NACK_STOP                                  0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RX_NACK_RESTART                               0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterSendNack                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RESET                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RCEN                                          0     0      0       0
                  _I2C_MasterStartRx
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterStartRx                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_ADDRESS_NACK                                  1     1      0   22751
                                              3 BANK1      1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _wr2RegCompleteHandler                                1     0      1    4479
                                             25 BANK0      1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _wr1RegCompleteHandler                                1     0      1    4479
                                             25 BANK0      1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _rdBlkRegCompleteHandler                              1     0      1    4510
                                             25 BANK0      1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _rd2RegCompleteHandler                                1     0      1    4519
                                             25 BANK0      1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _rd1RegCompleteHandler                                1     0      1    4479
                                             25 BANK0      1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (2) _I2C_SetDataCompleteCallback                          4     1      3    2909
                                             24 BANK0      1     1      0
                                              0 BANK1      3     0      3
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (3) _I2C_SetCallback                                      5     2      3    1117
                                             19 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (2) _I2C_SetBuffer                                        4     2      2    1539
                                             19 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_SEND_STOP                                     0     0      0       0
                     _I2C_MasterStop
 ---------------------------------------------------------------------------------
 (8) _I2C_MasterStop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_SEND_RESTART                                  0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (8) _I2C_MasterEnableRestart                              0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_CallbackReturnStop                               1     0      1       0
                                             25 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (7) _I2C_CallbackReturnReset                              1     0      1     285
                                             25 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (19) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (4) _I2C_MasterStart                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Close                                            2     2      0      37
                                             19 BANK0      2     2      0
                 _I2C_MasterClearIrq
                    _I2C_MasterClose
               _I2C_MasterDisableIrq
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterDisableIrq                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterClose                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterClearIrq                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 19
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                          1     1      0   42741
                                             18 BANK0      1     1      0
                   Absolute function *
                 _EUSART_Receive_ISR *
                         _MyUART_ISR *
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (11) _TMR2_ISR                                            0     0      0   42542
                   Absolute function *
                        _MyTimer2ISR *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (12) _TMR2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _MyTimer2ISR                                         4     4      0   42542
                                             14 BANK0      4     4      0
                       _EUSART_Write
              _I2C_Read2ByteRegister
                 _PWM3_LoadDutyValue
                        i1_I2C_Close
           i1_I2C_Write1ByteRegister
 ---------------------------------------------------------------------------------
 (13) i1_I2C_Write1ByteRegister                            4     2      2   21142
                                              5 BANK0      4     2      2
                        i1_I2C_Close
                  i1_I2C_MasterWrite
                         i1_I2C_Open
       i1_I2C_SetAddressNackCallback
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (13) _PWM3_LoadDutyValue                                  4     2      2     120
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (13) _I2C_Read2ByteRegister                               9     7      2   21219
                                              5 BANK0      9     7      2
                        i1_I2C_Close
                  i1_I2C_MasterWrite
                         i1_I2C_Open
       i1_I2C_SetAddressNackCallback
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_I2C_SetAddressNackCallback                        4     1      3     406
                                              5 COMMON     4     1      3
                  i1_I2C_SetCallback
 ---------------------------------------------------------------------------------
 (14) i1_I2C_Open                                          3     3      0      46
                                              0 COMMON     3     3      0
               i1_I2C_MasterClearIrq
                   i1_I2C_MasterOpen
 ---------------------------------------------------------------------------------
 (15) i1_I2C_MasterOpen                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_I2C_MasterWrite                                   0     0      0   19120
              i1_I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (15) i1_I2C_MasterOperation                               3     3      0   19120
                                             13 COMMON     1     1      0
                                              3 BANK0      2     2      0
                  i1_I2C_MasterStart
                       i1_I2C_Poller
 ---------------------------------------------------------------------------------
 (16) i1_I2C_Poller                                        0     0      0   18950
                    i1_I2C_MasterFsm
           i1_I2C_MasterWaitForEvent
 ---------------------------------------------------------------------------------
 (17) i1_I2C_MasterWaitForEvent                            0     0      0       0
 ---------------------------------------------------------------------------------
 (17) i1_I2C_MasterFsm                                     3     3      0   18950
                                              0 BANK0      3     3      0
              i1_I2C_DO_ADDRESS_NACK *
                      i1_I2C_DO_IDLE *
                      i1_I2C_DO_RCEN *
                     i1_I2C_DO_RESET *
                        i1_I2C_DO_RX *
                    i1_I2C_DO_RX_ACK *
           i1_I2C_DO_RX_NACK_RESTART *
              i1_I2C_DO_RX_NACK_STOP *
             i1_I2C_DO_SEND_ADR_READ *
            i1_I2C_DO_SEND_ADR_WRITE *
              i1_I2C_DO_SEND_RESTART *
         i1_I2C_DO_SEND_RESTART_READ *
        i1_I2C_DO_SEND_RESTART_WRITE *
                 i1_I2C_DO_SEND_STOP *
                        i1_I2C_DO_TX *
                  i1_I2C_DO_TX_EMPTY *
               i1_I2C_MasterClearIrq
                 i1_I2C_MasterIsNack
 ---------------------------------------------------------------------------------
 (18) i1_I2C_DO_TX_EMPTY                                   1     1      0    4696
                                             10 COMMON     1     1      0
                   Absolute function *
          i1_I2C_CallbackReturnReset *
           i1_I2C_CallbackReturnStop *
              i1_I2C_DO_SEND_RESTART
                 i1_I2C_DO_SEND_STOP
                 i1_I2C_MasterSetIrq
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (19) i1_I2C_MasterSetIrq                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i1_I2C_DO_TX                                         3     3      0    4818
                                             10 COMMON     3     3      0
                   Absolute function *
          i1_I2C_CallbackReturnReset *
           i1_I2C_CallbackReturnStop *
         i1_I2C_DO_SEND_RESTART_READ
        i1_I2C_DO_SEND_RESTART_WRITE
                 i1_I2C_DO_SEND_STOP
                 i1_I2C_MasterIsNack
             i1_I2C_MasterSendTxData
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (18) i1_I2C_MasterIsNack                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_SEND_RESTART_WRITE                         0     0      0       0
          i1_I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_SEND_RESTART_READ                          0     0      0       0
          i1_I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (18) i1_I2C_DO_SEND_ADR_WRITE                             0     0      0      22
             i1_I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (18) i1_I2C_DO_SEND_ADR_READ                              0     0      0      22
             i1_I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (19) i1_I2C_MasterSendTxData                              1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (18) i1_I2C_DO_RX_ACK                                     0     0      0       0
                i1_I2C_MasterSendAck
 ---------------------------------------------------------------------------------
 (18) i1_I2C_DO_RX                                         1     1      0    4696
                                             10 COMMON     1     1      0
                   Absolute function *
          i1_I2C_CallbackReturnReset *
           i1_I2C_CallbackReturnStop *
           i1_I2C_DO_RX_NACK_RESTART
              i1_I2C_DO_RX_NACK_STOP
              i1_I2C_MasterGetRxData
                i1_I2C_MasterSendAck
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (19) i1_I2C_MasterSendAck                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (19) i1_I2C_MasterGetRxData                               0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i1_I2C_DO_RX_NACK_STOP                               0     0      0       0
               i1_I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (18) i1_I2C_DO_RX_NACK_RESTART                            0     0      0       0
               i1_I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (19) i1_I2C_MasterSendNack                                0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i1_I2C_DO_RESET                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i1_I2C_DO_RCEN                                       0     0      0       0
                i1_I2C_MasterStartRx
 ---------------------------------------------------------------------------------
 (19) i1_I2C_MasterStartRx                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i1_I2C_DO_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i1_I2C_DO_ADDRESS_NACK                               1     1      0    4696
                                             10 COMMON     1     1      0
                   Absolute function *
          i1_I2C_CallbackReturnReset *
           i1_I2C_CallbackReturnStop *
              i1_I2C_DO_SEND_RESTART
                 i1_I2C_DO_SEND_STOP
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (19) i1_wr2RegCompleteHandler                             1     0      1     914
                                              9 COMMON     1     0      1
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (19) i1_wr1RegCompleteHandler                             1     0      1     914
                                              9 COMMON     1     0      1
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (19) i1_rdBlkRegCompleteHandler                           1     0      1     936
                                              9 COMMON     1     0      1
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (19) i1_rd2RegCompleteHandler                             1     0      1     914
                                              9 COMMON     1     0      1
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (19) i1_rd1RegCompleteHandler                             1     0      1     914
                                              9 COMMON     1     0      1
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) i1_I2C_SetDataCompleteCallback                       4     1      3     666
                                              5 COMMON     4     1      3
                  i1_I2C_SetCallback
 ---------------------------------------------------------------------------------
 (15) i1_I2C_SetCallback                                   5     2      3     258
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (14) i1_I2C_SetBuffer                                     4     2      2     226
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_SEND_STOP                                  0     0      0       0
                   i1_I2C_MasterStop
 ---------------------------------------------------------------------------------
 (20) i1_I2C_MasterStop                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_SEND_RESTART                               0     0      0       0
          i1_I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (20) i1_I2C_MasterEnableRestart                           0     0      0       0
 ---------------------------------------------------------------------------------
 (19) i1_I2C_CallbackReturnStop                            1     0      1       0
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (19) i1_I2C_CallbackReturnReset                           1     0      1     104
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (16) i1_I2C_MasterStart                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_I2C_Close                                         2     2      0      24
                                              0 COMMON     2     2      0
               i1_I2C_MasterClearIrq
                  i1_I2C_MasterClose
             i1_I2C_MasterDisableIrq
 ---------------------------------------------------------------------------------
 (15) i1_I2C_MasterDisableIrq                              0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i1_I2C_MasterClose                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i1_I2C_MasterClearIrq                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _MyUART_ISR                                          5     5      0     199
                                              1 COMMON     5     5      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (13) _EUSART_Write                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (12) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (12) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (19) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 20
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_SetRxInterruptHandler
   _I2C_Write1ByteRegister
     _I2C_Close
       _I2C_MasterClearIrq
       _I2C_MasterClose
       _I2C_MasterDisableIrq
     _I2C_MasterWrite
       _I2C_MasterOperation
         _I2C_MasterStart
         _I2C_Poller
           _I2C_MasterFsm
             _I2C_DO_ADDRESS_NACK *
               Absolute function(Fake) *
               _I2C_CallbackReturnReset *
               _I2C_CallbackReturnStop *
               _I2C_DO_SEND_RESTART *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_STOP *
                 _I2C_MasterStop
               _rd1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rd2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rdBlkRegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
             _I2C_DO_IDLE *
             _I2C_DO_RCEN *
               _I2C_MasterStartRx
             _I2C_DO_RESET *
             _I2C_DO_RX *
               Absolute function(Fake) *
               _I2C_CallbackReturnReset *
               _I2C_CallbackReturnStop *
               _I2C_DO_RX_NACK_RESTART *
                 _I2C_MasterSendNack
               _I2C_DO_RX_NACK_STOP *
                 _I2C_MasterSendNack
               _I2C_MasterGetRxData *
               _I2C_MasterSendAck *
               _rd1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rd2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rdBlkRegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
             _I2C_DO_RX_ACK *
               _I2C_MasterSendAck
             _I2C_DO_RX_NACK_RESTART *
               _I2C_MasterSendNack
             _I2C_DO_RX_NACK_STOP *
               _I2C_MasterSendNack
             _I2C_DO_SEND_ADR_READ *
               _I2C_MasterSendTxData
             _I2C_DO_SEND_ADR_WRITE *
               _I2C_MasterSendTxData
             _I2C_DO_SEND_RESTART *
               _I2C_MasterEnableRestart
             _I2C_DO_SEND_RESTART_READ *
               _I2C_MasterEnableRestart
             _I2C_DO_SEND_RESTART_WRITE *
               _I2C_MasterEnableRestart
             _I2C_DO_SEND_STOP *
               _I2C_MasterStop
             _I2C_DO_TX *
               Absolute function(Fake) *
               _I2C_CallbackReturnReset *
               _I2C_CallbackReturnStop *
               _I2C_DO_SEND_RESTART_READ *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_RESTART_WRITE *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_STOP *
                 _I2C_MasterStop
               _I2C_MasterIsNack *
               _I2C_MasterSendTxData *
               _rd1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rd2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rdBlkRegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
             _I2C_DO_TX_EMPTY *
               Absolute function(Fake) *
               _I2C_CallbackReturnReset *
               _I2C_CallbackReturnStop *
               _I2C_DO_SEND_RESTART *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_STOP *
                 _I2C_MasterStop
               _I2C_MasterSetIrq *
               _rd1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rd2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rdBlkRegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
             _I2C_MasterClearIrq *
             _I2C_MasterIsNack *
           _I2C_MasterWaitForEvent
     _I2C_Open
       _I2C_MasterClearIrq
       _I2C_MasterOpen
     _I2C_SetAddressNackCallback
       _I2C_SetCallback
     _I2C_SetBuffer
     _I2C_SetDataCompleteCallback
       _I2C_SetCallback
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
     _I2C_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM3_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
   _TMR2_SetInterruptHandler
   _TMR2_StartTimer
     _TMR2_Start
   _TMR2_WriteTimer
     _TMR2_Counter8BitSet

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _MyUART_ISR *
     _EUSART_Write
   _TMR2_ISR *
     Absolute function(Fake) *
     _MyTimer2ISR *
       _EUSART_Write
       _I2C_Read2ByteRegister
         i1_I2C_Close
           i1_I2C_MasterClearIrq
           i1_I2C_MasterClose
           i1_I2C_MasterDisableIrq
         i1_I2C_MasterWrite
           i1_I2C_MasterOperation
             i1_I2C_MasterStart
             i1_I2C_Poller
               i1_I2C_MasterFsm
                 i1_I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   i1_I2C_CallbackReturnReset *
                   i1_I2C_CallbackReturnStop *
                   i1_I2C_DO_SEND_RESTART *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_STOP *
                     i1_I2C_MasterStop
                   i1_rd1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rd2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rdBlkRegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                 i1_I2C_DO_IDLE *
                 i1_I2C_DO_RCEN *
                   i1_I2C_MasterStartRx
                 i1_I2C_DO_RESET *
                 i1_I2C_DO_RX *
                   Absolute function(Fake) *
                   i1_I2C_CallbackReturnReset *
                   i1_I2C_CallbackReturnStop *
                   i1_I2C_DO_RX_NACK_RESTART *
                     i1_I2C_MasterSendNack
                   i1_I2C_DO_RX_NACK_STOP *
                     i1_I2C_MasterSendNack
                   i1_I2C_MasterGetRxData *
                   i1_I2C_MasterSendAck *
                   i1_rd1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rd2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rdBlkRegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                 i1_I2C_DO_RX_ACK *
                   i1_I2C_MasterSendAck
                 i1_I2C_DO_RX_NACK_RESTART *
                   i1_I2C_MasterSendNack
                 i1_I2C_DO_RX_NACK_STOP *
                   i1_I2C_MasterSendNack
                 i1_I2C_DO_SEND_ADR_READ *
                   i1_I2C_MasterSendTxData
                 i1_I2C_DO_SEND_ADR_WRITE *
                   i1_I2C_MasterSendTxData
                 i1_I2C_DO_SEND_RESTART *
                   i1_I2C_MasterEnableRestart
                 i1_I2C_DO_SEND_RESTART_READ *
                   i1_I2C_MasterEnableRestart
                 i1_I2C_DO_SEND_RESTART_WRITE *
                   i1_I2C_MasterEnableRestart
                 i1_I2C_DO_SEND_STOP *
                   i1_I2C_MasterStop
                 i1_I2C_DO_TX *
                   Absolute function(Fake) *
                   i1_I2C_CallbackReturnReset *
                   i1_I2C_CallbackReturnStop *
                   i1_I2C_DO_SEND_RESTART_READ *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_RESTART_WRITE *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_STOP *
                     i1_I2C_MasterStop
                   i1_I2C_MasterIsNack *
                   i1_I2C_MasterSendTxData *
                   i1_rd1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rd2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rdBlkRegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                 i1_I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   i1_I2C_CallbackReturnReset *
                   i1_I2C_CallbackReturnStop *
                   i1_I2C_DO_SEND_RESTART *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_STOP *
                     i1_I2C_MasterStop
                   i1_I2C_MasterSetIrq *
                   i1_rd1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rd2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rdBlkRegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                 i1_I2C_MasterClearIrq *
                 i1_I2C_MasterIsNack *
               i1_I2C_MasterWaitForEvent
         i1_I2C_Open
           i1_I2C_MasterClearIrq
           i1_I2C_MasterOpen
         i1_I2C_SetAddressNackCallback
           i1_I2C_SetCallback
         i1_I2C_SetBuffer
         i1_I2C_SetDataCompleteCallback
           i1_I2C_SetCallback
       _PWM3_LoadDutyValue
       i1_I2C_Close
         i1_I2C_MasterClearIrq
         i1_I2C_MasterClose
         i1_I2C_MasterDisableIrq
       i1_I2C_Write1ByteRegister
         i1_I2C_Close
           i1_I2C_MasterClearIrq
           i1_I2C_MasterClose
           i1_I2C_MasterDisableIrq
         i1_I2C_MasterWrite
           i1_I2C_MasterOperation
             i1_I2C_MasterStart
             i1_I2C_Poller
               i1_I2C_MasterFsm
                 i1_I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   i1_I2C_CallbackReturnReset *
                   i1_I2C_CallbackReturnStop *
                   i1_I2C_DO_SEND_RESTART *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_STOP *
                     i1_I2C_MasterStop
                   i1_rd1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rd2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rdBlkRegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                 i1_I2C_DO_IDLE *
                 i1_I2C_DO_RCEN *
                   i1_I2C_MasterStartRx
                 i1_I2C_DO_RESET *
                 i1_I2C_DO_RX *
                   Absolute function(Fake) *
                   i1_I2C_CallbackReturnReset *
                   i1_I2C_CallbackReturnStop *
                   i1_I2C_DO_RX_NACK_RESTART *
                     i1_I2C_MasterSendNack
                   i1_I2C_DO_RX_NACK_STOP *
                     i1_I2C_MasterSendNack
                   i1_I2C_MasterGetRxData *
                   i1_I2C_MasterSendAck *
                   i1_rd1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rd2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rdBlkRegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                 i1_I2C_DO_RX_ACK *
                   i1_I2C_MasterSendAck
                 i1_I2C_DO_RX_NACK_RESTART *
                   i1_I2C_MasterSendNack
                 i1_I2C_DO_RX_NACK_STOP *
                   i1_I2C_MasterSendNack
                 i1_I2C_DO_SEND_ADR_READ *
                   i1_I2C_MasterSendTxData
                 i1_I2C_DO_SEND_ADR_WRITE *
                   i1_I2C_MasterSendTxData
                 i1_I2C_DO_SEND_RESTART *
                   i1_I2C_MasterEnableRestart
                 i1_I2C_DO_SEND_RESTART_READ *
                   i1_I2C_MasterEnableRestart
                 i1_I2C_DO_SEND_RESTART_WRITE *
                   i1_I2C_MasterEnableRestart
                 i1_I2C_DO_SEND_STOP *
                   i1_I2C_MasterStop
                 i1_I2C_DO_TX *
                   Absolute function(Fake) *
                   i1_I2C_CallbackReturnReset *
                   i1_I2C_CallbackReturnStop *
                   i1_I2C_DO_SEND_RESTART_READ *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_RESTART_WRITE *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_STOP *
                     i1_I2C_MasterStop
                   i1_I2C_MasterIsNack *
                   i1_I2C_MasterSendTxData *
                   i1_rd1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rd2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rdBlkRegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                 i1_I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   i1_I2C_CallbackReturnReset *
                   i1_I2C_CallbackReturnStop *
                   i1_I2C_DO_SEND_RESTART *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_STOP *
                     i1_I2C_MasterStop
                   i1_I2C_MasterSetIrq *
                   i1_rd1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rd2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_rdBlkRegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr1RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                   i1_wr2RegCompleteHandler *
                     i1_I2C_SetBuffer
                     i1_I2C_SetDataCompleteCallback
                       i1_I2C_SetCallback
                 i1_I2C_MasterClearIrq *
                 i1_I2C_MasterIsNack *
               i1_I2C_MasterWaitForEvent
         i1_I2C_Open
           i1_I2C_MasterClearIrq
           i1_I2C_MasterOpen
         i1_I2C_SetAddressNackCallback
           i1_I2C_SetCallback
         i1_I2C_SetBuffer
         i1_I2C_SetDataCompleteCallback
           i1_I2C_SetCallback
     _TMR2_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1A      3D       5       76.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     12      33       7       63.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      7E      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      7E      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Mar 26 18:32:16 2020

                ?_EUSART_SetRxInterruptHandler 004D                         ??_I2C_DO_SEND_ADR_READ 004D  
                                  MyUART_ISR@c 0075                    __size_of_I2C_MasterSendNack 0004  
                           __size_of_I2C_Close 001E               __end_of_TMR2_SetInterruptHandler 0F21  
                      ??_I2C_DO_SEND_ADR_WRITE 004E                                    __CFG_CP$OFF 0000  
                          __size_of_I2C_Poller 000A                          ??_I2C_DO_SEND_RESTART 004D  
                                  ?i1_I2C_Open 0070                                    __CFG_LVP$ON 0000  
                 __size_of_I2C_MasterOperation 001A                  __size_of_I2C_MasterSendTxData 0006  
                                          l321 0331                                            l403 02D4  
                                          l544 0ECF                                            l387 020A  
                                          _PR2 001B                         ??_EUSART_RxDataHandler 0070  
                       _I2C_MasterWaitForEvent 0ECF                 ?_EUSART_SetFramingErrorHandler 004D  
                     ?i1_rd2RegCompleteHandler 0079                                _TMR2_Initialize 0725  
                                 __CFG_BORV$LO 0000                                            wreg 0009  
                                 ?i1_I2C_DO_RX 0070                                   ?i1_I2C_DO_TX 0070  
                                 __CFG_IESO$ON 0000                          _I2C_DO_RCEN$intlevel0 0FAC  
                 ??_I2C_SetAddressNackCallback 0052                       ?i1_wr2RegCompleteHandler 0079  
                                 ?i1_I2C_Close 0070                         _I2C_Write1ByteRegister 0448  
                  ??i1_I2C_MasterEnableRestart 0070                       ??_I2C_CallbackReturnStop 0054  
                                 _I2C_DO_RESET 0F8C                                   __CFG_ZCD$OFF 0000  
                      ??_rd2RegCompleteHandler 0054                                           l4058 0FAC  
                                         l4092 0F90                                           l4086 0F6F  
                                         l4290 0618                                           l3900 063D  
                                         l6060 0136                                           l3760 0563  
                                         l3912 0F4F                                           l6064 0144  
                                         l6066 0152                                           l6058 0166  
                      ??i1_I2C_MasterGetRxData 0070                                           l5700 02D6  
                                         l3924 0F67                                           l6068 015D  
                                         l5710 02DC                                           l3918 0F57  
                                         l3950 0F5F                                           l3942 0F77  
                                         l5712 04AC                                           l5704 02D9  
                                         l3936 0F7F                                           l3962 0F01  
                                         l5714 04AF                                           l5730 04B9  
                                         l3892 06FD                                           l3868 06E7  
                                         l3876 06D1                                           l3884 06BB  
                                         l5724 04B6                                           l5660 01E4  
                                         l5740 050B                                           l5732 0501  
                                         l3958 0EFB                                           l5718 04B2  
                                         l5902 044A                                           l5664 01E7  
                                         l5656 01DD                                           l5736 0508  
                                         l5832 066D                                           l5912 0472  
                                         l3978 0F87                                           l3986 07E3  
                                         l3994 0FCA                                           l5682 0223  
                                         l5674 01ED                                           l5746 050E  
                                         l5826 0664                                           l5668 01EA  
                                         l5764 0536                                           l5828 0668  
                                         l5686 02BA                                           l5792 0FB2  
               __size_ofi1_I2C_DO_SEND_RESTART 0004                                           _LATA 010C  
                                         _LATB 010D                                           _LATC 010E  
                                         _T2PR 001B                                           u3710 0142  
                __end_ofi1_I2C_DO_SEND_RESTART 0EAF                                           u3730 015B  
                                         u3757 014A                                           u3767 0161  
                                         _TMR2 001A                                           _WPUA 020C  
                                         _WPUB 020D                                           _WPUC 020E  
                                         _Data 0035                        ??_wr2RegCompleteHandler 0054  
                                 __CFG_WRT$OFF 0000                                  __CFG_FCMEN$ON 0000  
                                         _Type 0034                                           _main 00FD  
                     ?_I2C_CallbackReturnReset 0053                                           fsr0h 0005  
                                         fsr1h 0007                                           indf0 0000  
                                         fsr0l 0004                                           indf1 0001  
                                         fsr1l 0006                               __end_of_I2C_Open 0334  
                                i1_I2C_DO_IDLE 0EDC                                           btemp 007E  
                                i1_I2C_DO_RCEN 0EF1                 __end_ofi1_I2C_DO_SEND_ADR_READ 0F4B  
                                __CFG_BOREN$ON 0000                                           start 0024  
                 i1I2C_Write1ByteRegister@data 0040                                  __CFG_MCLRE$ON 0000  
                          _TMR2_Counter8BitSet 0EE6               __size_of_rdBlkRegCompleteHandler 001D  
                _I2C_DO_RX_NACK_STOP$intlevel0 0F77                        ??i1_I2C_DO_ADDRESS_NACK 007A  
                                _I2C_DO_TX$794 00C1                               ?_I2C_MasterClose 0070  
                                ?i1_I2C_Poller 0070                                  __CFG_PLLEN$ON 0000  
                                ?_EUSART_Write 0070            __size_of_I2C_SetAddressNackCallback 0012  
               __size_of_OSCILLATOR_Initialize 0007                               ?_I2C_MasterStart 0070  
                                _I2C_DO_RX_ACK 0F6B                               ?_I2C_MasterWrite 0070  
                __end_of_OSCILLATOR_Initialize 0F3B                ??i1_I2C_SetDataCompleteCallback 0078  
                        i1I2C_Open@returnValue 0072                                          ?_main 0070  
                                __CFG_WDTE$OFF 0000                                          _T2CON 001C  
                     ??i1_I2C_MasterDisableIrq 0070                                          _T2HLT 001D  
                                        i1l123 001F                                          _T2TMR 001A  
                                        i1l118 0017                                          i1l321 03DE  
                                        _T2RST 001F                                          i1l403 0389  
                  __end_ofi1_I2C_MasterSendAck 0EA3                                          i1l544 0EBF  
                                        i1l635 0F3C                                          i1l387 0255  
                                        i1l850 00B6                                          i1l860 00BD  
                                        i1l852 00B8                                          i1l844 00B3  
                                        i1l862 00BF                                          i1l855 00BA  
                                        i1l865 00C1                   __size_of_I2C_DO_RX_NACK_STOP 0008  
                            ??_I2C_DO_TX_EMPTY 00C0                                          _TRISA 008C  
                                        _TRISB 008D                                          _TRISC 008E  
                                        _RXPPS 0E24                                          _Angle 005A  
                  __end_ofi1_I2C_MasterStartRx 0E6D                           ?_TMR2_Counter8BitSet 0070  
                            __end_of_I2C_DO_RX 02F6                              __end_of_I2C_DO_TX 0229  
                             __end_of_TMR2_ISR 07F7                        ??i1_I2C_MasterOperation 007D  
                                  ?_TMR2_Start 0070                              __end_of_I2C_Close 061B  
                       __size_of_I2C_MasterFsm 0027                 I2C_MasterOperation@returnValue 00C8  
                                   _MyUART_ISR 0045                              ??i1_I2C_MasterFsm 003A  
                      _I2C_MasterEnableRestart 0E7F                            _I2C_DO_RX$intlevel0 02BA  
                      __end_of_PWM3_Initialize 0FDC             _I2C_DO_SEND_RESTART_READ$intlevel0 0F4F  
                               i1_I2C_DO_RESET 0EE1                                          pclath 000A  
                             ?_I2C_SetCallback 004D                __end_ofi1_I2C_DO_SEND_ADR_WRITE 0F34  
                 I2C_SetAddressNackCallback@cb 00BD                                 ?i1_I2C_DO_IDLE 0070  
                               ?i1_I2C_DO_RCEN 0070                                          status 0003  
                                        wtemp0 007E                              ?_I2C_DO_SEND_STOP 0070  
                   __size_ofi1_I2C_DO_TX_EMPTY 0025                         __size_of_I2C_SetBuffer 0015  
                              _TMR2_StartTimer 0E91                              ??i1_I2C_SetBuffer 0072  
                          __size_ofi1_I2C_Open 0037                             ??_I2C_DO_SEND_STOP 004D  
                                _fsmStateTable 05DD                                __initialization 0026  
                                ??_MyTimer2ISR 0048                      i1_I2C_MasterEnableRestart 0E64  
                                 __end_of_main 016C              __size_of_I2C_DO_SEND_RESTART_READ 0008  
                    ?_I2C_DO_SEND_RESTART_READ 0070                                 ??i1_I2C_Poller 007D  
                               ??_EUSART_Write 0070                                 ?_I2C_DO_RX_ACK 0070  
                      __end_of_TMR2_Initialize 073A                                 __CFG_LPBOR$OFF 0000  
                  ?_INTERRUPT_InterruptManager 0070                __end_ofi1_rd2RegCompleteHandler 07A5  
               ??_EUSART_SetRxInterruptHandler 004F                       _TMR2_SetInterruptHandler 0F1B  
                                       ??_main 00CD                   __end_ofi1_I2C_MasterClearIrq 0E5B  
                            ?_I2C_MasterIsNack 0070                __end_ofi1_wr2RegCompleteHandler 07C5  
                        _I2C_Read2ByteRegister 0274                                _TMR2_WriteTimer 0F21  
             __end_ofi1_I2C_DO_RX_NACK_RESTART 0EBF                              ?_I2C_MasterSetIrq 0070  
             I2C_Read2ByteRegister@returnValue 0046                             ??_I2C_MasterIsNack 004D  
                         i1I2C_SetCallback@idx 0074                           i1I2C_SetCallback@ptr 0072  
                        ??_TMR2_Counter8BitSet 004D                             ??_I2C_MasterSetIrq 004D  
    __end_of_EUSART_DefaultFramingErrorHandler 0E51     __size_of_EUSART_DefaultFramingErrorHandler 0001  
          ??_EUSART_DefaultFramingErrorHandler 0070             ?_EUSART_DefaultFramingErrorHandler 0070  
            _EUSART_DefaultFramingErrorHandler 0E50                         __end_ofi1_I2C_DO_RESET 0EE6  
                   _EUSART_OverrunErrorHandler 00D1                        ??i1_I2C_DO_RX_NACK_STOP 0070  
              __end_of_I2C_CallbackReturnReset 0F03                __size_of_I2C_CallbackReturnStop 0006  
                I2C_SetDataCompleteCallback@cb 00BD                                         _ANSELA 018C  
                                       _ANSELB 018D                                         _ANSELC 018E  
                                       _BORCON 0116                                   ??_I2C_Poller 0054  
                                       _RC1REG 0199                                         _RA2PPS 0E92  
                                       _RC1STA 019D                                         _RB4PPS 0E9C  
                                       _RB6PPS 0E9E                                         _RB7PPS 0E9F  
                                       _ODCONA 028C                                         _ODCONB 028D  
                                       _ODCONC 028E                                         u112_25 071E  
                                       i1l2600 0689                            _I2C_DO_TX$intlevel0 01DD  
                                       i1l2612 0EA7                                         i1l2606 0EA3  
                                       i1l2630 0EB7                                         i1l3184 0687  
                                       i1l2624 0EAF                                         i1l2546 05AC  
                                       i1l2642 0E51                                         i1l2618 0EAB  
                                       i1l2636 0EBB                                         i1l3542 005E  
                                       i1l3534 004E                                         i1l2646 0E53  
                                       i1l3560 009B                                         i1l2592 07B5  
                                       i1l2568 07A5                                         i1l2576 0795  
                                       i1l2584 0785                                         i1l2680 0EDC  
                                       i1l2760 0EF1                                         i1l3546 0066  
                                       i1l3580 00EE                                         i1l3572 00C7  
                                       i1l3564 00A9                                         i1l3556 008F  
                                       i1l3548 006F                                         i1l3574 00D6  
                                       i1l3576 00E0                                         i1l3584 00F0  
                                       i1l2688 0F43                                         i1l2696 0F2D  
                                       i1l3578 00EB                                         i1l5610 0571  
                                       i1l5602 038E                                         i1l2794 0EE1  
                                       i1l5612 0574                                         i1l2788 0EB3  
                                       i1l5622 057B                                         i1l5630 05BA  
                                       i1l5616 0577                                         i1l5608 0391  
                                       i1l5800 0278                                         i1l5562 0233  
                                       i1l5554 0229                                         i1l5634 05C1  
                                       i1l5810 029E                                         i1l5628 057E  
                                       i1l5580 026E                                         i1l5572 0239  
                                       i1l5644 05C7                                         i1l5566 0236  
                                       i1l5558 0230                                         i1l5638 05C4  
                                       i1l5654 04E5                                         i1l5584 036F  
                                       i1l5930 03F4                                         i1l5754 0F9E  
                                       i1l5940 0412                                         i1l5598 038B  
                                       i1l5782 0636                                         i1l5838 047B  
                                       i1l5936 0403                                         i1l5776 062C  
                                       i1l5848 04A1                                         i1l5880 018A  
                                       i1l5778 0631                                         i1l5890 01AE  
                                       i1l5894 01BA                                         i1l5896 01C3  
                                       _INLVLA 038C                                         _INLVLB 038D  
                                       _INLVLC 038E                   __end_ofi1_I2C_MasterSendNack 0E9F  
                  __size_ofi1_I2C_DO_SEND_STOP 0004                                         _OSCCON 0099  
                      i1_rd1RegCompleteHandler 07A5                       ??i1_I2C_MasterSendTxData 0070  
                                       _SPBRGH 019C                                         _SPBRGL 019B  
                       _I2C_DO_RESET$intlevel0 0F90                                         _TX1REG 019A  
                                       _TX1STA 019E                        i1_wr1RegCompleteHandler 0785  
              _I2C_DO_SEND_ADR_WRITE$intlevel0 0FCA                    ??i1_rdBlkRegCompleteHandler 007A  
                                   _Validation 005C                                 __CFG_PWRTE$OFF 0000  
                          _I2C_MasterGetRxData 0E88             __size_ofi1_I2C_CallbackReturnReset 0002  
                   ?i1_I2C_CallbackReturnReset 0079                     _I2C_DO_SEND_STOP$intlevel0 0F67  
                  __size_of_PWM3_LoadDutyValue 0016                                  _I2C_MasterFsm 0525  
                               __CFG_STVREN$ON 0000                            __size_of_TMR2_Start 0003  
                            ?i1_I2C_MasterOpen 0070                              I2C_SetCallback@cb 004D  
                            ?i1_I2C_MasterStop 0070                    __size_ofi1_I2C_MasterIsNack 0006  
                      __size_of_I2C_MasterOpen 000C                        __size_of_I2C_MasterStop 0003  
                      __size_of_I2C_Initialize 000A                                  _I2C_SetBuffer 073A  
                          __end_of_MyTimer2ISR 01D9                             __end_of_I2C_Poller 0FBC  
                           ??i1_I2C_MasterOpen 0070                    __size_ofi1_I2C_MasterSetIrq 0003  
                 __end_of_I2C_MasterDisableIrq 0E7C                                i1_I2C_DO_TX$794 007B  
                           ??i1_I2C_MasterStop 0070                __size_ofi1_I2C_MasterDisableIrq 0003  
               _I2C_DO_SEND_ADR_READ$intlevel0 07E3                            _I2C_DO_ADDRESS_NACK 04FD  
                         ?_I2C_MasterGetRxData 0070                                      ?_I2C_Open 0070  
           __end_of_I2C_SetAddressNackCallback 0773                     _I2C_SetAddressNackCallback 0761  
                              i1_I2C_DO_RX_ACK 0EB3          __end_ofi1_I2C_SetDataCompleteCallback 0FE8  
       __size_ofi1_I2C_SetDataCompleteCallback 000C                  i1_I2C_SetDataCompleteCallback 0FDC  
                    ??_I2C_MasterEnableRestart 004D                     ??i1_I2C_CallbackReturnStop 007A  
                              ?i1_I2C_DO_RESET 0070                        __end_of_TMR2_StartTimer 0E94  
     TMR2_SetInterruptHandler@InterruptHandler 004D                           __size_ofi1_I2C_DO_RX 003A  
                         __size_ofi1_I2C_DO_TX 004B                                    ?_MyUART_ISR 0070  
                              ??i1_I2C_DO_IDLE 0070                                ??i1_I2C_DO_RCEN 0070  
                         __size_ofi1_I2C_Close 0019                               ?_PWM3_Initialize 0070  
                            _SYSTEM_Initialize 074F                        __end_of__initialization 0041  
                _I2C_DO_ADDRESS_NACK$intlevel0 0501                            _I2C_MasterOperation 0656  
                           ?_SYSTEM_Initialize 0070                           ?_I2C_DO_ADDRESS_NACK 0070  
            _rdBlkRegCompleteHandler$intlevel0 063D                        _rdBlkRegCompleteHandler 0639  
                               __pcstackCOMMON 0070                                 ?_I2C_MasterFsm 0070  
            __end_ofi1_I2C_CallbackReturnReset 0E55                                ??_I2C_DO_RX_ACK 004D  
                                 __pidataBANK0 0E94                         _I2C_CallbackReturnStop 0EF7  
                          ??_SYSTEM_Initialize 004F                                      ?_TMR2_ISR 0070  
                      __end_of_TMR2_WriteTimer 0F27                               ?_TMR2_Initialize 0070  
                               ?_I2C_SetBuffer 004D                        ?_I2C_MasterWaitForEvent 0070  
               __size_of_I2C_DO_SEND_ADR_WRITE 000B             __size_of_I2C_DO_SEND_RESTART_WRITE 0008  
                       ?_I2C_Read2ByteRegister 003F                  __end_of_I2C_DO_SEND_ADR_WRITE 0FD1  
                                 ??i1_I2C_Open 0070                   ?i1_I2C_DO_SEND_RESTART_WRITE 0070  
                   ?_I2C_DO_SEND_RESTART_WRITE 0070                           ?_I2C_MasterOperation 0070  
                    i1_rdBlkRegCompleteHandler 0689               __size_ofi1_I2C_DO_SEND_ADR_WRITE 0007  
                        ??_I2C_MasterGetRxData 004D                        ?_I2C_Write1ByteRegister 00C9  
                               _OPTION_REGbits 0095                                     ??_I2C_Open 004D  
                         _eusartRxStatusBuffer 0020                     __end_of_I2C_MasterClearIrq 0E76  
              ??_EUSART_SetOverrunErrorHandler 004F                       i1_I2C_DO_RX_NACK_RESTART 0EBB  
                    __end_of_SYSTEM_Initialize 0761                      ??i1_rd1RegCompleteHandler 007A  
                       i1I2C_Close@returnValue 0071                              _I2C_MasterSendAck 0ECB  
                                   __pbssBANK0 0020                                     __pbssBANK1 00A0  
                         __end_ofi1_I2C_Poller 0FA8                      ??i1_wr1RegCompleteHandler 007A  
                         __end_of_EUSART_Write 0F43                                  ??_I2C_DO_IDLE 004D  
               __size_of_rd2RegCompleteHandler 0016                 __size_ofi1_I2C_MasterGetRxData 0003  
                                ??_I2C_DO_RCEN 004D                 i1I2C_CallbackReturnStop@funPtr 0079  
                __end_of_rd2RegCompleteHandler 06E3                   __end_of_I2C_MasterSendTxData 0F09  
                __end_ofi1_I2C_MasterGetRxData 0E70                             ?_I2C_MasterSendAck 0070  
                            _I2C_MasterStartRx 0E85                __size_ofi1_I2C_MasterSendTxData 0005  
               __size_of_wr2RegCompleteHandler 0016                          ??_I2C_DO_ADDRESS_NACK 00C0  
                       i1_I2C_MasterDisableIrq 0E5E                i1I2C_SetDataCompleteCallback@cb 0075  
             __size_ofi1_rd2RegCompleteHandler 0010                  __end_of_wr2RegCompleteHandler 070F  
                  __size_of_EUSART_Receive_ISR 0035                            _I2C_DO_RX_NACK_STOP 0F73  
                         i1_I2C_MasterClearIrq 0E58                          _rd1RegCompleteHandler 06E3  
                           ?_I2C_MasterStartRx 0070                             __end_ofi1_I2C_Open 03E0  
                   __end_of_I2C_MasterSendNack 0ECB               __size_ofi1_wr2RegCompleteHandler 0010  
                        _wr1RegCompleteHandler 06B7                _rd1RegCompleteHandler$intlevel0 06E7  
              _wr1RegCompleteHandler$intlevel0 06BB                                     __pmaintext 00FD  
                          ??_I2C_MasterSendAck 004D                       rd1RegCompleteHandler@ptr 0053  
                  __end_of_I2C_DO_SEND_RESTART 0F63                                    _MyTimer2ISR 016C  
                              _I2C_DO_TX_EMPTY 04A8                            I2C_SetBuffer@buffer 0050  
                              __CFG_PPS1WAY$ON 0000                                     ??_TMR2_ISR 007E  
                                   __pintentry 0004                 __end_of_I2C_MasterWaitForEvent 0ED3  
                          ??_I2C_MasterStartRx 004D                  __size_of_I2C_DO_SEND_ADR_READ 000C  
                          __size_of_MyUART_ISR 00B8                 __size_ofi1_I2C_DO_ADDRESS_NACK 0023  
             __size_of_I2C_CallbackReturnReset 0006                        __end_ofi1_I2C_DO_RX_ACK 0EB7  
                      _I2C_DO_RX_ACK$intlevel0 0F6F                  __end_ofi1_I2C_DO_ADDRESS_NACK 05DD  
                 ??_EUSART_DefaultErrorHandler 0071                          ??_I2C_MasterOperation 00C6  
               I2C_SetDataCompleteCallback@ptr 00BF                 __end_of_I2C_Write1ByteRegister 0479  
                         i1_I2C_MasterSendNack 0E9B                                i1_I2C_MasterFsm 04D3  
            __size_ofi1_I2C_MasterWaitForEvent 0004                       ??_I2C_DO_RX_NACK_RESTART 004D  
                    ?i1_I2C_MasterWaitForEvent 0070              __end_of_I2C_DO_SEND_RESTART_WRITE 0F5B  
                         ?_I2C_DO_RX_NACK_STOP 0070                                  _eusartRxCount 0037  
                ??i1_I2C_DO_SEND_RESTART_WRITE 0070                                __CFG_WDTCCS$SWC 0000  
            __size_ofi1_I2C_Write1ByteRegister 002F                      ?i1_I2C_Write1ByteRegister 003F  
                __size_of_EUSART_RxDataHandler 0017                                i1_I2C_SetBuffer 07C5  
                    __end_of_I2C_MasterSendAck 0ECF                                        _OSCTUNE 0098  
                                      _PWM3DCH 0618                                        _PWM3DCL 0617  
                                      _PWM3CON 0619                                        _SSP1ADD 0212  
                                      _SLRCONA 030C                                        _SLRCONB 030D  
                                      _SLRCONC 030E                                        _SSP1BUF 0211  
                                 ??_TMR2_Start 004D                       ??_EUSART_SetErrorHandler 004F  
                             ?_TMR2_StartTimer 0070            _I2C_DO_SEND_RESTART_WRITE$intlevel0 0F57  
               __size_ofi1_I2C_MasterOperation 001E                  __end_ofi1_I2C_MasterOperation 0639  
                    __end_of_I2C_MasterStartRx 0E88                           I2C_Close@returnValue 004E  
               ?i1_I2C_SetDataCompleteCallback 0075                   ?_I2C_SetDataCompleteCallback 00BD  
                                    _I2C_DO_RX 02B6                                      _I2C_DO_TX 01D9  
             __end_of_I2C_DO_SEND_RESTART_READ 0F53                     i1rd1RegCompleteHandler@ptr 0079  
                 ??i1_I2C_DO_SEND_RESTART_READ 0070                                      _I2C_Close 05FD  
                        i1_I2C_DO_SEND_RESTART 0EAB                      ??_rdBlkRegCompleteHandler 0054  
                        ?i1_I2C_MasterClearIrq 0070                           _I2C_MasterDisableIrq 0E79  
                              ??_I2C_MasterFsm 00C3            __size_of_EUSART_DefaultErrorHandler 0003  
                   ??_TMR2_SetInterruptHandler 004F                                        _PosUart 0033  
                          __end_of_I2C_DO_IDLE 0F8C                            __end_of_I2C_DO_RCEN 0FB2  
                                      _Vitesse 0030                                ??_I2C_SetBuffer 004F  
                             ?_TMR2_WriteTimer 0070                        I2C_SetBuffer@bufferSize 004D  
                           __end_of_TMR2_Start 0E91                                 _I2C_MasterOpen 07D3  
                               _I2C_MasterStop 0E82                                 _I2C_Initialize 0FBC  
                            i1_I2C_MasterClose 0E5B                          ?i1_I2C_MasterSendNack 0070  
                    __size_of_I2C_DO_SEND_STOP 0008                         i1_I2C_MasterSendTxData 0ED7  
                                      __ptext1 0F21                                        __ptext2 0EE6  
                                      __ptext3 0E91                                        __ptext4 0E8E  
                                      __ptext5 074F                                        __ptext6 0725  
                                      __ptext7 0F1B                                        __ptext8 0FD1  
                                      __ptext9 0334                              i1I2C_Open@address 0071  
                        ??_I2C_DO_RX_NACK_STOP 004D                              i1_I2C_MasterStart 0E61  
                            i1_I2C_MasterWrite 0EC3           __end_ofi1_I2C_SetAddressNackCallback 1000  
        __size_ofi1_I2C_SetAddressNackCallback 000C                   i1_I2C_SetAddressNackCallback 0FF4  
                           ?i1_I2C_MasterClose 0070                          _OSCILLATOR_Initialize 0F34  
                                    _T2CONbits 001C                             ?i1_I2C_MasterStart 0070  
          __size_ofi1_I2C_DO_SEND_RESTART_READ 0004                             I2C_SetCallback@idx 0051  
                     __size_of_I2C_MasterClose 0003                             ?i1_I2C_MasterWrite 0070  
                     ??_PIN_MANAGER_Initialize 004D                  I2C_CallbackReturnReset@funPtr 0053  
                                    _T2HLTbits 001D                             I2C_SetCallback@ptr 004F  
                     wr1RegCompleteHandler@ptr 0053                      I2C_Write1ByteRegister@reg 00C9  
                     __size_of_I2C_MasterStart 0003                      i1I2C_SetBuffer@bufferSize 0070  
                     __size_of_I2C_MasterWrite 0004                     __size_of_SYSTEM_Initialize 0012  
                          ??i1_I2C_MasterClose 0070                                        clrloop0 0F28  
             _I2C_CallbackReturnStop$intlevel0 0EFB                   __size_ofi1_I2C_MasterSendAck 0004  
                         end_of_initialization 0041                            ??i1_I2C_MasterStart 0070  
                                    _T2RSTbits 001F                 __size_ofi1_I2C_DO_RX_NACK_STOP 0004  
                          ??i1_I2C_MasterWrite 007E                                     ?_I2C_DO_RX 0070  
                                   ?_I2C_DO_TX 0070                  __end_ofi1_I2C_DO_RX_NACK_STOP 0EBB  
        __end_of_EUSART_SetOverrunErrorHandler 0800         __size_of_EUSART_SetOverrunErrorHandler 0009  
                _EUSART_SetOverrunErrorHandler 07F7                      __size_of_I2C_MasterIsNack 0006  
                 __size_ofi1_I2C_MasterStartRx 0003                                     ?_I2C_Close 0070  
                       ?_rd1RegCompleteHandler 0053                              i1_I2C_SetCallback 0596  
         __size_ofi1_I2C_DO_SEND_RESTART_WRITE 0004                        __end_of_I2C_DO_TX_EMPTY 04D3  
                    __size_of_I2C_MasterSetIrq 0003                          ?_I2C_MasterDisableIrq 0070  
                            _EUSART_Initialize 0415                         ?_wr1RegCompleteHandler 0053  
                           ?i1_I2C_SetCallback 0070                             ?_EUSART_Initialize 0070  
                     __size_of_I2C_SetCallback 0025                    ??i1_I2C_CallbackReturnReset 007A  
                      __end_ofi1_I2C_MasterFsm 04FD                         __end_of_I2C_MasterOpen 07DF  
                       __end_of_I2C_MasterStop 0E85                         __end_of_I2C_Initialize 0FC6  
                    __end_ofi1_I2C_MasterClose 0E5E                            ??i1_I2C_SetCallback 0073  
                    __end_ofi1_I2C_MasterStart 0E64                     i1wr1RegCompleteHandler@ptr 0079  
                    __end_ofi1_I2C_MasterWrite 0EC7                               ?i1_I2C_DO_RX_ACK 0070  
                  __end_of_TMR2_Counter8BitSet 0EEB                            ??_EUSART_Initialize 004F  
                                 MyTimer2ISR@g 004A                        __end_ofi1_I2C_SetBuffer 07D3  
                      i1_I2C_DO_SEND_ADR_WRITE 0F2D                                      _PORTAbits 000C  
               i1I2C_SetAddressNackCallback@cb 0075                __end_of_rdBlkRegCompleteHandler 0656  
                         _I2C_MasterSendTxData 0F03                               ??i1_I2C_DO_RESET 0070  
                                    _SSPDATPPS 0E21                __size_of_I2C_DO_RX_NACK_RESTART 0008  
                                    _SSPCLKPPS 0E20                               __CFG_FOSC$INTOSC 0000  
                _I2C_DO_SEND_RESTART$intlevel0 0F5F                  ?i1_I2C_SetAddressNackCallback 0075  
                  ?_I2C_SetAddressNackCallback 00BD                          __size_ofi1_I2C_Poller 000A  
                        __size_of_EUSART_Write 0008                     __size_of_I2C_MasterSendAck 0004  
                            __size_of_I2C_Open 003E                     __end_ofi1_I2C_DO_SEND_STOP 0EB3  
                     ??i1_I2C_DO_SEND_ADR_READ 0070                                   ??_MyUART_ISR 0071  
              __size_of_EUSART_SetErrorHandler 0009                      __size_ofi1_I2C_MasterOpen 000C  
                   __size_of_I2C_MasterStartRx 0003             __size_ofi1_rdBlkRegCompleteHandler 0017  
                    __size_ofi1_I2C_MasterStop 0003                      __end_ofi1_I2C_SetCallback 05BA  
                      TMR2_WriteTimer@timerVal 004E                         ?i1_I2C_DO_SEND_RESTART 0070  
                       ??i1_I2C_MasterClearIrq 0070                      __end_of_EUSART_Initialize 0448  
                      i1_rd2RegCompleteHandler 0795                                    _I2C_DO_IDLE 0F83  
                                  _I2C_DO_RCEN 0FA8                     rdBlkRegCompleteHandler@ptr 0053  
                I2C_Write1ByteRegister@address 00CC                        i1_wr2RegCompleteHandler 07B5  
                      ?_I2C_CallbackReturnStop 0053                     __end_of_PWM3_LoadDutyValue 0725  
                     _I2C_DO_SEND_RESTART_READ 0F4B                    i1I2C_Write1ByteRegister@reg 003F  
                 I2C_CallbackReturnStop@funPtr 0053                        ??_I2C_Read2ByteRegister 0041  
                              ?_I2C_MasterOpen 0070                     __end_ofi1_I2C_MasterIsNack 0EF1  
                              ?_I2C_MasterStop 0070                                ?_I2C_Initialize 0070  
         __end_of_TMR2_DefaultInterruptHandler 0004          __size_of_TMR2_DefaultInterruptHandler 0001  
                 _TMR2_DefaultInterruptHandler 0003                        _I2C_CallbackReturnReset 0EFD  
           __end_of_EUSART_DefaultErrorHandler 0E58                     _EUSART_DefaultErrorHandler 0E55  
                       ??i1_I2C_MasterSendNack 0070                     __end_ofi1_I2C_MasterSetIrq 0E73  
         __size_of_I2C_SetDataCompleteCallback 0012                                   i1_I2C_Poller 0F9E  
                                 _EUSART_Write 0F3B                              __size_of_TMR2_ISR 000C  
                           __end_of_MyUART_ISR 00FD                     ??i1_I2C_DO_RX_NACK_RESTART 0070  
                        ?_I2C_MasterSendTxData 0070                         ?_OSCILLATOR_Initialize 0070  
                  ??_I2C_DO_SEND_RESTART_WRITE 004D                                  ??i1_I2C_DO_RX 007A  
                                ??i1_I2C_DO_TX 007A                            start_initialization 0026  
                    i1_I2C_CallbackReturnReset 0E53                __size_of_PIN_MANAGER_Initialize 003B  
                                ??i1_I2C_Close 0070                                  ?_I2C_DO_RESET 0070  
 EUSART_SetRxInterruptHandler@interruptHandler 004D             __end_ofi1_I2C_DO_SEND_RESTART_READ 0EA7  
                   i1_I2C_DO_SEND_RESTART_READ 0EA3                        ?i1_I2C_MasterDisableIrq 0070  
                                  ??_I2C_DO_RX 00C0                                    ??_I2C_DO_TX 00C0  
                          i1I2C_SetCallback@cb 0070                              ??_I2C_MasterClose 004D  
                        __end_ofi1_I2C_DO_IDLE 0EE1                         ??_I2C_MasterDisableIrq 004D  
                        __end_ofi1_I2C_DO_RCEN 0EF7                                    ??_I2C_Close 004D  
                            ??_I2C_MasterStart 004D                              ??_I2C_MasterWrite 0054  
               __end_of_I2C_CallbackReturnStop 0EFD                         _I2C_DO_RX_NACK_RESTART 0F7B  
                             ?_I2C_DO_TX_EMPTY 0070                             _I2C_MasterClearIrq 0E73  
             __end_ofi1_I2C_MasterWaitForEvent 0EC3                 ?_EUSART_SetOverrunErrorHandler 004D  
            __size_ofi1_I2C_CallbackReturnStop 0002                       __size_of_PWM3_Initialize 000B  
                    ?i1_I2C_CallbackReturnStop 0079                     _EUSART_FramingErrorHandler 0056  
                                 ?_MyTimer2ISR 0070                         _EUSART_SetErrorHandler 0F95  
                             ?i1_I2C_MasterFsm 0070               __end_ofi1_I2C_Write1ByteRegister 04A8  
                                  _CCPTMRSbits 029E                     __size_ofi1_I2C_MasterClose 0003  
                    ??i1_I2C_DO_SEND_ADR_WRITE 0070                            ?_I2C_MasterClearIrq 0070  
                  __end_of_I2C_MasterGetRxData 0E8B                                    __pdataBANK0 005A  
                        __end_of_I2C_DO_RX_ACK 0F73                     __size_ofi1_I2C_MasterStart 0003  
                   __size_ofi1_I2C_MasterWrite 0004                  ?_TMR2_DefaultInterruptHandler 0070  
                             _I2C_DO_SEND_STOP 0F63                              ??_I2C_SetCallback 0050  
                             ?i1_I2C_SetBuffer 0070                            I2C_Open@returnValue 004F  
                           _I2C_MasterSendNack 0EC7                       ?_I2C_MasterEnableRestart 0070  
                     I2C_Read2ByteRegister@reg 003F                          _I2C_DO_SEND_ADR_WRITE 0FC6  
                                    ___latbits 0002                                  __pcstackBANK0 003A  
                                __pcstackBANK1 00BD                                 ??_I2C_DO_RESET 004D  
                     __size_of_TMR2_Initialize 0015                            ?_I2C_MasterSendNack 0070  
               __end_ofi1_I2C_MasterDisableIrq 0E61                   __end_of_I2C_DO_SEND_ADR_READ 07EB  
                         ??_I2C_MasterClearIrq 004D                    __end_of_I2C_DO_ADDRESS_NACK 0525  
                    ??i1_rd2RegCompleteHandler 007A                __size_ofi1_I2C_DO_SEND_ADR_READ 0008  
               ??i1_I2C_SetAddressNackCallback 0078                     __size_ofi1_I2C_SetCallback 0024  
                          __end_ofi1_I2C_DO_RX 03A9                      ??i1_wr2RegCompleteHandler 007A  
                          __end_ofi1_I2C_DO_TX 0274               i1I2C_SetDataCompleteCallback@ptr 0077  
                   __end_of_EUSART_Receive_ISR 0415                               _I2C_MasterIsNack 0F09  
                   __size_of_EUSART_Initialize 0033                      _I2C_DO_SEND_RESTART_WRITE 0F53  
                          __end_ofi1_I2C_Close 0689               _EUSART_RxDefaultInterruptHandler 0058  
                             _I2C_MasterSetIrq 0E8B                                      __pnvBANK0 0054  
                                    __pnvBANK1 00CF                          _rd2RegCompleteHandler 06CD  
                        i1_I2C_MasterGetRxData 0E6D                          __end_of_fsmStateTable 05FD  
                 __end_of_EUSART_RxDataHandler 06B7                         _PIN_MANAGER_Initialize 0334  
                        _wr2RegCompleteHandler 06F9                      ??_I2C_CallbackReturnReset 0054  
                  __end_of_I2C_MasterOperation 0670                           ??_I2C_MasterSendNack 004D  
              i1I2C_Write1ByteRegister@address 0042                       rd2RegCompleteHandler@ptr 0053  
                      ?i1_I2C_MasterSendTxData 0070                                      __ptext100 0E9F  
                                    __ptext101 0E6D                                      __ptext110 07B5  
                                    __ptext102 0E9B                                      __ptext111 0FDC  
                                    __ptext103 0E6A                                      __ptext120 0E58  
                                    __ptext112 0596                                      __ptext104 0E53  
                                    __ptext121 03E0                                      __ptext113 07C5  
                                    __ptext105 0E51                                      __ptext122 0045  
                                    __ptext114 0E67                                      __ptext106 0689  
                                    __ptext123 0F3B                                      __ptext115 0E64  
                                    __ptext107 0785                                      __ptext124 0E97  
                                    __ptext116 0E61                                      __ptext108 0795  
                                    __ptext125 0E50                                      __ptext117 0670  
                                    __ptext109 07A5                                      __ptext126 0E55  
                                    __ptext118 0E5E                                      __ptext127 06A0  
                                    __ptext119 0E5B                            i1_I2C_MasterSendAck 0E9F  
                                 _eusartRxHead 0039                                   _eusartRxTail 0038  
                       ??_I2C_MasterSendTxData 004D                   ??_INTERRUPT_InterruptManager 004C  
                          i1_I2C_MasterStartRx 0E6A                   __size_of_I2C_DO_SEND_RESTART 0008  
                                     _BAUD1CON 019F                          i1_I2C_DO_ADDRESS_NACK 05BA  
                      I2C_MasterOperation@read 00C7                                       _I2C_Open 02F6  
                     ?i1_rd1RegCompleteHandler 0079                       ?i1_wr1RegCompleteHandler 0079  
                         ?i1_I2C_MasterSendAck 0070                                       _T2CLKCON 001E  
                      ??_rd1RegCompleteHandler 0054                               i1_I2C_MasterOpen 0FE8  
                             i1_I2C_MasterStop 0E67                                 _eusartRxBuffer 0028  
                 i1rdBlkRegCompleteHandler@ptr 0079                        ??_wr1RegCompleteHandler 0054  
                 I2C_Read2ByteRegister@address 0045                           ?i1_I2C_MasterStartRx 0070  
                   i1rd2RegCompleteHandler@ptr 0079                      i1I2C_MasterOperation@read 003D  
                        i1_I2C_MasterOperation 061B                                       _LATAbits 010C  
       EUSART_SetErrorHandler@interruptHandler 004D                                       _LATCbits 010E  
                                    clear_ram0 0F27                                       _PIE1bits 0090  
                            _eusartRxLastError 0036                       __size_of_TMR2_StartTimer 0003  
          __size_of_INTERRUPT_InterruptManager 0020                                       _PIR1bits 0010  
              ??_EUSART_SetFramingErrorHandler 004F                                       _PIR2bits 0011  
               __end_ofi1_I2C_MasterSendTxData 0EDC                          __end_of_I2C_MasterFsm 054C  
                  __end_of_I2C_DO_RX_NACK_STOP 0F7B                           __CFG_WDTCPS$WDTCPS1F 0000  
                                     _SSP1CON1 0215                                       _SSP1CON2 0216  
    __end_of_EUSART_DefaultOverrunErrorHandler 0E9B     __size_of_EUSART_DefaultOverrunErrorHandler 0004  
          ??_EUSART_DefaultOverrunErrorHandler 0070             ?_EUSART_DefaultOverrunErrorHandler 0070  
            _EUSART_DefaultOverrunErrorHandler 0E97                         i1_I2C_DO_SEND_ADR_READ 0F43  
                                     _TMR2_ISR 07EB                __end_of_I2C_MasterEnableRestart 0E82  
                                     _SSP1STAT 0214                       i1_I2C_MasterWaitForEvent 0EBF  
                        __end_of_I2C_SetBuffer 074F            __end_ofi1_I2C_DO_SEND_RESTART_WRITE 0EAB  
                  i1_I2C_DO_SEND_RESTART_WRITE 0EA7                              ??_PWM3_Initialize 004D  
                     i1_I2C_Write1ByteRegister 0479                         ?_I2C_DO_SEND_ADR_WRITE 0070  
                     I2C_MasterSendTxData@data 004D                 ??_TMR2_DefaultInterruptHandler 0070  
            __size_of_TMR2_SetInterruptHandler 0006                       __size_of_TMR2_WriteTimer 0006  
                                  i1_I2C_DO_RX 036F                                    i1_I2C_DO_TX 0229  
                    ?_TMR2_SetInterruptHandler 004D             __size_ofi1_I2C_MasterEnableRestart 0003  
                     wr2RegCompleteHandler@ptr 0053                     ?i1_I2C_MasterEnableRestart 0070  
                                  i1_I2C_Close 0670                        ??i1_I2C_DO_SEND_RESTART 0070  
                        ??i1_I2C_MasterSendAck 0070                     ??_I2C_DO_SEND_RESTART_READ 004D  
                     ?_rdBlkRegCompleteHandler 0053                                     _I2C_Poller 0FB2  
                        ??i1_I2C_MasterStartRx 0070                                     _I2C_Status 00A0  
                                 ?_I2C_DO_IDLE 0070                                   ?_I2C_DO_RCEN 0070  
                            ??_TMR2_Initialize 004F                         ?_rd2RegCompleteHandler 0053  
                       ?i1_I2C_MasterGetRxData 0070                          i1_I2C_DO_RX_NACK_STOP 0EB7  
                                     _SateLeds 0032                               ??_I2C_MasterOpen 004D  
                    _I2C_DO_TX_EMPTY$intlevel0 04AC                         ?_wr2RegCompleteHandler 0053  
                             ??_I2C_MasterStop 004D                       ??_I2C_MasterWaitForEvent 004D  
                             ??_I2C_Initialize 004D                _wr2RegCompleteHandler$intlevel0 06FD  
              _rd2RegCompleteHandler$intlevel0 06D1                             i1_I2C_DO_SEND_STOP 0EAF  
                        i1I2C_SetBuffer@buffer 0073                           __end_of_I2C_DO_RESET 0F95  
                     ??_I2C_Write1ByteRegister 00CB                     i1I2C_MasterSendTxData@data 0070  
                      ??_OSCILLATOR_Initialize 004D                            _EUSART_ErrorHandler 00CF  
                         _I2C_DO_SEND_ADR_READ 07DF                 __size_of_I2C_Read2ByteRegister 0042  
                         __size_of_MyTimer2ISR 006D                    ?_EUSART_DefaultErrorHandler 0070  
             i1I2C_MasterOperation@returnValue 003E                  __end_of_I2C_Read2ByteRegister 02B6  
              __end_ofi1_rd1RegCompleteHandler 07B5                     i1wr2RegCompleteHandler@ptr 0079  
                          ?i1_I2C_DO_SEND_STOP 0070              _I2C_CallbackReturnReset$intlevel0 0F01  
                       ?i1_I2C_DO_ADDRESS_NACK 0070                __end_ofi1_wr1RegCompleteHandler 0795  
                           _PWM3_LoadDutyValue 070F                                _I2C_MasterClose 0E76  
                I2C_SetAddressNackCallback@ptr 00BF                                I2C_Open@address 004E  
                              _I2C_MasterStart 0E7C                                _I2C_MasterWrite 0ED3  
                           i1_I2C_MasterIsNack 0EEB                           _EUSART_RxDataHandler 06A0  
                 __size_of_TMR2_Counter8BitSet 0005                       __size_ofi1_I2C_DO_RX_ACK 0004  
                                     __ptext10 0F34                                       __ptext11 0FBC  
                                     __ptext20 07D3                                       __ptext12 0415  
                                     __ptext21 0ED3                                       __ptext13 0F15  
                                     __ptext30 0F6B                                       __ptext22 0656  
                                     __ptext14 07F7                                       __ptext31 0F63  
                                     __ptext23 0FB2                                       __ptext15 0F0F  
                                     __ptext40 0F83                                       __ptext32 0F5B  
                                     __ptext24 0ECF                                       __ptext16 0F95  
                                     __ptext41 04A8                                       __ptext33 0F53  
                                     __ptext25 0525                                       __ptext17 0448  
                                     __ptext50 0EF7                                       __ptext42 0E8B  
                                     __ptext34 0F4B                                       __ptext26 04FD  
                                     __ptext18 0761                                       __ptext51 0639  
                                     __ptext43 0F09                                       __ptext35 0FA8  
                                     __ptext27 0F8C                                       __ptext19 02F6  
                                     __ptext60 0E7F                                       __ptext52 06B7  
                                     __ptext44 0F03                                       __ptext36 02B6  
                                     __ptext28 0F7B                                       __ptext61 0E7C  
                                     __ptext53 06CD                                       __ptext45 0ECB  
                                     __ptext37 01D9                                       __ptext29 0F73  
                                     __ptext70 0479                                       __ptext62 05FD  
                                     __ptext54 06E3                                       __ptext46 0E88  
                                     __ptext38 0FC6                                       __ptext71 070F  
                                     __ptext63 0E79                                       __ptext55 06F9  
                                     __ptext47 0EC7                                       __ptext39 07DF  
                                     __ptext80 04D3                                       __ptext72 0274  
                                     __ptext64 0E76                                       __ptext56 0773  
                                     __ptext48 0E85                                       __ptext81 05BA  
                                     __ptext73 0FF4                                       __ptext65 0E73  
                                     __ptext57 054C                                       __ptext49 0EFD  
                                     __ptext90 0EF1                                       __ptext82 0EE1  
                                     __ptext74 03A9                                       __ptext58 073A  
                          ?_PWM3_LoadDutyValue 0070                                       __ptext91 036F  
                                     __ptext83 0EBB                                       __ptext75 0FE8  
                                     __ptext67 07EB                                       __ptext59 0E82  
                                     __ptext92 0229                                       __ptext84 0EB7  
                                     __ptext76 0EC3                                       __ptext68 016C  
                                     __ptext93 0F2D                                       __ptext85 0EB3  
                                     __ptext77 061B                                       __ptext69 0003  
                                     __ptext94 0F43                                       __ptext86 0EAF  
                                     __ptext78 0F9E                                       __ptext95 0EDC  
                                     __ptext87 0EAB                                       __ptext79 0EBF  
                                     __ptext96 0571                                       __ptext88 0EA7  
                                     __ptext97 0E70                                       __ptext89 0EA3  
                                     __ptext98 0EEB                                       __ptext99 0ED7  
                           i1_I2C_MasterSetIrq 0E70                                   _SSP1CON1bits 0215  
                                 _SSP1CON2bits 0216              __end_ofi1_I2C_MasterEnableRestart 0E67  
             __end_ofi1_I2C_CallbackReturnStop 0E53            __end_of_I2C_SetDataCompleteCallback 0785  
                  _I2C_SetDataCompleteCallback 0773                        ?_I2C_DO_RX_NACK_RESTART 0070  
                  ?i1_I2C_DO_SEND_RESTART_READ 0070                         ?i1_I2C_MasterOperation 0070  
                         ??i1_I2C_DO_SEND_STOP 0070                            ?i1_I2C_MasterIsNack 0070  
                     __end_of_I2C_DO_SEND_STOP 0F6B                                  __size_of_main 006F  
                          ?i1_I2C_MasterSetIrq 0070                  __size_ofi1_I2C_MasterClearIrq 0003  
             _I2C_DO_RX_NACK_RESTART$intlevel0 0F7F                           __CFG_WDTCWS$WDTCWSSW 0000  
                      ?_EUSART_SetErrorHandler 004D                                _I2C_SetCallback 054C  
                ??_I2C_SetDataCompleteCallback 0052                                     _RC1STAbits 019D  
                   I2C_Write1ByteRegister@data 00CA  EUSART_SetOverrunErrorHandler@interruptHandler 004D  
                         ??_PWM3_LoadDutyValue 0072                                       int$flags 007E  
                        ?_I2C_DO_SEND_ADR_READ 0070                              ??_TMR2_StartTimer 004D  
           __end_of_INTERRUPT_InterruptManager 0024                     _INTERRUPT_InterruptManager 0004  
        __end_of_EUSART_SetFramingErrorHandler 0F15         __size_of_EUSART_SetFramingErrorHandler 0006  
                _EUSART_SetFramingErrorHandler 0F0F                                   _SSP1STATbits 0214  
                         ??i1_I2C_MasterIsNack 0070                       __end_of_I2C_MasterIsNack 0F0F  
                __size_ofi1_I2C_MasterSendNack 0004                           ??i1_I2C_MasterSetIrq 0070  
                                   i1_I2C_Open 03A9                       __end_of_I2C_MasterSetIrq 0E8E  
                                   _INTCONbits 000B                          ?_EUSART_RxDataHandler 0070  
               __end_of_I2C_DO_RX_NACK_RESTART 0F83                    TMR2_Counter8BitSet@timerVal 004D  
                                     intlevel1 0000                                    ?_I2C_Poller 0070  
                            ??_TMR2_WriteTimer 004E                        __size_ofi1_I2C_DO_RESET 0005  
             __size_of_I2C_MasterEnableRestart 0003              __size_ofi1_I2C_DO_RX_NACK_RESTART 0004  
                       ?i1_I2C_DO_RX_NACK_STOP 0070                      ?i1_I2C_DO_RX_NACK_RESTART 0070  
                      ?_PIN_MANAGER_Initialize 0070                 __end_of_EUSART_SetErrorHandler 0F9E  
                            __CFG_CLKOUTEN$OFF 0000                            _I2C_DO_SEND_RESTART 0F5B  
                   ?i1_rdBlkRegCompleteHandler 0079                  __size_of_I2C_MasterDisableIrq 0003  
                            i1_I2C_DO_TX_EMPTY 0571           __end_of_EUSART_SetRxInterruptHandler 0F1B  
        __size_of_EUSART_SetRxInterruptHandler 0006                   _EUSART_SetRxInterruptHandler 0F15  
              __size_of_I2C_MasterWaitForEvent 0004                             ?i1_I2C_DO_TX_EMPTY 0070  
              __size_of_I2C_Write1ByteRegister 0031                             _EUSART_Receive_ISR 03E0  
EUSART_SetFramingErrorHandler@interruptHandler 004D                        __end_of_I2C_MasterClose 0E79  
                     __size_of_I2C_DO_TX_EMPTY 002B                       __end_ofi1_I2C_MasterOpen 0FF4  
                  PWM3_LoadDutyValue@dutyValue 0070                       __end_ofi1_I2C_MasterStop 0E6A  
                      __end_of_I2C_MasterStart 0E7F                        __end_of_I2C_MasterWrite 0ED7  
                                __pstringtext1 05DD                            ??i1_I2C_DO_TX_EMPTY 007A  
                         ?_I2C_DO_SEND_RESTART 0070                         __size_ofi1_I2C_DO_IDLE 0005  
                          ?_EUSART_Receive_ISR 0070                         __size_ofi1_I2C_DO_RCEN 0006  
                     __size_ofi1_I2C_MasterFsm 002A                   __size_of_I2C_MasterGetRxData 0003  
                        _I2C_DO_IDLE$intlevel0 0F87                                     _TX1STAbits 019E  
                     __size_ofi1_I2C_SetBuffer 000E                                     _TMR2_Start 0E8E  
              i1I2C_SetAddressNackCallback@ptr 0077                    __size_of_I2C_MasterClearIrq 0003  
                           EUSART_Write@txData 0070                        __end_of_I2C_SetCallback 0571  
               __end_of_PIN_MANAGER_Initialize 036F                 __size_of_rd1RegCompleteHandler 0016  
                __end_of_rd1RegCompleteHandler 06F9                         __size_of_I2C_DO_RX_ACK 0008  
                            ??i1_I2C_DO_RX_ACK 0070                      __end_ofi1_I2C_DO_TX_EMPTY 0596  
               __size_of_wr1RegCompleteHandler 0016                i1I2C_CallbackReturnReset@funPtr 0079  
                         ??_EUSART_Receive_ISR 0071                       i1_I2C_CallbackReturnStop 0E51  
                        __size_of_I2C_DO_RESET 0009               __size_ofi1_rd1RegCompleteHandler 0010  
                __end_of_wr1RegCompleteHandler 06CD                     ??i1_I2C_MasterWaitForEvent 0070  
                        _TMR2_InterruptHandler 0054                   __size_of_I2C_DO_ADDRESS_NACK 0028  
                         __size_of_I2C_DO_IDLE 0009                           __size_of_I2C_DO_RCEN 000A  
            __end_ofi1_rdBlkRegCompleteHandler 06A0                                _PWM3_Initialize 0FD1  
             __size_ofi1_wr1RegCompleteHandler 0010                       ?i1_I2C_DO_SEND_ADR_WRITE 0070  
                      ?i1_I2C_DO_SEND_ADR_READ 0070                             __size_of_I2C_DO_RX 0040  
                           __size_of_I2C_DO_TX 0050                     ??i1_I2C_Write1ByteRegister 0041  
