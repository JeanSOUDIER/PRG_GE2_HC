

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Apr 28 11:17:49 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2
    51                           	psect	text35,local,class=CODE,merge=1,delta=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,delta=2
    54                           	psect	text38,local,class=CODE,merge=1,delta=2
    55                           	psect	text39,local,class=CODE,merge=1,delta=2
    56                           	psect	text40,local,class=CODE,merge=1,delta=2
    57                           	psect	text41,local,class=CODE,merge=1,delta=2
    58                           	psect	text42,local,class=CODE,merge=1,delta=2
    59                           	psect	text43,local,class=CODE,merge=1,delta=2
    60                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text51,local,class=CODE,merge=1,delta=2
    68                           	psect	text52,local,class=CODE,merge=1,delta=2
    69                           	psect	text53,local,class=CODE,merge=1,delta=2
    70                           	psect	text54,local,class=CODE,merge=1,delta=2
    71                           	psect	text55,local,class=CODE,merge=1,delta=2
    72                           	psect	text56,local,class=CODE,merge=1,delta=2
    73                           	psect	text57,local,class=CODE,merge=1,delta=2
    74                           	psect	text58,local,class=CODE,merge=1,delta=2
    75                           	psect	text59,local,class=CODE,merge=1,delta=2
    76                           	psect	text60,local,class=CODE,merge=1,delta=2
    77                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text64,local,class=CODE,merge=1,delta=2
    81                           	psect	text65,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text66,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text67,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	intentry,global,class=CODE,delta=2
    85                           	psect	text69,local,class=CODE,merge=1,delta=2
    86                           	psect	text70,local,class=CODE,merge=1,delta=2
    87                           	psect	text71,local,class=CODE,merge=1,delta=2
    88                           	psect	text72,local,class=CODE,merge=1,delta=2
    89                           	psect	text73,local,class=CODE,merge=1,delta=2
    90                           	psect	text74,local,class=CODE,merge=1,delta=2
    91                           	psect	text75,local,class=CODE,merge=1,delta=2
    92                           	psect	text76,local,class=CODE,merge=1,delta=2
    93                           	psect	text77,local,class=CODE,merge=1,delta=2
    94                           	psect	text78,local,class=CODE,merge=1,delta=2
    95                           	psect	text79,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text80,local,class=CODE,merge=1,delta=2
    97                           	psect	text81,local,class=CODE,merge=1,delta=2
    98                           	psect	text82,local,class=CODE,merge=1,delta=2
    99                           	psect	text83,local,class=CODE,merge=1,inline,delta=2
   100                           	psect	text84,local,class=CODE,merge=1,inline,delta=2
   101                           	psect	text85,local,class=CODE,merge=1,delta=2
   102                           	psect	text86,local,class=CODE,merge=1,delta=2
   103                           	psect	text87,local,class=CODE,merge=1,delta=2
   104                           	psect	text88,local,class=CODE,merge=1,delta=2
   105                           	psect	text89,local,class=CODE,merge=1,delta=2
   106                           	psect	text90,local,class=CODE,merge=1,delta=2
   107                           	psect	text91,local,class=CODE,merge=1,delta=2
   108                           	psect	text92,local,class=CODE,merge=1,delta=2
   109                           	psect	text93,local,class=CODE,merge=1,delta=2
   110                           	psect	text94,local,class=CODE,merge=1,delta=2
   111                           	psect	text95,local,class=CODE,merge=1,delta=2
   112                           	psect	text96,local,class=CODE,merge=1,delta=2
   113                           	psect	text97,local,class=CODE,merge=1,delta=2
   114                           	psect	text98,local,class=CODE,merge=1,delta=2
   115                           	psect	text99,local,class=CODE,merge=1,delta=2
   116                           	psect	text100,local,class=CODE,merge=1,delta=2
   117                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   120                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   121                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text107,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text108,local,class=CODE,merge=1,delta=2
   125                           	psect	text109,local,class=CODE,merge=1,delta=2
   126                           	psect	text110,local,class=CODE,merge=1,delta=2
   127                           	psect	text111,local,class=CODE,merge=1,delta=2
   128                           	psect	text112,local,class=CODE,merge=1,delta=2
   129                           	psect	text113,local,class=CODE,merge=1,delta=2
   130                           	psect	text114,local,class=CODE,merge=1,delta=2
   131                           	psect	text115,local,class=CODE,merge=1,delta=2
   132                           	psect	text116,local,class=CODE,merge=1,delta=2
   133                           	psect	text117,local,class=CODE,merge=1,delta=2
   134                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   137                           	psect	text121,local,class=CODE,merge=1,delta=2
   138                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   139                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text125,local,class=CODE,merge=1,delta=2
   142                           	psect	text126,local,class=CODE,merge=1,delta=2
   143                           	psect	swtext1,local,class=CONST,delta=2
   144                           	psect	text127,local,class=CODE,merge=1,delta=2
   145                           	psect	text128,local,class=CODE,merge=1,delta=2
   146                           	psect	text129,local,class=CODE,merge=1,delta=2
   147                           	psect	text130,local,class=CODE,merge=1,delta=2
   148                           	psect	text131,local,class=CODE,merge=1,delta=2
   149                           	psect	text132,local,class=CODE,merge=1,delta=2
   150                           	psect	text133,local,class=CODE,merge=1,delta=2
   151                           	dabs	1,0x7E,2
   152  0000                     
   153                           ; Version 1.45
   154                           ; Generated 16/11/2017 GMT
   155                           ; 
   156                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   157                           ; All rights reserved.
   158                           ; 
   159                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   160                           ; 
   161                           ; Redistribution and use in source and binary forms, with or without modification, are
   162                           ; permitted provided that the following conditions are met:
   163                           ; 
   164                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   165                           ;        conditions and the following disclaimer.
   166                           ; 
   167                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   168                           ;        of conditions and the following disclaimer in the documentation and/or other
   169                           ;        materials provided with the distribution.
   170                           ; 
   171                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   172                           ;        software without specific prior written permission.
   173                           ; 
   174                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   175                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   176                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   177                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   178                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   179                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   180                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   181                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   182                           ; 
   183                           ; 
   184                           ; Code-generator required, PIC16F1619 Definitions
   185                           ; 
   186                           ; SFR Addresses
   187  0000                     	;# 
   188  0001                     	;# 
   189  0002                     	;# 
   190  0003                     	;# 
   191  0004                     	;# 
   192  0005                     	;# 
   193  0006                     	;# 
   194  0007                     	;# 
   195  0008                     	;# 
   196  0009                     	;# 
   197  000A                     	;# 
   198  000B                     	;# 
   199  000C                     	;# 
   200  000D                     	;# 
   201  000E                     	;# 
   202  0010                     	;# 
   203  0011                     	;# 
   204  0012                     	;# 
   205  0013                     	;# 
   206  0014                     	;# 
   207  0015                     	;# 
   208  0016                     	;# 
   209  0016                     	;# 
   210  0017                     	;# 
   211  0018                     	;# 
   212  0019                     	;# 
   213  001A                     	;# 
   214  001A                     	;# 
   215  001B                     	;# 
   216  001B                     	;# 
   217  001C                     	;# 
   218  001D                     	;# 
   219  001E                     	;# 
   220  001F                     	;# 
   221  008C                     	;# 
   222  008D                     	;# 
   223  008E                     	;# 
   224  0090                     	;# 
   225  0091                     	;# 
   226  0092                     	;# 
   227  0093                     	;# 
   228  0094                     	;# 
   229  0095                     	;# 
   230  0096                     	;# 
   231  0098                     	;# 
   232  0099                     	;# 
   233  009A                     	;# 
   234  009B                     	;# 
   235  009B                     	;# 
   236  009C                     	;# 
   237  009D                     	;# 
   238  009E                     	;# 
   239  009F                     	;# 
   240  010C                     	;# 
   241  010D                     	;# 
   242  010E                     	;# 
   243  0111                     	;# 
   244  0112                     	;# 
   245  0113                     	;# 
   246  0114                     	;# 
   247  0115                     	;# 
   248  0116                     	;# 
   249  0117                     	;# 
   250  0118                     	;# 
   251  0119                     	;# 
   252  011C                     	;# 
   253  018C                     	;# 
   254  018D                     	;# 
   255  018E                     	;# 
   256  0191                     	;# 
   257  0191                     	;# 
   258  0192                     	;# 
   259  0193                     	;# 
   260  0193                     	;# 
   261  0194                     	;# 
   262  0195                     	;# 
   263  0196                     	;# 
   264  0197                     	;# 
   265  0199                     	;# 
   266  0199                     	;# 
   267  0199                     	;# 
   268  019A                     	;# 
   269  019A                     	;# 
   270  019A                     	;# 
   271  019B                     	;# 
   272  019B                     	;# 
   273  019B                     	;# 
   274  019B                     	;# 
   275  019B                     	;# 
   276  019C                     	;# 
   277  019C                     	;# 
   278  019C                     	;# 
   279  019D                     	;# 
   280  019D                     	;# 
   281  019D                     	;# 
   282  019E                     	;# 
   283  019E                     	;# 
   284  019E                     	;# 
   285  019F                     	;# 
   286  019F                     	;# 
   287  019F                     	;# 
   288  019F                     	;# 
   289  019F                     	;# 
   290  020C                     	;# 
   291  020D                     	;# 
   292  020E                     	;# 
   293  0211                     	;# 
   294  0211                     	;# 
   295  0212                     	;# 
   296  0212                     	;# 
   297  0213                     	;# 
   298  0213                     	;# 
   299  0214                     	;# 
   300  0214                     	;# 
   301  0215                     	;# 
   302  0215                     	;# 
   303  0215                     	;# 
   304  0215                     	;# 
   305  0216                     	;# 
   306  0216                     	;# 
   307  0217                     	;# 
   308  0217                     	;# 
   309  028C                     	;# 
   310  028D                     	;# 
   311  028E                     	;# 
   312  0291                     	;# 
   313  0291                     	;# 
   314  0292                     	;# 
   315  0293                     	;# 
   316  0294                     	;# 
   317  0298                     	;# 
   318  0298                     	;# 
   319  0299                     	;# 
   320  029A                     	;# 
   321  029B                     	;# 
   322  029E                     	;# 
   323  030C                     	;# 
   324  030D                     	;# 
   325  030E                     	;# 
   326  038C                     	;# 
   327  038D                     	;# 
   328  038E                     	;# 
   329  0391                     	;# 
   330  0392                     	;# 
   331  0393                     	;# 
   332  0394                     	;# 
   333  0395                     	;# 
   334  0396                     	;# 
   335  0397                     	;# 
   336  0398                     	;# 
   337  0399                     	;# 
   338  040E                     	;# 
   339  0413                     	;# 
   340  0413                     	;# 
   341  0414                     	;# 
   342  0414                     	;# 
   343  0415                     	;# 
   344  0416                     	;# 
   345  0417                     	;# 
   346  0418                     	;# 
   347  041A                     	;# 
   348  041A                     	;# 
   349  041B                     	;# 
   350  041B                     	;# 
   351  041C                     	;# 
   352  041D                     	;# 
   353  041E                     	;# 
   354  041F                     	;# 
   355  0493                     	;# 
   356  0494                     	;# 
   357  0495                     	;# 
   358  0496                     	;# 
   359  049A                     	;# 
   360  049B                     	;# 
   361  049C                     	;# 
   362  049D                     	;# 
   363  058C                     	;# 
   364  058C                     	;# 
   365  058D                     	;# 
   366  058E                     	;# 
   367  058E                     	;# 
   368  058F                     	;# 
   369  0590                     	;# 
   370  0590                     	;# 
   371  0591                     	;# 
   372  0592                     	;# 
   373  0592                     	;# 
   374  0593                     	;# 
   375  0594                     	;# 
   376  0594                     	;# 
   377  0595                     	;# 
   378  0596                     	;# 
   379  0596                     	;# 
   380  0597                     	;# 
   381  0598                     	;# 
   382  0599                     	;# 
   383  059A                     	;# 
   384  059B                     	;# 
   385  059B                     	;# 
   386  059C                     	;# 
   387  059D                     	;# 
   388  060C                     	;# 
   389  060C                     	;# 
   390  060D                     	;# 
   391  060E                     	;# 
   392  060F                     	;# 
   393  060F                     	;# 
   394  0610                     	;# 
   395  0611                     	;# 
   396  0612                     	;# 
   397  0613                     	;# 
   398  0614                     	;# 
   399  0617                     	;# 
   400  0618                     	;# 
   401  0619                     	;# 
   402  061A                     	;# 
   403  061B                     	;# 
   404  061C                     	;# 
   405  0691                     	;# 
   406  0692                     	;# 
   407  0693                     	;# 
   408  0694                     	;# 
   409  0695                     	;# 
   410  0696                     	;# 
   411  0697                     	;# 
   412  0699                     	;# 
   413  069A                     	;# 
   414  0711                     	;# 
   415  0712                     	;# 
   416  0713                     	;# 
   417  0714                     	;# 
   418  0715                     	;# 
   419  0718                     	;# 
   420  0718                     	;# 
   421  0719                     	;# 
   422  071A                     	;# 
   423  071A                     	;# 
   424  071B                     	;# 
   425  071C                     	;# 
   426  071D                     	;# 
   427  0791                     	;# 
   428  0791                     	;# 
   429  0792                     	;# 
   430  0793                     	;# 
   431  0793                     	;# 
   432  0794                     	;# 
   433  0795                     	;# 
   434  0795                     	;# 
   435  0796                     	;# 
   436  0797                     	;# 
   437  0797                     	;# 
   438  0798                     	;# 
   439  0799                     	;# 
   440  079A                     	;# 
   441  080C                     	;# 
   442  080C                     	;# 
   443  080D                     	;# 
   444  080E                     	;# 
   445  080E                     	;# 
   446  080F                     	;# 
   447  0810                     	;# 
   448  0810                     	;# 
   449  0811                     	;# 
   450  0812                     	;# 
   451  0812                     	;# 
   452  0813                     	;# 
   453  0814                     	;# 
   454  0815                     	;# 
   455  0816                     	;# 
   456  0817                     	;# 
   457  0818                     	;# 
   458  0819                     	;# 
   459  081A                     	;# 
   460  081A                     	;# 
   461  081B                     	;# 
   462  081C                     	;# 
   463  081C                     	;# 
   464  081D                     	;# 
   465  088C                     	;# 
   466  088D                     	;# 
   467  088E                     	;# 
   468  088F                     	;# 
   469  088F                     	;# 
   470  0890                     	;# 
   471  0891                     	;# 
   472  0892                     	;# 
   473  0893                     	;# 
   474  0893                     	;# 
   475  0894                     	;# 
   476  0895                     	;# 
   477  0896                     	;# 
   478  0897                     	;# 
   479  0897                     	;# 
   480  0898                     	;# 
   481  0899                     	;# 
   482  0D8C                     	;# 
   483  0D8C                     	;# 
   484  0D8D                     	;# 
   485  0D8E                     	;# 
   486  0D8F                     	;# 
   487  0D8F                     	;# 
   488  0D90                     	;# 
   489  0D91                     	;# 
   490  0D92                     	;# 
   491  0D92                     	;# 
   492  0D93                     	;# 
   493  0D94                     	;# 
   494  0D95                     	;# 
   495  0D95                     	;# 
   496  0D96                     	;# 
   497  0D97                     	;# 
   498  0D98                     	;# 
   499  0D99                     	;# 
   500  0D9A                     	;# 
   501  0D9B                     	;# 
   502  0D9C                     	;# 
   503  0D9D                     	;# 
   504  0D9E                     	;# 
   505  0D9E                     	;# 
   506  0D9F                     	;# 
   507  0DA0                     	;# 
   508  0DA1                     	;# 
   509  0DA1                     	;# 
   510  0DA2                     	;# 
   511  0DA3                     	;# 
   512  0DA4                     	;# 
   513  0DA4                     	;# 
   514  0DA5                     	;# 
   515  0DA6                     	;# 
   516  0DA7                     	;# 
   517  0DA7                     	;# 
   518  0DA8                     	;# 
   519  0DA9                     	;# 
   520  0DAA                     	;# 
   521  0DAB                     	;# 
   522  0DAC                     	;# 
   523  0DAD                     	;# 
   524  0DAE                     	;# 
   525  0DAF                     	;# 
   526  0E0F                     	;# 
   527  0E10                     	;# 
   528  0E11                     	;# 
   529  0E12                     	;# 
   530  0E13                     	;# 
   531  0E14                     	;# 
   532  0E15                     	;# 
   533  0E16                     	;# 
   534  0E17                     	;# 
   535  0E18                     	;# 
   536  0E19                     	;# 
   537  0E1A                     	;# 
   538  0E1B                     	;# 
   539  0E1C                     	;# 
   540  0E1D                     	;# 
   541  0E1E                     	;# 
   542  0E1F                     	;# 
   543  0E20                     	;# 
   544  0E21                     	;# 
   545  0E22                     	;# 
   546  0E23                     	;# 
   547  0E24                     	;# 
   548  0E25                     	;# 
   549  0E26                     	;# 
   550  0E27                     	;# 
   551  0E28                     	;# 
   552  0E29                     	;# 
   553  0E2A                     	;# 
   554  0E2B                     	;# 
   555  0E2C                     	;# 
   556  0E2D                     	;# 
   557  0E2E                     	;# 
   558  0E90                     	;# 
   559  0E91                     	;# 
   560  0E92                     	;# 
   561  0E94                     	;# 
   562  0E95                     	;# 
   563  0E9C                     	;# 
   564  0E9D                     	;# 
   565  0E9E                     	;# 
   566  0E9F                     	;# 
   567  0EA0                     	;# 
   568  0EA1                     	;# 
   569  0EA2                     	;# 
   570  0EA3                     	;# 
   571  0EA4                     	;# 
   572  0EA5                     	;# 
   573  0EA6                     	;# 
   574  0EA7                     	;# 
   575  0F0F                     	;# 
   576  0F10                     	;# 
   577  0F11                     	;# 
   578  0F12                     	;# 
   579  0F13                     	;# 
   580  0F14                     	;# 
   581  0F15                     	;# 
   582  0F16                     	;# 
   583  0F17                     	;# 
   584  0F18                     	;# 
   585  0F19                     	;# 
   586  0F1A                     	;# 
   587  0F1B                     	;# 
   588  0F1C                     	;# 
   589  0F1D                     	;# 
   590  0F1E                     	;# 
   591  0F1F                     	;# 
   592  0F20                     	;# 
   593  0F21                     	;# 
   594  0F22                     	;# 
   595  0F23                     	;# 
   596  0F24                     	;# 
   597  0F25                     	;# 
   598  0F26                     	;# 
   599  0F27                     	;# 
   600  0F28                     	;# 
   601  0F29                     	;# 
   602  0F2A                     	;# 
   603  0F2B                     	;# 
   604  0F2C                     	;# 
   605  0F2D                     	;# 
   606  0F2E                     	;# 
   607  0F2F                     	;# 
   608  0F30                     	;# 
   609  0F31                     	;# 
   610  0F32                     	;# 
   611  0F33                     	;# 
   612  0F34                     	;# 
   613  0F35                     	;# 
   614  0F36                     	;# 
   615  0F37                     	;# 
   616  0FE4                     	;# 
   617  0FE5                     	;# 
   618  0FE6                     	;# 
   619  0FE7                     	;# 
   620  0FE8                     	;# 
   621  0FE9                     	;# 
   622  0FEA                     	;# 
   623  0FEB                     	;# 
   624  0FED                     	;# 
   625  0FEE                     	;# 
   626  0FEF                     	;# 
   627  0000                     	;# 
   628  0001                     	;# 
   629  0002                     	;# 
   630  0003                     	;# 
   631  0004                     	;# 
   632  0005                     	;# 
   633  0006                     	;# 
   634  0007                     	;# 
   635  0008                     	;# 
   636  0009                     	;# 
   637  000A                     	;# 
   638  000B                     	;# 
   639  000C                     	;# 
   640  000D                     	;# 
   641  000E                     	;# 
   642  0010                     	;# 
   643  0011                     	;# 
   644  0012                     	;# 
   645  0013                     	;# 
   646  0014                     	;# 
   647  0015                     	;# 
   648  0016                     	;# 
   649  0016                     	;# 
   650  0017                     	;# 
   651  0018                     	;# 
   652  0019                     	;# 
   653  001A                     	;# 
   654  001A                     	;# 
   655  001B                     	;# 
   656  001B                     	;# 
   657  001C                     	;# 
   658  001D                     	;# 
   659  001E                     	;# 
   660  001F                     	;# 
   661  008C                     	;# 
   662  008D                     	;# 
   663  008E                     	;# 
   664  0090                     	;# 
   665  0091                     	;# 
   666  0092                     	;# 
   667  0093                     	;# 
   668  0094                     	;# 
   669  0095                     	;# 
   670  0096                     	;# 
   671  0098                     	;# 
   672  0099                     	;# 
   673  009A                     	;# 
   674  009B                     	;# 
   675  009B                     	;# 
   676  009C                     	;# 
   677  009D                     	;# 
   678  009E                     	;# 
   679  009F                     	;# 
   680  010C                     	;# 
   681  010D                     	;# 
   682  010E                     	;# 
   683  0111                     	;# 
   684  0112                     	;# 
   685  0113                     	;# 
   686  0114                     	;# 
   687  0115                     	;# 
   688  0116                     	;# 
   689  0117                     	;# 
   690  0118                     	;# 
   691  0119                     	;# 
   692  011C                     	;# 
   693  018C                     	;# 
   694  018D                     	;# 
   695  018E                     	;# 
   696  0191                     	;# 
   697  0191                     	;# 
   698  0192                     	;# 
   699  0193                     	;# 
   700  0193                     	;# 
   701  0194                     	;# 
   702  0195                     	;# 
   703  0196                     	;# 
   704  0197                     	;# 
   705  0199                     	;# 
   706  0199                     	;# 
   707  0199                     	;# 
   708  019A                     	;# 
   709  019A                     	;# 
   710  019A                     	;# 
   711  019B                     	;# 
   712  019B                     	;# 
   713  019B                     	;# 
   714  019B                     	;# 
   715  019B                     	;# 
   716  019C                     	;# 
   717  019C                     	;# 
   718  019C                     	;# 
   719  019D                     	;# 
   720  019D                     	;# 
   721  019D                     	;# 
   722  019E                     	;# 
   723  019E                     	;# 
   724  019E                     	;# 
   725  019F                     	;# 
   726  019F                     	;# 
   727  019F                     	;# 
   728  019F                     	;# 
   729  019F                     	;# 
   730  020C                     	;# 
   731  020D                     	;# 
   732  020E                     	;# 
   733  0211                     	;# 
   734  0211                     	;# 
   735  0212                     	;# 
   736  0212                     	;# 
   737  0213                     	;# 
   738  0213                     	;# 
   739  0214                     	;# 
   740  0214                     	;# 
   741  0215                     	;# 
   742  0215                     	;# 
   743  0215                     	;# 
   744  0215                     	;# 
   745  0216                     	;# 
   746  0216                     	;# 
   747  0217                     	;# 
   748  0217                     	;# 
   749  028C                     	;# 
   750  028D                     	;# 
   751  028E                     	;# 
   752  0291                     	;# 
   753  0291                     	;# 
   754  0292                     	;# 
   755  0293                     	;# 
   756  0294                     	;# 
   757  0298                     	;# 
   758  0298                     	;# 
   759  0299                     	;# 
   760  029A                     	;# 
   761  029B                     	;# 
   762  029E                     	;# 
   763  030C                     	;# 
   764  030D                     	;# 
   765  030E                     	;# 
   766  038C                     	;# 
   767  038D                     	;# 
   768  038E                     	;# 
   769  0391                     	;# 
   770  0392                     	;# 
   771  0393                     	;# 
   772  0394                     	;# 
   773  0395                     	;# 
   774  0396                     	;# 
   775  0397                     	;# 
   776  0398                     	;# 
   777  0399                     	;# 
   778  040E                     	;# 
   779  0413                     	;# 
   780  0413                     	;# 
   781  0414                     	;# 
   782  0414                     	;# 
   783  0415                     	;# 
   784  0416                     	;# 
   785  0417                     	;# 
   786  0418                     	;# 
   787  041A                     	;# 
   788  041A                     	;# 
   789  041B                     	;# 
   790  041B                     	;# 
   791  041C                     	;# 
   792  041D                     	;# 
   793  041E                     	;# 
   794  041F                     	;# 
   795  0493                     	;# 
   796  0494                     	;# 
   797  0495                     	;# 
   798  0496                     	;# 
   799  049A                     	;# 
   800  049B                     	;# 
   801  049C                     	;# 
   802  049D                     	;# 
   803  058C                     	;# 
   804  058C                     	;# 
   805  058D                     	;# 
   806  058E                     	;# 
   807  058E                     	;# 
   808  058F                     	;# 
   809  0590                     	;# 
   810  0590                     	;# 
   811  0591                     	;# 
   812  0592                     	;# 
   813  0592                     	;# 
   814  0593                     	;# 
   815  0594                     	;# 
   816  0594                     	;# 
   817  0595                     	;# 
   818  0596                     	;# 
   819  0596                     	;# 
   820  0597                     	;# 
   821  0598                     	;# 
   822  0599                     	;# 
   823  059A                     	;# 
   824  059B                     	;# 
   825  059B                     	;# 
   826  059C                     	;# 
   827  059D                     	;# 
   828  060C                     	;# 
   829  060C                     	;# 
   830  060D                     	;# 
   831  060E                     	;# 
   832  060F                     	;# 
   833  060F                     	;# 
   834  0610                     	;# 
   835  0611                     	;# 
   836  0612                     	;# 
   837  0613                     	;# 
   838  0614                     	;# 
   839  0617                     	;# 
   840  0618                     	;# 
   841  0619                     	;# 
   842  061A                     	;# 
   843  061B                     	;# 
   844  061C                     	;# 
   845  0691                     	;# 
   846  0692                     	;# 
   847  0693                     	;# 
   848  0694                     	;# 
   849  0695                     	;# 
   850  0696                     	;# 
   851  0697                     	;# 
   852  0699                     	;# 
   853  069A                     	;# 
   854  0711                     	;# 
   855  0712                     	;# 
   856  0713                     	;# 
   857  0714                     	;# 
   858  0715                     	;# 
   859  0718                     	;# 
   860  0718                     	;# 
   861  0719                     	;# 
   862  071A                     	;# 
   863  071A                     	;# 
   864  071B                     	;# 
   865  071C                     	;# 
   866  071D                     	;# 
   867  0791                     	;# 
   868  0791                     	;# 
   869  0792                     	;# 
   870  0793                     	;# 
   871  0793                     	;# 
   872  0794                     	;# 
   873  0795                     	;# 
   874  0795                     	;# 
   875  0796                     	;# 
   876  0797                     	;# 
   877  0797                     	;# 
   878  0798                     	;# 
   879  0799                     	;# 
   880  079A                     	;# 
   881  080C                     	;# 
   882  080C                     	;# 
   883  080D                     	;# 
   884  080E                     	;# 
   885  080E                     	;# 
   886  080F                     	;# 
   887  0810                     	;# 
   888  0810                     	;# 
   889  0811                     	;# 
   890  0812                     	;# 
   891  0812                     	;# 
   892  0813                     	;# 
   893  0814                     	;# 
   894  0815                     	;# 
   895  0816                     	;# 
   896  0817                     	;# 
   897  0818                     	;# 
   898  0819                     	;# 
   899  081A                     	;# 
   900  081A                     	;# 
   901  081B                     	;# 
   902  081C                     	;# 
   903  081C                     	;# 
   904  081D                     	;# 
   905  088C                     	;# 
   906  088D                     	;# 
   907  088E                     	;# 
   908  088F                     	;# 
   909  088F                     	;# 
   910  0890                     	;# 
   911  0891                     	;# 
   912  0892                     	;# 
   913  0893                     	;# 
   914  0893                     	;# 
   915  0894                     	;# 
   916  0895                     	;# 
   917  0896                     	;# 
   918  0897                     	;# 
   919  0897                     	;# 
   920  0898                     	;# 
   921  0899                     	;# 
   922  0D8C                     	;# 
   923  0D8C                     	;# 
   924  0D8D                     	;# 
   925  0D8E                     	;# 
   926  0D8F                     	;# 
   927  0D8F                     	;# 
   928  0D90                     	;# 
   929  0D91                     	;# 
   930  0D92                     	;# 
   931  0D92                     	;# 
   932  0D93                     	;# 
   933  0D94                     	;# 
   934  0D95                     	;# 
   935  0D95                     	;# 
   936  0D96                     	;# 
   937  0D97                     	;# 
   938  0D98                     	;# 
   939  0D99                     	;# 
   940  0D9A                     	;# 
   941  0D9B                     	;# 
   942  0D9C                     	;# 
   943  0D9D                     	;# 
   944  0D9E                     	;# 
   945  0D9E                     	;# 
   946  0D9F                     	;# 
   947  0DA0                     	;# 
   948  0DA1                     	;# 
   949  0DA1                     	;# 
   950  0DA2                     	;# 
   951  0DA3                     	;# 
   952  0DA4                     	;# 
   953  0DA4                     	;# 
   954  0DA5                     	;# 
   955  0DA6                     	;# 
   956  0DA7                     	;# 
   957  0DA7                     	;# 
   958  0DA8                     	;# 
   959  0DA9                     	;# 
   960  0DAA                     	;# 
   961  0DAB                     	;# 
   962  0DAC                     	;# 
   963  0DAD                     	;# 
   964  0DAE                     	;# 
   965  0DAF                     	;# 
   966  0E0F                     	;# 
   967  0E10                     	;# 
   968  0E11                     	;# 
   969  0E12                     	;# 
   970  0E13                     	;# 
   971  0E14                     	;# 
   972  0E15                     	;# 
   973  0E16                     	;# 
   974  0E17                     	;# 
   975  0E18                     	;# 
   976  0E19                     	;# 
   977  0E1A                     	;# 
   978  0E1B                     	;# 
   979  0E1C                     	;# 
   980  0E1D                     	;# 
   981  0E1E                     	;# 
   982  0E1F                     	;# 
   983  0E20                     	;# 
   984  0E21                     	;# 
   985  0E22                     	;# 
   986  0E23                     	;# 
   987  0E24                     	;# 
   988  0E25                     	;# 
   989  0E26                     	;# 
   990  0E27                     	;# 
   991  0E28                     	;# 
   992  0E29                     	;# 
   993  0E2A                     	;# 
   994  0E2B                     	;# 
   995  0E2C                     	;# 
   996  0E2D                     	;# 
   997  0E2E                     	;# 
   998  0E90                     	;# 
   999  0E91                     	;# 
  1000  0E92                     	;# 
  1001  0E94                     	;# 
  1002  0E95                     	;# 
  1003  0E9C                     	;# 
  1004  0E9D                     	;# 
  1005  0E9E                     	;# 
  1006  0E9F                     	;# 
  1007  0EA0                     	;# 
  1008  0EA1                     	;# 
  1009  0EA2                     	;# 
  1010  0EA3                     	;# 
  1011  0EA4                     	;# 
  1012  0EA5                     	;# 
  1013  0EA6                     	;# 
  1014  0EA7                     	;# 
  1015  0F0F                     	;# 
  1016  0F10                     	;# 
  1017  0F11                     	;# 
  1018  0F12                     	;# 
  1019  0F13                     	;# 
  1020  0F14                     	;# 
  1021  0F15                     	;# 
  1022  0F16                     	;# 
  1023  0F17                     	;# 
  1024  0F18                     	;# 
  1025  0F19                     	;# 
  1026  0F1A                     	;# 
  1027  0F1B                     	;# 
  1028  0F1C                     	;# 
  1029  0F1D                     	;# 
  1030  0F1E                     	;# 
  1031  0F1F                     	;# 
  1032  0F20                     	;# 
  1033  0F21                     	;# 
  1034  0F22                     	;# 
  1035  0F23                     	;# 
  1036  0F24                     	;# 
  1037  0F25                     	;# 
  1038  0F26                     	;# 
  1039  0F27                     	;# 
  1040  0F28                     	;# 
  1041  0F29                     	;# 
  1042  0F2A                     	;# 
  1043  0F2B                     	;# 
  1044  0F2C                     	;# 
  1045  0F2D                     	;# 
  1046  0F2E                     	;# 
  1047  0F2F                     	;# 
  1048  0F30                     	;# 
  1049  0F31                     	;# 
  1050  0F32                     	;# 
  1051  0F33                     	;# 
  1052  0F34                     	;# 
  1053  0F35                     	;# 
  1054  0F36                     	;# 
  1055  0F37                     	;# 
  1056  0FE4                     	;# 
  1057  0FE5                     	;# 
  1058  0FE6                     	;# 
  1059  0FE7                     	;# 
  1060  0FE8                     	;# 
  1061  0FE9                     	;# 
  1062  0FEA                     	;# 
  1063  0FEB                     	;# 
  1064  0FED                     	;# 
  1065  0FEE                     	;# 
  1066  0FEF                     	;# 
  1067  0000                     	;# 
  1068  0001                     	;# 
  1069  0002                     	;# 
  1070  0003                     	;# 
  1071  0004                     	;# 
  1072  0005                     	;# 
  1073  0006                     	;# 
  1074  0007                     	;# 
  1075  0008                     	;# 
  1076  0009                     	;# 
  1077  000A                     	;# 
  1078  000B                     	;# 
  1079  000C                     	;# 
  1080  000D                     	;# 
  1081  000E                     	;# 
  1082  0010                     	;# 
  1083  0011                     	;# 
  1084  0012                     	;# 
  1085  0013                     	;# 
  1086  0014                     	;# 
  1087  0015                     	;# 
  1088  0016                     	;# 
  1089  0016                     	;# 
  1090  0017                     	;# 
  1091  0018                     	;# 
  1092  0019                     	;# 
  1093  001A                     	;# 
  1094  001A                     	;# 
  1095  001B                     	;# 
  1096  001B                     	;# 
  1097  001C                     	;# 
  1098  001D                     	;# 
  1099  001E                     	;# 
  1100  001F                     	;# 
  1101  008C                     	;# 
  1102  008D                     	;# 
  1103  008E                     	;# 
  1104  0090                     	;# 
  1105  0091                     	;# 
  1106  0092                     	;# 
  1107  0093                     	;# 
  1108  0094                     	;# 
  1109  0095                     	;# 
  1110  0096                     	;# 
  1111  0098                     	;# 
  1112  0099                     	;# 
  1113  009A                     	;# 
  1114  009B                     	;# 
  1115  009B                     	;# 
  1116  009C                     	;# 
  1117  009D                     	;# 
  1118  009E                     	;# 
  1119  009F                     	;# 
  1120  010C                     	;# 
  1121  010D                     	;# 
  1122  010E                     	;# 
  1123  0111                     	;# 
  1124  0112                     	;# 
  1125  0113                     	;# 
  1126  0114                     	;# 
  1127  0115                     	;# 
  1128  0116                     	;# 
  1129  0117                     	;# 
  1130  0118                     	;# 
  1131  0119                     	;# 
  1132  011C                     	;# 
  1133  018C                     	;# 
  1134  018D                     	;# 
  1135  018E                     	;# 
  1136  0191                     	;# 
  1137  0191                     	;# 
  1138  0192                     	;# 
  1139  0193                     	;# 
  1140  0193                     	;# 
  1141  0194                     	;# 
  1142  0195                     	;# 
  1143  0196                     	;# 
  1144  0197                     	;# 
  1145  0199                     	;# 
  1146  0199                     	;# 
  1147  0199                     	;# 
  1148  019A                     	;# 
  1149  019A                     	;# 
  1150  019A                     	;# 
  1151  019B                     	;# 
  1152  019B                     	;# 
  1153  019B                     	;# 
  1154  019B                     	;# 
  1155  019B                     	;# 
  1156  019C                     	;# 
  1157  019C                     	;# 
  1158  019C                     	;# 
  1159  019D                     	;# 
  1160  019D                     	;# 
  1161  019D                     	;# 
  1162  019E                     	;# 
  1163  019E                     	;# 
  1164  019E                     	;# 
  1165  019F                     	;# 
  1166  019F                     	;# 
  1167  019F                     	;# 
  1168  019F                     	;# 
  1169  019F                     	;# 
  1170  020C                     	;# 
  1171  020D                     	;# 
  1172  020E                     	;# 
  1173  0211                     	;# 
  1174  0211                     	;# 
  1175  0212                     	;# 
  1176  0212                     	;# 
  1177  0213                     	;# 
  1178  0213                     	;# 
  1179  0214                     	;# 
  1180  0214                     	;# 
  1181  0215                     	;# 
  1182  0215                     	;# 
  1183  0215                     	;# 
  1184  0215                     	;# 
  1185  0216                     	;# 
  1186  0216                     	;# 
  1187  0217                     	;# 
  1188  0217                     	;# 
  1189  028C                     	;# 
  1190  028D                     	;# 
  1191  028E                     	;# 
  1192  0291                     	;# 
  1193  0291                     	;# 
  1194  0292                     	;# 
  1195  0293                     	;# 
  1196  0294                     	;# 
  1197  0298                     	;# 
  1198  0298                     	;# 
  1199  0299                     	;# 
  1200  029A                     	;# 
  1201  029B                     	;# 
  1202  029E                     	;# 
  1203  030C                     	;# 
  1204  030D                     	;# 
  1205  030E                     	;# 
  1206  038C                     	;# 
  1207  038D                     	;# 
  1208  038E                     	;# 
  1209  0391                     	;# 
  1210  0392                     	;# 
  1211  0393                     	;# 
  1212  0394                     	;# 
  1213  0395                     	;# 
  1214  0396                     	;# 
  1215  0397                     	;# 
  1216  0398                     	;# 
  1217  0399                     	;# 
  1218  040E                     	;# 
  1219  0413                     	;# 
  1220  0413                     	;# 
  1221  0414                     	;# 
  1222  0414                     	;# 
  1223  0415                     	;# 
  1224  0416                     	;# 
  1225  0417                     	;# 
  1226  0418                     	;# 
  1227  041A                     	;# 
  1228  041A                     	;# 
  1229  041B                     	;# 
  1230  041B                     	;# 
  1231  041C                     	;# 
  1232  041D                     	;# 
  1233  041E                     	;# 
  1234  041F                     	;# 
  1235  0493                     	;# 
  1236  0494                     	;# 
  1237  0495                     	;# 
  1238  0496                     	;# 
  1239  049A                     	;# 
  1240  049B                     	;# 
  1241  049C                     	;# 
  1242  049D                     	;# 
  1243  058C                     	;# 
  1244  058C                     	;# 
  1245  058D                     	;# 
  1246  058E                     	;# 
  1247  058E                     	;# 
  1248  058F                     	;# 
  1249  0590                     	;# 
  1250  0590                     	;# 
  1251  0591                     	;# 
  1252  0592                     	;# 
  1253  0592                     	;# 
  1254  0593                     	;# 
  1255  0594                     	;# 
  1256  0594                     	;# 
  1257  0595                     	;# 
  1258  0596                     	;# 
  1259  0596                     	;# 
  1260  0597                     	;# 
  1261  0598                     	;# 
  1262  0599                     	;# 
  1263  059A                     	;# 
  1264  059B                     	;# 
  1265  059B                     	;# 
  1266  059C                     	;# 
  1267  059D                     	;# 
  1268  060C                     	;# 
  1269  060C                     	;# 
  1270  060D                     	;# 
  1271  060E                     	;# 
  1272  060F                     	;# 
  1273  060F                     	;# 
  1274  0610                     	;# 
  1275  0611                     	;# 
  1276  0612                     	;# 
  1277  0613                     	;# 
  1278  0614                     	;# 
  1279  0617                     	;# 
  1280  0618                     	;# 
  1281  0619                     	;# 
  1282  061A                     	;# 
  1283  061B                     	;# 
  1284  061C                     	;# 
  1285  0691                     	;# 
  1286  0692                     	;# 
  1287  0693                     	;# 
  1288  0694                     	;# 
  1289  0695                     	;# 
  1290  0696                     	;# 
  1291  0697                     	;# 
  1292  0699                     	;# 
  1293  069A                     	;# 
  1294  0711                     	;# 
  1295  0712                     	;# 
  1296  0713                     	;# 
  1297  0714                     	;# 
  1298  0715                     	;# 
  1299  0718                     	;# 
  1300  0718                     	;# 
  1301  0719                     	;# 
  1302  071A                     	;# 
  1303  071A                     	;# 
  1304  071B                     	;# 
  1305  071C                     	;# 
  1306  071D                     	;# 
  1307  0791                     	;# 
  1308  0791                     	;# 
  1309  0792                     	;# 
  1310  0793                     	;# 
  1311  0793                     	;# 
  1312  0794                     	;# 
  1313  0795                     	;# 
  1314  0795                     	;# 
  1315  0796                     	;# 
  1316  0797                     	;# 
  1317  0797                     	;# 
  1318  0798                     	;# 
  1319  0799                     	;# 
  1320  079A                     	;# 
  1321  080C                     	;# 
  1322  080C                     	;# 
  1323  080D                     	;# 
  1324  080E                     	;# 
  1325  080E                     	;# 
  1326  080F                     	;# 
  1327  0810                     	;# 
  1328  0810                     	;# 
  1329  0811                     	;# 
  1330  0812                     	;# 
  1331  0812                     	;# 
  1332  0813                     	;# 
  1333  0814                     	;# 
  1334  0815                     	;# 
  1335  0816                     	;# 
  1336  0817                     	;# 
  1337  0818                     	;# 
  1338  0819                     	;# 
  1339  081A                     	;# 
  1340  081A                     	;# 
  1341  081B                     	;# 
  1342  081C                     	;# 
  1343  081C                     	;# 
  1344  081D                     	;# 
  1345  088C                     	;# 
  1346  088D                     	;# 
  1347  088E                     	;# 
  1348  088F                     	;# 
  1349  088F                     	;# 
  1350  0890                     	;# 
  1351  0891                     	;# 
  1352  0892                     	;# 
  1353  0893                     	;# 
  1354  0893                     	;# 
  1355  0894                     	;# 
  1356  0895                     	;# 
  1357  0896                     	;# 
  1358  0897                     	;# 
  1359  0897                     	;# 
  1360  0898                     	;# 
  1361  0899                     	;# 
  1362  0D8C                     	;# 
  1363  0D8C                     	;# 
  1364  0D8D                     	;# 
  1365  0D8E                     	;# 
  1366  0D8F                     	;# 
  1367  0D8F                     	;# 
  1368  0D90                     	;# 
  1369  0D91                     	;# 
  1370  0D92                     	;# 
  1371  0D92                     	;# 
  1372  0D93                     	;# 
  1373  0D94                     	;# 
  1374  0D95                     	;# 
  1375  0D95                     	;# 
  1376  0D96                     	;# 
  1377  0D97                     	;# 
  1378  0D98                     	;# 
  1379  0D99                     	;# 
  1380  0D9A                     	;# 
  1381  0D9B                     	;# 
  1382  0D9C                     	;# 
  1383  0D9D                     	;# 
  1384  0D9E                     	;# 
  1385  0D9E                     	;# 
  1386  0D9F                     	;# 
  1387  0DA0                     	;# 
  1388  0DA1                     	;# 
  1389  0DA1                     	;# 
  1390  0DA2                     	;# 
  1391  0DA3                     	;# 
  1392  0DA4                     	;# 
  1393  0DA4                     	;# 
  1394  0DA5                     	;# 
  1395  0DA6                     	;# 
  1396  0DA7                     	;# 
  1397  0DA7                     	;# 
  1398  0DA8                     	;# 
  1399  0DA9                     	;# 
  1400  0DAA                     	;# 
  1401  0DAB                     	;# 
  1402  0DAC                     	;# 
  1403  0DAD                     	;# 
  1404  0DAE                     	;# 
  1405  0DAF                     	;# 
  1406  0E0F                     	;# 
  1407  0E10                     	;# 
  1408  0E11                     	;# 
  1409  0E12                     	;# 
  1410  0E13                     	;# 
  1411  0E14                     	;# 
  1412  0E15                     	;# 
  1413  0E16                     	;# 
  1414  0E17                     	;# 
  1415  0E18                     	;# 
  1416  0E19                     	;# 
  1417  0E1A                     	;# 
  1418  0E1B                     	;# 
  1419  0E1C                     	;# 
  1420  0E1D                     	;# 
  1421  0E1E                     	;# 
  1422  0E1F                     	;# 
  1423  0E20                     	;# 
  1424  0E21                     	;# 
  1425  0E22                     	;# 
  1426  0E23                     	;# 
  1427  0E24                     	;# 
  1428  0E25                     	;# 
  1429  0E26                     	;# 
  1430  0E27                     	;# 
  1431  0E28                     	;# 
  1432  0E29                     	;# 
  1433  0E2A                     	;# 
  1434  0E2B                     	;# 
  1435  0E2C                     	;# 
  1436  0E2D                     	;# 
  1437  0E2E                     	;# 
  1438  0E90                     	;# 
  1439  0E91                     	;# 
  1440  0E92                     	;# 
  1441  0E94                     	;# 
  1442  0E95                     	;# 
  1443  0E9C                     	;# 
  1444  0E9D                     	;# 
  1445  0E9E                     	;# 
  1446  0E9F                     	;# 
  1447  0EA0                     	;# 
  1448  0EA1                     	;# 
  1449  0EA2                     	;# 
  1450  0EA3                     	;# 
  1451  0EA4                     	;# 
  1452  0EA5                     	;# 
  1453  0EA6                     	;# 
  1454  0EA7                     	;# 
  1455  0F0F                     	;# 
  1456  0F10                     	;# 
  1457  0F11                     	;# 
  1458  0F12                     	;# 
  1459  0F13                     	;# 
  1460  0F14                     	;# 
  1461  0F15                     	;# 
  1462  0F16                     	;# 
  1463  0F17                     	;# 
  1464  0F18                     	;# 
  1465  0F19                     	;# 
  1466  0F1A                     	;# 
  1467  0F1B                     	;# 
  1468  0F1C                     	;# 
  1469  0F1D                     	;# 
  1470  0F1E                     	;# 
  1471  0F1F                     	;# 
  1472  0F20                     	;# 
  1473  0F21                     	;# 
  1474  0F22                     	;# 
  1475  0F23                     	;# 
  1476  0F24                     	;# 
  1477  0F25                     	;# 
  1478  0F26                     	;# 
  1479  0F27                     	;# 
  1480  0F28                     	;# 
  1481  0F29                     	;# 
  1482  0F2A                     	;# 
  1483  0F2B                     	;# 
  1484  0F2C                     	;# 
  1485  0F2D                     	;# 
  1486  0F2E                     	;# 
  1487  0F2F                     	;# 
  1488  0F30                     	;# 
  1489  0F31                     	;# 
  1490  0F32                     	;# 
  1491  0F33                     	;# 
  1492  0F34                     	;# 
  1493  0F35                     	;# 
  1494  0F36                     	;# 
  1495  0F37                     	;# 
  1496  0FE4                     	;# 
  1497  0FE5                     	;# 
  1498  0FE6                     	;# 
  1499  0FE7                     	;# 
  1500  0FE8                     	;# 
  1501  0FE9                     	;# 
  1502  0FEA                     	;# 
  1503  0FEB                     	;# 
  1504  0FED                     	;# 
  1505  0FEE                     	;# 
  1506  0FEF                     	;# 
  1507  0000                     	;# 
  1508  0001                     	;# 
  1509  0002                     	;# 
  1510  0003                     	;# 
  1511  0004                     	;# 
  1512  0005                     	;# 
  1513  0006                     	;# 
  1514  0007                     	;# 
  1515  0008                     	;# 
  1516  0009                     	;# 
  1517  000A                     	;# 
  1518  000B                     	;# 
  1519  000C                     	;# 
  1520  000D                     	;# 
  1521  000E                     	;# 
  1522  0010                     	;# 
  1523  0011                     	;# 
  1524  0012                     	;# 
  1525  0013                     	;# 
  1526  0014                     	;# 
  1527  0015                     	;# 
  1528  0016                     	;# 
  1529  0016                     	;# 
  1530  0017                     	;# 
  1531  0018                     	;# 
  1532  0019                     	;# 
  1533  001A                     	;# 
  1534  001A                     	;# 
  1535  001B                     	;# 
  1536  001B                     	;# 
  1537  001C                     	;# 
  1538  001D                     	;# 
  1539  001E                     	;# 
  1540  001F                     	;# 
  1541  008C                     	;# 
  1542  008D                     	;# 
  1543  008E                     	;# 
  1544  0090                     	;# 
  1545  0091                     	;# 
  1546  0092                     	;# 
  1547  0093                     	;# 
  1548  0094                     	;# 
  1549  0095                     	;# 
  1550  0096                     	;# 
  1551  0098                     	;# 
  1552  0099                     	;# 
  1553  009A                     	;# 
  1554  009B                     	;# 
  1555  009B                     	;# 
  1556  009C                     	;# 
  1557  009D                     	;# 
  1558  009E                     	;# 
  1559  009F                     	;# 
  1560  010C                     	;# 
  1561  010D                     	;# 
  1562  010E                     	;# 
  1563  0111                     	;# 
  1564  0112                     	;# 
  1565  0113                     	;# 
  1566  0114                     	;# 
  1567  0115                     	;# 
  1568  0116                     	;# 
  1569  0117                     	;# 
  1570  0118                     	;# 
  1571  0119                     	;# 
  1572  011C                     	;# 
  1573  018C                     	;# 
  1574  018D                     	;# 
  1575  018E                     	;# 
  1576  0191                     	;# 
  1577  0191                     	;# 
  1578  0192                     	;# 
  1579  0193                     	;# 
  1580  0193                     	;# 
  1581  0194                     	;# 
  1582  0195                     	;# 
  1583  0196                     	;# 
  1584  0197                     	;# 
  1585  0199                     	;# 
  1586  0199                     	;# 
  1587  0199                     	;# 
  1588  019A                     	;# 
  1589  019A                     	;# 
  1590  019A                     	;# 
  1591  019B                     	;# 
  1592  019B                     	;# 
  1593  019B                     	;# 
  1594  019B                     	;# 
  1595  019B                     	;# 
  1596  019C                     	;# 
  1597  019C                     	;# 
  1598  019C                     	;# 
  1599  019D                     	;# 
  1600  019D                     	;# 
  1601  019D                     	;# 
  1602  019E                     	;# 
  1603  019E                     	;# 
  1604  019E                     	;# 
  1605  019F                     	;# 
  1606  019F                     	;# 
  1607  019F                     	;# 
  1608  019F                     	;# 
  1609  019F                     	;# 
  1610  020C                     	;# 
  1611  020D                     	;# 
  1612  020E                     	;# 
  1613  0211                     	;# 
  1614  0211                     	;# 
  1615  0212                     	;# 
  1616  0212                     	;# 
  1617  0213                     	;# 
  1618  0213                     	;# 
  1619  0214                     	;# 
  1620  0214                     	;# 
  1621  0215                     	;# 
  1622  0215                     	;# 
  1623  0215                     	;# 
  1624  0215                     	;# 
  1625  0216                     	;# 
  1626  0216                     	;# 
  1627  0217                     	;# 
  1628  0217                     	;# 
  1629  028C                     	;# 
  1630  028D                     	;# 
  1631  028E                     	;# 
  1632  0291                     	;# 
  1633  0291                     	;# 
  1634  0292                     	;# 
  1635  0293                     	;# 
  1636  0294                     	;# 
  1637  0298                     	;# 
  1638  0298                     	;# 
  1639  0299                     	;# 
  1640  029A                     	;# 
  1641  029B                     	;# 
  1642  029E                     	;# 
  1643  030C                     	;# 
  1644  030D                     	;# 
  1645  030E                     	;# 
  1646  038C                     	;# 
  1647  038D                     	;# 
  1648  038E                     	;# 
  1649  0391                     	;# 
  1650  0392                     	;# 
  1651  0393                     	;# 
  1652  0394                     	;# 
  1653  0395                     	;# 
  1654  0396                     	;# 
  1655  0397                     	;# 
  1656  0398                     	;# 
  1657  0399                     	;# 
  1658  040E                     	;# 
  1659  0413                     	;# 
  1660  0413                     	;# 
  1661  0414                     	;# 
  1662  0414                     	;# 
  1663  0415                     	;# 
  1664  0416                     	;# 
  1665  0417                     	;# 
  1666  0418                     	;# 
  1667  041A                     	;# 
  1668  041A                     	;# 
  1669  041B                     	;# 
  1670  041B                     	;# 
  1671  041C                     	;# 
  1672  041D                     	;# 
  1673  041E                     	;# 
  1674  041F                     	;# 
  1675  0493                     	;# 
  1676  0494                     	;# 
  1677  0495                     	;# 
  1678  0496                     	;# 
  1679  049A                     	;# 
  1680  049B                     	;# 
  1681  049C                     	;# 
  1682  049D                     	;# 
  1683  058C                     	;# 
  1684  058C                     	;# 
  1685  058D                     	;# 
  1686  058E                     	;# 
  1687  058E                     	;# 
  1688  058F                     	;# 
  1689  0590                     	;# 
  1690  0590                     	;# 
  1691  0591                     	;# 
  1692  0592                     	;# 
  1693  0592                     	;# 
  1694  0593                     	;# 
  1695  0594                     	;# 
  1696  0594                     	;# 
  1697  0595                     	;# 
  1698  0596                     	;# 
  1699  0596                     	;# 
  1700  0597                     	;# 
  1701  0598                     	;# 
  1702  0599                     	;# 
  1703  059A                     	;# 
  1704  059B                     	;# 
  1705  059B                     	;# 
  1706  059C                     	;# 
  1707  059D                     	;# 
  1708  060C                     	;# 
  1709  060C                     	;# 
  1710  060D                     	;# 
  1711  060E                     	;# 
  1712  060F                     	;# 
  1713  060F                     	;# 
  1714  0610                     	;# 
  1715  0611                     	;# 
  1716  0612                     	;# 
  1717  0613                     	;# 
  1718  0614                     	;# 
  1719  0617                     	;# 
  1720  0618                     	;# 
  1721  0619                     	;# 
  1722  061A                     	;# 
  1723  061B                     	;# 
  1724  061C                     	;# 
  1725  0691                     	;# 
  1726  0692                     	;# 
  1727  0693                     	;# 
  1728  0694                     	;# 
  1729  0695                     	;# 
  1730  0696                     	;# 
  1731  0697                     	;# 
  1732  0699                     	;# 
  1733  069A                     	;# 
  1734  0711                     	;# 
  1735  0712                     	;# 
  1736  0713                     	;# 
  1737  0714                     	;# 
  1738  0715                     	;# 
  1739  0718                     	;# 
  1740  0718                     	;# 
  1741  0719                     	;# 
  1742  071A                     	;# 
  1743  071A                     	;# 
  1744  071B                     	;# 
  1745  071C                     	;# 
  1746  071D                     	;# 
  1747  0791                     	;# 
  1748  0791                     	;# 
  1749  0792                     	;# 
  1750  0793                     	;# 
  1751  0793                     	;# 
  1752  0794                     	;# 
  1753  0795                     	;# 
  1754  0795                     	;# 
  1755  0796                     	;# 
  1756  0797                     	;# 
  1757  0797                     	;# 
  1758  0798                     	;# 
  1759  0799                     	;# 
  1760  079A                     	;# 
  1761  080C                     	;# 
  1762  080C                     	;# 
  1763  080D                     	;# 
  1764  080E                     	;# 
  1765  080E                     	;# 
  1766  080F                     	;# 
  1767  0810                     	;# 
  1768  0810                     	;# 
  1769  0811                     	;# 
  1770  0812                     	;# 
  1771  0812                     	;# 
  1772  0813                     	;# 
  1773  0814                     	;# 
  1774  0815                     	;# 
  1775  0816                     	;# 
  1776  0817                     	;# 
  1777  0818                     	;# 
  1778  0819                     	;# 
  1779  081A                     	;# 
  1780  081A                     	;# 
  1781  081B                     	;# 
  1782  081C                     	;# 
  1783  081C                     	;# 
  1784  081D                     	;# 
  1785  088C                     	;# 
  1786  088D                     	;# 
  1787  088E                     	;# 
  1788  088F                     	;# 
  1789  088F                     	;# 
  1790  0890                     	;# 
  1791  0891                     	;# 
  1792  0892                     	;# 
  1793  0893                     	;# 
  1794  0893                     	;# 
  1795  0894                     	;# 
  1796  0895                     	;# 
  1797  0896                     	;# 
  1798  0897                     	;# 
  1799  0897                     	;# 
  1800  0898                     	;# 
  1801  0899                     	;# 
  1802  0D8C                     	;# 
  1803  0D8C                     	;# 
  1804  0D8D                     	;# 
  1805  0D8E                     	;# 
  1806  0D8F                     	;# 
  1807  0D8F                     	;# 
  1808  0D90                     	;# 
  1809  0D91                     	;# 
  1810  0D92                     	;# 
  1811  0D92                     	;# 
  1812  0D93                     	;# 
  1813  0D94                     	;# 
  1814  0D95                     	;# 
  1815  0D95                     	;# 
  1816  0D96                     	;# 
  1817  0D97                     	;# 
  1818  0D98                     	;# 
  1819  0D99                     	;# 
  1820  0D9A                     	;# 
  1821  0D9B                     	;# 
  1822  0D9C                     	;# 
  1823  0D9D                     	;# 
  1824  0D9E                     	;# 
  1825  0D9E                     	;# 
  1826  0D9F                     	;# 
  1827  0DA0                     	;# 
  1828  0DA1                     	;# 
  1829  0DA1                     	;# 
  1830  0DA2                     	;# 
  1831  0DA3                     	;# 
  1832  0DA4                     	;# 
  1833  0DA4                     	;# 
  1834  0DA5                     	;# 
  1835  0DA6                     	;# 
  1836  0DA7                     	;# 
  1837  0DA7                     	;# 
  1838  0DA8                     	;# 
  1839  0DA9                     	;# 
  1840  0DAA                     	;# 
  1841  0DAB                     	;# 
  1842  0DAC                     	;# 
  1843  0DAD                     	;# 
  1844  0DAE                     	;# 
  1845  0DAF                     	;# 
  1846  0E0F                     	;# 
  1847  0E10                     	;# 
  1848  0E11                     	;# 
  1849  0E12                     	;# 
  1850  0E13                     	;# 
  1851  0E14                     	;# 
  1852  0E15                     	;# 
  1853  0E16                     	;# 
  1854  0E17                     	;# 
  1855  0E18                     	;# 
  1856  0E19                     	;# 
  1857  0E1A                     	;# 
  1858  0E1B                     	;# 
  1859  0E1C                     	;# 
  1860  0E1D                     	;# 
  1861  0E1E                     	;# 
  1862  0E1F                     	;# 
  1863  0E20                     	;# 
  1864  0E21                     	;# 
  1865  0E22                     	;# 
  1866  0E23                     	;# 
  1867  0E24                     	;# 
  1868  0E25                     	;# 
  1869  0E26                     	;# 
  1870  0E27                     	;# 
  1871  0E28                     	;# 
  1872  0E29                     	;# 
  1873  0E2A                     	;# 
  1874  0E2B                     	;# 
  1875  0E2C                     	;# 
  1876  0E2D                     	;# 
  1877  0E2E                     	;# 
  1878  0E90                     	;# 
  1879  0E91                     	;# 
  1880  0E92                     	;# 
  1881  0E94                     	;# 
  1882  0E95                     	;# 
  1883  0E9C                     	;# 
  1884  0E9D                     	;# 
  1885  0E9E                     	;# 
  1886  0E9F                     	;# 
  1887  0EA0                     	;# 
  1888  0EA1                     	;# 
  1889  0EA2                     	;# 
  1890  0EA3                     	;# 
  1891  0EA4                     	;# 
  1892  0EA5                     	;# 
  1893  0EA6                     	;# 
  1894  0EA7                     	;# 
  1895  0F0F                     	;# 
  1896  0F10                     	;# 
  1897  0F11                     	;# 
  1898  0F12                     	;# 
  1899  0F13                     	;# 
  1900  0F14                     	;# 
  1901  0F15                     	;# 
  1902  0F16                     	;# 
  1903  0F17                     	;# 
  1904  0F18                     	;# 
  1905  0F19                     	;# 
  1906  0F1A                     	;# 
  1907  0F1B                     	;# 
  1908  0F1C                     	;# 
  1909  0F1D                     	;# 
  1910  0F1E                     	;# 
  1911  0F1F                     	;# 
  1912  0F20                     	;# 
  1913  0F21                     	;# 
  1914  0F22                     	;# 
  1915  0F23                     	;# 
  1916  0F24                     	;# 
  1917  0F25                     	;# 
  1918  0F26                     	;# 
  1919  0F27                     	;# 
  1920  0F28                     	;# 
  1921  0F29                     	;# 
  1922  0F2A                     	;# 
  1923  0F2B                     	;# 
  1924  0F2C                     	;# 
  1925  0F2D                     	;# 
  1926  0F2E                     	;# 
  1927  0F2F                     	;# 
  1928  0F30                     	;# 
  1929  0F31                     	;# 
  1930  0F32                     	;# 
  1931  0F33                     	;# 
  1932  0F34                     	;# 
  1933  0F35                     	;# 
  1934  0F36                     	;# 
  1935  0F37                     	;# 
  1936  0FE4                     	;# 
  1937  0FE5                     	;# 
  1938  0FE6                     	;# 
  1939  0FE7                     	;# 
  1940  0FE8                     	;# 
  1941  0FE9                     	;# 
  1942  0FEA                     	;# 
  1943  0FEB                     	;# 
  1944  0FED                     	;# 
  1945  0FEE                     	;# 
  1946  0FEF                     	;# 
  1947  0000                     	;# 
  1948  0001                     	;# 
  1949  0002                     	;# 
  1950  0003                     	;# 
  1951  0004                     	;# 
  1952  0005                     	;# 
  1953  0006                     	;# 
  1954  0007                     	;# 
  1955  0008                     	;# 
  1956  0009                     	;# 
  1957  000A                     	;# 
  1958  000B                     	;# 
  1959  000C                     	;# 
  1960  000D                     	;# 
  1961  000E                     	;# 
  1962  0010                     	;# 
  1963  0011                     	;# 
  1964  0012                     	;# 
  1965  0013                     	;# 
  1966  0014                     	;# 
  1967  0015                     	;# 
  1968  0016                     	;# 
  1969  0016                     	;# 
  1970  0017                     	;# 
  1971  0018                     	;# 
  1972  0019                     	;# 
  1973  001A                     	;# 
  1974  001A                     	;# 
  1975  001B                     	;# 
  1976  001B                     	;# 
  1977  001C                     	;# 
  1978  001D                     	;# 
  1979  001E                     	;# 
  1980  001F                     	;# 
  1981  008C                     	;# 
  1982  008D                     	;# 
  1983  008E                     	;# 
  1984  0090                     	;# 
  1985  0091                     	;# 
  1986  0092                     	;# 
  1987  0093                     	;# 
  1988  0094                     	;# 
  1989  0095                     	;# 
  1990  0096                     	;# 
  1991  0098                     	;# 
  1992  0099                     	;# 
  1993  009A                     	;# 
  1994  009B                     	;# 
  1995  009B                     	;# 
  1996  009C                     	;# 
  1997  009D                     	;# 
  1998  009E                     	;# 
  1999  009F                     	;# 
  2000  010C                     	;# 
  2001  010D                     	;# 
  2002  010E                     	;# 
  2003  0111                     	;# 
  2004  0112                     	;# 
  2005  0113                     	;# 
  2006  0114                     	;# 
  2007  0115                     	;# 
  2008  0116                     	;# 
  2009  0117                     	;# 
  2010  0118                     	;# 
  2011  0119                     	;# 
  2012  011C                     	;# 
  2013  018C                     	;# 
  2014  018D                     	;# 
  2015  018E                     	;# 
  2016  0191                     	;# 
  2017  0191                     	;# 
  2018  0192                     	;# 
  2019  0193                     	;# 
  2020  0193                     	;# 
  2021  0194                     	;# 
  2022  0195                     	;# 
  2023  0196                     	;# 
  2024  0197                     	;# 
  2025  0199                     	;# 
  2026  0199                     	;# 
  2027  0199                     	;# 
  2028  019A                     	;# 
  2029  019A                     	;# 
  2030  019A                     	;# 
  2031  019B                     	;# 
  2032  019B                     	;# 
  2033  019B                     	;# 
  2034  019B                     	;# 
  2035  019B                     	;# 
  2036  019C                     	;# 
  2037  019C                     	;# 
  2038  019C                     	;# 
  2039  019D                     	;# 
  2040  019D                     	;# 
  2041  019D                     	;# 
  2042  019E                     	;# 
  2043  019E                     	;# 
  2044  019E                     	;# 
  2045  019F                     	;# 
  2046  019F                     	;# 
  2047  019F                     	;# 
  2048  019F                     	;# 
  2049  019F                     	;# 
  2050  020C                     	;# 
  2051  020D                     	;# 
  2052  020E                     	;# 
  2053  0211                     	;# 
  2054  0211                     	;# 
  2055  0212                     	;# 
  2056  0212                     	;# 
  2057  0213                     	;# 
  2058  0213                     	;# 
  2059  0214                     	;# 
  2060  0214                     	;# 
  2061  0215                     	;# 
  2062  0215                     	;# 
  2063  0215                     	;# 
  2064  0215                     	;# 
  2065  0216                     	;# 
  2066  0216                     	;# 
  2067  0217                     	;# 
  2068  0217                     	;# 
  2069  028C                     	;# 
  2070  028D                     	;# 
  2071  028E                     	;# 
  2072  0291                     	;# 
  2073  0291                     	;# 
  2074  0292                     	;# 
  2075  0293                     	;# 
  2076  0294                     	;# 
  2077  0298                     	;# 
  2078  0298                     	;# 
  2079  0299                     	;# 
  2080  029A                     	;# 
  2081  029B                     	;# 
  2082  029E                     	;# 
  2083  030C                     	;# 
  2084  030D                     	;# 
  2085  030E                     	;# 
  2086  038C                     	;# 
  2087  038D                     	;# 
  2088  038E                     	;# 
  2089  0391                     	;# 
  2090  0392                     	;# 
  2091  0393                     	;# 
  2092  0394                     	;# 
  2093  0395                     	;# 
  2094  0396                     	;# 
  2095  0397                     	;# 
  2096  0398                     	;# 
  2097  0399                     	;# 
  2098  040E                     	;# 
  2099  0413                     	;# 
  2100  0413                     	;# 
  2101  0414                     	;# 
  2102  0414                     	;# 
  2103  0415                     	;# 
  2104  0416                     	;# 
  2105  0417                     	;# 
  2106  0418                     	;# 
  2107  041A                     	;# 
  2108  041A                     	;# 
  2109  041B                     	;# 
  2110  041B                     	;# 
  2111  041C                     	;# 
  2112  041D                     	;# 
  2113  041E                     	;# 
  2114  041F                     	;# 
  2115  0493                     	;# 
  2116  0494                     	;# 
  2117  0495                     	;# 
  2118  0496                     	;# 
  2119  049A                     	;# 
  2120  049B                     	;# 
  2121  049C                     	;# 
  2122  049D                     	;# 
  2123  058C                     	;# 
  2124  058C                     	;# 
  2125  058D                     	;# 
  2126  058E                     	;# 
  2127  058E                     	;# 
  2128  058F                     	;# 
  2129  0590                     	;# 
  2130  0590                     	;# 
  2131  0591                     	;# 
  2132  0592                     	;# 
  2133  0592                     	;# 
  2134  0593                     	;# 
  2135  0594                     	;# 
  2136  0594                     	;# 
  2137  0595                     	;# 
  2138  0596                     	;# 
  2139  0596                     	;# 
  2140  0597                     	;# 
  2141  0598                     	;# 
  2142  0599                     	;# 
  2143  059A                     	;# 
  2144  059B                     	;# 
  2145  059B                     	;# 
  2146  059C                     	;# 
  2147  059D                     	;# 
  2148  060C                     	;# 
  2149  060C                     	;# 
  2150  060D                     	;# 
  2151  060E                     	;# 
  2152  060F                     	;# 
  2153  060F                     	;# 
  2154  0610                     	;# 
  2155  0611                     	;# 
  2156  0612                     	;# 
  2157  0613                     	;# 
  2158  0614                     	;# 
  2159  0617                     	;# 
  2160  0618                     	;# 
  2161  0619                     	;# 
  2162  061A                     	;# 
  2163  061B                     	;# 
  2164  061C                     	;# 
  2165  0691                     	;# 
  2166  0692                     	;# 
  2167  0693                     	;# 
  2168  0694                     	;# 
  2169  0695                     	;# 
  2170  0696                     	;# 
  2171  0697                     	;# 
  2172  0699                     	;# 
  2173  069A                     	;# 
  2174  0711                     	;# 
  2175  0712                     	;# 
  2176  0713                     	;# 
  2177  0714                     	;# 
  2178  0715                     	;# 
  2179  0718                     	;# 
  2180  0718                     	;# 
  2181  0719                     	;# 
  2182  071A                     	;# 
  2183  071A                     	;# 
  2184  071B                     	;# 
  2185  071C                     	;# 
  2186  071D                     	;# 
  2187  0791                     	;# 
  2188  0791                     	;# 
  2189  0792                     	;# 
  2190  0793                     	;# 
  2191  0793                     	;# 
  2192  0794                     	;# 
  2193  0795                     	;# 
  2194  0795                     	;# 
  2195  0796                     	;# 
  2196  0797                     	;# 
  2197  0797                     	;# 
  2198  0798                     	;# 
  2199  0799                     	;# 
  2200  079A                     	;# 
  2201  080C                     	;# 
  2202  080C                     	;# 
  2203  080D                     	;# 
  2204  080E                     	;# 
  2205  080E                     	;# 
  2206  080F                     	;# 
  2207  0810                     	;# 
  2208  0810                     	;# 
  2209  0811                     	;# 
  2210  0812                     	;# 
  2211  0812                     	;# 
  2212  0813                     	;# 
  2213  0814                     	;# 
  2214  0815                     	;# 
  2215  0816                     	;# 
  2216  0817                     	;# 
  2217  0818                     	;# 
  2218  0819                     	;# 
  2219  081A                     	;# 
  2220  081A                     	;# 
  2221  081B                     	;# 
  2222  081C                     	;# 
  2223  081C                     	;# 
  2224  081D                     	;# 
  2225  088C                     	;# 
  2226  088D                     	;# 
  2227  088E                     	;# 
  2228  088F                     	;# 
  2229  088F                     	;# 
  2230  0890                     	;# 
  2231  0891                     	;# 
  2232  0892                     	;# 
  2233  0893                     	;# 
  2234  0893                     	;# 
  2235  0894                     	;# 
  2236  0895                     	;# 
  2237  0896                     	;# 
  2238  0897                     	;# 
  2239  0897                     	;# 
  2240  0898                     	;# 
  2241  0899                     	;# 
  2242  0D8C                     	;# 
  2243  0D8C                     	;# 
  2244  0D8D                     	;# 
  2245  0D8E                     	;# 
  2246  0D8F                     	;# 
  2247  0D8F                     	;# 
  2248  0D90                     	;# 
  2249  0D91                     	;# 
  2250  0D92                     	;# 
  2251  0D92                     	;# 
  2252  0D93                     	;# 
  2253  0D94                     	;# 
  2254  0D95                     	;# 
  2255  0D95                     	;# 
  2256  0D96                     	;# 
  2257  0D97                     	;# 
  2258  0D98                     	;# 
  2259  0D99                     	;# 
  2260  0D9A                     	;# 
  2261  0D9B                     	;# 
  2262  0D9C                     	;# 
  2263  0D9D                     	;# 
  2264  0D9E                     	;# 
  2265  0D9E                     	;# 
  2266  0D9F                     	;# 
  2267  0DA0                     	;# 
  2268  0DA1                     	;# 
  2269  0DA1                     	;# 
  2270  0DA2                     	;# 
  2271  0DA3                     	;# 
  2272  0DA4                     	;# 
  2273  0DA4                     	;# 
  2274  0DA5                     	;# 
  2275  0DA6                     	;# 
  2276  0DA7                     	;# 
  2277  0DA7                     	;# 
  2278  0DA8                     	;# 
  2279  0DA9                     	;# 
  2280  0DAA                     	;# 
  2281  0DAB                     	;# 
  2282  0DAC                     	;# 
  2283  0DAD                     	;# 
  2284  0DAE                     	;# 
  2285  0DAF                     	;# 
  2286  0E0F                     	;# 
  2287  0E10                     	;# 
  2288  0E11                     	;# 
  2289  0E12                     	;# 
  2290  0E13                     	;# 
  2291  0E14                     	;# 
  2292  0E15                     	;# 
  2293  0E16                     	;# 
  2294  0E17                     	;# 
  2295  0E18                     	;# 
  2296  0E19                     	;# 
  2297  0E1A                     	;# 
  2298  0E1B                     	;# 
  2299  0E1C                     	;# 
  2300  0E1D                     	;# 
  2301  0E1E                     	;# 
  2302  0E1F                     	;# 
  2303  0E20                     	;# 
  2304  0E21                     	;# 
  2305  0E22                     	;# 
  2306  0E23                     	;# 
  2307  0E24                     	;# 
  2308  0E25                     	;# 
  2309  0E26                     	;# 
  2310  0E27                     	;# 
  2311  0E28                     	;# 
  2312  0E29                     	;# 
  2313  0E2A                     	;# 
  2314  0E2B                     	;# 
  2315  0E2C                     	;# 
  2316  0E2D                     	;# 
  2317  0E2E                     	;# 
  2318  0E90                     	;# 
  2319  0E91                     	;# 
  2320  0E92                     	;# 
  2321  0E94                     	;# 
  2322  0E95                     	;# 
  2323  0E9C                     	;# 
  2324  0E9D                     	;# 
  2325  0E9E                     	;# 
  2326  0E9F                     	;# 
  2327  0EA0                     	;# 
  2328  0EA1                     	;# 
  2329  0EA2                     	;# 
  2330  0EA3                     	;# 
  2331  0EA4                     	;# 
  2332  0EA5                     	;# 
  2333  0EA6                     	;# 
  2334  0EA7                     	;# 
  2335  0F0F                     	;# 
  2336  0F10                     	;# 
  2337  0F11                     	;# 
  2338  0F12                     	;# 
  2339  0F13                     	;# 
  2340  0F14                     	;# 
  2341  0F15                     	;# 
  2342  0F16                     	;# 
  2343  0F17                     	;# 
  2344  0F18                     	;# 
  2345  0F19                     	;# 
  2346  0F1A                     	;# 
  2347  0F1B                     	;# 
  2348  0F1C                     	;# 
  2349  0F1D                     	;# 
  2350  0F1E                     	;# 
  2351  0F1F                     	;# 
  2352  0F20                     	;# 
  2353  0F21                     	;# 
  2354  0F22                     	;# 
  2355  0F23                     	;# 
  2356  0F24                     	;# 
  2357  0F25                     	;# 
  2358  0F26                     	;# 
  2359  0F27                     	;# 
  2360  0F28                     	;# 
  2361  0F29                     	;# 
  2362  0F2A                     	;# 
  2363  0F2B                     	;# 
  2364  0F2C                     	;# 
  2365  0F2D                     	;# 
  2366  0F2E                     	;# 
  2367  0F2F                     	;# 
  2368  0F30                     	;# 
  2369  0F31                     	;# 
  2370  0F32                     	;# 
  2371  0F33                     	;# 
  2372  0F34                     	;# 
  2373  0F35                     	;# 
  2374  0F36                     	;# 
  2375  0F37                     	;# 
  2376  0FE4                     	;# 
  2377  0FE5                     	;# 
  2378  0FE6                     	;# 
  2379  0FE7                     	;# 
  2380  0FE8                     	;# 
  2381  0FE9                     	;# 
  2382  0FEA                     	;# 
  2383  0FEB                     	;# 
  2384  0FED                     	;# 
  2385  0FEE                     	;# 
  2386  0FEF                     	;# 
  2387  0000                     	;# 
  2388  0001                     	;# 
  2389  0002                     	;# 
  2390  0003                     	;# 
  2391  0004                     	;# 
  2392  0005                     	;# 
  2393  0006                     	;# 
  2394  0007                     	;# 
  2395  0008                     	;# 
  2396  0009                     	;# 
  2397  000A                     	;# 
  2398  000B                     	;# 
  2399  000C                     	;# 
  2400  000D                     	;# 
  2401  000E                     	;# 
  2402  0010                     	;# 
  2403  0011                     	;# 
  2404  0012                     	;# 
  2405  0013                     	;# 
  2406  0014                     	;# 
  2407  0015                     	;# 
  2408  0016                     	;# 
  2409  0016                     	;# 
  2410  0017                     	;# 
  2411  0018                     	;# 
  2412  0019                     	;# 
  2413  001A                     	;# 
  2414  001A                     	;# 
  2415  001B                     	;# 
  2416  001B                     	;# 
  2417  001C                     	;# 
  2418  001D                     	;# 
  2419  001E                     	;# 
  2420  001F                     	;# 
  2421  008C                     	;# 
  2422  008D                     	;# 
  2423  008E                     	;# 
  2424  0090                     	;# 
  2425  0091                     	;# 
  2426  0092                     	;# 
  2427  0093                     	;# 
  2428  0094                     	;# 
  2429  0095                     	;# 
  2430  0096                     	;# 
  2431  0098                     	;# 
  2432  0099                     	;# 
  2433  009A                     	;# 
  2434  009B                     	;# 
  2435  009B                     	;# 
  2436  009C                     	;# 
  2437  009D                     	;# 
  2438  009E                     	;# 
  2439  009F                     	;# 
  2440  010C                     	;# 
  2441  010D                     	;# 
  2442  010E                     	;# 
  2443  0111                     	;# 
  2444  0112                     	;# 
  2445  0113                     	;# 
  2446  0114                     	;# 
  2447  0115                     	;# 
  2448  0116                     	;# 
  2449  0117                     	;# 
  2450  0118                     	;# 
  2451  0119                     	;# 
  2452  011C                     	;# 
  2453  018C                     	;# 
  2454  018D                     	;# 
  2455  018E                     	;# 
  2456  0191                     	;# 
  2457  0191                     	;# 
  2458  0192                     	;# 
  2459  0193                     	;# 
  2460  0193                     	;# 
  2461  0194                     	;# 
  2462  0195                     	;# 
  2463  0196                     	;# 
  2464  0197                     	;# 
  2465  0199                     	;# 
  2466  0199                     	;# 
  2467  0199                     	;# 
  2468  019A                     	;# 
  2469  019A                     	;# 
  2470  019A                     	;# 
  2471  019B                     	;# 
  2472  019B                     	;# 
  2473  019B                     	;# 
  2474  019B                     	;# 
  2475  019B                     	;# 
  2476  019C                     	;# 
  2477  019C                     	;# 
  2478  019C                     	;# 
  2479  019D                     	;# 
  2480  019D                     	;# 
  2481  019D                     	;# 
  2482  019E                     	;# 
  2483  019E                     	;# 
  2484  019E                     	;# 
  2485  019F                     	;# 
  2486  019F                     	;# 
  2487  019F                     	;# 
  2488  019F                     	;# 
  2489  019F                     	;# 
  2490  020C                     	;# 
  2491  020D                     	;# 
  2492  020E                     	;# 
  2493  0211                     	;# 
  2494  0211                     	;# 
  2495  0212                     	;# 
  2496  0212                     	;# 
  2497  0213                     	;# 
  2498  0213                     	;# 
  2499  0214                     	;# 
  2500  0214                     	;# 
  2501  0215                     	;# 
  2502  0215                     	;# 
  2503  0215                     	;# 
  2504  0215                     	;# 
  2505  0216                     	;# 
  2506  0216                     	;# 
  2507  0217                     	;# 
  2508  0217                     	;# 
  2509  028C                     	;# 
  2510  028D                     	;# 
  2511  028E                     	;# 
  2512  0291                     	;# 
  2513  0291                     	;# 
  2514  0292                     	;# 
  2515  0293                     	;# 
  2516  0294                     	;# 
  2517  0298                     	;# 
  2518  0298                     	;# 
  2519  0299                     	;# 
  2520  029A                     	;# 
  2521  029B                     	;# 
  2522  029E                     	;# 
  2523  030C                     	;# 
  2524  030D                     	;# 
  2525  030E                     	;# 
  2526  038C                     	;# 
  2527  038D                     	;# 
  2528  038E                     	;# 
  2529  0391                     	;# 
  2530  0392                     	;# 
  2531  0393                     	;# 
  2532  0394                     	;# 
  2533  0395                     	;# 
  2534  0396                     	;# 
  2535  0397                     	;# 
  2536  0398                     	;# 
  2537  0399                     	;# 
  2538  040E                     	;# 
  2539  0413                     	;# 
  2540  0413                     	;# 
  2541  0414                     	;# 
  2542  0414                     	;# 
  2543  0415                     	;# 
  2544  0416                     	;# 
  2545  0417                     	;# 
  2546  0418                     	;# 
  2547  041A                     	;# 
  2548  041A                     	;# 
  2549  041B                     	;# 
  2550  041B                     	;# 
  2551  041C                     	;# 
  2552  041D                     	;# 
  2553  041E                     	;# 
  2554  041F                     	;# 
  2555  0493                     	;# 
  2556  0494                     	;# 
  2557  0495                     	;# 
  2558  0496                     	;# 
  2559  049A                     	;# 
  2560  049B                     	;# 
  2561  049C                     	;# 
  2562  049D                     	;# 
  2563  058C                     	;# 
  2564  058C                     	;# 
  2565  058D                     	;# 
  2566  058E                     	;# 
  2567  058E                     	;# 
  2568  058F                     	;# 
  2569  0590                     	;# 
  2570  0590                     	;# 
  2571  0591                     	;# 
  2572  0592                     	;# 
  2573  0592                     	;# 
  2574  0593                     	;# 
  2575  0594                     	;# 
  2576  0594                     	;# 
  2577  0595                     	;# 
  2578  0596                     	;# 
  2579  0596                     	;# 
  2580  0597                     	;# 
  2581  0598                     	;# 
  2582  0599                     	;# 
  2583  059A                     	;# 
  2584  059B                     	;# 
  2585  059B                     	;# 
  2586  059C                     	;# 
  2587  059D                     	;# 
  2588  060C                     	;# 
  2589  060C                     	;# 
  2590  060D                     	;# 
  2591  060E                     	;# 
  2592  060F                     	;# 
  2593  060F                     	;# 
  2594  0610                     	;# 
  2595  0611                     	;# 
  2596  0612                     	;# 
  2597  0613                     	;# 
  2598  0614                     	;# 
  2599  0617                     	;# 
  2600  0618                     	;# 
  2601  0619                     	;# 
  2602  061A                     	;# 
  2603  061B                     	;# 
  2604  061C                     	;# 
  2605  0691                     	;# 
  2606  0692                     	;# 
  2607  0693                     	;# 
  2608  0694                     	;# 
  2609  0695                     	;# 
  2610  0696                     	;# 
  2611  0697                     	;# 
  2612  0699                     	;# 
  2613  069A                     	;# 
  2614  0711                     	;# 
  2615  0712                     	;# 
  2616  0713                     	;# 
  2617  0714                     	;# 
  2618  0715                     	;# 
  2619  0718                     	;# 
  2620  0718                     	;# 
  2621  0719                     	;# 
  2622  071A                     	;# 
  2623  071A                     	;# 
  2624  071B                     	;# 
  2625  071C                     	;# 
  2626  071D                     	;# 
  2627  0791                     	;# 
  2628  0791                     	;# 
  2629  0792                     	;# 
  2630  0793                     	;# 
  2631  0793                     	;# 
  2632  0794                     	;# 
  2633  0795                     	;# 
  2634  0795                     	;# 
  2635  0796                     	;# 
  2636  0797                     	;# 
  2637  0797                     	;# 
  2638  0798                     	;# 
  2639  0799                     	;# 
  2640  079A                     	;# 
  2641  080C                     	;# 
  2642  080C                     	;# 
  2643  080D                     	;# 
  2644  080E                     	;# 
  2645  080E                     	;# 
  2646  080F                     	;# 
  2647  0810                     	;# 
  2648  0810                     	;# 
  2649  0811                     	;# 
  2650  0812                     	;# 
  2651  0812                     	;# 
  2652  0813                     	;# 
  2653  0814                     	;# 
  2654  0815                     	;# 
  2655  0816                     	;# 
  2656  0817                     	;# 
  2657  0818                     	;# 
  2658  0819                     	;# 
  2659  081A                     	;# 
  2660  081A                     	;# 
  2661  081B                     	;# 
  2662  081C                     	;# 
  2663  081C                     	;# 
  2664  081D                     	;# 
  2665  088C                     	;# 
  2666  088D                     	;# 
  2667  088E                     	;# 
  2668  088F                     	;# 
  2669  088F                     	;# 
  2670  0890                     	;# 
  2671  0891                     	;# 
  2672  0892                     	;# 
  2673  0893                     	;# 
  2674  0893                     	;# 
  2675  0894                     	;# 
  2676  0895                     	;# 
  2677  0896                     	;# 
  2678  0897                     	;# 
  2679  0897                     	;# 
  2680  0898                     	;# 
  2681  0899                     	;# 
  2682  0D8C                     	;# 
  2683  0D8C                     	;# 
  2684  0D8D                     	;# 
  2685  0D8E                     	;# 
  2686  0D8F                     	;# 
  2687  0D8F                     	;# 
  2688  0D90                     	;# 
  2689  0D91                     	;# 
  2690  0D92                     	;# 
  2691  0D92                     	;# 
  2692  0D93                     	;# 
  2693  0D94                     	;# 
  2694  0D95                     	;# 
  2695  0D95                     	;# 
  2696  0D96                     	;# 
  2697  0D97                     	;# 
  2698  0D98                     	;# 
  2699  0D99                     	;# 
  2700  0D9A                     	;# 
  2701  0D9B                     	;# 
  2702  0D9C                     	;# 
  2703  0D9D                     	;# 
  2704  0D9E                     	;# 
  2705  0D9E                     	;# 
  2706  0D9F                     	;# 
  2707  0DA0                     	;# 
  2708  0DA1                     	;# 
  2709  0DA1                     	;# 
  2710  0DA2                     	;# 
  2711  0DA3                     	;# 
  2712  0DA4                     	;# 
  2713  0DA4                     	;# 
  2714  0DA5                     	;# 
  2715  0DA6                     	;# 
  2716  0DA7                     	;# 
  2717  0DA7                     	;# 
  2718  0DA8                     	;# 
  2719  0DA9                     	;# 
  2720  0DAA                     	;# 
  2721  0DAB                     	;# 
  2722  0DAC                     	;# 
  2723  0DAD                     	;# 
  2724  0DAE                     	;# 
  2725  0DAF                     	;# 
  2726  0E0F                     	;# 
  2727  0E10                     	;# 
  2728  0E11                     	;# 
  2729  0E12                     	;# 
  2730  0E13                     	;# 
  2731  0E14                     	;# 
  2732  0E15                     	;# 
  2733  0E16                     	;# 
  2734  0E17                     	;# 
  2735  0E18                     	;# 
  2736  0E19                     	;# 
  2737  0E1A                     	;# 
  2738  0E1B                     	;# 
  2739  0E1C                     	;# 
  2740  0E1D                     	;# 
  2741  0E1E                     	;# 
  2742  0E1F                     	;# 
  2743  0E20                     	;# 
  2744  0E21                     	;# 
  2745  0E22                     	;# 
  2746  0E23                     	;# 
  2747  0E24                     	;# 
  2748  0E25                     	;# 
  2749  0E26                     	;# 
  2750  0E27                     	;# 
  2751  0E28                     	;# 
  2752  0E29                     	;# 
  2753  0E2A                     	;# 
  2754  0E2B                     	;# 
  2755  0E2C                     	;# 
  2756  0E2D                     	;# 
  2757  0E2E                     	;# 
  2758  0E90                     	;# 
  2759  0E91                     	;# 
  2760  0E92                     	;# 
  2761  0E94                     	;# 
  2762  0E95                     	;# 
  2763  0E9C                     	;# 
  2764  0E9D                     	;# 
  2765  0E9E                     	;# 
  2766  0E9F                     	;# 
  2767  0EA0                     	;# 
  2768  0EA1                     	;# 
  2769  0EA2                     	;# 
  2770  0EA3                     	;# 
  2771  0EA4                     	;# 
  2772  0EA5                     	;# 
  2773  0EA6                     	;# 
  2774  0EA7                     	;# 
  2775  0F0F                     	;# 
  2776  0F10                     	;# 
  2777  0F11                     	;# 
  2778  0F12                     	;# 
  2779  0F13                     	;# 
  2780  0F14                     	;# 
  2781  0F15                     	;# 
  2782  0F16                     	;# 
  2783  0F17                     	;# 
  2784  0F18                     	;# 
  2785  0F19                     	;# 
  2786  0F1A                     	;# 
  2787  0F1B                     	;# 
  2788  0F1C                     	;# 
  2789  0F1D                     	;# 
  2790  0F1E                     	;# 
  2791  0F1F                     	;# 
  2792  0F20                     	;# 
  2793  0F21                     	;# 
  2794  0F22                     	;# 
  2795  0F23                     	;# 
  2796  0F24                     	;# 
  2797  0F25                     	;# 
  2798  0F26                     	;# 
  2799  0F27                     	;# 
  2800  0F28                     	;# 
  2801  0F29                     	;# 
  2802  0F2A                     	;# 
  2803  0F2B                     	;# 
  2804  0F2C                     	;# 
  2805  0F2D                     	;# 
  2806  0F2E                     	;# 
  2807  0F2F                     	;# 
  2808  0F30                     	;# 
  2809  0F31                     	;# 
  2810  0F32                     	;# 
  2811  0F33                     	;# 
  2812  0F34                     	;# 
  2813  0F35                     	;# 
  2814  0F36                     	;# 
  2815  0F37                     	;# 
  2816  0FE4                     	;# 
  2817  0FE5                     	;# 
  2818  0FE6                     	;# 
  2819  0FE7                     	;# 
  2820  0FE8                     	;# 
  2821  0FE9                     	;# 
  2822  0FEA                     	;# 
  2823  0FEB                     	;# 
  2824  0FED                     	;# 
  2825  0FEE                     	;# 
  2826  0FEF                     	;# 
  2827  0000                     	;# 
  2828  0001                     	;# 
  2829  0002                     	;# 
  2830  0003                     	;# 
  2831  0004                     	;# 
  2832  0005                     	;# 
  2833  0006                     	;# 
  2834  0007                     	;# 
  2835  0008                     	;# 
  2836  0009                     	;# 
  2837  000A                     	;# 
  2838  000B                     	;# 
  2839  000C                     	;# 
  2840  000D                     	;# 
  2841  000E                     	;# 
  2842  0010                     	;# 
  2843  0011                     	;# 
  2844  0012                     	;# 
  2845  0013                     	;# 
  2846  0014                     	;# 
  2847  0015                     	;# 
  2848  0016                     	;# 
  2849  0016                     	;# 
  2850  0017                     	;# 
  2851  0018                     	;# 
  2852  0019                     	;# 
  2853  001A                     	;# 
  2854  001A                     	;# 
  2855  001B                     	;# 
  2856  001B                     	;# 
  2857  001C                     	;# 
  2858  001D                     	;# 
  2859  001E                     	;# 
  2860  001F                     	;# 
  2861  008C                     	;# 
  2862  008D                     	;# 
  2863  008E                     	;# 
  2864  0090                     	;# 
  2865  0091                     	;# 
  2866  0092                     	;# 
  2867  0093                     	;# 
  2868  0094                     	;# 
  2869  0095                     	;# 
  2870  0096                     	;# 
  2871  0098                     	;# 
  2872  0099                     	;# 
  2873  009A                     	;# 
  2874  009B                     	;# 
  2875  009B                     	;# 
  2876  009C                     	;# 
  2877  009D                     	;# 
  2878  009E                     	;# 
  2879  009F                     	;# 
  2880  010C                     	;# 
  2881  010D                     	;# 
  2882  010E                     	;# 
  2883  0111                     	;# 
  2884  0112                     	;# 
  2885  0113                     	;# 
  2886  0114                     	;# 
  2887  0115                     	;# 
  2888  0116                     	;# 
  2889  0117                     	;# 
  2890  0118                     	;# 
  2891  0119                     	;# 
  2892  011C                     	;# 
  2893  018C                     	;# 
  2894  018D                     	;# 
  2895  018E                     	;# 
  2896  0191                     	;# 
  2897  0191                     	;# 
  2898  0192                     	;# 
  2899  0193                     	;# 
  2900  0193                     	;# 
  2901  0194                     	;# 
  2902  0195                     	;# 
  2903  0196                     	;# 
  2904  0197                     	;# 
  2905  0199                     	;# 
  2906  0199                     	;# 
  2907  0199                     	;# 
  2908  019A                     	;# 
  2909  019A                     	;# 
  2910  019A                     	;# 
  2911  019B                     	;# 
  2912  019B                     	;# 
  2913  019B                     	;# 
  2914  019B                     	;# 
  2915  019B                     	;# 
  2916  019C                     	;# 
  2917  019C                     	;# 
  2918  019C                     	;# 
  2919  019D                     	;# 
  2920  019D                     	;# 
  2921  019D                     	;# 
  2922  019E                     	;# 
  2923  019E                     	;# 
  2924  019E                     	;# 
  2925  019F                     	;# 
  2926  019F                     	;# 
  2927  019F                     	;# 
  2928  019F                     	;# 
  2929  019F                     	;# 
  2930  020C                     	;# 
  2931  020D                     	;# 
  2932  020E                     	;# 
  2933  0211                     	;# 
  2934  0211                     	;# 
  2935  0212                     	;# 
  2936  0212                     	;# 
  2937  0213                     	;# 
  2938  0213                     	;# 
  2939  0214                     	;# 
  2940  0214                     	;# 
  2941  0215                     	;# 
  2942  0215                     	;# 
  2943  0215                     	;# 
  2944  0215                     	;# 
  2945  0216                     	;# 
  2946  0216                     	;# 
  2947  0217                     	;# 
  2948  0217                     	;# 
  2949  028C                     	;# 
  2950  028D                     	;# 
  2951  028E                     	;# 
  2952  0291                     	;# 
  2953  0291                     	;# 
  2954  0292                     	;# 
  2955  0293                     	;# 
  2956  0294                     	;# 
  2957  0298                     	;# 
  2958  0298                     	;# 
  2959  0299                     	;# 
  2960  029A                     	;# 
  2961  029B                     	;# 
  2962  029E                     	;# 
  2963  030C                     	;# 
  2964  030D                     	;# 
  2965  030E                     	;# 
  2966  038C                     	;# 
  2967  038D                     	;# 
  2968  038E                     	;# 
  2969  0391                     	;# 
  2970  0392                     	;# 
  2971  0393                     	;# 
  2972  0394                     	;# 
  2973  0395                     	;# 
  2974  0396                     	;# 
  2975  0397                     	;# 
  2976  0398                     	;# 
  2977  0399                     	;# 
  2978  040E                     	;# 
  2979  0413                     	;# 
  2980  0413                     	;# 
  2981  0414                     	;# 
  2982  0414                     	;# 
  2983  0415                     	;# 
  2984  0416                     	;# 
  2985  0417                     	;# 
  2986  0418                     	;# 
  2987  041A                     	;# 
  2988  041A                     	;# 
  2989  041B                     	;# 
  2990  041B                     	;# 
  2991  041C                     	;# 
  2992  041D                     	;# 
  2993  041E                     	;# 
  2994  041F                     	;# 
  2995  0493                     	;# 
  2996  0494                     	;# 
  2997  0495                     	;# 
  2998  0496                     	;# 
  2999  049A                     	;# 
  3000  049B                     	;# 
  3001  049C                     	;# 
  3002  049D                     	;# 
  3003  058C                     	;# 
  3004  058C                     	;# 
  3005  058D                     	;# 
  3006  058E                     	;# 
  3007  058E                     	;# 
  3008  058F                     	;# 
  3009  0590                     	;# 
  3010  0590                     	;# 
  3011  0591                     	;# 
  3012  0592                     	;# 
  3013  0592                     	;# 
  3014  0593                     	;# 
  3015  0594                     	;# 
  3016  0594                     	;# 
  3017  0595                     	;# 
  3018  0596                     	;# 
  3019  0596                     	;# 
  3020  0597                     	;# 
  3021  0598                     	;# 
  3022  0599                     	;# 
  3023  059A                     	;# 
  3024  059B                     	;# 
  3025  059B                     	;# 
  3026  059C                     	;# 
  3027  059D                     	;# 
  3028  060C                     	;# 
  3029  060C                     	;# 
  3030  060D                     	;# 
  3031  060E                     	;# 
  3032  060F                     	;# 
  3033  060F                     	;# 
  3034  0610                     	;# 
  3035  0611                     	;# 
  3036  0612                     	;# 
  3037  0613                     	;# 
  3038  0614                     	;# 
  3039  0617                     	;# 
  3040  0618                     	;# 
  3041  0619                     	;# 
  3042  061A                     	;# 
  3043  061B                     	;# 
  3044  061C                     	;# 
  3045  0691                     	;# 
  3046  0692                     	;# 
  3047  0693                     	;# 
  3048  0694                     	;# 
  3049  0695                     	;# 
  3050  0696                     	;# 
  3051  0697                     	;# 
  3052  0699                     	;# 
  3053  069A                     	;# 
  3054  0711                     	;# 
  3055  0712                     	;# 
  3056  0713                     	;# 
  3057  0714                     	;# 
  3058  0715                     	;# 
  3059  0718                     	;# 
  3060  0718                     	;# 
  3061  0719                     	;# 
  3062  071A                     	;# 
  3063  071A                     	;# 
  3064  071B                     	;# 
  3065  071C                     	;# 
  3066  071D                     	;# 
  3067  0791                     	;# 
  3068  0791                     	;# 
  3069  0792                     	;# 
  3070  0793                     	;# 
  3071  0793                     	;# 
  3072  0794                     	;# 
  3073  0795                     	;# 
  3074  0795                     	;# 
  3075  0796                     	;# 
  3076  0797                     	;# 
  3077  0797                     	;# 
  3078  0798                     	;# 
  3079  0799                     	;# 
  3080  079A                     	;# 
  3081  080C                     	;# 
  3082  080C                     	;# 
  3083  080D                     	;# 
  3084  080E                     	;# 
  3085  080E                     	;# 
  3086  080F                     	;# 
  3087  0810                     	;# 
  3088  0810                     	;# 
  3089  0811                     	;# 
  3090  0812                     	;# 
  3091  0812                     	;# 
  3092  0813                     	;# 
  3093  0814                     	;# 
  3094  0815                     	;# 
  3095  0816                     	;# 
  3096  0817                     	;# 
  3097  0818                     	;# 
  3098  0819                     	;# 
  3099  081A                     	;# 
  3100  081A                     	;# 
  3101  081B                     	;# 
  3102  081C                     	;# 
  3103  081C                     	;# 
  3104  081D                     	;# 
  3105  088C                     	;# 
  3106  088D                     	;# 
  3107  088E                     	;# 
  3108  088F                     	;# 
  3109  088F                     	;# 
  3110  0890                     	;# 
  3111  0891                     	;# 
  3112  0892                     	;# 
  3113  0893                     	;# 
  3114  0893                     	;# 
  3115  0894                     	;# 
  3116  0895                     	;# 
  3117  0896                     	;# 
  3118  0897                     	;# 
  3119  0897                     	;# 
  3120  0898                     	;# 
  3121  0899                     	;# 
  3122  0D8C                     	;# 
  3123  0D8C                     	;# 
  3124  0D8D                     	;# 
  3125  0D8E                     	;# 
  3126  0D8F                     	;# 
  3127  0D8F                     	;# 
  3128  0D90                     	;# 
  3129  0D91                     	;# 
  3130  0D92                     	;# 
  3131  0D92                     	;# 
  3132  0D93                     	;# 
  3133  0D94                     	;# 
  3134  0D95                     	;# 
  3135  0D95                     	;# 
  3136  0D96                     	;# 
  3137  0D97                     	;# 
  3138  0D98                     	;# 
  3139  0D99                     	;# 
  3140  0D9A                     	;# 
  3141  0D9B                     	;# 
  3142  0D9C                     	;# 
  3143  0D9D                     	;# 
  3144  0D9E                     	;# 
  3145  0D9E                     	;# 
  3146  0D9F                     	;# 
  3147  0DA0                     	;# 
  3148  0DA1                     	;# 
  3149  0DA1                     	;# 
  3150  0DA2                     	;# 
  3151  0DA3                     	;# 
  3152  0DA4                     	;# 
  3153  0DA4                     	;# 
  3154  0DA5                     	;# 
  3155  0DA6                     	;# 
  3156  0DA7                     	;# 
  3157  0DA7                     	;# 
  3158  0DA8                     	;# 
  3159  0DA9                     	;# 
  3160  0DAA                     	;# 
  3161  0DAB                     	;# 
  3162  0DAC                     	;# 
  3163  0DAD                     	;# 
  3164  0DAE                     	;# 
  3165  0DAF                     	;# 
  3166  0E0F                     	;# 
  3167  0E10                     	;# 
  3168  0E11                     	;# 
  3169  0E12                     	;# 
  3170  0E13                     	;# 
  3171  0E14                     	;# 
  3172  0E15                     	;# 
  3173  0E16                     	;# 
  3174  0E17                     	;# 
  3175  0E18                     	;# 
  3176  0E19                     	;# 
  3177  0E1A                     	;# 
  3178  0E1B                     	;# 
  3179  0E1C                     	;# 
  3180  0E1D                     	;# 
  3181  0E1E                     	;# 
  3182  0E1F                     	;# 
  3183  0E20                     	;# 
  3184  0E21                     	;# 
  3185  0E22                     	;# 
  3186  0E23                     	;# 
  3187  0E24                     	;# 
  3188  0E25                     	;# 
  3189  0E26                     	;# 
  3190  0E27                     	;# 
  3191  0E28                     	;# 
  3192  0E29                     	;# 
  3193  0E2A                     	;# 
  3194  0E2B                     	;# 
  3195  0E2C                     	;# 
  3196  0E2D                     	;# 
  3197  0E2E                     	;# 
  3198  0E90                     	;# 
  3199  0E91                     	;# 
  3200  0E92                     	;# 
  3201  0E94                     	;# 
  3202  0E95                     	;# 
  3203  0E9C                     	;# 
  3204  0E9D                     	;# 
  3205  0E9E                     	;# 
  3206  0E9F                     	;# 
  3207  0EA0                     	;# 
  3208  0EA1                     	;# 
  3209  0EA2                     	;# 
  3210  0EA3                     	;# 
  3211  0EA4                     	;# 
  3212  0EA5                     	;# 
  3213  0EA6                     	;# 
  3214  0EA7                     	;# 
  3215  0F0F                     	;# 
  3216  0F10                     	;# 
  3217  0F11                     	;# 
  3218  0F12                     	;# 
  3219  0F13                     	;# 
  3220  0F14                     	;# 
  3221  0F15                     	;# 
  3222  0F16                     	;# 
  3223  0F17                     	;# 
  3224  0F18                     	;# 
  3225  0F19                     	;# 
  3226  0F1A                     	;# 
  3227  0F1B                     	;# 
  3228  0F1C                     	;# 
  3229  0F1D                     	;# 
  3230  0F1E                     	;# 
  3231  0F1F                     	;# 
  3232  0F20                     	;# 
  3233  0F21                     	;# 
  3234  0F22                     	;# 
  3235  0F23                     	;# 
  3236  0F24                     	;# 
  3237  0F25                     	;# 
  3238  0F26                     	;# 
  3239  0F27                     	;# 
  3240  0F28                     	;# 
  3241  0F29                     	;# 
  3242  0F2A                     	;# 
  3243  0F2B                     	;# 
  3244  0F2C                     	;# 
  3245  0F2D                     	;# 
  3246  0F2E                     	;# 
  3247  0F2F                     	;# 
  3248  0F30                     	;# 
  3249  0F31                     	;# 
  3250  0F32                     	;# 
  3251  0F33                     	;# 
  3252  0F34                     	;# 
  3253  0F35                     	;# 
  3254  0F36                     	;# 
  3255  0F37                     	;# 
  3256  0FE4                     	;# 
  3257  0FE5                     	;# 
  3258  0FE6                     	;# 
  3259  0FE7                     	;# 
  3260  0FE8                     	;# 
  3261  0FE9                     	;# 
  3262  0FEA                     	;# 
  3263  0FEB                     	;# 
  3264  0FED                     	;# 
  3265  0FEE                     	;# 
  3266  0FEF                     	;# 
  3267  0000                     	;# 
  3268  0001                     	;# 
  3269  0002                     	;# 
  3270  0003                     	;# 
  3271  0004                     	;# 
  3272  0005                     	;# 
  3273  0006                     	;# 
  3274  0007                     	;# 
  3275  0008                     	;# 
  3276  0009                     	;# 
  3277  000A                     	;# 
  3278  000B                     	;# 
  3279  000C                     	;# 
  3280  000D                     	;# 
  3281  000E                     	;# 
  3282  0010                     	;# 
  3283  0011                     	;# 
  3284  0012                     	;# 
  3285  0013                     	;# 
  3286  0014                     	;# 
  3287  0015                     	;# 
  3288  0016                     	;# 
  3289  0016                     	;# 
  3290  0017                     	;# 
  3291  0018                     	;# 
  3292  0019                     	;# 
  3293  001A                     	;# 
  3294  001A                     	;# 
  3295  001B                     	;# 
  3296  001B                     	;# 
  3297  001C                     	;# 
  3298  001D                     	;# 
  3299  001E                     	;# 
  3300  001F                     	;# 
  3301  008C                     	;# 
  3302  008D                     	;# 
  3303  008E                     	;# 
  3304  0090                     	;# 
  3305  0091                     	;# 
  3306  0092                     	;# 
  3307  0093                     	;# 
  3308  0094                     	;# 
  3309  0095                     	;# 
  3310  0096                     	;# 
  3311  0098                     	;# 
  3312  0099                     	;# 
  3313  009A                     	;# 
  3314  009B                     	;# 
  3315  009B                     	;# 
  3316  009C                     	;# 
  3317  009D                     	;# 
  3318  009E                     	;# 
  3319  009F                     	;# 
  3320  010C                     	;# 
  3321  010D                     	;# 
  3322  010E                     	;# 
  3323  0111                     	;# 
  3324  0112                     	;# 
  3325  0113                     	;# 
  3326  0114                     	;# 
  3327  0115                     	;# 
  3328  0116                     	;# 
  3329  0117                     	;# 
  3330  0118                     	;# 
  3331  0119                     	;# 
  3332  011C                     	;# 
  3333  018C                     	;# 
  3334  018D                     	;# 
  3335  018E                     	;# 
  3336  0191                     	;# 
  3337  0191                     	;# 
  3338  0192                     	;# 
  3339  0193                     	;# 
  3340  0193                     	;# 
  3341  0194                     	;# 
  3342  0195                     	;# 
  3343  0196                     	;# 
  3344  0197                     	;# 
  3345  0199                     	;# 
  3346  0199                     	;# 
  3347  0199                     	;# 
  3348  019A                     	;# 
  3349  019A                     	;# 
  3350  019A                     	;# 
  3351  019B                     	;# 
  3352  019B                     	;# 
  3353  019B                     	;# 
  3354  019B                     	;# 
  3355  019B                     	;# 
  3356  019C                     	;# 
  3357  019C                     	;# 
  3358  019C                     	;# 
  3359  019D                     	;# 
  3360  019D                     	;# 
  3361  019D                     	;# 
  3362  019E                     	;# 
  3363  019E                     	;# 
  3364  019E                     	;# 
  3365  019F                     	;# 
  3366  019F                     	;# 
  3367  019F                     	;# 
  3368  019F                     	;# 
  3369  019F                     	;# 
  3370  020C                     	;# 
  3371  020D                     	;# 
  3372  020E                     	;# 
  3373  0211                     	;# 
  3374  0211                     	;# 
  3375  0212                     	;# 
  3376  0212                     	;# 
  3377  0213                     	;# 
  3378  0213                     	;# 
  3379  0214                     	;# 
  3380  0214                     	;# 
  3381  0215                     	;# 
  3382  0215                     	;# 
  3383  0215                     	;# 
  3384  0215                     	;# 
  3385  0216                     	;# 
  3386  0216                     	;# 
  3387  0217                     	;# 
  3388  0217                     	;# 
  3389  028C                     	;# 
  3390  028D                     	;# 
  3391  028E                     	;# 
  3392  0291                     	;# 
  3393  0291                     	;# 
  3394  0292                     	;# 
  3395  0293                     	;# 
  3396  0294                     	;# 
  3397  0298                     	;# 
  3398  0298                     	;# 
  3399  0299                     	;# 
  3400  029A                     	;# 
  3401  029B                     	;# 
  3402  029E                     	;# 
  3403  030C                     	;# 
  3404  030D                     	;# 
  3405  030E                     	;# 
  3406  038C                     	;# 
  3407  038D                     	;# 
  3408  038E                     	;# 
  3409  0391                     	;# 
  3410  0392                     	;# 
  3411  0393                     	;# 
  3412  0394                     	;# 
  3413  0395                     	;# 
  3414  0396                     	;# 
  3415  0397                     	;# 
  3416  0398                     	;# 
  3417  0399                     	;# 
  3418  040E                     	;# 
  3419  0413                     	;# 
  3420  0413                     	;# 
  3421  0414                     	;# 
  3422  0414                     	;# 
  3423  0415                     	;# 
  3424  0416                     	;# 
  3425  0417                     	;# 
  3426  0418                     	;# 
  3427  041A                     	;# 
  3428  041A                     	;# 
  3429  041B                     	;# 
  3430  041B                     	;# 
  3431  041C                     	;# 
  3432  041D                     	;# 
  3433  041E                     	;# 
  3434  041F                     	;# 
  3435  0493                     	;# 
  3436  0494                     	;# 
  3437  0495                     	;# 
  3438  0496                     	;# 
  3439  049A                     	;# 
  3440  049B                     	;# 
  3441  049C                     	;# 
  3442  049D                     	;# 
  3443  058C                     	;# 
  3444  058C                     	;# 
  3445  058D                     	;# 
  3446  058E                     	;# 
  3447  058E                     	;# 
  3448  058F                     	;# 
  3449  0590                     	;# 
  3450  0590                     	;# 
  3451  0591                     	;# 
  3452  0592                     	;# 
  3453  0592                     	;# 
  3454  0593                     	;# 
  3455  0594                     	;# 
  3456  0594                     	;# 
  3457  0595                     	;# 
  3458  0596                     	;# 
  3459  0596                     	;# 
  3460  0597                     	;# 
  3461  0598                     	;# 
  3462  0599                     	;# 
  3463  059A                     	;# 
  3464  059B                     	;# 
  3465  059B                     	;# 
  3466  059C                     	;# 
  3467  059D                     	;# 
  3468  060C                     	;# 
  3469  060C                     	;# 
  3470  060D                     	;# 
  3471  060E                     	;# 
  3472  060F                     	;# 
  3473  060F                     	;# 
  3474  0610                     	;# 
  3475  0611                     	;# 
  3476  0612                     	;# 
  3477  0613                     	;# 
  3478  0614                     	;# 
  3479  0617                     	;# 
  3480  0618                     	;# 
  3481  0619                     	;# 
  3482  061A                     	;# 
  3483  061B                     	;# 
  3484  061C                     	;# 
  3485  0691                     	;# 
  3486  0692                     	;# 
  3487  0693                     	;# 
  3488  0694                     	;# 
  3489  0695                     	;# 
  3490  0696                     	;# 
  3491  0697                     	;# 
  3492  0699                     	;# 
  3493  069A                     	;# 
  3494  0711                     	;# 
  3495  0712                     	;# 
  3496  0713                     	;# 
  3497  0714                     	;# 
  3498  0715                     	;# 
  3499  0718                     	;# 
  3500  0718                     	;# 
  3501  0719                     	;# 
  3502  071A                     	;# 
  3503  071A                     	;# 
  3504  071B                     	;# 
  3505  071C                     	;# 
  3506  071D                     	;# 
  3507  0791                     	;# 
  3508  0791                     	;# 
  3509  0792                     	;# 
  3510  0793                     	;# 
  3511  0793                     	;# 
  3512  0794                     	;# 
  3513  0795                     	;# 
  3514  0795                     	;# 
  3515  0796                     	;# 
  3516  0797                     	;# 
  3517  0797                     	;# 
  3518  0798                     	;# 
  3519  0799                     	;# 
  3520  079A                     	;# 
  3521  080C                     	;# 
  3522  080C                     	;# 
  3523  080D                     	;# 
  3524  080E                     	;# 
  3525  080E                     	;# 
  3526  080F                     	;# 
  3527  0810                     	;# 
  3528  0810                     	;# 
  3529  0811                     	;# 
  3530  0812                     	;# 
  3531  0812                     	;# 
  3532  0813                     	;# 
  3533  0814                     	;# 
  3534  0815                     	;# 
  3535  0816                     	;# 
  3536  0817                     	;# 
  3537  0818                     	;# 
  3538  0819                     	;# 
  3539  081A                     	;# 
  3540  081A                     	;# 
  3541  081B                     	;# 
  3542  081C                     	;# 
  3543  081C                     	;# 
  3544  081D                     	;# 
  3545  088C                     	;# 
  3546  088D                     	;# 
  3547  088E                     	;# 
  3548  088F                     	;# 
  3549  088F                     	;# 
  3550  0890                     	;# 
  3551  0891                     	;# 
  3552  0892                     	;# 
  3553  0893                     	;# 
  3554  0893                     	;# 
  3555  0894                     	;# 
  3556  0895                     	;# 
  3557  0896                     	;# 
  3558  0897                     	;# 
  3559  0897                     	;# 
  3560  0898                     	;# 
  3561  0899                     	;# 
  3562  0D8C                     	;# 
  3563  0D8C                     	;# 
  3564  0D8D                     	;# 
  3565  0D8E                     	;# 
  3566  0D8F                     	;# 
  3567  0D8F                     	;# 
  3568  0D90                     	;# 
  3569  0D91                     	;# 
  3570  0D92                     	;# 
  3571  0D92                     	;# 
  3572  0D93                     	;# 
  3573  0D94                     	;# 
  3574  0D95                     	;# 
  3575  0D95                     	;# 
  3576  0D96                     	;# 
  3577  0D97                     	;# 
  3578  0D98                     	;# 
  3579  0D99                     	;# 
  3580  0D9A                     	;# 
  3581  0D9B                     	;# 
  3582  0D9C                     	;# 
  3583  0D9D                     	;# 
  3584  0D9E                     	;# 
  3585  0D9E                     	;# 
  3586  0D9F                     	;# 
  3587  0DA0                     	;# 
  3588  0DA1                     	;# 
  3589  0DA1                     	;# 
  3590  0DA2                     	;# 
  3591  0DA3                     	;# 
  3592  0DA4                     	;# 
  3593  0DA4                     	;# 
  3594  0DA5                     	;# 
  3595  0DA6                     	;# 
  3596  0DA7                     	;# 
  3597  0DA7                     	;# 
  3598  0DA8                     	;# 
  3599  0DA9                     	;# 
  3600  0DAA                     	;# 
  3601  0DAB                     	;# 
  3602  0DAC                     	;# 
  3603  0DAD                     	;# 
  3604  0DAE                     	;# 
  3605  0DAF                     	;# 
  3606  0E0F                     	;# 
  3607  0E10                     	;# 
  3608  0E11                     	;# 
  3609  0E12                     	;# 
  3610  0E13                     	;# 
  3611  0E14                     	;# 
  3612  0E15                     	;# 
  3613  0E16                     	;# 
  3614  0E17                     	;# 
  3615  0E18                     	;# 
  3616  0E19                     	;# 
  3617  0E1A                     	;# 
  3618  0E1B                     	;# 
  3619  0E1C                     	;# 
  3620  0E1D                     	;# 
  3621  0E1E                     	;# 
  3622  0E1F                     	;# 
  3623  0E20                     	;# 
  3624  0E21                     	;# 
  3625  0E22                     	;# 
  3626  0E23                     	;# 
  3627  0E24                     	;# 
  3628  0E25                     	;# 
  3629  0E26                     	;# 
  3630  0E27                     	;# 
  3631  0E28                     	;# 
  3632  0E29                     	;# 
  3633  0E2A                     	;# 
  3634  0E2B                     	;# 
  3635  0E2C                     	;# 
  3636  0E2D                     	;# 
  3637  0E2E                     	;# 
  3638  0E90                     	;# 
  3639  0E91                     	;# 
  3640  0E92                     	;# 
  3641  0E94                     	;# 
  3642  0E95                     	;# 
  3643  0E9C                     	;# 
  3644  0E9D                     	;# 
  3645  0E9E                     	;# 
  3646  0E9F                     	;# 
  3647  0EA0                     	;# 
  3648  0EA1                     	;# 
  3649  0EA2                     	;# 
  3650  0EA3                     	;# 
  3651  0EA4                     	;# 
  3652  0EA5                     	;# 
  3653  0EA6                     	;# 
  3654  0EA7                     	;# 
  3655  0F0F                     	;# 
  3656  0F10                     	;# 
  3657  0F11                     	;# 
  3658  0F12                     	;# 
  3659  0F13                     	;# 
  3660  0F14                     	;# 
  3661  0F15                     	;# 
  3662  0F16                     	;# 
  3663  0F17                     	;# 
  3664  0F18                     	;# 
  3665  0F19                     	;# 
  3666  0F1A                     	;# 
  3667  0F1B                     	;# 
  3668  0F1C                     	;# 
  3669  0F1D                     	;# 
  3670  0F1E                     	;# 
  3671  0F1F                     	;# 
  3672  0F20                     	;# 
  3673  0F21                     	;# 
  3674  0F22                     	;# 
  3675  0F23                     	;# 
  3676  0F24                     	;# 
  3677  0F25                     	;# 
  3678  0F26                     	;# 
  3679  0F27                     	;# 
  3680  0F28                     	;# 
  3681  0F29                     	;# 
  3682  0F2A                     	;# 
  3683  0F2B                     	;# 
  3684  0F2C                     	;# 
  3685  0F2D                     	;# 
  3686  0F2E                     	;# 
  3687  0F2F                     	;# 
  3688  0F30                     	;# 
  3689  0F31                     	;# 
  3690  0F32                     	;# 
  3691  0F33                     	;# 
  3692  0F34                     	;# 
  3693  0F35                     	;# 
  3694  0F36                     	;# 
  3695  0F37                     	;# 
  3696  0FE4                     	;# 
  3697  0FE5                     	;# 
  3698  0FE6                     	;# 
  3699  0FE7                     	;# 
  3700  0FE8                     	;# 
  3701  0FE9                     	;# 
  3702  0FEA                     	;# 
  3703  0FEB                     	;# 
  3704  0FED                     	;# 
  3705  0FEE                     	;# 
  3706  0FEF                     	;# 
  3707  0000                     	;# 
  3708  0001                     	;# 
  3709  0002                     	;# 
  3710  0003                     	;# 
  3711  0004                     	;# 
  3712  0005                     	;# 
  3713  0006                     	;# 
  3714  0007                     	;# 
  3715  0008                     	;# 
  3716  0009                     	;# 
  3717  000A                     	;# 
  3718  000B                     	;# 
  3719  000C                     	;# 
  3720  000D                     	;# 
  3721  000E                     	;# 
  3722  0010                     	;# 
  3723  0011                     	;# 
  3724  0012                     	;# 
  3725  0013                     	;# 
  3726  0014                     	;# 
  3727  0015                     	;# 
  3728  0016                     	;# 
  3729  0016                     	;# 
  3730  0017                     	;# 
  3731  0018                     	;# 
  3732  0019                     	;# 
  3733  001A                     	;# 
  3734  001A                     	;# 
  3735  001B                     	;# 
  3736  001B                     	;# 
  3737  001C                     	;# 
  3738  001D                     	;# 
  3739  001E                     	;# 
  3740  001F                     	;# 
  3741  008C                     	;# 
  3742  008D                     	;# 
  3743  008E                     	;# 
  3744  0090                     	;# 
  3745  0091                     	;# 
  3746  0092                     	;# 
  3747  0093                     	;# 
  3748  0094                     	;# 
  3749  0095                     	;# 
  3750  0096                     	;# 
  3751  0098                     	;# 
  3752  0099                     	;# 
  3753  009A                     	;# 
  3754  009B                     	;# 
  3755  009B                     	;# 
  3756  009C                     	;# 
  3757  009D                     	;# 
  3758  009E                     	;# 
  3759  009F                     	;# 
  3760  010C                     	;# 
  3761  010D                     	;# 
  3762  010E                     	;# 
  3763  0111                     	;# 
  3764  0112                     	;# 
  3765  0113                     	;# 
  3766  0114                     	;# 
  3767  0115                     	;# 
  3768  0116                     	;# 
  3769  0117                     	;# 
  3770  0118                     	;# 
  3771  0119                     	;# 
  3772  011C                     	;# 
  3773  018C                     	;# 
  3774  018D                     	;# 
  3775  018E                     	;# 
  3776  0191                     	;# 
  3777  0191                     	;# 
  3778  0192                     	;# 
  3779  0193                     	;# 
  3780  0193                     	;# 
  3781  0194                     	;# 
  3782  0195                     	;# 
  3783  0196                     	;# 
  3784  0197                     	;# 
  3785  0199                     	;# 
  3786  0199                     	;# 
  3787  0199                     	;# 
  3788  019A                     	;# 
  3789  019A                     	;# 
  3790  019A                     	;# 
  3791  019B                     	;# 
  3792  019B                     	;# 
  3793  019B                     	;# 
  3794  019B                     	;# 
  3795  019B                     	;# 
  3796  019C                     	;# 
  3797  019C                     	;# 
  3798  019C                     	;# 
  3799  019D                     	;# 
  3800  019D                     	;# 
  3801  019D                     	;# 
  3802  019E                     	;# 
  3803  019E                     	;# 
  3804  019E                     	;# 
  3805  019F                     	;# 
  3806  019F                     	;# 
  3807  019F                     	;# 
  3808  019F                     	;# 
  3809  019F                     	;# 
  3810  020C                     	;# 
  3811  020D                     	;# 
  3812  020E                     	;# 
  3813  0211                     	;# 
  3814  0211                     	;# 
  3815  0212                     	;# 
  3816  0212                     	;# 
  3817  0213                     	;# 
  3818  0213                     	;# 
  3819  0214                     	;# 
  3820  0214                     	;# 
  3821  0215                     	;# 
  3822  0215                     	;# 
  3823  0215                     	;# 
  3824  0215                     	;# 
  3825  0216                     	;# 
  3826  0216                     	;# 
  3827  0217                     	;# 
  3828  0217                     	;# 
  3829  028C                     	;# 
  3830  028D                     	;# 
  3831  028E                     	;# 
  3832  0291                     	;# 
  3833  0291                     	;# 
  3834  0292                     	;# 
  3835  0293                     	;# 
  3836  0294                     	;# 
  3837  0298                     	;# 
  3838  0298                     	;# 
  3839  0299                     	;# 
  3840  029A                     	;# 
  3841  029B                     	;# 
  3842  029E                     	;# 
  3843  030C                     	;# 
  3844  030D                     	;# 
  3845  030E                     	;# 
  3846  038C                     	;# 
  3847  038D                     	;# 
  3848  038E                     	;# 
  3849  0391                     	;# 
  3850  0392                     	;# 
  3851  0393                     	;# 
  3852  0394                     	;# 
  3853  0395                     	;# 
  3854  0396                     	;# 
  3855  0397                     	;# 
  3856  0398                     	;# 
  3857  0399                     	;# 
  3858  040E                     	;# 
  3859  0413                     	;# 
  3860  0413                     	;# 
  3861  0414                     	;# 
  3862  0414                     	;# 
  3863  0415                     	;# 
  3864  0416                     	;# 
  3865  0417                     	;# 
  3866  0418                     	;# 
  3867  041A                     	;# 
  3868  041A                     	;# 
  3869  041B                     	;# 
  3870  041B                     	;# 
  3871  041C                     	;# 
  3872  041D                     	;# 
  3873  041E                     	;# 
  3874  041F                     	;# 
  3875  0493                     	;# 
  3876  0494                     	;# 
  3877  0495                     	;# 
  3878  0496                     	;# 
  3879  049A                     	;# 
  3880  049B                     	;# 
  3881  049C                     	;# 
  3882  049D                     	;# 
  3883  058C                     	;# 
  3884  058C                     	;# 
  3885  058D                     	;# 
  3886  058E                     	;# 
  3887  058E                     	;# 
  3888  058F                     	;# 
  3889  0590                     	;# 
  3890  0590                     	;# 
  3891  0591                     	;# 
  3892  0592                     	;# 
  3893  0592                     	;# 
  3894  0593                     	;# 
  3895  0594                     	;# 
  3896  0594                     	;# 
  3897  0595                     	;# 
  3898  0596                     	;# 
  3899  0596                     	;# 
  3900  0597                     	;# 
  3901  0598                     	;# 
  3902  0599                     	;# 
  3903  059A                     	;# 
  3904  059B                     	;# 
  3905  059B                     	;# 
  3906  059C                     	;# 
  3907  059D                     	;# 
  3908  060C                     	;# 
  3909  060C                     	;# 
  3910  060D                     	;# 
  3911  060E                     	;# 
  3912  060F                     	;# 
  3913  060F                     	;# 
  3914  0610                     	;# 
  3915  0611                     	;# 
  3916  0612                     	;# 
  3917  0613                     	;# 
  3918  0614                     	;# 
  3919  0617                     	;# 
  3920  0618                     	;# 
  3921  0619                     	;# 
  3922  061A                     	;# 
  3923  061B                     	;# 
  3924  061C                     	;# 
  3925  0691                     	;# 
  3926  0692                     	;# 
  3927  0693                     	;# 
  3928  0694                     	;# 
  3929  0695                     	;# 
  3930  0696                     	;# 
  3931  0697                     	;# 
  3932  0699                     	;# 
  3933  069A                     	;# 
  3934  0711                     	;# 
  3935  0712                     	;# 
  3936  0713                     	;# 
  3937  0714                     	;# 
  3938  0715                     	;# 
  3939  0718                     	;# 
  3940  0718                     	;# 
  3941  0719                     	;# 
  3942  071A                     	;# 
  3943  071A                     	;# 
  3944  071B                     	;# 
  3945  071C                     	;# 
  3946  071D                     	;# 
  3947  0791                     	;# 
  3948  0791                     	;# 
  3949  0792                     	;# 
  3950  0793                     	;# 
  3951  0793                     	;# 
  3952  0794                     	;# 
  3953  0795                     	;# 
  3954  0795                     	;# 
  3955  0796                     	;# 
  3956  0797                     	;# 
  3957  0797                     	;# 
  3958  0798                     	;# 
  3959  0799                     	;# 
  3960  079A                     	;# 
  3961  080C                     	;# 
  3962  080C                     	;# 
  3963  080D                     	;# 
  3964  080E                     	;# 
  3965  080E                     	;# 
  3966  080F                     	;# 
  3967  0810                     	;# 
  3968  0810                     	;# 
  3969  0811                     	;# 
  3970  0812                     	;# 
  3971  0812                     	;# 
  3972  0813                     	;# 
  3973  0814                     	;# 
  3974  0815                     	;# 
  3975  0816                     	;# 
  3976  0817                     	;# 
  3977  0818                     	;# 
  3978  0819                     	;# 
  3979  081A                     	;# 
  3980  081A                     	;# 
  3981  081B                     	;# 
  3982  081C                     	;# 
  3983  081C                     	;# 
  3984  081D                     	;# 
  3985  088C                     	;# 
  3986  088D                     	;# 
  3987  088E                     	;# 
  3988  088F                     	;# 
  3989  088F                     	;# 
  3990  0890                     	;# 
  3991  0891                     	;# 
  3992  0892                     	;# 
  3993  0893                     	;# 
  3994  0893                     	;# 
  3995  0894                     	;# 
  3996  0895                     	;# 
  3997  0896                     	;# 
  3998  0897                     	;# 
  3999  0897                     	;# 
  4000  0898                     	;# 
  4001  0899                     	;# 
  4002  0D8C                     	;# 
  4003  0D8C                     	;# 
  4004  0D8D                     	;# 
  4005  0D8E                     	;# 
  4006  0D8F                     	;# 
  4007  0D8F                     	;# 
  4008  0D90                     	;# 
  4009  0D91                     	;# 
  4010  0D92                     	;# 
  4011  0D92                     	;# 
  4012  0D93                     	;# 
  4013  0D94                     	;# 
  4014  0D95                     	;# 
  4015  0D95                     	;# 
  4016  0D96                     	;# 
  4017  0D97                     	;# 
  4018  0D98                     	;# 
  4019  0D99                     	;# 
  4020  0D9A                     	;# 
  4021  0D9B                     	;# 
  4022  0D9C                     	;# 
  4023  0D9D                     	;# 
  4024  0D9E                     	;# 
  4025  0D9E                     	;# 
  4026  0D9F                     	;# 
  4027  0DA0                     	;# 
  4028  0DA1                     	;# 
  4029  0DA1                     	;# 
  4030  0DA2                     	;# 
  4031  0DA3                     	;# 
  4032  0DA4                     	;# 
  4033  0DA4                     	;# 
  4034  0DA5                     	;# 
  4035  0DA6                     	;# 
  4036  0DA7                     	;# 
  4037  0DA7                     	;# 
  4038  0DA8                     	;# 
  4039  0DA9                     	;# 
  4040  0DAA                     	;# 
  4041  0DAB                     	;# 
  4042  0DAC                     	;# 
  4043  0DAD                     	;# 
  4044  0DAE                     	;# 
  4045  0DAF                     	;# 
  4046  0E0F                     	;# 
  4047  0E10                     	;# 
  4048  0E11                     	;# 
  4049  0E12                     	;# 
  4050  0E13                     	;# 
  4051  0E14                     	;# 
  4052  0E15                     	;# 
  4053  0E16                     	;# 
  4054  0E17                     	;# 
  4055  0E18                     	;# 
  4056  0E19                     	;# 
  4057  0E1A                     	;# 
  4058  0E1B                     	;# 
  4059  0E1C                     	;# 
  4060  0E1D                     	;# 
  4061  0E1E                     	;# 
  4062  0E1F                     	;# 
  4063  0E20                     	;# 
  4064  0E21                     	;# 
  4065  0E22                     	;# 
  4066  0E23                     	;# 
  4067  0E24                     	;# 
  4068  0E25                     	;# 
  4069  0E26                     	;# 
  4070  0E27                     	;# 
  4071  0E28                     	;# 
  4072  0E29                     	;# 
  4073  0E2A                     	;# 
  4074  0E2B                     	;# 
  4075  0E2C                     	;# 
  4076  0E2D                     	;# 
  4077  0E2E                     	;# 
  4078  0E90                     	;# 
  4079  0E91                     	;# 
  4080  0E92                     	;# 
  4081  0E94                     	;# 
  4082  0E95                     	;# 
  4083  0E9C                     	;# 
  4084  0E9D                     	;# 
  4085  0E9E                     	;# 
  4086  0E9F                     	;# 
  4087  0EA0                     	;# 
  4088  0EA1                     	;# 
  4089  0EA2                     	;# 
  4090  0EA3                     	;# 
  4091  0EA4                     	;# 
  4092  0EA5                     	;# 
  4093  0EA6                     	;# 
  4094  0EA7                     	;# 
  4095  0F0F                     	;# 
  4096  0F10                     	;# 
  4097  0F11                     	;# 
  4098  0F12                     	;# 
  4099  0F13                     	;# 
  4100  0F14                     	;# 
  4101  0F15                     	;# 
  4102  0F16                     	;# 
  4103  0F17                     	;# 
  4104  0F18                     	;# 
  4105  0F19                     	;# 
  4106  0F1A                     	;# 
  4107  0F1B                     	;# 
  4108  0F1C                     	;# 
  4109  0F1D                     	;# 
  4110  0F1E                     	;# 
  4111  0F1F                     	;# 
  4112  0F20                     	;# 
  4113  0F21                     	;# 
  4114  0F22                     	;# 
  4115  0F23                     	;# 
  4116  0F24                     	;# 
  4117  0F25                     	;# 
  4118  0F26                     	;# 
  4119  0F27                     	;# 
  4120  0F28                     	;# 
  4121  0F29                     	;# 
  4122  0F2A                     	;# 
  4123  0F2B                     	;# 
  4124  0F2C                     	;# 
  4125  0F2D                     	;# 
  4126  0F2E                     	;# 
  4127  0F2F                     	;# 
  4128  0F30                     	;# 
  4129  0F31                     	;# 
  4130  0F32                     	;# 
  4131  0F33                     	;# 
  4132  0F34                     	;# 
  4133  0F35                     	;# 
  4134  0F36                     	;# 
  4135  0F37                     	;# 
  4136  0FE4                     	;# 
  4137  0FE5                     	;# 
  4138  0FE6                     	;# 
  4139  0FE7                     	;# 
  4140  0FE8                     	;# 
  4141  0FE9                     	;# 
  4142  0FEA                     	;# 
  4143  0FEB                     	;# 
  4144  0FED                     	;# 
  4145  0FEE                     	;# 
  4146  0FEF                     	;# 
  4147                           
  4148                           	psect	idataBANK0
  4149  07FD                     __pidataBANK0:	
  4150                           
  4151                           ;initializer for _StateBat
  4152  07FD  3401               	retlw	1
  4153                           
  4154                           ;initializer for _Angle
  4155  07FE  342D               	retlw	45
  4156                           
  4157                           ;initializer for _Validation
  4158  07FF  3404               	retlw	4
  4159                           
  4160                           	psect	stringtext1
  4161  0664                     __pstringtext1:	
  4162  0664                     _fsmStateTable:	
  4163  0664  34EA               	retlw	low _I2C_DO_IDLE
  4164  0665  340E               	retlw	high _I2C_DO_IDLE
  4165  0666  347C               	retlw	low _I2C_DO_SEND_ADR_READ
  4166  0667  340F               	retlw	high _I2C_DO_SEND_ADR_READ
  4167  0668  3442               	retlw	low _I2C_DO_SEND_ADR_WRITE
  4168  0669  340F               	retlw	high _I2C_DO_SEND_ADR_WRITE
  4169  066A  346A               	retlw	low _I2C_DO_TX
  4170  066B  3402               	retlw	high _I2C_DO_TX
  4171  066C  3405               	retlw	low _I2C_DO_RX
  4172  066D  3403               	retlw	high _I2C_DO_RX
  4173  066E  3419               	retlw	low _I2C_DO_RCEN
  4174  066F  340F               	retlw	high _I2C_DO_RCEN
  4175  0670  342D               	retlw	low _I2C_DO_TX_EMPTY
  4176  0671  3405               	retlw	high _I2C_DO_TX_EMPTY
  4177  0672  34A9               	retlw	low _I2C_DO_SEND_RESTART_READ
  4178  0673  340E               	retlw	high _I2C_DO_SEND_RESTART_READ
  4179  0674  34B1               	retlw	low _I2C_DO_SEND_RESTART_WRITE
  4180  0675  340E               	retlw	high _I2C_DO_SEND_RESTART_WRITE
  4181  0676  34B9               	retlw	low _I2C_DO_SEND_RESTART
  4182  0677  340E               	retlw	high _I2C_DO_SEND_RESTART
  4183  0678  34C1               	retlw	low _I2C_DO_SEND_STOP
  4184  0679  340E               	retlw	high _I2C_DO_SEND_STOP
  4185  067A  34C9               	retlw	low _I2C_DO_RX_ACK
  4186  067B  340E               	retlw	high _I2C_DO_RX_ACK
  4187  067C  34D1               	retlw	low _I2C_DO_RX_NACK_STOP
  4188  067D  340E               	retlw	high _I2C_DO_RX_NACK_STOP
  4189  067E  34D9               	retlw	low _I2C_DO_RX_NACK_RESTART
  4190  067F  340E               	retlw	high _I2C_DO_RX_NACK_RESTART
  4191  0680  34F3               	retlw	low _I2C_DO_RESET
  4192  0681  340E               	retlw	high _I2C_DO_RESET
  4193  0682  3458               	retlw	low _I2C_DO_ADDRESS_NACK
  4194  0683  3405               	retlw	high _I2C_DO_ADDRESS_NACK
  4195  0684                     __end_of_fsmStateTable:	
  4196                           
  4197                           	psect	nvBANK0
  4198  0057                     __pnvBANK0:	
  4199  0057                     _TMR2_InterruptHandler:	
  4200  0057                     	ds	2
  4201  0059                     _EUSART_OverrunErrorHandler:	
  4202  0059                     	ds	2
  4203  005B                     _EUSART_FramingErrorHandler:	
  4204  005B                     	ds	2
  4205  005D                     _EUSART_RxDefaultInterruptHandler:	
  4206  005D                     	ds	2
  4207                           
  4208                           	psect	nvBANK1
  4209  00CA                     __pnvBANK1:	
  4210  00CA                     _EUSART_ErrorHandler:	
  4211  00CA                     	ds	2
  4212  000C                     _PORTAbits	set	12
  4213  001B                     _PR2	set	27
  4214  001A                     _TMR2	set	26
  4215  001C                     _T2CONbits	set	28
  4216  001F                     _T2RSTbits	set	31
  4217  001D                     _T2HLTbits	set	29
  4218  001C                     _T2CON	set	28
  4219  001A                     _T2TMR	set	26
  4220  001B                     _T2PR	set	27
  4221  001F                     _T2RST	set	31
  4222  001D                     _T2HLT	set	29
  4223  001E                     _T2CLKCON	set	30
  4224  0011                     _PIR2bits	set	17
  4225  0014                     _PIR5bits	set	20
  4226  0010                     _PIR1bits	set	16
  4227  000B                     _INTCONbits	set	11
  4228  0095                     _OPTION_REGbits	set	149
  4229  008E                     _TRISC	set	142
  4230  008D                     _TRISB	set	141
  4231  008C                     _TRISA	set	140
  4232  0098                     _OSCTUNE	set	152
  4233  0099                     _OSCCON	set	153
  4234  0094                     _PIE5bits	set	148
  4235  0090                     _PIE1bits	set	144
  4236  010C                     _LATAbits	set	268
  4237  010E                     _LATCbits	set	270
  4238  010E                     _LATC	set	270
  4239  010D                     _LATB	set	269
  4240  010C                     _LATA	set	268
  4241  0116                     _BORCON	set	278
  4242  0199                     _RC1REG	set	409
  4243  019D                     _RC1STAbits	set	413
  4244  019A                     _TX1REG	set	410
  4245  019E                     _TX1STAbits	set	414
  4246  019C                     _SPBRGH	set	412
  4247  019B                     _SPBRGL	set	411
  4248  019E                     _TX1STA	set	414
  4249  019D                     _RC1STA	set	413
  4250  019F                     _BAUD1CON	set	415
  4251  018C                     _ANSELA	set	396
  4252  018D                     _ANSELB	set	397
  4253  018E                     _ANSELC	set	398
  4254  0214                     _SSP1STATbits	set	532
  4255  0216                     _SSP1CON2bits	set	534
  4256  0211                     _SSP1BUF	set	529
  4257  0215                     _SSP1CON1bits	set	533
  4258  0212                     _SSP1ADD	set	530
  4259  0216                     _SSP1CON2	set	534
  4260  0215                     _SSP1CON1	set	533
  4261  0214                     _SSP1STAT	set	532
  4262  020E                     _WPUC	set	526
  4263  020C                     _WPUA	set	524
  4264  020D                     _WPUB	set	525
  4265  029E                     _CCPTMRSbits	set	670
  4266  028E                     _ODCONC	set	654
  4267  028D                     _ODCONB	set	653
  4268  028C                     _ODCONA	set	652
  4269  030E                     _SLRCONC	set	782
  4270  030D                     _SLRCONB	set	781
  4271  030C                     _SLRCONA	set	780
  4272  038E                     _INLVLC	set	910
  4273  038D                     _INLVLB	set	909
  4274  038C                     _INLVLA	set	908
  4275  059A                     _PID1OUTU	set	1434
  4276  0599                     _PID1OUTHH	set	1433
  4277  0598                     _PID1OUTHL	set	1432
  4278  0597                     _PID1OUTLH	set	1431
  4279  0596                     _PID1OUTLL	set	1430
  4280  059D                     _PID1Z1U	set	1437
  4281  059C                     _PID1Z1H	set	1436
  4282  059B                     _PID1Z1L	set	1435
  4283  058E                     _PID1INL	set	1422
  4284  058F                     _PID1INH	set	1423
  4285  058C                     _PID1SETL	set	1420
  4286  058D                     _PID1SETH	set	1421
  4287  0594                     _PID1K3L	set	1428
  4288  0595                     _PID1K3H	set	1429
  4289  0592                     _PID1K2L	set	1426
  4290  0593                     _PID1K2H	set	1427
  4291  0590                     _PID1K1L	set	1424
  4292  0591                     _PID1K1H	set	1425
  4293  060E                     _PID1Z2U	set	1550
  4294  060D                     _PID1Z2H	set	1549
  4295  060C                     _PID1Z2L	set	1548
  4296  0614                     _PID1CON	set	1556
  4297  0617                     _PWM3DCL	set	1559
  4298  0618                     _PWM3DCH	set	1560
  4299  0619                     _PWM3CON	set	1561
  4300  0E20                     _SSPCLKPPS	set	3616
  4301  0E21                     _SSPDATPPS	set	3617
  4302  0E24                     _RXPPS	set	3620
  4303  0E92                     _RA2PPS	set	3730
  4304  0E9C                     _RB4PPS	set	3740
  4305  0E9F                     _RB7PPS	set	3743
  4306  0E9E                     _RB6PPS	set	3742
  4307                           
  4308                           ; #config settings
  4309  0000                     
  4310                           	psect	cinit
  4311  003A                     start_initialization:	
  4312  003A                     __initialization:	
  4313                           
  4314                           ; Initialize objects allocated to BANK0
  4315  003A  3187  27FD  3180   	fcall	__pidataBANK0	;fetch initializer
  4316  003D  00DF               	movwf	__pdataBANK0& (0+127)
  4317  003E  3187  27FE  3180   	fcall	__pidataBANK0+1	;fetch initializer
  4318  0041  00E0               	movwf	(__pdataBANK0+1)& (0+127)
  4319  0042  3187  27FF  3180   	fcall	__pidataBANK0+2	;fetch initializer
  4320  0045  00E1               	movwf	(__pdataBANK0+2)& (0+127)
  4321                           
  4322                           ; Clear objects allocated to BANK0
  4323  0046  3020               	movlw	low __pbssBANK0
  4324  0047  0084               	movwf	4
  4325  0048  3000               	movlw	high __pbssBANK0
  4326  0049  0085               	movwf	5
  4327  004A  301D               	movlw	29
  4328  004B  318E  2685  3180   	fcall	clear_ram0
  4329                           
  4330                           ; Clear objects allocated to BANK1
  4331  004E  30A0               	movlw	low __pbssBANK1
  4332  004F  0084               	movwf	4
  4333  0050  3000               	movlw	high __pbssBANK1
  4334  0051  0085               	movwf	5
  4335  0052  301D               	movlw	29
  4336  0053  318E  2685         	fcall	clear_ram0
  4337  0055                     end_of_initialization:	
  4338                           ;End of C runtime variable initialization code
  4339                           
  4340  0055                     __end_of__initialization:	
  4341  0055  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4342  0056  0020               	movlb	0
  4343  0057  3181  29A7         	ljmp	_main	;jump to C main() function
  4344                           
  4345                           	psect	bssBANK0
  4346  0020                     __pbssBANK0:	
  4347  0020                     _eusartRxStatusBuffer:	
  4348  0020                     	ds	8
  4349  0028                     _eusartRxBuffer:	
  4350  0028                     	ds	8
  4351  0030                     _StateLeds:	
  4352  0030                     	ds	1
  4353  0031                     _PosUart:	
  4354  0031                     	ds	1
  4355  0032                     _StateToggle:	
  4356  0032                     	ds	1
  4357  0033                     _Vitesse:	
  4358  0033                     	ds	1
  4359  0034                     _G:	
  4360  0034                     	ds	1
  4361  0035                     _CptBat:	
  4362  0035                     	ds	1
  4363  0036                     _Type:	
  4364  0036                     	ds	1
  4365  0037                     _Data:	
  4366  0037                     	ds	1
  4367  0038                     _Pos:	
  4368  0038                     	ds	1
  4369  0039                     _eusartRxLastError:	
  4370  0039                     	ds	1
  4371  003A                     _eusartRxCount:	
  4372  003A                     	ds	1
  4373  003B                     _eusartRxTail:	
  4374  003B                     	ds	1
  4375  003C                     _eusartRxHead:	
  4376  003C                     	ds	1
  4377                           
  4378                           	psect	dataBANK0
  4379  005F                     __pdataBANK0:	
  4380  005F                     _StateBat:	
  4381  005F                     	ds	1
  4382  0060                     _Angle:	
  4383  0060                     	ds	1
  4384  0061                     _Validation:	
  4385  0061                     	ds	1
  4386                           
  4387                           	psect	bssBANK1
  4388  00A0                     __pbssBANK1:	
  4389  00A0                     _I2C_Status:	
  4390  00A0                     	ds	29
  4391                           
  4392                           	psect	clrtext
  4393  0E85                     clear_ram0:	
  4394                           ;	Called with FSR0 containing the base address, and
  4395                           ;	WREG with the size to clear
  4396                           
  4397  0E85  0064               	clrwdt	;clear the watchdog before getting into this loop
  4398  0E86                     clrloop0:	
  4399  0E86  0180               	clrf	0	;clear RAM location pointed to by FSR
  4400  0E87  3101               	addfsr 0,1
  4401  0E88  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4402  0E89  2E86               	goto	clrloop0	;have we reached the end yet?
  4403  0E8A  3400               	retlw	0	;all done for this memory range, return
  4404                           
  4405                           	psect	cstackBANK1
  4406  00BD                     __pcstackBANK1:	
  4407  00BD                     _I2C_DO_TX$864:	
  4408                           
  4409                           ; 2 bytes @ 0x0
  4410  00BD                     	ds	2
  4411  00BF                     ??_I2C_MasterFsm:	
  4412                           
  4413                           ; 1 bytes @ 0x2
  4414  00BF                     	ds	3
  4415  00C2                     I2C_MasterOperation@read:	
  4416                           
  4417                           ; 1 bytes @ 0x5
  4418  00C2                     	ds	1
  4419  00C3                     I2C_MasterOperation@returnValue:	
  4420                           
  4421                           ; 1 bytes @ 0x6
  4422  00C3                     	ds	1
  4423  00C4                     ?_I2C_Write1ByteRegister:	
  4424  00C4                     I2C_Write1ByteRegister@reg:	
  4425                           ; 1 bytes @ 0x7
  4426                           
  4427                           
  4428                           ; 1 bytes @ 0x7
  4429  00C4                     	ds	1
  4430  00C5                     I2C_Write1ByteRegister@data:	
  4431                           
  4432                           ; 1 bytes @ 0x8
  4433  00C5                     	ds	1
  4434  00C6                     ??_I2C_Write1ByteRegister:	
  4435                           
  4436                           ; 1 bytes @ 0x9
  4437  00C6                     	ds	1
  4438  00C7                     I2C_Write1ByteRegister@address:	
  4439                           
  4440                           ; 1 bytes @ 0xA
  4441  00C7                     	ds	1
  4442  00C8                     ??_main:	
  4443                           
  4444                           ; 1 bytes @ 0xB
  4445  00C8                     	ds	2
  4446                           
  4447                           	psect	cstackCOMMON
  4448  0070                     __pcstackCOMMON:	
  4449  0070                     ?_I2C_Open:	
  4450  0070                     ?_I2C_MasterWrite:	
  4451                           ; 1 bytes @ 0x0
  4452                           
  4453  0070                     ?_I2C_Close:	
  4454                           ; 1 bytes @ 0x0
  4455                           
  4456  0070                     ?_TMR2_ISR:	
  4457                           ; 1 bytes @ 0x0
  4458                           
  4459  0070                     ?_MATHACC_PID_ISR:	
  4460                           ; 1 bytes @ 0x0
  4461                           
  4462  0070                     ??_MATHACC_PID_ISR:	
  4463                           ; 1 bytes @ 0x0
  4464                           
  4465  0070                     ?_MATHACC_Error_ISR:	
  4466                           ; 1 bytes @ 0x0
  4467                           
  4468  0070                     ??_MATHACC_Error_ISR:	
  4469                           ; 1 bytes @ 0x0
  4470                           
  4471  0070                     ?_I2C_Initialize:	
  4472                           ; 1 bytes @ 0x0
  4473                           
  4474  0070                     ?_PIN_MANAGER_Initialize:	
  4475                           ; 1 bytes @ 0x0
  4476                           
  4477  0070                     ?_OSCILLATOR_Initialize:	
  4478                           ; 1 bytes @ 0x0
  4479                           
  4480  0070                     ?_PWM3_Initialize:	
  4481                           ; 1 bytes @ 0x0
  4482                           
  4483  0070                     ?_TMR2_Initialize:	
  4484                           ; 1 bytes @ 0x0
  4485                           
  4486  0070                     ?_MATHACC_Initialize:	
  4487                           ; 1 bytes @ 0x0
  4488                           
  4489  0070                     ?_EUSART_Initialize:	
  4490                           ; 1 bytes @ 0x0
  4491                           
  4492  0070                     ?_I2C_DO_IDLE:	
  4493                           ; 1 bytes @ 0x0
  4494                           
  4495  0070                     ?_I2C_DO_SEND_ADR_READ:	
  4496                           ; 1 bytes @ 0x0
  4497                           
  4498  0070                     ?_I2C_DO_SEND_ADR_WRITE:	
  4499                           ; 1 bytes @ 0x0
  4500                           
  4501  0070                     ?_I2C_DO_TX:	
  4502                           ; 1 bytes @ 0x0
  4503                           
  4504  0070                     ?_I2C_DO_RX:	
  4505                           ; 1 bytes @ 0x0
  4506                           
  4507  0070                     ?_I2C_DO_RCEN:	
  4508                           ; 1 bytes @ 0x0
  4509                           
  4510  0070                     ?_I2C_DO_TX_EMPTY:	
  4511                           ; 1 bytes @ 0x0
  4512                           
  4513  0070                     ?_I2C_DO_SEND_RESTART_READ:	
  4514                           ; 1 bytes @ 0x0
  4515                           
  4516  0070                     ?_I2C_DO_SEND_RESTART_WRITE:	
  4517                           ; 1 bytes @ 0x0
  4518                           
  4519  0070                     ?_I2C_DO_SEND_RESTART:	
  4520                           ; 1 bytes @ 0x0
  4521                           
  4522  0070                     ?_I2C_DO_SEND_STOP:	
  4523                           ; 1 bytes @ 0x0
  4524                           
  4525  0070                     ?_I2C_DO_RX_ACK:	
  4526                           ; 1 bytes @ 0x0
  4527                           
  4528  0070                     ?_I2C_DO_RX_NACK_STOP:	
  4529                           ; 1 bytes @ 0x0
  4530                           
  4531  0070                     ?_I2C_DO_RX_NACK_RESTART:	
  4532                           ; 1 bytes @ 0x0
  4533                           
  4534  0070                     ?_I2C_DO_RESET:	
  4535                           ; 1 bytes @ 0x0
  4536                           
  4537  0070                     ?_I2C_DO_ADDRESS_NACK:	
  4538                           ; 1 bytes @ 0x0
  4539                           
  4540  0070                     ?_I2C_MasterClearIrq:	
  4541                           ; 1 bytes @ 0x0
  4542                           
  4543  0070                     ?_I2C_MasterOpen:	
  4544                           ; 1 bytes @ 0x0
  4545                           
  4546  0070                     ?_I2C_MasterDisableIrq:	
  4547                           ; 1 bytes @ 0x0
  4548                           
  4549  0070                     ?_I2C_MasterClose:	
  4550                           ; 1 bytes @ 0x0
  4551                           
  4552  0070                     ?_I2C_MasterStart:	
  4553                           ; 1 bytes @ 0x0
  4554                           
  4555  0070                     ?_I2C_Poller:	
  4556                           ; 1 bytes @ 0x0
  4557                           
  4558  0070                     ?_I2C_MasterWaitForEvent:	
  4559                           ; 1 bytes @ 0x0
  4560                           
  4561  0070                     ?_I2C_MasterFsm:	
  4562                           ; 1 bytes @ 0x0
  4563                           
  4564  0070                     ?_I2C_MasterIsNack:	
  4565                           ; 1 bytes @ 0x0
  4566                           
  4567  0070                     ?_I2C_MasterSendTxData:	
  4568                           ; 1 bytes @ 0x0
  4569                           
  4570  0070                     ?_I2C_MasterGetRxData:	
  4571                           ; 1 bytes @ 0x0
  4572                           
  4573  0070                     ?_I2C_MasterSendAck:	
  4574                           ; 1 bytes @ 0x0
  4575                           
  4576  0070                     ?_I2C_MasterStartRx:	
  4577                           ; 1 bytes @ 0x0
  4578                           
  4579  0070                     ?_I2C_MasterSetIrq:	
  4580                           ; 1 bytes @ 0x0
  4581                           
  4582  0070                     ?_I2C_MasterEnableRestart:	
  4583                           ; 1 bytes @ 0x0
  4584                           
  4585  0070                     ?_I2C_MasterStop:	
  4586                           ; 1 bytes @ 0x0
  4587                           
  4588  0070                     ?_I2C_MasterSendNack:	
  4589                           ; 1 bytes @ 0x0
  4590                           
  4591  0070                     ?_EUSART_Receive_ISR:	
  4592                           ; 1 bytes @ 0x0
  4593                           
  4594  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  4595                           ; 1 bytes @ 0x0
  4596                           
  4597  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  4598                           ; 1 bytes @ 0x0
  4599                           
  4600  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  4601                           ; 1 bytes @ 0x0
  4602                           
  4603  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  4604                           ; 1 bytes @ 0x0
  4605                           
  4606  0070                     ?_EUSART_DefaultErrorHandler:	
  4607                           ; 1 bytes @ 0x0
  4608                           
  4609  0070                     ?_EUSART_RxDataHandler:	
  4610                           ; 1 bytes @ 0x0
  4611                           
  4612  0070                     ??_EUSART_RxDataHandler:	
  4613                           ; 1 bytes @ 0x0
  4614                           
  4615  0070                     ?_TMR2_DefaultInterruptHandler:	
  4616                           ; 1 bytes @ 0x0
  4617                           
  4618  0070                     ??_TMR2_DefaultInterruptHandler:	
  4619                           ; 1 bytes @ 0x0
  4620                           
  4621  0070                     ?_TMR2_CallBack:	
  4622                           ; 1 bytes @ 0x0
  4623                           
  4624  0070                     ?_INTERRUPT_InterruptManager:	
  4625                           ; 1 bytes @ 0x0
  4626                           
  4627  0070                     ?_SYSTEM_Initialize:	
  4628                           ; 1 bytes @ 0x0
  4629                           
  4630  0070                     ?_I2C_MasterOperation:	
  4631                           ; 1 bytes @ 0x0
  4632                           
  4633  0070                     ?_EUSART_Write:	
  4634                           ; 1 bytes @ 0x0
  4635                           
  4636  0070                     ??_EUSART_Write:	
  4637                           ; 1 bytes @ 0x0
  4638                           
  4639  0070                     ?_PWM3_LoadDutyValue:	
  4640                           ; 1 bytes @ 0x0
  4641                           
  4642  0070                     ?_TMR2_Start:	
  4643                           ; 1 bytes @ 0x0
  4644                           
  4645  0070                     ?_TMR2_StartTimer:	
  4646                           ; 1 bytes @ 0x0
  4647                           
  4648  0070                     ?_TMR2_Counter8BitSet:	
  4649                           ; 1 bytes @ 0x0
  4650                           
  4651  0070                     ?_TMR2_WriteTimer:	
  4652                           ; 1 bytes @ 0x0
  4653                           
  4654  0070                     ?_MATHACC_PIDController:	
  4655                           ; 1 bytes @ 0x0
  4656                           
  4657  0070                     ?_MyTimer2ISR:	
  4658                           ; 1 bytes @ 0x0
  4659                           
  4660  0070                     ?_MyUART_ISR:	
  4661                           ; 1 bytes @ 0x0
  4662                           
  4663  0070                     ?_MyDelay:	
  4664                           ; 1 bytes @ 0x0
  4665                           
  4666  0070                     ?_main:	
  4667                           ; 1 bytes @ 0x0
  4668                           
  4669  0070                     ?i1_I2C_Open:	
  4670                           ; 1 bytes @ 0x0
  4671                           
  4672  0070                     ??i1_I2C_Open:	
  4673                           ; 1 bytes @ 0x0
  4674                           
  4675  0070                     ?i1_I2C_Close:	
  4676                           ; 1 bytes @ 0x0
  4677                           
  4678  0070                     ??i1_I2C_Close:	
  4679                           ; 1 bytes @ 0x0
  4680                           
  4681  0070                     ?i1_I2C_MasterOperation:	
  4682                           ; 1 bytes @ 0x0
  4683                           
  4684  0070                     ?i1_I2C_MasterWrite:	
  4685                           ; 1 bytes @ 0x0
  4686                           
  4687  0070                     ?i1_I2C_SetBuffer:	
  4688                           ; 1 bytes @ 0x0
  4689                           
  4690  0070                     ?i1_I2C_SetCallback:	
  4691                           ; 1 bytes @ 0x0
  4692                           
  4693  0070                     ?i1_I2C_Poller:	
  4694                           ; 1 bytes @ 0x0
  4695                           
  4696  0070                     ?i1_I2C_MasterFsm:	
  4697                           ; 1 bytes @ 0x0
  4698                           
  4699  0070                     ?i1_I2C_DO_IDLE:	
  4700                           ; 1 bytes @ 0x0
  4701                           
  4702  0070                     ??i1_I2C_DO_IDLE:	
  4703                           ; 1 bytes @ 0x0
  4704                           
  4705  0070                     ?i1_I2C_DO_SEND_ADR_READ:	
  4706                           ; 1 bytes @ 0x0
  4707                           
  4708  0070                     ??i1_I2C_DO_SEND_ADR_READ:	
  4709                           ; 1 bytes @ 0x0
  4710                           
  4711  0070                     ?i1_I2C_DO_SEND_ADR_WRITE:	
  4712                           ; 1 bytes @ 0x0
  4713                           
  4714  0070                     ??i1_I2C_DO_SEND_ADR_WRITE:	
  4715                           ; 1 bytes @ 0x0
  4716                           
  4717  0070                     ?i1_I2C_DO_TX:	
  4718                           ; 1 bytes @ 0x0
  4719                           
  4720  0070                     ?i1_I2C_DO_RX:	
  4721                           ; 1 bytes @ 0x0
  4722                           
  4723  0070                     ?i1_I2C_DO_RCEN:	
  4724                           ; 1 bytes @ 0x0
  4725                           
  4726  0070                     ??i1_I2C_DO_RCEN:	
  4727                           ; 1 bytes @ 0x0
  4728                           
  4729  0070                     ?i1_I2C_DO_TX_EMPTY:	
  4730                           ; 1 bytes @ 0x0
  4731                           
  4732  0070                     ?i1_I2C_DO_SEND_RESTART_READ:	
  4733                           ; 1 bytes @ 0x0
  4734                           
  4735  0070                     ??i1_I2C_DO_SEND_RESTART_READ:	
  4736                           ; 1 bytes @ 0x0
  4737                           
  4738  0070                     ?i1_I2C_DO_SEND_RESTART_WRITE:	
  4739                           ; 1 bytes @ 0x0
  4740                           
  4741  0070                     ??i1_I2C_DO_SEND_RESTART_WRITE:	
  4742                           ; 1 bytes @ 0x0
  4743                           
  4744  0070                     ?i1_I2C_DO_SEND_RESTART:	
  4745                           ; 1 bytes @ 0x0
  4746                           
  4747  0070                     ??i1_I2C_DO_SEND_RESTART:	
  4748                           ; 1 bytes @ 0x0
  4749                           
  4750  0070                     ?i1_I2C_DO_SEND_STOP:	
  4751                           ; 1 bytes @ 0x0
  4752                           
  4753  0070                     ??i1_I2C_DO_SEND_STOP:	
  4754                           ; 1 bytes @ 0x0
  4755                           
  4756  0070                     ?i1_I2C_DO_RX_ACK:	
  4757                           ; 1 bytes @ 0x0
  4758                           
  4759  0070                     ??i1_I2C_DO_RX_ACK:	
  4760                           ; 1 bytes @ 0x0
  4761                           
  4762  0070                     ?i1_I2C_DO_RX_NACK_STOP:	
  4763                           ; 1 bytes @ 0x0
  4764                           
  4765  0070                     ??i1_I2C_DO_RX_NACK_STOP:	
  4766                           ; 1 bytes @ 0x0
  4767                           
  4768  0070                     ?i1_I2C_DO_RX_NACK_RESTART:	
  4769                           ; 1 bytes @ 0x0
  4770                           
  4771  0070                     ??i1_I2C_DO_RX_NACK_RESTART:	
  4772                           ; 1 bytes @ 0x0
  4773                           
  4774  0070                     ?i1_I2C_DO_RESET:	
  4775                           ; 1 bytes @ 0x0
  4776                           
  4777  0070                     ??i1_I2C_DO_RESET:	
  4778                           ; 1 bytes @ 0x0
  4779                           
  4780  0070                     ?i1_I2C_DO_ADDRESS_NACK:	
  4781                           ; 1 bytes @ 0x0
  4782                           
  4783  0070                     ?i1_I2C_MasterOpen:	
  4784                           ; 1 bytes @ 0x0
  4785                           
  4786  0070                     ??i1_I2C_MasterOpen:	
  4787                           ; 1 bytes @ 0x0
  4788                           
  4789  0070                     ?i1_I2C_MasterClose:	
  4790                           ; 1 bytes @ 0x0
  4791                           
  4792  0070                     ??i1_I2C_MasterClose:	
  4793                           ; 1 bytes @ 0x0
  4794                           
  4795  0070                     ?i1_I2C_MasterGetRxData:	
  4796                           ; 1 bytes @ 0x0
  4797                           
  4798  0070                     ??i1_I2C_MasterGetRxData:	
  4799                           ; 1 bytes @ 0x0
  4800                           
  4801  0070                     ?i1_I2C_MasterSendTxData:	
  4802                           ; 1 bytes @ 0x0
  4803                           
  4804  0070                     ??i1_I2C_MasterSendTxData:	
  4805                           ; 1 bytes @ 0x0
  4806                           
  4807  0070                     ?i1_I2C_MasterEnableRestart:	
  4808                           ; 1 bytes @ 0x0
  4809                           
  4810  0070                     ??i1_I2C_MasterEnableRestart:	
  4811                           ; 1 bytes @ 0x0
  4812                           
  4813  0070                     ?i1_I2C_MasterStartRx:	
  4814                           ; 1 bytes @ 0x0
  4815                           
  4816  0070                     ??i1_I2C_MasterStartRx:	
  4817                           ; 1 bytes @ 0x0
  4818                           
  4819  0070                     ?i1_I2C_MasterStart:	
  4820                           ; 1 bytes @ 0x0
  4821                           
  4822  0070                     ??i1_I2C_MasterStart:	
  4823                           ; 1 bytes @ 0x0
  4824                           
  4825  0070                     ?i1_I2C_MasterStop:	
  4826                           ; 1 bytes @ 0x0
  4827                           
  4828  0070                     ??i1_I2C_MasterStop:	
  4829                           ; 1 bytes @ 0x0
  4830                           
  4831  0070                     ?i1_I2C_MasterIsNack:	
  4832                           ; 1 bytes @ 0x0
  4833                           
  4834  0070                     ??i1_I2C_MasterIsNack:	
  4835                           ; 1 bytes @ 0x0
  4836                           
  4837  0070                     ?i1_I2C_MasterSendAck:	
  4838                           ; 1 bytes @ 0x0
  4839                           
  4840  0070                     ??i1_I2C_MasterSendAck:	
  4841                           ; 1 bytes @ 0x0
  4842                           
  4843  0070                     ?i1_I2C_MasterSendNack:	
  4844                           ; 1 bytes @ 0x0
  4845                           
  4846  0070                     ??i1_I2C_MasterSendNack:	
  4847                           ; 1 bytes @ 0x0
  4848                           
  4849  0070                     ?i1_I2C_MasterDisableIrq:	
  4850                           ; 1 bytes @ 0x0
  4851                           
  4852  0070                     ??i1_I2C_MasterDisableIrq:	
  4853                           ; 1 bytes @ 0x0
  4854                           
  4855  0070                     ?i1_I2C_MasterClearIrq:	
  4856                           ; 1 bytes @ 0x0
  4857                           
  4858  0070                     ??i1_I2C_MasterClearIrq:	
  4859                           ; 1 bytes @ 0x0
  4860                           
  4861  0070                     ?i1_I2C_MasterSetIrq:	
  4862                           ; 1 bytes @ 0x0
  4863                           
  4864  0070                     ??i1_I2C_MasterSetIrq:	
  4865                           ; 1 bytes @ 0x0
  4866                           
  4867  0070                     ?i1_I2C_MasterWaitForEvent:	
  4868                           ; 1 bytes @ 0x0
  4869                           
  4870  0070                     ??i1_I2C_MasterWaitForEvent:	
  4871                           ; 1 bytes @ 0x0
  4872                           
  4873  0070                     EUSART_Write@txData:	
  4874                           ; 1 bytes @ 0x0
  4875                           
  4876  0070                     i1I2C_MasterSendTxData@data:	
  4877                           ; 1 bytes @ 0x0
  4878                           
  4879  0070                     PWM3_LoadDutyValue@dutyValue:	
  4880                           ; 1 bytes @ 0x0
  4881                           
  4882  0070                     MATHACC_PIDController@setpoint:	
  4883                           ; 2 bytes @ 0x0
  4884                           
  4885  0070                     i1I2C_SetBuffer@bufferSize:	
  4886                           ; 2 bytes @ 0x0
  4887                           
  4888  0070                     i1I2C_SetCallback@cb:	
  4889                           ; 2 bytes @ 0x0
  4890                           
  4891                           
  4892                           ; 2 bytes @ 0x0
  4893  0070                     	ds	1
  4894  0071                     ??_EUSART_Receive_ISR:	
  4895  0071                     ??_EUSART_DefaultErrorHandler:	
  4896                           ; 1 bytes @ 0x1
  4897                           
  4898  0071                     ??_MyUART_ISR:	
  4899                           ; 1 bytes @ 0x1
  4900                           
  4901  0071                     i1I2C_Open@address:	
  4902                           ; 1 bytes @ 0x1
  4903                           
  4904  0071                     i1I2C_Close@returnValue:	
  4905                           ; 1 bytes @ 0x1
  4906                           
  4907                           
  4908                           ; 1 bytes @ 0x1
  4909  0071                     	ds	1
  4910  0072                     ??_PWM3_LoadDutyValue:	
  4911  0072                     ??i1_I2C_SetBuffer:	
  4912                           ; 1 bytes @ 0x2
  4913                           
  4914  0072                     i1I2C_Open@returnValue:	
  4915                           ; 1 bytes @ 0x2
  4916                           
  4917  0072                     i1I2C_SetCallback@ptr:	
  4918                           ; 1 bytes @ 0x2
  4919                           
  4920  0072                     MATHACC_PIDController@input:	
  4921                           ; 1 bytes @ 0x2
  4922                           
  4923                           
  4924                           ; 2 bytes @ 0x2
  4925  0072                     	ds	1
  4926  0073                     ??i1_I2C_SetCallback:	
  4927  0073                     i1I2C_SetBuffer@buffer:	
  4928                           ; 1 bytes @ 0x3
  4929                           
  4930                           
  4931                           ; 1 bytes @ 0x3
  4932  0073                     	ds	1
  4933  0074                     ??_MATHACC_PIDController:	
  4934  0074                     i1I2C_SetCallback@idx:	
  4935                           ; 1 bytes @ 0x4
  4936                           
  4937                           
  4938                           ; 1 bytes @ 0x4
  4939  0074                     	ds	1
  4940  0075                     ?i1_I2C_SetDataCompleteCallback:	
  4941  0075                     ?i1_I2C_SetAddressNackCallback:	
  4942                           ; 1 bytes @ 0x5
  4943                           
  4944  0075                     MyUART_ISR@c:	
  4945                           ; 1 bytes @ 0x5
  4946                           
  4947  0075                     i1I2C_SetDataCompleteCallback@cb:	
  4948                           ; 1 bytes @ 0x5
  4949                           
  4950  0075                     i1I2C_SetAddressNackCallback@cb:	
  4951                           ; 2 bytes @ 0x5
  4952                           
  4953                           
  4954                           ; 2 bytes @ 0x5
  4955  0075                     	ds	2
  4956  0077                     i1I2C_SetDataCompleteCallback@ptr:	
  4957  0077                     i1I2C_SetAddressNackCallback@ptr:	
  4958                           ; 1 bytes @ 0x7
  4959                           
  4960                           
  4961                           ; 1 bytes @ 0x7
  4962  0077                     	ds	1
  4963  0078                     ??i1_I2C_SetDataCompleteCallback:	
  4964  0078                     ??i1_I2C_SetAddressNackCallback:	
  4965                           ; 1 bytes @ 0x8
  4966                           
  4967                           
  4968                           ; 1 bytes @ 0x8
  4969  0078                     	ds	1
  4970  0079                     ?i1_rd1RegCompleteHandler:	
  4971  0079                     ?i1_rd2RegCompleteHandler:	
  4972                           ; 1 bytes @ 0x9
  4973                           
  4974  0079                     ?i1_wr1RegCompleteHandler:	
  4975                           ; 1 bytes @ 0x9
  4976                           
  4977  0079                     ?i1_wr2RegCompleteHandler:	
  4978                           ; 1 bytes @ 0x9
  4979                           
  4980  0079                     ?i1_rdBlkRegCompleteHandler:	
  4981                           ; 1 bytes @ 0x9
  4982                           
  4983  0079                     ?i1_I2C_CallbackReturnStop:	
  4984                           ; 1 bytes @ 0x9
  4985                           
  4986  0079                     ?i1_I2C_CallbackReturnReset:	
  4987                           ; 1 bytes @ 0x9
  4988                           
  4989  0079                     i1rd1RegCompleteHandler@ptr:	
  4990                           ; 1 bytes @ 0x9
  4991                           
  4992  0079                     i1rd2RegCompleteHandler@ptr:	
  4993                           ; 1 bytes @ 0x9
  4994                           
  4995  0079                     i1wr1RegCompleteHandler@ptr:	
  4996                           ; 1 bytes @ 0x9
  4997                           
  4998  0079                     i1wr2RegCompleteHandler@ptr:	
  4999                           ; 1 bytes @ 0x9
  5000                           
  5001  0079                     i1rdBlkRegCompleteHandler@ptr:	
  5002                           ; 1 bytes @ 0x9
  5003                           
  5004  0079                     i1I2C_CallbackReturnStop@funPtr:	
  5005                           ; 1 bytes @ 0x9
  5006                           
  5007  0079                     i1I2C_CallbackReturnReset@funPtr:	
  5008                           ; 1 bytes @ 0x9
  5009                           
  5010                           
  5011                           ; 1 bytes @ 0x9
  5012  0079                     	ds	1
  5013  007A                     ??i1_rd1RegCompleteHandler:	
  5014  007A                     ??i1_rd2RegCompleteHandler:	
  5015                           ; 1 bytes @ 0xA
  5016                           
  5017  007A                     ??i1_wr1RegCompleteHandler:	
  5018                           ; 1 bytes @ 0xA
  5019                           
  5020  007A                     ??i1_wr2RegCompleteHandler:	
  5021                           ; 1 bytes @ 0xA
  5022                           
  5023  007A                     ??i1_rdBlkRegCompleteHandler:	
  5024                           ; 1 bytes @ 0xA
  5025                           
  5026  007A                     ??i1_I2C_DO_TX:	
  5027                           ; 1 bytes @ 0xA
  5028                           
  5029  007A                     ??i1_I2C_DO_RX:	
  5030                           ; 1 bytes @ 0xA
  5031                           
  5032  007A                     ??i1_I2C_DO_TX_EMPTY:	
  5033                           ; 1 bytes @ 0xA
  5034                           
  5035  007A                     ??i1_I2C_DO_ADDRESS_NACK:	
  5036                           ; 1 bytes @ 0xA
  5037                           
  5038  007A                     ??i1_I2C_CallbackReturnStop:	
  5039                           ; 1 bytes @ 0xA
  5040                           
  5041  007A                     ??i1_I2C_CallbackReturnReset:	
  5042                           ; 1 bytes @ 0xA
  5043                           
  5044                           
  5045                           ; 1 bytes @ 0xA
  5046  007A                     	ds	1
  5047  007B                     i1_I2C_DO_TX$864:	
  5048                           
  5049                           ; 2 bytes @ 0xB
  5050  007B                     	ds	2
  5051  007D                     ??i1_I2C_MasterOperation:	
  5052  007D                     ??i1_I2C_Poller:	
  5053                           ; 1 bytes @ 0xD
  5054                           
  5055                           
  5056                           ; 1 bytes @ 0xD
  5057  007D                     	ds	1
  5058  007E                     ??_TMR2_ISR:	
  5059  007E                     ??_TMR2_CallBack:	
  5060                           ; 1 bytes @ 0xE
  5061                           
  5062  007E                     ??i1_I2C_MasterWrite:	
  5063                           ; 1 bytes @ 0xE
  5064                           
  5065                           
  5066                           	psect	cstackBANK0
  5067  003D                     __pcstackBANK0:	
  5068                           ; 1 bytes @ 0xE
  5069                           
  5070  003D                     ??i1_I2C_MasterFsm:	
  5071                           
  5072                           ; 1 bytes @ 0x0
  5073  003D                     	ds	3
  5074  0040                     i1I2C_MasterOperation@read:	
  5075                           
  5076                           ; 1 bytes @ 0x3
  5077  0040                     	ds	1
  5078  0041                     i1I2C_MasterOperation@returnValue:	
  5079                           
  5080                           ; 1 bytes @ 0x4
  5081  0041                     	ds	1
  5082  0042                     ?_I2C_Read1ByteRegister:	
  5083  0042                     ?i1_I2C_Write1ByteRegister:	
  5084                           ; 1 bytes @ 0x5
  5085                           
  5086  0042                     I2C_Read1ByteRegister@reg:	
  5087                           ; 1 bytes @ 0x5
  5088                           
  5089  0042                     i1I2C_Write1ByteRegister@reg:	
  5090                           ; 1 bytes @ 0x5
  5091                           
  5092                           
  5093                           ; 1 bytes @ 0x5
  5094  0042                     	ds	1
  5095  0043                     ??_I2C_Read1ByteRegister:	
  5096  0043                     i1I2C_Write1ByteRegister@data:	
  5097                           ; 1 bytes @ 0x6
  5098                           
  5099                           
  5100                           ; 1 bytes @ 0x6
  5101  0043                     	ds	1
  5102  0044                     ??i1_I2C_Write1ByteRegister:	
  5103  0044                     I2C_Read1ByteRegister@address:	
  5104                           ; 1 bytes @ 0x7
  5105                           
  5106                           
  5107                           ; 1 bytes @ 0x7
  5108  0044                     	ds	1
  5109  0045                     I2C_Read1ByteRegister@returnValue:	
  5110  0045                     i1I2C_Write1ByteRegister@address:	
  5111                           ; 1 bytes @ 0x8
  5112                           
  5113                           
  5114                           ; 1 bytes @ 0x8
  5115  0045                     	ds	1
  5116  0046                     ??_MyTimer2ISR:	
  5117                           
  5118                           ; 1 bytes @ 0x9
  5119  0046                     	ds	4
  5120  004A                     ??_INTERRUPT_InterruptManager:	
  5121                           
  5122                           ; 1 bytes @ 0xD
  5123  004A                     	ds	1
  5124  004B                     ??_I2C_Open:	
  5125  004B                     ?_I2C_SetBuffer:	
  5126                           ; 1 bytes @ 0xE
  5127                           
  5128  004B                     ??_I2C_Close:	
  5129                           ; 1 bytes @ 0xE
  5130                           
  5131  004B                     ??_I2C_Initialize:	
  5132                           ; 1 bytes @ 0xE
  5133                           
  5134  004B                     ??_PIN_MANAGER_Initialize:	
  5135                           ; 1 bytes @ 0xE
  5136                           
  5137  004B                     ??_OSCILLATOR_Initialize:	
  5138                           ; 1 bytes @ 0xE
  5139                           
  5140  004B                     ??_PWM3_Initialize:	
  5141                           ; 1 bytes @ 0xE
  5142                           
  5143  004B                     ??_MATHACC_Initialize:	
  5144                           ; 1 bytes @ 0xE
  5145                           
  5146  004B                     ??_I2C_DO_IDLE:	
  5147                           ; 1 bytes @ 0xE
  5148                           
  5149  004B                     ??_I2C_DO_SEND_ADR_READ:	
  5150                           ; 1 bytes @ 0xE
  5151                           
  5152  004B                     ??_I2C_DO_RCEN:	
  5153                           ; 1 bytes @ 0xE
  5154                           
  5155  004B                     ??_I2C_DO_SEND_RESTART_READ:	
  5156                           ; 1 bytes @ 0xE
  5157                           
  5158  004B                     ??_I2C_DO_SEND_RESTART_WRITE:	
  5159                           ; 1 bytes @ 0xE
  5160                           
  5161  004B                     ??_I2C_DO_SEND_RESTART:	
  5162                           ; 1 bytes @ 0xE
  5163                           
  5164  004B                     ??_I2C_DO_SEND_STOP:	
  5165                           ; 1 bytes @ 0xE
  5166                           
  5167  004B                     ??_I2C_DO_RX_ACK:	
  5168                           ; 1 bytes @ 0xE
  5169                           
  5170  004B                     ??_I2C_DO_RX_NACK_STOP:	
  5171                           ; 1 bytes @ 0xE
  5172                           
  5173  004B                     ??_I2C_DO_RX_NACK_RESTART:	
  5174                           ; 1 bytes @ 0xE
  5175                           
  5176  004B                     ??_I2C_DO_RESET:	
  5177                           ; 1 bytes @ 0xE
  5178                           
  5179  004B                     ??_I2C_MasterClearIrq:	
  5180                           ; 1 bytes @ 0xE
  5181                           
  5182  004B                     ??_I2C_MasterOpen:	
  5183                           ; 1 bytes @ 0xE
  5184                           
  5185  004B                     ??_I2C_MasterDisableIrq:	
  5186                           ; 1 bytes @ 0xE
  5187                           
  5188  004B                     ??_I2C_MasterClose:	
  5189                           ; 1 bytes @ 0xE
  5190                           
  5191  004B                     ??_I2C_MasterStart:	
  5192                           ; 1 bytes @ 0xE
  5193                           
  5194  004B                     ?_I2C_SetCallback:	
  5195                           ; 1 bytes @ 0xE
  5196                           
  5197  004B                     ??_I2C_MasterWaitForEvent:	
  5198                           ; 1 bytes @ 0xE
  5199                           
  5200  004B                     ??_I2C_MasterIsNack:	
  5201                           ; 1 bytes @ 0xE
  5202                           
  5203  004B                     ??_I2C_MasterSendTxData:	
  5204                           ; 1 bytes @ 0xE
  5205                           
  5206  004B                     ??_I2C_MasterGetRxData:	
  5207                           ; 1 bytes @ 0xE
  5208                           
  5209  004B                     ??_I2C_MasterSendAck:	
  5210                           ; 1 bytes @ 0xE
  5211                           
  5212  004B                     ??_I2C_MasterStartRx:	
  5213                           ; 1 bytes @ 0xE
  5214                           
  5215  004B                     ??_I2C_MasterSetIrq:	
  5216                           ; 1 bytes @ 0xE
  5217                           
  5218  004B                     ??_I2C_MasterEnableRestart:	
  5219                           ; 1 bytes @ 0xE
  5220                           
  5221  004B                     ??_I2C_MasterStop:	
  5222                           ; 1 bytes @ 0xE
  5223                           
  5224  004B                     ??_I2C_MasterSendNack:	
  5225                           ; 1 bytes @ 0xE
  5226                           
  5227  004B                     ?_EUSART_SetRxInterruptHandler:	
  5228                           ; 1 bytes @ 0xE
  5229                           
  5230  004B                     ?_EUSART_SetFramingErrorHandler:	
  5231                           ; 1 bytes @ 0xE
  5232                           
  5233  004B                     ?_EUSART_SetOverrunErrorHandler:	
  5234                           ; 1 bytes @ 0xE
  5235                           
  5236  004B                     ?_EUSART_SetErrorHandler:	
  5237                           ; 1 bytes @ 0xE
  5238                           
  5239  004B                     ?_TMR2_SetInterruptHandler:	
  5240                           ; 1 bytes @ 0xE
  5241                           
  5242  004B                     ??_TMR2_Start:	
  5243                           ; 1 bytes @ 0xE
  5244                           
  5245  004B                     ??_TMR2_StartTimer:	
  5246                           ; 1 bytes @ 0xE
  5247                           
  5248  004B                     ??_TMR2_Counter8BitSet:	
  5249                           ; 1 bytes @ 0xE
  5250                           
  5251  004B                     ??_MyDelay:	
  5252                           ; 1 bytes @ 0xE
  5253                           
  5254  004B                     I2C_MasterSendTxData@data:	
  5255                           ; 1 bytes @ 0xE
  5256                           
  5257  004B                     TMR2_Counter8BitSet@timerVal:	
  5258                           ; 1 bytes @ 0xE
  5259                           
  5260  004B                     I2C_SetBuffer@bufferSize:	
  5261                           ; 1 bytes @ 0xE
  5262                           
  5263  004B                     I2C_SetCallback@cb:	
  5264                           ; 2 bytes @ 0xE
  5265                           
  5266  004B                     EUSART_SetFramingErrorHandler@interruptHandler:	
  5267                           ; 2 bytes @ 0xE
  5268                           
  5269  004B                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  5270                           ; 2 bytes @ 0xE
  5271                           
  5272  004B                     EUSART_SetErrorHandler@interruptHandler:	
  5273                           ; 2 bytes @ 0xE
  5274                           
  5275  004B                     EUSART_SetRxInterruptHandler@interruptHandler:	
  5276                           ; 2 bytes @ 0xE
  5277                           
  5278  004B                     TMR2_SetInterruptHandler@InterruptHandler:	
  5279                           ; 2 bytes @ 0xE
  5280                           
  5281                           
  5282                           ; 2 bytes @ 0xE
  5283  004B                     	ds	1
  5284  004C                     ??_I2C_DO_SEND_ADR_WRITE:	
  5285  004C                     ??_TMR2_WriteTimer:	
  5286                           ; 1 bytes @ 0xF
  5287                           
  5288  004C                     I2C_Open@address:	
  5289                           ; 1 bytes @ 0xF
  5290                           
  5291  004C                     I2C_Close@returnValue:	
  5292                           ; 1 bytes @ 0xF
  5293                           
  5294  004C                     TMR2_WriteTimer@timerVal:	
  5295                           ; 1 bytes @ 0xF
  5296                           
  5297                           
  5298                           ; 1 bytes @ 0xF
  5299  004C                     	ds	1
  5300  004D                     ??_I2C_SetBuffer:	
  5301  004D                     ??_TMR2_Initialize:	
  5302                           ; 1 bytes @ 0x10
  5303                           
  5304  004D                     ??_EUSART_Initialize:	
  5305                           ; 1 bytes @ 0x10
  5306                           
  5307  004D                     ??_EUSART_SetRxInterruptHandler:	
  5308                           ; 1 bytes @ 0x10
  5309                           
  5310  004D                     ??_EUSART_SetFramingErrorHandler:	
  5311                           ; 1 bytes @ 0x10
  5312                           
  5313  004D                     ??_EUSART_SetOverrunErrorHandler:	
  5314                           ; 1 bytes @ 0x10
  5315                           
  5316  004D                     ??_EUSART_SetErrorHandler:	
  5317                           ; 1 bytes @ 0x10
  5318                           
  5319  004D                     ??_TMR2_SetInterruptHandler:	
  5320                           ; 1 bytes @ 0x10
  5321                           
  5322  004D                     ??_SYSTEM_Initialize:	
  5323                           ; 1 bytes @ 0x10
  5324                           
  5325  004D                     I2C_Open@returnValue:	
  5326                           ; 1 bytes @ 0x10
  5327                           
  5328  004D                     I2C_SetCallback@ptr:	
  5329                           ; 1 bytes @ 0x10
  5330                           
  5331                           
  5332                           ; 1 bytes @ 0x10
  5333  004D                     	ds	1
  5334  004E                     ??_I2C_SetCallback:	
  5335  004E                     I2C_SetBuffer@buffer:	
  5336                           ; 1 bytes @ 0x11
  5337                           
  5338                           
  5339                           ; 1 bytes @ 0x11
  5340  004E                     	ds	1
  5341  004F                     I2C_SetCallback@idx:	
  5342                           
  5343                           ; 1 bytes @ 0x12
  5344  004F                     	ds	1
  5345  0050                     ?_I2C_SetDataCompleteCallback:	
  5346  0050                     ?_I2C_SetAddressNackCallback:	
  5347                           ; 1 bytes @ 0x13
  5348                           
  5349  0050                     MyDelay@i:	
  5350                           ; 1 bytes @ 0x13
  5351                           
  5352  0050                     I2C_SetDataCompleteCallback@cb:	
  5353                           ; 1 bytes @ 0x13
  5354                           
  5355  0050                     I2C_SetAddressNackCallback@cb:	
  5356                           ; 2 bytes @ 0x13
  5357                           
  5358                           
  5359                           ; 2 bytes @ 0x13
  5360  0050                     	ds	2
  5361  0052                     I2C_SetDataCompleteCallback@ptr:	
  5362  0052                     I2C_SetAddressNackCallback@ptr:	
  5363                           ; 1 bytes @ 0x15
  5364                           
  5365                           
  5366                           ; 1 bytes @ 0x15
  5367  0052                     	ds	1
  5368  0053                     ??_I2C_SetDataCompleteCallback:	
  5369  0053                     ??_I2C_SetAddressNackCallback:	
  5370                           ; 1 bytes @ 0x16
  5371                           
  5372                           
  5373                           ; 1 bytes @ 0x16
  5374  0053                     	ds	1
  5375  0054                     ?_rd1RegCompleteHandler:	
  5376  0054                     ?_rd2RegCompleteHandler:	
  5377                           ; 1 bytes @ 0x17
  5378                           
  5379  0054                     ?_wr1RegCompleteHandler:	
  5380                           ; 1 bytes @ 0x17
  5381                           
  5382  0054                     ?_wr2RegCompleteHandler:	
  5383                           ; 1 bytes @ 0x17
  5384                           
  5385  0054                     ?_rdBlkRegCompleteHandler:	
  5386                           ; 1 bytes @ 0x17
  5387                           
  5388  0054                     ?_I2C_CallbackReturnStop:	
  5389                           ; 1 bytes @ 0x17
  5390                           
  5391  0054                     ?_I2C_CallbackReturnReset:	
  5392                           ; 1 bytes @ 0x17
  5393                           
  5394  0054                     rd1RegCompleteHandler@ptr:	
  5395                           ; 1 bytes @ 0x17
  5396                           
  5397  0054                     rd2RegCompleteHandler@ptr:	
  5398                           ; 1 bytes @ 0x17
  5399                           
  5400  0054                     wr1RegCompleteHandler@ptr:	
  5401                           ; 1 bytes @ 0x17
  5402                           
  5403  0054                     wr2RegCompleteHandler@ptr:	
  5404                           ; 1 bytes @ 0x17
  5405                           
  5406  0054                     rdBlkRegCompleteHandler@ptr:	
  5407                           ; 1 bytes @ 0x17
  5408                           
  5409  0054                     I2C_CallbackReturnStop@funPtr:	
  5410                           ; 1 bytes @ 0x17
  5411                           
  5412  0054                     I2C_CallbackReturnReset@funPtr:	
  5413                           ; 1 bytes @ 0x17
  5414                           
  5415                           
  5416                           ; 1 bytes @ 0x17
  5417  0054                     	ds	1
  5418  0055                     ??_rd1RegCompleteHandler:	
  5419  0055                     ??_rd2RegCompleteHandler:	
  5420                           ; 1 bytes @ 0x18
  5421                           
  5422  0055                     ??_wr1RegCompleteHandler:	
  5423                           ; 1 bytes @ 0x18
  5424                           
  5425  0055                     ??_wr2RegCompleteHandler:	
  5426                           ; 1 bytes @ 0x18
  5427                           
  5428  0055                     ??_rdBlkRegCompleteHandler:	
  5429                           ; 1 bytes @ 0x18
  5430                           
  5431  0055                     ??_I2C_DO_TX:	
  5432                           ; 1 bytes @ 0x18
  5433                           
  5434  0055                     ??_I2C_DO_RX:	
  5435                           ; 1 bytes @ 0x18
  5436                           
  5437  0055                     ??_I2C_DO_TX_EMPTY:	
  5438                           ; 1 bytes @ 0x18
  5439                           
  5440  0055                     ??_I2C_DO_ADDRESS_NACK:	
  5441                           ; 1 bytes @ 0x18
  5442                           
  5443  0055                     ??_I2C_CallbackReturnStop:	
  5444                           ; 1 bytes @ 0x18
  5445                           
  5446  0055                     ??_I2C_CallbackReturnReset:	
  5447                           ; 1 bytes @ 0x18
  5448                           
  5449                           
  5450                           ; 1 bytes @ 0x18
  5451  0055                     	ds	1
  5452  0056                     ??_I2C_Poller:	
  5453  0056                     ??_I2C_MasterOperation:	
  5454                           ; 1 bytes @ 0x19
  5455                           
  5456                           
  5457                           ; 1 bytes @ 0x19
  5458  0056                     	ds	1
  5459  0057                     ??_I2C_MasterWrite:	
  5460                           
  5461                           	psect	maintext
  5462  01A7                     __pmaintext:	
  5463                           ; 1 bytes @ 0x1A
  5464 ;;
  5465 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  5466 ;;
  5467 ;; *************** function _main *****************
  5468 ;; Defined at:
  5469 ;;		line 202 in file "main.c"
  5470 ;; Parameters:    Size  Location     Type
  5471 ;;		None
  5472 ;; Auto vars:     Size  Location     Type
  5473 ;;		None
  5474 ;; Return value:  Size  Location     Type
  5475 ;;                  1    wreg      void 
  5476 ;; Registers used:
  5477 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5478 ;; Tracked objects:
  5479 ;;		On entry : B1F/0
  5480 ;;		On exit  : 0/0
  5481 ;;		Unchanged: 0/0
  5482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5485 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5486 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5487 ;;Total ram usage:        2 bytes
  5488 ;; Hardware stack levels required when called:   22
  5489 ;; This function calls:
  5490 ;;		_EUSART_SetRxInterruptHandler
  5491 ;;		_I2C_Write1ByteRegister
  5492 ;;		_MyDelay
  5493 ;;		_SYSTEM_Initialize
  5494 ;;		_TMR2_SetInterruptHandler
  5495 ;;		_TMR2_StartTimer
  5496 ;;		_TMR2_WriteTimer
  5497 ;; This function is called by:
  5498 ;;		Startup code after reset
  5499 ;; This function uses a non-reentrant model
  5500 ;;
  5501                           
  5502                           
  5503                           ;psect for function _main
  5504  01A7                     _main:	
  5505                           
  5506                           ;main.c: 203: SYSTEM_Initialize();
  5507                           
  5508                           ;incstack = 0
  5509 ;; hardware stack exceeded
  5510                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5511  01A7  3187  27AE  3181   	fcall	_SYSTEM_Initialize
  5512                           
  5513                           ;main.c: 205: do { LATCbits.LATC4 = 1; } while(0);
  5514  01AA  0022               	movlb	2	; select bank2
  5515  01AB  160E               	bsf	14,4	;volatile
  5516                           
  5517                           ;main.c: 206: do { LATCbits.LATC6 = 0; } while(0);
  5518  01AC  130E               	bcf	14,6	;volatile
  5519                           
  5520                           ;main.c: 207: do { LATCbits.LATC7 = 0; } while(0);
  5521  01AD  138E               	bcf	14,7	;volatile
  5522                           
  5523                           ;main.c: 208: do { LATCbits.LATC5 = 1; } while(0);
  5524  01AE  168E               	bsf	14,5	;volatile
  5525                           
  5526                           ;main.c: 209: do { LATAbits.LATA5 = 1; } while(0);
  5527  01AF  168C               	bsf	12,5	;volatile
  5528                           
  5529                           ;main.c: 212: I2C_Write1ByteRegister(0x68, 0x26, 0x02);
  5530  01B0  3026               	movlw	38
  5531  01B1  0021               	movlb	1	; select bank1
  5532  01B2  00C8               	movwf	??_main^(0+128)
  5533  01B3  0848               	movf	??_main^(0+128),w
  5534  01B4  00C4               	movwf	I2C_Write1ByteRegister@reg^(0+128)
  5535  01B5  3002               	movlw	2
  5536  01B6  00C9               	movwf	(??_main+1)^(0+128)
  5537  01B7  0849               	movf	(??_main+1)^(0+128),w
  5538  01B8  00C5               	movwf	I2C_Write1ByteRegister@data^(0+128)
  5539  01B9  3068               	movlw	104
  5540  01BA  3184  2499  3181   	fcall	_I2C_Write1ByteRegister
  5541                           
  5542                           ;main.c: 213: I2C_Write1ByteRegister(0x68, 0x27, 0x10);
  5543  01BD  3027               	movlw	39
  5544  01BE  0021               	movlb	1	; select bank1
  5545  01BF  00C8               	movwf	??_main^(0+128)
  5546  01C0  0848               	movf	??_main^(0+128),w
  5547  01C1  00C4               	movwf	I2C_Write1ByteRegister@reg^(0+128)
  5548  01C2  3010               	movlw	16
  5549  01C3  00C9               	movwf	(??_main+1)^(0+128)
  5550  01C4  0849               	movf	(??_main+1)^(0+128),w
  5551  01C5  00C5               	movwf	I2C_Write1ByteRegister@data^(0+128)
  5552  01C6  3068               	movlw	104
  5553  01C7  3184  2499  3181   	fcall	_I2C_Write1ByteRegister
  5554                           
  5555                           ;main.c: 216: TMR2_SetInterruptHandler(MyTimer2ISR);
  5556  01CA  3007               	movlw	low _MyTimer2ISR
  5557  01CB  0020               	movlb	0	; select bank0
  5558  01CC  00CB               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  5559  01CD  3001               	movlw	high _MyTimer2ISR
  5560  01CE  00CC               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  5561  01CF  318E  2679  3181   	fcall	_TMR2_SetInterruptHandler
  5562                           
  5563                           ;main.c: 217: TMR2_WriteTimer(255);
  5564  01D2  30FF               	movlw	255
  5565  01D3  318E  267F  3181   	fcall	_TMR2_WriteTimer
  5566                           
  5567                           ;main.c: 218: TMR2_StartTimer();
  5568  01D6  318D  25E7  3181   	fcall	_TMR2_StartTimer
  5569                           
  5570                           ;main.c: 220: EUSART_SetRxInterruptHandler(MyUART_ISR);
  5571  01D9  3059               	movlw	low _MyUART_ISR
  5572  01DA  0020               	movlb	0	; select bank0
  5573  01DB  00CB               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  5574  01DC  3000               	movlw	high _MyUART_ISR
  5575  01DD  00CC               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  5576  01DE  318E  2673  3181   	fcall	_EUSART_SetRxInterruptHandler
  5577                           
  5578                           ;main.c: 222: (INTCONbits.PEIE = 1);
  5579  01E1  170B               	bsf	11,6	;volatile
  5580                           
  5581                           ;main.c: 223: (INTCONbits.GIE = 1);
  5582  01E2  178B               	bsf	11,7	;volatile
  5583  01E3  2A0B               	goto	l6756
  5584  01E4                     l6758:	
  5585                           
  5586                           ;main.c: 227: if(Validation) {
  5587  01E4  0861               	movf	_Validation,w
  5588  01E5  1903               	btfsc	3,2
  5589  01E6  29F6               	goto	l6764
  5590                           
  5591                           ;main.c: 228: do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  5592  01E7  1003               	clrc
  5593  01E8  0022               	movlb	2	; select bank2
  5594  01E9  1E8C               	btfss	12,5	;volatile
  5595  01EA  1403               	setc
  5596  01EB  1C03               	btfss	3,0
  5597  01EC  29F0               	goto	u4530
  5598  01ED  0022               	movlb	2	; select bank2
  5599  01EE  168C               	bsf	12,5	;volatile
  5600  01EF  29F2               	goto	l6762
  5601  01F0                     u4530:	
  5602  01F0  0022               	movlb	2	; select bank2
  5603  01F1  128C               	bcf	12,5	;volatile
  5604  01F2                     l6762:	
  5605                           
  5606                           ;main.c: 229: MyDelay();
  5607  01F2  3182  2212  3181   	fcall	_MyDelay
  5608                           
  5609                           ;main.c: 230: } else {
  5610  01F5  2A0B               	goto	l6756
  5611  01F6                     l6764:	
  5612                           ;main.c: 231: do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  5613                           
  5614  01F6  1003               	clrc
  5615  01F7  0022               	movlb	2	; select bank2
  5616  01F8  1E8C               	btfss	12,5	;volatile
  5617  01F9  1403               	setc
  5618  01FA  1C03               	btfss	3,0
  5619  01FB  29FF               	goto	u4550
  5620  01FC  0022               	movlb	2	; select bank2
  5621  01FD  168C               	bsf	12,5	;volatile
  5622  01FE  2A01               	goto	l6766
  5623  01FF                     u4550:	
  5624  01FF  0022               	movlb	2	; select bank2
  5625  0200  128C               	bcf	12,5	;volatile
  5626  0201                     l6766:	
  5627                           ;main.c: 232: do { LATCbits.LATC4 = 1; } while(0);
  5628                           
  5629  0201  160E               	bsf	14,4	;volatile
  5630                           
  5631                           ;main.c: 233: _delay((unsigned long)((100)*(4000000/4000.0)));
  5632  0202  3082               	movlw	130
  5633  0203  0021               	movlb	1	; select bank1
  5634  0204  00C8               	movwf	??_main^(0+128)
  5635  0205  30DD               	movlw	221
  5636  0206                     u4577:	
  5637  0206  0B89               	decfsz	9,f
  5638  0207  2A06               	goto	u4577
  5639  0208  0BC8               	decfsz	??_main^(0+128),f
  5640  0209  2A06               	goto	u4577
  5641  020A  3200               	nop2
  5642  020B                     l6756:	
  5643                           ;main.c: 225: while (1) {
  5644                           
  5645                           ;main.c: 234: }
  5646                           ;main.c: 235: } else {
  5647                           
  5648                           
  5649                           ;main.c: 226: if(PORTAbits.RA4) {
  5650  020B  0020               	movlb	0	; select bank0
  5651  020C  1A0C               	btfsc	12,4	;volatile
  5652  020D  29E4               	goto	l6758
  5653                           
  5654                           ;main.c: 236: do { LATCbits.LATC4 = 1; } while(0);
  5655  020E  0022               	movlb	2	; select bank2
  5656  020F  160E               	bsf	14,4	;volatile
  5657                           
  5658                           ;main.c: 237: do { LATAbits.LATA5 = 1; } while(0);
  5659  0210  168C               	bsf	12,5	;volatile
  5660  0211  2A0B               	goto	l6756
  5661  0212                     __end_of_main:	
  5662                           
  5663                           	psect	text1
  5664  0E7F                     __ptext1:	
  5665 ;; *************** function _TMR2_WriteTimer *****************
  5666 ;; Defined at:
  5667 ;;		line 150 in file "mcc_generated_files/tmr2.c"
  5668 ;; Parameters:    Size  Location     Type
  5669 ;;  timerVal        1    wreg     unsigned char 
  5670 ;; Auto vars:     Size  Location     Type
  5671 ;;  timerVal        1   15[BANK0 ] unsigned char 
  5672 ;; Return value:  Size  Location     Type
  5673 ;;                  1    wreg      void 
  5674 ;; Registers used:
  5675 ;;		wreg, status,2, status,0, pclath, cstack
  5676 ;; Tracked objects:
  5677 ;;		On entry : 0/0
  5678 ;;		On exit  : 0/0
  5679 ;;		Unchanged: 0/0
  5680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5682 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5684 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5685 ;;Total ram usage:        1 bytes
  5686 ;; Hardware stack levels used:    1
  5687 ;; Hardware stack levels required when called:   14
  5688 ;; This function calls:
  5689 ;;		_TMR2_Counter8BitSet
  5690 ;; This function is called by:
  5691 ;;		_main
  5692 ;; This function uses a non-reentrant model
  5693 ;;
  5694                           
  5695                           
  5696                           ;psect for function _TMR2_WriteTimer
  5697  0E7F                     _TMR2_WriteTimer:	
  5698                           
  5699                           ;incstack = 0
  5700                           ; Regs used in _TMR2_WriteTimer: [wreg+status,2+status,0+pclath+cstack]
  5701                           ;TMR2_WriteTimer@timerVal stored from wreg
  5702  0E7F  0020               	movlb	0	; select bank0
  5703  0E80  00CC               	movwf	TMR2_WriteTimer@timerVal
  5704                           
  5705                           ;tmr2.c: 152: TMR2_Counter8BitSet(timerVal);
  5706  0E81  084C               	movf	TMR2_WriteTimer@timerVal,w
  5707  0E82  318E  263E         	fcall	_TMR2_Counter8BitSet
  5708  0E84  0008               	return
  5709  0E85                     __end_of_TMR2_WriteTimer:	
  5710                           
  5711                           	psect	text2
  5712  0E3E                     __ptext2:	
  5713 ;; *************** function _TMR2_Counter8BitSet *****************
  5714 ;; Defined at:
  5715 ;;		line 144 in file "mcc_generated_files/tmr2.c"
  5716 ;; Parameters:    Size  Location     Type
  5717 ;;  timerVal        1    wreg     unsigned char 
  5718 ;; Auto vars:     Size  Location     Type
  5719 ;;  timerVal        1   14[BANK0 ] unsigned char 
  5720 ;; Return value:  Size  Location     Type
  5721 ;;                  1    wreg      void 
  5722 ;; Registers used:
  5723 ;;		wreg
  5724 ;; Tracked objects:
  5725 ;;		On entry : 0/0
  5726 ;;		On exit  : 0/0
  5727 ;;		Unchanged: 0/0
  5728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5730 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5732 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5733 ;;Total ram usage:        1 bytes
  5734 ;; Hardware stack levels used:    1
  5735 ;; Hardware stack levels required when called:   13
  5736 ;; This function calls:
  5737 ;;		Nothing
  5738 ;; This function is called by:
  5739 ;;		_TMR2_WriteTimer
  5740 ;; This function uses a non-reentrant model
  5741 ;;
  5742                           
  5743                           
  5744                           ;psect for function _TMR2_Counter8BitSet
  5745  0E3E                     _TMR2_Counter8BitSet:	
  5746                           
  5747                           ;incstack = 0
  5748                           ; Regs used in _TMR2_Counter8BitSet: [wreg]
  5749                           ;TMR2_Counter8BitSet@timerVal stored from wreg
  5750  0E3E  0020               	movlb	0	; select bank0
  5751  0E3F  00CB               	movwf	TMR2_Counter8BitSet@timerVal
  5752                           
  5753                           ;tmr2.c: 147: TMR2 = timerVal;
  5754  0E40  084B               	movf	TMR2_Counter8BitSet@timerVal,w
  5755  0E41  009A               	movwf	26	;volatile
  5756  0E42  0008               	return
  5757  0E43                     __end_of_TMR2_Counter8BitSet:	
  5758                           
  5759                           	psect	text3
  5760  0DE7                     __ptext3:	
  5761 ;; *************** function _TMR2_StartTimer *****************
  5762 ;; Defined at:
  5763 ;;		line 114 in file "mcc_generated_files/tmr2.c"
  5764 ;; Parameters:    Size  Location     Type
  5765 ;;		None
  5766 ;; Auto vars:     Size  Location     Type
  5767 ;;		None
  5768 ;; Return value:  Size  Location     Type
  5769 ;;                  1    wreg      void 
  5770 ;; Registers used:
  5771 ;;		status,2, status,0, pclath, cstack
  5772 ;; Tracked objects:
  5773 ;;		On entry : 0/0
  5774 ;;		On exit  : 0/0
  5775 ;;		Unchanged: 0/0
  5776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5781 ;;Total ram usage:        0 bytes
  5782 ;; Hardware stack levels used:    1
  5783 ;; Hardware stack levels required when called:   14
  5784 ;; This function calls:
  5785 ;;		_TMR2_Start
  5786 ;; This function is called by:
  5787 ;;		_main
  5788 ;; This function uses a non-reentrant model
  5789 ;;
  5790                           
  5791                           
  5792                           ;psect for function _TMR2_StartTimer
  5793  0DE7                     _TMR2_StartTimer:	
  5794                           
  5795                           ;tmr2.c: 116: TMR2_Start();
  5796                           
  5797                           ;incstack = 0
  5798                           ; Regs used in _TMR2_StartTimer: [status,2+status,0+pclath+cstack]
  5799  0DE7  318D  25E4         	fcall	_TMR2_Start
  5800  0DE9  0008               	return
  5801  0DEA                     __end_of_TMR2_StartTimer:	
  5802                           
  5803                           	psect	text4
  5804  0DE4                     __ptext4:	
  5805 ;; *************** function _TMR2_Start *****************
  5806 ;; Defined at:
  5807 ;;		line 108 in file "mcc_generated_files/tmr2.c"
  5808 ;; Parameters:    Size  Location     Type
  5809 ;;		None
  5810 ;; Auto vars:     Size  Location     Type
  5811 ;;		None
  5812 ;; Return value:  Size  Location     Type
  5813 ;;                  1    wreg      void 
  5814 ;; Registers used:
  5815 ;;		None
  5816 ;; Tracked objects:
  5817 ;;		On entry : 0/0
  5818 ;;		On exit  : 0/0
  5819 ;;		Unchanged: 0/0
  5820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5824 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5825 ;;Total ram usage:        0 bytes
  5826 ;; Hardware stack levels used:    1
  5827 ;; Hardware stack levels required when called:   13
  5828 ;; This function calls:
  5829 ;;		Nothing
  5830 ;; This function is called by:
  5831 ;;		_TMR2_StartTimer
  5832 ;; This function uses a non-reentrant model
  5833 ;;
  5834                           
  5835                           
  5836                           ;psect for function _TMR2_Start
  5837  0DE4                     _TMR2_Start:	
  5838                           
  5839                           ;tmr2.c: 111: T2CONbits.TMR2ON = 1;
  5840                           
  5841                           ;incstack = 0
  5842                           ; Regs used in _TMR2_Start: []
  5843  0DE4  0020               	movlb	0	; select bank0
  5844  0DE5  179C               	bsf	28,7	;volatile
  5845  0DE6  0008               	return
  5846  0DE7                     __end_of_TMR2_Start:	
  5847                           
  5848                           	psect	text5
  5849  07AE                     __ptext5:	
  5850 ;; *************** function _SYSTEM_Initialize *****************
  5851 ;; Defined at:
  5852 ;;		line 50 in file "mcc_generated_files/mcc.c"
  5853 ;; Parameters:    Size  Location     Type
  5854 ;;		None
  5855 ;; Auto vars:     Size  Location     Type
  5856 ;;		None
  5857 ;; Return value:  Size  Location     Type
  5858 ;;                  1    wreg      void 
  5859 ;; Registers used:
  5860 ;;		wreg, status,2, status,0, pclath, cstack
  5861 ;; Tracked objects:
  5862 ;;		On entry : 0/0
  5863 ;;		On exit  : 0/0
  5864 ;;		Unchanged: 0/0
  5865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5870 ;;Total ram usage:        0 bytes
  5871 ;; Hardware stack levels used:    1
  5872 ;; Hardware stack levels required when called:   15
  5873 ;; This function calls:
  5874 ;;		_EUSART_Initialize
  5875 ;;		_I2C_Initialize
  5876 ;;		_MATHACC_Initialize
  5877 ;;		_OSCILLATOR_Initialize
  5878 ;;		_PIN_MANAGER_Initialize
  5879 ;;		_PWM3_Initialize
  5880 ;;		_TMR2_Initialize
  5881 ;; This function is called by:
  5882 ;;		_main
  5883 ;; This function uses a non-reentrant model
  5884 ;;
  5885                           
  5886                           
  5887                           ;psect for function _SYSTEM_Initialize
  5888  07AE                     _SYSTEM_Initialize:	
  5889                           
  5890                           ;mcc.c: 52: I2C_Initialize();
  5891                           
  5892                           ;incstack = 0
  5893                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5894  07AE  318F  272D  3187   	fcall	_I2C_Initialize
  5895                           
  5896                           ;mcc.c: 53: PIN_MANAGER_Initialize();
  5897  07B1  3183  2386  3187   	fcall	_PIN_MANAGER_Initialize
  5898                           
  5899                           ;mcc.c: 54: OSCILLATOR_Initialize();
  5900  07B4  318E  2692  3187   	fcall	_OSCILLATOR_Initialize
  5901                           
  5902                           ;mcc.c: 55: PWM3_Initialize();
  5903  07B7  318F  274D  3187   	fcall	_PWM3_Initialize
  5904                           
  5905                           ;mcc.c: 56: TMR2_Initialize();
  5906  07BA  3187  27C3  3187   	fcall	_TMR2_Initialize
  5907                           
  5908                           ;mcc.c: 57: MATHACC_Initialize();
  5909  07BD  318F  27EC  3187   	fcall	_MATHACC_Initialize
  5910                           
  5911                           ;mcc.c: 58: EUSART_Initialize();
  5912  07C0  3184  2466         	fcall	_EUSART_Initialize
  5913  07C2  0008               	return
  5914  07C3                     __end_of_SYSTEM_Initialize:	
  5915                           
  5916                           	psect	text6
  5917  07C3                     __ptext6:	
  5918 ;; *************** function _TMR2_Initialize *****************
  5919 ;; Defined at:
  5920 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  5921 ;; Parameters:    Size  Location     Type
  5922 ;;		None
  5923 ;; Auto vars:     Size  Location     Type
  5924 ;;		None
  5925 ;; Return value:  Size  Location     Type
  5926 ;;                  1    wreg      void 
  5927 ;; Registers used:
  5928 ;;		wreg, status,2, status,0, pclath, cstack
  5929 ;; Tracked objects:
  5930 ;;		On entry : 0/0
  5931 ;;		On exit  : 0/0
  5932 ;;		Unchanged: 0/0
  5933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5938 ;;Total ram usage:        0 bytes
  5939 ;; Hardware stack levels used:    1
  5940 ;; Hardware stack levels required when called:   14
  5941 ;; This function calls:
  5942 ;;		_TMR2_SetInterruptHandler
  5943 ;; This function is called by:
  5944 ;;		_SYSTEM_Initialize
  5945 ;; This function uses a non-reentrant model
  5946 ;;
  5947                           
  5948                           
  5949                           ;psect for function _TMR2_Initialize
  5950  07C3                     _TMR2_Initialize:	
  5951                           
  5952                           ;tmr2.c: 69: T2CLKCON = 0x00;
  5953                           
  5954                           ;incstack = 0
  5955                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5956  07C3  0020               	movlb	0	; select bank0
  5957  07C4  019E               	clrf	30	;volatile
  5958                           
  5959                           ;tmr2.c: 72: T2HLT = 0x00;
  5960  07C5  019D               	clrf	29	;volatile
  5961                           
  5962                           ;tmr2.c: 75: T2RST = 0x00;
  5963  07C6  019F               	clrf	31	;volatile
  5964                           
  5965                           ;tmr2.c: 78: T2PR = 0x9B;
  5966  07C7  309B               	movlw	155
  5967  07C8  009B               	movwf	27	;volatile
  5968                           
  5969                           ;tmr2.c: 81: T2TMR = 0x00;
  5970  07C9  019A               	clrf	26	;volatile
  5971                           
  5972                           ;tmr2.c: 84: PIR1bits.TMR2IF = 0;
  5973  07CA  1090               	bcf	16,1	;volatile
  5974                           
  5975                           ;tmr2.c: 87: PIE1bits.TMR2IE = 1;
  5976  07CB  0021               	movlb	1	; select bank1
  5977  07CC  1490               	bsf	16,1	;volatile
  5978                           
  5979                           ;tmr2.c: 90: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
  5980  07CD  30A5               	movlw	low _TMR2_DefaultInterruptHandler
  5981  07CE  0020               	movlb	0	; select bank0
  5982  07CF  00CB               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  5983  07D0  300D               	movlw	high _TMR2_DefaultInterruptHandler
  5984  07D1  00CC               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  5985  07D2  318E  2679         	fcall	_TMR2_SetInterruptHandler
  5986                           
  5987                           ;tmr2.c: 93: T2CON = 0xF0;
  5988  07D4  30F0               	movlw	240
  5989  07D5  0020               	movlb	0	; select bank0
  5990  07D6  009C               	movwf	28	;volatile
  5991  07D7  0008               	return
  5992  07D8                     __end_of_TMR2_Initialize:	
  5993                           
  5994                           	psect	text7
  5995  0E79                     __ptext7:	
  5996 ;; *************** function _TMR2_SetInterruptHandler *****************
  5997 ;; Defined at:
  5998 ;;		line 186 in file "mcc_generated_files/tmr2.c"
  5999 ;; Parameters:    Size  Location     Type
  6000 ;;  InterruptHan    2   14[BANK0 ] PTR FTN()void 
  6001 ;;		 -> MyTimer2ISR(1), TMR2_DefaultInterruptHandler(1), 
  6002 ;; Auto vars:     Size  Location     Type
  6003 ;;		None
  6004 ;; Return value:  Size  Location     Type
  6005 ;;                  1    wreg      void 
  6006 ;; Registers used:
  6007 ;;		wreg
  6008 ;; Tracked objects:
  6009 ;;		On entry : 0/0
  6010 ;;		On exit  : 0/0
  6011 ;;		Unchanged: 0/0
  6012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6013 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6016 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6017 ;;Total ram usage:        2 bytes
  6018 ;; Hardware stack levels used:    1
  6019 ;; Hardware stack levels required when called:   13
  6020 ;; This function calls:
  6021 ;;		Nothing
  6022 ;; This function is called by:
  6023 ;;		_TMR2_Initialize
  6024 ;;		_main
  6025 ;; This function uses a non-reentrant model
  6026 ;;
  6027                           
  6028                           
  6029                           ;psect for function _TMR2_SetInterruptHandler
  6030  0E79                     _TMR2_SetInterruptHandler:	
  6031                           
  6032                           ;tmr2.c: 187: TMR2_InterruptHandler = InterruptHandler;
  6033                           
  6034                           ;incstack = 0
  6035                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  6036  0E79  0020               	movlb	0	; select bank0
  6037  0E7A  084C               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  6038  0E7B  00D8               	movwf	_TMR2_InterruptHandler+1
  6039  0E7C  084B               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  6040  0E7D  00D7               	movwf	_TMR2_InterruptHandler
  6041  0E7E  0008               	return
  6042  0E7F                     __end_of_TMR2_SetInterruptHandler:	
  6043                           
  6044                           	psect	text8
  6045  0F4D                     __ptext8:	
  6046 ;; *************** function _PWM3_Initialize *****************
  6047 ;; Defined at:
  6048 ;;		line 58 in file "mcc_generated_files/pwm3.c"
  6049 ;; Parameters:    Size  Location     Type
  6050 ;;		None
  6051 ;; Auto vars:     Size  Location     Type
  6052 ;;		None
  6053 ;; Return value:  Size  Location     Type
  6054 ;;                  1    wreg      void 
  6055 ;; Registers used:
  6056 ;;		wreg, status,2, status,0
  6057 ;; Tracked objects:
  6058 ;;		On entry : 0/0
  6059 ;;		On exit  : 0/0
  6060 ;;		Unchanged: 0/0
  6061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6066 ;;Total ram usage:        0 bytes
  6067 ;; Hardware stack levels used:    1
  6068 ;; Hardware stack levels required when called:   13
  6069 ;; This function calls:
  6070 ;;		Nothing
  6071 ;; This function is called by:
  6072 ;;		_SYSTEM_Initialize
  6073 ;; This function uses a non-reentrant model
  6074 ;;
  6075                           
  6076                           
  6077                           ;psect for function _PWM3_Initialize
  6078  0F4D                     _PWM3_Initialize:	
  6079                           
  6080                           ;pwm3.c: 62: PWM3CON = 0x80;
  6081                           
  6082                           ;incstack = 0
  6083                           ; Regs used in _PWM3_Initialize: [wreg+status,2+status,0]
  6084  0F4D  3080               	movlw	128
  6085  0F4E  002C               	movlb	12	; select bank12
  6086  0F4F  0099               	movwf	25	;volatile
  6087                           
  6088                           ;pwm3.c: 65: PWM3DCH = 0x0F;
  6089  0F50  300F               	movlw	15
  6090  0F51  0098               	movwf	24	;volatile
  6091                           
  6092                           ;pwm3.c: 68: PWM3DCL = 0x40;
  6093  0F52  3040               	movlw	64
  6094  0F53  0097               	movwf	23	;volatile
  6095                           
  6096                           ;pwm3.c: 71: CCPTMRSbits.P3TSEL = 0;
  6097  0F54  30CF               	movlw	-49
  6098  0F55  0025               	movlb	5	; select bank5
  6099  0F56  059E               	andwf	30,f	;volatile
  6100  0F57  0008               	return
  6101  0F58                     __end_of_PWM3_Initialize:	
  6102                           
  6103                           	psect	text9
  6104  0386                     __ptext9:	
  6105 ;; *************** function _PIN_MANAGER_Initialize *****************
  6106 ;; Defined at:
  6107 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  6108 ;; Parameters:    Size  Location     Type
  6109 ;;		None
  6110 ;; Auto vars:     Size  Location     Type
  6111 ;;		None
  6112 ;; Return value:  Size  Location     Type
  6113 ;;                  1    wreg      void 
  6114 ;; Registers used:
  6115 ;;		wreg, status,2
  6116 ;; Tracked objects:
  6117 ;;		On entry : 0/0
  6118 ;;		On exit  : 0/0
  6119 ;;		Unchanged: 0/0
  6120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6124 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6125 ;;Total ram usage:        0 bytes
  6126 ;; Hardware stack levels used:    1
  6127 ;; Hardware stack levels required when called:   13
  6128 ;; This function calls:
  6129 ;;		Nothing
  6130 ;; This function is called by:
  6131 ;;		_SYSTEM_Initialize
  6132 ;; This function uses a non-reentrant model
  6133 ;;
  6134                           
  6135                           
  6136                           ;psect for function _PIN_MANAGER_Initialize
  6137  0386                     _PIN_MANAGER_Initialize:	
  6138                           
  6139                           ;pin_manager.c: 60: LATA = 0x00;
  6140                           
  6141                           ;incstack = 0
  6142                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6143  0386  0022               	movlb	2	; select bank2
  6144  0387  018C               	clrf	12	;volatile
  6145                           
  6146                           ;pin_manager.c: 61: LATB = 0x00;
  6147  0388  018D               	clrf	13	;volatile
  6148                           
  6149                           ;pin_manager.c: 62: LATC = 0x00;
  6150  0389  018E               	clrf	14	;volatile
  6151                           
  6152                           ;pin_manager.c: 67: TRISA = 0x13;
  6153  038A  3013               	movlw	19
  6154  038B  0021               	movlb	1	; select bank1
  6155  038C  008C               	movwf	12	;volatile
  6156                           
  6157                           ;pin_manager.c: 68: TRISB = 0x70;
  6158  038D  3070               	movlw	112
  6159  038E  008D               	movwf	13	;volatile
  6160                           
  6161                           ;pin_manager.c: 69: TRISC = 0x0F;
  6162  038F  300F               	movlw	15
  6163  0390  008E               	movwf	14	;volatile
  6164                           
  6165                           ;pin_manager.c: 74: ANSELC = 0x0E;
  6166  0391  300E               	movlw	14
  6167  0392  0023               	movlb	3	; select bank3
  6168  0393  008E               	movwf	14	;volatile
  6169                           
  6170                           ;pin_manager.c: 75: ANSELB = 0x00;
  6171  0394  018D               	clrf	13	;volatile
  6172                           
  6173                           ;pin_manager.c: 76: ANSELA = 0x01;
  6174  0395  3001               	movlw	1
  6175  0396  008C               	movwf	12	;volatile
  6176                           
  6177                           ;pin_manager.c: 81: WPUB = 0x00;
  6178  0397  0024               	movlb	4	; select bank4
  6179  0398  018D               	clrf	13	;volatile
  6180                           
  6181                           ;pin_manager.c: 82: WPUA = 0x00;
  6182  0399  018C               	clrf	12	;volatile
  6183                           
  6184                           ;pin_manager.c: 83: WPUC = 0x00;
  6185  039A  018E               	clrf	14	;volatile
  6186                           
  6187                           ;pin_manager.c: 84: OPTION_REGbits.nWPUEN = 1;
  6188  039B  0021               	movlb	1	; select bank1
  6189  039C  1795               	bsf	21,7	;volatile
  6190                           
  6191                           ;pin_manager.c: 89: ODCONA = 0x00;
  6192  039D  0025               	movlb	5	; select bank5
  6193  039E  018C               	clrf	12	;volatile
  6194                           
  6195                           ;pin_manager.c: 90: ODCONB = 0x00;
  6196  039F  018D               	clrf	13	;volatile
  6197                           
  6198                           ;pin_manager.c: 91: ODCONC = 0x00;
  6199  03A0  018E               	clrf	14	;volatile
  6200                           
  6201                           ;pin_manager.c: 96: SLRCONA = 0x37;
  6202  03A1  3037               	movlw	55
  6203  03A2  0026               	movlb	6	; select bank6
  6204  03A3  008C               	movwf	12	;volatile
  6205                           
  6206                           ;pin_manager.c: 97: SLRCONB = 0xF0;
  6207  03A4  30F0               	movlw	240
  6208  03A5  008D               	movwf	13	;volatile
  6209                           
  6210                           ;pin_manager.c: 98: SLRCONC = 0xFF;
  6211  03A6  30FF               	movlw	255
  6212  03A7  008E               	movwf	14	;volatile
  6213                           
  6214                           ;pin_manager.c: 103: INLVLA = 0x3F;
  6215  03A8  303F               	movlw	63
  6216  03A9  0027               	movlb	7	; select bank7
  6217  03AA  008C               	movwf	12	;volatile
  6218                           
  6219                           ;pin_manager.c: 104: INLVLB = 0xF0;
  6220  03AB  30F0               	movlw	240
  6221  03AC  008D               	movwf	13	;volatile
  6222                           
  6223                           ;pin_manager.c: 105: INLVLC = 0xFF;
  6224  03AD  30FF               	movlw	255
  6225  03AE  008E               	movwf	14	;volatile
  6226                           
  6227                           ;pin_manager.c: 114: RXPPS = 0x0D;
  6228  03AF  300D               	movlw	13
  6229  03B0  003C               	movlb	28	; select bank28
  6230  03B1  00A4               	movwf	36	;volatile
  6231                           
  6232                           ;pin_manager.c: 115: SSPDATPPS = 0x0C;
  6233  03B2  300C               	movlw	12
  6234  03B3  00A1               	movwf	33	;volatile
  6235                           
  6236                           ;pin_manager.c: 116: RB6PPS = 0x10;
  6237  03B4  3010               	movlw	16
  6238  03B5  003D               	movlb	29	; select bank29
  6239  03B6  009E               	movwf	30	;volatile
  6240                           
  6241                           ;pin_manager.c: 117: RB7PPS = 0x12;
  6242  03B7  3012               	movlw	18
  6243  03B8  009F               	movwf	31	;volatile
  6244                           
  6245                           ;pin_manager.c: 118: RB4PPS = 0x11;
  6246  03B9  3011               	movlw	17
  6247  03BA  009C               	movwf	28	;volatile
  6248                           
  6249                           ;pin_manager.c: 119: RA2PPS = 0x0E;
  6250  03BB  300E               	movlw	14
  6251  03BC  0092               	movwf	18	;volatile
  6252                           
  6253                           ;pin_manager.c: 120: SSPCLKPPS = 0x0E;
  6254  03BD  300E               	movlw	14
  6255  03BE  003C               	movlb	28	; select bank28
  6256  03BF  00A0               	movwf	32	;volatile
  6257  03C0  0008               	return
  6258  03C1                     __end_of_PIN_MANAGER_Initialize:	
  6259                           
  6260                           	psect	text10
  6261  0E92                     __ptext10:	
  6262 ;; *************** function _OSCILLATOR_Initialize *****************
  6263 ;; Defined at:
  6264 ;;		line 61 in file "mcc_generated_files/mcc.c"
  6265 ;; Parameters:    Size  Location     Type
  6266 ;;		None
  6267 ;; Auto vars:     Size  Location     Type
  6268 ;;		None
  6269 ;; Return value:  Size  Location     Type
  6270 ;;                  1    wreg      void 
  6271 ;; Registers used:
  6272 ;;		wreg, status,2
  6273 ;; Tracked objects:
  6274 ;;		On entry : 0/0
  6275 ;;		On exit  : 0/0
  6276 ;;		Unchanged: 0/0
  6277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6281 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6282 ;;Total ram usage:        0 bytes
  6283 ;; Hardware stack levels used:    1
  6284 ;; Hardware stack levels required when called:   13
  6285 ;; This function calls:
  6286 ;;		Nothing
  6287 ;; This function is called by:
  6288 ;;		_SYSTEM_Initialize
  6289 ;; This function uses a non-reentrant model
  6290 ;;
  6291                           
  6292                           
  6293                           ;psect for function _OSCILLATOR_Initialize
  6294  0E92                     _OSCILLATOR_Initialize:	
  6295                           
  6296                           ;mcc.c: 64: OSCCON = 0x6A;
  6297                           
  6298                           ;incstack = 0
  6299                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6300  0E92  306A               	movlw	106
  6301  0E93  0021               	movlb	1	; select bank1
  6302  0E94  0099               	movwf	25	;volatile
  6303                           
  6304                           ;mcc.c: 66: OSCTUNE = 0x00;
  6305  0E95  0198               	clrf	24	;volatile
  6306                           
  6307                           ;mcc.c: 68: BORCON = 0x00;
  6308  0E96  0022               	movlb	2	; select bank2
  6309  0E97  0196               	clrf	22	;volatile
  6310  0E98  0008               	return
  6311  0E99                     __end_of_OSCILLATOR_Initialize:	
  6312                           
  6313                           	psect	text11
  6314  0FEC                     __ptext11:	
  6315 ;; *************** function _MATHACC_Initialize *****************
  6316 ;; Defined at:
  6317 ;;		line 58 in file "mcc_generated_files/mathacc.c"
  6318 ;; Parameters:    Size  Location     Type
  6319 ;;		None
  6320 ;; Auto vars:     Size  Location     Type
  6321 ;;		None
  6322 ;; Return value:  Size  Location     Type
  6323 ;;                  1    wreg      void 
  6324 ;; Registers used:
  6325 ;;		wreg, status,2
  6326 ;; Tracked objects:
  6327 ;;		On entry : 0/0
  6328 ;;		On exit  : 0/0
  6329 ;;		Unchanged: 0/0
  6330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6335 ;;Total ram usage:        0 bytes
  6336 ;; Hardware stack levels used:    1
  6337 ;; Hardware stack levels required when called:   13
  6338 ;; This function calls:
  6339 ;;		Nothing
  6340 ;; This function is called by:
  6341 ;;		_SYSTEM_Initialize
  6342 ;; This function uses a non-reentrant model
  6343 ;;
  6344                           
  6345                           
  6346                           ;psect for function _MATHACC_Initialize
  6347  0FEC                     _MATHACC_Initialize:	
  6348                           
  6349                           ;mathacc.c: 62: PID1CON = 0x85;
  6350                           
  6351                           ;incstack = 0
  6352                           ; Regs used in _MATHACC_Initialize: [wreg+status,2]
  6353  0FEC  3085               	movlw	133
  6354  0FED  002C               	movlb	12	; select bank12
  6355  0FEE  0094               	movwf	20	;volatile
  6356                           
  6357                           ;mathacc.c: 65: PID1K1H = (uint8_t) ((2 & 0xFF00) >> 8);
  6358  0FEF  002B               	movlb	11	; select bank11
  6359  0FF0  0191               	clrf	17	;volatile
  6360                           
  6361                           ;mathacc.c: 66: PID1K1L = (uint8_t) (2 & 0x00FF);
  6362  0FF1  3002               	movlw	2
  6363  0FF2  0090               	movwf	16	;volatile
  6364                           
  6365                           ;mathacc.c: 67: PID1K2H = (uint8_t) ((-2 & 0xFF00) >> 8);
  6366  0FF3  30FF               	movlw	255
  6367  0FF4  0093               	movwf	19	;volatile
  6368                           
  6369                           ;mathacc.c: 68: PID1K2L = (uint8_t) (-2 & 0x00FF);
  6370  0FF5  30FE               	movlw	254
  6371  0FF6  0092               	movwf	18	;volatile
  6372                           
  6373                           ;mathacc.c: 69: PID1K3H = (uint8_t) ((0 & 0xFF00) >> 8);
  6374  0FF7  0195               	clrf	21	;volatile
  6375                           
  6376                           ;mathacc.c: 70: PID1K3L = (uint8_t) (0 & 0x00FF);
  6377  0FF8  0194               	clrf	20	;volatile
  6378                           
  6379                           ;mathacc.c: 72: PIR5bits.PID1DIF = 0;
  6380  0FF9  0020               	movlb	0	; select bank0
  6381  0FFA  1014               	bcf	20,0	;volatile
  6382                           
  6383                           ;mathacc.c: 73: PIR5bits.PID1EIF = 0;
  6384  0FFB  1094               	bcf	20,1	;volatile
  6385                           
  6386                           ;mathacc.c: 74: PIE5bits.PID1DIE = 1;
  6387  0FFC  0021               	movlb	1	; select bank1
  6388  0FFD  1414               	bsf	20,0	;volatile
  6389                           
  6390                           ;mathacc.c: 75: PIE5bits.PID1EIE = 1;
  6391  0FFE  1494               	bsf	20,1	;volatile
  6392  0FFF  0008               	return
  6393  1000                     __end_of_MATHACC_Initialize:	
  6394                           
  6395                           	psect	text12
  6396  0F2D                     __ptext12:	
  6397 ;; *************** function _I2C_Initialize *****************
  6398 ;; Defined at:
  6399 ;;		line 167 in file "mcc_generated_files/i2c_master.c"
  6400 ;; Parameters:    Size  Location     Type
  6401 ;;		None
  6402 ;; Auto vars:     Size  Location     Type
  6403 ;;		None
  6404 ;; Return value:  Size  Location     Type
  6405 ;;                  1    wreg      void 
  6406 ;; Registers used:
  6407 ;;		wreg, status,2
  6408 ;; Tracked objects:
  6409 ;;		On entry : 0/0
  6410 ;;		On exit  : 0/0
  6411 ;;		Unchanged: 0/0
  6412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6417 ;;Total ram usage:        0 bytes
  6418 ;; Hardware stack levels used:    1
  6419 ;; Hardware stack levels required when called:   13
  6420 ;; This function calls:
  6421 ;;		Nothing
  6422 ;; This function is called by:
  6423 ;;		_SYSTEM_Initialize
  6424 ;; This function uses a non-reentrant model
  6425 ;;
  6426                           
  6427                           
  6428                           ;psect for function _I2C_Initialize
  6429  0F2D                     _I2C_Initialize:	
  6430                           
  6431                           ;i2c_master.c: 169: SSP1STAT = 0x80;
  6432                           
  6433                           ;incstack = 0
  6434                           ; Regs used in _I2C_Initialize: [wreg+status,2]
  6435  0F2D  3080               	movlw	128
  6436  0F2E  0024               	movlb	4	; select bank4
  6437  0F2F  0094               	movwf	20	;volatile
  6438                           
  6439                           ;i2c_master.c: 170: SSP1CON1 = 0x08;
  6440  0F30  3008               	movlw	8
  6441  0F31  0095               	movwf	21	;volatile
  6442                           
  6443                           ;i2c_master.c: 171: SSP1CON2 = 0x00;
  6444  0F32  0196               	clrf	22	;volatile
  6445                           
  6446                           ;i2c_master.c: 172: SSP1ADD = 0x09;
  6447  0F33  3009               	movlw	9
  6448  0F34  0092               	movwf	18	;volatile
  6449                           
  6450                           ;i2c_master.c: 173: SSP1CON1bits.SSPEN = 0;
  6451  0F35  1295               	bcf	21,5	;volatile
  6452  0F36  0008               	return
  6453  0F37                     __end_of_I2C_Initialize:	
  6454                           
  6455                           	psect	text13
  6456  0466                     __ptext13:	
  6457 ;; *************** function _EUSART_Initialize *****************
  6458 ;; Defined at:
  6459 ;;		line 83 in file "mcc_generated_files/eusart.c"
  6460 ;; Parameters:    Size  Location     Type
  6461 ;;		None
  6462 ;; Auto vars:     Size  Location     Type
  6463 ;;		None
  6464 ;; Return value:  Size  Location     Type
  6465 ;;                  1    wreg      void 
  6466 ;; Registers used:
  6467 ;;		wreg, status,2, status,0, pclath, cstack
  6468 ;; Tracked objects:
  6469 ;;		On entry : 0/0
  6470 ;;		On exit  : 0/0
  6471 ;;		Unchanged: 0/0
  6472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6476 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6477 ;;Total ram usage:        0 bytes
  6478 ;; Hardware stack levels used:    1
  6479 ;; Hardware stack levels required when called:   14
  6480 ;; This function calls:
  6481 ;;		_EUSART_SetErrorHandler
  6482 ;;		_EUSART_SetFramingErrorHandler
  6483 ;;		_EUSART_SetOverrunErrorHandler
  6484 ;;		_EUSART_SetRxInterruptHandler
  6485 ;; This function is called by:
  6486 ;;		_SYSTEM_Initialize
  6487 ;; This function uses a non-reentrant model
  6488 ;;
  6489                           
  6490                           
  6491                           ;psect for function _EUSART_Initialize
  6492  0466                     _EUSART_Initialize:	
  6493                           
  6494                           ;eusart.c: 86: PIE1bits.RCIE = 0;
  6495                           
  6496                           ;incstack = 0
  6497                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6498  0466  0021               	movlb	1	; select bank1
  6499  0467  1290               	bcf	16,5	;volatile
  6500                           
  6501                           ;eusart.c: 87: EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  6502  0468  3032               	movlw	low _EUSART_Receive_ISR
  6503  0469  0020               	movlb	0	; select bank0
  6504  046A  00CB               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  6505  046B  3004               	movlw	high _EUSART_Receive_ISR
  6506  046C  00CC               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  6507  046D  318E  2673  3184   	fcall	_EUSART_SetRxInterruptHandler
  6508                           
  6509                           ;eusart.c: 91: BAUD1CON = 0x09;
  6510  0470  3009               	movlw	9
  6511  0471  0023               	movlb	3	; select bank3
  6512  0472  009F               	movwf	31	;volatile
  6513                           
  6514                           ;eusart.c: 94: RC1STA = 0x90;
  6515  0473  3090               	movlw	144
  6516  0474  009D               	movwf	29	;volatile
  6517                           
  6518                           ;eusart.c: 97: TX1STA = 0x24;
  6519  0475  3024               	movlw	36
  6520  0476  009E               	movwf	30	;volatile
  6521                           
  6522                           ;eusart.c: 100: SPBRGL = 0x67;
  6523  0477  3067               	movlw	103
  6524  0478  009B               	movwf	27	;volatile
  6525                           
  6526                           ;eusart.c: 103: SPBRGH = 0x00;
  6527  0479  019C               	clrf	28	;volatile
  6528                           
  6529                           ;eusart.c: 106: EUSART_SetFramingErrorHandler(EUSART_DefaultFramingErrorHandler);
  6530  047A  30A4               	movlw	low _EUSART_DefaultFramingErrorHandler
  6531  047B  0020               	movlb	0	; select bank0
  6532  047C  00CB               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  6533  047D  300D               	movlw	high _EUSART_DefaultFramingErrorHandler
  6534  047E  00CC               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  6535  047F  318E  2667  3184   	fcall	_EUSART_SetFramingErrorHandler
  6536                           
  6537                           ;eusart.c: 107: EUSART_SetOverrunErrorHandler(EUSART_DefaultOverrunErrorHandler);
  6538  0482  30EA               	movlw	low _EUSART_DefaultOverrunErrorHandler
  6539  0483  0020               	movlb	0	; select bank0
  6540  0484  00CB               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  6541  0485  300D               	movlw	high _EUSART_DefaultOverrunErrorHandler
  6542  0486  00CC               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  6543  0487  318E  266D  3184   	fcall	_EUSART_SetOverrunErrorHandler
  6544                           
  6545                           ;eusart.c: 108: EUSART_SetErrorHandler(EUSART_DefaultErrorHandler);
  6546  048A  30A8               	movlw	low _EUSART_DefaultErrorHandler
  6547  048B  0020               	movlb	0	; select bank0
  6548  048C  00CB               	movwf	EUSART_SetErrorHandler@interruptHandler
  6549  048D  300D               	movlw	high _EUSART_DefaultErrorHandler
  6550  048E  00CC               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  6551  048F  318E  26FC         	fcall	_EUSART_SetErrorHandler
  6552                           
  6553                           ;eusart.c: 110: eusartRxLastError.status = 0;
  6554  0491  0020               	movlb	0	; select bank0
  6555  0492  01B9               	clrf	_eusartRxLastError	;volatile
  6556                           
  6557                           ;eusart.c: 113: eusartRxHead = 0;
  6558  0493  01BC               	clrf	_eusartRxHead	;volatile
  6559                           
  6560                           ;eusart.c: 114: eusartRxTail = 0;
  6561  0494  01BB               	clrf	_eusartRxTail	;volatile
  6562                           
  6563                           ;eusart.c: 115: eusartRxCount = 0;
  6564  0495  01BA               	clrf	_eusartRxCount	;volatile
  6565                           
  6566                           ;eusart.c: 118: PIE1bits.RCIE = 1;
  6567  0496  0021               	movlb	1	; select bank1
  6568  0497  1690               	bsf	16,5	;volatile
  6569  0498  0008               	return
  6570  0499                     __end_of_EUSART_Initialize:	
  6571                           
  6572                           	psect	text14
  6573  0E73                     __ptext14:	
  6574 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  6575 ;; Defined at:
  6576 ;;		line 234 in file "mcc_generated_files/eusart.c"
  6577 ;; Parameters:    Size  Location     Type
  6578 ;;  interruptHan    2   14[BANK0 ] PTR FTN()void 
  6579 ;;		 -> MyUART_ISR(1), EUSART_Receive_ISR(1), 
  6580 ;; Auto vars:     Size  Location     Type
  6581 ;;		None
  6582 ;; Return value:  Size  Location     Type
  6583 ;;                  1    wreg      void 
  6584 ;; Registers used:
  6585 ;;		wreg
  6586 ;; Tracked objects:
  6587 ;;		On entry : 0/0
  6588 ;;		On exit  : 0/0
  6589 ;;		Unchanged: 0/0
  6590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6591 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6594 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6595 ;;Total ram usage:        2 bytes
  6596 ;; Hardware stack levels used:    1
  6597 ;; Hardware stack levels required when called:   13
  6598 ;; This function calls:
  6599 ;;		Nothing
  6600 ;; This function is called by:
  6601 ;;		_EUSART_Initialize
  6602 ;;		_main
  6603 ;; This function uses a non-reentrant model
  6604 ;;
  6605                           
  6606                           
  6607                           ;psect for function _EUSART_SetRxInterruptHandler
  6608  0E73                     _EUSART_SetRxInterruptHandler:	
  6609                           
  6610                           ;eusart.c: 235: EUSART_RxDefaultInterruptHandler = interruptHandler;
  6611                           
  6612                           ;incstack = 0
  6613                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  6614  0E73  0020               	movlb	0	; select bank0
  6615  0E74  084C               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  6616  0E75  00DE               	movwf	_EUSART_RxDefaultInterruptHandler+1
  6617  0E76  084B               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  6618  0E77  00DD               	movwf	_EUSART_RxDefaultInterruptHandler
  6619  0E78  0008               	return
  6620  0E79                     __end_of_EUSART_SetRxInterruptHandler:	
  6621                           
  6622                           	psect	text15
  6623  0E6D                     __ptext15:	
  6624 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  6625 ;; Defined at:
  6626 ;;		line 225 in file "mcc_generated_files/eusart.c"
  6627 ;; Parameters:    Size  Location     Type
  6628 ;;  interruptHan    2   14[BANK0 ] PTR FTN()void 
  6629 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  6630 ;; Auto vars:     Size  Location     Type
  6631 ;;		None
  6632 ;; Return value:  Size  Location     Type
  6633 ;;                  1    wreg      void 
  6634 ;; Registers used:
  6635 ;;		wreg
  6636 ;; Tracked objects:
  6637 ;;		On entry : 0/0
  6638 ;;		On exit  : 0/0
  6639 ;;		Unchanged: 0/0
  6640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6641 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6644 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6645 ;;Total ram usage:        2 bytes
  6646 ;; Hardware stack levels used:    1
  6647 ;; Hardware stack levels required when called:   13
  6648 ;; This function calls:
  6649 ;;		Nothing
  6650 ;; This function is called by:
  6651 ;;		_EUSART_Initialize
  6652 ;; This function uses a non-reentrant model
  6653 ;;
  6654                           
  6655                           
  6656                           ;psect for function _EUSART_SetOverrunErrorHandler
  6657  0E6D                     _EUSART_SetOverrunErrorHandler:	
  6658                           
  6659                           ;eusart.c: 226: EUSART_OverrunErrorHandler = interruptHandler;
  6660                           
  6661                           ;incstack = 0
  6662                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  6663  0E6D  0020               	movlb	0	; select bank0
  6664  0E6E  084C               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  6665  0E6F  00DA               	movwf	_EUSART_OverrunErrorHandler+1
  6666  0E70  084B               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  6667  0E71  00D9               	movwf	_EUSART_OverrunErrorHandler
  6668  0E72  0008               	return
  6669  0E73                     __end_of_EUSART_SetOverrunErrorHandler:	
  6670                           
  6671                           	psect	text16
  6672  0E67                     __ptext16:	
  6673 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  6674 ;; Defined at:
  6675 ;;		line 221 in file "mcc_generated_files/eusart.c"
  6676 ;; Parameters:    Size  Location     Type
  6677 ;;  interruptHan    2   14[BANK0 ] PTR FTN()void 
  6678 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  6679 ;; Auto vars:     Size  Location     Type
  6680 ;;		None
  6681 ;; Return value:  Size  Location     Type
  6682 ;;                  1    wreg      void 
  6683 ;; Registers used:
  6684 ;;		wreg
  6685 ;; Tracked objects:
  6686 ;;		On entry : 0/0
  6687 ;;		On exit  : 0/0
  6688 ;;		Unchanged: 0/0
  6689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6690 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6693 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6694 ;;Total ram usage:        2 bytes
  6695 ;; Hardware stack levels used:    1
  6696 ;; Hardware stack levels required when called:   13
  6697 ;; This function calls:
  6698 ;;		Nothing
  6699 ;; This function is called by:
  6700 ;;		_EUSART_Initialize
  6701 ;; This function uses a non-reentrant model
  6702 ;;
  6703                           
  6704                           
  6705                           ;psect for function _EUSART_SetFramingErrorHandler
  6706  0E67                     _EUSART_SetFramingErrorHandler:	
  6707                           
  6708                           ;eusart.c: 222: EUSART_FramingErrorHandler = interruptHandler;
  6709                           
  6710                           ;incstack = 0
  6711                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  6712  0E67  0020               	movlb	0	; select bank0
  6713  0E68  084C               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  6714  0E69  00DC               	movwf	_EUSART_FramingErrorHandler+1
  6715  0E6A  084B               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  6716  0E6B  00DB               	movwf	_EUSART_FramingErrorHandler
  6717  0E6C  0008               	return
  6718  0E6D                     __end_of_EUSART_SetFramingErrorHandler:	
  6719                           
  6720                           	psect	text17
  6721  0EFC                     __ptext17:	
  6722 ;; *************** function _EUSART_SetErrorHandler *****************
  6723 ;; Defined at:
  6724 ;;		line 229 in file "mcc_generated_files/eusart.c"
  6725 ;; Parameters:    Size  Location     Type
  6726 ;;  interruptHan    2   14[BANK0 ] PTR FTN()void 
  6727 ;;		 -> EUSART_DefaultErrorHandler(1), 
  6728 ;; Auto vars:     Size  Location     Type
  6729 ;;		None
  6730 ;; Return value:  Size  Location     Type
  6731 ;;                  1    wreg      void 
  6732 ;; Registers used:
  6733 ;;		wreg
  6734 ;; Tracked objects:
  6735 ;;		On entry : 0/0
  6736 ;;		On exit  : 0/0
  6737 ;;		Unchanged: 0/0
  6738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6739 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6742 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6743 ;;Total ram usage:        2 bytes
  6744 ;; Hardware stack levels used:    1
  6745 ;; Hardware stack levels required when called:   13
  6746 ;; This function calls:
  6747 ;;		Nothing
  6748 ;; This function is called by:
  6749 ;;		_EUSART_Initialize
  6750 ;; This function uses a non-reentrant model
  6751 ;;
  6752                           
  6753                           
  6754                           ;psect for function _EUSART_SetErrorHandler
  6755  0EFC                     _EUSART_SetErrorHandler:	
  6756                           
  6757                           ;eusart.c: 230: EUSART_ErrorHandler = interruptHandler;
  6758                           
  6759                           ;incstack = 0
  6760                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  6761  0EFC  0020               	movlb	0	; select bank0
  6762  0EFD  084C               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  6763  0EFE  0021               	movlb	1	; select bank1
  6764  0EFF  00CB               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  6765  0F00  0020               	movlb	0	; select bank0
  6766  0F01  084B               	movf	EUSART_SetErrorHandler@interruptHandler,w
  6767  0F02  0021               	movlb	1	; select bank1
  6768  0F03  00CA               	movwf	_EUSART_ErrorHandler^(0+128)
  6769  0F04  0008               	return
  6770  0F05                     __end_of_EUSART_SetErrorHandler:	
  6771                           
  6772                           	psect	text18
  6773  0212                     __ptext18:	
  6774 ;; *************** function _MyDelay *****************
  6775 ;; Defined at:
  6776 ;;		line 178 in file "main.c"
  6777 ;; Parameters:    Size  Location     Type
  6778 ;;		None
  6779 ;; Auto vars:     Size  Location     Type
  6780 ;;  i               1   19[BANK0 ] unsigned char 
  6781 ;; Return value:  Size  Location     Type
  6782 ;;                  1    wreg      void 
  6783 ;; Registers used:
  6784 ;;		wreg, status,2, status,0
  6785 ;; Tracked objects:
  6786 ;;		On entry : 0/0
  6787 ;;		On exit  : 0/0
  6788 ;;		Unchanged: 0/0
  6789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6791 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6792 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6793 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6794 ;;Total ram usage:        6 bytes
  6795 ;; Hardware stack levels used:    1
  6796 ;; Hardware stack levels required when called:   13
  6797 ;; This function calls:
  6798 ;;		Nothing
  6799 ;; This function is called by:
  6800 ;;		_main
  6801 ;; This function uses a non-reentrant model
  6802 ;;
  6803                           
  6804                           
  6805                           ;psect for function _MyDelay
  6806  0212                     _MyDelay:	
  6807                           
  6808                           ;main.c: 179: uint8_t i;
  6809                           ;main.c: 180: for(i=0;i<5;i++) {
  6810                           
  6811                           ;incstack = 0
  6812                           ; Regs used in _MyDelay: [wreg+status,2+status,0]
  6813  0212  0020               	movlb	0	; select bank0
  6814  0213  01D0               	clrf	MyDelay@i
  6815  0214                     L1:	
  6816  0214  3005               	movlw	5
  6817  0215  0250               	subwf	MyDelay@i,w
  6818  0216  1803               	btfsc	3,0
  6819  0217  0008               	return
  6820                           
  6821                           ;main.c: 181: if(100-Vitesse > 4) {
  6822  0218  0833               	movf	_Vitesse,w
  6823  0219  00CB               	movwf	??_MyDelay
  6824  021A  01CC               	clrf	??_MyDelay+1
  6825  021B  09CB               	comf	??_MyDelay,f
  6826  021C  09CC               	comf	??_MyDelay+1,f
  6827  021D  0ACB               	incf	??_MyDelay,f
  6828  021E  1903               	skipnz
  6829  021F  0ACC               	incf	??_MyDelay+1,f
  6830  0220  084B               	movf	??_MyDelay,w
  6831  0221  3E64               	addlw	100
  6832  0222  00CD               	movwf	??_MyDelay+2
  6833  0223  3000               	movlw	0
  6834  0224  3D4C               	addwfc	??_MyDelay+1,w
  6835  0225  00CE               	movwf	??_MyDelay+3
  6836  0226  084E               	movf	??_MyDelay+3,w
  6837  0227  3A80               	xorlw	128
  6838  0228  00CF               	movwf	??_MyDelay+4
  6839  0229  3080               	movlw	128
  6840  022A  024F               	subwf	??_MyDelay+4,w
  6841  022B  1D03               	skipz
  6842  022C  2A2F               	goto	u1705
  6843  022D  3005               	movlw	5
  6844  022E  024D               	subwf	??_MyDelay+2,w
  6845  022F                     u1705:	
  6846  022F  1C03               	skipc
  6847  0230  2A34               	goto	l995
  6848                           
  6849                           ;main.c: 182: do { LATCbits.LATC4 = 0; } while(0);
  6850  0231  0022               	movlb	2	; select bank2
  6851  0232  120E               	bcf	14,4	;volatile
  6852                           
  6853                           ;main.c: 183: } else {
  6854  0233  2A36               	goto	l3962
  6855  0234                     l995:	
  6856                           ;main.c: 184: do { LATCbits.LATC4 = 1; } while(0);
  6857                           
  6858  0234  0022               	movlb	2	; select bank2
  6859  0235  160E               	bsf	14,4	;volatile
  6860  0236                     l3962:	
  6861                           
  6862                           ;main.c: 185: }
  6863                           ;main.c: 186: if(StateLeds == S_leds_cligno) {
  6864  0236  0020               	movlb	0	; select bank0
  6865  0237  0830               	movf	_StateLeds,w
  6866  0238  1D03               	btfss	3,2
  6867  0239  2A5B               	goto	l3974
  6868                           
  6869                           ;main.c: 187: if(Angle > 102) {
  6870  023A  3067               	movlw	103
  6871  023B  0260               	subwf	_Angle,w
  6872  023C  1C03               	skipc
  6873  023D  2A47               	goto	l3970
  6874                           
  6875                           ;main.c: 188: do { LATCbits.LATC6 = ~LATCbits.LATC6; } while(0);
  6876  023E  1003               	clrc
  6877  023F  0022               	movlb	2	; select bank2
  6878  0240  1F0E               	btfss	14,6	;volatile
  6879  0241  1403               	setc
  6880  0242  1C03               	btfss	3,0
  6881  0243  2A58               	goto	l1010
  6882  0244  0022               	movlb	2	; select bank2
  6883  0245  170E               	bsf	14,6	;volatile
  6884  0246  2A5A               	goto	l1012
  6885  0247                     l3970:	
  6886                           ;main.c: 190: } else if(Angle < 98) {
  6887                           
  6888                           ;main.c: 189: do { LATCbits.LATC7 = 0; } while(0);
  6889                           
  6890  0247  3062               	movlw	98
  6891  0248  0020               	movlb	0	; select bank0
  6892  0249  0260               	subwf	_Angle,w
  6893  024A  1803               	skipnc
  6894  024B  2A58               	goto	l1010
  6895                           
  6896                           ;main.c: 191: do { LATCbits.LATC6 = 0; } while(0);
  6897  024C  0022               	movlb	2	; select bank2
  6898  024D  130E               	bcf	14,6	;volatile
  6899                           
  6900                           ;main.c: 192: do { LATCbits.LATC7 = ~LATCbits.LATC7; } while(0);
  6901  024E  1003               	clrc
  6902  024F  1F8E               	btfss	14,7	;volatile
  6903  0250  1403               	setc
  6904  0251  1C03               	btfss	3,0
  6905  0252  2A56               	goto	u1760
  6906  0253  0022               	movlb	2	; select bank2
  6907  0254  178E               	bsf	14,7	;volatile
  6908  0255  2A5B               	goto	l3974
  6909  0256                     u1760:	
  6910  0256  0022               	movlb	2	; select bank2
  6911  0257  2A5A               	goto	l1012
  6912  0258                     l1010:	
  6913                           ;main.c: 194: do { LATCbits.LATC6 = 0; } while(0);
  6914                           
  6915                           ;main.c: 193: } else {
  6916                           
  6917  0258  0022               	movlb	2	; select bank2
  6918  0259  130E               	bcf	14,6	;volatile
  6919  025A                     l1012:	
  6920                           ;main.c: 195: do { LATCbits.LATC7 = 0; } while(0);
  6921                           
  6922  025A  138E               	bcf	14,7	;volatile
  6923  025B                     l3974:	
  6924                           
  6925                           ;main.c: 196: }
  6926                           ;main.c: 197: }
  6927                           ;main.c: 198: _delay((unsigned long)((100)*(4000000/4000.0)));
  6928  025B  3082               	movlw	130
  6929  025C  0020               	movlb	0	; select bank0
  6930  025D  00CB               	movwf	??_MyDelay
  6931  025E  30DD               	movlw	221
  6932  025F                     u4587:	
  6933  025F  0B89               	decfsz	9,f
  6934  0260  2A5F               	goto	u4587
  6935  0261  0BCB               	decfsz	??_MyDelay,f
  6936  0262  2A5F               	goto	u4587
  6937  0263  3200               	nop2
  6938  0264  3001               	movlw	1
  6939  0265  0020               	movlb	0	; select bank0
  6940  0266  00CB               	movwf	??_MyDelay
  6941  0267  084B               	movf	??_MyDelay,w
  6942  0268  07D0               	addwf	MyDelay@i,f
  6943  0269  2A14               	goto	L1
  6944  026A                     __end_of_MyDelay:	
  6945                           
  6946                           	psect	text19
  6947  0499                     __ptext19:	
  6948 ;; *************** function _I2C_Write1ByteRegister *****************
  6949 ;; Defined at:
  6950 ;;		line 91 in file "mcc_generated_files/examples/i2c_master_example.c"
  6951 ;; Parameters:    Size  Location     Type
  6952 ;;  address         1    wreg     unsigned char 
  6953 ;;  reg             1    7[BANK1 ] unsigned char 
  6954 ;;  data            1    8[BANK1 ] unsigned char 
  6955 ;; Auto vars:     Size  Location     Type
  6956 ;;  address         1   10[BANK1 ] unsigned char 
  6957 ;; Return value:  Size  Location     Type
  6958 ;;                  1    wreg      void 
  6959 ;; Registers used:
  6960 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6961 ;; Tracked objects:
  6962 ;;		On entry : 0/0
  6963 ;;		On exit  : 0/0
  6964 ;;		Unchanged: 0/0
  6965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6966 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6967 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6968 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6969 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6970 ;;Total ram usage:        4 bytes
  6971 ;; Hardware stack levels used:    1
  6972 ;; Hardware stack levels required when called:   21
  6973 ;; This function calls:
  6974 ;;		_I2C_Close
  6975 ;;		_I2C_MasterWrite
  6976 ;;		_I2C_Open
  6977 ;;		_I2C_SetAddressNackCallback
  6978 ;;		_I2C_SetBuffer
  6979 ;;		_I2C_SetDataCompleteCallback
  6980 ;; This function is called by:
  6981 ;;		_main
  6982 ;; This function uses a non-reentrant model
  6983 ;;
  6984                           
  6985                           
  6986                           ;psect for function _I2C_Write1ByteRegister
  6987  0499                     _I2C_Write1ByteRegister:	
  6988                           
  6989                           ;incstack = 0
  6990 ;; hardware stack exceeded
  6991                           ; Regs used in _I2C_Write1ByteRegister: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6992                           ;I2C_Write1ByteRegister@address stored from wreg
  6993  0499  0021               	movlb	1	; select bank1
  6994  049A  00C7               	movwf	I2C_Write1ByteRegister@address^(0+128)
  6995  049B                     l6586:	
  6996                           ;i2c_master_example.c: 93: while(!I2C_Open(address));
  6997                           
  6998  049B  0021               	movlb	1	; select bank1
  6999  049C  0847               	movf	I2C_Write1ByteRegister@address^(0+128),w
  7000  049D  3183  2348  3184   	fcall	_I2C_Open
  7001  04A0  3A00               	xorlw	0
  7002  04A1  1903               	skipnz
  7003  04A2  2C9B               	goto	l6586
  7004                           
  7005                           ;i2c_master_example.c: 94: I2C_SetDataCompleteCallback(wr1RegCompleteHandler,&data);
  7006  04A3  3040               	movlw	low _wr1RegCompleteHandler
  7007  04A4  0020               	movlb	0	; select bank0
  7008  04A5  00D0               	movwf	I2C_SetDataCompleteCallback@cb
  7009  04A6  3007               	movlw	high _wr1RegCompleteHandler
  7010  04A7  00D1               	movwf	I2C_SetDataCompleteCallback@cb+1
  7011  04A8  30C5               	movlw	(low (I2C_Write1ByteRegister@data| 0))& (0+255)
  7012  04A9  0021               	movlb	1	; select bank1
  7013  04AA  00C6               	movwf	??_I2C_Write1ByteRegister^(0+128)
  7014  04AB  0846               	movf	??_I2C_Write1ByteRegister^(0+128),w
  7015  04AC  0020               	movlb	0	; select bank0
  7016  04AD  00D2               	movwf	I2C_SetDataCompleteCallback@ptr
  7017  04AE  318F  2794  3184   	fcall	_I2C_SetDataCompleteCallback
  7018                           
  7019                           ;i2c_master_example.c: 95: I2C_SetBuffer(&reg,1);
  7020  04B1  3001               	movlw	1
  7021  04B2  0020               	movlb	0	; select bank0
  7022  04B3  00CB               	movwf	I2C_SetBuffer@bufferSize
  7023  04B4  3000               	movlw	0
  7024  04B5  00CC               	movwf	I2C_SetBuffer@bufferSize+1
  7025  04B6  30C4               	movlw	(low (I2C_Write1ByteRegister@reg| 0))& (0+255)
  7026  04B7  3187  27D8  3184   	fcall	_I2C_SetBuffer
  7027                           
  7028                           ;i2c_master_example.c: 96: I2C_SetAddressNackCallback((0),(0));
  7029  04BA  3000               	movlw	0
  7030  04BB  0020               	movlb	0	; select bank0
  7031  04BC  00D0               	movwf	I2C_SetAddressNackCallback@cb
  7032  04BD  00D1               	movwf	I2C_SetAddressNackCallback@cb+1
  7033  04BE  01D2               	clrf	I2C_SetAddressNackCallback@ptr
  7034  04BF  318F  27A1  3184   	fcall	_I2C_SetAddressNackCallback
  7035                           
  7036                           ;i2c_master_example.c: 97: I2C_MasterWrite();
  7037  04C2  318E  2626  3184   	fcall	_I2C_MasterWrite
  7038  04C5                     l6596:	
  7039                           ;i2c_master_example.c: 98: while(I2C_BUSY == I2C_Close());
  7040                           
  7041  04C5  3186  2684  3184   	fcall	_I2C_Close
  7042  04C8  3A01               	xorlw	1
  7043  04C9  1D03               	btfss	3,2
  7044  04CA  0008               	return
  7045  04CB  2CC5               	goto	l6596
  7046  04CC                     __end_of_I2C_Write1ByteRegister:	
  7047                           
  7048                           	psect	text20
  7049  0FA1                     __ptext20:	
  7050 ;; *************** function _I2C_SetAddressNackCallback *****************
  7051 ;; Defined at:
  7052 ;;		line 283 in file "mcc_generated_files/i2c_master.c"
  7053 ;; Parameters:    Size  Location     Type
  7054 ;;  cb              2   19[BANK0 ] PTR FTN(PTR void ,)enum 
  7055 ;;		 -> Absolute function(1), 
  7056 ;;  ptr             1   21[BANK0 ] PTR void 
  7057 ;;		 -> NULL(0), 
  7058 ;; Auto vars:     Size  Location     Type
  7059 ;;		None
  7060 ;; Return value:  Size  Location     Type
  7061 ;;                  1    wreg      void 
  7062 ;; Registers used:
  7063 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7064 ;; Tracked objects:
  7065 ;;		On entry : 0/0
  7066 ;;		On exit  : 0/0
  7067 ;;		Unchanged: 0/0
  7068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7069 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7071 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7072 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7073 ;;Total ram usage:        4 bytes
  7074 ;; Hardware stack levels used:    1
  7075 ;; Hardware stack levels required when called:   14
  7076 ;; This function calls:
  7077 ;;		_I2C_SetCallback
  7078 ;; This function is called by:
  7079 ;;		_I2C_Write1ByteRegister
  7080 ;;		_I2C_Read2ByteRegister
  7081 ;;		_I2C_Write2ByteRegister
  7082 ;;		_I2C_WriteNBytes
  7083 ;;		_I2C_ReadDataBlock
  7084 ;; This function uses a non-reentrant model
  7085 ;;
  7086                           
  7087                           
  7088                           ;psect for function _I2C_SetAddressNackCallback
  7089  0FA1                     _I2C_SetAddressNackCallback:	
  7090                           
  7091                           ;i2c_master.c: 285: I2C_SetCallback(I2C_ADDR_NACK, cb, ptr);
  7092                           
  7093                           ;incstack = 0
  7094                           ; Regs used in _I2C_SetAddressNackCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7095  0FA1  0020               	movlb	0	; select bank0
  7096  0FA2  0851               	movf	I2C_SetAddressNackCallback@cb+1,w
  7097  0FA3  00CC               	movwf	I2C_SetCallback@cb+1
  7098  0FA4  0850               	movf	I2C_SetAddressNackCallback@cb,w
  7099  0FA5  00CB               	movwf	I2C_SetCallback@cb
  7100  0FA6  0852               	movf	I2C_SetAddressNackCallback@ptr,w
  7101  0FA7  00D3               	movwf	??_I2C_SetAddressNackCallback
  7102  0FA8  0853               	movf	??_I2C_SetAddressNackCallback,w
  7103  0FA9  00CD               	movwf	I2C_SetCallback@ptr
  7104  0FAA  3002               	movlw	2
  7105  0FAB  3185  25D3         	fcall	_I2C_SetCallback
  7106  0FAD  0008               	return
  7107  0FAE                     __end_of_I2C_SetAddressNackCallback:	
  7108                           
  7109                           	psect	text21
  7110  0348                     __ptext21:	
  7111 ;; *************** function _I2C_Open *****************
  7112 ;; Defined at:
  7113 ;;		line 176 in file "mcc_generated_files/i2c_master.c"
  7114 ;; Parameters:    Size  Location     Type
  7115 ;;  address         1    wreg     unsigned char 
  7116 ;; Auto vars:     Size  Location     Type
  7117 ;;  address         1   15[BANK0 ] unsigned char 
  7118 ;;  returnValue     1   16[BANK0 ] enum E92
  7119 ;; Return value:  Size  Location     Type
  7120 ;;                  1    wreg      enum E92
  7121 ;; Registers used:
  7122 ;;		wreg, status,2, status,0, pclath, cstack
  7123 ;; Tracked objects:
  7124 ;;		On entry : 0/0
  7125 ;;		On exit  : 0/0
  7126 ;;		Unchanged: 0/0
  7127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7129 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7130 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7131 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7132 ;;Total ram usage:        3 bytes
  7133 ;; Hardware stack levels used:    1
  7134 ;; Hardware stack levels required when called:   14
  7135 ;; This function calls:
  7136 ;;		_I2C_MasterClearIrq
  7137 ;;		_I2C_MasterOpen
  7138 ;; This function is called by:
  7139 ;;		_I2C_Write1ByteRegister
  7140 ;;		_I2C_Read2ByteRegister
  7141 ;;		_I2C_Write2ByteRegister
  7142 ;;		_I2C_WriteNBytes
  7143 ;;		_I2C_ReadNBytes
  7144 ;;		_I2C_ReadDataBlock
  7145 ;; This function uses a non-reentrant model
  7146 ;;
  7147                           
  7148                           
  7149                           ;psect for function _I2C_Open
  7150  0348                     _I2C_Open:	
  7151                           
  7152                           ;incstack = 0
  7153                           ; Regs used in _I2C_Open: [wreg+status,2+status,0+pclath+cstack]
  7154                           ;I2C_Open@address stored from wreg
  7155  0348  0020               	movlb	0	; select bank0
  7156  0349  00CC               	movwf	I2C_Open@address
  7157                           
  7158                           ;i2c_master.c: 178: i2c_error_t returnValue = I2C_BUSY;
  7159  034A  01CD               	clrf	I2C_Open@returnValue
  7160  034B  0ACD               	incf	I2C_Open@returnValue,f
  7161                           
  7162                           ;i2c_master.c: 180: if(!I2C_Status.inUse)
  7163  034C  0021               	movlb	1	; select bank1
  7164  034D  193C               	btfsc	(_I2C_Status^(0+128)+28),2
  7165  034E  2B83               	goto	l335
  7166                           
  7167                           ;i2c_master.c: 181: {
  7168                           ;i2c_master.c: 182: I2C_Status.address = address;
  7169  034F  0020               	movlb	0	; select bank0
  7170  0350  084C               	movf	I2C_Open@address,w
  7171  0351  00CB               	movwf	??_I2C_Open
  7172  0352  084B               	movf	??_I2C_Open,w
  7173  0353  0021               	movlb	1	; select bank1
  7174  0354  00B6               	movwf	(_I2C_Status^(0+128)+22)
  7175                           
  7176                           ;i2c_master.c: 183: I2C_Status.busy = 0;
  7177  0355  10BC               	bcf	(_I2C_Status^(0+128)+28),1
  7178                           
  7179                           ;i2c_master.c: 184: I2C_Status.inUse = 1;
  7180  0356  153C               	bsf	(_I2C_Status^(0+128)+28),2
  7181                           
  7182                           ;i2c_master.c: 185: I2C_Status.addressNackCheck = 0;
  7183  0357  103C               	bcf	(_I2C_Status^(0+128)+28),0
  7184                           
  7185                           ;i2c_master.c: 186: I2C_Status.state = I2C_RESET;
  7186  0358  300E               	movlw	14
  7187  0359  0020               	movlb	0	; select bank0
  7188  035A  00CB               	movwf	??_I2C_Open
  7189  035B  084B               	movf	??_I2C_Open,w
  7190  035C  0021               	movlb	1	; select bank1
  7191  035D  00BA               	movwf	(_I2C_Status^(0+128)+26)
  7192                           
  7193                           ;i2c_master.c: 187: I2C_Status.time_out_value = 500;
  7194  035E  30F4               	movlw	244
  7195  035F  00B4               	movwf	(_I2C_Status^(0+128)+20)
  7196  0360  3001               	movlw	1
  7197  0361  00B5               	movwf	(_I2C_Status^(0+128)+21)
  7198                           
  7199                           ;i2c_master.c: 188: I2C_Status.bufferFree = 1;
  7200  0362  15BC               	bsf	(_I2C_Status^(0+128)+28),3
  7201                           
  7202                           ;i2c_master.c: 191: I2C_Status.callbackTable[I2C_DATA_COMPLETE]=I2C_CallbackReturnStop;
  7203  0363  304F               	movlw	low _I2C_CallbackReturnStop
  7204  0364  00A0               	movwf	_I2C_Status^(0+128)
  7205  0365  300E               	movlw	high _I2C_CallbackReturnStop
  7206  0366  00A1               	movwf	(_I2C_Status^(0+128)+1)
  7207                           
  7208                           ;i2c_master.c: 192: I2C_Status.callbackPayload[I2C_DATA_COMPLETE] = (0);
  7209  0367  01AC               	clrf	(low ((_I2C_Status| 0+12)))^(0+128)
  7210                           
  7211                           ;i2c_master.c: 193: I2C_Status.callbackTable[I2C_WRITE_COLLISION]=I2C_CallbackReturnStop
      +                          ;
  7212  0368  304F               	movlw	low _I2C_CallbackReturnStop
  7213  0369  00A2               	movwf	(low ((_I2C_Status| 0+2)))^(0+128)
  7214  036A  300E               	movlw	high _I2C_CallbackReturnStop
  7215  036B  00A3               	movwf	((low ((_I2C_Status| 0+2)))^(0+128)+1)
  7216                           
  7217                           ;i2c_master.c: 194: I2C_Status.callbackPayload[I2C_WRITE_COLLISION] = (0);
  7218  036C  01AD               	clrf	(low ((_I2C_Status| 0+13)))^(0+128)
  7219                           
  7220                           ;i2c_master.c: 195: I2C_Status.callbackTable[I2C_ADDR_NACK]=I2C_CallbackReturnStop;
  7221  036D  304F               	movlw	low _I2C_CallbackReturnStop
  7222  036E  00A4               	movwf	(low ((_I2C_Status| 0+4)))^(0+128)
  7223  036F  300E               	movlw	high _I2C_CallbackReturnStop
  7224  0370  00A5               	movwf	((low ((_I2C_Status| 0+4)))^(0+128)+1)
  7225                           
  7226                           ;i2c_master.c: 196: I2C_Status.callbackPayload[I2C_ADDR_NACK] = (0);
  7227  0371  01AE               	clrf	(low ((_I2C_Status| 0+14)))^(0+128)
  7228                           
  7229                           ;i2c_master.c: 197: I2C_Status.callbackTable[I2C_DATA_NACK]=I2C_CallbackReturnStop;
  7230  0372  304F               	movlw	low _I2C_CallbackReturnStop
  7231  0373  00A6               	movwf	(low ((_I2C_Status| 0+6)))^(0+128)
  7232  0374  300E               	movlw	high _I2C_CallbackReturnStop
  7233  0375  00A7               	movwf	((low ((_I2C_Status| 0+6)))^(0+128)+1)
  7234                           
  7235                           ;i2c_master.c: 198: I2C_Status.callbackPayload[I2C_DATA_NACK] = (0);
  7236  0376  01AF               	clrf	(low ((_I2C_Status| 0+15)))^(0+128)
  7237                           
  7238                           ;i2c_master.c: 199: I2C_Status.callbackTable[I2C_TIMEOUT]=I2C_CallbackReturnReset;
  7239  0377  3055               	movlw	low _I2C_CallbackReturnReset
  7240  0378  00A8               	movwf	(low ((_I2C_Status| 0+8)))^(0+128)
  7241  0379  300E               	movlw	high _I2C_CallbackReturnReset
  7242  037A  00A9               	movwf	((low ((_I2C_Status| 0+8)))^(0+128)+1)
  7243                           
  7244                           ;i2c_master.c: 200: I2C_Status.callbackPayload[I2C_TIMEOUT] = (0);
  7245  037B  01B0               	clrf	(low ((_I2C_Status| 0+16)))^(0+128)
  7246                           
  7247                           ;i2c_master.c: 202: I2C_MasterClearIrq();
  7248  037C  318D  25C9  3183   	fcall	_I2C_MasterClearIrq
  7249                           
  7250                           ;i2c_master.c: 203: I2C_MasterOpen();
  7251  037F  318F  2788         	fcall	_I2C_MasterOpen
  7252                           
  7253                           ;i2c_master.c: 204: returnValue = I2C_NOERR;
  7254  0381  0020               	movlb	0	; select bank0
  7255  0382  01CD               	clrf	I2C_Open@returnValue
  7256  0383                     l335:	
  7257                           
  7258                           ;i2c_master.c: 205: }
  7259                           ;i2c_master.c: 206: return returnValue;
  7260  0383  0020               	movlb	0	; select bank0
  7261  0384  084D               	movf	I2C_Open@returnValue,w
  7262  0385  0008               	return
  7263  0386                     __end_of_I2C_Open:	
  7264                           
  7265                           	psect	text22
  7266  0F88                     __ptext22:	
  7267 ;; *************** function _I2C_MasterOpen *****************
  7268 ;; Defined at:
  7269 ;;		line 543 in file "mcc_generated_files/i2c_master.c"
  7270 ;; Parameters:    Size  Location     Type
  7271 ;;		None
  7272 ;; Auto vars:     Size  Location     Type
  7273 ;;		None
  7274 ;; Return value:  Size  Location     Type
  7275 ;;                  1    wreg      unsigned char 
  7276 ;; Registers used:
  7277 ;;		wreg, status,2
  7278 ;; Tracked objects:
  7279 ;;		On entry : 0/0
  7280 ;;		On exit  : 0/0
  7281 ;;		Unchanged: 0/0
  7282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7287 ;;Total ram usage:        0 bytes
  7288 ;; Hardware stack levels used:    1
  7289 ;; Hardware stack levels required when called:   13
  7290 ;; This function calls:
  7291 ;;		Nothing
  7292 ;; This function is called by:
  7293 ;;		_I2C_Open
  7294 ;; This function uses a non-reentrant model
  7295 ;;
  7296                           
  7297                           
  7298                           ;psect for function _I2C_MasterOpen
  7299  0F88                     _I2C_MasterOpen:	
  7300                           
  7301                           ;i2c_master.c: 545: if(!SSP1CON1bits.SSPEN)
  7302                           
  7303                           ;incstack = 0
  7304                           ; Regs used in _I2C_MasterOpen: [wreg+status,2]
  7305  0F88  0024               	movlb	4	; select bank4
  7306  0F89  1A95               	btfsc	21,5	;volatile
  7307  0F8A  0008               	return
  7308                           
  7309                           ;i2c_master.c: 546: {
  7310                           ;i2c_master.c: 547: SSP1STAT = 0x80;
  7311  0F8B  3080               	movlw	128
  7312  0F8C  0094               	movwf	20	;volatile
  7313                           
  7314                           ;i2c_master.c: 548: SSP1CON1 = 0x08;
  7315  0F8D  3008               	movlw	8
  7316  0F8E  0095               	movwf	21	;volatile
  7317                           
  7318                           ;i2c_master.c: 549: SSP1CON2 = 0x00;
  7319  0F8F  0196               	clrf	22	;volatile
  7320                           
  7321                           ;i2c_master.c: 550: SSP1ADD = 0x09;
  7322  0F90  3009               	movlw	9
  7323  0F91  0092               	movwf	18	;volatile
  7324                           
  7325                           ;i2c_master.c: 551: SSP1CON1bits.SSPEN = 1;
  7326  0F92  1695               	bsf	21,5	;volatile
  7327                           
  7328                           ;i2c_master.c: 552: return 1;
  7329                           ;	Return value of _I2C_MasterOpen is never used
  7330  0F93  0008               	return
  7331  0F94                     __end_of_I2C_MasterOpen:	
  7332                           ;i2c_master.c: 553: }
  7333                           ;i2c_master.c: 554: return 0;
  7334                           ;	Return value of _I2C_MasterOpen is never used
  7335                           
  7336                           
  7337                           	psect	text23
  7338  0E26                     __ptext23:	
  7339 ;; *************** function _I2C_MasterWrite *****************
  7340 ;; Defined at:
  7341 ;;		line 251 in file "mcc_generated_files/i2c_master.c"
  7342 ;; Parameters:    Size  Location     Type
  7343 ;;		None
  7344 ;; Auto vars:     Size  Location     Type
  7345 ;;		None
  7346 ;; Return value:  Size  Location     Type
  7347 ;;                  1    wreg      enum E92
  7348 ;; Registers used:
  7349 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7350 ;; Tracked objects:
  7351 ;;		On entry : 0/0
  7352 ;;		On exit  : 0/0
  7353 ;;		Unchanged: 0/0
  7354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7359 ;;Total ram usage:        0 bytes
  7360 ;; Hardware stack levels used:    1
  7361 ;; Hardware stack levels required when called:   20
  7362 ;; This function calls:
  7363 ;;		_I2C_MasterOperation
  7364 ;; This function is called by:
  7365 ;;		_I2C_Write1ByteRegister
  7366 ;;		_I2C_Read2ByteRegister
  7367 ;;		_I2C_Write2ByteRegister
  7368 ;;		_I2C_WriteNBytes
  7369 ;;		_I2C_ReadDataBlock
  7370 ;; This function uses a non-reentrant model
  7371 ;;
  7372                           
  7373                           
  7374                           ;psect for function _I2C_MasterWrite
  7375  0E26                     _I2C_MasterWrite:	
  7376                           
  7377                           ;i2c_master.c: 253: return I2C_MasterOperation(0);
  7378                           ;	Return value of _I2C_MasterWrite is never used
  7379                           
  7380                           ;incstack = 0
  7381 ;; hardware stack exceeded
  7382                           ; Regs used in _I2C_MasterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7383  0E26  3000               	movlw	0
  7384  0E27  3186  26DD         	fcall	_I2C_MasterOperation
  7385  0E29  0008               	return
  7386  0E2A                     __end_of_I2C_MasterWrite:	
  7387                           
  7388                           	psect	text24
  7389  06DD                     __ptext24:	
  7390 ;; *************** function _I2C_MasterOperation *****************
  7391 ;; Defined at:
  7392 ;;		line 224 in file "mcc_generated_files/i2c_master.c"
  7393 ;; Parameters:    Size  Location     Type
  7394 ;;  read            1    wreg     unsigned char 
  7395 ;; Auto vars:     Size  Location     Type
  7396 ;;  read            1    5[BANK1 ] unsigned char 
  7397 ;;  returnValue     1    6[BANK1 ] enum E92
  7398 ;; Return value:  Size  Location     Type
  7399 ;;                  1    wreg      enum E92
  7400 ;; Registers used:
  7401 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7402 ;; Tracked objects:
  7403 ;;		On entry : 0/0
  7404 ;;		On exit  : 0/0
  7405 ;;		Unchanged: 0/0
  7406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7408 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7409 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7410 ;;      Totals:         0       1       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7411 ;;Total ram usage:        3 bytes
  7412 ;; Hardware stack levels used:    1
  7413 ;; Hardware stack levels required when called:   19
  7414 ;; This function calls:
  7415 ;;		_I2C_MasterStart
  7416 ;;		_I2C_Poller
  7417 ;; This function is called by:
  7418 ;;		_I2C_MasterWrite
  7419 ;;		_I2C_MasterRead
  7420 ;; This function uses a non-reentrant model
  7421 ;;
  7422                           
  7423                           
  7424                           ;psect for function _I2C_MasterOperation
  7425  06DD                     _I2C_MasterOperation:	
  7426                           
  7427                           ;incstack = 0
  7428 ;; hardware stack exceeded
  7429                           ; Regs used in _I2C_MasterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7430                           ;I2C_MasterOperation@read stored from wreg
  7431  06DD  0021               	movlb	1	; select bank1
  7432  06DE  00C2               	movwf	I2C_MasterOperation@read^(0+128)
  7433                           
  7434                           ;i2c_master.c: 226: i2c_error_t returnValue = I2C_BUSY;
  7435  06DF  01C3               	clrf	I2C_MasterOperation@returnValue^(0+128)
  7436  06E0  0AC3               	incf	I2C_MasterOperation@returnValue^(0+128),f
  7437                           
  7438                           ;i2c_master.c: 227: if(!I2C_Status.busy)
  7439  06E1  18BC               	btfsc	(_I2C_Status^(0+128)+28),1
  7440  06E2  2EF6               	goto	l6504
  7441                           
  7442                           ;i2c_master.c: 228: {
  7443                           ;i2c_master.c: 229: I2C_Status.busy = 1;
  7444  06E3  14BC               	bsf	(_I2C_Status^(0+128)+28),1
  7445                           
  7446                           ;i2c_master.c: 230: returnValue = I2C_NOERR;
  7447  06E4  01C3               	clrf	I2C_MasterOperation@returnValue^(0+128)
  7448                           
  7449                           ;i2c_master.c: 232: if(read)
  7450  06E5  0842               	movf	I2C_MasterOperation@read^(0+128),w
  7451  06E6  1903               	btfsc	3,2
  7452  06E7  2EEB               	goto	l6498
  7453                           
  7454                           ;i2c_master.c: 233: {
  7455                           ;i2c_master.c: 234: I2C_Status.state = I2C_SEND_ADR_READ;
  7456  06E8  01BA               	clrf	(_I2C_Status^(0+128)+26)
  7457  06E9  0ABA               	incf	(_I2C_Status^(0+128)+26),f
  7458                           
  7459                           ;i2c_master.c: 235: }
  7460  06EA  2EF1               	goto	l6500
  7461  06EB                     l6498:	
  7462                           
  7463                           ;i2c_master.c: 236: else
  7464                           ;i2c_master.c: 237: {
  7465                           ;i2c_master.c: 238: I2C_Status.state = I2C_SEND_ADR_WRITE;
  7466  06EB  3002               	movlw	2
  7467  06EC  0020               	movlb	0	; select bank0
  7468  06ED  00D6               	movwf	??_I2C_MasterOperation
  7469  06EE  0856               	movf	??_I2C_MasterOperation,w
  7470  06EF  0021               	movlb	1	; select bank1
  7471  06F0  00BA               	movwf	(_I2C_Status^(0+128)+26)
  7472  06F1                     l6500:	
  7473                           
  7474                           ;i2c_master.c: 239: }
  7475                           ;i2c_master.c: 240: I2C_MasterStart();
  7476  06F1  318D  25D2  3186   	fcall	_I2C_MasterStart
  7477                           
  7478                           ;i2c_master.c: 241: I2C_Poller();
  7479  06F4  318F  2723         	fcall	_I2C_Poller
  7480  06F6                     l6504:	
  7481                           
  7482                           ;i2c_master.c: 242: }
  7483                           ;i2c_master.c: 243: return returnValue;
  7484  06F6  0021               	movlb	1	; select bank1
  7485  06F7  0843               	movf	I2C_MasterOperation@returnValue^(0+128),w
  7486  06F8  0008               	return
  7487  06F9                     __end_of_I2C_MasterOperation:	
  7488                           
  7489                           	psect	text25
  7490  0F23                     __ptext25:	
  7491 ;; *************** function _I2C_Poller *****************
  7492 ;; Defined at:
  7493 ;;		line 312 in file "mcc_generated_files/i2c_master.c"
  7494 ;; Parameters:    Size  Location     Type
  7495 ;;		None
  7496 ;; Auto vars:     Size  Location     Type
  7497 ;;		None
  7498 ;; Return value:  Size  Location     Type
  7499 ;;                  1    wreg      void 
  7500 ;; Registers used:
  7501 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7502 ;; Tracked objects:
  7503 ;;		On entry : 0/0
  7504 ;;		On exit  : 0/0
  7505 ;;		Unchanged: 0/0
  7506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7510 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7511 ;;Total ram usage:        0 bytes
  7512 ;; Hardware stack levels used:    1
  7513 ;; Hardware stack levels required when called:   18
  7514 ;; This function calls:
  7515 ;;		_I2C_MasterFsm
  7516 ;;		_I2C_MasterWaitForEvent
  7517 ;; This function is called by:
  7518 ;;		_I2C_MasterOperation
  7519 ;; This function uses a non-reentrant model
  7520 ;;
  7521                           
  7522                           
  7523                           ;psect for function _I2C_Poller
  7524  0F23                     _I2C_Poller:	
  7525  0F23                     l6472:	
  7526                           ;i2c_master.c: 314: while(I2C_Status.busy)
  7527                           
  7528                           ;incstack = 0
  7529 ;; hardware stack exceeded
  7530                           ; Regs used in _I2C_Poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7531                           
  7532  0F23  0021               	movlb	1	; select bank1
  7533  0F24  1CBC               	btfss	(_I2C_Status^(0+128)+28),1
  7534  0F25  0008               	return
  7535                           
  7536                           ;i2c_master.c: 315: {
  7537                           ;i2c_master.c: 316: I2C_MasterWaitForEvent();
  7538  0F26  318E  2622  318F   	fcall	_I2C_MasterWaitForEvent
  7539                           
  7540                           ;i2c_master.c: 317: I2C_MasterFsm();
  7541  0F29  3185  25AC  318F   	fcall	_I2C_MasterFsm
  7542  0F2C  2F23               	goto	l6472
  7543  0F2D                     __end_of_I2C_Poller:	
  7544                           
  7545                           	psect	text26
  7546  0E22                     __ptext26:	
  7547 ;; *************** function _I2C_MasterWaitForEvent *****************
  7548 ;; Defined at:
  7549 ;;		line 650 in file "mcc_generated_files/i2c_master.c"
  7550 ;; Parameters:    Size  Location     Type
  7551 ;;		None
  7552 ;; Auto vars:     Size  Location     Type
  7553 ;;		None
  7554 ;; Return value:  Size  Location     Type
  7555 ;;                  1    wreg      void 
  7556 ;; Registers used:
  7557 ;;		None
  7558 ;; Tracked objects:
  7559 ;;		On entry : 0/0
  7560 ;;		On exit  : 0/0
  7561 ;;		Unchanged: 0/0
  7562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7567 ;;Total ram usage:        0 bytes
  7568 ;; Hardware stack levels used:    1
  7569 ;; Hardware stack levels required when called:   13
  7570 ;; This function calls:
  7571 ;;		Nothing
  7572 ;; This function is called by:
  7573 ;;		_I2C_Poller
  7574 ;; This function uses a non-reentrant model
  7575 ;;
  7576                           
  7577                           
  7578                           ;psect for function _I2C_MasterWaitForEvent
  7579  0E22                     _I2C_MasterWaitForEvent:	
  7580  0E22                     l558:	
  7581                           ;incstack = 0
  7582 ;; hardware stack exceeded
  7583                           ; Regs used in _I2C_MasterWaitForEvent: []
  7584                           ;i2c_master.c: 652: while(1)
  7585                           
  7586                           
  7587                           ;i2c_master.c: 653: {
  7588                           ;i2c_master.c: 654: if(PIR1bits.SSP1IF)
  7589  0E22  0020               	movlb	0	; select bank0
  7590  0E23  1990               	btfsc	16,3	;volatile
  7591  0E24  0008               	return
  7592  0E25  2E22               	goto	l558
  7593  0E26                     __end_of_I2C_MasterWaitForEvent:	
  7594                           ;i2c_master.c: 655: {
  7595                           ;i2c_master.c: 656: break;
  7596                           
  7597                           
  7598                           	psect	text27
  7599  05AC                     __ptext27:	
  7600 ;; *************** function _I2C_MasterFsm *****************
  7601 ;; Defined at:
  7602 ;;		line 321 in file "mcc_generated_files/i2c_master.c"
  7603 ;; Parameters:    Size  Location     Type
  7604 ;;		None
  7605 ;; Auto vars:     Size  Location     Type
  7606 ;;		None
  7607 ;; Return value:  Size  Location     Type
  7608 ;;                  1    wreg      void 
  7609 ;; Registers used:
  7610 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7611 ;; Tracked objects:
  7612 ;;		On entry : 0/0
  7613 ;;		On exit  : 0/0
  7614 ;;		Unchanged: 0/0
  7615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7618 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7619 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7620 ;;Total ram usage:        3 bytes
  7621 ;; Hardware stack levels used:    1
  7622 ;; Hardware stack levels required when called:   17
  7623 ;; This function calls:
  7624 ;;		_I2C_DO_ADDRESS_NACK
  7625 ;;		_I2C_DO_IDLE
  7626 ;;		_I2C_DO_RCEN
  7627 ;;		_I2C_DO_RESET
  7628 ;;		_I2C_DO_RX
  7629 ;;		_I2C_DO_RX_ACK
  7630 ;;		_I2C_DO_RX_NACK_RESTART
  7631 ;;		_I2C_DO_RX_NACK_STOP
  7632 ;;		_I2C_DO_SEND_ADR_READ
  7633 ;;		_I2C_DO_SEND_ADR_WRITE
  7634 ;;		_I2C_DO_SEND_RESTART
  7635 ;;		_I2C_DO_SEND_RESTART_READ
  7636 ;;		_I2C_DO_SEND_RESTART_WRITE
  7637 ;;		_I2C_DO_SEND_STOP
  7638 ;;		_I2C_DO_TX
  7639 ;;		_I2C_DO_TX_EMPTY
  7640 ;;		_I2C_MasterClearIrq
  7641 ;;		_I2C_MasterIsNack
  7642 ;; This function is called by:
  7643 ;;		_I2C_Poller
  7644 ;; This function uses a non-reentrant model
  7645 ;;
  7646                           
  7647                           
  7648                           ;psect for function _I2C_MasterFsm
  7649  05AC                     _I2C_MasterFsm:	
  7650                           
  7651                           ;i2c_master.c: 323: I2C_MasterClearIrq();
  7652                           
  7653                           ;incstack = 0
  7654 ;; hardware stack exceeded
  7655                           ; Regs used in _I2C_MasterFsm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7656  05AC  318D  25C9  3185   	fcall	_I2C_MasterClearIrq
  7657                           
  7658                           ;i2c_master.c: 325: if(I2C_Status.addressNackCheck && I2C_MasterIsNack())
  7659  05AF  0021               	movlb	1	; select bank1
  7660  05B0  1C3C               	btfss	(_I2C_Status^(0+128)+28),0
  7661  05B1  2DBD               	goto	l6442
  7662  05B2  318E  2661  3185   	fcall	_I2C_MasterIsNack
  7663  05B5  3A00               	xorlw	0
  7664  05B6  1903               	skipnz
  7665  05B7  2DBD               	goto	l6442
  7666                           
  7667                           ;i2c_master.c: 326: {
  7668                           ;i2c_master.c: 327: I2C_Status.state = I2C_ADDRESS_NACK;
  7669  05B8  300F               	movlw	15
  7670  05B9  0021               	movlb	1	; select bank1
  7671  05BA  00BF               	movwf	??_I2C_MasterFsm^(0+128)
  7672  05BB  083F               	movf	??_I2C_MasterFsm^(0+128),w
  7673  05BC  00BA               	movwf	(_I2C_Status^(0+128)+26)
  7674  05BD                     l6442:	
  7675                           
  7676                           ;i2c_master.c: 328: }
  7677                           ;i2c_master.c: 329: I2C_Status.state = fsmStateTable[I2C_Status.state]();
  7678  05BD  0021               	movlb	1	; select bank1
  7679  05BE  083A               	movf	(_I2C_Status^(0+128)+26),w
  7680  05BF  00BF               	movwf	??_I2C_MasterFsm^(0+128)
  7681  05C0  01C0               	clrf	(??_I2C_MasterFsm^(0+128)+1)
  7682  05C1  35BF               	lslf	??_I2C_MasterFsm^(0+128),f
  7683  05C2  0DC0               	rlf	(??_I2C_MasterFsm^(0+128)+1),f
  7684  05C3  3064               	movlw	low (_fsmStateTable| (0+32768))
  7685  05C4  073F               	addwf	??_I2C_MasterFsm^(0+128),w
  7686  05C5  0084               	movwf	4
  7687  05C6  3086               	movlw	high (_fsmStateTable| (0+32768))
  7688  05C7  3D40               	addwfc	(??_I2C_MasterFsm+1)^(0+128),w
  7689  05C8  0085               	movwf	5
  7690  05C9  3F01               	moviw [1]fsr0
  7691  05CA  008A               	movwf	10
  7692  05CB  3F00               	moviw [0]fsr0
  7693  05CC  000A               	callw
  7694  05CD  3185               	pagesel	$
  7695  05CE  0021               	movlb	1	; select bank1
  7696  05CF  00C1               	movwf	(??_I2C_MasterFsm+2)^(0+128)
  7697  05D0  0841               	movf	(??_I2C_MasterFsm+2)^(0+128),w
  7698  05D1  00BA               	movwf	(_I2C_Status^(0+128)+26)
  7699  05D2  0008               	return
  7700  05D3                     __end_of_I2C_MasterFsm:	
  7701                           
  7702                           	psect	text28
  7703  0558                     __ptext28:	
  7704 ;; *************** function _I2C_DO_ADDRESS_NACK *****************
  7705 ;; Defined at:
  7706 ;;		line 500 in file "mcc_generated_files/i2c_master.c"
  7707 ;; Parameters:    Size  Location     Type
  7708 ;;		None
  7709 ;; Auto vars:     Size  Location     Type
  7710 ;;		None
  7711 ;; Return value:  Size  Location     Type
  7712 ;;                  1    wreg      enum E12103
  7713 ;; Registers used:
  7714 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7715 ;; Tracked objects:
  7716 ;;		On entry : 0/0
  7717 ;;		On exit  : 0/0
  7718 ;;		Unchanged: 0/0
  7719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7722 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7723 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7724 ;;Total ram usage:        1 bytes
  7725 ;; Hardware stack levels used:    1
  7726 ;; Hardware stack levels required when called:   16
  7727 ;; This function calls:
  7728 ;;		Absolute function
  7729 ;;		_I2C_CallbackReturnReset
  7730 ;;		_I2C_CallbackReturnStop
  7731 ;;		_I2C_DO_SEND_RESTART
  7732 ;;		_I2C_DO_SEND_STOP
  7733 ;;		_rd1RegCompleteHandler
  7734 ;;		_rd2RegCompleteHandler
  7735 ;;		_rdBlkRegCompleteHandler
  7736 ;;		_wr1RegCompleteHandler
  7737 ;;		_wr2RegCompleteHandler
  7738 ;; This function is called by:
  7739 ;;		i1_I2C_MasterFsm
  7740 ;;		_I2C_MasterFsm
  7741 ;; This function uses a non-reentrant model
  7742 ;;
  7743                           
  7744                           
  7745                           ;psect for function _I2C_DO_ADDRESS_NACK
  7746  0558                     _I2C_DO_ADDRESS_NACK:	
  7747                           
  7748                           ;Skip over the trampoline to the duplicate function for level 1
  7749  0558  1C7E               	btfss	126,0
  7750  0559  2D5C               	goto	l6398
  7751  055A  3186  2E41         	ljmp	i1l6288
  7752  055C                     _I2C_DO_ADDRESS_NACK$intlevel0:	
  7753  055C                     l6398:	
  7754                           ;incstack = 0
  7755 ;; hardware stack exceeded
  7756                           ; Regs used in _I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7757                           
  7758                           
  7759                           ;i2c_master.c: 502: I2C_Status.addressNackCheck = 0;
  7760  055C  0021               	movlb	1	; select bank1
  7761  055D  103C               	bcf	(_I2C_Status^(0+128)+28),0
  7762                           
  7763                           ;i2c_master.c: 503: I2C_Status.error = I2C_FAIL;
  7764  055E  3002               	movlw	2
  7765  055F  0020               	movlb	0	; select bank0
  7766  0560  00D5               	movwf	??_I2C_DO_ADDRESS_NACK
  7767  0561  0855               	movf	??_I2C_DO_ADDRESS_NACK,w
  7768  0562  0021               	movlb	1	; select bank1
  7769  0563  00BB               	movwf	(_I2C_Status^(0+128)+27)
  7770                           
  7771                           ;i2c_master.c: 504: switch(I2C_Status.callbackTable[I2C_ADDR_NACK](I2C_Status.callbackPa
      +                          yload[I2C_ADDR_NACK]))
  7772  0564  2D6B               	goto	l6412
  7773  0565                     l6402:	
  7774                           ;i2c_master.c: 505: {
  7775                           ;i2c_master.c: 506: case I2C_RESTART_READ:
  7776                           
  7777                           
  7778                           ;i2c_master.c: 507: case I2C_RESTART_WRITE:
  7779                           ;i2c_master.c: 508: return I2C_DO_SEND_RESTART();
  7780  0565  318E  26B9         	fcall	_I2C_DO_SEND_RESTART
  7781  0567  0008               	return
  7782  0568                     l6406:	
  7783                           ;i2c_master.c: 509: default:
  7784                           
  7785                           
  7786                           ;i2c_master.c: 510: return I2C_DO_SEND_STOP();
  7787  0568  318E  26C1         	fcall	_I2C_DO_SEND_STOP
  7788                           
  7789                           ;i2c_master.c: 511: }
  7790  056A  0008               	return
  7791  056B                     l6412:	
  7792  056B  0021               	movlb	1	; select bank1
  7793  056C  082E               	movf	(low ((_I2C_Status| 0+14)))^(0+128),w
  7794  056D  0020               	movlb	0	; select bank0
  7795  056E  00D5               	movwf	??_I2C_DO_ADDRESS_NACK
  7796  056F  0855               	movf	??_I2C_DO_ADDRESS_NACK,w
  7797  0570  00D4               	movwf	I2C_CallbackReturnReset@funPtr
  7798  0571  3004               	movlw	4
  7799  0572  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
  7800  0573  0086               	movwf	6
  7801  0574  0187               	clrf	7
  7802  0575  3F41               	moviw [1]fsr1
  7803  0576  008A               	movwf	10
  7804  0577  3F40               	moviw [0]fsr1
  7805  0578  000A               	callw
  7806  0579  3185               	pagesel	$
  7807                           
  7808                           ; Switch size 1, requested type "space"
  7809                           ; Number of cases is 2, Range of values is 2 to 3
  7810                           ; switch strategies available:
  7811                           ; Name         Instructions Cycles
  7812                           ; simple_byte            7     4 (average)
  7813                           ; direct_byte           13     9 (fixed)
  7814                           ; jumptable            263     9 (fixed)
  7815                           ;	Chosen strategy is simple_byte
  7816  057A  3A02               	xorlw	2	; case 2
  7817  057B  1903               	skipnz
  7818  057C  2D65               	goto	l6402
  7819  057D  3A01               	xorlw	1	; case 3
  7820  057E  1903               	skipnz
  7821  057F  2D65               	goto	l6402
  7822  0580  2D68               	goto	l6406
  7823  0581  0008               	return
  7824  0582                     __end_of_I2C_DO_ADDRESS_NACK:	
  7825                           
  7826                           	psect	text29
  7827  0EF3                     __ptext29:	
  7828 ;; *************** function _I2C_DO_RESET *****************
  7829 ;; Defined at:
  7830 ;;		line 494 in file "mcc_generated_files/i2c_master.c"
  7831 ;; Parameters:    Size  Location     Type
  7832 ;;		None
  7833 ;; Auto vars:     Size  Location     Type
  7834 ;;		None
  7835 ;; Return value:  Size  Location     Type
  7836 ;;                  1    wreg      enum E12103
  7837 ;; Registers used:
  7838 ;;		wreg, status,2
  7839 ;; Tracked objects:
  7840 ;;		On entry : 0/0
  7841 ;;		On exit  : 0/0
  7842 ;;		Unchanged: 0/0
  7843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7848 ;;Total ram usage:        0 bytes
  7849 ;; Hardware stack levels used:    1
  7850 ;; Hardware stack levels required when called:   13
  7851 ;; This function calls:
  7852 ;;		Nothing
  7853 ;; This function is called by:
  7854 ;;		i1_I2C_MasterFsm
  7855 ;;		_I2C_MasterFsm
  7856 ;; This function uses a non-reentrant model
  7857 ;;
  7858                           
  7859                           
  7860                           ;psect for function _I2C_DO_RESET
  7861  0EF3                     _I2C_DO_RESET:	
  7862                           
  7863                           ;Skip over the trampoline to the duplicate function for level 1
  7864  0EF3  1C7E               	btfss	126,0
  7865  0EF4  2EF7               	goto	l4542
  7866  0EF5  318E  2E34         	ljmp	i1l3088
  7867  0EF7                     _I2C_DO_RESET$intlevel0:	
  7868  0EF7                     l4542:	
  7869                           ;incstack = 0
  7870 ;; hardware stack exceeded
  7871                           ; Regs used in _I2C_DO_RESET: [wreg+status,2]
  7872                           
  7873                           
  7874                           ;i2c_master.c: 496: I2C_Status.busy = 0;
  7875  0EF7  0021               	movlb	1	; select bank1
  7876  0EF8  10BC               	bcf	(_I2C_Status^(0+128)+28),1
  7877                           
  7878                           ;i2c_master.c: 497: I2C_Status.error = I2C_NOERR;
  7879  0EF9  01BB               	clrf	(_I2C_Status^(0+128)+27)
  7880                           
  7881                           ;i2c_master.c: 498: return I2C_RESET;
  7882  0EFA  300E               	movlw	14
  7883  0EFB  0008               	return
  7884  0EFC                     __end_of_I2C_DO_RESET:	
  7885                           
  7886                           	psect	text30
  7887  0ED9                     __ptext30:	
  7888 ;; *************** function _I2C_DO_RX_NACK_RESTART *****************
  7889 ;; Defined at:
  7890 ;;		line 488 in file "mcc_generated_files/i2c_master.c"
  7891 ;; Parameters:    Size  Location     Type
  7892 ;;		None
  7893 ;; Auto vars:     Size  Location     Type
  7894 ;;		None
  7895 ;; Return value:  Size  Location     Type
  7896 ;;                  1    wreg      enum E12103
  7897 ;; Registers used:
  7898 ;;		wreg, status,2, status,0, pclath, cstack
  7899 ;; Tracked objects:
  7900 ;;		On entry : 0/0
  7901 ;;		On exit  : 0/0
  7902 ;;		Unchanged: 0/0
  7903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7908 ;;Total ram usage:        0 bytes
  7909 ;; Hardware stack levels used:    1
  7910 ;; Hardware stack levels required when called:   14
  7911 ;; This function calls:
  7912 ;;		_I2C_MasterSendNack
  7913 ;; This function is called by:
  7914 ;;		_I2C_DO_RX
  7915 ;;		i1_I2C_MasterFsm
  7916 ;;		_I2C_MasterFsm
  7917 ;; This function uses a non-reentrant model
  7918 ;;
  7919                           
  7920                           
  7921                           ;psect for function _I2C_DO_RX_NACK_RESTART
  7922  0ED9                     _I2C_DO_RX_NACK_RESTART:	
  7923                           
  7924                           ;Skip over the trampoline to the duplicate function for level 1
  7925  0ED9  1C7E               	btfss	126,0
  7926  0EDA  2EDD               	goto	l4388
  7927  0EDB  318E  2E0E         	ljmp	i1l2938
  7928  0EDD                     _I2C_DO_RX_NACK_RESTART$intlevel0:	
  7929  0EDD                     l4388:	
  7930                           ;incstack = 0
  7931 ;; hardware stack exceeded
  7932                           ; Regs used in _I2C_DO_RX_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
  7933                           
  7934                           
  7935                           ;i2c_master.c: 490: I2C_MasterSendNack();
  7936  0EDD  318E  261A         	fcall	_I2C_MasterSendNack
  7937                           
  7938                           ;i2c_master.c: 491: return I2C_SEND_RESTART;
  7939  0EDF  3009               	movlw	9
  7940  0EE0  0008               	return
  7941  0EE1                     __end_of_I2C_DO_RX_NACK_RESTART:	
  7942                           
  7943                           	psect	text31
  7944  0ED1                     __ptext31:	
  7945 ;; *************** function _I2C_DO_RX_NACK_STOP *****************
  7946 ;; Defined at:
  7947 ;;		line 482 in file "mcc_generated_files/i2c_master.c"
  7948 ;; Parameters:    Size  Location     Type
  7949 ;;		None
  7950 ;; Auto vars:     Size  Location     Type
  7951 ;;		None
  7952 ;; Return value:  Size  Location     Type
  7953 ;;                  1    wreg      enum E12103
  7954 ;; Registers used:
  7955 ;;		wreg, status,2, status,0, pclath, cstack
  7956 ;; Tracked objects:
  7957 ;;		On entry : 0/0
  7958 ;;		On exit  : 0/0
  7959 ;;		Unchanged: 0/0
  7960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7965 ;;Total ram usage:        0 bytes
  7966 ;; Hardware stack levels used:    1
  7967 ;; Hardware stack levels required when called:   14
  7968 ;; This function calls:
  7969 ;;		_I2C_MasterSendNack
  7970 ;; This function is called by:
  7971 ;;		_I2C_DO_RX
  7972 ;;		i1_I2C_MasterFsm
  7973 ;;		_I2C_MasterFsm
  7974 ;; This function uses a non-reentrant model
  7975 ;;
  7976                           
  7977                           
  7978                           ;psect for function _I2C_DO_RX_NACK_STOP
  7979  0ED1                     _I2C_DO_RX_NACK_STOP:	
  7980                           
  7981                           ;Skip over the trampoline to the duplicate function for level 1
  7982  0ED1  1C7E               	btfss	126,0
  7983  0ED2  2ED5               	goto	l4394
  7984  0ED3  318E  2E0A         	ljmp	i1l2932
  7985  0ED5                     _I2C_DO_RX_NACK_STOP$intlevel0:	
  7986  0ED5                     l4394:	
  7987                           ;incstack = 0
  7988 ;; hardware stack exceeded
  7989                           ; Regs used in _I2C_DO_RX_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
  7990                           
  7991                           
  7992                           ;i2c_master.c: 484: I2C_MasterSendNack();
  7993  0ED5  318E  261A         	fcall	_I2C_MasterSendNack
  7994                           
  7995                           ;i2c_master.c: 485: return I2C_SEND_STOP;
  7996  0ED7  300A               	movlw	10
  7997  0ED8  0008               	return
  7998  0ED9                     __end_of_I2C_DO_RX_NACK_STOP:	
  7999                           
  8000                           	psect	text32
  8001  0EC9                     __ptext32:	
  8002 ;; *************** function _I2C_DO_RX_ACK *****************
  8003 ;; Defined at:
  8004 ;;		line 475 in file "mcc_generated_files/i2c_master.c"
  8005 ;; Parameters:    Size  Location     Type
  8006 ;;		None
  8007 ;; Auto vars:     Size  Location     Type
  8008 ;;		None
  8009 ;; Return value:  Size  Location     Type
  8010 ;;                  1    wreg      enum E12103
  8011 ;; Registers used:
  8012 ;;		wreg, status,2, status,0, pclath, cstack
  8013 ;; Tracked objects:
  8014 ;;		On entry : 0/0
  8015 ;;		On exit  : 0/0
  8016 ;;		Unchanged: 0/0
  8017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8021 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8022 ;;Total ram usage:        0 bytes
  8023 ;; Hardware stack levels used:    1
  8024 ;; Hardware stack levels required when called:   14
  8025 ;; This function calls:
  8026 ;;		_I2C_MasterSendAck
  8027 ;; This function is called by:
  8028 ;;		i1_I2C_MasterFsm
  8029 ;;		_I2C_MasterFsm
  8030 ;; This function uses a non-reentrant model
  8031 ;;
  8032                           
  8033                           
  8034                           ;psect for function _I2C_DO_RX_ACK
  8035  0EC9                     _I2C_DO_RX_ACK:	
  8036                           
  8037                           ;Skip over the trampoline to the duplicate function for level 1
  8038  0EC9  1C7E               	btfss	126,0
  8039  0ECA  2ECD               	goto	l4536
  8040  0ECB  318E  2E06         	ljmp	i1l3082
  8041  0ECD                     _I2C_DO_RX_ACK$intlevel0:	
  8042  0ECD                     l4536:	
  8043                           ;incstack = 0
  8044 ;; hardware stack exceeded
  8045                           ; Regs used in _I2C_DO_RX_ACK: [wreg+status,2+status,0+pclath+cstack]
  8046                           
  8047                           
  8048                           ;i2c_master.c: 477: I2C_MasterSendAck();
  8049  0ECD  318E  261E         	fcall	_I2C_MasterSendAck
  8050                           
  8051                           ;i2c_master.c: 478: return I2C_RCEN;
  8052  0ECF  3005               	movlw	5
  8053  0ED0  0008               	return
  8054  0ED1                     __end_of_I2C_DO_RX_ACK:	
  8055                           
  8056                           	psect	text33
  8057  0EC1                     __ptext33:	
  8058 ;; *************** function _I2C_DO_SEND_STOP *****************
  8059 ;; Defined at:
  8060 ;;		line 469 in file "mcc_generated_files/i2c_master.c"
  8061 ;; Parameters:    Size  Location     Type
  8062 ;;		None
  8063 ;; Auto vars:     Size  Location     Type
  8064 ;;		None
  8065 ;; Return value:  Size  Location     Type
  8066 ;;                  1    wreg      enum E12103
  8067 ;; Registers used:
  8068 ;;		wreg, status,2, status,0, pclath, cstack
  8069 ;; Tracked objects:
  8070 ;;		On entry : 0/0
  8071 ;;		On exit  : 0/0
  8072 ;;		Unchanged: 0/0
  8073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8077 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8078 ;;Total ram usage:        0 bytes
  8079 ;; Hardware stack levels used:    1
  8080 ;; Hardware stack levels required when called:   14
  8081 ;; This function calls:
  8082 ;;		_I2C_MasterStop
  8083 ;; This function is called by:
  8084 ;;		_I2C_DO_TX
  8085 ;;		_I2C_DO_TX_EMPTY
  8086 ;;		_I2C_DO_ADDRESS_NACK
  8087 ;;		i1_I2C_MasterFsm
  8088 ;;		_I2C_MasterFsm
  8089 ;; This function uses a non-reentrant model
  8090 ;;
  8091                           
  8092                           
  8093                           ;psect for function _I2C_DO_SEND_STOP
  8094  0EC1                     _I2C_DO_SEND_STOP:	
  8095                           
  8096                           ;Skip over the trampoline to the duplicate function for level 1
  8097  0EC1  1C7E               	btfss	126,0
  8098  0EC2  2EC5               	goto	l4376
  8099  0EC3  318E  2E02         	ljmp	i1l2926
  8100  0EC5                     _I2C_DO_SEND_STOP$intlevel0:	
  8101  0EC5                     l4376:	
  8102                           ;incstack = 0
  8103 ;; hardware stack exceeded
  8104                           ; Regs used in _I2C_DO_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
  8105                           
  8106                           
  8107                           ;i2c_master.c: 471: I2C_MasterStop();
  8108  0EC5  318D  25D8         	fcall	_I2C_MasterStop
  8109                           
  8110                           ;i2c_master.c: 472: return I2C_IDLE;
  8111  0EC7  3000               	movlw	0
  8112  0EC8  0008               	return
  8113  0EC9                     __end_of_I2C_DO_SEND_STOP:	
  8114                           
  8115                           	psect	text34
  8116  0EB9                     __ptext34:	
  8117 ;; *************** function _I2C_DO_SEND_RESTART *****************
  8118 ;; Defined at:
  8119 ;;		line 463 in file "mcc_generated_files/i2c_master.c"
  8120 ;; Parameters:    Size  Location     Type
  8121 ;;		None
  8122 ;; Auto vars:     Size  Location     Type
  8123 ;;		None
  8124 ;; Return value:  Size  Location     Type
  8125 ;;                  1    wreg      enum E12103
  8126 ;; Registers used:
  8127 ;;		wreg, status,2, status,0, pclath, cstack
  8128 ;; Tracked objects:
  8129 ;;		On entry : 0/0
  8130 ;;		On exit  : 0/0
  8131 ;;		Unchanged: 0/0
  8132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8136 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8137 ;;Total ram usage:        0 bytes
  8138 ;; Hardware stack levels used:    1
  8139 ;; Hardware stack levels required when called:   14
  8140 ;; This function calls:
  8141 ;;		_I2C_MasterEnableRestart
  8142 ;; This function is called by:
  8143 ;;		_I2C_DO_TX_EMPTY
  8144 ;;		_I2C_DO_ADDRESS_NACK
  8145 ;;		i1_I2C_MasterFsm
  8146 ;;		_I2C_MasterFsm
  8147 ;; This function uses a non-reentrant model
  8148 ;;
  8149                           
  8150                           
  8151                           ;psect for function _I2C_DO_SEND_RESTART
  8152  0EB9                     _I2C_DO_SEND_RESTART:	
  8153                           
  8154                           ;Skip over the trampoline to the duplicate function for level 1
  8155  0EB9  1C7E               	btfss	126,0
  8156  0EBA  2EBD               	goto	l4402
  8157  0EBB  318D  2DFE         	ljmp	i1l2920
  8158  0EBD                     _I2C_DO_SEND_RESTART$intlevel0:	
  8159  0EBD                     l4402:	
  8160                           ;incstack = 0
  8161 ;; hardware stack exceeded
  8162                           ; Regs used in _I2C_DO_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
  8163                           
  8164                           
  8165                           ;i2c_master.c: 465: I2C_MasterEnableRestart();
  8166  0EBD  318D  25D5         	fcall	_I2C_MasterEnableRestart
  8167                           
  8168                           ;i2c_master.c: 466: return I2C_SEND_ADR_READ;
  8169  0EBF  3001               	movlw	1
  8170  0EC0  0008               	return
  8171  0EC1                     __end_of_I2C_DO_SEND_RESTART:	
  8172                           
  8173                           	psect	text35
  8174  0EB1                     __ptext35:	
  8175 ;; *************** function _I2C_DO_SEND_RESTART_WRITE *****************
  8176 ;; Defined at:
  8177 ;;		line 456 in file "mcc_generated_files/i2c_master.c"
  8178 ;; Parameters:    Size  Location     Type
  8179 ;;		None
  8180 ;; Auto vars:     Size  Location     Type
  8181 ;;		None
  8182 ;; Return value:  Size  Location     Type
  8183 ;;                  1    wreg      enum E12103
  8184 ;; Registers used:
  8185 ;;		wreg, status,2, status,0, pclath, cstack
  8186 ;; Tracked objects:
  8187 ;;		On entry : 0/0
  8188 ;;		On exit  : 0/0
  8189 ;;		Unchanged: 0/0
  8190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8195 ;;Total ram usage:        0 bytes
  8196 ;; Hardware stack levels used:    1
  8197 ;; Hardware stack levels required when called:   14
  8198 ;; This function calls:
  8199 ;;		_I2C_MasterEnableRestart
  8200 ;; This function is called by:
  8201 ;;		_I2C_DO_TX
  8202 ;;		i1_I2C_MasterFsm
  8203 ;;		_I2C_MasterFsm
  8204 ;; This function uses a non-reentrant model
  8205 ;;
  8206                           
  8207                           
  8208                           ;psect for function _I2C_DO_SEND_RESTART_WRITE
  8209  0EB1                     _I2C_DO_SEND_RESTART_WRITE:	
  8210                           
  8211                           ;Skip over the trampoline to the duplicate function for level 1
  8212  0EB1  1C7E               	btfss	126,0
  8213  0EB2  2EB5               	goto	l4370
  8214  0EB3  318D  2DFA         	ljmp	i1l2914
  8215  0EB5                     _I2C_DO_SEND_RESTART_WRITE$intlevel0:	
  8216  0EB5                     l4370:	
  8217                           ;incstack = 0
  8218 ;; hardware stack exceeded
  8219                           ; Regs used in _I2C_DO_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
  8220                           
  8221                           
  8222                           ;i2c_master.c: 458: I2C_MasterEnableRestart();
  8223  0EB5  318D  25D5         	fcall	_I2C_MasterEnableRestart
  8224                           
  8225                           ;i2c_master.c: 459: return I2C_SEND_ADR_WRITE;
  8226  0EB7  3002               	movlw	2
  8227  0EB8  0008               	return
  8228  0EB9                     __end_of_I2C_DO_SEND_RESTART_WRITE:	
  8229                           
  8230                           	psect	text36
  8231  0EA9                     __ptext36:	
  8232 ;; *************** function _I2C_DO_SEND_RESTART_READ *****************
  8233 ;; Defined at:
  8234 ;;		line 450 in file "mcc_generated_files/i2c_master.c"
  8235 ;; Parameters:    Size  Location     Type
  8236 ;;		None
  8237 ;; Auto vars:     Size  Location     Type
  8238 ;;		None
  8239 ;; Return value:  Size  Location     Type
  8240 ;;                  1    wreg      enum E12103
  8241 ;; Registers used:
  8242 ;;		wreg, status,2, status,0, pclath, cstack
  8243 ;; Tracked objects:
  8244 ;;		On entry : 0/0
  8245 ;;		On exit  : 0/0
  8246 ;;		Unchanged: 0/0
  8247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8251 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8252 ;;Total ram usage:        0 bytes
  8253 ;; Hardware stack levels used:    1
  8254 ;; Hardware stack levels required when called:   14
  8255 ;; This function calls:
  8256 ;;		_I2C_MasterEnableRestart
  8257 ;; This function is called by:
  8258 ;;		_I2C_DO_TX
  8259 ;;		i1_I2C_MasterFsm
  8260 ;;		_I2C_MasterFsm
  8261 ;; This function uses a non-reentrant model
  8262 ;;
  8263                           
  8264                           
  8265                           ;psect for function _I2C_DO_SEND_RESTART_READ
  8266  0EA9                     _I2C_DO_SEND_RESTART_READ:	
  8267                           
  8268                           ;Skip over the trampoline to the duplicate function for level 1
  8269  0EA9  1C7E               	btfss	126,0
  8270  0EAA  2EAD               	goto	l4364
  8271  0EAB  318D  2DF6         	ljmp	i1l2908
  8272  0EAD                     _I2C_DO_SEND_RESTART_READ$intlevel0:	
  8273  0EAD                     l4364:	
  8274                           ;incstack = 0
  8275 ;; hardware stack exceeded
  8276                           ; Regs used in _I2C_DO_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
  8277                           
  8278                           
  8279                           ;i2c_master.c: 452: I2C_MasterEnableRestart();
  8280  0EAD  318D  25D5         	fcall	_I2C_MasterEnableRestart
  8281                           
  8282                           ;i2c_master.c: 453: return I2C_SEND_ADR_READ;
  8283  0EAF  3001               	movlw	1
  8284  0EB0  0008               	return
  8285  0EB1                     __end_of_I2C_DO_SEND_RESTART_READ:	
  8286                           
  8287                           	psect	text37
  8288  0F19                     __ptext37:	
  8289 ;; *************** function _I2C_DO_RCEN *****************
  8290 ;; Defined at:
  8291 ;;		line 402 in file "mcc_generated_files/i2c_master.c"
  8292 ;; Parameters:    Size  Location     Type
  8293 ;;		None
  8294 ;; Auto vars:     Size  Location     Type
  8295 ;;		None
  8296 ;; Return value:  Size  Location     Type
  8297 ;;                  1    wreg      enum E12103
  8298 ;; Registers used:
  8299 ;;		wreg, status,2, status,0, pclath, cstack
  8300 ;; Tracked objects:
  8301 ;;		On entry : 0/0
  8302 ;;		On exit  : 0/0
  8303 ;;		Unchanged: 0/0
  8304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8309 ;;Total ram usage:        0 bytes
  8310 ;; Hardware stack levels used:    1
  8311 ;; Hardware stack levels required when called:   14
  8312 ;; This function calls:
  8313 ;;		_I2C_MasterStartRx
  8314 ;; This function is called by:
  8315 ;;		i1_I2C_MasterFsm
  8316 ;;		_I2C_MasterFsm
  8317 ;; This function uses a non-reentrant model
  8318 ;;
  8319                           
  8320                           
  8321                           ;psect for function _I2C_DO_RCEN
  8322  0F19                     _I2C_DO_RCEN:	
  8323                           
  8324                           ;Skip over the trampoline to the duplicate function for level 1
  8325  0F19  1C7E               	btfss	126,0
  8326  0F1A  2F1D               	goto	l4508
  8327  0F1B  318E  2E49         	ljmp	i1l3054
  8328  0F1D                     _I2C_DO_RCEN$intlevel0:	
  8329  0F1D                     l4508:	
  8330                           ;incstack = 0
  8331 ;; hardware stack exceeded
  8332                           ; Regs used in _I2C_DO_RCEN: [wreg+status,2+status,0+pclath+cstack]
  8333                           
  8334                           
  8335                           ;i2c_master.c: 404: I2C_Status.addressNackCheck = 0;
  8336  0F1D  0021               	movlb	1	; select bank1
  8337  0F1E  103C               	bcf	(_I2C_Status^(0+128)+28),0
  8338                           
  8339                           ;i2c_master.c: 405: I2C_MasterStartRx();
  8340  0F1F  318D  25DB         	fcall	_I2C_MasterStartRx
  8341                           
  8342                           ;i2c_master.c: 406: return I2C_RX;
  8343  0F21  3004               	movlw	4
  8344  0F22  0008               	return
  8345  0F23                     __end_of_I2C_DO_RCEN:	
  8346                           
  8347                           	psect	text38
  8348  0305                     __ptext38:	
  8349 ;; *************** function _I2C_DO_RX *****************
  8350 ;; Defined at:
  8351 ;;		line 378 in file "mcc_generated_files/i2c_master.c"
  8352 ;; Parameters:    Size  Location     Type
  8353 ;;		None
  8354 ;; Auto vars:     Size  Location     Type
  8355 ;;		None
  8356 ;; Return value:  Size  Location     Type
  8357 ;;                  1    wreg      enum E12103
  8358 ;; Registers used:
  8359 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8360 ;; Tracked objects:
  8361 ;;		On entry : 0/0
  8362 ;;		On exit  : 0/0
  8363 ;;		Unchanged: 0/0
  8364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8367 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8368 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8369 ;;Total ram usage:        1 bytes
  8370 ;; Hardware stack levels used:    1
  8371 ;; Hardware stack levels required when called:   16
  8372 ;; This function calls:
  8373 ;;		Absolute function
  8374 ;;		_I2C_CallbackReturnReset
  8375 ;;		_I2C_CallbackReturnStop
  8376 ;;		_I2C_DO_RX_NACK_RESTART
  8377 ;;		_I2C_DO_RX_NACK_STOP
  8378 ;;		_I2C_MasterGetRxData
  8379 ;;		_I2C_MasterSendAck
  8380 ;;		_rd1RegCompleteHandler
  8381 ;;		_rd2RegCompleteHandler
  8382 ;;		_rdBlkRegCompleteHandler
  8383 ;;		_wr1RegCompleteHandler
  8384 ;;		_wr2RegCompleteHandler
  8385 ;; This function is called by:
  8386 ;;		i1_I2C_MasterFsm
  8387 ;;		_I2C_MasterFsm
  8388 ;; This function uses a non-reentrant model
  8389 ;;
  8390                           
  8391                           
  8392                           ;psect for function _I2C_DO_RX
  8393  0305                     _I2C_DO_RX:	
  8394                           
  8395                           ;Skip over the trampoline to the duplicate function for level 1
  8396  0305  1C7E               	btfss	126,0
  8397  0306  2B09               	goto	l6352
  8398  0307  3183  2BC1         	ljmp	i1l6242
  8399  0309                     _I2C_DO_RX$intlevel0:	
  8400  0309                     l6352:	
  8401                           ;incstack = 0
  8402 ;; hardware stack exceeded
  8403                           ; Regs used in _I2C_DO_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8404                           
  8405                           
  8406                           ;i2c_master.c: 380: *I2C_Status.data_ptr++ = I2C_MasterGetRxData();
  8407  0309  318D  25DE  3183   	fcall	_I2C_MasterGetRxData
  8408  030C  0020               	movlb	0	; select bank0
  8409  030D  00D5               	movwf	??_I2C_DO_RX
  8410  030E  0021               	movlb	1	; select bank1
  8411  030F  0837               	movf	(low ((_I2C_Status| 0+23)))^(0+128),w
  8412  0310  0086               	movwf	6
  8413  0311  0187               	clrf	7
  8414  0312  0020               	movlb	0	; select bank0
  8415  0313  0855               	movf	??_I2C_DO_RX,w
  8416  0314  0081               	movwf	1
  8417  0315  3001               	movlw	1
  8418  0316  00D5               	movwf	??_I2C_DO_RX
  8419  0317  0855               	movf	??_I2C_DO_RX,w
  8420  0318  0021               	movlb	1	; select bank1
  8421  0319  07B7               	addwf	(low ((_I2C_Status| 0+23)))^(0+128),f
  8422                           
  8423                           ;i2c_master.c: 381: if(--I2C_Status.data_length)
  8424  031A  3001               	movlw	1
  8425  031B  02B8               	subwf	(_I2C_Status^(0+128)+24),f
  8426  031C  3000               	movlw	0
  8427  031D  3BB9               	subwfb	((_I2C_Status+1)^(0+128)+24),f
  8428  031E  0838               	movf	(_I2C_Status^(0+128)+24),w
  8429  031F  0439               	iorwf	((_I2C_Status+1)^(0+128)+24),w
  8430  0320  1903               	btfsc	3,2
  8431  0321  2B26               	goto	l417
  8432                           
  8433                           ;i2c_master.c: 382: {
  8434                           ;i2c_master.c: 383: I2C_MasterSendAck();
  8435  0322  318E  261E         	fcall	_I2C_MasterSendAck
  8436                           
  8437                           ;i2c_master.c: 384: return I2C_RCEN;
  8438  0324  3005               	movlw	5
  8439                           
  8440                           ;i2c_master.c: 385: }
  8441  0325  0008               	return
  8442  0326                     l417:	
  8443                           
  8444                           ;i2c_master.c: 386: else
  8445                           ;i2c_master.c: 387: {
  8446                           ;i2c_master.c: 388: I2C_Status.bufferFree = 1;
  8447  0326  15BC               	bsf	(_I2C_Status^(0+128)+28),3
  8448                           
  8449                           ;i2c_master.c: 389: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
  8450  0327  2B2E               	goto	l6376
  8451  0328                     l6366:	
  8452                           ;i2c_master.c: 390: {
  8453                           ;i2c_master.c: 391: case I2C_RESTART_WRITE:
  8454                           
  8455                           
  8456                           ;i2c_master.c: 392: case I2C_RESTART_READ:
  8457                           ;i2c_master.c: 393: return I2C_DO_RX_NACK_RESTART();
  8458  0328  318E  26D9         	fcall	_I2C_DO_RX_NACK_RESTART
  8459  032A  0008               	return
  8460  032B                     l6370:	
  8461                           ;i2c_master.c: 395: case I2C_CONTINUE:
  8462                           
  8463                           ;i2c_master.c: 394: default:
  8464                           
  8465                           
  8466                           ;i2c_master.c: 396: case I2C_STOP:
  8467                           ;i2c_master.c: 397: return I2C_DO_RX_NACK_STOP();
  8468  032B  318E  26D1         	fcall	_I2C_DO_RX_NACK_STOP
  8469                           
  8470                           ;i2c_master.c: 398: }
  8471  032D  0008               	return
  8472  032E                     l6376:	
  8473  032E  0021               	movlb	1	; select bank1
  8474  032F  082C               	movf	(low ((_I2C_Status| 0+12)))^(0+128),w
  8475  0330  0020               	movlb	0	; select bank0
  8476  0331  00D5               	movwf	??_I2C_DO_RX
  8477  0332  0855               	movf	??_I2C_DO_RX,w
  8478  0333  00D4               	movwf	I2C_CallbackReturnReset@funPtr
  8479  0334  0021               	movlb	1	; select bank1
  8480  0335  0821               	movf	(_I2C_Status+1)^(0+128),w
  8481  0336  008A               	movwf	10
  8482  0337  0820               	movf	_I2C_Status^(0+128),w
  8483  0338  000A               	callw
  8484  0339  3183               	pagesel	$
  8485                           
  8486                           ; Switch size 1, requested type "space"
  8487                           ; Number of cases is 4, Range of values is 1 to 4
  8488                           ; switch strategies available:
  8489                           ; Name         Instructions Cycles
  8490                           ; simple_byte           13     7 (average)
  8491                           ; direct_byte           17     9 (fixed)
  8492                           ; jumptable            263     9 (fixed)
  8493                           ;	Chosen strategy is simple_byte
  8494  033A  3A01               	xorlw	1	; case 1
  8495  033B  1903               	skipnz
  8496  033C  2B2B               	goto	l6370
  8497  033D  3A03               	xorlw	3	; case 2
  8498  033E  1903               	skipnz
  8499  033F  2B28               	goto	l6366
  8500  0340  3A01               	xorlw	1	; case 3
  8501  0341  1903               	skipnz
  8502  0342  2B28               	goto	l6366
  8503  0343  3A07               	xorlw	7	; case 4
  8504  0344  1903               	skipnz
  8505  0345  2B2B               	goto	l6370
  8506  0346  2B2B               	goto	l6370
  8507  0347  0008               	return
  8508  0348                     __end_of_I2C_DO_RX:	
  8509                           
  8510                           	psect	text39
  8511  026A                     __ptext39:	
  8512 ;; *************** function _I2C_DO_TX *****************
  8513 ;; Defined at:
  8514 ;;		line 354 in file "mcc_generated_files/i2c_master.c"
  8515 ;; Parameters:    Size  Location     Type
  8516 ;;		None
  8517 ;; Auto vars:     Size  Location     Type
  8518 ;;		None
  8519 ;; Return value:  Size  Location     Type
  8520 ;;                  1    wreg      enum E12103
  8521 ;; Registers used:
  8522 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8523 ;; Tracked objects:
  8524 ;;		On entry : 0/0
  8525 ;;		On exit  : 0/0
  8526 ;;		Unchanged: 0/0
  8527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8529 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8530 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8531 ;;      Totals:         0       1       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8532 ;;Total ram usage:        3 bytes
  8533 ;; Hardware stack levels used:    1
  8534 ;; Hardware stack levels required when called:   16
  8535 ;; This function calls:
  8536 ;;		Absolute function
  8537 ;;		_I2C_CallbackReturnReset
  8538 ;;		_I2C_CallbackReturnStop
  8539 ;;		_I2C_DO_SEND_RESTART_READ
  8540 ;;		_I2C_DO_SEND_RESTART_WRITE
  8541 ;;		_I2C_DO_SEND_STOP
  8542 ;;		_I2C_MasterIsNack
  8543 ;;		_I2C_MasterSendTxData
  8544 ;;		_rd1RegCompleteHandler
  8545 ;;		_rd2RegCompleteHandler
  8546 ;;		_rdBlkRegCompleteHandler
  8547 ;;		_wr1RegCompleteHandler
  8548 ;;		_wr2RegCompleteHandler
  8549 ;; This function is called by:
  8550 ;;		i1_I2C_MasterFsm
  8551 ;;		_I2C_MasterFsm
  8552 ;; This function uses a non-reentrant model
  8553 ;;
  8554                           
  8555                           
  8556                           ;psect for function _I2C_DO_TX
  8557  026A                     _I2C_DO_TX:	
  8558                           
  8559                           ;Skip over the trampoline to the duplicate function for level 1
  8560  026A  1C7E               	btfss	126,0
  8561  026B  2A6E               	goto	l6322
  8562  026C  3182  2ABA         	ljmp	i1l6212
  8563  026E                     _I2C_DO_TX$intlevel0:	
  8564  026E                     l6322:	
  8565                           ;incstack = 0
  8566 ;; hardware stack exceeded
  8567                           ; Regs used in _I2C_DO_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8568                           
  8569                           
  8570                           ;i2c_master.c: 356: if(I2C_MasterIsNack())
  8571  026E  318E  2661  3182   	fcall	_I2C_MasterIsNack
  8572  0271  3A00               	xorlw	0
  8573  0272  1D03               	btfss	3,2
  8574  0273  2A7E               	goto	l6340
  8575  0274  2A9B               	goto	l401
  8576  0275                     l6326:	
  8577                           ;i2c_master.c: 359: {
  8578                           ;i2c_master.c: 360: case I2C_RESTART_READ:
  8579                           
  8580                           ;i2c_master.c: 357: {
  8581                           ;i2c_master.c: 358: switch(I2C_Status.callbackTable[I2C_DATA_NACK](I2C_Status.callbackPa
      +                          yload[I2C_DATA_NACK]))
  8582                           
  8583                           
  8584                           ;i2c_master.c: 361: return I2C_DO_SEND_RESTART_READ();
  8585  0275  318E  26A9         	fcall	_I2C_DO_SEND_RESTART_READ
  8586  0277  0008               	return
  8587  0278                     l6330:	
  8588                           ;i2c_master.c: 362: case I2C_RESTART_WRITE:
  8589                           
  8590                           
  8591                           ;i2c_master.c: 363: return I2C_DO_SEND_RESTART_WRITE();
  8592  0278  318E  26B1         	fcall	_I2C_DO_SEND_RESTART_WRITE
  8593  027A  0008               	return
  8594  027B                     l6334:	
  8595                           ;i2c_master.c: 365: case I2C_CONTINUE:
  8596                           
  8597                           ;i2c_master.c: 364: default:
  8598                           
  8599                           
  8600                           ;i2c_master.c: 366: case I2C_STOP:
  8601                           ;i2c_master.c: 367: return I2C_DO_SEND_STOP();
  8602  027B  318E  26C1         	fcall	_I2C_DO_SEND_STOP
  8603                           
  8604                           ;i2c_master.c: 368: }
  8605  027D  0008               	return
  8606  027E                     l6340:	
  8607  027E  0021               	movlb	1	; select bank1
  8608  027F  082F               	movf	(low ((_I2C_Status| 0+15)))^(0+128),w
  8609  0280  0020               	movlb	0	; select bank0
  8610  0281  00D5               	movwf	??_I2C_DO_TX
  8611  0282  0855               	movf	??_I2C_DO_TX,w
  8612  0283  00D4               	movwf	I2C_CallbackReturnReset@funPtr
  8613  0284  3006               	movlw	6
  8614  0285  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
  8615  0286  0086               	movwf	6
  8616  0287  0187               	clrf	7
  8617  0288  3F41               	moviw [1]fsr1
  8618  0289  008A               	movwf	10
  8619  028A  3F40               	moviw [0]fsr1
  8620  028B  000A               	callw
  8621  028C  3182               	pagesel	$
  8622                           
  8623                           ; Switch size 1, requested type "space"
  8624                           ; Number of cases is 4, Range of values is 1 to 4
  8625                           ; switch strategies available:
  8626                           ; Name         Instructions Cycles
  8627                           ; simple_byte           13     7 (average)
  8628                           ; direct_byte           17     9 (fixed)
  8629                           ; jumptable            263     9 (fixed)
  8630                           ;	Chosen strategy is simple_byte
  8631  028D  3A01               	xorlw	1	; case 1
  8632  028E  1903               	skipnz
  8633  028F  2A7B               	goto	l6334
  8634  0290  3A03               	xorlw	3	; case 2
  8635  0291  1903               	skipnz
  8636  0292  2A75               	goto	l6326
  8637  0293  3A01               	xorlw	1	; case 3
  8638  0294  1903               	skipnz
  8639  0295  2A78               	goto	l6330
  8640  0296  3A07               	xorlw	7	; case 4
  8641  0297  1903               	skipnz
  8642  0298  2A7B               	goto	l6334
  8643  0299  2A7B               	goto	l6334
  8644                           
  8645                           ;i2c_master.c: 369: }
  8646  029A  0008               	return
  8647  029B                     l401:	
  8648                           
  8649                           ;i2c_master.c: 370: else
  8650                           ;i2c_master.c: 371: {
  8651                           ;i2c_master.c: 372: I2C_Status.addressNackCheck = 0;
  8652  029B  0021               	movlb	1	; select bank1
  8653  029C  103C               	bcf	(_I2C_Status^(0+128)+28),0
  8654                           
  8655                           ;i2c_master.c: 373: I2C_MasterSendTxData(*I2C_Status.data_ptr++);
  8656  029D  3017               	movlw	23
  8657  029E  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
  8658  029F  0086               	movwf	6
  8659  02A0  0187               	clrf	7
  8660  02A1  3F40               	moviw [0]fsr1
  8661  02A2  0084               	movwf	4
  8662  02A3  0185               	clrf	5
  8663  02A4  0A81               	incf	1,f
  8664  02A5  0800               	movf	0,w
  8665  02A6  318E  265B  3182   	fcall	_I2C_MasterSendTxData
  8666                           
  8667                           ;i2c_master.c: 374: return (--I2C_Status.data_length)?I2C_TX:I2C_TX_EMPTY;
  8668  02A9  3001               	movlw	1
  8669  02AA  0021               	movlb	1	; select bank1
  8670  02AB  02B8               	subwf	(_I2C_Status^(0+128)+24),f
  8671  02AC  3000               	movlw	0
  8672  02AD  3BB9               	subwfb	((_I2C_Status+1)^(0+128)+24),f
  8673  02AE  0838               	movf	(_I2C_Status^(0+128)+24),w
  8674  02AF  0439               	iorwf	((_I2C_Status+1)^(0+128)+24),w
  8675  02B0  1D03               	btfss	3,2
  8676  02B1  2AB4               	goto	l6348
  8677  02B2  3006               	movlw	6
  8678  02B3  2AB5               	goto	L3
  8679  02B4                     l6348:	
  8680  02B4  3003               	movlw	3
  8681  02B5                     L3:	
  8682  02B5  00BD               	movwf	_I2C_DO_TX$864^(0+128)
  8683  02B6  3000               	movlw	0
  8684  02B7  00BE               	movwf	(_I2C_DO_TX$864^(0+128)+1)
  8685  02B8  083D               	movf	_I2C_DO_TX$864^(0+128),w
  8686  02B9  0008               	return
  8687  02BA                     __end_of_I2C_DO_TX:	
  8688                           
  8689                           	psect	text40
  8690  0F42                     __ptext40:	
  8691 ;; *************** function _I2C_DO_SEND_ADR_WRITE *****************
  8692 ;; Defined at:
  8693 ;;		line 347 in file "mcc_generated_files/i2c_master.c"
  8694 ;; Parameters:    Size  Location     Type
  8695 ;;		None
  8696 ;; Auto vars:     Size  Location     Type
  8697 ;;		None
  8698 ;; Return value:  Size  Location     Type
  8699 ;;                  1    wreg      enum E12103
  8700 ;; Registers used:
  8701 ;;		wreg, status,2, status,0, pclath, cstack
  8702 ;; Tracked objects:
  8703 ;;		On entry : 0/0
  8704 ;;		On exit  : 0/0
  8705 ;;		Unchanged: 0/0
  8706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8710 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8711 ;;Total ram usage:        0 bytes
  8712 ;; Hardware stack levels used:    1
  8713 ;; Hardware stack levels required when called:   14
  8714 ;; This function calls:
  8715 ;;		_I2C_MasterSendTxData
  8716 ;; This function is called by:
  8717 ;;		i1_I2C_MasterFsm
  8718 ;;		_I2C_MasterFsm
  8719 ;; This function uses a non-reentrant model
  8720 ;;
  8721                           
  8722                           
  8723                           ;psect for function _I2C_DO_SEND_ADR_WRITE
  8724  0F42                     _I2C_DO_SEND_ADR_WRITE:	
  8725                           
  8726                           ;Skip over the trampoline to the duplicate function for level 1
  8727  0F42  1C7E               	btfss	126,0
  8728  0F43  2F46               	goto	l4444
  8729  0F44  318E  2E8B         	ljmp	i1l2990
  8730  0F46                     _I2C_DO_SEND_ADR_WRITE$intlevel0:	
  8731  0F46                     l4444:	
  8732                           ;incstack = 0
  8733 ;; hardware stack exceeded
  8734                           ; Regs used in _I2C_DO_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
  8735                           
  8736                           
  8737                           ;i2c_master.c: 349: I2C_Status.addressNackCheck = 1;
  8738  0F46  0021               	movlb	1	; select bank1
  8739  0F47  143C               	bsf	(_I2C_Status^(0+128)+28),0
  8740                           
  8741                           ;i2c_master.c: 350: I2C_MasterSendTxData(I2C_Status.address << 1);
  8742  0F48  3536               	lslf	(_I2C_Status^(0+128)+22),w
  8743  0F49  318E  265B         	fcall	_I2C_MasterSendTxData
  8744                           
  8745                           ;i2c_master.c: 351: return I2C_TX;
  8746  0F4B  3003               	movlw	3
  8747  0F4C  0008               	return
  8748  0F4D                     __end_of_I2C_DO_SEND_ADR_WRITE:	
  8749                           
  8750                           	psect	text41
  8751  0F7C                     __ptext41:	
  8752 ;; *************** function _I2C_DO_SEND_ADR_READ *****************
  8753 ;; Defined at:
  8754 ;;		line 340 in file "mcc_generated_files/i2c_master.c"
  8755 ;; Parameters:    Size  Location     Type
  8756 ;;		None
  8757 ;; Auto vars:     Size  Location     Type
  8758 ;;		None
  8759 ;; Return value:  Size  Location     Type
  8760 ;;                  1    wreg      enum E12103
  8761 ;; Registers used:
  8762 ;;		wreg, status,2, status,0, pclath, cstack
  8763 ;; Tracked objects:
  8764 ;;		On entry : 0/0
  8765 ;;		On exit  : 0/0
  8766 ;;		Unchanged: 0/0
  8767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8772 ;;Total ram usage:        0 bytes
  8773 ;; Hardware stack levels used:    1
  8774 ;; Hardware stack levels required when called:   14
  8775 ;; This function calls:
  8776 ;;		_I2C_MasterSendTxData
  8777 ;; This function is called by:
  8778 ;;		i1_I2C_MasterFsm
  8779 ;;		_I2C_MasterFsm
  8780 ;; This function uses a non-reentrant model
  8781 ;;
  8782                           
  8783                           
  8784                           ;psect for function _I2C_DO_SEND_ADR_READ
  8785  0F7C                     _I2C_DO_SEND_ADR_READ:	
  8786                           
  8787                           ;Skip over the trampoline to the duplicate function for level 1
  8788  0F7C  1C7E               	btfss	126,0
  8789  0F7D  2F80               	goto	l4436
  8790  0F7E  318E  2EA1         	ljmp	i1l2982
  8791  0F80                     _I2C_DO_SEND_ADR_READ$intlevel0:	
  8792  0F80                     l4436:	
  8793                           ;incstack = 0
  8794 ;; hardware stack exceeded
  8795                           ; Regs used in _I2C_DO_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
  8796                           
  8797                           
  8798                           ;i2c_master.c: 342: I2C_Status.addressNackCheck = 1;
  8799  0F80  0021               	movlb	1	; select bank1
  8800  0F81  143C               	bsf	(_I2C_Status^(0+128)+28),0
  8801                           
  8802                           ;i2c_master.c: 343: I2C_MasterSendTxData(I2C_Status.address << 1 | 1);
  8803  0F82  1403               	setc
  8804  0F83  0D36               	rlf	(_I2C_Status^(0+128)+22),w
  8805  0F84  318E  265B         	fcall	_I2C_MasterSendTxData
  8806                           
  8807                           ;i2c_master.c: 344: return I2C_RCEN;
  8808  0F86  3005               	movlw	5
  8809  0F87  0008               	return
  8810  0F88                     __end_of_I2C_DO_SEND_ADR_READ:	
  8811                           
  8812                           	psect	text42
  8813  0EEA                     __ptext42:	
  8814 ;; *************** function _I2C_DO_IDLE *****************
  8815 ;; Defined at:
  8816 ;;		line 333 in file "mcc_generated_files/i2c_master.c"
  8817 ;; Parameters:    Size  Location     Type
  8818 ;;		None
  8819 ;; Auto vars:     Size  Location     Type
  8820 ;;		None
  8821 ;; Return value:  Size  Location     Type
  8822 ;;                  1    wreg      enum E12103
  8823 ;; Registers used:
  8824 ;;		wreg, status,2
  8825 ;; Tracked objects:
  8826 ;;		On entry : 0/0
  8827 ;;		On exit  : 0/0
  8828 ;;		Unchanged: 0/0
  8829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8834 ;;Total ram usage:        0 bytes
  8835 ;; Hardware stack levels used:    1
  8836 ;; Hardware stack levels required when called:   13
  8837 ;; This function calls:
  8838 ;;		Nothing
  8839 ;; This function is called by:
  8840 ;;		i1_I2C_MasterFsm
  8841 ;;		_I2C_MasterFsm
  8842 ;; This function uses a non-reentrant model
  8843 ;;
  8844                           
  8845                           
  8846                           ;psect for function _I2C_DO_IDLE
  8847  0EEA                     _I2C_DO_IDLE:	
  8848                           
  8849                           ;Skip over the trampoline to the duplicate function for level 1
  8850  0EEA  1C7E               	btfss	126,0
  8851  0EEB  2EEE               	goto	l4428
  8852  0EEC  318E  2E2F         	ljmp	i1l2974
  8853  0EEE                     _I2C_DO_IDLE$intlevel0:	
  8854  0EEE                     l4428:	
  8855                           ;incstack = 0
  8856 ;; hardware stack exceeded
  8857                           ; Regs used in _I2C_DO_IDLE: [wreg+status,2]
  8858                           
  8859                           
  8860                           ;i2c_master.c: 335: I2C_Status.busy = 0;
  8861  0EEE  0021               	movlb	1	; select bank1
  8862  0EEF  10BC               	bcf	(_I2C_Status^(0+128)+28),1
  8863                           
  8864                           ;i2c_master.c: 336: I2C_Status.error = I2C_NOERR;
  8865  0EF0  01BB               	clrf	(_I2C_Status^(0+128)+27)
  8866                           
  8867                           ;i2c_master.c: 337: return I2C_RESET;
  8868  0EF1  300E               	movlw	14
  8869  0EF2  0008               	return
  8870  0EF3                     __end_of_I2C_DO_IDLE:	
  8871                           
  8872                           	psect	text43
  8873  052D                     __ptext43:	
  8874 ;; *************** function _I2C_DO_TX_EMPTY *****************
  8875 ;; Defined at:
  8876 ;;		line 409 in file "mcc_generated_files/i2c_master.c"
  8877 ;; Parameters:    Size  Location     Type
  8878 ;;		None
  8879 ;; Auto vars:     Size  Location     Type
  8880 ;;		None
  8881 ;; Return value:  Size  Location     Type
  8882 ;;                  1    wreg      enum E12103
  8883 ;; Registers used:
  8884 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8885 ;; Tracked objects:
  8886 ;;		On entry : 0/0
  8887 ;;		On exit  : 0/0
  8888 ;;		Unchanged: 0/0
  8889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8892 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8893 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8894 ;;Total ram usage:        1 bytes
  8895 ;; Hardware stack levels used:    1
  8896 ;; Hardware stack levels required when called:   16
  8897 ;; This function calls:
  8898 ;;		Absolute function
  8899 ;;		_I2C_CallbackReturnReset
  8900 ;;		_I2C_CallbackReturnStop
  8901 ;;		_I2C_DO_SEND_RESTART
  8902 ;;		_I2C_DO_SEND_STOP
  8903 ;;		_I2C_MasterSetIrq
  8904 ;;		_rd1RegCompleteHandler
  8905 ;;		_rd2RegCompleteHandler
  8906 ;;		_rdBlkRegCompleteHandler
  8907 ;;		_wr1RegCompleteHandler
  8908 ;;		_wr2RegCompleteHandler
  8909 ;; This function is called by:
  8910 ;;		i1_I2C_MasterFsm
  8911 ;;		_I2C_MasterFsm
  8912 ;; This function uses a non-reentrant model
  8913 ;;
  8914                           
  8915                           
  8916                           ;psect for function _I2C_DO_TX_EMPTY
  8917  052D                     _I2C_DO_TX_EMPTY:	
  8918                           
  8919                           ;Skip over the trampoline to the duplicate function for level 1
  8920  052D  1C7E               	btfss	126,0
  8921  052E  2D31               	goto	l6378
  8922  052F  3185  2DF8         	ljmp	i1l6268
  8923  0531                     _I2C_DO_TX_EMPTY$intlevel0:	
  8924  0531                     l6378:	
  8925                           ;incstack = 0
  8926 ;; hardware stack exceeded
  8927                           ; Regs used in _I2C_DO_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8928                           
  8929                           
  8930                           ;i2c_master.c: 411: I2C_Status.bufferFree = 1;
  8931  0531  0021               	movlb	1	; select bank1
  8932  0532  15BC               	bsf	(_I2C_Status^(0+128)+28),3
  8933                           
  8934                           ;i2c_master.c: 412: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
  8935  0533  2D3E               	goto	l6396
  8936  0534                     l6380:	
  8937                           ;i2c_master.c: 413: {
  8938                           ;i2c_master.c: 414: case I2C_RESTART_READ:
  8939                           
  8940                           
  8941                           ;i2c_master.c: 415: case I2C_RESTART_WRITE:
  8942                           ;i2c_master.c: 416: return I2C_DO_SEND_RESTART();
  8943  0534  318E  26B9         	fcall	_I2C_DO_SEND_RESTART
  8944  0536  0008               	return
  8945  0537                     l6384:	
  8946                           ;i2c_master.c: 417: case I2C_CONTINUE:
  8947                           
  8948                           
  8949                           ;i2c_master.c: 418: I2C_MasterSetIrq();
  8950  0537  318D  25E1         	fcall	_I2C_MasterSetIrq
  8951                           
  8952                           ;i2c_master.c: 419: return I2C_TX;
  8953  0539  3003               	movlw	3
  8954  053A  0008               	return
  8955  053B                     l6390:	
  8956                           ;i2c_master.c: 421: case I2C_STOP:
  8957                           
  8958                           ;i2c_master.c: 420: default:
  8959                           
  8960                           
  8961                           ;i2c_master.c: 422: return I2C_DO_SEND_STOP();
  8962  053B  318E  26C1         	fcall	_I2C_DO_SEND_STOP
  8963                           
  8964                           ;i2c_master.c: 423: }
  8965  053D  0008               	return
  8966  053E                     l6396:	
  8967  053E  0021               	movlb	1	; select bank1
  8968  053F  082C               	movf	(low ((_I2C_Status| 0+12)))^(0+128),w
  8969  0540  0020               	movlb	0	; select bank0
  8970  0541  00D5               	movwf	??_I2C_DO_TX_EMPTY
  8971  0542  0855               	movf	??_I2C_DO_TX_EMPTY,w
  8972  0543  00D4               	movwf	I2C_CallbackReturnReset@funPtr
  8973  0544  0021               	movlb	1	; select bank1
  8974  0545  0821               	movf	(_I2C_Status+1)^(0+128),w
  8975  0546  008A               	movwf	10
  8976  0547  0820               	movf	_I2C_Status^(0+128),w
  8977  0548  000A               	callw
  8978  0549  3185               	pagesel	$
  8979                           
  8980                           ; Switch size 1, requested type "space"
  8981                           ; Number of cases is 4, Range of values is 1 to 4
  8982                           ; switch strategies available:
  8983                           ; Name         Instructions Cycles
  8984                           ; simple_byte           13     7 (average)
  8985                           ; direct_byte           17     9 (fixed)
  8986                           ; jumptable            263     9 (fixed)
  8987                           ;	Chosen strategy is simple_byte
  8988  054A  3A01               	xorlw	1	; case 1
  8989  054B  1903               	skipnz
  8990  054C  2D3B               	goto	l6390
  8991  054D  3A03               	xorlw	3	; case 2
  8992  054E  1903               	skipnz
  8993  054F  2D34               	goto	l6380
  8994  0550  3A01               	xorlw	1	; case 3
  8995  0551  1903               	skipnz
  8996  0552  2D34               	goto	l6380
  8997  0553  3A07               	xorlw	7	; case 4
  8998  0554  1903               	skipnz
  8999  0555  2D37               	goto	l6384
  9000  0556  2D3B               	goto	l6390
  9001  0557  0008               	return
  9002  0558                     __end_of_I2C_DO_TX_EMPTY:	
  9003                           
  9004                           	psect	text44
  9005  0DE1                     __ptext44:	
  9006 ;; *************** function _I2C_MasterSetIrq *****************
  9007 ;; Defined at:
  9008 ;;		line 645 in file "mcc_generated_files/i2c_master.c"
  9009 ;; Parameters:    Size  Location     Type
  9010 ;;		None
  9011 ;; Auto vars:     Size  Location     Type
  9012 ;;		None
  9013 ;; Return value:  Size  Location     Type
  9014 ;;                  1    wreg      void 
  9015 ;; Registers used:
  9016 ;;		None
  9017 ;; Tracked objects:
  9018 ;;		On entry : 0/0
  9019 ;;		On exit  : 0/0
  9020 ;;		Unchanged: 0/0
  9021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9025 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9026 ;;Total ram usage:        0 bytes
  9027 ;; Hardware stack levels used:    1
  9028 ;; Hardware stack levels required when called:   13
  9029 ;; This function calls:
  9030 ;;		Nothing
  9031 ;; This function is called by:
  9032 ;;		_I2C_DO_TX_EMPTY
  9033 ;; This function uses a non-reentrant model
  9034 ;;
  9035                           
  9036                           
  9037                           ;psect for function _I2C_MasterSetIrq
  9038  0DE1                     _I2C_MasterSetIrq:	
  9039                           
  9040                           ;i2c_master.c: 647: PIR1bits.SSP1IF = 1;
  9041                           
  9042                           ;incstack = 0
  9043 ;; hardware stack exceeded
  9044                           ; Regs used in _I2C_MasterSetIrq: []
  9045  0DE1  0020               	movlb	0	; select bank0
  9046  0DE2  1590               	bsf	16,3	;volatile
  9047  0DE3  0008               	return
  9048  0DE4                     __end_of_I2C_MasterSetIrq:	
  9049                           
  9050                           	psect	text45
  9051  0E61                     __ptext45:	
  9052 ;; *************** function _I2C_MasterIsNack *****************
  9053 ;; Defined at:
  9054 ;;		line 598 in file "mcc_generated_files/i2c_master.c"
  9055 ;; Parameters:    Size  Location     Type
  9056 ;;		None
  9057 ;; Auto vars:     Size  Location     Type
  9058 ;;		None
  9059 ;; Return value:  Size  Location     Type
  9060 ;;                  1    wreg      unsigned char 
  9061 ;; Registers used:
  9062 ;;		wreg, status,2, status,0
  9063 ;; Tracked objects:
  9064 ;;		On entry : 0/0
  9065 ;;		On exit  : 0/0
  9066 ;;		Unchanged: 0/0
  9067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9072 ;;Total ram usage:        0 bytes
  9073 ;; Hardware stack levels used:    1
  9074 ;; Hardware stack levels required when called:   13
  9075 ;; This function calls:
  9076 ;;		Nothing
  9077 ;; This function is called by:
  9078 ;;		_I2C_MasterFsm
  9079 ;;		_I2C_DO_TX
  9080 ;; This function uses a non-reentrant model
  9081 ;;
  9082                           
  9083                           
  9084                           ;psect for function _I2C_MasterIsNack
  9085  0E61                     _I2C_MasterIsNack:	
  9086                           
  9087                           ;i2c_master.c: 600: return SSP1CON2bits.ACKSTAT;
  9088                           
  9089                           ;incstack = 0
  9090 ;; hardware stack exceeded
  9091                           ; Regs used in _I2C_MasterIsNack: [wreg+status,2+status,0]
  9092  0E61  0024               	movlb	4	; select bank4
  9093  0E62  0E16               	swapf	22,w	;volatile
  9094  0E63  0C89               	rrf	9,f
  9095  0E64  0C89               	rrf	9,f
  9096  0E65  3901               	andlw	1
  9097  0E66  0008               	return
  9098  0E67                     __end_of_I2C_MasterIsNack:	
  9099                           
  9100                           	psect	text46
  9101  0E5B                     __ptext46:	
  9102 ;; *************** function _I2C_MasterSendTxData *****************
  9103 ;; Defined at:
  9104 ;;		line 568 in file "mcc_generated_files/i2c_master.c"
  9105 ;; Parameters:    Size  Location     Type
  9106 ;;  data            1    wreg     unsigned char 
  9107 ;; Auto vars:     Size  Location     Type
  9108 ;;  data            1   14[BANK0 ] unsigned char 
  9109 ;; Return value:  Size  Location     Type
  9110 ;;                  1    wreg      void 
  9111 ;; Registers used:
  9112 ;;		wreg
  9113 ;; Tracked objects:
  9114 ;;		On entry : 0/0
  9115 ;;		On exit  : 0/0
  9116 ;;		Unchanged: 0/0
  9117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9119 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9121 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9122 ;;Total ram usage:        1 bytes
  9123 ;; Hardware stack levels used:    1
  9124 ;; Hardware stack levels required when called:   13
  9125 ;; This function calls:
  9126 ;;		Nothing
  9127 ;; This function is called by:
  9128 ;;		_I2C_DO_SEND_ADR_READ
  9129 ;;		_I2C_DO_SEND_ADR_WRITE
  9130 ;;		_I2C_DO_TX
  9131 ;; This function uses a non-reentrant model
  9132 ;;
  9133                           
  9134                           
  9135                           ;psect for function _I2C_MasterSendTxData
  9136  0E5B                     _I2C_MasterSendTxData:	
  9137                           
  9138                           ;incstack = 0
  9139 ;; hardware stack exceeded
  9140                           ; Regs used in _I2C_MasterSendTxData: [wreg]
  9141                           ;I2C_MasterSendTxData@data stored from wreg
  9142  0E5B  0020               	movlb	0	; select bank0
  9143  0E5C  00CB               	movwf	I2C_MasterSendTxData@data
  9144                           
  9145                           ;i2c_master.c: 570: SSP1BUF = data;
  9146  0E5D  084B               	movf	I2C_MasterSendTxData@data,w
  9147  0E5E  0024               	movlb	4	; select bank4
  9148  0E5F  0091               	movwf	17	;volatile
  9149  0E60  0008               	return
  9150  0E61                     __end_of_I2C_MasterSendTxData:	
  9151                           
  9152                           	psect	text47
  9153  0E1E                     __ptext47:	
  9154 ;; *************** function _I2C_MasterSendAck *****************
  9155 ;; Defined at:
  9156 ;;		line 603 in file "mcc_generated_files/i2c_master.c"
  9157 ;; Parameters:    Size  Location     Type
  9158 ;;		None
  9159 ;; Auto vars:     Size  Location     Type
  9160 ;;		None
  9161 ;; Return value:  Size  Location     Type
  9162 ;;                  1    wreg      void 
  9163 ;; Registers used:
  9164 ;;		None
  9165 ;; Tracked objects:
  9166 ;;		On entry : 0/0
  9167 ;;		On exit  : 0/0
  9168 ;;		Unchanged: 0/0
  9169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9174 ;;Total ram usage:        0 bytes
  9175 ;; Hardware stack levels used:    1
  9176 ;; Hardware stack levels required when called:   13
  9177 ;; This function calls:
  9178 ;;		Nothing
  9179 ;; This function is called by:
  9180 ;;		_I2C_DO_RX
  9181 ;;		_I2C_DO_RX_ACK
  9182 ;; This function uses a non-reentrant model
  9183 ;;
  9184                           
  9185                           
  9186                           ;psect for function _I2C_MasterSendAck
  9187  0E1E                     _I2C_MasterSendAck:	
  9188                           
  9189                           ;i2c_master.c: 605: SSP1CON2bits.ACKDT = 0;
  9190                           
  9191                           ;incstack = 0
  9192 ;; hardware stack exceeded
  9193                           ; Regs used in _I2C_MasterSendAck: []
  9194  0E1E  0024               	movlb	4	; select bank4
  9195  0E1F  1296               	bcf	22,5	;volatile
  9196                           
  9197                           ;i2c_master.c: 606: SSP1CON2bits.ACKEN = 1;
  9198  0E20  1616               	bsf	22,4	;volatile
  9199  0E21  0008               	return
  9200  0E22                     __end_of_I2C_MasterSendAck:	
  9201                           
  9202                           	psect	text48
  9203  0DDE                     __ptext48:	
  9204 ;; *************** function _I2C_MasterGetRxData *****************
  9205 ;; Defined at:
  9206 ;;		line 563 in file "mcc_generated_files/i2c_master.c"
  9207 ;; Parameters:    Size  Location     Type
  9208 ;;		None
  9209 ;; Auto vars:     Size  Location     Type
  9210 ;;		None
  9211 ;; Return value:  Size  Location     Type
  9212 ;;                  1    wreg      unsigned char 
  9213 ;; Registers used:
  9214 ;;		wreg
  9215 ;; Tracked objects:
  9216 ;;		On entry : 0/0
  9217 ;;		On exit  : 0/0
  9218 ;;		Unchanged: 0/0
  9219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9224 ;;Total ram usage:        0 bytes
  9225 ;; Hardware stack levels used:    1
  9226 ;; Hardware stack levels required when called:   13
  9227 ;; This function calls:
  9228 ;;		Nothing
  9229 ;; This function is called by:
  9230 ;;		_I2C_DO_RX
  9231 ;; This function uses a non-reentrant model
  9232 ;;
  9233                           
  9234                           
  9235                           ;psect for function _I2C_MasterGetRxData
  9236  0DDE                     _I2C_MasterGetRxData:	
  9237                           
  9238                           ;i2c_master.c: 565: return SSP1BUF;
  9239                           
  9240                           ;incstack = 0
  9241 ;; hardware stack exceeded
  9242                           ; Regs used in _I2C_MasterGetRxData: [wreg]
  9243  0DDE  0024               	movlb	4	; select bank4
  9244  0DDF  0811               	movf	17,w	;volatile
  9245  0DE0  0008               	return
  9246  0DE1                     __end_of_I2C_MasterGetRxData:	
  9247                           
  9248                           	psect	text49
  9249  0E1A                     __ptext49:	
  9250 ;; *************** function _I2C_MasterSendNack *****************
  9251 ;; Defined at:
  9252 ;;		line 609 in file "mcc_generated_files/i2c_master.c"
  9253 ;; Parameters:    Size  Location     Type
  9254 ;;		None
  9255 ;; Auto vars:     Size  Location     Type
  9256 ;;		None
  9257 ;; Return value:  Size  Location     Type
  9258 ;;                  1    wreg      void 
  9259 ;; Registers used:
  9260 ;;		None
  9261 ;; Tracked objects:
  9262 ;;		On entry : 0/0
  9263 ;;		On exit  : 0/0
  9264 ;;		Unchanged: 0/0
  9265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9270 ;;Total ram usage:        0 bytes
  9271 ;; Hardware stack levels used:    1
  9272 ;; Hardware stack levels required when called:   13
  9273 ;; This function calls:
  9274 ;;		Nothing
  9275 ;; This function is called by:
  9276 ;;		_I2C_DO_RX_NACK_STOP
  9277 ;;		_I2C_DO_RX_NACK_RESTART
  9278 ;; This function uses a non-reentrant model
  9279 ;;
  9280                           
  9281                           
  9282                           ;psect for function _I2C_MasterSendNack
  9283  0E1A                     _I2C_MasterSendNack:	
  9284                           
  9285                           ;i2c_master.c: 611: SSP1CON2bits.ACKDT = 1;
  9286                           
  9287                           ;incstack = 0
  9288 ;; hardware stack exceeded
  9289                           ; Regs used in _I2C_MasterSendNack: []
  9290  0E1A  0024               	movlb	4	; select bank4
  9291  0E1B  1696               	bsf	22,5	;volatile
  9292                           
  9293                           ;i2c_master.c: 612: SSP1CON2bits.ACKEN = 1;
  9294  0E1C  1616               	bsf	22,4	;volatile
  9295  0E1D  0008               	return
  9296  0E1E                     __end_of_I2C_MasterSendNack:	
  9297                           
  9298                           	psect	text50
  9299  0DDB                     __ptext50:	
  9300 ;; *************** function _I2C_MasterStartRx *****************
  9301 ;; Defined at:
  9302 ;;		line 583 in file "mcc_generated_files/i2c_master.c"
  9303 ;; Parameters:    Size  Location     Type
  9304 ;;		None
  9305 ;; Auto vars:     Size  Location     Type
  9306 ;;		None
  9307 ;; Return value:  Size  Location     Type
  9308 ;;                  1    wreg      void 
  9309 ;; Registers used:
  9310 ;;		None
  9311 ;; Tracked objects:
  9312 ;;		On entry : 0/0
  9313 ;;		On exit  : 0/0
  9314 ;;		Unchanged: 0/0
  9315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9320 ;;Total ram usage:        0 bytes
  9321 ;; Hardware stack levels used:    1
  9322 ;; Hardware stack levels required when called:   13
  9323 ;; This function calls:
  9324 ;;		Nothing
  9325 ;; This function is called by:
  9326 ;;		_I2C_DO_RCEN
  9327 ;; This function uses a non-reentrant model
  9328 ;;
  9329                           
  9330                           
  9331                           ;psect for function _I2C_MasterStartRx
  9332  0DDB                     _I2C_MasterStartRx:	
  9333                           
  9334                           ;i2c_master.c: 585: SSP1CON2bits.RCEN = 1;
  9335                           
  9336                           ;incstack = 0
  9337 ;; hardware stack exceeded
  9338                           ; Regs used in _I2C_MasterStartRx: []
  9339  0DDB  0024               	movlb	4	; select bank4
  9340  0DDC  1596               	bsf	22,3	;volatile
  9341  0DDD  0008               	return
  9342  0DDE                     __end_of_I2C_MasterStartRx:	
  9343                           
  9344                           	psect	text51
  9345  0E55                     __ptext51:	
  9346 ;; *************** function _I2C_CallbackReturnReset *****************
  9347 ;; Defined at:
  9348 ;;		line 525 in file "mcc_generated_files/i2c_master.c"
  9349 ;; Parameters:    Size  Location     Type
  9350 ;;  funPtr          1   23[BANK0 ] PTR void 
  9351 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  9352 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  9353 ;; Auto vars:     Size  Location     Type
  9354 ;;		None
  9355 ;; Return value:  Size  Location     Type
  9356 ;;                  1    wreg      enum E97
  9357 ;; Registers used:
  9358 ;;		wreg
  9359 ;; Tracked objects:
  9360 ;;		On entry : 0/0
  9361 ;;		On exit  : 0/0
  9362 ;;		Unchanged: 0/0
  9363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9364 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9367 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9368 ;;Total ram usage:        1 bytes
  9369 ;; Hardware stack levels used:    1
  9370 ;; Hardware stack levels required when called:   13
  9371 ;; This function calls:
  9372 ;;		Nothing
  9373 ;; This function is called by:
  9374 ;;		_I2C_Open
  9375 ;;		i1_I2C_DO_TX
  9376 ;;		i1_I2C_DO_RX
  9377 ;;		i1_I2C_DO_TX_EMPTY
  9378 ;;		i1_I2C_DO_ADDRESS_NACK
  9379 ;;		_I2C_DO_TX
  9380 ;;		_I2C_DO_RX
  9381 ;;		_I2C_DO_TX_EMPTY
  9382 ;;		_I2C_DO_ADDRESS_NACK
  9383 ;;		_I2C_DO_RX_EMPTY
  9384 ;; This function uses a non-reentrant model
  9385 ;;
  9386                           
  9387                           
  9388                           ;psect for function _I2C_CallbackReturnReset
  9389  0E55                     _I2C_CallbackReturnReset:	
  9390                           
  9391                           ;Skip over the trampoline to the duplicate function for level 1
  9392  0E55  1C7E               	btfss	126,0
  9393  0E56  2E59               	goto	l4414
  9394  0E57  3180  2802         	ljmp	i1l2948
  9395  0E59                     _I2C_CallbackReturnReset$intlevel0:	
  9396  0E59                     l4414:	
  9397                           ;incstack = 0
  9398 ;; hardware stack exceeded
  9399                           ; Regs used in _I2C_CallbackReturnReset: [wreg]
  9400                           
  9401                           
  9402                           ;i2c_master.c: 527: return I2C_RESET_LINK;
  9403  0E59  3005               	movlw	5
  9404  0E5A  0008               	return
  9405  0E5B                     __end_of_I2C_CallbackReturnReset:	
  9406                           
  9407                           	psect	text52
  9408  0E4F                     __ptext52:	
  9409 ;; *************** function _I2C_CallbackReturnStop *****************
  9410 ;; Defined at:
  9411 ;;		line 520 in file "mcc_generated_files/i2c_master.c"
  9412 ;; Parameters:    Size  Location     Type
  9413 ;;  funPtr          1   23[BANK0 ] PTR void 
  9414 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  9415 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  9416 ;; Auto vars:     Size  Location     Type
  9417 ;;		None
  9418 ;; Return value:  Size  Location     Type
  9419 ;;                  1    wreg      enum E97
  9420 ;; Registers used:
  9421 ;;		wreg
  9422 ;; Tracked objects:
  9423 ;;		On entry : 0/0
  9424 ;;		On exit  : 0/0
  9425 ;;		Unchanged: 0/0
  9426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9427 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9430 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9431 ;;Total ram usage:        1 bytes
  9432 ;; Hardware stack levels used:    1
  9433 ;; Hardware stack levels required when called:   13
  9434 ;; This function calls:
  9435 ;;		Nothing
  9436 ;; This function is called by:
  9437 ;;		_I2C_Open
  9438 ;;		_I2C_SetCallback
  9439 ;;		i1_I2C_DO_TX
  9440 ;;		i1_I2C_DO_RX
  9441 ;;		i1_I2C_DO_TX_EMPTY
  9442 ;;		i1_I2C_DO_ADDRESS_NACK
  9443 ;;		_I2C_DO_TX
  9444 ;;		_I2C_DO_RX
  9445 ;;		_I2C_DO_TX_EMPTY
  9446 ;;		_I2C_DO_ADDRESS_NACK
  9447 ;;		_I2C_DO_RX_EMPTY
  9448 ;; This function uses a non-reentrant model
  9449 ;;
  9450                           
  9451                           
  9452                           ;psect for function _I2C_CallbackReturnStop
  9453  0E4F                     _I2C_CallbackReturnStop:	
  9454                           
  9455                           ;Skip over the trampoline to the duplicate function for level 1
  9456  0E4F  1C7E               	btfss	126,0
  9457  0E50  2E53               	goto	l4410
  9458  0E51  318D  2DA6         	ljmp	i1l2944
  9459  0E53                     _I2C_CallbackReturnStop$intlevel0:	
  9460  0E53                     l4410:	
  9461                           ;incstack = 0
  9462 ;; hardware stack exceeded
  9463                           ; Regs used in _I2C_CallbackReturnStop: [wreg]
  9464                           
  9465                           
  9466                           ;i2c_master.c: 522: return I2C_STOP;
  9467  0E53  3001               	movlw	1
  9468  0E54  0008               	return
  9469  0E55                     __end_of_I2C_CallbackReturnStop:	
  9470                           
  9471                           	psect	text53
  9472  06C0                     __ptext53:	
  9473 ;; *************** function _rdBlkRegCompleteHandler *****************
  9474 ;; Defined at:
  9475 ;;		line 170 in file "mcc_generated_files/examples/i2c_master_example.c"
  9476 ;; Parameters:    Size  Location     Type
  9477 ;;  ptr             1   23[BANK0 ] PTR void 
  9478 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  9479 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  9480 ;; Auto vars:     Size  Location     Type
  9481 ;;		None
  9482 ;; Return value:  Size  Location     Type
  9483 ;;                  1    wreg      enum E97
  9484 ;; Registers used:
  9485 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9486 ;; Tracked objects:
  9487 ;;		On entry : 0/0
  9488 ;;		On exit  : 0/0
  9489 ;;		Unchanged: 0/0
  9490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9491 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9494 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9495 ;;Total ram usage:        1 bytes
  9496 ;; Hardware stack levels used:    1
  9497 ;; Hardware stack levels required when called:   15
  9498 ;; This function calls:
  9499 ;;		_I2C_SetBuffer
  9500 ;;		_I2C_SetDataCompleteCallback
  9501 ;; This function is called by:
  9502 ;;		_I2C_ReadDataBlock
  9503 ;;		i1_I2C_DO_TX
  9504 ;;		i1_I2C_DO_RX
  9505 ;;		i1_I2C_DO_TX_EMPTY
  9506 ;;		i1_I2C_DO_ADDRESS_NACK
  9507 ;;		_I2C_DO_TX
  9508 ;;		_I2C_DO_RX
  9509 ;;		_I2C_DO_TX_EMPTY
  9510 ;;		_I2C_DO_ADDRESS_NACK
  9511 ;;		_I2C_DO_RX_EMPTY
  9512 ;; This function uses a non-reentrant model
  9513 ;;
  9514                           
  9515                           
  9516                           ;psect for function _rdBlkRegCompleteHandler
  9517  06C0                     _rdBlkRegCompleteHandler:	
  9518                           
  9519                           ;Skip over the trampoline to the duplicate function for level 1
  9520  06C0  1C7E               	btfss	126,0
  9521  06C1  2EC4               	goto	l4352
  9522  06C2  3187  2F12         	ljmp	i1l2902
  9523  06C4                     _rdBlkRegCompleteHandler$intlevel0:	
  9524  06C4                     l4352:	
  9525                           ;incstack = 0
  9526 ;; hardware stack exceeded
  9527                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  9528                           
  9529                           
  9530                           ;i2c_master_example.c: 172: I2C_SetBuffer(((i2c_buffer_t *)ptr)->data,((i2c_buffer_t*)pt
      +                          r)->len);
  9531  06C4  0020               	movlb	0	; select bank0
  9532  06C5  0854               	movf	rdBlkRegCompleteHandler@ptr,w
  9533  06C6  0086               	movwf	6
  9534  06C7  0187               	clrf	7
  9535  06C8  3F40               	moviw [0]fsr1
  9536  06C9  00CB               	movwf	I2C_SetBuffer@bufferSize
  9537  06CA  3F41               	moviw [1]fsr1
  9538  06CB  00CC               	movwf	I2C_SetBuffer@bufferSize+1
  9539  06CC  0854               	movf	rdBlkRegCompleteHandler@ptr,w
  9540  06CD  3E02               	addlw	2
  9541  06CE  0086               	movwf	6
  9542  06CF  0187               	clrf	7
  9543  06D0  0801               	movf	1,w
  9544  06D1  3187  27D8  3186   	fcall	_I2C_SetBuffer
  9545                           
  9546                           ;i2c_master_example.c: 173: I2C_SetDataCompleteCallback((0),(0));
  9547  06D4  3000               	movlw	0
  9548  06D5  0020               	movlb	0	; select bank0
  9549  06D6  00D0               	movwf	I2C_SetDataCompleteCallback@cb
  9550  06D7  00D1               	movwf	I2C_SetDataCompleteCallback@cb+1
  9551  06D8  01D2               	clrf	I2C_SetDataCompleteCallback@ptr
  9552  06D9  318F  2794         	fcall	_I2C_SetDataCompleteCallback
  9553                           
  9554                           ;i2c_master_example.c: 174: return I2C_RESTART_READ;
  9555  06DB  3002               	movlw	2
  9556  06DC  0008               	return
  9557  06DD                     __end_of_rdBlkRegCompleteHandler:	
  9558                           
  9559                           	psect	text54
  9560  0740                     __ptext54:	
  9561 ;; *************** function _wr1RegCompleteHandler *****************
  9562 ;; Defined at:
  9563 ;;		line 156 in file "mcc_generated_files/examples/i2c_master_example.c"
  9564 ;; Parameters:    Size  Location     Type
  9565 ;;  ptr             1   23[BANK0 ] PTR void 
  9566 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  9567 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  9568 ;; Auto vars:     Size  Location     Type
  9569 ;;		None
  9570 ;; Return value:  Size  Location     Type
  9571 ;;                  1    wreg      enum E97
  9572 ;; Registers used:
  9573 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9574 ;; Tracked objects:
  9575 ;;		On entry : 0/0
  9576 ;;		On exit  : 0/0
  9577 ;;		Unchanged: 0/0
  9578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9579 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9582 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9583 ;;Total ram usage:        1 bytes
  9584 ;; Hardware stack levels used:    1
  9585 ;; Hardware stack levels required when called:   15
  9586 ;; This function calls:
  9587 ;;		_I2C_SetBuffer
  9588 ;;		_I2C_SetDataCompleteCallback
  9589 ;; This function is called by:
  9590 ;;		_I2C_Write1ByteRegister
  9591 ;;		i1_I2C_DO_TX
  9592 ;;		i1_I2C_DO_RX
  9593 ;;		i1_I2C_DO_TX_EMPTY
  9594 ;;		i1_I2C_DO_ADDRESS_NACK
  9595 ;;		_I2C_DO_TX
  9596 ;;		_I2C_DO_RX
  9597 ;;		_I2C_DO_TX_EMPTY
  9598 ;;		_I2C_DO_ADDRESS_NACK
  9599 ;;		_I2C_DO_RX_EMPTY
  9600 ;; This function uses a non-reentrant model
  9601 ;;
  9602                           
  9603                           
  9604                           ;psect for function _wr1RegCompleteHandler
  9605  0740                     _wr1RegCompleteHandler:	
  9606                           
  9607                           ;Skip over the trampoline to the duplicate function for level 1
  9608  0740  1C7E               	btfss	126,0
  9609  0741  2F44               	goto	l4336
  9610  0742  3187  2FED         	ljmp	i1l2886
  9611  0744                     _wr1RegCompleteHandler$intlevel0:	
  9612  0744                     l4336:	
  9613                           ;incstack = 0
  9614 ;; hardware stack exceeded
  9615                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9616                           
  9617                           
  9618                           ;i2c_master_example.c: 158: I2C_SetBuffer(ptr,1);
  9619  0744  3001               	movlw	1
  9620  0745  0020               	movlb	0	; select bank0
  9621  0746  00CB               	movwf	I2C_SetBuffer@bufferSize
  9622  0747  3000               	movlw	0
  9623  0748  00CC               	movwf	I2C_SetBuffer@bufferSize+1
  9624  0749  0854               	movf	wr1RegCompleteHandler@ptr,w
  9625  074A  3187  27D8  3187   	fcall	_I2C_SetBuffer
  9626                           
  9627                           ;i2c_master_example.c: 159: I2C_SetDataCompleteCallback((0),(0));
  9628  074D  3000               	movlw	0
  9629  074E  0020               	movlb	0	; select bank0
  9630  074F  00D0               	movwf	I2C_SetDataCompleteCallback@cb
  9631  0750  00D1               	movwf	I2C_SetDataCompleteCallback@cb+1
  9632  0751  01D2               	clrf	I2C_SetDataCompleteCallback@ptr
  9633  0752  318F  2794         	fcall	_I2C_SetDataCompleteCallback
  9634                           
  9635                           ;i2c_master_example.c: 160: return I2C_CONTINUE;
  9636  0754  3004               	movlw	4
  9637  0755  0008               	return
  9638  0756                     __end_of_wr1RegCompleteHandler:	
  9639                           
  9640                           	psect	text55
  9641  0756                     __ptext55:	
  9642 ;; *************** function _rd2RegCompleteHandler *****************
  9643 ;; Defined at:
  9644 ;;		line 149 in file "mcc_generated_files/examples/i2c_master_example.c"
  9645 ;; Parameters:    Size  Location     Type
  9646 ;;  ptr             1   23[BANK0 ] PTR void 
  9647 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  9648 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  9649 ;; Auto vars:     Size  Location     Type
  9650 ;;		None
  9651 ;; Return value:  Size  Location     Type
  9652 ;;                  1    wreg      enum E97
  9653 ;; Registers used:
  9654 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9655 ;; Tracked objects:
  9656 ;;		On entry : 0/0
  9657 ;;		On exit  : 0/0
  9658 ;;		Unchanged: 0/0
  9659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9660 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9663 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9664 ;;Total ram usage:        1 bytes
  9665 ;; Hardware stack levels used:    1
  9666 ;; Hardware stack levels required when called:   15
  9667 ;; This function calls:
  9668 ;;		_I2C_SetBuffer
  9669 ;;		_I2C_SetDataCompleteCallback
  9670 ;; This function is called by:
  9671 ;;		_I2C_Read2ByteRegister
  9672 ;;		i1_I2C_DO_TX
  9673 ;;		i1_I2C_DO_RX
  9674 ;;		i1_I2C_DO_TX_EMPTY
  9675 ;;		i1_I2C_DO_ADDRESS_NACK
  9676 ;;		_I2C_DO_TX
  9677 ;;		_I2C_DO_RX
  9678 ;;		_I2C_DO_TX_EMPTY
  9679 ;;		_I2C_DO_ADDRESS_NACK
  9680 ;;		_I2C_DO_RX_EMPTY
  9681 ;; This function uses a non-reentrant model
  9682 ;;
  9683                           
  9684                           
  9685                           ;psect for function _rd2RegCompleteHandler
  9686  0756                     _rd2RegCompleteHandler:	
  9687                           
  9688                           ;Skip over the trampoline to the duplicate function for level 1
  9689  0756  1C7E               	btfss	126,0
  9690  0757  2F5A               	goto	l4328
  9691  0758  318F  2FDC         	ljmp	i1l2878
  9692  075A                     _rd2RegCompleteHandler$intlevel0:	
  9693  075A                     l4328:	
  9694                           ;incstack = 0
  9695 ;; hardware stack exceeded
  9696                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9697                           
  9698                           
  9699                           ;i2c_master_example.c: 151: I2C_SetBuffer(ptr,2);
  9700  075A  3002               	movlw	2
  9701  075B  0020               	movlb	0	; select bank0
  9702  075C  00CB               	movwf	I2C_SetBuffer@bufferSize
  9703  075D  3000               	movlw	0
  9704  075E  00CC               	movwf	I2C_SetBuffer@bufferSize+1
  9705  075F  0854               	movf	rd2RegCompleteHandler@ptr,w
  9706  0760  3187  27D8  3187   	fcall	_I2C_SetBuffer
  9707                           
  9708                           ;i2c_master_example.c: 152: I2C_SetDataCompleteCallback((0),(0));
  9709  0763  3000               	movlw	0
  9710  0764  0020               	movlb	0	; select bank0
  9711  0765  00D0               	movwf	I2C_SetDataCompleteCallback@cb
  9712  0766  00D1               	movwf	I2C_SetDataCompleteCallback@cb+1
  9713  0767  01D2               	clrf	I2C_SetDataCompleteCallback@ptr
  9714  0768  318F  2794         	fcall	_I2C_SetDataCompleteCallback
  9715                           
  9716                           ;i2c_master_example.c: 153: return I2C_RESTART_READ;
  9717  076A  3002               	movlw	2
  9718  076B  0008               	return
  9719  076C                     __end_of_rd2RegCompleteHandler:	
  9720                           
  9721                           	psect	text56
  9722  076C                     __ptext56:	
  9723 ;; *************** function _rd1RegCompleteHandler *****************
  9724 ;; Defined at:
  9725 ;;		line 142 in file "mcc_generated_files/examples/i2c_master_example.c"
  9726 ;; Parameters:    Size  Location     Type
  9727 ;;  ptr             1   23[BANK0 ] PTR void 
  9728 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  9729 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  9730 ;; Auto vars:     Size  Location     Type
  9731 ;;		None
  9732 ;; Return value:  Size  Location     Type
  9733 ;;                  1    wreg      enum E97
  9734 ;; Registers used:
  9735 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9736 ;; Tracked objects:
  9737 ;;		On entry : 0/0
  9738 ;;		On exit  : 0/0
  9739 ;;		Unchanged: 0/0
  9740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9741 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9744 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9745 ;;Total ram usage:        1 bytes
  9746 ;; Hardware stack levels used:    1
  9747 ;; Hardware stack levels required when called:   15
  9748 ;; This function calls:
  9749 ;;		_I2C_SetBuffer
  9750 ;;		_I2C_SetDataCompleteCallback
  9751 ;; This function is called by:
  9752 ;;		i1_I2C_DO_TX
  9753 ;;		i1_I2C_DO_RX
  9754 ;;		i1_I2C_DO_TX_EMPTY
  9755 ;;		i1_I2C_DO_ADDRESS_NACK
  9756 ;;		_I2C_DO_TX
  9757 ;;		_I2C_DO_RX
  9758 ;;		_I2C_DO_TX_EMPTY
  9759 ;;		_I2C_DO_ADDRESS_NACK
  9760 ;;		_I2C_DO_RX_EMPTY
  9761 ;; This function uses a non-reentrant model
  9762 ;;
  9763                           
  9764                           
  9765                           ;psect for function _rd1RegCompleteHandler
  9766  076C                     _rd1RegCompleteHandler:	
  9767                           
  9768                           ;Skip over the trampoline to the duplicate function for level 1
  9769  076C  1C7E               	btfss	126,0
  9770  076D  2F70               	goto	l4320
  9771  076E  318F  2FCC         	ljmp	i1l2870
  9772  0770                     _rd1RegCompleteHandler$intlevel0:	
  9773  0770                     l4320:	
  9774                           ;incstack = 0
  9775 ;; hardware stack exceeded
  9776                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9777                           
  9778                           
  9779                           ;i2c_master_example.c: 144: I2C_SetBuffer(ptr,1);
  9780  0770  3001               	movlw	1
  9781  0771  0020               	movlb	0	; select bank0
  9782  0772  00CB               	movwf	I2C_SetBuffer@bufferSize
  9783  0773  3000               	movlw	0
  9784  0774  00CC               	movwf	I2C_SetBuffer@bufferSize+1
  9785  0775  0854               	movf	rd1RegCompleteHandler@ptr,w
  9786  0776  3187  27D8  3187   	fcall	_I2C_SetBuffer
  9787                           
  9788                           ;i2c_master_example.c: 145: I2C_SetDataCompleteCallback((0),(0));
  9789  0779  3000               	movlw	0
  9790  077A  0020               	movlb	0	; select bank0
  9791  077B  00D0               	movwf	I2C_SetDataCompleteCallback@cb
  9792  077C  00D1               	movwf	I2C_SetDataCompleteCallback@cb+1
  9793  077D  01D2               	clrf	I2C_SetDataCompleteCallback@ptr
  9794  077E  318F  2794         	fcall	_I2C_SetDataCompleteCallback
  9795                           
  9796                           ;i2c_master_example.c: 146: return I2C_RESTART_READ;
  9797  0780  3002               	movlw	2
  9798  0781  0008               	return
  9799  0782                     __end_of_rd1RegCompleteHandler:	
  9800                           
  9801                           	psect	text57
  9802  0782                     __ptext57:	
  9803 ;; *************** function _wr2RegCompleteHandler *****************
  9804 ;; Defined at:
  9805 ;;		line 163 in file "mcc_generated_files/examples/i2c_master_example.c"
  9806 ;; Parameters:    Size  Location     Type
  9807 ;;  ptr             1   23[BANK0 ] PTR void 
  9808 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  9809 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  9810 ;; Auto vars:     Size  Location     Type
  9811 ;;		None
  9812 ;; Return value:  Size  Location     Type
  9813 ;;                  1    wreg      enum E97
  9814 ;; Registers used:
  9815 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9816 ;; Tracked objects:
  9817 ;;		On entry : 0/0
  9818 ;;		On exit  : 0/0
  9819 ;;		Unchanged: 0/0
  9820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9821 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9824 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9825 ;;Total ram usage:        1 bytes
  9826 ;; Hardware stack levels used:    1
  9827 ;; Hardware stack levels required when called:   15
  9828 ;; This function calls:
  9829 ;;		_I2C_SetBuffer
  9830 ;;		_I2C_SetDataCompleteCallback
  9831 ;; This function is called by:
  9832 ;;		_I2C_Write2ByteRegister
  9833 ;;		i1_I2C_DO_TX
  9834 ;;		i1_I2C_DO_RX
  9835 ;;		i1_I2C_DO_TX_EMPTY
  9836 ;;		i1_I2C_DO_ADDRESS_NACK
  9837 ;;		_I2C_DO_TX
  9838 ;;		_I2C_DO_RX
  9839 ;;		_I2C_DO_TX_EMPTY
  9840 ;;		_I2C_DO_ADDRESS_NACK
  9841 ;;		_I2C_DO_RX_EMPTY
  9842 ;; This function uses a non-reentrant model
  9843 ;;
  9844                           
  9845                           
  9846                           ;psect for function _wr2RegCompleteHandler
  9847  0782                     _wr2RegCompleteHandler:	
  9848                           
  9849                           ;Skip over the trampoline to the duplicate function for level 1
  9850  0782  1C7E               	btfss	126,0
  9851  0783  2F86               	goto	l4344
  9852  0784  318F  2FBC         	ljmp	i1l2894
  9853  0786                     _wr2RegCompleteHandler$intlevel0:	
  9854  0786                     l4344:	
  9855                           ;incstack = 0
  9856 ;; hardware stack exceeded
  9857                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9858                           
  9859                           
  9860                           ;i2c_master_example.c: 165: I2C_SetBuffer(ptr,2);
  9861  0786  3002               	movlw	2
  9862  0787  0020               	movlb	0	; select bank0
  9863  0788  00CB               	movwf	I2C_SetBuffer@bufferSize
  9864  0789  3000               	movlw	0
  9865  078A  00CC               	movwf	I2C_SetBuffer@bufferSize+1
  9866  078B  0854               	movf	wr2RegCompleteHandler@ptr,w
  9867  078C  3187  27D8  3187   	fcall	_I2C_SetBuffer
  9868                           
  9869                           ;i2c_master_example.c: 166: I2C_SetDataCompleteCallback((0),(0));
  9870  078F  3000               	movlw	0
  9871  0790  0020               	movlb	0	; select bank0
  9872  0791  00D0               	movwf	I2C_SetDataCompleteCallback@cb
  9873  0792  00D1               	movwf	I2C_SetDataCompleteCallback@cb+1
  9874  0793  01D2               	clrf	I2C_SetDataCompleteCallback@ptr
  9875  0794  318F  2794         	fcall	_I2C_SetDataCompleteCallback
  9876                           
  9877                           ;i2c_master_example.c: 167: return I2C_CONTINUE;
  9878  0796  3004               	movlw	4
  9879  0797  0008               	return
  9880  0798                     __end_of_wr2RegCompleteHandler:	
  9881                           
  9882                           	psect	text58
  9883  0F94                     __ptext58:	
  9884 ;; *************** function _I2C_SetDataCompleteCallback *****************
  9885 ;; Defined at:
  9886 ;;		line 273 in file "mcc_generated_files/i2c_master.c"
  9887 ;; Parameters:    Size  Location     Type
  9888 ;;  cb              2   19[BANK0 ] PTR FTN(PTR void ,)enum 
  9889 ;;		 -> i1_wr1RegCompleteHandler(1), i1_rd1RegCompleteHandler(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), 
  9890 ;;		 -> wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), Absolute function(1), rd1RegCompleteHandler(1), 
  9891 ;;  ptr             1   21[BANK0 ] PTR void 
  9892 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  9893 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  9894 ;; Auto vars:     Size  Location     Type
  9895 ;;		None
  9896 ;; Return value:  Size  Location     Type
  9897 ;;                  1    wreg      void 
  9898 ;; Registers used:
  9899 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9900 ;; Tracked objects:
  9901 ;;		On entry : 0/0
  9902 ;;		On exit  : 0/0
  9903 ;;		Unchanged: 0/0
  9904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9905 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9907 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9908 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9909 ;;Total ram usage:        4 bytes
  9910 ;; Hardware stack levels used:    1
  9911 ;; Hardware stack levels required when called:   14
  9912 ;; This function calls:
  9913 ;;		_I2C_SetCallback
  9914 ;; This function is called by:
  9915 ;;		_I2C_Write1ByteRegister
  9916 ;;		_rd1RegCompleteHandler
  9917 ;;		_rd2RegCompleteHandler
  9918 ;;		_wr1RegCompleteHandler
  9919 ;;		_wr2RegCompleteHandler
  9920 ;;		_rdBlkRegCompleteHandler
  9921 ;;		_I2C_Read2ByteRegister
  9922 ;;		_I2C_Write2ByteRegister
  9923 ;;		_I2C_ReadDataBlock
  9924 ;; This function uses a non-reentrant model
  9925 ;;
  9926                           
  9927                           
  9928                           ;psect for function _I2C_SetDataCompleteCallback
  9929  0F94                     _I2C_SetDataCompleteCallback:	
  9930                           
  9931                           ;i2c_master.c: 275: I2C_SetCallback(I2C_DATA_COMPLETE, cb, ptr);
  9932                           
  9933                           ;incstack = 0
  9934                           ; Regs used in _I2C_SetDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  9935  0F94  0020               	movlb	0	; select bank0
  9936  0F95  0851               	movf	I2C_SetDataCompleteCallback@cb+1,w
  9937  0F96  00CC               	movwf	I2C_SetCallback@cb+1
  9938  0F97  0850               	movf	I2C_SetDataCompleteCallback@cb,w
  9939  0F98  00CB               	movwf	I2C_SetCallback@cb
  9940  0F99  0852               	movf	I2C_SetDataCompleteCallback@ptr,w
  9941  0F9A  00D3               	movwf	??_I2C_SetDataCompleteCallback
  9942  0F9B  0853               	movf	??_I2C_SetDataCompleteCallback,w
  9943  0F9C  00CD               	movwf	I2C_SetCallback@ptr
  9944  0F9D  3000               	movlw	0
  9945  0F9E  3185  25D3         	fcall	_I2C_SetCallback
  9946  0FA0  0008               	return
  9947  0FA1                     __end_of_I2C_SetDataCompleteCallback:	
  9948                           
  9949                           	psect	text59
  9950  05D3                     __ptext59:	
  9951 ;; *************** function _I2C_SetCallback *****************
  9952 ;; Defined at:
  9953 ;;		line 298 in file "mcc_generated_files/i2c_master.c"
  9954 ;; Parameters:    Size  Location     Type
  9955 ;;  idx             1    wreg     enum E12121
  9956 ;;  cb              2   14[BANK0 ] PTR FTN(PTR void ,)enum 
  9957 ;;		 -> i1_wr1RegCompleteHandler(1), i1_rd1RegCompleteHandler(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), 
  9958 ;;		 -> wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), Absolute function(1), rd1RegCompleteHandler(1), 
  9959 ;;  ptr             1   16[BANK0 ] PTR void 
  9960 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
  9961 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
  9962 ;; Auto vars:     Size  Location     Type
  9963 ;;  idx             1   18[BANK0 ] enum E12121
  9964 ;; Return value:  Size  Location     Type
  9965 ;;                  1    wreg      void 
  9966 ;; Registers used:
  9967 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9968 ;; Tracked objects:
  9969 ;;		On entry : 0/0
  9970 ;;		On exit  : 0/0
  9971 ;;		Unchanged: 0/0
  9972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9973 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9974 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9975 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9976 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9977 ;;Total ram usage:        5 bytes
  9978 ;; Hardware stack levels used:    1
  9979 ;; Hardware stack levels required when called:   13
  9980 ;; This function calls:
  9981 ;;		Nothing
  9982 ;; This function is called by:
  9983 ;;		_I2C_SetDataCompleteCallback
  9984 ;;		_I2C_SetAddressNackCallback
  9985 ;;		_I2C_SetWriteCollisionCallback
  9986 ;;		_I2C_SetDataNackCallback
  9987 ;;		_I2C_SetTimeoutCallback
  9988 ;; This function uses a non-reentrant model
  9989 ;;
  9990                           
  9991                           
  9992                           ;psect for function _I2C_SetCallback
  9993  05D3                     _I2C_SetCallback:	
  9994                           
  9995                           ;incstack = 0
  9996                           ; Regs used in _I2C_SetCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
  9997                           ;I2C_SetCallback@idx stored from wreg
  9998  05D3  0020               	movlb	0	; select bank0
  9999  05D4  00CF               	movwf	I2C_SetCallback@idx
 10000                           
 10001                           ;i2c_master.c: 300: if(cb)
 10002  05D5  084B               	movf	I2C_SetCallback@cb,w
 10003  05D6  044C               	iorwf	I2C_SetCallback@cb+1,w
 10004  05D7  1903               	btfsc	3,2
 10005  05D8  2DEA               	goto	l4202
 10006                           
 10007                           ;i2c_master.c: 301: {
 10008                           ;i2c_master.c: 302: I2C_Status.callbackTable[idx] = cb;
 10009  05D9  354F               	lslf	I2C_SetCallback@idx,w
 10010  05DA  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
 10011  05DB  0086               	movwf	6
 10012  05DC  0187               	clrf	7
 10013  05DD  084B               	movf	I2C_SetCallback@cb,w
 10014  05DE  3FC0               	movwi [0]fsr1
 10015  05DF  084C               	movf	I2C_SetCallback@cb+1,w
 10016  05E0  3FC1               	movwi [1]fsr1
 10017                           
 10018                           ;i2c_master.c: 303: I2C_Status.callbackPayload[idx] = ptr;
 10019  05E1  084D               	movf	I2C_SetCallback@ptr,w
 10020  05E2  00CE               	movwf	??_I2C_SetCallback
 10021  05E3  084F               	movf	I2C_SetCallback@idx,w
 10022  05E4  3EAC               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
 10023  05E5  0086               	movwf	6
 10024  05E6  0187               	clrf	7
 10025  05E7  084E               	movf	??_I2C_SetCallback,w
 10026  05E8  0081               	movwf	1
 10027                           
 10028                           ;i2c_master.c: 304: }
 10029  05E9  0008               	return
 10030  05EA                     l4202:	
 10031                           
 10032                           ;i2c_master.c: 305: else
 10033                           ;i2c_master.c: 306: {
 10034                           ;i2c_master.c: 307: I2C_Status.callbackTable[idx] = I2C_CallbackReturnStop;
 10035  05EA  354F               	lslf	I2C_SetCallback@idx,w
 10036  05EB  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
 10037  05EC  0086               	movwf	6
 10038  05ED  0187               	clrf	7
 10039  05EE  304F               	movlw	low _I2C_CallbackReturnStop
 10040  05EF  3FC0               	movwi [0]fsr1
 10041  05F0  300E               	movlw	high _I2C_CallbackReturnStop
 10042  05F1  3FC1               	movwi [1]fsr1
 10043                           
 10044                           ;i2c_master.c: 308: I2C_Status.callbackPayload[idx] = (0);
 10045  05F2  084F               	movf	I2C_SetCallback@idx,w
 10046  05F3  3EAC               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
 10047  05F4  0086               	movwf	6
 10048  05F5  0187               	clrf	7
 10049  05F6  0181               	clrf	1
 10050  05F7  0008               	return
 10051  05F8                     __end_of_I2C_SetCallback:	
 10052                           
 10053                           	psect	text60
 10054  07D8                     __ptext60:	
 10055 ;; *************** function _I2C_SetBuffer *****************
 10056 ;; Defined at:
 10057 ;;		line 263 in file "mcc_generated_files/i2c_master.c"
 10058 ;; Parameters:    Size  Location     Type
 10059 ;;  buffer          1    wreg     PTR void 
 10060 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
 10061 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
 10062 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
 10063 ;;  bufferSize      2   14[BANK0 ] unsigned int 
 10064 ;; Auto vars:     Size  Location     Type
 10065 ;;  buffer          1   17[BANK0 ] PTR void 
 10066 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
 10067 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
 10068 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
 10069 ;; Return value:  Size  Location     Type
 10070 ;;                  1    wreg      void 
 10071 ;; Registers used:
 10072 ;;		wreg
 10073 ;; Tracked objects:
 10074 ;;		On entry : 0/0
 10075 ;;		On exit  : 0/0
 10076 ;;		Unchanged: 0/0
 10077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10078 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10079 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10080 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10081 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10082 ;;Total ram usage:        4 bytes
 10083 ;; Hardware stack levels used:    1
 10084 ;; Hardware stack levels required when called:   13
 10085 ;; This function calls:
 10086 ;;		Nothing
 10087 ;; This function is called by:
 10088 ;;		_I2C_Write1ByteRegister
 10089 ;;		_rd1RegCompleteHandler
 10090 ;;		_rd2RegCompleteHandler
 10091 ;;		_wr1RegCompleteHandler
 10092 ;;		_wr2RegCompleteHandler
 10093 ;;		_rdBlkRegCompleteHandler
 10094 ;;		_I2C_Read2ByteRegister
 10095 ;;		_I2C_Write2ByteRegister
 10096 ;;		_I2C_WriteNBytes
 10097 ;;		_I2C_ReadNBytes
 10098 ;;		_I2C_ReadDataBlock
 10099 ;; This function uses a non-reentrant model
 10100 ;;
 10101                           
 10102                           
 10103                           ;psect for function _I2C_SetBuffer
 10104  07D8                     _I2C_SetBuffer:	
 10105                           
 10106                           ;incstack = 0
 10107                           ; Regs used in _I2C_SetBuffer: [wreg]
 10108                           ;I2C_SetBuffer@buffer stored from wreg
 10109  07D8  0020               	movlb	0	; select bank0
 10110  07D9  00CE               	movwf	I2C_SetBuffer@buffer
 10111                           
 10112                           ;i2c_master.c: 265: if(I2C_Status.bufferFree)
 10113  07DA  0021               	movlb	1	; select bank1
 10114  07DB  1DBC               	btfss	(_I2C_Status^(0+128)+28),3
 10115  07DC  0008               	return
 10116                           
 10117                           ;i2c_master.c: 266: {
 10118                           ;i2c_master.c: 267: I2C_Status.data_ptr = buffer;
 10119  07DD  0020               	movlb	0	; select bank0
 10120  07DE  084E               	movf	I2C_SetBuffer@buffer,w
 10121  07DF  00CD               	movwf	??_I2C_SetBuffer
 10122  07E0  084D               	movf	??_I2C_SetBuffer,w
 10123  07E1  0021               	movlb	1	; select bank1
 10124  07E2  00B7               	movwf	(low ((_I2C_Status| 0+23)))^(0+128)
 10125                           
 10126                           ;i2c_master.c: 268: I2C_Status.data_length = bufferSize;
 10127  07E3  0020               	movlb	0	; select bank0
 10128  07E4  084C               	movf	I2C_SetBuffer@bufferSize+1,w
 10129  07E5  0021               	movlb	1	; select bank1
 10130  07E6  00B9               	movwf	((_I2C_Status+1)^(0+128)+24)
 10131  07E7  0020               	movlb	0	; select bank0
 10132  07E8  084B               	movf	I2C_SetBuffer@bufferSize,w
 10133  07E9  0021               	movlb	1	; select bank1
 10134  07EA  00B8               	movwf	(_I2C_Status^(0+128)+24)
 10135                           
 10136                           ;i2c_master.c: 269: I2C_Status.bufferFree = 0;
 10137  07EB  11BC               	bcf	(_I2C_Status^(0+128)+28),3
 10138  07EC  0008               	return
 10139  07ED                     __end_of_I2C_SetBuffer:	
 10140                           
 10141                           	psect	text61
 10142  0DD8                     __ptext61:	
 10143 ;; *************** function _I2C_MasterStop *****************
 10144 ;; Defined at:
 10145 ;;		line 593 in file "mcc_generated_files/i2c_master.c"
 10146 ;; Parameters:    Size  Location     Type
 10147 ;;		None
 10148 ;; Auto vars:     Size  Location     Type
 10149 ;;		None
 10150 ;; Return value:  Size  Location     Type
 10151 ;;                  1    wreg      void 
 10152 ;; Registers used:
 10153 ;;		None
 10154 ;; Tracked objects:
 10155 ;;		On entry : 0/0
 10156 ;;		On exit  : 0/0
 10157 ;;		Unchanged: 0/0
 10158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10162 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10163 ;;Total ram usage:        0 bytes
 10164 ;; Hardware stack levels used:    1
 10165 ;; Hardware stack levels required when called:   13
 10166 ;; This function calls:
 10167 ;;		Nothing
 10168 ;; This function is called by:
 10169 ;;		_I2C_DO_SEND_STOP
 10170 ;; This function uses a non-reentrant model
 10171 ;;
 10172                           
 10173                           
 10174                           ;psect for function _I2C_MasterStop
 10175  0DD8                     _I2C_MasterStop:	
 10176                           
 10177                           ;i2c_master.c: 595: SSP1CON2bits.PEN = 1;
 10178                           
 10179                           ;incstack = 0
 10180 ;; hardware stack exceeded
 10181                           ; Regs used in _I2C_MasterStop: []
 10182  0DD8  0024               	movlb	4	; select bank4
 10183  0DD9  1516               	bsf	22,2	;volatile
 10184  0DDA  0008               	return
 10185  0DDB                     __end_of_I2C_MasterStop:	
 10186                           
 10187                           	psect	text62
 10188  0DD5                     __ptext62:	
 10189 ;; *************** function _I2C_MasterEnableRestart *****************
 10190 ;; Defined at:
 10191 ;;		line 573 in file "mcc_generated_files/i2c_master.c"
 10192 ;; Parameters:    Size  Location     Type
 10193 ;;		None
 10194 ;; Auto vars:     Size  Location     Type
 10195 ;;		None
 10196 ;; Return value:  Size  Location     Type
 10197 ;;                  1    wreg      void 
 10198 ;; Registers used:
 10199 ;;		None
 10200 ;; Tracked objects:
 10201 ;;		On entry : 0/0
 10202 ;;		On exit  : 0/0
 10203 ;;		Unchanged: 0/0
 10204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10208 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10209 ;;Total ram usage:        0 bytes
 10210 ;; Hardware stack levels used:    1
 10211 ;; Hardware stack levels required when called:   13
 10212 ;; This function calls:
 10213 ;;		Nothing
 10214 ;; This function is called by:
 10215 ;;		_I2C_DO_SEND_RESTART_READ
 10216 ;;		_I2C_DO_SEND_RESTART_WRITE
 10217 ;;		_I2C_DO_SEND_RESTART
 10218 ;;		_I2C_DO_RX_EMPTY
 10219 ;; This function uses a non-reentrant model
 10220 ;;
 10221                           
 10222                           
 10223                           ;psect for function _I2C_MasterEnableRestart
 10224  0DD5                     _I2C_MasterEnableRestart:	
 10225                           
 10226                           ;i2c_master.c: 575: SSP1CON2bits.RSEN = 1;
 10227                           
 10228                           ;incstack = 0
 10229 ;; hardware stack exceeded
 10230                           ; Regs used in _I2C_MasterEnableRestart: []
 10231  0DD5  0024               	movlb	4	; select bank4
 10232  0DD6  1496               	bsf	22,1	;volatile
 10233  0DD7  0008               	return
 10234  0DD8                     __end_of_I2C_MasterEnableRestart:	
 10235                           
 10236                           	psect	text63
 10237  0DD2                     __ptext63:	
 10238 ;; *************** function _I2C_MasterStart *****************
 10239 ;; Defined at:
 10240 ;;		line 588 in file "mcc_generated_files/i2c_master.c"
 10241 ;; Parameters:    Size  Location     Type
 10242 ;;		None
 10243 ;; Auto vars:     Size  Location     Type
 10244 ;;		None
 10245 ;; Return value:  Size  Location     Type
 10246 ;;                  1    wreg      void 
 10247 ;; Registers used:
 10248 ;;		None
 10249 ;; Tracked objects:
 10250 ;;		On entry : 0/0
 10251 ;;		On exit  : 0/0
 10252 ;;		Unchanged: 0/0
 10253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10257 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10258 ;;Total ram usage:        0 bytes
 10259 ;; Hardware stack levels used:    1
 10260 ;; Hardware stack levels required when called:   13
 10261 ;; This function calls:
 10262 ;;		Nothing
 10263 ;; This function is called by:
 10264 ;;		_I2C_MasterOperation
 10265 ;; This function uses a non-reentrant model
 10266 ;;
 10267                           
 10268                           
 10269                           ;psect for function _I2C_MasterStart
 10270  0DD2                     _I2C_MasterStart:	
 10271                           
 10272                           ;i2c_master.c: 590: SSP1CON2bits.SEN = 1;
 10273                           
 10274                           ;incstack = 0
 10275 ;; hardware stack exceeded
 10276                           ; Regs used in _I2C_MasterStart: []
 10277  0DD2  0024               	movlb	4	; select bank4
 10278  0DD3  1416               	bsf	22,0	;volatile
 10279  0DD4  0008               	return
 10280  0DD5                     __end_of_I2C_MasterStart:	
 10281                           
 10282                           	psect	text64
 10283  0684                     __ptext64:	
 10284 ;; *************** function _I2C_Close *****************
 10285 ;; Defined at:
 10286 ;;		line 209 in file "mcc_generated_files/i2c_master.c"
 10287 ;; Parameters:    Size  Location     Type
 10288 ;;		None
 10289 ;; Auto vars:     Size  Location     Type
 10290 ;;  returnValue     1   15[BANK0 ] enum E92
 10291 ;; Return value:  Size  Location     Type
 10292 ;;                  1    wreg      enum E92
 10293 ;; Registers used:
 10294 ;;		wreg, status,2, status,0, pclath, cstack
 10295 ;; Tracked objects:
 10296 ;;		On entry : 0/0
 10297 ;;		On exit  : 0/0
 10298 ;;		Unchanged: 0/0
 10299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10301 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10302 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10303 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10304 ;;Total ram usage:        2 bytes
 10305 ;; Hardware stack levels used:    1
 10306 ;; Hardware stack levels required when called:   14
 10307 ;; This function calls:
 10308 ;;		_I2C_MasterClearIrq
 10309 ;;		_I2C_MasterClose
 10310 ;;		_I2C_MasterDisableIrq
 10311 ;; This function is called by:
 10312 ;;		_I2C_Write1ByteRegister
 10313 ;;		_I2C_Read2ByteRegister
 10314 ;;		_I2C_Write2ByteRegister
 10315 ;;		_I2C_WriteNBytes
 10316 ;;		_I2C_ReadNBytes
 10317 ;;		_I2C_ReadDataBlock
 10318 ;; This function uses a non-reentrant model
 10319 ;;
 10320                           
 10321                           
 10322                           ;psect for function _I2C_Close
 10323  0684                     _I2C_Close:	
 10324                           
 10325                           ;i2c_master.c: 211: i2c_error_t returnValue = I2C_BUSY;
 10326                           
 10327                           ;incstack = 0
 10328                           ; Regs used in _I2C_Close: [wreg+status,2+status,0+pclath+cstack]
 10329  0684  0020               	movlb	0	; select bank0
 10330  0685  01CC               	clrf	I2C_Close@returnValue
 10331  0686  0ACC               	incf	I2C_Close@returnValue,f
 10332                           
 10333                           ;i2c_master.c: 212: if(!I2C_Status.busy)
 10334  0687  0021               	movlb	1	; select bank1
 10335  0688  18BC               	btfsc	(_I2C_Status^(0+128)+28),1
 10336  0689  2E9F               	goto	l4778
 10337                           
 10338                           ;i2c_master.c: 213: {
 10339                           ;i2c_master.c: 214: I2C_Status.inUse = 0;
 10340  068A  113C               	bcf	(_I2C_Status^(0+128)+28),2
 10341                           
 10342                           ;i2c_master.c: 215: I2C_Status.address = 0xff;
 10343  068B  30FF               	movlw	255
 10344  068C  0020               	movlb	0	; select bank0
 10345  068D  00CB               	movwf	??_I2C_Close
 10346  068E  084B               	movf	??_I2C_Close,w
 10347  068F  0021               	movlb	1	; select bank1
 10348  0690  00B6               	movwf	(_I2C_Status^(0+128)+22)
 10349                           
 10350                           ;i2c_master.c: 216: I2C_MasterClearIrq();
 10351  0691  318D  25C9  3186   	fcall	_I2C_MasterClearIrq
 10352                           
 10353                           ;i2c_master.c: 217: I2C_MasterDisableIrq();
 10354  0694  318D  25CF  3186   	fcall	_I2C_MasterDisableIrq
 10355                           
 10356                           ;i2c_master.c: 218: I2C_MasterClose();
 10357  0697  318D  25CC         	fcall	_I2C_MasterClose
 10358                           
 10359                           ;i2c_master.c: 219: returnValue = I2C_Status.error;
 10360  0699  0021               	movlb	1	; select bank1
 10361  069A  083B               	movf	(_I2C_Status^(0+128)+27),w
 10362  069B  0020               	movlb	0	; select bank0
 10363  069C  00CB               	movwf	??_I2C_Close
 10364  069D  084B               	movf	??_I2C_Close,w
 10365  069E  00CC               	movwf	I2C_Close@returnValue
 10366  069F                     l4778:	
 10367                           
 10368                           ;i2c_master.c: 220: }
 10369                           ;i2c_master.c: 221: return returnValue;
 10370  069F  0020               	movlb	0	; select bank0
 10371  06A0  084C               	movf	I2C_Close@returnValue,w
 10372  06A1  0008               	return
 10373  06A2                     __end_of_I2C_Close:	
 10374                           
 10375                           	psect	text65
 10376  0DCF                     __ptext65:	
 10377 ;; *************** function _I2C_MasterDisableIrq *****************
 10378 ;; Defined at:
 10379 ;;		line 635 in file "mcc_generated_files/i2c_master.c"
 10380 ;; Parameters:    Size  Location     Type
 10381 ;;		None
 10382 ;; Auto vars:     Size  Location     Type
 10383 ;;		None
 10384 ;; Return value:  Size  Location     Type
 10385 ;;                  1    wreg      void 
 10386 ;; Registers used:
 10387 ;;		None
 10388 ;; Tracked objects:
 10389 ;;		On entry : 0/0
 10390 ;;		On exit  : 0/0
 10391 ;;		Unchanged: 0/0
 10392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10397 ;;Total ram usage:        0 bytes
 10398 ;; Hardware stack levels used:    1
 10399 ;; Hardware stack levels required when called:   13
 10400 ;; This function calls:
 10401 ;;		Nothing
 10402 ;; This function is called by:
 10403 ;;		_I2C_Close
 10404 ;;		_I2C_SetTimeOut
 10405 ;; This function uses a non-reentrant model
 10406 ;;
 10407                           
 10408                           
 10409                           ;psect for function _I2C_MasterDisableIrq
 10410  0DCF                     _I2C_MasterDisableIrq:	
 10411                           
 10412                           ;i2c_master.c: 637: PIE1bits.SSP1IE = 0;
 10413                           
 10414                           ;incstack = 0
 10415                           ; Regs used in _I2C_MasterDisableIrq: []
 10416  0DCF  0021               	movlb	1	; select bank1
 10417  0DD0  1190               	bcf	16,3	;volatile
 10418  0DD1  0008               	return
 10419  0DD2                     __end_of_I2C_MasterDisableIrq:	
 10420                           
 10421                           	psect	text66
 10422  0DCC                     __ptext66:	
 10423 ;; *************** function _I2C_MasterClose *****************
 10424 ;; Defined at:
 10425 ;;		line 557 in file "mcc_generated_files/i2c_master.c"
 10426 ;; Parameters:    Size  Location     Type
 10427 ;;		None
 10428 ;; Auto vars:     Size  Location     Type
 10429 ;;		None
 10430 ;; Return value:  Size  Location     Type
 10431 ;;                  1    wreg      void 
 10432 ;; Registers used:
 10433 ;;		None
 10434 ;; Tracked objects:
 10435 ;;		On entry : 0/0
 10436 ;;		On exit  : 0/0
 10437 ;;		Unchanged: 0/0
 10438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10443 ;;Total ram usage:        0 bytes
 10444 ;; Hardware stack levels used:    1
 10445 ;; Hardware stack levels required when called:   13
 10446 ;; This function calls:
 10447 ;;		Nothing
 10448 ;; This function is called by:
 10449 ;;		_I2C_Close
 10450 ;; This function uses a non-reentrant model
 10451 ;;
 10452                           
 10453                           
 10454                           ;psect for function _I2C_MasterClose
 10455  0DCC                     _I2C_MasterClose:	
 10456                           
 10457                           ;i2c_master.c: 560: SSP1CON1bits.SSPEN = 0;
 10458                           
 10459                           ;incstack = 0
 10460                           ; Regs used in _I2C_MasterClose: []
 10461  0DCC  0024               	movlb	4	; select bank4
 10462  0DCD  1295               	bcf	21,5	;volatile
 10463  0DCE  0008               	return
 10464  0DCF                     __end_of_I2C_MasterClose:	
 10465                           
 10466                           	psect	text67
 10467  0DC9                     __ptext67:	
 10468 ;; *************** function _I2C_MasterClearIrq *****************
 10469 ;; Defined at:
 10470 ;;		line 640 in file "mcc_generated_files/i2c_master.c"
 10471 ;; Parameters:    Size  Location     Type
 10472 ;;		None
 10473 ;; Auto vars:     Size  Location     Type
 10474 ;;		None
 10475 ;; Return value:  Size  Location     Type
 10476 ;;                  1    wreg      void 
 10477 ;; Registers used:
 10478 ;;		None
 10479 ;; Tracked objects:
 10480 ;;		On entry : 0/0
 10481 ;;		On exit  : 0/0
 10482 ;;		Unchanged: 0/0
 10483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10488 ;;Total ram usage:        0 bytes
 10489 ;; Hardware stack levels used:    1
 10490 ;; Hardware stack levels required when called:   13
 10491 ;; This function calls:
 10492 ;;		Nothing
 10493 ;; This function is called by:
 10494 ;;		_I2C_Open
 10495 ;;		_I2C_Close
 10496 ;;		_I2C_MasterFsm
 10497 ;; This function uses a non-reentrant model
 10498 ;;
 10499                           
 10500                           
 10501                           ;psect for function _I2C_MasterClearIrq
 10502  0DC9                     _I2C_MasterClearIrq:	
 10503                           
 10504                           ;i2c_master.c: 642: PIR1bits.SSP1IF = 0;
 10505                           
 10506                           ;incstack = 0
 10507                           ; Regs used in _I2C_MasterClearIrq: []
 10508  0DC9  0020               	movlb	0	; select bank0
 10509  0DCA  1190               	bcf	16,3	;volatile
 10510  0DCB  0008               	return
 10511  0DCC                     __end_of_I2C_MasterClearIrq:	
 10512                           
 10513                           	psect	intentry
 10514  0004                     __pintentry:	
 10515 ;; *************** function _INTERRUPT_InterruptManager *****************
 10516 ;; Defined at:
 10517 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 10518 ;; Parameters:    Size  Location     Type
 10519 ;;		None
 10520 ;; Auto vars:     Size  Location     Type
 10521 ;;		None
 10522 ;; Return value:  Size  Location     Type
 10523 ;;                  1    wreg      void 
 10524 ;; Registers used:
 10525 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10526 ;; Tracked objects:
 10527 ;;		On entry : 0/0
 10528 ;;		On exit  : 0/0
 10529 ;;		Unchanged: 0/0
 10530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10533 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10534 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10535 ;;Total ram usage:        1 bytes
 10536 ;; Hardware stack levels used:    1
 10537 ;; Hardware stack levels required when called:   12
 10538 ;; This function calls:
 10539 ;;		Absolute function
 10540 ;;		_EUSART_Receive_ISR
 10541 ;;		_MATHACC_Error_ISR
 10542 ;;		_MATHACC_PID_ISR
 10543 ;;		_MyUART_ISR
 10544 ;;		_TMR2_ISR
 10545 ;; This function is called by:
 10546 ;;		Interrupt level 1
 10547 ;; This function uses a non-reentrant model
 10548 ;;
 10549                           
 10550  0004                     _INTERRUPT_InterruptManager:	
 10551                           
 10552                           ;incstack = 0
 10553 ;; hardware stack exceeded
 10554  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 10555                           
 10556                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10557  0005  3180               	pagesel	$
 10558  0006  0020               	movlb	0	; select bank0
 10559  0007  087F               	movf	127,w
 10560  0008  00CA               	movwf	??_INTERRUPT_InterruptManager
 10561                           
 10562                           ;interrupt_manager.c: 55: if(INTCONbits.PEIE == 1)
 10563  0009  1F0B               	btfss	11,6	;volatile
 10564  000A  2833               	goto	i1l135
 10565                           
 10566                           ;interrupt_manager.c: 56: {
 10567                           ;interrupt_manager.c: 57: if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
 10568  000B  0021               	movlb	1	; select bank1
 10569  000C  1E90               	btfss	16,5	;volatile
 10570  000D  2817               	goto	i1l126
 10571  000E  0020               	movlb	0	; select bank0
 10572  000F  1E90               	btfss	16,5	;volatile
 10573  0010  2817               	goto	i1l126
 10574                           
 10575                           ;interrupt_manager.c: 58: {
 10576                           ;interrupt_manager.c: 59: EUSART_RxDefaultInterruptHandler();
 10577  0011  085E               	movf	_EUSART_RxDefaultInterruptHandler+1,w
 10578  0012  008A               	movwf	10
 10579  0013  085D               	movf	_EUSART_RxDefaultInterruptHandler,w
 10580  0014  000A               	callw
 10581  0015  3180               	pagesel	$
 10582                           
 10583                           ;interrupt_manager.c: 60: }
 10584  0016  2833               	goto	i1l135
 10585  0017                     i1l126:	
 10586                           
 10587                           ;interrupt_manager.c: 61: else if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
 10588  0017  0021               	movlb	1	; select bank1
 10589  0018  1C90               	btfss	16,1	;volatile
 10590  0019  2821               	goto	i1l128
 10591  001A  0020               	movlb	0	; select bank0
 10592  001B  1C90               	btfss	16,1	;volatile
 10593  001C  2821               	goto	i1l128
 10594                           
 10595                           ;interrupt_manager.c: 62: {
 10596                           ;interrupt_manager.c: 63: TMR2_ISR();
 10597  001D  318E  2639  3180   	fcall	_TMR2_ISR
 10598                           
 10599                           ;interrupt_manager.c: 64: }
 10600  0020  2833               	goto	i1l135
 10601  0021                     i1l128:	
 10602                           
 10603                           ;interrupt_manager.c: 65: else if(PIE5bits.PID1DIE == 1 && PIR5bits.PID1DIF == 1)
 10604  0021  0021               	movlb	1	; select bank1
 10605  0022  1C14               	btfss	20,0	;volatile
 10606  0023  282B               	goto	i1l130
 10607  0024  0020               	movlb	0	; select bank0
 10608  0025  1C14               	btfss	20,0	;volatile
 10609  0026  282B               	goto	i1l130
 10610                           
 10611                           ;interrupt_manager.c: 66: {
 10612                           ;interrupt_manager.c: 67: MATHACC_PID_ISR();
 10613  0027  318E  26E1  3180   	fcall	_MATHACC_PID_ISR
 10614                           
 10615                           ;interrupt_manager.c: 68: }
 10616  002A  2833               	goto	i1l135
 10617  002B                     i1l130:	
 10618                           
 10619                           ;interrupt_manager.c: 69: else if(PIE5bits.PID1EIE == 1 && PIR5bits.PID1EIF == 1)
 10620  002B  0021               	movlb	1	; select bank1
 10621  002C  1C94               	btfss	20,1	;volatile
 10622  002D  2833               	goto	i1l135
 10623  002E  0020               	movlb	0	; select bank0
 10624  002F  1C94               	btfss	20,1	;volatile
 10625  0030  2833               	goto	i1l135
 10626                           
 10627                           ;interrupt_manager.c: 70: {
 10628                           ;interrupt_manager.c: 71: MATHACC_Error_ISR();
 10629  0031  318D  25AB         	fcall	_MATHACC_Error_ISR
 10630  0033                     i1l135:	
 10631                           ;interrupt_manager.c: 78: else
 10632                           ;interrupt_manager.c: 79: {
 10633                           
 10634                           ;interrupt_manager.c: 76: }
 10635                           ;interrupt_manager.c: 77: }
 10636                           
 10637                           ;interrupt_manager.c: 73: else
 10638                           ;interrupt_manager.c: 74: {
 10639                           
 10640                           ;interrupt_manager.c: 72: }
 10641                           
 10642  0033  0020               	movlb	0	; select bank0
 10643  0034  084A               	movf	??_INTERRUPT_InterruptManager,w
 10644  0035  00FF               	movwf	127
 10645  0036  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 10646  0037  0009               	retfie
 10647  0038                     __end_of_INTERRUPT_InterruptManager:	
 10648                           
 10649                           	psect	text69
 10650  0E39                     __ptext69:	
 10651 ;; *************** function _TMR2_ISR *****************
 10652 ;; Defined at:
 10653 ;;		line 165 in file "mcc_generated_files/tmr2.c"
 10654 ;; Parameters:    Size  Location     Type
 10655 ;;		None
 10656 ;; Auto vars:     Size  Location     Type
 10657 ;;		None
 10658 ;; Return value:  Size  Location     Type
 10659 ;;                  1    wreg      void 
 10660 ;; Registers used:
 10661 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10662 ;; Tracked objects:
 10663 ;;		On entry : 0/0
 10664 ;;		On exit  : 0/0
 10665 ;;		Unchanged: 0/0
 10666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10671 ;;Total ram usage:        0 bytes
 10672 ;; Hardware stack levels used:    1
 10673 ;; Hardware stack levels required when called:   11
 10674 ;; This function calls:
 10675 ;;		_TMR2_CallBack
 10676 ;; This function is called by:
 10677 ;;		_INTERRUPT_InterruptManager
 10678 ;; This function uses a non-reentrant model
 10679 ;;
 10680                           
 10681                           
 10682                           ;psect for function _TMR2_ISR
 10683  0E39                     _TMR2_ISR:	
 10684                           
 10685                           ;tmr2.c: 169: PIR1bits.TMR2IF = 0;
 10686                           
 10687                           ;incstack = 0
 10688 ;; hardware stack exceeded
 10689                           ; Regs used in _TMR2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10690  0E39  0020               	movlb	0	; select bank0
 10691  0E3A  1090               	bcf	16,1	;volatile
 10692                           
 10693                           ;tmr2.c: 173: TMR2_CallBack();
 10694  0E3B  318F  2737         	fcall	_TMR2_CallBack
 10695  0E3D  0008               	return
 10696  0E3E                     __end_of_TMR2_ISR:	
 10697                           
 10698                           	psect	text70
 10699  0F37                     __ptext70:	
 10700 ;; *************** function _TMR2_CallBack *****************
 10701 ;; Defined at:
 10702 ;;		line 176 in file "mcc_generated_files/tmr2.c"
 10703 ;; Parameters:    Size  Location     Type
 10704 ;;		None
 10705 ;; Auto vars:     Size  Location     Type
 10706 ;;		None
 10707 ;; Return value:  Size  Location     Type
 10708 ;;                  1    wreg      void 
 10709 ;; Registers used:
 10710 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10711 ;; Tracked objects:
 10712 ;;		On entry : 0/0
 10713 ;;		On exit  : 0/0
 10714 ;;		Unchanged: 0/0
 10715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10719 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10720 ;;Total ram usage:        0 bytes
 10721 ;; Hardware stack levels used:    1
 10722 ;; Hardware stack levels required when called:   10
 10723 ;; This function calls:
 10724 ;;		Absolute function
 10725 ;;		_MyTimer2ISR
 10726 ;;		_TMR2_DefaultInterruptHandler
 10727 ;; This function is called by:
 10728 ;;		_TMR2_ISR
 10729 ;; This function uses a non-reentrant model
 10730 ;;
 10731                           
 10732                           
 10733                           ;psect for function _TMR2_CallBack
 10734  0F37                     _TMR2_CallBack:	
 10735                           
 10736                           ;tmr2.c: 180: if(TMR2_InterruptHandler)
 10737                           
 10738                           ;incstack = 0
 10739 ;; hardware stack exceeded
 10740                           ; Regs used in _TMR2_CallBack: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10741  0F37  0020               	movlb	0	; select bank0
 10742  0F38  0857               	movf	_TMR2_InterruptHandler,w
 10743  0F39  0458               	iorwf	_TMR2_InterruptHandler+1,w
 10744  0F3A  1903               	btfsc	3,2
 10745  0F3B  0008               	return
 10746                           
 10747                           ;tmr2.c: 181: {
 10748                           ;tmr2.c: 182: TMR2_InterruptHandler();
 10749  0F3C  0858               	movf	_TMR2_InterruptHandler+1,w
 10750  0F3D  008A               	movwf	10
 10751  0F3E  0857               	movf	_TMR2_InterruptHandler,w
 10752  0F3F  000A               	callw
 10753  0F40  318F               	pagesel	$
 10754  0F41  0008               	return
 10755  0F42                     __end_of_TMR2_CallBack:	
 10756                           
 10757                           	psect	text71
 10758  0107                     __ptext71:	
 10759 ;; *************** function _MyTimer2ISR *****************
 10760 ;; Defined at:
 10761 ;;		line 59 in file "main.c"
 10762 ;; Parameters:    Size  Location     Type
 10763 ;;		None
 10764 ;; Auto vars:     Size  Location     Type
 10765 ;;		None
 10766 ;; Return value:  Size  Location     Type
 10767 ;;                  1    wreg      void 
 10768 ;; Registers used:
 10769 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10770 ;; Tracked objects:
 10771 ;;		On entry : 0/0
 10772 ;;		On exit  : 0/0
 10773 ;;		Unchanged: 0/0
 10774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10777 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10778 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10779 ;;Total ram usage:        4 bytes
 10780 ;; Hardware stack levels used:    1
 10781 ;; Hardware stack levels required when called:    9
 10782 ;; This function calls:
 10783 ;;		_EUSART_Write
 10784 ;;		_I2C_Read1ByteRegister
 10785 ;;		_MATHACC_PIDController
 10786 ;;		_PWM3_LoadDutyValue
 10787 ;;		i1_I2C_Write1ByteRegister
 10788 ;; This function is called by:
 10789 ;;		_main
 10790 ;;		_TMR2_CallBack
 10791 ;; This function uses a non-reentrant model
 10792 ;;
 10793                           
 10794                           
 10795                           ;psect for function _MyTimer2ISR
 10796  0107                     _MyTimer2ISR:	
 10797                           
 10798                           ;main.c: 60: StateToggle = ~StateToggle;
 10799                           
 10800                           ;incstack = 0
 10801 ;; hardware stack exceeded
 10802                           ; Regs used in _MyTimer2ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10803  0107  0020               	movlb	0	; select bank0
 10804  0108  09B2               	comf	_StateToggle,f
 10805                           
 10806                           ;main.c: 61: if(StateToggle) {
 10807  0109  0832               	movf	_StateToggle,w
 10808  010A  1903               	btfsc	3,2
 10809  010B  293A               	goto	i1l6518
 10810                           
 10811                           ;main.c: 62: PWM3_LoadDutyValue(((Angle)>>3)+50);
 10812  010C  0860               	movf	_Angle,w
 10813  010D  00C6               	movwf	??_MyTimer2ISR
 10814  010E  3003               	movlw	3
 10815  010F                     u417_25:	
 10816  010F  36C6               	lsrf	??_MyTimer2ISR,f
 10817  0110  0B89               	decfsz	9,f
 10818  0111  290F               	goto	u417_25
 10819  0112  0846               	movf	??_MyTimer2ISR,w
 10820  0113  3E32               	addlw	50
 10821  0114  00F0               	movwf	PWM3_LoadDutyValue@dutyValue
 10822  0115  3000               	movlw	0
 10823  0116  1803               	skipnc
 10824  0117  3001               	movlw	1
 10825  0118  00F1               	movwf	PWM3_LoadDutyValue@dutyValue+1
 10826  0119  3187  2798  3181   	fcall	_PWM3_LoadDutyValue
 10827                           
 10828                           ;main.c: 64: G -= I2C_Read1ByteRegister(0x68, 0x47);
 10829  011C  3047               	movlw	71
 10830  011D  0020               	movlb	0	; select bank0
 10831  011E  00C6               	movwf	??_MyTimer2ISR
 10832  011F  0846               	movf	??_MyTimer2ISR,w
 10833  0120  00C2               	movwf	I2C_Read1ByteRegister@reg
 10834  0121  3068               	movlw	104
 10835  0122  3184  24CC  3181   	fcall	_I2C_Read1ByteRegister
 10836  0125  0020               	movlb	0	; select bank0
 10837  0126  00C7               	movwf	??_MyTimer2ISR+1
 10838  0127  0847               	movf	??_MyTimer2ISR+1,w
 10839  0128  02B4               	subwf	_G,f
 10840                           
 10841                           ;main.c: 66: MATHACC_PIDController(Angle,G);
 10842  0129  0860               	movf	_Angle,w
 10843  012A  00C6               	movwf	??_MyTimer2ISR
 10844  012B  01C7               	clrf	??_MyTimer2ISR+1
 10845  012C  0846               	movf	??_MyTimer2ISR,w
 10846  012D  00F0               	movwf	MATHACC_PIDController@setpoint
 10847  012E  0847               	movf	??_MyTimer2ISR+1,w
 10848  012F  00F1               	movwf	MATHACC_PIDController@setpoint+1
 10849  0130  0834               	movf	_G,w
 10850  0131  00C8               	movwf	??_MyTimer2ISR+2
 10851  0132  01C9               	clrf	??_MyTimer2ISR+3
 10852  0133  0848               	movf	??_MyTimer2ISR+2,w
 10853  0134  00F2               	movwf	MATHACC_PIDController@input
 10854  0135  0849               	movf	??_MyTimer2ISR+3,w
 10855  0136  00F3               	movwf	MATHACC_PIDController@input+1
 10856  0137  318F  270F         	fcall	_MATHACC_PIDController
 10857                           
 10858                           ;main.c: 67: } else {
 10859  0139  0008               	return
 10860  013A                     i1l6518:	
 10861                           
 10862                           ;main.c: 68: PWM3_LoadDutyValue(((Angle)>>3)+50);
 10863  013A  0020               	movlb	0	; select bank0
 10864  013B  0860               	movf	_Angle,w
 10865  013C  00C6               	movwf	??_MyTimer2ISR
 10866  013D  3003               	movlw	3
 10867  013E                     u418_25:	
 10868  013E  36C6               	lsrf	??_MyTimer2ISR,f
 10869  013F  0B89               	decfsz	9,f
 10870  0140  293E               	goto	u418_25
 10871  0141  0846               	movf	??_MyTimer2ISR,w
 10872  0142  3E32               	addlw	50
 10873  0143  00F0               	movwf	PWM3_LoadDutyValue@dutyValue
 10874  0144  3000               	movlw	0
 10875  0145  1803               	skipnc
 10876  0146  3001               	movlw	1
 10877  0147  00F1               	movwf	PWM3_LoadDutyValue@dutyValue+1
 10878  0148  3187  2798  3181   	fcall	_PWM3_LoadDutyValue
 10879                           
 10880                           ;main.c: 69: if(PORTAbits.RA4) {
 10881  014B  0020               	movlb	0	; select bank0
 10882  014C  1E0C               	btfss	12,4	;volatile
 10883  014D  298C               	goto	i1l6546
 10884                           
 10885                           ;main.c: 70: CptBat = 0;
 10886  014E  01B5               	clrf	_CptBat
 10887                           
 10888                           ;main.c: 71: if(StateBat == S_bat_low) {
 10889  014F  085F               	movf	_StateBat,w
 10890  0150  1D03               	btfss	3,2
 10891  0151  2961               	goto	i1l6530
 10892                           
 10893                           ;main.c: 72: EUSART_Write('B');
 10894  0152  3042               	movlw	66
 10895  0153  318E  2699  3181   	fcall	_EUSART_Write
 10896                           
 10897                           ;main.c: 73: EUSART_Write('1');
 10898  0156  3031               	movlw	49
 10899  0157  318E  2699  3181   	fcall	_EUSART_Write
 10900                           
 10901                           ;main.c: 74: EUSART_Write('s');
 10902  015A  3073               	movlw	115
 10903  015B  318E  2699  3181   	fcall	_EUSART_Write
 10904                           
 10905                           ;main.c: 75: StateBat = S_bat_high;
 10906  015E  0020               	movlb	0	; select bank0
 10907  015F  01DF               	clrf	_StateBat
 10908  0160  0ADF               	incf	_StateBat,f
 10909  0161                     i1l6530:	
 10910                           
 10911                           ;main.c: 76: }
 10912                           ;main.c: 77: if(Validation) {
 10913  0161  0861               	movf	_Validation,w
 10914  0162  1903               	btfsc	3,2
 10915  0163  2978               	goto	i1l6540
 10916                           
 10917                           ;main.c: 79: if(Vitesse > 100) {Vitesse = 100;}
 10918  0164  3065               	movlw	101
 10919  0165  0233               	subwf	_Vitesse,w
 10920  0166  1C03               	skipc
 10921  0167  296C               	goto	i1l6536
 10922  0168  3064               	movlw	100
 10923  0169  00C6               	movwf	??_MyTimer2ISR
 10924  016A  0846               	movf	??_MyTimer2ISR,w
 10925  016B  00B3               	movwf	_Vitesse
 10926  016C                     i1l6536:	
 10927                           
 10928                           ;main.c: 80: I2C_Write1ByteRegister(0x40, Vitesse, 0);
 10929  016C  0833               	movf	_Vitesse,w
 10930  016D  00C6               	movwf	??_MyTimer2ISR
 10931  016E  0846               	movf	??_MyTimer2ISR,w
 10932  016F  00C2               	movwf	i1I2C_Write1ByteRegister@reg
 10933  0170  01C3               	clrf	i1I2C_Write1ByteRegister@data
 10934  0171  3040               	movlw	64
 10935  0172  3184  24FE         	fcall	i1_I2C_Write1ByteRegister
 10936                           
 10937                           ;main.c: 82: Validation--;
 10938  0174  3001               	movlw	1
 10939  0175  0020               	movlb	0	; select bank0
 10940  0176  02E1               	subwf	_Validation,f
 10941                           
 10942                           ;main.c: 83: } else {
 10943  0177  0008               	return
 10944  0178                     i1l6540:	
 10945                           
 10946                           ;main.c: 84: CptBat++;
 10947  0178  3001               	movlw	1
 10948  0179  00C6               	movwf	??_MyTimer2ISR
 10949  017A  0846               	movf	??_MyTimer2ISR,w
 10950  017B  07B5               	addwf	_CptBat,f
 10951                           
 10952                           ;main.c: 85: if(CptBat > 100) {
 10953  017C  3065               	movlw	101
 10954  017D  0235               	subwf	_CptBat,w
 10955  017E  1C03               	skipc
 10956  017F  2982               	goto	i1l6544
 10957                           
 10958                           ;main.c: 86: do { LATCbits.LATC5 = 0; } while(0);
 10959  0180  0022               	movlb	2	; select bank2
 10960  0181  128E               	bcf	14,5	;volatile
 10961  0182                     i1l6544:	
 10962                           
 10963                           ;main.c: 87: }
 10964                           ;main.c: 89: I2C_Write1ByteRegister(0x40, 101, 0);
 10965  0182  3065               	movlw	101
 10966  0183  0020               	movlb	0	; select bank0
 10967  0184  00C6               	movwf	??_MyTimer2ISR
 10968  0185  0846               	movf	??_MyTimer2ISR,w
 10969  0186  00C2               	movwf	i1I2C_Write1ByteRegister@reg
 10970  0187  01C3               	clrf	i1I2C_Write1ByteRegister@data
 10971  0188  3040               	movlw	64
 10972  0189  3184  24FE         	fcall	i1_I2C_Write1ByteRegister
 10973                           
 10974                           ;main.c: 91: }
 10975                           ;main.c: 92: } else {
 10976  018B  0008               	return
 10977  018C                     i1l6546:	
 10978                           
 10979                           ;main.c: 93: if(StateBat == S_bat_high) {
 10980  018C  0020               	movlb	0	; select bank0
 10981  018D  035F               	decf	_StateBat,w
 10982  018E  1D03               	btfss	3,2
 10983  018F  299E               	goto	i1l6552
 10984                           
 10985                           ;main.c: 94: EUSART_Write('B');
 10986  0190  3042               	movlw	66
 10987  0191  318E  2699  3181   	fcall	_EUSART_Write
 10988                           
 10989                           ;main.c: 95: EUSART_Write('0');
 10990  0194  3030               	movlw	48
 10991  0195  318E  2699  3181   	fcall	_EUSART_Write
 10992                           
 10993                           ;main.c: 96: EUSART_Write('r');
 10994  0198  3072               	movlw	114
 10995  0199  318E  2699  3181   	fcall	_EUSART_Write
 10996                           
 10997                           ;main.c: 97: StateBat = S_bat_low;
 10998  019C  0020               	movlb	0	; select bank0
 10999  019D  01DF               	clrf	_StateBat
 11000  019E                     i1l6552:	
 11001                           
 11002                           ;main.c: 98: }
 11003                           ;main.c: 100: I2C_Write1ByteRegister(0x40, 101, 0);
 11004  019E  3065               	movlw	101
 11005  019F  00C6               	movwf	??_MyTimer2ISR
 11006  01A0  0846               	movf	??_MyTimer2ISR,w
 11007  01A1  00C2               	movwf	i1I2C_Write1ByteRegister@reg
 11008  01A2  01C3               	clrf	i1I2C_Write1ByteRegister@data
 11009  01A3  3040               	movlw	64
 11010  01A4  3184  24FE         	fcall	i1_I2C_Write1ByteRegister
 11011  01A6  0008               	return
 11012  01A7                     __end_of_MyTimer2ISR:	
 11013                           
 11014                           	psect	text72
 11015  0DA5                     __ptext72:	
 11016 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 11017 ;; Defined at:
 11018 ;;		line 190 in file "mcc_generated_files/tmr2.c"
 11019 ;; Parameters:    Size  Location     Type
 11020 ;;		None
 11021 ;; Auto vars:     Size  Location     Type
 11022 ;;		None
 11023 ;; Return value:  Size  Location     Type
 11024 ;;                  1    wreg      void 
 11025 ;; Registers used:
 11026 ;;		None
 11027 ;; Tracked objects:
 11028 ;;		On entry : 0/0
 11029 ;;		On exit  : 0/0
 11030 ;;		Unchanged: 0/0
 11031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11036 ;;Total ram usage:        0 bytes
 11037 ;; Hardware stack levels used:    1
 11038 ;; This function calls:
 11039 ;;		Nothing
 11040 ;; This function is called by:
 11041 ;;		_TMR2_Initialize
 11042 ;;		_TMR2_CallBack
 11043 ;; This function uses a non-reentrant model
 11044 ;;
 11045                           
 11046                           
 11047                           ;psect for function _TMR2_DefaultInterruptHandler
 11048  0DA5                     _TMR2_DefaultInterruptHandler:	
 11049                           
 11050                           ;incstack = 0
 11051                           ; Regs used in _TMR2_DefaultInterruptHandler: []
 11052  0DA5  0008               	return
 11053  0DA6                     __end_of_TMR2_DefaultInterruptHandler:	
 11054                           
 11055                           	psect	text73
 11056  04FE                     __ptext73:	
 11057 ;; *************** function i1_I2C_Write1ByteRegister *****************
 11058 ;; Defined at:
 11059 ;;		line 91 in file "mcc_generated_files/examples/i2c_master_example.c"
 11060 ;; Parameters:    Size  Location     Type
 11061 ;;  address         1    wreg     unsigned char 
 11062 ;;  reg             1    5[BANK0 ] unsigned char 
 11063 ;;  data            1    6[BANK0 ] unsigned char 
 11064 ;; Auto vars:     Size  Location     Type
 11065 ;;  address         1    8[BANK0 ] unsigned char 
 11066 ;; Return value:  Size  Location     Type
 11067 ;;                  1    wreg      void 
 11068 ;; Registers used:
 11069 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11070 ;; Tracked objects:
 11071 ;;		On entry : 0/0
 11072 ;;		On exit  : 0/0
 11073 ;;		Unchanged: 0/0
 11074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11075 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11076 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11077 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11078 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11079 ;;Total ram usage:        4 bytes
 11080 ;; Hardware stack levels used:    1
 11081 ;; Hardware stack levels required when called:    8
 11082 ;; This function calls:
 11083 ;;		i1_I2C_Close
 11084 ;;		i1_I2C_MasterWrite
 11085 ;;		i1_I2C_Open
 11086 ;;		i1_I2C_SetAddressNackCallback
 11087 ;;		i1_I2C_SetBuffer
 11088 ;;		i1_I2C_SetDataCompleteCallback
 11089 ;; This function is called by:
 11090 ;;		_MyTimer2ISR
 11091 ;; This function uses a non-reentrant model
 11092 ;;
 11093                           
 11094                           
 11095                           ;psect for function i1_I2C_Write1ByteRegister
 11096  04FE                     i1_I2C_Write1ByteRegister:	
 11097                           
 11098                           ;incstack = 0
 11099 ;; hardware stack exceeded
 11100                           ; Regs used in i1_I2C_Write1ByteRegister: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11101                           ;i1I2C_Write1ByteRegister@address stored from wreg
 11102  04FE  0020               	movlb	0	; select bank0
 11103  04FF  00C5               	movwf	i1I2C_Write1ByteRegister@address
 11104  0500                     i1l6476:	
 11105                           ;i2c_master_example.c: 93: while(!I2C_Open(address));
 11106                           
 11107  0500  0020               	movlb	0	; select bank0
 11108  0501  0845               	movf	i1I2C_Write1ByteRegister@address,w
 11109  0502  3183  23FB  3184   	fcall	i1_I2C_Open
 11110  0505  3A00               	xorlw	0
 11111  0506  1903               	skipnz
 11112  0507  2D00               	goto	i1l6476
 11113                           
 11114                           ;i2c_master_example.c: 94: I2C_SetDataCompleteCallback(wr1RegCompleteHandler,&data);
 11115  0508  3040               	movlw	low _wr1RegCompleteHandler
 11116  0509  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 11117  050A  3007               	movlw	high _wr1RegCompleteHandler
 11118  050B  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 11119  050C  3043               	movlw	(low (i1I2C_Write1ByteRegister@data| 0))& (0+255)
 11120  050D  0020               	movlb	0	; select bank0
 11121  050E  00C4               	movwf	??i1_I2C_Write1ByteRegister
 11122  050F  0844               	movf	??i1_I2C_Write1ByteRegister,w
 11123  0510  00F7               	movwf	i1I2C_SetDataCompleteCallback@ptr
 11124  0511  318F  2758  3184   	fcall	i1_I2C_SetDataCompleteCallback
 11125                           
 11126                           ;i2c_master_example.c: 95: I2C_SetBuffer(&reg,1);
 11127  0514  3001               	movlw	1
 11128  0515  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 11129  0516  3000               	movlw	0
 11130  0517  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 11131  0518  3042               	movlw	(low (i1I2C_Write1ByteRegister@reg| 0))& (0+255)
 11132  0519  318F  27AE  3184   	fcall	i1_I2C_SetBuffer
 11133                           
 11134                           ;i2c_master_example.c: 96: I2C_SetAddressNackCallback((0),(0));
 11135  051C  3000               	movlw	0
 11136  051D  00F5               	movwf	i1I2C_SetAddressNackCallback@cb
 11137  051E  00F6               	movwf	i1I2C_SetAddressNackCallback@cb+1
 11138  051F  01F7               	clrf	i1I2C_SetAddressNackCallback@ptr
 11139  0520  318F  2770  3184   	fcall	i1_I2C_SetAddressNackCallback
 11140                           
 11141                           ;i2c_master_example.c: 97: I2C_MasterWrite();
 11142  0523  318E  2616  3184   	fcall	i1_I2C_MasterWrite
 11143  0526                     i1l6486:	
 11144                           ;i2c_master_example.c: 98: while(I2C_BUSY == I2C_Close());
 11145                           
 11146  0526  3186  26F9  3184   	fcall	i1_I2C_Close
 11147  0529  3A01               	xorlw	1
 11148  052A  1D03               	btfss	3,2
 11149  052B  0008               	return
 11150  052C  2D26               	goto	i1l6486
 11151  052D                     __end_ofi1_I2C_Write1ByteRegister:	
 11152                           
 11153                           	psect	text74
 11154  0798                     __ptext74:	
 11155 ;; *************** function _PWM3_LoadDutyValue *****************
 11156 ;; Defined at:
 11157 ;;		line 74 in file "mcc_generated_files/pwm3.c"
 11158 ;; Parameters:    Size  Location     Type
 11159 ;;  dutyValue       2    0[COMMON] unsigned int 
 11160 ;; Auto vars:     Size  Location     Type
 11161 ;;		None
 11162 ;; Return value:  Size  Location     Type
 11163 ;;                  1    wreg      void 
 11164 ;; Registers used:
 11165 ;;		wreg, status,2, status,0
 11166 ;; Tracked objects:
 11167 ;;		On entry : 0/0
 11168 ;;		On exit  : 0/0
 11169 ;;		Unchanged: 0/0
 11170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11171 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11173 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11174 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11175 ;;Total ram usage:        4 bytes
 11176 ;; Hardware stack levels used:    1
 11177 ;; This function calls:
 11178 ;;		Nothing
 11179 ;; This function is called by:
 11180 ;;		_MyTimer2ISR
 11181 ;; This function uses a non-reentrant model
 11182 ;;
 11183                           
 11184                           
 11185                           ;psect for function _PWM3_LoadDutyValue
 11186  0798                     _PWM3_LoadDutyValue:	
 11187                           
 11188                           ;pwm3.c: 77: PWM3DCH = (dutyValue & 0x03FC)>>2;
 11189                           
 11190                           ;incstack = 0
 11191                           ; Regs used in _PWM3_LoadDutyValue: [wreg+status,2+status,0]
 11192  0798  0871               	movf	PWM3_LoadDutyValue@dutyValue+1,w
 11193  0799  00F3               	movwf	??_PWM3_LoadDutyValue+1
 11194  079A  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
 11195  079B  00F2               	movwf	??_PWM3_LoadDutyValue
 11196  079C  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
 11197  079D  0CF2               	rrf	??_PWM3_LoadDutyValue,f
 11198  079E  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
 11199  079F  0CF2               	rrf	??_PWM3_LoadDutyValue,f
 11200  07A0  0872               	movf	??_PWM3_LoadDutyValue,w
 11201  07A1  002C               	movlb	12	; select bank12
 11202  07A2  0098               	movwf	24	;volatile
 11203                           
 11204                           ;pwm3.c: 80: PWM3DCL = (dutyValue & 0x0003)<<6;
 11205  07A3  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
 11206  07A4  3903               	andlw	3
 11207  07A5  00F2               	movwf	??_PWM3_LoadDutyValue
 11208  07A6  3005               	movlw	5
 11209  07A7                     u135_25:	
 11210  07A7  35F2               	lslf	??_PWM3_LoadDutyValue,f
 11211  07A8  3EFF               	addlw	-1
 11212  07A9  1D03               	skipz
 11213  07AA  2FA7               	goto	u135_25
 11214  07AB  3572               	lslf	??_PWM3_LoadDutyValue,w
 11215  07AC  0097               	movwf	23	;volatile
 11216  07AD  0008               	return
 11217  07AE                     __end_of_PWM3_LoadDutyValue:	
 11218                           
 11219                           	psect	text75
 11220  0F0F                     __ptext75:	
 11221 ;; *************** function _MATHACC_PIDController *****************
 11222 ;; Defined at:
 11223 ;;		line 78 in file "mcc_generated_files/mathacc.c"
 11224 ;; Parameters:    Size  Location     Type
 11225 ;;  setpoint        2    0[COMMON] int 
 11226 ;;  input           2    2[COMMON] int 
 11227 ;; Auto vars:     Size  Location     Type
 11228 ;;		None
 11229 ;; Return value:  Size  Location     Type
 11230 ;;                  1    wreg      void 
 11231 ;; Registers used:
 11232 ;;		wreg, status,2
 11233 ;; Tracked objects:
 11234 ;;		On entry : 0/0
 11235 ;;		On exit  : 0/0
 11236 ;;		Unchanged: 0/0
 11237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11238 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11241 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11242 ;;Total ram usage:        4 bytes
 11243 ;; Hardware stack levels used:    1
 11244 ;; This function calls:
 11245 ;;		Nothing
 11246 ;; This function is called by:
 11247 ;;		_MyTimer2ISR
 11248 ;; This function uses a non-reentrant model
 11249 ;;
 11250                           
 11251                           
 11252                           ;psect for function _MATHACC_PIDController
 11253  0F0F                     _MATHACC_PIDController:	
 11254                           
 11255                           ;mathacc.c: 80: PID1SETH = (uint8_t) (((uint16_t)setpoint & 0xFF00) >> 8);
 11256                           
 11257                           ;incstack = 0
 11258                           ; Regs used in _MATHACC_PIDController: [wreg+status,2]
 11259  0F0F  0871               	movf	MATHACC_PIDController@setpoint+1,w
 11260  0F10  002B               	movlb	11	; select bank11
 11261  0F11  008D               	movwf	13	;volatile
 11262                           
 11263                           ;mathacc.c: 81: PID1SETL = (uint8_t) (setpoint & 0x00FF);
 11264  0F12  0870               	movf	MATHACC_PIDController@setpoint,w
 11265  0F13  008C               	movwf	12	;volatile
 11266                           
 11267                           ;mathacc.c: 82: PID1INH = (uint8_t) (((uint16_t)input & 0xFF00) >> 8);
 11268  0F14  0873               	movf	MATHACC_PIDController@input+1,w
 11269  0F15  008F               	movwf	15	;volatile
 11270                           
 11271                           ;mathacc.c: 83: PID1INL = (uint8_t) (input & 0x00FF);
 11272  0F16  0872               	movf	MATHACC_PIDController@input,w
 11273  0F17  008E               	movwf	14	;volatile
 11274  0F18  0008               	return
 11275  0F19                     __end_of_MATHACC_PIDController:	
 11276                           
 11277                           	psect	text76
 11278  04CC                     __ptext76:	
 11279 ;; *************** function _I2C_Read1ByteRegister *****************
 11280 ;; Defined at:
 11281 ;;		line 63 in file "mcc_generated_files/examples/i2c_master_example.c"
 11282 ;; Parameters:    Size  Location     Type
 11283 ;;  address         1    wreg     unsigned char 
 11284 ;;  reg             1    5[BANK0 ] unsigned char 
 11285 ;; Auto vars:     Size  Location     Type
 11286 ;;  address         1    7[BANK0 ] unsigned char 
 11287 ;;  returnValue     1    8[BANK0 ] unsigned char 
 11288 ;; Return value:  Size  Location     Type
 11289 ;;                  1    wreg      unsigned char 
 11290 ;; Registers used:
 11291 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11292 ;; Tracked objects:
 11293 ;;		On entry : 0/0
 11294 ;;		On exit  : 0/0
 11295 ;;		Unchanged: 0/0
 11296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11297 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11298 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11299 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11300 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11301 ;;Total ram usage:        4 bytes
 11302 ;; Hardware stack levels used:    1
 11303 ;; Hardware stack levels required when called:    8
 11304 ;; This function calls:
 11305 ;;		i1_I2C_Close
 11306 ;;		i1_I2C_MasterWrite
 11307 ;;		i1_I2C_Open
 11308 ;;		i1_I2C_SetAddressNackCallback
 11309 ;;		i1_I2C_SetBuffer
 11310 ;;		i1_I2C_SetDataCompleteCallback
 11311 ;; This function is called by:
 11312 ;;		_MyTimer2ISR
 11313 ;; This function uses a non-reentrant model
 11314 ;;
 11315                           
 11316                           
 11317                           ;psect for function _I2C_Read1ByteRegister
 11318  04CC                     _I2C_Read1ByteRegister:	
 11319                           
 11320                           ;incstack = 0
 11321 ;; hardware stack exceeded
 11322                           ; Regs used in _I2C_Read1ByteRegister: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11323                           ;I2C_Read1ByteRegister@address stored from wreg
 11324  04CC  0020               	movlb	0	; select bank0
 11325  04CD  00C4               	movwf	I2C_Read1ByteRegister@address
 11326                           
 11327                           ;i2c_master_example.c: 65: uint8_t returnValue = 0x00;
 11328  04CE  01C5               	clrf	I2C_Read1ByteRegister@returnValue
 11329  04CF                     i1l6450:	
 11330                           ;i2c_master_example.c: 67: while(!I2C_Open(address));
 11331                           
 11332  04CF  0020               	movlb	0	; select bank0
 11333  04D0  0844               	movf	I2C_Read1ByteRegister@address,w
 11334  04D1  3183  23FB  3184   	fcall	i1_I2C_Open
 11335  04D4  3A00               	xorlw	0
 11336  04D5  1903               	skipnz
 11337  04D6  2CCF               	goto	i1l6450
 11338                           
 11339                           ;i2c_master_example.c: 68: I2C_SetDataCompleteCallback(rd1RegCompleteHandler,&returnValu
      +                          e);
 11340  04D7  306C               	movlw	low _rd1RegCompleteHandler
 11341  04D8  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 11342  04D9  3007               	movlw	high _rd1RegCompleteHandler
 11343  04DA  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 11344  04DB  3045               	movlw	(low (I2C_Read1ByteRegister@returnValue| 0))& (0+255)
 11345  04DC  0020               	movlb	0	; select bank0
 11346  04DD  00C3               	movwf	??_I2C_Read1ByteRegister
 11347  04DE  0843               	movf	??_I2C_Read1ByteRegister,w
 11348  04DF  00F7               	movwf	i1I2C_SetDataCompleteCallback@ptr
 11349  04E0  318F  2758  3184   	fcall	i1_I2C_SetDataCompleteCallback
 11350                           
 11351                           ;i2c_master_example.c: 69: I2C_SetBuffer(&reg,1);
 11352  04E3  3001               	movlw	1
 11353  04E4  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 11354  04E5  3000               	movlw	0
 11355  04E6  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 11356  04E7  3042               	movlw	(low (I2C_Read1ByteRegister@reg| 0))& (0+255)
 11357  04E8  318F  27AE  3184   	fcall	i1_I2C_SetBuffer
 11358                           
 11359                           ;i2c_master_example.c: 70: I2C_SetAddressNackCallback((0),(0));
 11360  04EB  3000               	movlw	0
 11361  04EC  00F5               	movwf	i1I2C_SetAddressNackCallback@cb
 11362  04ED  00F6               	movwf	i1I2C_SetAddressNackCallback@cb+1
 11363  04EE  01F7               	clrf	i1I2C_SetAddressNackCallback@ptr
 11364  04EF  318F  2770  3184   	fcall	i1_I2C_SetAddressNackCallback
 11365                           
 11366                           ;i2c_master_example.c: 71: I2C_MasterWrite();
 11367  04F2  318E  2616  3184   	fcall	i1_I2C_MasterWrite
 11368  04F5                     i1l6460:	
 11369                           ;i2c_master_example.c: 72: while(I2C_BUSY == I2C_Close());
 11370                           
 11371  04F5  3186  26F9  3184   	fcall	i1_I2C_Close
 11372  04F8  3A01               	xorlw	1
 11373  04F9  1903               	skipnz
 11374  04FA  2CF5               	goto	i1l6460
 11375                           
 11376                           ;i2c_master_example.c: 74: return returnValue;
 11377  04FB  0020               	movlb	0	; select bank0
 11378  04FC  0845               	movf	I2C_Read1ByteRegister@returnValue,w
 11379  04FD  0008               	return
 11380  04FE                     __end_of_I2C_Read1ByteRegister:	
 11381                           
 11382                           	psect	text77
 11383  0F70                     __ptext77:	
 11384 ;; *************** function i1_I2C_SetAddressNackCallback *****************
 11385 ;; Defined at:
 11386 ;;		line 283 in file "mcc_generated_files/i2c_master.c"
 11387 ;; Parameters:    Size  Location     Type
 11388 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
 11389 ;;		 -> Absolute function(1), 
 11390 ;;  ptr             1    7[COMMON] PTR void 
 11391 ;;		 -> NULL(0), 
 11392 ;; Auto vars:     Size  Location     Type
 11393 ;;		None
 11394 ;; Return value:  Size  Location     Type
 11395 ;;                  1    wreg      void 
 11396 ;; Registers used:
 11397 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11398 ;; Tracked objects:
 11399 ;;		On entry : 0/0
 11400 ;;		On exit  : 0/0
 11401 ;;		Unchanged: 0/0
 11402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11403 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11405 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11406 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11407 ;;Total ram usage:        4 bytes
 11408 ;; Hardware stack levels used:    1
 11409 ;; Hardware stack levels required when called:    1
 11410 ;; This function calls:
 11411 ;;		i1_I2C_SetCallback
 11412 ;; This function is called by:
 11413 ;;		_I2C_Read1ByteRegister
 11414 ;;		i1_I2C_Write1ByteRegister
 11415 ;; This function uses a non-reentrant model
 11416 ;;
 11417                           
 11418                           
 11419                           ;psect for function i1_I2C_SetAddressNackCallback
 11420  0F70                     i1_I2C_SetAddressNackCallback:	
 11421                           
 11422                           ;i2c_master.c: 285: I2C_SetCallback(I2C_ADDR_NACK, cb, ptr);
 11423                           
 11424                           ;incstack = 0
 11425                           ; Regs used in i1_I2C_SetAddressNackCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 11426  0F70  0876               	movf	i1I2C_SetAddressNackCallback@cb+1,w
 11427  0F71  00F1               	movwf	i1I2C_SetCallback@cb+1
 11428  0F72  0875               	movf	i1I2C_SetAddressNackCallback@cb,w
 11429  0F73  00F0               	movwf	i1I2C_SetCallback@cb
 11430  0F74  0877               	movf	i1I2C_SetAddressNackCallback@ptr,w
 11431  0F75  00F8               	movwf	??i1_I2C_SetAddressNackCallback
 11432  0F76  0878               	movf	??i1_I2C_SetAddressNackCallback,w
 11433  0F77  00F2               	movwf	i1I2C_SetCallback@ptr
 11434  0F78  3002               	movlw	2
 11435  0F79  3186  261D         	fcall	i1_I2C_SetCallback
 11436  0F7B  0008               	return
 11437  0F7C                     __end_ofi1_I2C_SetAddressNackCallback:	
 11438                           
 11439                           	psect	text78
 11440  03FB                     __ptext78:	
 11441 ;; *************** function i1_I2C_Open *****************
 11442 ;; Defined at:
 11443 ;;		line 176 in file "mcc_generated_files/i2c_master.c"
 11444 ;; Parameters:    Size  Location     Type
 11445 ;;  address         1    wreg     unsigned char 
 11446 ;; Auto vars:     Size  Location     Type
 11447 ;;  address         1    1[COMMON] unsigned char 
 11448 ;;  I2C_Open        1    2[COMMON] enum E92
 11449 ;; Return value:  Size  Location     Type
 11450 ;;                  1    wreg      enum E92
 11451 ;; Registers used:
 11452 ;;		wreg, status,2, status,0, pclath, cstack
 11453 ;; Tracked objects:
 11454 ;;		On entry : 0/0
 11455 ;;		On exit  : 0/0
 11456 ;;		Unchanged: 0/0
 11457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11459 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11460 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11461 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11462 ;;Total ram usage:        3 bytes
 11463 ;; Hardware stack levels used:    1
 11464 ;; Hardware stack levels required when called:    1
 11465 ;; This function calls:
 11466 ;;		i1_I2C_MasterClearIrq
 11467 ;;		i1_I2C_MasterOpen
 11468 ;; This function is called by:
 11469 ;;		_I2C_Read1ByteRegister
 11470 ;;		i1_I2C_Write1ByteRegister
 11471 ;; This function uses a non-reentrant model
 11472 ;;
 11473                           
 11474                           
 11475                           ;psect for function i1_I2C_Open
 11476  03FB                     i1_I2C_Open:	
 11477                           
 11478                           ;incstack = 0
 11479                           ; Regs used in i1_I2C_Open: [wreg+status,2+status,0+pclath+cstack]
 11480                           ;i1I2C_Open@address stored from wreg
 11481  03FB  00F1               	movwf	i1I2C_Open@address
 11482                           
 11483                           ;i2c_master.c: 178: i2c_error_t returnValue = I2C_BUSY;
 11484  03FC  01F2               	clrf	i1I2C_Open@returnValue
 11485  03FD  0AF2               	incf	i1I2C_Open@returnValue,f
 11486                           
 11487                           ;i2c_master.c: 180: if(!I2C_Status.inUse)
 11488  03FE  0021               	movlb	1	; select bank1
 11489  03FF  193C               	btfsc	(_I2C_Status^(0+128)+28),2
 11490  0400  2C30               	goto	i1l335
 11491                           
 11492                           ;i2c_master.c: 181: {
 11493                           ;i2c_master.c: 182: I2C_Status.address = address;
 11494  0401  0871               	movf	i1I2C_Open@address,w
 11495  0402  00F0               	movwf	??i1_I2C_Open
 11496  0403  0870               	movf	??i1_I2C_Open,w
 11497  0404  00B6               	movwf	(_I2C_Status^(0+128)+22)
 11498                           
 11499                           ;i2c_master.c: 183: I2C_Status.busy = 0;
 11500  0405  10BC               	bcf	(_I2C_Status^(0+128)+28),1
 11501                           
 11502                           ;i2c_master.c: 184: I2C_Status.inUse = 1;
 11503  0406  153C               	bsf	(_I2C_Status^(0+128)+28),2
 11504                           
 11505                           ;i2c_master.c: 185: I2C_Status.addressNackCheck = 0;
 11506  0407  103C               	bcf	(_I2C_Status^(0+128)+28),0
 11507                           
 11508                           ;i2c_master.c: 186: I2C_Status.state = I2C_RESET;
 11509  0408  300E               	movlw	14
 11510  0409  00F0               	movwf	??i1_I2C_Open
 11511  040A  0870               	movf	??i1_I2C_Open,w
 11512  040B  00BA               	movwf	(_I2C_Status^(0+128)+26)
 11513                           
 11514                           ;i2c_master.c: 187: I2C_Status.time_out_value = 500;
 11515  040C  30F4               	movlw	244
 11516  040D  00B4               	movwf	(_I2C_Status^(0+128)+20)
 11517  040E  3001               	movlw	1
 11518  040F  00B5               	movwf	(_I2C_Status^(0+128)+21)
 11519                           
 11520                           ;i2c_master.c: 188: I2C_Status.bufferFree = 1;
 11521  0410  15BC               	bsf	(_I2C_Status^(0+128)+28),3
 11522                           
 11523                           ;i2c_master.c: 191: I2C_Status.callbackTable[I2C_DATA_COMPLETE]=I2C_CallbackReturnStop;
 11524  0411  304F               	movlw	low _I2C_CallbackReturnStop
 11525  0412  00A0               	movwf	_I2C_Status^(0+128)
 11526  0413  300E               	movlw	high _I2C_CallbackReturnStop
 11527  0414  00A1               	movwf	(_I2C_Status^(0+128)+1)
 11528                           
 11529                           ;i2c_master.c: 192: I2C_Status.callbackPayload[I2C_DATA_COMPLETE] = (0);
 11530  0415  01AC               	clrf	(low ((_I2C_Status| 0+12)))^(0+128)
 11531                           
 11532                           ;i2c_master.c: 193: I2C_Status.callbackTable[I2C_WRITE_COLLISION]=I2C_CallbackReturnStop
      +                          ;
 11533  0416  304F               	movlw	low _I2C_CallbackReturnStop
 11534  0417  00A2               	movwf	(low ((_I2C_Status| 0+2)))^(0+128)
 11535  0418  300E               	movlw	high _I2C_CallbackReturnStop
 11536  0419  00A3               	movwf	((low ((_I2C_Status| 0+2)))^(0+128)+1)
 11537                           
 11538                           ;i2c_master.c: 194: I2C_Status.callbackPayload[I2C_WRITE_COLLISION] = (0);
 11539  041A  01AD               	clrf	(low ((_I2C_Status| 0+13)))^(0+128)
 11540                           
 11541                           ;i2c_master.c: 195: I2C_Status.callbackTable[I2C_ADDR_NACK]=I2C_CallbackReturnStop;
 11542  041B  304F               	movlw	low _I2C_CallbackReturnStop
 11543  041C  00A4               	movwf	(low ((_I2C_Status| 0+4)))^(0+128)
 11544  041D  300E               	movlw	high _I2C_CallbackReturnStop
 11545  041E  00A5               	movwf	((low ((_I2C_Status| 0+4)))^(0+128)+1)
 11546                           
 11547                           ;i2c_master.c: 196: I2C_Status.callbackPayload[I2C_ADDR_NACK] = (0);
 11548  041F  01AE               	clrf	(low ((_I2C_Status| 0+14)))^(0+128)
 11549                           
 11550                           ;i2c_master.c: 197: I2C_Status.callbackTable[I2C_DATA_NACK]=I2C_CallbackReturnStop;
 11551  0420  304F               	movlw	low _I2C_CallbackReturnStop
 11552  0421  00A6               	movwf	(low ((_I2C_Status| 0+6)))^(0+128)
 11553  0422  300E               	movlw	high _I2C_CallbackReturnStop
 11554  0423  00A7               	movwf	((low ((_I2C_Status| 0+6)))^(0+128)+1)
 11555                           
 11556                           ;i2c_master.c: 198: I2C_Status.callbackPayload[I2C_DATA_NACK] = (0);
 11557  0424  01AF               	clrf	(low ((_I2C_Status| 0+15)))^(0+128)
 11558                           
 11559                           ;i2c_master.c: 199: I2C_Status.callbackTable[I2C_TIMEOUT]=I2C_CallbackReturnReset;
 11560  0425  3055               	movlw	low _I2C_CallbackReturnReset
 11561  0426  00A8               	movwf	(low ((_I2C_Status| 0+8)))^(0+128)
 11562  0427  300E               	movlw	high _I2C_CallbackReturnReset
 11563  0428  00A9               	movwf	((low ((_I2C_Status| 0+8)))^(0+128)+1)
 11564                           
 11565                           ;i2c_master.c: 200: I2C_Status.callbackPayload[I2C_TIMEOUT] = (0);
 11566  0429  01B0               	clrf	(low ((_I2C_Status| 0+16)))^(0+128)
 11567                           
 11568                           ;i2c_master.c: 202: I2C_MasterClearIrq();
 11569  042A  318D  25AE  3183   	fcall	i1_I2C_MasterClearIrq
 11570                           
 11571                           ;i2c_master.c: 203: I2C_MasterOpen();
 11572  042D  318F  2764         	fcall	i1_I2C_MasterOpen
 11573                           
 11574                           ;i2c_master.c: 204: returnValue = I2C_NOERR;
 11575  042F  01F2               	clrf	i1I2C_Open@returnValue
 11576  0430                     i1l335:	
 11577                           
 11578                           ;i2c_master.c: 205: }
 11579                           ;i2c_master.c: 206: return returnValue;
 11580  0430  0872               	movf	i1I2C_Open@returnValue,w
 11581  0431  0008               	return
 11582  0432                     __end_ofi1_I2C_Open:	
 11583                           
 11584                           	psect	text79
 11585  0F64                     __ptext79:	
 11586 ;; *************** function i1_I2C_MasterOpen *****************
 11587 ;; Defined at:
 11588 ;;		line 543 in file "mcc_generated_files/i2c_master.c"
 11589 ;; Parameters:    Size  Location     Type
 11590 ;;		None
 11591 ;; Auto vars:     Size  Location     Type
 11592 ;;		None
 11593 ;; Return value:  Size  Location     Type
 11594 ;;                  1    wreg      unsigned char 
 11595 ;; Registers used:
 11596 ;;		wreg, status,2
 11597 ;; Tracked objects:
 11598 ;;		On entry : 0/0
 11599 ;;		On exit  : 0/0
 11600 ;;		Unchanged: 0/0
 11601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11605 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11606 ;;Total ram usage:        0 bytes
 11607 ;; Hardware stack levels used:    1
 11608 ;; This function calls:
 11609 ;;		Nothing
 11610 ;; This function is called by:
 11611 ;;		i1_I2C_Open
 11612 ;; This function uses a non-reentrant model
 11613 ;;
 11614                           
 11615                           
 11616                           ;psect for function i1_I2C_MasterOpen
 11617  0F64                     i1_I2C_MasterOpen:	
 11618                           
 11619                           ;i2c_master.c: 545: if(!SSP1CON1bits.SSPEN)
 11620                           
 11621                           ;incstack = 0
 11622                           ; Regs used in i1_I2C_MasterOpen: [wreg+status,2]
 11623  0F64  0024               	movlb	4	; select bank4
 11624  0F65  1A95               	btfsc	21,5	;volatile
 11625  0F66  0008               	return
 11626                           
 11627                           ;i2c_master.c: 546: {
 11628                           ;i2c_master.c: 547: SSP1STAT = 0x80;
 11629  0F67  3080               	movlw	128
 11630  0F68  0094               	movwf	20	;volatile
 11631                           
 11632                           ;i2c_master.c: 548: SSP1CON1 = 0x08;
 11633  0F69  3008               	movlw	8
 11634  0F6A  0095               	movwf	21	;volatile
 11635                           
 11636                           ;i2c_master.c: 549: SSP1CON2 = 0x00;
 11637  0F6B  0196               	clrf	22	;volatile
 11638                           
 11639                           ;i2c_master.c: 550: SSP1ADD = 0x09;
 11640  0F6C  3009               	movlw	9
 11641  0F6D  0092               	movwf	18	;volatile
 11642                           
 11643                           ;i2c_master.c: 551: SSP1CON1bits.SSPEN = 1;
 11644  0F6E  1695               	bsf	21,5	;volatile
 11645                           
 11646                           ;i2c_master.c: 552: return 1;
 11647                           ;	Return value of i1_I2C_MasterOpen is never used
 11648  0F6F  0008               	return
 11649  0F70                     __end_ofi1_I2C_MasterOpen:	
 11650                           ;i2c_master.c: 553: }
 11651                           ;i2c_master.c: 554: return 0;
 11652                           ;	Return value of i1_I2C_MasterOpen is never used
 11653                           
 11654                           
 11655                           	psect	text80
 11656  0E16                     __ptext80:	
 11657 ;; *************** function i1_I2C_MasterWrite *****************
 11658 ;; Defined at:
 11659 ;;		line 251 in file "mcc_generated_files/i2c_master.c"
 11660 ;; Parameters:    Size  Location     Type
 11661 ;;		None
 11662 ;; Auto vars:     Size  Location     Type
 11663 ;;		None
 11664 ;; Return value:  Size  Location     Type
 11665 ;;                  1    wreg      enum E92
 11666 ;; Registers used:
 11667 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11668 ;; Tracked objects:
 11669 ;;		On entry : 0/0
 11670 ;;		On exit  : 0/0
 11671 ;;		Unchanged: 0/0
 11672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11676 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11677 ;;Total ram usage:        0 bytes
 11678 ;; Hardware stack levels used:    1
 11679 ;; Hardware stack levels required when called:    7
 11680 ;; This function calls:
 11681 ;;		i1_I2C_MasterOperation
 11682 ;; This function is called by:
 11683 ;;		_I2C_Read1ByteRegister
 11684 ;;		i1_I2C_Write1ByteRegister
 11685 ;; This function uses a non-reentrant model
 11686 ;;
 11687                           
 11688                           
 11689                           ;psect for function i1_I2C_MasterWrite
 11690  0E16                     i1_I2C_MasterWrite:	
 11691                           
 11692                           ;i2c_master.c: 253: return I2C_MasterOperation(0);
 11693                           ;	Return value of i1_I2C_MasterWrite is never used
 11694                           
 11695                           ;incstack = 0
 11696 ;; hardware stack exceeded
 11697                           ; Regs used in i1_I2C_MasterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11698  0E16  3000               	movlw	0
 11699  0E17  3186  26A2         	fcall	i1_I2C_MasterOperation
 11700  0E19  0008               	return
 11701  0E1A                     __end_ofi1_I2C_MasterWrite:	
 11702                           
 11703                           	psect	text81
 11704  06A2                     __ptext81:	
 11705 ;; *************** function i1_I2C_MasterOperation *****************
 11706 ;; Defined at:
 11707 ;;		line 224 in file "mcc_generated_files/i2c_master.c"
 11708 ;; Parameters:    Size  Location     Type
 11709 ;;  read            1    wreg     unsigned char 
 11710 ;; Auto vars:     Size  Location     Type
 11711 ;;  read            1    3[BANK0 ] unsigned char 
 11712 ;;  I2C_MasterOp    1    4[BANK0 ] enum E92
 11713 ;; Return value:  Size  Location     Type
 11714 ;;                  1    wreg      enum E92
 11715 ;; Registers used:
 11716 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11717 ;; Tracked objects:
 11718 ;;		On entry : 0/0
 11719 ;;		On exit  : 0/0
 11720 ;;		Unchanged: 0/0
 11721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11723 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11724 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11725 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11726 ;;Total ram usage:        3 bytes
 11727 ;; Hardware stack levels used:    1
 11728 ;; Hardware stack levels required when called:    6
 11729 ;; This function calls:
 11730 ;;		i1_I2C_MasterStart
 11731 ;;		i1_I2C_Poller
 11732 ;; This function is called by:
 11733 ;;		i1_I2C_MasterWrite
 11734 ;; This function uses a non-reentrant model
 11735 ;;
 11736                           
 11737                           
 11738                           ;psect for function i1_I2C_MasterOperation
 11739  06A2                     i1_I2C_MasterOperation:	
 11740                           
 11741                           ;incstack = 0
 11742 ;; hardware stack exceeded
 11743                           ; Regs used in i1_I2C_MasterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11744                           ;i1I2C_MasterOperation@read stored from wreg
 11745  06A2  0020               	movlb	0	; select bank0
 11746  06A3  00C0               	movwf	i1I2C_MasterOperation@read
 11747                           
 11748                           ;i2c_master.c: 226: i2c_error_t returnValue = I2C_BUSY;
 11749  06A4  01C1               	clrf	i1I2C_MasterOperation@returnValue
 11750  06A5  0AC1               	incf	i1I2C_MasterOperation@returnValue,f
 11751                           
 11752                           ;i2c_master.c: 227: if(!I2C_Status.busy)
 11753  06A6  0021               	movlb	1	; select bank1
 11754  06A7  18BC               	btfsc	(_I2C_Status^(0+128)+28),1
 11755  06A8  2EBD               	goto	i1l6430
 11756                           
 11757                           ;i2c_master.c: 228: {
 11758                           ;i2c_master.c: 229: I2C_Status.busy = 1;
 11759  06A9  14BC               	bsf	(_I2C_Status^(0+128)+28),1
 11760                           
 11761                           ;i2c_master.c: 230: returnValue = I2C_NOERR;
 11762  06AA  0020               	movlb	0	; select bank0
 11763  06AB  01C1               	clrf	i1I2C_MasterOperation@returnValue
 11764                           
 11765                           ;i2c_master.c: 232: if(read)
 11766  06AC  0840               	movf	i1I2C_MasterOperation@read,w
 11767  06AD  1903               	btfsc	3,2
 11768  06AE  2EB3               	goto	i1l6424
 11769                           
 11770                           ;i2c_master.c: 233: {
 11771                           ;i2c_master.c: 234: I2C_Status.state = I2C_SEND_ADR_READ;
 11772  06AF  0021               	movlb	1	; select bank1
 11773  06B0  01BA               	clrf	(_I2C_Status^(0+128)+26)
 11774  06B1  0ABA               	incf	(_I2C_Status^(0+128)+26),f
 11775                           
 11776                           ;i2c_master.c: 235: }
 11777  06B2  2EB8               	goto	i1l6426
 11778  06B3                     i1l6424:	
 11779                           
 11780                           ;i2c_master.c: 236: else
 11781                           ;i2c_master.c: 237: {
 11782                           ;i2c_master.c: 238: I2C_Status.state = I2C_SEND_ADR_WRITE;
 11783  06B3  3002               	movlw	2
 11784  06B4  00FD               	movwf	??i1_I2C_MasterOperation
 11785  06B5  087D               	movf	??i1_I2C_MasterOperation,w
 11786  06B6  0021               	movlb	1	; select bank1
 11787  06B7  00BA               	movwf	(_I2C_Status^(0+128)+26)
 11788  06B8                     i1l6426:	
 11789                           
 11790                           ;i2c_master.c: 239: }
 11791                           ;i2c_master.c: 240: I2C_MasterStart();
 11792  06B8  318D  25B7  3186   	fcall	i1_I2C_MasterStart
 11793                           
 11794                           ;i2c_master.c: 241: I2C_Poller();
 11795  06BB  318F  2705         	fcall	i1_I2C_Poller
 11796  06BD                     i1l6430:	
 11797                           
 11798                           ;i2c_master.c: 242: }
 11799                           ;i2c_master.c: 243: return returnValue;
 11800  06BD  0020               	movlb	0	; select bank0
 11801  06BE  0841               	movf	i1I2C_MasterOperation@returnValue,w
 11802  06BF  0008               	return
 11803  06C0                     __end_ofi1_I2C_MasterOperation:	
 11804                           
 11805                           	psect	text82
 11806  0F05                     __ptext82:	
 11807 ;; *************** function i1_I2C_Poller *****************
 11808 ;; Defined at:
 11809 ;;		line 312 in file "mcc_generated_files/i2c_master.c"
 11810 ;; Parameters:    Size  Location     Type
 11811 ;;		None
 11812 ;; Auto vars:     Size  Location     Type
 11813 ;;		None
 11814 ;; Return value:  Size  Location     Type
 11815 ;;                  1    wreg      void 
 11816 ;; Registers used:
 11817 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11818 ;; Tracked objects:
 11819 ;;		On entry : 0/0
 11820 ;;		On exit  : 0/0
 11821 ;;		Unchanged: 0/0
 11822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11827 ;;Total ram usage:        0 bytes
 11828 ;; Hardware stack levels used:    1
 11829 ;; Hardware stack levels required when called:    5
 11830 ;; This function calls:
 11831 ;;		i1_I2C_MasterFsm
 11832 ;;		i1_I2C_MasterWaitForEvent
 11833 ;; This function is called by:
 11834 ;;		i1_I2C_MasterOperation
 11835 ;; This function uses a non-reentrant model
 11836 ;;
 11837                           
 11838                           
 11839                           ;psect for function i1_I2C_Poller
 11840  0F05                     i1_I2C_Poller:	
 11841  0F05                     i1l6320:	
 11842                           ;i2c_master.c: 314: while(I2C_Status.busy)
 11843                           
 11844                           ;incstack = 0
 11845 ;; hardware stack exceeded
 11846                           ; Regs used in i1_I2C_Poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11847                           
 11848  0F05  0021               	movlb	1	; select bank1
 11849  0F06  1CBC               	btfss	(_I2C_Status^(0+128)+28),1
 11850  0F07  0008               	return
 11851                           
 11852                           ;i2c_master.c: 315: {
 11853                           ;i2c_master.c: 316: I2C_MasterWaitForEvent();
 11854  0F08  318E  2612  318F   	fcall	i1_I2C_MasterWaitForEvent
 11855                           
 11856                           ;i2c_master.c: 317: I2C_MasterFsm();
 11857  0F0B  3185  2582  318F   	fcall	i1_I2C_MasterFsm
 11858  0F0E  2F05               	goto	i1l6320
 11859  0F0F                     __end_ofi1_I2C_Poller:	
 11860                           
 11861                           	psect	text83
 11862  0E12                     __ptext83:	
 11863 ;; *************** function i1_I2C_MasterWaitForEvent *****************
 11864 ;; Defined at:
 11865 ;;		line 650 in file "mcc_generated_files/i2c_master.c"
 11866 ;; Parameters:    Size  Location     Type
 11867 ;;		None
 11868 ;; Auto vars:     Size  Location     Type
 11869 ;;		None
 11870 ;; Return value:  Size  Location     Type
 11871 ;;                  1    wreg      void 
 11872 ;; Registers used:
 11873 ;;		None
 11874 ;; Tracked objects:
 11875 ;;		On entry : 0/0
 11876 ;;		On exit  : 0/0
 11877 ;;		Unchanged: 0/0
 11878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11882 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11883 ;;Total ram usage:        0 bytes
 11884 ;; Hardware stack levels used:    1
 11885 ;; This function calls:
 11886 ;;		Nothing
 11887 ;; This function is called by:
 11888 ;;		i1_I2C_Poller
 11889 ;; This function uses a non-reentrant model
 11890 ;;
 11891                           
 11892                           
 11893                           ;psect for function i1_I2C_MasterWaitForEvent
 11894  0E12                     i1_I2C_MasterWaitForEvent:	
 11895  0E12                     i1l558:	
 11896                           ;incstack = 0
 11897 ;; hardware stack exceeded
 11898                           ; Regs used in i1_I2C_MasterWaitForEvent: []
 11899                           ;i2c_master.c: 652: while(1)
 11900                           
 11901                           
 11902                           ;i2c_master.c: 653: {
 11903                           ;i2c_master.c: 654: if(PIR1bits.SSP1IF)
 11904  0E12  0020               	movlb	0	; select bank0
 11905  0E13  1990               	btfsc	16,3	;volatile
 11906  0E14  0008               	return
 11907  0E15  2E12               	goto	i1l558
 11908  0E16                     __end_ofi1_I2C_MasterWaitForEvent:	
 11909                           ;i2c_master.c: 655: {
 11910                           ;i2c_master.c: 656: break;
 11911                           
 11912                           
 11913                           	psect	text84
 11914  0582                     __ptext84:	
 11915 ;; *************** function i1_I2C_MasterFsm *****************
 11916 ;; Defined at:
 11917 ;;		line 321 in file "mcc_generated_files/i2c_master.c"
 11918 ;; Parameters:    Size  Location     Type
 11919 ;;		None
 11920 ;; Auto vars:     Size  Location     Type
 11921 ;;		None
 11922 ;; Return value:  Size  Location     Type
 11923 ;;                  1    wreg      void 
 11924 ;; Registers used:
 11925 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11926 ;; Tracked objects:
 11927 ;;		On entry : 0/0
 11928 ;;		On exit  : 0/0
 11929 ;;		Unchanged: 0/0
 11930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11933 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11934 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11935 ;;Total ram usage:        3 bytes
 11936 ;; Hardware stack levels used:    1
 11937 ;; Hardware stack levels required when called:    4
 11938 ;; This function calls:
 11939 ;;		i1_I2C_DO_ADDRESS_NACK
 11940 ;;		i1_I2C_DO_IDLE
 11941 ;;		i1_I2C_DO_RCEN
 11942 ;;		i1_I2C_DO_RESET
 11943 ;;		i1_I2C_DO_RX
 11944 ;;		i1_I2C_DO_RX_ACK
 11945 ;;		i1_I2C_DO_RX_NACK_RESTART
 11946 ;;		i1_I2C_DO_RX_NACK_STOP
 11947 ;;		i1_I2C_DO_SEND_ADR_READ
 11948 ;;		i1_I2C_DO_SEND_ADR_WRITE
 11949 ;;		i1_I2C_DO_SEND_RESTART
 11950 ;;		i1_I2C_DO_SEND_RESTART_READ
 11951 ;;		i1_I2C_DO_SEND_RESTART_WRITE
 11952 ;;		i1_I2C_DO_SEND_STOP
 11953 ;;		i1_I2C_DO_TX
 11954 ;;		i1_I2C_DO_TX_EMPTY
 11955 ;;		i1_I2C_MasterClearIrq
 11956 ;;		i1_I2C_MasterIsNack
 11957 ;; This function is called by:
 11958 ;;		i1_I2C_Poller
 11959 ;; This function uses a non-reentrant model
 11960 ;;
 11961                           
 11962                           
 11963                           ;psect for function i1_I2C_MasterFsm
 11964  0582                     i1_I2C_MasterFsm:	
 11965                           
 11966                           ;i2c_master.c: 323: I2C_MasterClearIrq();
 11967                           
 11968                           ;incstack = 0
 11969 ;; hardware stack exceeded
 11970                           ; Regs used in i1_I2C_MasterFsm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11971  0582  318D  25AE  3185   	fcall	i1_I2C_MasterClearIrq
 11972                           
 11973                           ;i2c_master.c: 325: if(I2C_Status.addressNackCheck && I2C_MasterIsNack())
 11974  0585  0021               	movlb	1	; select bank1
 11975  0586  1C3C               	btfss	(_I2C_Status^(0+128)+28),0
 11976  0587  2D94               	goto	i1l6312
 11977  0588  318E  2643  3185   	fcall	i1_I2C_MasterIsNack
 11978  058B  3A00               	xorlw	0
 11979  058C  1903               	skipnz
 11980  058D  2D94               	goto	i1l6312
 11981                           
 11982                           ;i2c_master.c: 326: {
 11983                           ;i2c_master.c: 327: I2C_Status.state = I2C_ADDRESS_NACK;
 11984  058E  300F               	movlw	15
 11985  058F  0020               	movlb	0	; select bank0
 11986  0590  00BD               	movwf	??i1_I2C_MasterFsm
 11987  0591  083D               	movf	??i1_I2C_MasterFsm,w
 11988  0592  0021               	movlb	1	; select bank1
 11989  0593  00BA               	movwf	(_I2C_Status^(0+128)+26)
 11990  0594                     i1l6312:	
 11991                           
 11992                           ;i2c_master.c: 328: }
 11993                           ;i2c_master.c: 329: I2C_Status.state = fsmStateTable[I2C_Status.state]();
 11994  0594  0021               	movlb	1	; select bank1
 11995  0595  083A               	movf	(_I2C_Status^(0+128)+26),w
 11996  0596  0020               	movlb	0	; select bank0
 11997  0597  00BD               	movwf	??i1_I2C_MasterFsm
 11998  0598  01BE               	clrf	??i1_I2C_MasterFsm+1
 11999  0599  35BD               	lslf	??i1_I2C_MasterFsm,f
 12000  059A  0DBE               	rlf	??i1_I2C_MasterFsm+1,f
 12001  059B  3064               	movlw	low (_fsmStateTable| (0+32768))
 12002  059C  073D               	addwf	??i1_I2C_MasterFsm,w
 12003  059D  0084               	movwf	4
 12004  059E  3086               	movlw	high (_fsmStateTable| (0+32768))
 12005  059F  3D3E               	addwfc	??i1_I2C_MasterFsm+1,w
 12006  05A0  0085               	movwf	5
 12007  05A1  3F01               	moviw [1]fsr0
 12008  05A2  008A               	movwf	10
 12009  05A3  3F00               	moviw [0]fsr0
 12010  05A4  000A               	callw
 12011  05A5  3185               	pagesel	$
 12012  05A6  0020               	movlb	0	; select bank0
 12013  05A7  00BF               	movwf	??i1_I2C_MasterFsm+2
 12014  05A8  083F               	movf	??i1_I2C_MasterFsm+2,w
 12015  05A9  0021               	movlb	1	; select bank1
 12016  05AA  00BA               	movwf	(_I2C_Status^(0+128)+26)
 12017  05AB  0008               	return
 12018  05AC                     __end_ofi1_I2C_MasterFsm:	
 12019                           
 12020                           	psect	text85
 12021  0641                     __ptext85:	
 12022 ;; *************** function i1_I2C_DO_ADDRESS_NACK *****************
 12023 ;; Defined at:
 12024 ;;		line 500 in file "mcc_generated_files/i2c_master.c"
 12025 ;; Parameters:    Size  Location     Type
 12026 ;;		None
 12027 ;; Auto vars:     Size  Location     Type
 12028 ;;		None
 12029 ;; Return value:  Size  Location     Type
 12030 ;;                  1    wreg      enum E12103
 12031 ;; Registers used:
 12032 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12033 ;; Tracked objects:
 12034 ;;		On entry : 0/0
 12035 ;;		On exit  : 0/0
 12036 ;;		Unchanged: 0/0
 12037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12040 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12041 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12042 ;;Total ram usage:        1 bytes
 12043 ;; Hardware stack levels used:    1
 12044 ;; Hardware stack levels required when called:    3
 12045 ;; This function calls:
 12046 ;;		Absolute function
 12047 ;;		i1_I2C_CallbackReturnReset
 12048 ;;		i1_I2C_CallbackReturnStop
 12049 ;;		i1_I2C_DO_SEND_RESTART
 12050 ;;		i1_I2C_DO_SEND_STOP
 12051 ;;		i1_rd1RegCompleteHandler
 12052 ;;		i1_rd2RegCompleteHandler
 12053 ;;		i1_rdBlkRegCompleteHandler
 12054 ;;		i1_wr1RegCompleteHandler
 12055 ;;		i1_wr2RegCompleteHandler
 12056 ;; This function is called by:
 12057 ;; This function uses a non-reentrant model
 12058 ;;
 12059                           
 12060                           
 12061                           ;psect for function i1_I2C_DO_ADDRESS_NACK
 12062  0641                     i1_I2C_DO_ADDRESS_NACK:	
 12063  0641                     i1l6288:	
 12064                           ;incstack = 0
 12065 ;; hardware stack exceeded
 12066                           ; Regs used in i1_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12067                           
 12068                           
 12069                           ;i2c_master.c: 502: I2C_Status.addressNackCheck = 0;
 12070  0641  0021               	movlb	1	; select bank1
 12071  0642  103C               	bcf	(_I2C_Status^(0+128)+28),0
 12072                           
 12073                           ;i2c_master.c: 503: I2C_Status.error = I2C_FAIL;
 12074  0643  3002               	movlw	2
 12075  0644  00FA               	movwf	??i1_I2C_DO_ADDRESS_NACK
 12076  0645  087A               	movf	??i1_I2C_DO_ADDRESS_NACK,w
 12077  0646  00BB               	movwf	(_I2C_Status^(0+128)+27)
 12078                           
 12079                           ;i2c_master.c: 504: switch(I2C_Status.callbackTable[I2C_ADDR_NACK](I2C_Status.callbackPa
      +                          yload[I2C_ADDR_NACK]))
 12080  0647  2E4E               	goto	i1l6302
 12081  0648                     i1l6292:	
 12082                           ;i2c_master.c: 505: {
 12083                           ;i2c_master.c: 506: case I2C_RESTART_READ:
 12084                           
 12085                           
 12086                           ;i2c_master.c: 507: case I2C_RESTART_WRITE:
 12087                           ;i2c_master.c: 508: return I2C_DO_SEND_RESTART();
 12088  0648  318D  25FE         	fcall	i1_I2C_DO_SEND_RESTART
 12089  064A  0008               	return
 12090  064B                     i1l6296:	
 12091                           ;i2c_master.c: 509: default:
 12092                           
 12093                           
 12094                           ;i2c_master.c: 510: return I2C_DO_SEND_STOP();
 12095  064B  318E  2602         	fcall	i1_I2C_DO_SEND_STOP
 12096                           
 12097                           ;i2c_master.c: 511: }
 12098  064D  0008               	return
 12099  064E                     i1l6302:	
 12100  064E  0021               	movlb	1	; select bank1
 12101  064F  082E               	movf	(low ((_I2C_Status| 0+14)))^(0+128),w
 12102  0650  00FA               	movwf	??i1_I2C_DO_ADDRESS_NACK
 12103  0651  087A               	movf	??i1_I2C_DO_ADDRESS_NACK,w
 12104  0652  00F9               	movwf	i1I2C_CallbackReturnReset@funPtr
 12105  0653  3004               	movlw	4
 12106  0654  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
 12107  0655  0086               	movwf	6
 12108  0656  0187               	clrf	7
 12109  0657  3F41               	moviw [1]fsr1
 12110  0658  008A               	movwf	10
 12111  0659  3F40               	moviw [0]fsr1
 12112  065A  000A               	callw
 12113  065B  3186               	pagesel	$
 12114                           
 12115                           ; Switch size 1, requested type "space"
 12116                           ; Number of cases is 2, Range of values is 2 to 3
 12117                           ; switch strategies available:
 12118                           ; Name         Instructions Cycles
 12119                           ; simple_byte            7     4 (average)
 12120                           ; direct_byte           13     9 (fixed)
 12121                           ; jumptable            263     9 (fixed)
 12122                           ;	Chosen strategy is simple_byte
 12123  065C  3A02               	xorlw	2	; case 2
 12124  065D  1903               	skipnz
 12125  065E  2E48               	goto	i1l6292
 12126  065F  3A01               	xorlw	1	; case 3
 12127  0660  1903               	skipnz
 12128  0661  2E48               	goto	i1l6292
 12129  0662  2E4B               	goto	i1l6296
 12130  0663  0008               	return
 12131  0664                     __end_ofi1_I2C_DO_ADDRESS_NACK:	
 12132                           
 12133                           	psect	text86
 12134  0E34                     __ptext86:	
 12135 ;; *************** function i1_I2C_DO_RESET *****************
 12136 ;; Defined at:
 12137 ;;		line 494 in file "mcc_generated_files/i2c_master.c"
 12138 ;; Parameters:    Size  Location     Type
 12139 ;;		None
 12140 ;; Auto vars:     Size  Location     Type
 12141 ;;		None
 12142 ;; Return value:  Size  Location     Type
 12143 ;;                  1    wreg      enum E12103
 12144 ;; Registers used:
 12145 ;;		wreg, status,2
 12146 ;; Tracked objects:
 12147 ;;		On entry : 0/0
 12148 ;;		On exit  : 0/0
 12149 ;;		Unchanged: 0/0
 12150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12155 ;;Total ram usage:        0 bytes
 12156 ;; Hardware stack levels used:    1
 12157 ;; This function calls:
 12158 ;;		Nothing
 12159 ;; This function is called by:
 12160 ;; This function uses a non-reentrant model
 12161 ;;
 12162                           
 12163                           
 12164                           ;psect for function i1_I2C_DO_RESET
 12165  0E34                     i1_I2C_DO_RESET:	
 12166  0E34                     i1l3088:	
 12167                           ;incstack = 0
 12168 ;; hardware stack exceeded
 12169                           ; Regs used in i1_I2C_DO_RESET: [wreg+status,2]
 12170                           
 12171                           
 12172                           ;i2c_master.c: 496: I2C_Status.busy = 0;
 12173  0E34  0021               	movlb	1	; select bank1
 12174  0E35  10BC               	bcf	(_I2C_Status^(0+128)+28),1
 12175                           
 12176                           ;i2c_master.c: 497: I2C_Status.error = I2C_NOERR;
 12177  0E36  01BB               	clrf	(_I2C_Status^(0+128)+27)
 12178                           
 12179                           ;i2c_master.c: 498: return I2C_RESET;
 12180  0E37  300E               	movlw	14
 12181  0E38  0008               	return
 12182  0E39                     __end_ofi1_I2C_DO_RESET:	
 12183                           
 12184                           	psect	text87
 12185  0E0E                     __ptext87:	
 12186 ;; *************** function i1_I2C_DO_RX_NACK_RESTART *****************
 12187 ;; Defined at:
 12188 ;;		line 488 in file "mcc_generated_files/i2c_master.c"
 12189 ;; Parameters:    Size  Location     Type
 12190 ;;		None
 12191 ;; Auto vars:     Size  Location     Type
 12192 ;;		None
 12193 ;; Return value:  Size  Location     Type
 12194 ;;                  1    wreg      enum E12103
 12195 ;; Registers used:
 12196 ;;		wreg, status,2, status,0, pclath, cstack
 12197 ;; Tracked objects:
 12198 ;;		On entry : 0/0
 12199 ;;		On exit  : 0/0
 12200 ;;		Unchanged: 0/0
 12201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12205 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12206 ;;Total ram usage:        0 bytes
 12207 ;; Hardware stack levels used:    1
 12208 ;; Hardware stack levels required when called:    1
 12209 ;; This function calls:
 12210 ;;		i1_I2C_MasterSendNack
 12211 ;; This function is called by:
 12212 ;;		i1_I2C_DO_RX
 12213 ;; This function uses a non-reentrant model
 12214 ;;
 12215                           
 12216                           
 12217                           ;psect for function i1_I2C_DO_RX_NACK_RESTART
 12218  0E0E                     i1_I2C_DO_RX_NACK_RESTART:	
 12219  0E0E                     i1l2938:	
 12220                           ;incstack = 0
 12221 ;; hardware stack exceeded
 12222                           ; Regs used in i1_I2C_DO_RX_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 12223                           
 12224                           
 12225                           ;i2c_master.c: 490: I2C_MasterSendNack();
 12226  0E0E  318D  25EE         	fcall	i1_I2C_MasterSendNack
 12227                           
 12228                           ;i2c_master.c: 491: return I2C_SEND_RESTART;
 12229  0E10  3009               	movlw	9
 12230  0E11  0008               	return
 12231  0E12                     __end_ofi1_I2C_DO_RX_NACK_RESTART:	
 12232                           
 12233                           	psect	text88
 12234  0E0A                     __ptext88:	
 12235 ;; *************** function i1_I2C_DO_RX_NACK_STOP *****************
 12236 ;; Defined at:
 12237 ;;		line 482 in file "mcc_generated_files/i2c_master.c"
 12238 ;; Parameters:    Size  Location     Type
 12239 ;;		None
 12240 ;; Auto vars:     Size  Location     Type
 12241 ;;		None
 12242 ;; Return value:  Size  Location     Type
 12243 ;;                  1    wreg      enum E12103
 12244 ;; Registers used:
 12245 ;;		wreg, status,2, status,0, pclath, cstack
 12246 ;; Tracked objects:
 12247 ;;		On entry : 0/0
 12248 ;;		On exit  : 0/0
 12249 ;;		Unchanged: 0/0
 12250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12254 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12255 ;;Total ram usage:        0 bytes
 12256 ;; Hardware stack levels used:    1
 12257 ;; Hardware stack levels required when called:    1
 12258 ;; This function calls:
 12259 ;;		i1_I2C_MasterSendNack
 12260 ;; This function is called by:
 12261 ;;		i1_I2C_DO_RX
 12262 ;; This function uses a non-reentrant model
 12263 ;;
 12264                           
 12265                           
 12266                           ;psect for function i1_I2C_DO_RX_NACK_STOP
 12267  0E0A                     i1_I2C_DO_RX_NACK_STOP:	
 12268  0E0A                     i1l2932:	
 12269                           ;incstack = 0
 12270 ;; hardware stack exceeded
 12271                           ; Regs used in i1_I2C_DO_RX_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 12272                           
 12273                           
 12274                           ;i2c_master.c: 484: I2C_MasterSendNack();
 12275  0E0A  318D  25EE         	fcall	i1_I2C_MasterSendNack
 12276                           
 12277                           ;i2c_master.c: 485: return I2C_SEND_STOP;
 12278  0E0C  300A               	movlw	10
 12279  0E0D  0008               	return
 12280  0E0E                     __end_ofi1_I2C_DO_RX_NACK_STOP:	
 12281                           
 12282                           	psect	text89
 12283  0E06                     __ptext89:	
 12284 ;; *************** function i1_I2C_DO_RX_ACK *****************
 12285 ;; Defined at:
 12286 ;;		line 475 in file "mcc_generated_files/i2c_master.c"
 12287 ;; Parameters:    Size  Location     Type
 12288 ;;		None
 12289 ;; Auto vars:     Size  Location     Type
 12290 ;;		None
 12291 ;; Return value:  Size  Location     Type
 12292 ;;                  1    wreg      enum E12103
 12293 ;; Registers used:
 12294 ;;		wreg, status,2, status,0, pclath, cstack
 12295 ;; Tracked objects:
 12296 ;;		On entry : 0/0
 12297 ;;		On exit  : 0/0
 12298 ;;		Unchanged: 0/0
 12299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12304 ;;Total ram usage:        0 bytes
 12305 ;; Hardware stack levels used:    1
 12306 ;; Hardware stack levels required when called:    1
 12307 ;; This function calls:
 12308 ;;		i1_I2C_MasterSendAck
 12309 ;; This function is called by:
 12310 ;; This function uses a non-reentrant model
 12311 ;;
 12312                           
 12313                           
 12314                           ;psect for function i1_I2C_DO_RX_ACK
 12315  0E06                     i1_I2C_DO_RX_ACK:	
 12316  0E06                     i1l3082:	
 12317                           ;incstack = 0
 12318 ;; hardware stack exceeded
 12319                           ; Regs used in i1_I2C_DO_RX_ACK: [wreg+status,2+status,0+pclath+cstack]
 12320                           
 12321                           
 12322                           ;i2c_master.c: 477: I2C_MasterSendAck();
 12323  0E06  318D  25F2         	fcall	i1_I2C_MasterSendAck
 12324                           
 12325                           ;i2c_master.c: 478: return I2C_RCEN;
 12326  0E08  3005               	movlw	5
 12327  0E09  0008               	return
 12328  0E0A                     __end_ofi1_I2C_DO_RX_ACK:	
 12329                           
 12330                           	psect	text90
 12331  0E02                     __ptext90:	
 12332 ;; *************** function i1_I2C_DO_SEND_STOP *****************
 12333 ;; Defined at:
 12334 ;;		line 469 in file "mcc_generated_files/i2c_master.c"
 12335 ;; Parameters:    Size  Location     Type
 12336 ;;		None
 12337 ;; Auto vars:     Size  Location     Type
 12338 ;;		None
 12339 ;; Return value:  Size  Location     Type
 12340 ;;                  1    wreg      enum E12103
 12341 ;; Registers used:
 12342 ;;		wreg, status,2, status,0, pclath, cstack
 12343 ;; Tracked objects:
 12344 ;;		On entry : 0/0
 12345 ;;		On exit  : 0/0
 12346 ;;		Unchanged: 0/0
 12347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12351 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12352 ;;Total ram usage:        0 bytes
 12353 ;; Hardware stack levels used:    1
 12354 ;; Hardware stack levels required when called:    1
 12355 ;; This function calls:
 12356 ;;		i1_I2C_MasterStop
 12357 ;; This function is called by:
 12358 ;;		i1_I2C_DO_TX
 12359 ;;		i1_I2C_DO_TX_EMPTY
 12360 ;;		i1_I2C_DO_ADDRESS_NACK
 12361 ;; This function uses a non-reentrant model
 12362 ;;
 12363                           
 12364                           
 12365                           ;psect for function i1_I2C_DO_SEND_STOP
 12366  0E02                     i1_I2C_DO_SEND_STOP:	
 12367  0E02                     i1l2926:	
 12368                           ;incstack = 0
 12369 ;; hardware stack exceeded
 12370                           ; Regs used in i1_I2C_DO_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 12371                           
 12372                           
 12373                           ;i2c_master.c: 471: I2C_MasterStop();
 12374  0E02  318D  25BD         	fcall	i1_I2C_MasterStop
 12375                           
 12376                           ;i2c_master.c: 472: return I2C_IDLE;
 12377  0E04  3000               	movlw	0
 12378  0E05  0008               	return
 12379  0E06                     __end_ofi1_I2C_DO_SEND_STOP:	
 12380                           
 12381                           	psect	text91
 12382  0DFE                     __ptext91:	
 12383 ;; *************** function i1_I2C_DO_SEND_RESTART *****************
 12384 ;; Defined at:
 12385 ;;		line 463 in file "mcc_generated_files/i2c_master.c"
 12386 ;; Parameters:    Size  Location     Type
 12387 ;;		None
 12388 ;; Auto vars:     Size  Location     Type
 12389 ;;		None
 12390 ;; Return value:  Size  Location     Type
 12391 ;;                  1    wreg      enum E12103
 12392 ;; Registers used:
 12393 ;;		wreg, status,2, status,0, pclath, cstack
 12394 ;; Tracked objects:
 12395 ;;		On entry : 0/0
 12396 ;;		On exit  : 0/0
 12397 ;;		Unchanged: 0/0
 12398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12403 ;;Total ram usage:        0 bytes
 12404 ;; Hardware stack levels used:    1
 12405 ;; Hardware stack levels required when called:    1
 12406 ;; This function calls:
 12407 ;;		i1_I2C_MasterEnableRestart
 12408 ;; This function is called by:
 12409 ;;		i1_I2C_DO_TX_EMPTY
 12410 ;;		i1_I2C_DO_ADDRESS_NACK
 12411 ;; This function uses a non-reentrant model
 12412 ;;
 12413                           
 12414                           
 12415                           ;psect for function i1_I2C_DO_SEND_RESTART
 12416  0DFE                     i1_I2C_DO_SEND_RESTART:	
 12417  0DFE                     i1l2920:	
 12418                           ;incstack = 0
 12419 ;; hardware stack exceeded
 12420                           ; Regs used in i1_I2C_DO_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 12421                           
 12422                           
 12423                           ;i2c_master.c: 465: I2C_MasterEnableRestart();
 12424  0DFE  318D  25BA         	fcall	i1_I2C_MasterEnableRestart
 12425                           
 12426                           ;i2c_master.c: 466: return I2C_SEND_ADR_READ;
 12427  0E00  3001               	movlw	1
 12428  0E01  0008               	return
 12429  0E02                     __end_ofi1_I2C_DO_SEND_RESTART:	
 12430                           
 12431                           	psect	text92
 12432  0DFA                     __ptext92:	
 12433 ;; *************** function i1_I2C_DO_SEND_RESTART_WRITE *****************
 12434 ;; Defined at:
 12435 ;;		line 456 in file "mcc_generated_files/i2c_master.c"
 12436 ;; Parameters:    Size  Location     Type
 12437 ;;		None
 12438 ;; Auto vars:     Size  Location     Type
 12439 ;;		None
 12440 ;; Return value:  Size  Location     Type
 12441 ;;                  1    wreg      enum E12103
 12442 ;; Registers used:
 12443 ;;		wreg, status,2, status,0, pclath, cstack
 12444 ;; Tracked objects:
 12445 ;;		On entry : 0/0
 12446 ;;		On exit  : 0/0
 12447 ;;		Unchanged: 0/0
 12448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12452 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12453 ;;Total ram usage:        0 bytes
 12454 ;; Hardware stack levels used:    1
 12455 ;; Hardware stack levels required when called:    1
 12456 ;; This function calls:
 12457 ;;		i1_I2C_MasterEnableRestart
 12458 ;; This function is called by:
 12459 ;;		i1_I2C_DO_TX
 12460 ;; This function uses a non-reentrant model
 12461 ;;
 12462                           
 12463                           
 12464                           ;psect for function i1_I2C_DO_SEND_RESTART_WRITE
 12465  0DFA                     i1_I2C_DO_SEND_RESTART_WRITE:	
 12466  0DFA                     i1l2914:	
 12467                           ;incstack = 0
 12468 ;; hardware stack exceeded
 12469                           ; Regs used in i1_I2C_DO_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 12470                           
 12471                           
 12472                           ;i2c_master.c: 458: I2C_MasterEnableRestart();
 12473  0DFA  318D  25BA         	fcall	i1_I2C_MasterEnableRestart
 12474                           
 12475                           ;i2c_master.c: 459: return I2C_SEND_ADR_WRITE;
 12476  0DFC  3002               	movlw	2
 12477  0DFD  0008               	return
 12478  0DFE                     __end_ofi1_I2C_DO_SEND_RESTART_WRITE:	
 12479                           
 12480                           	psect	text93
 12481  0DF6                     __ptext93:	
 12482 ;; *************** function i1_I2C_DO_SEND_RESTART_READ *****************
 12483 ;; Defined at:
 12484 ;;		line 450 in file "mcc_generated_files/i2c_master.c"
 12485 ;; Parameters:    Size  Location     Type
 12486 ;;		None
 12487 ;; Auto vars:     Size  Location     Type
 12488 ;;		None
 12489 ;; Return value:  Size  Location     Type
 12490 ;;                  1    wreg      enum E12103
 12491 ;; Registers used:
 12492 ;;		wreg, status,2, status,0, pclath, cstack
 12493 ;; Tracked objects:
 12494 ;;		On entry : 0/0
 12495 ;;		On exit  : 0/0
 12496 ;;		Unchanged: 0/0
 12497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12502 ;;Total ram usage:        0 bytes
 12503 ;; Hardware stack levels used:    1
 12504 ;; Hardware stack levels required when called:    1
 12505 ;; This function calls:
 12506 ;;		i1_I2C_MasterEnableRestart
 12507 ;; This function is called by:
 12508 ;;		i1_I2C_DO_TX
 12509 ;; This function uses a non-reentrant model
 12510 ;;
 12511                           
 12512                           
 12513                           ;psect for function i1_I2C_DO_SEND_RESTART_READ
 12514  0DF6                     i1_I2C_DO_SEND_RESTART_READ:	
 12515  0DF6                     i1l2908:	
 12516                           ;incstack = 0
 12517 ;; hardware stack exceeded
 12518                           ; Regs used in i1_I2C_DO_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 12519                           
 12520                           
 12521                           ;i2c_master.c: 452: I2C_MasterEnableRestart();
 12522  0DF6  318D  25BA         	fcall	i1_I2C_MasterEnableRestart
 12523                           
 12524                           ;i2c_master.c: 453: return I2C_SEND_ADR_READ;
 12525  0DF8  3001               	movlw	1
 12526  0DF9  0008               	return
 12527  0DFA                     __end_ofi1_I2C_DO_SEND_RESTART_READ:	
 12528                           
 12529                           	psect	text94
 12530  0E49                     __ptext94:	
 12531 ;; *************** function i1_I2C_DO_RCEN *****************
 12532 ;; Defined at:
 12533 ;;		line 402 in file "mcc_generated_files/i2c_master.c"
 12534 ;; Parameters:    Size  Location     Type
 12535 ;;		None
 12536 ;; Auto vars:     Size  Location     Type
 12537 ;;		None
 12538 ;; Return value:  Size  Location     Type
 12539 ;;                  1    wreg      enum E12103
 12540 ;; Registers used:
 12541 ;;		wreg, status,2, status,0, pclath, cstack
 12542 ;; Tracked objects:
 12543 ;;		On entry : 0/0
 12544 ;;		On exit  : 0/0
 12545 ;;		Unchanged: 0/0
 12546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12551 ;;Total ram usage:        0 bytes
 12552 ;; Hardware stack levels used:    1
 12553 ;; Hardware stack levels required when called:    1
 12554 ;; This function calls:
 12555 ;;		i1_I2C_MasterStartRx
 12556 ;; This function is called by:
 12557 ;; This function uses a non-reentrant model
 12558 ;;
 12559                           
 12560                           
 12561                           ;psect for function i1_I2C_DO_RCEN
 12562  0E49                     i1_I2C_DO_RCEN:	
 12563  0E49                     i1l3054:	
 12564                           ;incstack = 0
 12565 ;; hardware stack exceeded
 12566                           ; Regs used in i1_I2C_DO_RCEN: [wreg+status,2+status,0+pclath+cstack]
 12567                           
 12568                           
 12569                           ;i2c_master.c: 404: I2C_Status.addressNackCheck = 0;
 12570  0E49  0021               	movlb	1	; select bank1
 12571  0E4A  103C               	bcf	(_I2C_Status^(0+128)+28),0
 12572                           
 12573                           ;i2c_master.c: 405: I2C_MasterStartRx();
 12574  0E4B  318D  25C0         	fcall	i1_I2C_MasterStartRx
 12575                           
 12576                           ;i2c_master.c: 406: return I2C_RX;
 12577  0E4D  3004               	movlw	4
 12578  0E4E  0008               	return
 12579  0E4F                     __end_ofi1_I2C_DO_RCEN:	
 12580                           
 12581                           	psect	text95
 12582  03C1                     __ptext95:	
 12583 ;; *************** function i1_I2C_DO_RX *****************
 12584 ;; Defined at:
 12585 ;;		line 378 in file "mcc_generated_files/i2c_master.c"
 12586 ;; Parameters:    Size  Location     Type
 12587 ;;		None
 12588 ;; Auto vars:     Size  Location     Type
 12589 ;;		None
 12590 ;; Return value:  Size  Location     Type
 12591 ;;                  1    wreg      enum E12103
 12592 ;; Registers used:
 12593 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12594 ;; Tracked objects:
 12595 ;;		On entry : 0/0
 12596 ;;		On exit  : 0/0
 12597 ;;		Unchanged: 0/0
 12598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12601 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12602 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12603 ;;Total ram usage:        1 bytes
 12604 ;; Hardware stack levels used:    1
 12605 ;; Hardware stack levels required when called:    3
 12606 ;; This function calls:
 12607 ;;		Absolute function
 12608 ;;		i1_I2C_CallbackReturnReset
 12609 ;;		i1_I2C_CallbackReturnStop
 12610 ;;		i1_I2C_DO_RX_NACK_RESTART
 12611 ;;		i1_I2C_DO_RX_NACK_STOP
 12612 ;;		i1_I2C_MasterGetRxData
 12613 ;;		i1_I2C_MasterSendAck
 12614 ;;		i1_rd1RegCompleteHandler
 12615 ;;		i1_rd2RegCompleteHandler
 12616 ;;		i1_rdBlkRegCompleteHandler
 12617 ;;		i1_wr1RegCompleteHandler
 12618 ;;		i1_wr2RegCompleteHandler
 12619 ;; This function is called by:
 12620 ;; This function uses a non-reentrant model
 12621 ;;
 12622                           
 12623                           
 12624                           ;psect for function i1_I2C_DO_RX
 12625  03C1                     i1_I2C_DO_RX:	
 12626  03C1                     i1l6242:	
 12627                           ;incstack = 0
 12628 ;; hardware stack exceeded
 12629                           ; Regs used in i1_I2C_DO_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12630                           
 12631                           
 12632                           ;i2c_master.c: 380: *I2C_Status.data_ptr++ = I2C_MasterGetRxData();
 12633  03C1  318D  25C3  3183   	fcall	i1_I2C_MasterGetRxData
 12634  03C4  00FA               	movwf	??i1_I2C_DO_RX
 12635  03C5  0021               	movlb	1	; select bank1
 12636  03C6  0837               	movf	(low ((_I2C_Status| 0+23)))^(0+128),w
 12637  03C7  0086               	movwf	6
 12638  03C8  0187               	clrf	7
 12639  03C9  087A               	movf	??i1_I2C_DO_RX,w
 12640  03CA  0081               	movwf	1
 12641  03CB  3001               	movlw	1
 12642  03CC  00FA               	movwf	??i1_I2C_DO_RX
 12643  03CD  087A               	movf	??i1_I2C_DO_RX,w
 12644  03CE  07B7               	addwf	(low ((_I2C_Status| 0+23)))^(0+128),f
 12645                           
 12646                           ;i2c_master.c: 381: if(--I2C_Status.data_length)
 12647  03CF  3001               	movlw	1
 12648  03D0  02B8               	subwf	(_I2C_Status^(0+128)+24),f
 12649  03D1  3000               	movlw	0
 12650  03D2  3BB9               	subwfb	((_I2C_Status+1)^(0+128)+24),f
 12651  03D3  0838               	movf	(_I2C_Status^(0+128)+24),w
 12652  03D4  0439               	iorwf	((_I2C_Status+1)^(0+128)+24),w
 12653  03D5  1903               	btfsc	3,2
 12654  03D6  2BDB               	goto	i1l417
 12655                           
 12656                           ;i2c_master.c: 382: {
 12657                           ;i2c_master.c: 383: I2C_MasterSendAck();
 12658  03D7  318D  25F2         	fcall	i1_I2C_MasterSendAck
 12659                           
 12660                           ;i2c_master.c: 384: return I2C_RCEN;
 12661  03D9  3005               	movlw	5
 12662                           
 12663                           ;i2c_master.c: 385: }
 12664  03DA  0008               	return
 12665  03DB                     i1l417:	
 12666                           
 12667                           ;i2c_master.c: 386: else
 12668                           ;i2c_master.c: 387: {
 12669                           ;i2c_master.c: 388: I2C_Status.bufferFree = 1;
 12670  03DB  15BC               	bsf	(_I2C_Status^(0+128)+28),3
 12671                           
 12672                           ;i2c_master.c: 389: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
 12673  03DC  2BE3               	goto	i1l6266
 12674  03DD                     i1l6256:	
 12675                           ;i2c_master.c: 390: {
 12676                           ;i2c_master.c: 391: case I2C_RESTART_WRITE:
 12677                           
 12678                           
 12679                           ;i2c_master.c: 392: case I2C_RESTART_READ:
 12680                           ;i2c_master.c: 393: return I2C_DO_RX_NACK_RESTART();
 12681  03DD  318E  260E         	fcall	i1_I2C_DO_RX_NACK_RESTART
 12682  03DF  0008               	return
 12683  03E0                     i1l6260:	
 12684                           ;i2c_master.c: 395: case I2C_CONTINUE:
 12685                           
 12686                           ;i2c_master.c: 394: default:
 12687                           
 12688                           
 12689                           ;i2c_master.c: 396: case I2C_STOP:
 12690                           ;i2c_master.c: 397: return I2C_DO_RX_NACK_STOP();
 12691  03E0  318E  260A         	fcall	i1_I2C_DO_RX_NACK_STOP
 12692                           
 12693                           ;i2c_master.c: 398: }
 12694  03E2  0008               	return
 12695  03E3                     i1l6266:	
 12696  03E3  0021               	movlb	1	; select bank1
 12697  03E4  082C               	movf	(low ((_I2C_Status| 0+12)))^(0+128),w
 12698  03E5  00FA               	movwf	??i1_I2C_DO_RX
 12699  03E6  087A               	movf	??i1_I2C_DO_RX,w
 12700  03E7  00F9               	movwf	i1I2C_CallbackReturnReset@funPtr
 12701  03E8  0821               	movf	(_I2C_Status+1)^(0+128),w
 12702  03E9  008A               	movwf	10
 12703  03EA  0820               	movf	_I2C_Status^(0+128),w
 12704  03EB  000A               	callw
 12705  03EC  3183               	pagesel	$
 12706                           
 12707                           ; Switch size 1, requested type "space"
 12708                           ; Number of cases is 4, Range of values is 1 to 4
 12709                           ; switch strategies available:
 12710                           ; Name         Instructions Cycles
 12711                           ; simple_byte           13     7 (average)
 12712                           ; direct_byte           17     9 (fixed)
 12713                           ; jumptable            263     9 (fixed)
 12714                           ;	Chosen strategy is simple_byte
 12715  03ED  3A01               	xorlw	1	; case 1
 12716  03EE  1903               	skipnz
 12717  03EF  2BE0               	goto	i1l6260
 12718  03F0  3A03               	xorlw	3	; case 2
 12719  03F1  1903               	skipnz
 12720  03F2  2BDD               	goto	i1l6256
 12721  03F3  3A01               	xorlw	1	; case 3
 12722  03F4  1903               	skipnz
 12723  03F5  2BDD               	goto	i1l6256
 12724  03F6  3A07               	xorlw	7	; case 4
 12725  03F7  1903               	skipnz
 12726  03F8  2BE0               	goto	i1l6260
 12727  03F9  2BE0               	goto	i1l6260
 12728  03FA  0008               	return
 12729  03FB                     __end_ofi1_I2C_DO_RX:	
 12730                           
 12731                           	psect	text96
 12732  02BA                     __ptext96:	
 12733 ;; *************** function i1_I2C_DO_TX *****************
 12734 ;; Defined at:
 12735 ;;		line 354 in file "mcc_generated_files/i2c_master.c"
 12736 ;; Parameters:    Size  Location     Type
 12737 ;;		None
 12738 ;; Auto vars:     Size  Location     Type
 12739 ;;		None
 12740 ;; Return value:  Size  Location     Type
 12741 ;;                  1    wreg      enum E12103
 12742 ;; Registers used:
 12743 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12744 ;; Tracked objects:
 12745 ;;		On entry : 0/0
 12746 ;;		On exit  : 0/0
 12747 ;;		Unchanged: 0/0
 12748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12750 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12751 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12752 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12753 ;;Total ram usage:        3 bytes
 12754 ;; Hardware stack levels used:    1
 12755 ;; Hardware stack levels required when called:    3
 12756 ;; This function calls:
 12757 ;;		Absolute function
 12758 ;;		i1_I2C_CallbackReturnReset
 12759 ;;		i1_I2C_CallbackReturnStop
 12760 ;;		i1_I2C_DO_SEND_RESTART_READ
 12761 ;;		i1_I2C_DO_SEND_RESTART_WRITE
 12762 ;;		i1_I2C_DO_SEND_STOP
 12763 ;;		i1_I2C_MasterIsNack
 12764 ;;		i1_I2C_MasterSendTxData
 12765 ;;		i1_rd1RegCompleteHandler
 12766 ;;		i1_rd2RegCompleteHandler
 12767 ;;		i1_rdBlkRegCompleteHandler
 12768 ;;		i1_wr1RegCompleteHandler
 12769 ;;		i1_wr2RegCompleteHandler
 12770 ;; This function is called by:
 12771 ;; This function uses a non-reentrant model
 12772 ;;
 12773                           
 12774                           
 12775                           ;psect for function i1_I2C_DO_TX
 12776  02BA                     i1_I2C_DO_TX:	
 12777  02BA                     i1l6212:	
 12778                           ;incstack = 0
 12779 ;; hardware stack exceeded
 12780                           ; Regs used in i1_I2C_DO_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12781                           
 12782                           
 12783                           ;i2c_master.c: 356: if(I2C_MasterIsNack())
 12784  02BA  318E  2643  3182   	fcall	i1_I2C_MasterIsNack
 12785  02BD  3A00               	xorlw	0
 12786  02BE  1D03               	btfss	3,2
 12787  02BF  2ACA               	goto	i1l6230
 12788  02C0  2AE6               	goto	i1l401
 12789  02C1                     i1l6216:	
 12790                           ;i2c_master.c: 359: {
 12791                           ;i2c_master.c: 360: case I2C_RESTART_READ:
 12792                           
 12793                           ;i2c_master.c: 357: {
 12794                           ;i2c_master.c: 358: switch(I2C_Status.callbackTable[I2C_DATA_NACK](I2C_Status.callbackPa
      +                          yload[I2C_DATA_NACK]))
 12795                           
 12796                           
 12797                           ;i2c_master.c: 361: return I2C_DO_SEND_RESTART_READ();
 12798  02C1  318D  25F6         	fcall	i1_I2C_DO_SEND_RESTART_READ
 12799  02C3  0008               	return
 12800  02C4                     i1l6220:	
 12801                           ;i2c_master.c: 362: case I2C_RESTART_WRITE:
 12802                           
 12803                           
 12804                           ;i2c_master.c: 363: return I2C_DO_SEND_RESTART_WRITE();
 12805  02C4  318D  25FA         	fcall	i1_I2C_DO_SEND_RESTART_WRITE
 12806  02C6  0008               	return
 12807  02C7                     i1l6224:	
 12808                           ;i2c_master.c: 365: case I2C_CONTINUE:
 12809                           
 12810                           ;i2c_master.c: 364: default:
 12811                           
 12812                           
 12813                           ;i2c_master.c: 366: case I2C_STOP:
 12814                           ;i2c_master.c: 367: return I2C_DO_SEND_STOP();
 12815  02C7  318E  2602         	fcall	i1_I2C_DO_SEND_STOP
 12816                           
 12817                           ;i2c_master.c: 368: }
 12818  02C9  0008               	return
 12819  02CA                     i1l6230:	
 12820  02CA  0021               	movlb	1	; select bank1
 12821  02CB  082F               	movf	(low ((_I2C_Status| 0+15)))^(0+128),w
 12822  02CC  00FA               	movwf	??i1_I2C_DO_TX
 12823  02CD  087A               	movf	??i1_I2C_DO_TX,w
 12824  02CE  00F9               	movwf	i1I2C_CallbackReturnReset@funPtr
 12825  02CF  3006               	movlw	6
 12826  02D0  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
 12827  02D1  0086               	movwf	6
 12828  02D2  0187               	clrf	7
 12829  02D3  3F41               	moviw [1]fsr1
 12830  02D4  008A               	movwf	10
 12831  02D5  3F40               	moviw [0]fsr1
 12832  02D6  000A               	callw
 12833  02D7  3182               	pagesel	$
 12834                           
 12835                           ; Switch size 1, requested type "space"
 12836                           ; Number of cases is 4, Range of values is 1 to 4
 12837                           ; switch strategies available:
 12838                           ; Name         Instructions Cycles
 12839                           ; simple_byte           13     7 (average)
 12840                           ; direct_byte           17     9 (fixed)
 12841                           ; jumptable            263     9 (fixed)
 12842                           ;	Chosen strategy is simple_byte
 12843  02D8  3A01               	xorlw	1	; case 1
 12844  02D9  1903               	skipnz
 12845  02DA  2AC7               	goto	i1l6224
 12846  02DB  3A03               	xorlw	3	; case 2
 12847  02DC  1903               	skipnz
 12848  02DD  2AC1               	goto	i1l6216
 12849  02DE  3A01               	xorlw	1	; case 3
 12850  02DF  1903               	skipnz
 12851  02E0  2AC4               	goto	i1l6220
 12852  02E1  3A07               	xorlw	7	; case 4
 12853  02E2  1903               	skipnz
 12854  02E3  2AC7               	goto	i1l6224
 12855  02E4  2AC7               	goto	i1l6224
 12856                           
 12857                           ;i2c_master.c: 369: }
 12858  02E5  0008               	return
 12859  02E6                     i1l401:	
 12860                           
 12861                           ;i2c_master.c: 370: else
 12862                           ;i2c_master.c: 371: {
 12863                           ;i2c_master.c: 372: I2C_Status.addressNackCheck = 0;
 12864  02E6  0021               	movlb	1	; select bank1
 12865  02E7  103C               	bcf	(_I2C_Status^(0+128)+28),0
 12866                           
 12867                           ;i2c_master.c: 373: I2C_MasterSendTxData(*I2C_Status.data_ptr++);
 12868  02E8  3017               	movlw	23
 12869  02E9  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
 12870  02EA  0086               	movwf	6
 12871  02EB  0187               	clrf	7
 12872  02EC  3F40               	moviw [0]fsr1
 12873  02ED  0084               	movwf	4
 12874  02EE  0185               	clrf	5
 12875  02EF  0A81               	incf	1,f
 12876  02F0  0800               	movf	0,w
 12877  02F1  318E  262A  3182   	fcall	i1_I2C_MasterSendTxData
 12878                           
 12879                           ;i2c_master.c: 374: return (--I2C_Status.data_length)?I2C_TX:I2C_TX_EMPTY;
 12880  02F4  3001               	movlw	1
 12881  02F5  0021               	movlb	1	; select bank1
 12882  02F6  02B8               	subwf	(_I2C_Status^(0+128)+24),f
 12883  02F7  3000               	movlw	0
 12884  02F8  3BB9               	subwfb	((_I2C_Status+1)^(0+128)+24),f
 12885  02F9  0838               	movf	(_I2C_Status^(0+128)+24),w
 12886  02FA  0439               	iorwf	((_I2C_Status+1)^(0+128)+24),w
 12887  02FB  1D03               	btfss	3,2
 12888  02FC  2AFF               	goto	i1l6238
 12889  02FD  3006               	movlw	6
 12890  02FE  2B00               	goto	L4
 12891  02FF                     i1l6238:	
 12892  02FF  3003               	movlw	3
 12893  0300                     L4:	
 12894  0300  00FB               	movwf	i1_I2C_DO_TX$864
 12895  0301  3000               	movlw	0
 12896  0302  00FC               	movwf	i1_I2C_DO_TX$864+1
 12897  0303  087B               	movf	i1_I2C_DO_TX$864,w
 12898  0304  0008               	return
 12899  0305                     __end_ofi1_I2C_DO_TX:	
 12900                           
 12901                           	psect	text97
 12902  0E8B                     __ptext97:	
 12903 ;; *************** function i1_I2C_DO_SEND_ADR_WRITE *****************
 12904 ;; Defined at:
 12905 ;;		line 347 in file "mcc_generated_files/i2c_master.c"
 12906 ;; Parameters:    Size  Location     Type
 12907 ;;		None
 12908 ;; Auto vars:     Size  Location     Type
 12909 ;;		None
 12910 ;; Return value:  Size  Location     Type
 12911 ;;                  1    wreg      enum E12103
 12912 ;; Registers used:
 12913 ;;		wreg, status,2, status,0, pclath, cstack
 12914 ;; Tracked objects:
 12915 ;;		On entry : 0/0
 12916 ;;		On exit  : 0/0
 12917 ;;		Unchanged: 0/0
 12918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12922 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12923 ;;Total ram usage:        0 bytes
 12924 ;; Hardware stack levels used:    1
 12925 ;; Hardware stack levels required when called:    1
 12926 ;; This function calls:
 12927 ;;		i1_I2C_MasterSendTxData
 12928 ;; This function is called by:
 12929 ;; This function uses a non-reentrant model
 12930 ;;
 12931                           
 12932                           
 12933                           ;psect for function i1_I2C_DO_SEND_ADR_WRITE
 12934  0E8B                     i1_I2C_DO_SEND_ADR_WRITE:	
 12935  0E8B                     i1l2990:	
 12936                           ;incstack = 0
 12937 ;; hardware stack exceeded
 12938                           ; Regs used in i1_I2C_DO_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 12939                           
 12940                           
 12941                           ;i2c_master.c: 349: I2C_Status.addressNackCheck = 1;
 12942  0E8B  0021               	movlb	1	; select bank1
 12943  0E8C  143C               	bsf	(_I2C_Status^(0+128)+28),0
 12944                           
 12945                           ;i2c_master.c: 350: I2C_MasterSendTxData(I2C_Status.address << 1);
 12946  0E8D  3536               	lslf	(_I2C_Status^(0+128)+22),w
 12947  0E8E  318E  262A         	fcall	i1_I2C_MasterSendTxData
 12948                           
 12949                           ;i2c_master.c: 351: return I2C_TX;
 12950  0E90  3003               	movlw	3
 12951  0E91  0008               	return
 12952  0E92                     __end_ofi1_I2C_DO_SEND_ADR_WRITE:	
 12953                           
 12954                           	psect	text98
 12955  0EA1                     __ptext98:	
 12956 ;; *************** function i1_I2C_DO_SEND_ADR_READ *****************
 12957 ;; Defined at:
 12958 ;;		line 340 in file "mcc_generated_files/i2c_master.c"
 12959 ;; Parameters:    Size  Location     Type
 12960 ;;		None
 12961 ;; Auto vars:     Size  Location     Type
 12962 ;;		None
 12963 ;; Return value:  Size  Location     Type
 12964 ;;                  1    wreg      enum E12103
 12965 ;; Registers used:
 12966 ;;		wreg, status,2, status,0, pclath, cstack
 12967 ;; Tracked objects:
 12968 ;;		On entry : 0/0
 12969 ;;		On exit  : 0/0
 12970 ;;		Unchanged: 0/0
 12971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12975 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12976 ;;Total ram usage:        0 bytes
 12977 ;; Hardware stack levels used:    1
 12978 ;; Hardware stack levels required when called:    1
 12979 ;; This function calls:
 12980 ;;		i1_I2C_MasterSendTxData
 12981 ;; This function is called by:
 12982 ;; This function uses a non-reentrant model
 12983 ;;
 12984                           
 12985                           
 12986                           ;psect for function i1_I2C_DO_SEND_ADR_READ
 12987  0EA1                     i1_I2C_DO_SEND_ADR_READ:	
 12988  0EA1                     i1l2982:	
 12989                           ;incstack = 0
 12990 ;; hardware stack exceeded
 12991                           ; Regs used in i1_I2C_DO_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 12992                           
 12993                           
 12994                           ;i2c_master.c: 342: I2C_Status.addressNackCheck = 1;
 12995  0EA1  0021               	movlb	1	; select bank1
 12996  0EA2  143C               	bsf	(_I2C_Status^(0+128)+28),0
 12997                           
 12998                           ;i2c_master.c: 343: I2C_MasterSendTxData(I2C_Status.address << 1 | 1);
 12999  0EA3  1403               	setc
 13000  0EA4  0D36               	rlf	(_I2C_Status^(0+128)+22),w
 13001  0EA5  318E  262A         	fcall	i1_I2C_MasterSendTxData
 13002                           
 13003                           ;i2c_master.c: 344: return I2C_RCEN;
 13004  0EA7  3005               	movlw	5
 13005  0EA8  0008               	return
 13006  0EA9                     __end_ofi1_I2C_DO_SEND_ADR_READ:	
 13007                           
 13008                           	psect	text99
 13009  0E2F                     __ptext99:	
 13010 ;; *************** function i1_I2C_DO_IDLE *****************
 13011 ;; Defined at:
 13012 ;;		line 333 in file "mcc_generated_files/i2c_master.c"
 13013 ;; Parameters:    Size  Location     Type
 13014 ;;		None
 13015 ;; Auto vars:     Size  Location     Type
 13016 ;;		None
 13017 ;; Return value:  Size  Location     Type
 13018 ;;                  1    wreg      enum E12103
 13019 ;; Registers used:
 13020 ;;		wreg, status,2
 13021 ;; Tracked objects:
 13022 ;;		On entry : 0/0
 13023 ;;		On exit  : 0/0
 13024 ;;		Unchanged: 0/0
 13025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13030 ;;Total ram usage:        0 bytes
 13031 ;; Hardware stack levels used:    1
 13032 ;; This function calls:
 13033 ;;		Nothing
 13034 ;; This function is called by:
 13035 ;; This function uses a non-reentrant model
 13036 ;;
 13037                           
 13038                           
 13039                           ;psect for function i1_I2C_DO_IDLE
 13040  0E2F                     i1_I2C_DO_IDLE:	
 13041  0E2F                     i1l2974:	
 13042                           ;incstack = 0
 13043 ;; hardware stack exceeded
 13044                           ; Regs used in i1_I2C_DO_IDLE: [wreg+status,2]
 13045                           
 13046                           
 13047                           ;i2c_master.c: 335: I2C_Status.busy = 0;
 13048  0E2F  0021               	movlb	1	; select bank1
 13049  0E30  10BC               	bcf	(_I2C_Status^(0+128)+28),1
 13050                           
 13051                           ;i2c_master.c: 336: I2C_Status.error = I2C_NOERR;
 13052  0E31  01BB               	clrf	(_I2C_Status^(0+128)+27)
 13053                           
 13054                           ;i2c_master.c: 337: return I2C_RESET;
 13055  0E32  300E               	movlw	14
 13056  0E33  0008               	return
 13057  0E34                     __end_ofi1_I2C_DO_IDLE:	
 13058                           
 13059                           	psect	text100
 13060  05F8                     __ptext100:	
 13061 ;; *************** function i1_I2C_DO_TX_EMPTY *****************
 13062 ;; Defined at:
 13063 ;;		line 409 in file "mcc_generated_files/i2c_master.c"
 13064 ;; Parameters:    Size  Location     Type
 13065 ;;		None
 13066 ;; Auto vars:     Size  Location     Type
 13067 ;;		None
 13068 ;; Return value:  Size  Location     Type
 13069 ;;                  1    wreg      enum E12103
 13070 ;; Registers used:
 13071 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13072 ;; Tracked objects:
 13073 ;;		On entry : 0/0
 13074 ;;		On exit  : 0/0
 13075 ;;		Unchanged: 0/0
 13076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13079 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13080 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13081 ;;Total ram usage:        1 bytes
 13082 ;; Hardware stack levels used:    1
 13083 ;; Hardware stack levels required when called:    3
 13084 ;; This function calls:
 13085 ;;		Absolute function
 13086 ;;		i1_I2C_CallbackReturnReset
 13087 ;;		i1_I2C_CallbackReturnStop
 13088 ;;		i1_I2C_DO_SEND_RESTART
 13089 ;;		i1_I2C_DO_SEND_STOP
 13090 ;;		i1_I2C_MasterSetIrq
 13091 ;;		i1_rd1RegCompleteHandler
 13092 ;;		i1_rd2RegCompleteHandler
 13093 ;;		i1_rdBlkRegCompleteHandler
 13094 ;;		i1_wr1RegCompleteHandler
 13095 ;;		i1_wr2RegCompleteHandler
 13096 ;; This function is called by:
 13097 ;; This function uses a non-reentrant model
 13098 ;;
 13099                           
 13100                           
 13101                           ;psect for function i1_I2C_DO_TX_EMPTY
 13102  05F8                     i1_I2C_DO_TX_EMPTY:	
 13103  05F8                     i1l6268:	
 13104                           ;incstack = 0
 13105 ;; hardware stack exceeded
 13106                           ; Regs used in i1_I2C_DO_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13107                           
 13108                           
 13109                           ;i2c_master.c: 411: I2C_Status.bufferFree = 1;
 13110  05F8  0021               	movlb	1	; select bank1
 13111  05F9  15BC               	bsf	(_I2C_Status^(0+128)+28),3
 13112                           
 13113                           ;i2c_master.c: 412: switch(I2C_Status.callbackTable[I2C_DATA_COMPLETE](I2C_Status.callba
      +                          ckPayload[I2C_DATA_COMPLETE]))
 13114  05FA  2E05               	goto	i1l6286
 13115  05FB                     i1l6270:	
 13116                           ;i2c_master.c: 413: {
 13117                           ;i2c_master.c: 414: case I2C_RESTART_READ:
 13118                           
 13119                           
 13120                           ;i2c_master.c: 415: case I2C_RESTART_WRITE:
 13121                           ;i2c_master.c: 416: return I2C_DO_SEND_RESTART();
 13122  05FB  318D  25FE         	fcall	i1_I2C_DO_SEND_RESTART
 13123  05FD  0008               	return
 13124  05FE                     i1l6274:	
 13125                           ;i2c_master.c: 417: case I2C_CONTINUE:
 13126                           
 13127                           
 13128                           ;i2c_master.c: 418: I2C_MasterSetIrq();
 13129  05FE  318D  25C6         	fcall	i1_I2C_MasterSetIrq
 13130                           
 13131                           ;i2c_master.c: 419: return I2C_TX;
 13132  0600  3003               	movlw	3
 13133  0601  0008               	return
 13134  0602                     i1l6280:	
 13135                           ;i2c_master.c: 421: case I2C_STOP:
 13136                           
 13137                           ;i2c_master.c: 420: default:
 13138                           
 13139                           
 13140                           ;i2c_master.c: 422: return I2C_DO_SEND_STOP();
 13141  0602  318E  2602         	fcall	i1_I2C_DO_SEND_STOP
 13142                           
 13143                           ;i2c_master.c: 423: }
 13144  0604  0008               	return
 13145  0605                     i1l6286:	
 13146  0605  0021               	movlb	1	; select bank1
 13147  0606  082C               	movf	(low ((_I2C_Status| 0+12)))^(0+128),w
 13148  0607  00FA               	movwf	??i1_I2C_DO_TX_EMPTY
 13149  0608  087A               	movf	??i1_I2C_DO_TX_EMPTY,w
 13150  0609  00F9               	movwf	i1I2C_CallbackReturnReset@funPtr
 13151  060A  0821               	movf	(_I2C_Status+1)^(0+128),w
 13152  060B  008A               	movwf	10
 13153  060C  0820               	movf	_I2C_Status^(0+128),w
 13154  060D  000A               	callw
 13155  060E  3185               	pagesel	$
 13156                           
 13157                           ; Switch size 1, requested type "space"
 13158                           ; Number of cases is 4, Range of values is 1 to 4
 13159                           ; switch strategies available:
 13160                           ; Name         Instructions Cycles
 13161                           ; simple_byte           13     7 (average)
 13162                           ; direct_byte           17     9 (fixed)
 13163                           ; jumptable            263     9 (fixed)
 13164                           ;	Chosen strategy is simple_byte
 13165  060F  3A01               	xorlw	1	; case 1
 13166  0610  1903               	skipnz
 13167  0611  2E02               	goto	i1l6280
 13168  0612  3A03               	xorlw	3	; case 2
 13169  0613  1903               	skipnz
 13170  0614  2DFB               	goto	i1l6270
 13171  0615  3A01               	xorlw	1	; case 3
 13172  0616  1903               	skipnz
 13173  0617  2DFB               	goto	i1l6270
 13174  0618  3A07               	xorlw	7	; case 4
 13175  0619  1903               	skipnz
 13176  061A  2DFE               	goto	i1l6274
 13177  061B  2E02               	goto	i1l6280
 13178  061C  0008               	return
 13179  061D                     __end_ofi1_I2C_DO_TX_EMPTY:	
 13180                           
 13181                           	psect	text101
 13182  0DC6                     __ptext101:	
 13183 ;; *************** function i1_I2C_MasterSetIrq *****************
 13184 ;; Defined at:
 13185 ;;		line 645 in file "mcc_generated_files/i2c_master.c"
 13186 ;; Parameters:    Size  Location     Type
 13187 ;;		None
 13188 ;; Auto vars:     Size  Location     Type
 13189 ;;		None
 13190 ;; Return value:  Size  Location     Type
 13191 ;;                  1    wreg      void 
 13192 ;; Registers used:
 13193 ;;		None
 13194 ;; Tracked objects:
 13195 ;;		On entry : 0/0
 13196 ;;		On exit  : 0/0
 13197 ;;		Unchanged: 0/0
 13198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13203 ;;Total ram usage:        0 bytes
 13204 ;; Hardware stack levels used:    1
 13205 ;; This function calls:
 13206 ;;		Nothing
 13207 ;; This function is called by:
 13208 ;;		i1_I2C_DO_TX_EMPTY
 13209 ;; This function uses a non-reentrant model
 13210 ;;
 13211                           
 13212                           
 13213                           ;psect for function i1_I2C_MasterSetIrq
 13214  0DC6                     i1_I2C_MasterSetIrq:	
 13215                           
 13216                           ;i2c_master.c: 647: PIR1bits.SSP1IF = 1;
 13217                           
 13218                           ;incstack = 0
 13219 ;; hardware stack exceeded
 13220                           ; Regs used in i1_I2C_MasterSetIrq: []
 13221  0DC6  0020               	movlb	0	; select bank0
 13222  0DC7  1590               	bsf	16,3	;volatile
 13223  0DC8  0008               	return
 13224  0DC9                     __end_ofi1_I2C_MasterSetIrq:	
 13225                           
 13226                           	psect	text102
 13227  0E43                     __ptext102:	
 13228 ;; *************** function i1_I2C_MasterIsNack *****************
 13229 ;; Defined at:
 13230 ;;		line 598 in file "mcc_generated_files/i2c_master.c"
 13231 ;; Parameters:    Size  Location     Type
 13232 ;;		None
 13233 ;; Auto vars:     Size  Location     Type
 13234 ;;		None
 13235 ;; Return value:  Size  Location     Type
 13236 ;;                  1    wreg      unsigned char 
 13237 ;; Registers used:
 13238 ;;		wreg, status,2, status,0
 13239 ;; Tracked objects:
 13240 ;;		On entry : 0/0
 13241 ;;		On exit  : 0/0
 13242 ;;		Unchanged: 0/0
 13243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13248 ;;Total ram usage:        0 bytes
 13249 ;; Hardware stack levels used:    1
 13250 ;; This function calls:
 13251 ;;		Nothing
 13252 ;; This function is called by:
 13253 ;;		i1_I2C_MasterFsm
 13254 ;;		i1_I2C_DO_TX
 13255 ;; This function uses a non-reentrant model
 13256 ;;
 13257                           
 13258                           
 13259                           ;psect for function i1_I2C_MasterIsNack
 13260  0E43                     i1_I2C_MasterIsNack:	
 13261                           
 13262                           ;i2c_master.c: 600: return SSP1CON2bits.ACKSTAT;
 13263                           
 13264                           ;incstack = 0
 13265 ;; hardware stack exceeded
 13266                           ; Regs used in i1_I2C_MasterIsNack: [wreg+status,2+status,0]
 13267  0E43  0024               	movlb	4	; select bank4
 13268  0E44  0E16               	swapf	22,w	;volatile
 13269  0E45  0C89               	rrf	9,f
 13270  0E46  0C89               	rrf	9,f
 13271  0E47  3901               	andlw	1
 13272  0E48  0008               	return
 13273  0E49                     __end_ofi1_I2C_MasterIsNack:	
 13274                           
 13275                           	psect	text103
 13276  0E2A                     __ptext103:	
 13277 ;; *************** function i1_I2C_MasterSendTxData *****************
 13278 ;; Defined at:
 13279 ;;		line 568 in file "mcc_generated_files/i2c_master.c"
 13280 ;; Parameters:    Size  Location     Type
 13281 ;;  data            1    wreg     unsigned char 
 13282 ;; Auto vars:     Size  Location     Type
 13283 ;;  data            1    0[COMMON] unsigned char 
 13284 ;; Return value:  Size  Location     Type
 13285 ;;                  1    wreg      void 
 13286 ;; Registers used:
 13287 ;;		wreg
 13288 ;; Tracked objects:
 13289 ;;		On entry : 0/0
 13290 ;;		On exit  : 0/0
 13291 ;;		Unchanged: 0/0
 13292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13294 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13296 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13297 ;;Total ram usage:        1 bytes
 13298 ;; Hardware stack levels used:    1
 13299 ;; This function calls:
 13300 ;;		Nothing
 13301 ;; This function is called by:
 13302 ;;		i1_I2C_DO_SEND_ADR_READ
 13303 ;;		i1_I2C_DO_SEND_ADR_WRITE
 13304 ;;		i1_I2C_DO_TX
 13305 ;; This function uses a non-reentrant model
 13306 ;;
 13307                           
 13308                           
 13309                           ;psect for function i1_I2C_MasterSendTxData
 13310  0E2A                     i1_I2C_MasterSendTxData:	
 13311                           
 13312                           ;incstack = 0
 13313 ;; hardware stack exceeded
 13314                           ; Regs used in i1_I2C_MasterSendTxData: [wreg]
 13315                           ;i1I2C_MasterSendTxData@data stored from wreg
 13316  0E2A  00F0               	movwf	i1I2C_MasterSendTxData@data
 13317                           
 13318                           ;i2c_master.c: 570: SSP1BUF = data;
 13319  0E2B  0870               	movf	i1I2C_MasterSendTxData@data,w
 13320  0E2C  0024               	movlb	4	; select bank4
 13321  0E2D  0091               	movwf	17	;volatile
 13322  0E2E  0008               	return
 13323  0E2F                     __end_ofi1_I2C_MasterSendTxData:	
 13324                           
 13325                           	psect	text104
 13326  0DF2                     __ptext104:	
 13327 ;; *************** function i1_I2C_MasterSendAck *****************
 13328 ;; Defined at:
 13329 ;;		line 603 in file "mcc_generated_files/i2c_master.c"
 13330 ;; Parameters:    Size  Location     Type
 13331 ;;		None
 13332 ;; Auto vars:     Size  Location     Type
 13333 ;;		None
 13334 ;; Return value:  Size  Location     Type
 13335 ;;                  1    wreg      void 
 13336 ;; Registers used:
 13337 ;;		None
 13338 ;; Tracked objects:
 13339 ;;		On entry : 0/0
 13340 ;;		On exit  : 0/0
 13341 ;;		Unchanged: 0/0
 13342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13346 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13347 ;;Total ram usage:        0 bytes
 13348 ;; Hardware stack levels used:    1
 13349 ;; This function calls:
 13350 ;;		Nothing
 13351 ;; This function is called by:
 13352 ;;		i1_I2C_DO_RX
 13353 ;;		i1_I2C_DO_RX_ACK
 13354 ;; This function uses a non-reentrant model
 13355 ;;
 13356                           
 13357                           
 13358                           ;psect for function i1_I2C_MasterSendAck
 13359  0DF2                     i1_I2C_MasterSendAck:	
 13360                           
 13361                           ;i2c_master.c: 605: SSP1CON2bits.ACKDT = 0;
 13362                           
 13363                           ;incstack = 0
 13364 ;; hardware stack exceeded
 13365                           ; Regs used in i1_I2C_MasterSendAck: []
 13366  0DF2  0024               	movlb	4	; select bank4
 13367  0DF3  1296               	bcf	22,5	;volatile
 13368                           
 13369                           ;i2c_master.c: 606: SSP1CON2bits.ACKEN = 1;
 13370  0DF4  1616               	bsf	22,4	;volatile
 13371  0DF5  0008               	return
 13372  0DF6                     __end_ofi1_I2C_MasterSendAck:	
 13373                           
 13374                           	psect	text105
 13375  0DC3                     __ptext105:	
 13376 ;; *************** function i1_I2C_MasterGetRxData *****************
 13377 ;; Defined at:
 13378 ;;		line 563 in file "mcc_generated_files/i2c_master.c"
 13379 ;; Parameters:    Size  Location     Type
 13380 ;;		None
 13381 ;; Auto vars:     Size  Location     Type
 13382 ;;		None
 13383 ;; Return value:  Size  Location     Type
 13384 ;;                  1    wreg      unsigned char 
 13385 ;; Registers used:
 13386 ;;		wreg
 13387 ;; Tracked objects:
 13388 ;;		On entry : 0/0
 13389 ;;		On exit  : 0/0
 13390 ;;		Unchanged: 0/0
 13391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13396 ;;Total ram usage:        0 bytes
 13397 ;; Hardware stack levels used:    1
 13398 ;; This function calls:
 13399 ;;		Nothing
 13400 ;; This function is called by:
 13401 ;;		i1_I2C_DO_RX
 13402 ;; This function uses a non-reentrant model
 13403 ;;
 13404                           
 13405                           
 13406                           ;psect for function i1_I2C_MasterGetRxData
 13407  0DC3                     i1_I2C_MasterGetRxData:	
 13408                           
 13409                           ;i2c_master.c: 565: return SSP1BUF;
 13410                           
 13411                           ;incstack = 0
 13412 ;; hardware stack exceeded
 13413                           ; Regs used in i1_I2C_MasterGetRxData: [wreg]
 13414  0DC3  0024               	movlb	4	; select bank4
 13415  0DC4  0811               	movf	17,w	;volatile
 13416  0DC5  0008               	return
 13417  0DC6                     __end_ofi1_I2C_MasterGetRxData:	
 13418                           
 13419                           	psect	text106
 13420  0DEE                     __ptext106:	
 13421 ;; *************** function i1_I2C_MasterSendNack *****************
 13422 ;; Defined at:
 13423 ;;		line 609 in file "mcc_generated_files/i2c_master.c"
 13424 ;; Parameters:    Size  Location     Type
 13425 ;;		None
 13426 ;; Auto vars:     Size  Location     Type
 13427 ;;		None
 13428 ;; Return value:  Size  Location     Type
 13429 ;;                  1    wreg      void 
 13430 ;; Registers used:
 13431 ;;		None
 13432 ;; Tracked objects:
 13433 ;;		On entry : 0/0
 13434 ;;		On exit  : 0/0
 13435 ;;		Unchanged: 0/0
 13436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13441 ;;Total ram usage:        0 bytes
 13442 ;; Hardware stack levels used:    1
 13443 ;; This function calls:
 13444 ;;		Nothing
 13445 ;; This function is called by:
 13446 ;;		i1_I2C_DO_RX_NACK_STOP
 13447 ;;		i1_I2C_DO_RX_NACK_RESTART
 13448 ;; This function uses a non-reentrant model
 13449 ;;
 13450                           
 13451                           
 13452                           ;psect for function i1_I2C_MasterSendNack
 13453  0DEE                     i1_I2C_MasterSendNack:	
 13454                           
 13455                           ;i2c_master.c: 611: SSP1CON2bits.ACKDT = 1;
 13456                           
 13457                           ;incstack = 0
 13458 ;; hardware stack exceeded
 13459                           ; Regs used in i1_I2C_MasterSendNack: []
 13460  0DEE  0024               	movlb	4	; select bank4
 13461  0DEF  1696               	bsf	22,5	;volatile
 13462                           
 13463                           ;i2c_master.c: 612: SSP1CON2bits.ACKEN = 1;
 13464  0DF0  1616               	bsf	22,4	;volatile
 13465  0DF1  0008               	return
 13466  0DF2                     __end_ofi1_I2C_MasterSendNack:	
 13467                           
 13468                           	psect	text107
 13469  0DC0                     __ptext107:	
 13470 ;; *************** function i1_I2C_MasterStartRx *****************
 13471 ;; Defined at:
 13472 ;;		line 583 in file "mcc_generated_files/i2c_master.c"
 13473 ;; Parameters:    Size  Location     Type
 13474 ;;		None
 13475 ;; Auto vars:     Size  Location     Type
 13476 ;;		None
 13477 ;; Return value:  Size  Location     Type
 13478 ;;                  1    wreg      void 
 13479 ;; Registers used:
 13480 ;;		None
 13481 ;; Tracked objects:
 13482 ;;		On entry : 0/0
 13483 ;;		On exit  : 0/0
 13484 ;;		Unchanged: 0/0
 13485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13490 ;;Total ram usage:        0 bytes
 13491 ;; Hardware stack levels used:    1
 13492 ;; This function calls:
 13493 ;;		Nothing
 13494 ;; This function is called by:
 13495 ;;		i1_I2C_DO_RCEN
 13496 ;; This function uses a non-reentrant model
 13497 ;;
 13498                           
 13499                           
 13500                           ;psect for function i1_I2C_MasterStartRx
 13501  0DC0                     i1_I2C_MasterStartRx:	
 13502                           
 13503                           ;i2c_master.c: 585: SSP1CON2bits.RCEN = 1;
 13504                           
 13505                           ;incstack = 0
 13506 ;; hardware stack exceeded
 13507                           ; Regs used in i1_I2C_MasterStartRx: []
 13508  0DC0  0024               	movlb	4	; select bank4
 13509  0DC1  1596               	bsf	22,3	;volatile
 13510  0DC2  0008               	return
 13511  0DC3                     __end_ofi1_I2C_MasterStartRx:	
 13512                           
 13513                           	psect	text108
 13514  0002                     __ptext108:	
 13515 ;; *************** function i1_I2C_CallbackReturnReset *****************
 13516 ;; Defined at:
 13517 ;;		line 525 in file "mcc_generated_files/i2c_master.c"
 13518 ;; Parameters:    Size  Location     Type
 13519 ;;  funPtr          1    9[COMMON] PTR void 
 13520 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 13521 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 13522 ;; Auto vars:     Size  Location     Type
 13523 ;;		None
 13524 ;; Return value:  Size  Location     Type
 13525 ;;                  1    wreg      enum E97
 13526 ;; Registers used:
 13527 ;;		wreg
 13528 ;; Tracked objects:
 13529 ;;		On entry : 0/0
 13530 ;;		On exit  : 0/0
 13531 ;;		Unchanged: 0/0
 13532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13533 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13536 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13537 ;;Total ram usage:        1 bytes
 13538 ;; Hardware stack levels used:    1
 13539 ;; This function calls:
 13540 ;;		Nothing
 13541 ;; This function is called by:
 13542 ;;		i1_I2C_Open
 13543 ;;		i1_I2C_DO_TX
 13544 ;;		i1_I2C_DO_RX
 13545 ;;		i1_I2C_DO_TX_EMPTY
 13546 ;;		i1_I2C_DO_ADDRESS_NACK
 13547 ;;		_I2C_DO_TX
 13548 ;;		_I2C_DO_RX
 13549 ;;		_I2C_DO_TX_EMPTY
 13550 ;;		_I2C_DO_ADDRESS_NACK
 13551 ;;		_I2C_DO_RX_EMPTY
 13552 ;; This function uses a non-reentrant model
 13553 ;;
 13554                           
 13555                           
 13556                           ;psect for function i1_I2C_CallbackReturnReset
 13557  0002                     i1_I2C_CallbackReturnReset:	
 13558  0002                     i1l2948:	
 13559                           ;incstack = 0
 13560 ;; hardware stack exceeded
 13561                           ; Regs used in i1_I2C_CallbackReturnReset: [wreg]
 13562                           
 13563                           
 13564                           ;i2c_master.c: 527: return I2C_RESET_LINK;
 13565  0002  3005               	movlw	5
 13566  0003  0008               	return
 13567  0004                     __end_ofi1_I2C_CallbackReturnReset:	
 13568                           
 13569                           	psect	text109
 13570  0DA6                     __ptext109:	
 13571 ;; *************** function i1_I2C_CallbackReturnStop *****************
 13572 ;; Defined at:
 13573 ;;		line 520 in file "mcc_generated_files/i2c_master.c"
 13574 ;; Parameters:    Size  Location     Type
 13575 ;;  funPtr          1    9[COMMON] PTR void 
 13576 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 13577 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 13578 ;; Auto vars:     Size  Location     Type
 13579 ;;		None
 13580 ;; Return value:  Size  Location     Type
 13581 ;;                  1    wreg      enum E97
 13582 ;; Registers used:
 13583 ;;		wreg
 13584 ;; Tracked objects:
 13585 ;;		On entry : 0/0
 13586 ;;		On exit  : 0/0
 13587 ;;		Unchanged: 0/0
 13588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13589 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13592 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13593 ;;Total ram usage:        1 bytes
 13594 ;; Hardware stack levels used:    1
 13595 ;; This function calls:
 13596 ;;		Nothing
 13597 ;; This function is called by:
 13598 ;;		i1_I2C_Open
 13599 ;;		i1_I2C_SetCallback
 13600 ;;		i1_I2C_DO_TX
 13601 ;;		i1_I2C_DO_RX
 13602 ;;		i1_I2C_DO_TX_EMPTY
 13603 ;;		i1_I2C_DO_ADDRESS_NACK
 13604 ;;		_I2C_DO_TX
 13605 ;;		_I2C_DO_RX
 13606 ;;		_I2C_DO_TX_EMPTY
 13607 ;;		_I2C_DO_ADDRESS_NACK
 13608 ;;		_I2C_DO_RX_EMPTY
 13609 ;; This function uses a non-reentrant model
 13610 ;;
 13611                           
 13612                           
 13613                           ;psect for function i1_I2C_CallbackReturnStop
 13614  0DA6                     i1_I2C_CallbackReturnStop:	
 13615  0DA6                     i1l2944:	
 13616                           ;incstack = 0
 13617 ;; hardware stack exceeded
 13618                           ; Regs used in i1_I2C_CallbackReturnStop: [wreg]
 13619                           
 13620                           
 13621                           ;i2c_master.c: 522: return I2C_STOP;
 13622  0DA6  3001               	movlw	1
 13623  0DA7  0008               	return
 13624  0DA8                     __end_ofi1_I2C_CallbackReturnStop:	
 13625                           
 13626                           	psect	text110
 13627  0712                     __ptext110:	
 13628 ;; *************** function i1_rdBlkRegCompleteHandler *****************
 13629 ;; Defined at:
 13630 ;;		line 170 in file "mcc_generated_files/examples/i2c_master_example.c"
 13631 ;; Parameters:    Size  Location     Type
 13632 ;;  ptr             1    9[COMMON] PTR void 
 13633 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 13634 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 13635 ;; Auto vars:     Size  Location     Type
 13636 ;;		None
 13637 ;; Return value:  Size  Location     Type
 13638 ;;                  1    wreg      enum E97
 13639 ;; Registers used:
 13640 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13641 ;; Tracked objects:
 13642 ;;		On entry : 0/0
 13643 ;;		On exit  : 0/0
 13644 ;;		Unchanged: 0/0
 13645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13646 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13649 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13650 ;;Total ram usage:        1 bytes
 13651 ;; Hardware stack levels used:    1
 13652 ;; Hardware stack levels required when called:    2
 13653 ;; This function calls:
 13654 ;;		i1_I2C_SetBuffer
 13655 ;;		i1_I2C_SetDataCompleteCallback
 13656 ;; This function is called by:
 13657 ;; This function uses a non-reentrant model
 13658 ;;
 13659                           
 13660                           
 13661                           ;psect for function i1_rdBlkRegCompleteHandler
 13662  0712                     i1_rdBlkRegCompleteHandler:	
 13663  0712                     i1l2902:	
 13664                           ;incstack = 0
 13665 ;; hardware stack exceeded
 13666                           ; Regs used in i1_rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 13667                           
 13668                           
 13669                           ;i2c_master_example.c: 172: I2C_SetBuffer(((i2c_buffer_t *)ptr)->data,((i2c_buffer_t*)pt
      +                          r)->len);
 13670  0712  0879               	movf	i1rdBlkRegCompleteHandler@ptr,w
 13671  0713  0086               	movwf	6
 13672  0714  0187               	clrf	7
 13673  0715  3F40               	moviw [0]fsr1
 13674  0716  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 13675  0717  3F41               	moviw [1]fsr1
 13676  0718  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 13677  0719  0879               	movf	i1rdBlkRegCompleteHandler@ptr,w
 13678  071A  3E02               	addlw	2
 13679  071B  0086               	movwf	6
 13680  071C  0187               	clrf	7
 13681  071D  0801               	movf	1,w
 13682  071E  318F  27AE  3187   	fcall	i1_I2C_SetBuffer
 13683                           
 13684                           ;i2c_master_example.c: 173: I2C_SetDataCompleteCallback((0),(0));
 13685  0721  3000               	movlw	0
 13686  0722  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 13687  0723  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 13688  0724  01F7               	clrf	i1I2C_SetDataCompleteCallback@ptr
 13689  0725  318F  2758         	fcall	i1_I2C_SetDataCompleteCallback
 13690                           
 13691                           ;i2c_master_example.c: 174: return I2C_RESTART_READ;
 13692  0727  3002               	movlw	2
 13693  0728  0008               	return
 13694  0729                     __end_ofi1_rdBlkRegCompleteHandler:	
 13695                           
 13696                           	psect	text111
 13697  07ED                     __ptext111:	
 13698 ;; *************** function i1_wr1RegCompleteHandler *****************
 13699 ;; Defined at:
 13700 ;;		line 156 in file "mcc_generated_files/examples/i2c_master_example.c"
 13701 ;; Parameters:    Size  Location     Type
 13702 ;;  ptr             1    9[COMMON] PTR void 
 13703 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 13704 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 13705 ;; Auto vars:     Size  Location     Type
 13706 ;;		None
 13707 ;; Return value:  Size  Location     Type
 13708 ;;                  1    wreg      enum E97
 13709 ;; Registers used:
 13710 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13711 ;; Tracked objects:
 13712 ;;		On entry : 0/0
 13713 ;;		On exit  : 0/0
 13714 ;;		Unchanged: 0/0
 13715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13716 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13719 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13720 ;;Total ram usage:        1 bytes
 13721 ;; Hardware stack levels used:    1
 13722 ;; Hardware stack levels required when called:    2
 13723 ;; This function calls:
 13724 ;;		i1_I2C_SetBuffer
 13725 ;;		i1_I2C_SetDataCompleteCallback
 13726 ;; This function is called by:
 13727 ;;		i1_I2C_Write1ByteRegister
 13728 ;;		i1_I2C_DO_TX
 13729 ;;		i1_I2C_DO_RX
 13730 ;;		i1_I2C_DO_TX_EMPTY
 13731 ;;		i1_I2C_DO_ADDRESS_NACK
 13732 ;;		_I2C_DO_TX
 13733 ;;		_I2C_DO_RX
 13734 ;;		_I2C_DO_TX_EMPTY
 13735 ;;		_I2C_DO_ADDRESS_NACK
 13736 ;;		_I2C_DO_RX_EMPTY
 13737 ;; This function uses a non-reentrant model
 13738 ;;
 13739                           
 13740                           
 13741                           ;psect for function i1_wr1RegCompleteHandler
 13742  07ED                     i1_wr1RegCompleteHandler:	
 13743  07ED                     i1l2886:	
 13744                           ;incstack = 0
 13745 ;; hardware stack exceeded
 13746                           ; Regs used in i1_wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13747                           
 13748                           
 13749                           ;i2c_master_example.c: 158: I2C_SetBuffer(ptr,1);
 13750  07ED  3001               	movlw	1
 13751  07EE  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 13752  07EF  3000               	movlw	0
 13753  07F0  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 13754  07F1  0879               	movf	i1wr1RegCompleteHandler@ptr,w
 13755  07F2  318F  27AE  3187   	fcall	i1_I2C_SetBuffer
 13756                           
 13757                           ;i2c_master_example.c: 159: I2C_SetDataCompleteCallback((0),(0));
 13758  07F5  3000               	movlw	0
 13759  07F6  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 13760  07F7  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 13761  07F8  01F7               	clrf	i1I2C_SetDataCompleteCallback@ptr
 13762  07F9  318F  2758         	fcall	i1_I2C_SetDataCompleteCallback
 13763                           
 13764                           ;i2c_master_example.c: 160: return I2C_CONTINUE;
 13765  07FB  3004               	movlw	4
 13766  07FC  0008               	return
 13767  07FD                     __end_ofi1_wr1RegCompleteHandler:	
 13768                           
 13769                           	psect	text112
 13770  0FDC                     __ptext112:	
 13771 ;; *************** function i1_rd2RegCompleteHandler *****************
 13772 ;; Defined at:
 13773 ;;		line 149 in file "mcc_generated_files/examples/i2c_master_example.c"
 13774 ;; Parameters:    Size  Location     Type
 13775 ;;  ptr             1    9[COMMON] PTR void 
 13776 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 13777 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 13778 ;; Auto vars:     Size  Location     Type
 13779 ;;		None
 13780 ;; Return value:  Size  Location     Type
 13781 ;;                  1    wreg      enum E97
 13782 ;; Registers used:
 13783 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13784 ;; Tracked objects:
 13785 ;;		On entry : 0/0
 13786 ;;		On exit  : 0/0
 13787 ;;		Unchanged: 0/0
 13788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13789 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13792 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13793 ;;Total ram usage:        1 bytes
 13794 ;; Hardware stack levels used:    1
 13795 ;; Hardware stack levels required when called:    2
 13796 ;; This function calls:
 13797 ;;		i1_I2C_SetBuffer
 13798 ;;		i1_I2C_SetDataCompleteCallback
 13799 ;; This function is called by:
 13800 ;; This function uses a non-reentrant model
 13801 ;;
 13802                           
 13803                           
 13804                           ;psect for function i1_rd2RegCompleteHandler
 13805  0FDC                     i1_rd2RegCompleteHandler:	
 13806  0FDC                     i1l2878:	
 13807                           ;incstack = 0
 13808 ;; hardware stack exceeded
 13809                           ; Regs used in i1_rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13810                           
 13811                           
 13812                           ;i2c_master_example.c: 151: I2C_SetBuffer(ptr,2);
 13813  0FDC  3002               	movlw	2
 13814  0FDD  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 13815  0FDE  3000               	movlw	0
 13816  0FDF  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 13817  0FE0  0879               	movf	i1rd2RegCompleteHandler@ptr,w
 13818  0FE1  318F  27AE  318F   	fcall	i1_I2C_SetBuffer
 13819                           
 13820                           ;i2c_master_example.c: 152: I2C_SetDataCompleteCallback((0),(0));
 13821  0FE4  3000               	movlw	0
 13822  0FE5  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 13823  0FE6  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 13824  0FE7  01F7               	clrf	i1I2C_SetDataCompleteCallback@ptr
 13825  0FE8  318F  2758         	fcall	i1_I2C_SetDataCompleteCallback
 13826                           
 13827                           ;i2c_master_example.c: 153: return I2C_RESTART_READ;
 13828  0FEA  3002               	movlw	2
 13829  0FEB  0008               	return
 13830  0FEC                     __end_ofi1_rd2RegCompleteHandler:	
 13831                           
 13832                           	psect	text113
 13833  0FCC                     __ptext113:	
 13834 ;; *************** function i1_rd1RegCompleteHandler *****************
 13835 ;; Defined at:
 13836 ;;		line 142 in file "mcc_generated_files/examples/i2c_master_example.c"
 13837 ;; Parameters:    Size  Location     Type
 13838 ;;  ptr             1    9[COMMON] PTR void 
 13839 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 13840 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 13841 ;; Auto vars:     Size  Location     Type
 13842 ;;		None
 13843 ;; Return value:  Size  Location     Type
 13844 ;;                  1    wreg      enum E97
 13845 ;; Registers used:
 13846 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13847 ;; Tracked objects:
 13848 ;;		On entry : 0/0
 13849 ;;		On exit  : 0/0
 13850 ;;		Unchanged: 0/0
 13851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13852 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13855 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13856 ;;Total ram usage:        1 bytes
 13857 ;; Hardware stack levels used:    1
 13858 ;; Hardware stack levels required when called:    2
 13859 ;; This function calls:
 13860 ;;		i1_I2C_SetBuffer
 13861 ;;		i1_I2C_SetDataCompleteCallback
 13862 ;; This function is called by:
 13863 ;;		_I2C_Read1ByteRegister
 13864 ;;		i1_I2C_DO_TX
 13865 ;;		i1_I2C_DO_RX
 13866 ;;		i1_I2C_DO_TX_EMPTY
 13867 ;;		i1_I2C_DO_ADDRESS_NACK
 13868 ;;		_I2C_DO_TX
 13869 ;;		_I2C_DO_RX
 13870 ;;		_I2C_DO_TX_EMPTY
 13871 ;;		_I2C_DO_ADDRESS_NACK
 13872 ;;		_I2C_DO_RX_EMPTY
 13873 ;; This function uses a non-reentrant model
 13874 ;;
 13875                           
 13876                           
 13877                           ;psect for function i1_rd1RegCompleteHandler
 13878  0FCC                     i1_rd1RegCompleteHandler:	
 13879  0FCC                     i1l2870:	
 13880                           ;incstack = 0
 13881 ;; hardware stack exceeded
 13882                           ; Regs used in i1_rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13883                           
 13884                           
 13885                           ;i2c_master_example.c: 144: I2C_SetBuffer(ptr,1);
 13886  0FCC  3001               	movlw	1
 13887  0FCD  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 13888  0FCE  3000               	movlw	0
 13889  0FCF  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 13890  0FD0  0879               	movf	i1rd1RegCompleteHandler@ptr,w
 13891  0FD1  318F  27AE  318F   	fcall	i1_I2C_SetBuffer
 13892                           
 13893                           ;i2c_master_example.c: 145: I2C_SetDataCompleteCallback((0),(0));
 13894  0FD4  3000               	movlw	0
 13895  0FD5  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 13896  0FD6  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 13897  0FD7  01F7               	clrf	i1I2C_SetDataCompleteCallback@ptr
 13898  0FD8  318F  2758         	fcall	i1_I2C_SetDataCompleteCallback
 13899                           
 13900                           ;i2c_master_example.c: 146: return I2C_RESTART_READ;
 13901  0FDA  3002               	movlw	2
 13902  0FDB  0008               	return
 13903  0FDC                     __end_ofi1_rd1RegCompleteHandler:	
 13904                           
 13905                           	psect	text114
 13906  0FBC                     __ptext114:	
 13907 ;; *************** function i1_wr2RegCompleteHandler *****************
 13908 ;; Defined at:
 13909 ;;		line 163 in file "mcc_generated_files/examples/i2c_master_example.c"
 13910 ;; Parameters:    Size  Location     Type
 13911 ;;  ptr             1    9[COMMON] PTR void 
 13912 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 13913 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 13914 ;; Auto vars:     Size  Location     Type
 13915 ;;		None
 13916 ;; Return value:  Size  Location     Type
 13917 ;;                  1    wreg      enum E97
 13918 ;; Registers used:
 13919 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13920 ;; Tracked objects:
 13921 ;;		On entry : 0/0
 13922 ;;		On exit  : 0/0
 13923 ;;		Unchanged: 0/0
 13924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13925 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13928 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13929 ;;Total ram usage:        1 bytes
 13930 ;; Hardware stack levels used:    1
 13931 ;; Hardware stack levels required when called:    2
 13932 ;; This function calls:
 13933 ;;		i1_I2C_SetBuffer
 13934 ;;		i1_I2C_SetDataCompleteCallback
 13935 ;; This function is called by:
 13936 ;; This function uses a non-reentrant model
 13937 ;;
 13938                           
 13939                           
 13940                           ;psect for function i1_wr2RegCompleteHandler
 13941  0FBC                     i1_wr2RegCompleteHandler:	
 13942  0FBC                     i1l2894:	
 13943                           ;incstack = 0
 13944 ;; hardware stack exceeded
 13945                           ; Regs used in i1_wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13946                           
 13947                           
 13948                           ;i2c_master_example.c: 165: I2C_SetBuffer(ptr,2);
 13949  0FBC  3002               	movlw	2
 13950  0FBD  00F0               	movwf	i1I2C_SetBuffer@bufferSize
 13951  0FBE  3000               	movlw	0
 13952  0FBF  00F1               	movwf	i1I2C_SetBuffer@bufferSize+1
 13953  0FC0  0879               	movf	i1wr2RegCompleteHandler@ptr,w
 13954  0FC1  318F  27AE  318F   	fcall	i1_I2C_SetBuffer
 13955                           
 13956                           ;i2c_master_example.c: 166: I2C_SetDataCompleteCallback((0),(0));
 13957  0FC4  3000               	movlw	0
 13958  0FC5  00F5               	movwf	i1I2C_SetDataCompleteCallback@cb
 13959  0FC6  00F6               	movwf	i1I2C_SetDataCompleteCallback@cb+1
 13960  0FC7  01F7               	clrf	i1I2C_SetDataCompleteCallback@ptr
 13961  0FC8  318F  2758         	fcall	i1_I2C_SetDataCompleteCallback
 13962                           
 13963                           ;i2c_master_example.c: 167: return I2C_CONTINUE;
 13964  0FCA  3004               	movlw	4
 13965  0FCB  0008               	return
 13966  0FCC                     __end_ofi1_wr2RegCompleteHandler:	
 13967                           
 13968                           	psect	text115
 13969  0F58                     __ptext115:	
 13970 ;; *************** function i1_I2C_SetDataCompleteCallback *****************
 13971 ;; Defined at:
 13972 ;;		line 273 in file "mcc_generated_files/i2c_master.c"
 13973 ;; Parameters:    Size  Location     Type
 13974 ;;  cb              2    5[COMMON] PTR FTN(PTR void ,)enum 
 13975 ;;		 -> i1_wr1RegCompleteHandler(1), i1_rd1RegCompleteHandler(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), 
 13976 ;;		 -> wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), Absolute function(1), rd1RegCompleteHandler(1), 
 13977 ;;  ptr             1    7[COMMON] PTR void 
 13978 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 13979 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 13980 ;; Auto vars:     Size  Location     Type
 13981 ;;		None
 13982 ;; Return value:  Size  Location     Type
 13983 ;;                  1    wreg      void 
 13984 ;; Registers used:
 13985 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13986 ;; Tracked objects:
 13987 ;;		On entry : 0/0
 13988 ;;		On exit  : 0/0
 13989 ;;		Unchanged: 0/0
 13990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13991 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13993 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13994 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13995 ;;Total ram usage:        4 bytes
 13996 ;; Hardware stack levels used:    1
 13997 ;; Hardware stack levels required when called:    1
 13998 ;; This function calls:
 13999 ;;		i1_I2C_SetCallback
 14000 ;; This function is called by:
 14001 ;;		_I2C_Read1ByteRegister
 14002 ;;		i1_I2C_Write1ByteRegister
 14003 ;;		i1_rd1RegCompleteHandler
 14004 ;;		i1_rd2RegCompleteHandler
 14005 ;;		i1_wr1RegCompleteHandler
 14006 ;;		i1_wr2RegCompleteHandler
 14007 ;;		i1_rdBlkRegCompleteHandler
 14008 ;; This function uses a non-reentrant model
 14009 ;;
 14010                           
 14011                           
 14012                           ;psect for function i1_I2C_SetDataCompleteCallback
 14013  0F58                     i1_I2C_SetDataCompleteCallback:	
 14014                           
 14015                           ;i2c_master.c: 275: I2C_SetCallback(I2C_DATA_COMPLETE, cb, ptr);
 14016                           
 14017                           ;incstack = 0
 14018                           ; Regs used in i1_I2C_SetDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclat
      +                          h+cstack]
 14019  0F58  0876               	movf	i1I2C_SetDataCompleteCallback@cb+1,w
 14020  0F59  00F1               	movwf	i1I2C_SetCallback@cb+1
 14021  0F5A  0875               	movf	i1I2C_SetDataCompleteCallback@cb,w
 14022  0F5B  00F0               	movwf	i1I2C_SetCallback@cb
 14023  0F5C  0877               	movf	i1I2C_SetDataCompleteCallback@ptr,w
 14024  0F5D  00F8               	movwf	??i1_I2C_SetDataCompleteCallback
 14025  0F5E  0878               	movf	??i1_I2C_SetDataCompleteCallback,w
 14026  0F5F  00F2               	movwf	i1I2C_SetCallback@ptr
 14027  0F60  3000               	movlw	0
 14028  0F61  3186  261D         	fcall	i1_I2C_SetCallback
 14029  0F63  0008               	return
 14030  0F64                     __end_ofi1_I2C_SetDataCompleteCallback:	
 14031                           
 14032                           	psect	text116
 14033  061D                     __ptext116:	
 14034 ;; *************** function i1_I2C_SetCallback *****************
 14035 ;; Defined at:
 14036 ;;		line 298 in file "mcc_generated_files/i2c_master.c"
 14037 ;; Parameters:    Size  Location     Type
 14038 ;;  idx             1    wreg     enum E12121
 14039 ;;  cb              2    0[COMMON] PTR FTN(PTR void ,)enum 
 14040 ;;		 -> i1_wr1RegCompleteHandler(1), i1_rd1RegCompleteHandler(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), 
 14041 ;;		 -> wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), Absolute function(1), rd1RegCompleteHandler(1), 
 14042 ;;  ptr             1    2[COMMON] PTR void 
 14043 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 14044 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 14045 ;; Auto vars:     Size  Location     Type
 14046 ;;  idx             1    4[COMMON] enum E12121
 14047 ;; Return value:  Size  Location     Type
 14048 ;;                  1    wreg      void 
 14049 ;; Registers used:
 14050 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14051 ;; Tracked objects:
 14052 ;;		On entry : 0/0
 14053 ;;		On exit  : 0/0
 14054 ;;		Unchanged: 0/0
 14055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14056 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14057 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14058 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14059 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14060 ;;Total ram usage:        5 bytes
 14061 ;; Hardware stack levels used:    1
 14062 ;; This function calls:
 14063 ;;		Nothing
 14064 ;; This function is called by:
 14065 ;;		i1_I2C_SetDataCompleteCallback
 14066 ;;		i1_I2C_SetAddressNackCallback
 14067 ;; This function uses a non-reentrant model
 14068 ;;
 14069                           
 14070                           
 14071                           ;psect for function i1_I2C_SetCallback
 14072  061D                     i1_I2C_SetCallback:	
 14073                           
 14074                           ;incstack = 0
 14075                           ; Regs used in i1_I2C_SetCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
 14076                           ;i1I2C_SetCallback@idx stored from wreg
 14077  061D  00F4               	movwf	i1I2C_SetCallback@idx
 14078                           
 14079                           ;i2c_master.c: 300: if(cb)
 14080  061E  0870               	movf	i1I2C_SetCallback@cb,w
 14081  061F  0471               	iorwf	i1I2C_SetCallback@cb+1,w
 14082  0620  1903               	btfsc	3,2
 14083  0621  2E33               	goto	i1l2854
 14084                           
 14085                           ;i2c_master.c: 301: {
 14086                           ;i2c_master.c: 302: I2C_Status.callbackTable[idx] = cb;
 14087  0622  3574               	lslf	i1I2C_SetCallback@idx,w
 14088  0623  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
 14089  0624  0086               	movwf	6
 14090  0625  0187               	clrf	7
 14091  0626  0870               	movf	i1I2C_SetCallback@cb,w
 14092  0627  3FC0               	movwi [0]fsr1
 14093  0628  0871               	movf	i1I2C_SetCallback@cb+1,w
 14094  0629  3FC1               	movwi [1]fsr1
 14095                           
 14096                           ;i2c_master.c: 303: I2C_Status.callbackPayload[idx] = ptr;
 14097  062A  0872               	movf	i1I2C_SetCallback@ptr,w
 14098  062B  00F3               	movwf	??i1_I2C_SetCallback
 14099  062C  0874               	movf	i1I2C_SetCallback@idx,w
 14100  062D  3EAC               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
 14101  062E  0086               	movwf	6
 14102  062F  0187               	clrf	7
 14103  0630  0873               	movf	??i1_I2C_SetCallback,w
 14104  0631  0081               	movwf	1
 14105                           
 14106                           ;i2c_master.c: 304: }
 14107  0632  0008               	return
 14108  0633                     i1l2854:	
 14109                           
 14110                           ;i2c_master.c: 305: else
 14111                           ;i2c_master.c: 306: {
 14112                           ;i2c_master.c: 307: I2C_Status.callbackTable[idx] = I2C_CallbackReturnStop;
 14113  0633  3574               	lslf	i1I2C_SetCallback@idx,w
 14114  0634  3EA0               	addlw	(low (_I2C_Status| 0))& (0+255)
 14115  0635  0086               	movwf	6
 14116  0636  0187               	clrf	7
 14117  0637  304F               	movlw	low _I2C_CallbackReturnStop
 14118  0638  3FC0               	movwi [0]fsr1
 14119  0639  300E               	movlw	high _I2C_CallbackReturnStop
 14120  063A  3FC1               	movwi [1]fsr1
 14121                           
 14122                           ;i2c_master.c: 308: I2C_Status.callbackPayload[idx] = (0);
 14123  063B  0874               	movf	i1I2C_SetCallback@idx,w
 14124  063C  3EAC               	addlw	(low ((_I2C_Status| 0+12)))& (0+255)
 14125  063D  0086               	movwf	6
 14126  063E  0187               	clrf	7
 14127  063F  0181               	clrf	1
 14128  0640  0008               	return
 14129  0641                     __end_ofi1_I2C_SetCallback:	
 14130                           
 14131                           	psect	text117
 14132  0FAE                     __ptext117:	
 14133 ;; *************** function i1_I2C_SetBuffer *****************
 14134 ;; Defined at:
 14135 ;;		line 263 in file "mcc_generated_files/i2c_master.c"
 14136 ;; Parameters:    Size  Location     Type
 14137 ;;  buffer          1    wreg     PTR void 
 14138 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
 14139 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
 14140 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
 14141 ;;  bufferSize      2    0[COMMON] unsigned int 
 14142 ;; Auto vars:     Size  Location     Type
 14143 ;;  buffer          1    3[COMMON] PTR void 
 14144 ;;		 -> I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegiste
      +r@data(2), 
 14145 ;;		 -> I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegist
      +er@returnValue(2), 
 14146 ;;		 -> NULL(0), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
 14147 ;; Return value:  Size  Location     Type
 14148 ;;                  1    wreg      void 
 14149 ;; Registers used:
 14150 ;;		wreg
 14151 ;; Tracked objects:
 14152 ;;		On entry : 0/0
 14153 ;;		On exit  : 0/0
 14154 ;;		Unchanged: 0/0
 14155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14156 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14157 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14158 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14159 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14160 ;;Total ram usage:        4 bytes
 14161 ;; Hardware stack levels used:    1
 14162 ;; This function calls:
 14163 ;;		Nothing
 14164 ;; This function is called by:
 14165 ;;		_I2C_Read1ByteRegister
 14166 ;;		i1_I2C_Write1ByteRegister
 14167 ;;		i1_rd1RegCompleteHandler
 14168 ;;		i1_rd2RegCompleteHandler
 14169 ;;		i1_wr1RegCompleteHandler
 14170 ;;		i1_wr2RegCompleteHandler
 14171 ;;		i1_rdBlkRegCompleteHandler
 14172 ;; This function uses a non-reentrant model
 14173 ;;
 14174                           
 14175                           
 14176                           ;psect for function i1_I2C_SetBuffer
 14177  0FAE                     i1_I2C_SetBuffer:	
 14178                           
 14179                           ;incstack = 0
 14180                           ; Regs used in i1_I2C_SetBuffer: [wreg]
 14181                           ;i1I2C_SetBuffer@buffer stored from wreg
 14182  0FAE  00F3               	movwf	i1I2C_SetBuffer@buffer
 14183                           
 14184                           ;i2c_master.c: 265: if(I2C_Status.bufferFree)
 14185  0FAF  0021               	movlb	1	; select bank1
 14186  0FB0  1DBC               	btfss	(_I2C_Status^(0+128)+28),3
 14187  0FB1  0008               	return
 14188                           
 14189                           ;i2c_master.c: 266: {
 14190                           ;i2c_master.c: 267: I2C_Status.data_ptr = buffer;
 14191  0FB2  0873               	movf	i1I2C_SetBuffer@buffer,w
 14192  0FB3  00F2               	movwf	??i1_I2C_SetBuffer
 14193  0FB4  0872               	movf	??i1_I2C_SetBuffer,w
 14194  0FB5  00B7               	movwf	(low ((_I2C_Status| 0+23)))^(0+128)
 14195                           
 14196                           ;i2c_master.c: 268: I2C_Status.data_length = bufferSize;
 14197  0FB6  0871               	movf	i1I2C_SetBuffer@bufferSize+1,w
 14198  0FB7  00B9               	movwf	((_I2C_Status+1)^(0+128)+24)
 14199  0FB8  0870               	movf	i1I2C_SetBuffer@bufferSize,w
 14200  0FB9  00B8               	movwf	(_I2C_Status^(0+128)+24)
 14201                           
 14202                           ;i2c_master.c: 269: I2C_Status.bufferFree = 0;
 14203  0FBA  11BC               	bcf	(_I2C_Status^(0+128)+28),3
 14204  0FBB  0008               	return
 14205  0FBC                     __end_ofi1_I2C_SetBuffer:	
 14206                           
 14207                           	psect	text118
 14208  0DBD                     __ptext118:	
 14209 ;; *************** function i1_I2C_MasterStop *****************
 14210 ;; Defined at:
 14211 ;;		line 593 in file "mcc_generated_files/i2c_master.c"
 14212 ;; Parameters:    Size  Location     Type
 14213 ;;		None
 14214 ;; Auto vars:     Size  Location     Type
 14215 ;;		None
 14216 ;; Return value:  Size  Location     Type
 14217 ;;                  1    wreg      void 
 14218 ;; Registers used:
 14219 ;;		None
 14220 ;; Tracked objects:
 14221 ;;		On entry : 0/0
 14222 ;;		On exit  : 0/0
 14223 ;;		Unchanged: 0/0
 14224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14228 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14229 ;;Total ram usage:        0 bytes
 14230 ;; Hardware stack levels used:    1
 14231 ;; This function calls:
 14232 ;;		Nothing
 14233 ;; This function is called by:
 14234 ;;		i1_I2C_DO_SEND_STOP
 14235 ;; This function uses a non-reentrant model
 14236 ;;
 14237                           
 14238                           
 14239                           ;psect for function i1_I2C_MasterStop
 14240  0DBD                     i1_I2C_MasterStop:	
 14241                           
 14242                           ;i2c_master.c: 595: SSP1CON2bits.PEN = 1;
 14243                           
 14244                           ;incstack = 0
 14245 ;; hardware stack exceeded
 14246                           ; Regs used in i1_I2C_MasterStop: []
 14247  0DBD  0024               	movlb	4	; select bank4
 14248  0DBE  1516               	bsf	22,2	;volatile
 14249  0DBF  0008               	return
 14250  0DC0                     __end_ofi1_I2C_MasterStop:	
 14251                           
 14252                           	psect	text119
 14253  0DBA                     __ptext119:	
 14254 ;; *************** function i1_I2C_MasterEnableRestart *****************
 14255 ;; Defined at:
 14256 ;;		line 573 in file "mcc_generated_files/i2c_master.c"
 14257 ;; Parameters:    Size  Location     Type
 14258 ;;		None
 14259 ;; Auto vars:     Size  Location     Type
 14260 ;;		None
 14261 ;; Return value:  Size  Location     Type
 14262 ;;                  1    wreg      void 
 14263 ;; Registers used:
 14264 ;;		None
 14265 ;; Tracked objects:
 14266 ;;		On entry : 0/0
 14267 ;;		On exit  : 0/0
 14268 ;;		Unchanged: 0/0
 14269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14274 ;;Total ram usage:        0 bytes
 14275 ;; Hardware stack levels used:    1
 14276 ;; This function calls:
 14277 ;;		Nothing
 14278 ;; This function is called by:
 14279 ;;		i1_I2C_DO_SEND_RESTART_READ
 14280 ;;		i1_I2C_DO_SEND_RESTART_WRITE
 14281 ;;		i1_I2C_DO_SEND_RESTART
 14282 ;; This function uses a non-reentrant model
 14283 ;;
 14284                           
 14285                           
 14286                           ;psect for function i1_I2C_MasterEnableRestart
 14287  0DBA                     i1_I2C_MasterEnableRestart:	
 14288                           
 14289                           ;i2c_master.c: 575: SSP1CON2bits.RSEN = 1;
 14290                           
 14291                           ;incstack = 0
 14292 ;; hardware stack exceeded
 14293                           ; Regs used in i1_I2C_MasterEnableRestart: []
 14294  0DBA  0024               	movlb	4	; select bank4
 14295  0DBB  1496               	bsf	22,1	;volatile
 14296  0DBC  0008               	return
 14297  0DBD                     __end_ofi1_I2C_MasterEnableRestart:	
 14298                           
 14299                           	psect	text120
 14300  0DB7                     __ptext120:	
 14301 ;; *************** function i1_I2C_MasterStart *****************
 14302 ;; Defined at:
 14303 ;;		line 588 in file "mcc_generated_files/i2c_master.c"
 14304 ;; Parameters:    Size  Location     Type
 14305 ;;		None
 14306 ;; Auto vars:     Size  Location     Type
 14307 ;;		None
 14308 ;; Return value:  Size  Location     Type
 14309 ;;                  1    wreg      void 
 14310 ;; Registers used:
 14311 ;;		None
 14312 ;; Tracked objects:
 14313 ;;		On entry : 0/0
 14314 ;;		On exit  : 0/0
 14315 ;;		Unchanged: 0/0
 14316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14321 ;;Total ram usage:        0 bytes
 14322 ;; Hardware stack levels used:    1
 14323 ;; This function calls:
 14324 ;;		Nothing
 14325 ;; This function is called by:
 14326 ;;		i1_I2C_MasterOperation
 14327 ;; This function uses a non-reentrant model
 14328 ;;
 14329                           
 14330                           
 14331                           ;psect for function i1_I2C_MasterStart
 14332  0DB7                     i1_I2C_MasterStart:	
 14333                           
 14334                           ;i2c_master.c: 590: SSP1CON2bits.SEN = 1;
 14335                           
 14336                           ;incstack = 0
 14337 ;; hardware stack exceeded
 14338                           ; Regs used in i1_I2C_MasterStart: []
 14339  0DB7  0024               	movlb	4	; select bank4
 14340  0DB8  1416               	bsf	22,0	;volatile
 14341  0DB9  0008               	return
 14342  0DBA                     __end_ofi1_I2C_MasterStart:	
 14343                           
 14344                           	psect	text121
 14345  06F9                     __ptext121:	
 14346 ;; *************** function i1_I2C_Close *****************
 14347 ;; Defined at:
 14348 ;;		line 209 in file "mcc_generated_files/i2c_master.c"
 14349 ;; Parameters:    Size  Location     Type
 14350 ;;		None
 14351 ;; Auto vars:     Size  Location     Type
 14352 ;;  I2C_Close       1    1[COMMON] enum E92
 14353 ;; Return value:  Size  Location     Type
 14354 ;;                  1    wreg      enum E92
 14355 ;; Registers used:
 14356 ;;		wreg, status,2, status,0, pclath, cstack
 14357 ;; Tracked objects:
 14358 ;;		On entry : 0/0
 14359 ;;		On exit  : 0/0
 14360 ;;		Unchanged: 0/0
 14361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14363 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14364 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14365 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14366 ;;Total ram usage:        2 bytes
 14367 ;; Hardware stack levels used:    1
 14368 ;; Hardware stack levels required when called:    1
 14369 ;; This function calls:
 14370 ;;		i1_I2C_MasterClearIrq
 14371 ;;		i1_I2C_MasterClose
 14372 ;;		i1_I2C_MasterDisableIrq
 14373 ;; This function is called by:
 14374 ;;		_I2C_Read1ByteRegister
 14375 ;;		i1_I2C_Write1ByteRegister
 14376 ;; This function uses a non-reentrant model
 14377 ;;
 14378                           
 14379                           
 14380                           ;psect for function i1_I2C_Close
 14381  06F9                     i1_I2C_Close:	
 14382                           
 14383                           ;i2c_master.c: 211: i2c_error_t returnValue = I2C_BUSY;
 14384                           
 14385                           ;incstack = 0
 14386                           ; Regs used in i1_I2C_Close: [wreg+status,2+status,0+pclath+cstack]
 14387  06F9  01F1               	clrf	i1I2C_Close@returnValue
 14388  06FA  0AF1               	incf	i1I2C_Close@returnValue,f
 14389                           
 14390                           ;i2c_master.c: 212: if(!I2C_Status.busy)
 14391  06FB  0021               	movlb	1	; select bank1
 14392  06FC  18BC               	btfsc	(_I2C_Status^(0+128)+28),1
 14393  06FD  2F10               	goto	i1l3482
 14394                           
 14395                           ;i2c_master.c: 213: {
 14396                           ;i2c_master.c: 214: I2C_Status.inUse = 0;
 14397  06FE  113C               	bcf	(_I2C_Status^(0+128)+28),2
 14398                           
 14399                           ;i2c_master.c: 215: I2C_Status.address = 0xff;
 14400  06FF  30FF               	movlw	255
 14401  0700  00F0               	movwf	??i1_I2C_Close
 14402  0701  0870               	movf	??i1_I2C_Close,w
 14403  0702  00B6               	movwf	(_I2C_Status^(0+128)+22)
 14404                           
 14405                           ;i2c_master.c: 216: I2C_MasterClearIrq();
 14406  0703  318D  25AE  3186   	fcall	i1_I2C_MasterClearIrq
 14407                           
 14408                           ;i2c_master.c: 217: I2C_MasterDisableIrq();
 14409  0706  318D  25B4  3186   	fcall	i1_I2C_MasterDisableIrq
 14410                           
 14411                           ;i2c_master.c: 218: I2C_MasterClose();
 14412  0709  318D  25B1         	fcall	i1_I2C_MasterClose
 14413                           
 14414                           ;i2c_master.c: 219: returnValue = I2C_Status.error;
 14415  070B  0021               	movlb	1	; select bank1
 14416  070C  083B               	movf	(_I2C_Status^(0+128)+27),w
 14417  070D  00F0               	movwf	??i1_I2C_Close
 14418  070E  0870               	movf	??i1_I2C_Close,w
 14419  070F  00F1               	movwf	i1I2C_Close@returnValue
 14420  0710                     i1l3482:	
 14421                           
 14422                           ;i2c_master.c: 220: }
 14423                           ;i2c_master.c: 221: return returnValue;
 14424  0710  0871               	movf	i1I2C_Close@returnValue,w
 14425  0711  0008               	return
 14426  0712                     __end_ofi1_I2C_Close:	
 14427                           
 14428                           	psect	text122
 14429  0DB4                     __ptext122:	
 14430 ;; *************** function i1_I2C_MasterDisableIrq *****************
 14431 ;; Defined at:
 14432 ;;		line 635 in file "mcc_generated_files/i2c_master.c"
 14433 ;; Parameters:    Size  Location     Type
 14434 ;;		None
 14435 ;; Auto vars:     Size  Location     Type
 14436 ;;		None
 14437 ;; Return value:  Size  Location     Type
 14438 ;;                  1    wreg      void 
 14439 ;; Registers used:
 14440 ;;		None
 14441 ;; Tracked objects:
 14442 ;;		On entry : 0/0
 14443 ;;		On exit  : 0/0
 14444 ;;		Unchanged: 0/0
 14445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14450 ;;Total ram usage:        0 bytes
 14451 ;; Hardware stack levels used:    1
 14452 ;; This function calls:
 14453 ;;		Nothing
 14454 ;; This function is called by:
 14455 ;;		i1_I2C_Close
 14456 ;; This function uses a non-reentrant model
 14457 ;;
 14458                           
 14459                           
 14460                           ;psect for function i1_I2C_MasterDisableIrq
 14461  0DB4                     i1_I2C_MasterDisableIrq:	
 14462                           
 14463                           ;i2c_master.c: 637: PIE1bits.SSP1IE = 0;
 14464                           
 14465                           ;incstack = 0
 14466                           ; Regs used in i1_I2C_MasterDisableIrq: []
 14467  0DB4  0021               	movlb	1	; select bank1
 14468  0DB5  1190               	bcf	16,3	;volatile
 14469  0DB6  0008               	return
 14470  0DB7                     __end_ofi1_I2C_MasterDisableIrq:	
 14471                           
 14472                           	psect	text123
 14473  0DB1                     __ptext123:	
 14474 ;; *************** function i1_I2C_MasterClose *****************
 14475 ;; Defined at:
 14476 ;;		line 557 in file "mcc_generated_files/i2c_master.c"
 14477 ;; Parameters:    Size  Location     Type
 14478 ;;		None
 14479 ;; Auto vars:     Size  Location     Type
 14480 ;;		None
 14481 ;; Return value:  Size  Location     Type
 14482 ;;                  1    wreg      void 
 14483 ;; Registers used:
 14484 ;;		None
 14485 ;; Tracked objects:
 14486 ;;		On entry : 0/0
 14487 ;;		On exit  : 0/0
 14488 ;;		Unchanged: 0/0
 14489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14493 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14494 ;;Total ram usage:        0 bytes
 14495 ;; Hardware stack levels used:    1
 14496 ;; This function calls:
 14497 ;;		Nothing
 14498 ;; This function is called by:
 14499 ;;		i1_I2C_Close
 14500 ;; This function uses a non-reentrant model
 14501 ;;
 14502                           
 14503                           
 14504                           ;psect for function i1_I2C_MasterClose
 14505  0DB1                     i1_I2C_MasterClose:	
 14506                           
 14507                           ;i2c_master.c: 560: SSP1CON1bits.SSPEN = 0;
 14508                           
 14509                           ;incstack = 0
 14510                           ; Regs used in i1_I2C_MasterClose: []
 14511  0DB1  0024               	movlb	4	; select bank4
 14512  0DB2  1295               	bcf	21,5	;volatile
 14513  0DB3  0008               	return
 14514  0DB4                     __end_ofi1_I2C_MasterClose:	
 14515                           
 14516                           	psect	text124
 14517  0DAE                     __ptext124:	
 14518 ;; *************** function i1_I2C_MasterClearIrq *****************
 14519 ;; Defined at:
 14520 ;;		line 640 in file "mcc_generated_files/i2c_master.c"
 14521 ;; Parameters:    Size  Location     Type
 14522 ;;		None
 14523 ;; Auto vars:     Size  Location     Type
 14524 ;;		None
 14525 ;; Return value:  Size  Location     Type
 14526 ;;                  1    wreg      void 
 14527 ;; Registers used:
 14528 ;;		None
 14529 ;; Tracked objects:
 14530 ;;		On entry : 0/0
 14531 ;;		On exit  : 0/0
 14532 ;;		Unchanged: 0/0
 14533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14537 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14538 ;;Total ram usage:        0 bytes
 14539 ;; Hardware stack levels used:    1
 14540 ;; This function calls:
 14541 ;;		Nothing
 14542 ;; This function is called by:
 14543 ;;		i1_I2C_Open
 14544 ;;		i1_I2C_Close
 14545 ;;		i1_I2C_MasterFsm
 14546 ;; This function uses a non-reentrant model
 14547 ;;
 14548                           
 14549                           
 14550                           ;psect for function i1_I2C_MasterClearIrq
 14551  0DAE                     i1_I2C_MasterClearIrq:	
 14552                           
 14553                           ;i2c_master.c: 642: PIR1bits.SSP1IF = 0;
 14554                           
 14555                           ;incstack = 0
 14556                           ; Regs used in i1_I2C_MasterClearIrq: []
 14557  0DAE  0020               	movlb	0	; select bank0
 14558  0DAF  1190               	bcf	16,3	;volatile
 14559  0DB0  0008               	return
 14560  0DB1                     __end_ofi1_I2C_MasterClearIrq:	
 14561                           
 14562                           	psect	text125
 14563  0432                     __ptext125:	
 14564 ;; *************** function _EUSART_Receive_ISR *****************
 14565 ;; Defined at:
 14566 ;;		line 173 in file "mcc_generated_files/eusart.c"
 14567 ;; Parameters:    Size  Location     Type
 14568 ;;		None
 14569 ;; Auto vars:     Size  Location     Type
 14570 ;;		None
 14571 ;; Return value:  Size  Location     Type
 14572 ;;                  1    wreg      void 
 14573 ;; Registers used:
 14574 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14575 ;; Tracked objects:
 14576 ;;		On entry : 0/0
 14577 ;;		On exit  : 0/0
 14578 ;;		Unchanged: 0/0
 14579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14583 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14584 ;;Total ram usage:        0 bytes
 14585 ;; Hardware stack levels used:    1
 14586 ;; Hardware stack levels required when called:    2
 14587 ;; This function calls:
 14588 ;;		Absolute function
 14589 ;;		_EUSART_DefaultErrorHandler
 14590 ;;		_EUSART_DefaultFramingErrorHandler
 14591 ;;		_EUSART_DefaultOverrunErrorHandler
 14592 ;;		_EUSART_RxDataHandler
 14593 ;; This function is called by:
 14594 ;;		_EUSART_Initialize
 14595 ;;		_INTERRUPT_InterruptManager
 14596 ;; This function uses a non-reentrant model
 14597 ;;
 14598                           
 14599                           
 14600                           ;psect for function _EUSART_Receive_ISR
 14601  0432                     _EUSART_Receive_ISR:	
 14602                           
 14603                           ;eusart.c: 176: eusartRxStatusBuffer[eusartRxHead].status = 0;
 14604                           
 14605                           ;incstack = 0
 14606                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14607  0432  0020               	movlb	0	; select bank0
 14608  0433  083C               	movf	_eusartRxHead,w	;volatile
 14609  0434  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14610  0435  0086               	movwf	6
 14611  0436  0187               	clrf	7
 14612  0437  0181               	clrf	1
 14613                           
 14614                           ;eusart.c: 178: if(RC1STAbits.FERR){
 14615  0438  0023               	movlb	3	; select bank3
 14616  0439  1D1D               	btfss	29,2	;volatile
 14617  043A  2C46               	goto	i1l6612
 14618                           
 14619                           ;eusart.c: 179: eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 14620  043B  0020               	movlb	0	; select bank0
 14621  043C  083C               	movf	_eusartRxHead,w	;volatile
 14622  043D  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14623  043E  0086               	movwf	6
 14624  043F  0187               	clrf	7
 14625  0440  1481               	bsf	1,1
 14626                           
 14627                           ;eusart.c: 180: EUSART_FramingErrorHandler();
 14628  0441  085C               	movf	_EUSART_FramingErrorHandler+1,w
 14629  0442  008A               	movwf	10
 14630  0443  085B               	movf	_EUSART_FramingErrorHandler,w
 14631  0444  000A               	callw
 14632  0445  3184               	pagesel	$
 14633  0446                     i1l6612:	
 14634                           
 14635                           ;eusart.c: 181: }
 14636                           ;eusart.c: 183: if(RC1STAbits.OERR){
 14637  0446  0023               	movlb	3	; select bank3
 14638  0447  1C9D               	btfss	29,1	;volatile
 14639  0448  2C54               	goto	i1l6618
 14640                           
 14641                           ;eusart.c: 184: eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 14642  0449  0020               	movlb	0	; select bank0
 14643  044A  083C               	movf	_eusartRxHead,w	;volatile
 14644  044B  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14645  044C  0086               	movwf	6
 14646  044D  0187               	clrf	7
 14647  044E  1501               	bsf	1,2
 14648                           
 14649                           ;eusart.c: 185: EUSART_OverrunErrorHandler();
 14650  044F  085A               	movf	_EUSART_OverrunErrorHandler+1,w
 14651  0450  008A               	movwf	10
 14652  0451  0859               	movf	_EUSART_OverrunErrorHandler,w
 14653  0452  000A               	callw
 14654  0453  3184               	pagesel	$
 14655  0454                     i1l6618:	
 14656                           
 14657                           ;eusart.c: 186: }
 14658                           ;eusart.c: 188: if(eusartRxStatusBuffer[eusartRxHead].status){
 14659  0454  0020               	movlb	0	; select bank0
 14660  0455  083C               	movf	_eusartRxHead,w	;volatile
 14661  0456  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14662  0457  0086               	movwf	6
 14663  0458  0187               	clrf	7
 14664  0459  0801               	movf	1,w
 14665  045A  1903               	btfsc	3,2
 14666  045B  2C63               	goto	i1l6622
 14667                           
 14668                           ;eusart.c: 189: EUSART_ErrorHandler();
 14669  045C  0021               	movlb	1	; select bank1
 14670  045D  084B               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
 14671  045E  008A               	movwf	10
 14672  045F  084A               	movf	_EUSART_ErrorHandler^(0+128),w
 14673  0460  000A               	callw
 14674  0461  3184               	pagesel	$
 14675                           
 14676                           ;eusart.c: 190: } else {
 14677  0462  0008               	return
 14678  0463                     i1l6622:	
 14679                           
 14680                           ;eusart.c: 191: EUSART_RxDataHandler();
 14681  0463  3187  2729         	fcall	_EUSART_RxDataHandler
 14682  0465  0008               	return
 14683  0466                     __end_of_EUSART_Receive_ISR:	
 14684                           
 14685                           	psect	text126
 14686  0059                     __ptext126:	
 14687 ;; *************** function _MyUART_ISR *****************
 14688 ;; Defined at:
 14689 ;;		line 106 in file "main.c"
 14690 ;; Parameters:    Size  Location     Type
 14691 ;;		None
 14692 ;; Auto vars:     Size  Location     Type
 14693 ;;  c               1    5[COMMON] unsigned char 
 14694 ;; Return value:  Size  Location     Type
 14695 ;;                  1    wreg      void 
 14696 ;; Registers used:
 14697 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14698 ;; Tracked objects:
 14699 ;;		On entry : 0/0
 14700 ;;		On exit  : 0/0
 14701 ;;		Unchanged: 0/0
 14702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14704 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14705 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14706 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14707 ;;Total ram usage:        5 bytes
 14708 ;; Hardware stack levels used:    1
 14709 ;; Hardware stack levels required when called:    1
 14710 ;; This function calls:
 14711 ;;		_EUSART_Write
 14712 ;; This function is called by:
 14713 ;;		_main
 14714 ;;		_INTERRUPT_InterruptManager
 14715 ;; This function uses a non-reentrant model
 14716 ;;
 14717                           
 14718                           
 14719                           ;psect for function _MyUART_ISR
 14720  0059                     _MyUART_ISR:	
 14721                           
 14722                           ;main.c: 107: unsigned char c = RC1REG;
 14723                           
 14724                           ;incstack = 0
 14725                           ; Regs used in _MyUART_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14726  0059  0023               	movlb	3	; select bank3
 14727  005A  0819               	movf	25,w	;volatile
 14728  005B  00F1               	movwf	??_MyUART_ISR
 14729  005C  0871               	movf	??_MyUART_ISR,w
 14730  005D  00F5               	movwf	MyUART_ISR@c
 14731                           
 14732                           ;main.c: 108: if(c) {
 14733  005E  0875               	movf	MyUART_ISR@c,w
 14734  005F  1903               	btfsc	3,2
 14735  0060  0008               	return
 14736  0061  28FA               	goto	i1l3946
 14737  0062                     i1l3896:	
 14738                           ;main.c: 110: case S_Idle:
 14739                           
 14740                           ;main.c: 109: switch(PosUart) {
 14741                           
 14742                           
 14743                           ;main.c: 111: if(c == 'V' || c == 'A' || c == 'P' || c == 'L') {
 14744  0062  3056               	movlw	86
 14745  0063  0675               	xorwf	MyUART_ISR@c,w
 14746  0064  1903               	btfsc	3,2
 14747  0065  2872               	goto	i1l3904
 14748  0066  3041               	movlw	65
 14749  0067  0675               	xorwf	MyUART_ISR@c,w
 14750  0068  1903               	btfsc	3,2
 14751  0069  2872               	goto	i1l3904
 14752  006A  3050               	movlw	80
 14753  006B  0675               	xorwf	MyUART_ISR@c,w
 14754  006C  1903               	btfsc	3,2
 14755  006D  2872               	goto	i1l3904
 14756  006E  304C               	movlw	76
 14757  006F  0675               	xorwf	MyUART_ISR@c,w
 14758  0070  1D03               	btfss	3,2
 14759  0071  0008               	return
 14760  0072                     i1l3904:	
 14761                           
 14762                           ;main.c: 112: Type = c;
 14763  0072  0875               	movf	MyUART_ISR@c,w
 14764  0073  00F1               	movwf	??_MyUART_ISR
 14765  0074  0871               	movf	??_MyUART_ISR,w
 14766  0075  0020               	movlb	0	; select bank0
 14767  0076  00B6               	movwf	_Type
 14768                           
 14769                           ;main.c: 113: PosUart = S_Data;
 14770  0077  01B1               	clrf	_PosUart
 14771  0078  0AB1               	incf	_PosUart,f
 14772                           
 14773                           ;main.c: 114: }
 14774                           ;main.c: 115: break;
 14775  0079  0008               	return
 14776  007A                     i1l3908:	
 14777                           ;main.c: 116: case S_Data:
 14778                           
 14779                           
 14780                           ;main.c: 117: Data = c;
 14781  007A  0875               	movf	MyUART_ISR@c,w
 14782  007B  00F1               	movwf	??_MyUART_ISR
 14783  007C  0871               	movf	??_MyUART_ISR,w
 14784  007D  00B7               	movwf	_Data
 14785                           
 14786                           ;main.c: 118: PosUart = S_Check;
 14787  007E  3002               	movlw	2
 14788  007F  00F1               	movwf	??_MyUART_ISR
 14789  0080  0871               	movf	??_MyUART_ISR,w
 14790  0081  00B1               	movwf	_PosUart
 14791                           
 14792                           ;main.c: 119: break;
 14793  0082  0008               	return
 14794  0083                     i1l3910:	
 14795                           ;main.c: 120: case S_Check:
 14796                           
 14797                           
 14798                           ;main.c: 121: if((Type+Data)%256 == c) {
 14799  0083  0836               	movf	_Type,w
 14800  0084  0737               	addwf	_Data,w
 14801  0085  00F1               	movwf	??_MyUART_ISR
 14802  0086  01F2               	clrf	??_MyUART_ISR+1
 14803  0087  0DF2               	rlf	??_MyUART_ISR+1,f
 14804  0088  30FF               	movlw	255
 14805  0089  0571               	andwf	??_MyUART_ISR,w
 14806  008A  00F3               	movwf	??_MyUART_ISR+2
 14807  008B  3000               	movlw	0
 14808  008C  0572               	andwf	??_MyUART_ISR+1,w
 14809  008D  00F4               	movwf	??_MyUART_ISR+3
 14810  008E  0875               	movf	MyUART_ISR@c,w
 14811  008F  0673               	xorwf	??_MyUART_ISR+2,w
 14812  0090  0474               	iorwf	??_MyUART_ISR+3,w
 14813  0091  1D03               	skipz
 14814  0092  28EA               	goto	i1l3938
 14815                           
 14816                           ;main.c: 122: Validation = 4;
 14817  0093  3004               	movlw	4
 14818  0094  00F1               	movwf	??_MyUART_ISR
 14819  0095  0871               	movf	??_MyUART_ISR,w
 14820  0096  00E1               	movwf	_Validation
 14821                           
 14822                           ;main.c: 123: if(Type == 'V') {
 14823  0097  3056               	movlw	86
 14824  0098  0636               	xorwf	_Type,w
 14825  0099  1D03               	btfss	3,2
 14826  009A  28A0               	goto	i1l3918
 14827                           
 14828                           ;main.c: 124: Vitesse = Data;
 14829  009B  0837               	movf	_Data,w
 14830  009C  00F1               	movwf	??_MyUART_ISR
 14831  009D  0871               	movf	??_MyUART_ISR,w
 14832  009E  00B3               	movwf	_Vitesse
 14833                           
 14834                           ;main.c: 125: } else if(Type == 'A') {
 14835  009F  28F5               	goto	i1l3940
 14836  00A0                     i1l3918:	
 14837  00A0  3041               	movlw	65
 14838  00A1  0636               	xorwf	_Type,w
 14839  00A2  1D03               	btfss	3,2
 14840  00A3  28A9               	goto	i1l3922
 14841                           
 14842                           ;main.c: 126: Angle = Data;
 14843  00A4  0837               	movf	_Data,w
 14844  00A5  00F1               	movwf	??_MyUART_ISR
 14845  00A6  0871               	movf	??_MyUART_ISR,w
 14846  00A7  00E0               	movwf	_Angle
 14847                           
 14848                           ;main.c: 127: } else if(Type == 'P') {
 14849  00A8  28F5               	goto	i1l3940
 14850  00A9                     i1l3922:	
 14851  00A9  3050               	movlw	80
 14852  00AA  0636               	xorwf	_Type,w
 14853  00AB  1D03               	btfss	3,2
 14854  00AC  28B7               	goto	i1l3926
 14855                           
 14856                           ;main.c: 128: EUSART_Write('P');
 14857  00AD  3050               	movlw	80
 14858  00AE  318E  2699  3180   	fcall	_EUSART_Write
 14859                           
 14860                           ;main.c: 129: EUSART_Write('+');
 14861  00B1  302B               	movlw	43
 14862  00B2  318E  2699  3180   	fcall	_EUSART_Write
 14863                           
 14864                           ;main.c: 130: EUSART_Write('{');
 14865  00B5  307B               	movlw	123
 14866  00B6  28F3               	goto	L5
 14867  00B7                     i1l3926:	
 14868                           ;main.c: 131: } else if(Type == 'L') {
 14869                           
 14870  00B7  304C               	movlw	76
 14871  00B8  0020               	movlb	0	; select bank0
 14872  00B9  0636               	xorwf	_Type,w
 14873  00BA  1D03               	btfss	3,2
 14874  00BB  28E0               	goto	i1l3936
 14875                           
 14876                           ;main.c: 132: StateLeds++;
 14877  00BC  3001               	movlw	1
 14878  00BD  00F1               	movwf	??_MyUART_ISR
 14879  00BE  0871               	movf	??_MyUART_ISR,w
 14880  00BF  07B0               	addwf	_StateLeds,f
 14881                           
 14882                           ;main.c: 133: switch(StateLeds) {
 14883  00C0  28D5               	goto	i1l3934
 14884  00C1                     i1l959:	
 14885                           ;main.c: 138: do { LATCbits.LATC6 = 0; } while(0);
 14886                           
 14887                           ;main.c: 137: case S_leds_off:
 14888                           
 14889                           ;main.c: 136: break;
 14890                           
 14891                           ;main.c: 134: case S_leds_cligno:
 14892                           
 14893  00C1  0022               	movlb	2	; select bank2
 14894  00C2  130E               	bcf	14,6	;volatile
 14895  00C3  28C6               	goto	i1l966
 14896  00C4                     i1l964:	
 14897                           ;main.c: 142: do { LATCbits.LATC6 = 1; } while(0);
 14898                           
 14899                           ;main.c: 141: case S_led_r:
 14900                           
 14901                           ;main.c: 140: break;
 14902                           
 14903                           ;main.c: 139: do { LATCbits.LATC7 = 0; } while(0);
 14904                           
 14905  00C4  0022               	movlb	2	; select bank2
 14906  00C5  170E               	bsf	14,6	;volatile
 14907  00C6                     i1l966:	
 14908                           ;main.c: 143: do { LATCbits.LATC7 = 0; } while(0);
 14909                           
 14910  00C6  138E               	bcf	14,7	;volatile
 14911                           
 14912                           ;main.c: 144: break;
 14913  00C7  28F5               	goto	i1l3940
 14914  00C8                     i1l969:	
 14915                           ;main.c: 146: do { LATCbits.LATC6 = 0; } while(0);
 14916                           
 14917                           ;main.c: 145: case S_led_l:
 14918                           
 14919  00C8  0022               	movlb	2	; select bank2
 14920  00C9  130E               	bcf	14,6	;volatile
 14921  00CA  28CD               	goto	i1l976
 14922  00CB                     i1l974:	
 14923                           ;main.c: 150: do { LATCbits.LATC6 = 1; } while(0);
 14924                           
 14925                           ;main.c: 149: case S_leds_on:
 14926                           
 14927                           ;main.c: 148: break;
 14928                           
 14929                           ;main.c: 147: do { LATCbits.LATC7 = 1; } while(0);
 14930                           
 14931  00CB  0022               	movlb	2	; select bank2
 14932  00CC  170E               	bsf	14,6	;volatile
 14933  00CD                     i1l976:	
 14934                           ;main.c: 151: do { LATCbits.LATC7 = 1; } while(0);
 14935                           
 14936  00CD  178E               	bsf	14,7	;volatile
 14937                           
 14938                           ;main.c: 152: break;
 14939  00CE  28F5               	goto	i1l3940
 14940  00CF                     i1l979:	
 14941                           ;main.c: 154: do { LATCbits.LATC6 = 0; } while(0);
 14942                           
 14943                           ;main.c: 153: default:
 14944                           
 14945  00CF  0022               	movlb	2	; select bank2
 14946  00D0  130E               	bcf	14,6	;volatile
 14947                           
 14948                           ;main.c: 155: do { LATCbits.LATC7 = 0; } while(0);
 14949  00D1  138E               	bcf	14,7	;volatile
 14950                           
 14951                           ;main.c: 156: StateLeds = S_leds_cligno;
 14952  00D2  0020               	movlb	0	; select bank0
 14953  00D3  01B0               	clrf	_StateLeds
 14954                           
 14955                           ;main.c: 158: }
 14956                           
 14957                           ;main.c: 157: break;
 14958  00D4  28F5               	goto	i1l3940
 14959  00D5                     i1l3934:	
 14960  00D5  0830               	movf	_StateLeds,w
 14961                           
 14962                           ; Switch size 1, requested type "space"
 14963                           ; Number of cases is 5, Range of values is 0 to 4
 14964                           ; switch strategies available:
 14965                           ; Name         Instructions Cycles
 14966                           ; direct_byte           16     6 (fixed)
 14967                           ; simple_byte           16     9 (average)
 14968                           ; jumptable            260     6 (fixed)
 14969                           ;	Chosen strategy is direct_byte
 14970  00D6  0084               	movwf	4
 14971  00D7  3005               	movlw	5
 14972  00D8  0204               	subwf	4,w
 14973  00D9  1803               	skipnc
 14974  00DA  28CF               	goto	i1l979
 14975  00DB  3188               	movlp	high i1S6800
 14976  00DC  3504               	lslf	4,w
 14977  00DD  3E00               	addlw	low i1S6800
 14978  00DE  0082               	movwf	2
 14979                           
 14980                           ;main.c: 159: } else {
 14981  00DF  28F5               	goto	i1l3940
 14982  00E0                     i1l3936:	
 14983                           
 14984                           ;main.c: 160: EUSART_Write('$');
 14985  00E0  3024               	movlw	36
 14986  00E1  318E  2699  3180   	fcall	_EUSART_Write
 14987                           
 14988                           ;main.c: 161: EUSART_Write('M');
 14989  00E4  304D               	movlw	77
 14990  00E5  318E  2699  3180   	fcall	_EUSART_Write
 14991                           
 14992                           ;main.c: 162: EUSART_Write('q');
 14993  00E8  3071               	movlw	113
 14994  00E9  28F3               	goto	L5
 14995  00EA                     i1l3938:	
 14996                           ;main.c: 163: }
 14997                           ;main.c: 164: } else {
 14998                           
 14999                           
 15000                           ;main.c: 165: EUSART_Write('$');
 15001  00EA  3024               	movlw	36
 15002  00EB  318E  2699  3180   	fcall	_EUSART_Write
 15003                           
 15004                           ;main.c: 166: EUSART_Write('C');
 15005  00EE  3043               	movlw	67
 15006  00EF  318E  2699  3180   	fcall	_EUSART_Write
 15007                           
 15008                           ;main.c: 167: EUSART_Write('g');
 15009  00F2  3067               	movlw	103
 15010  00F3                     L5:	
 15011  00F3  318E  2699         	fcall	_EUSART_Write
 15012  00F5                     i1l3940:	
 15013                           
 15014                           ;main.c: 168: }
 15015                           ;main.c: 169: PosUart = S_Idle;
 15016  00F5  0020               	movlb	0	; select bank0
 15017  00F6  01B1               	clrf	_PosUart
 15018                           
 15019                           ;main.c: 170: break;
 15020  00F7  0008               	return
 15021  00F8                     i1l3942:	
 15022                           ;main.c: 171: default:
 15023                           
 15024                           
 15025                           ;main.c: 172: PosUart = S_Idle;
 15026  00F8  01B1               	clrf	_PosUart
 15027                           
 15028                           ;main.c: 174: }
 15029                           
 15030                           ;main.c: 173: break;
 15031  00F9  0008               	return
 15032  00FA                     i1l3946:	
 15033  00FA  0020               	movlb	0	; select bank0
 15034  00FB  0831               	movf	_PosUart,w
 15035                           
 15036                           ; Switch size 1, requested type "space"
 15037                           ; Number of cases is 3, Range of values is 0 to 2
 15038                           ; switch strategies available:
 15039                           ; Name         Instructions Cycles
 15040                           ; simple_byte           10     6 (average)
 15041                           ; direct_byte           12     6 (fixed)
 15042                           ; jumptable            260     6 (fixed)
 15043                           ;	Chosen strategy is simple_byte
 15044  00FC  3A00               	xorlw	0	; case 0
 15045  00FD  1903               	skipnz
 15046  00FE  2862               	goto	i1l3896
 15047  00FF  3A01               	xorlw	1	; case 1
 15048  0100  1903               	skipnz
 15049  0101  287A               	goto	i1l3908
 15050  0102  3A03               	xorlw	3	; case 2
 15051  0103  1903               	skipnz
 15052  0104  2883               	goto	i1l3910
 15053  0105  28F8               	goto	i1l3942
 15054  0106  0008               	return
 15055  0107                     __end_of_MyUART_ISR:	
 15056                           
 15057                           	psect	swtext1
 15058  0800                     __pswtext1:	
 15059  0800                     i1S6800:	
 15060  0800  3180  28F5         	ljmp	i1l3940
 15061  0802  3180  28C1         	ljmp	i1l959
 15062  0804  3180  28C4         	ljmp	i1l964
 15063  0806  3180  28C8         	ljmp	i1l969
 15064  0808  3180  28CB         	ljmp	i1l974
 15065                           
 15066                           	psect	text127
 15067  0E99                     __ptext127:	
 15068 ;; *************** function _EUSART_Write *****************
 15069 ;; Defined at:
 15070 ;;		line 162 in file "mcc_generated_files/eusart.c"
 15071 ;; Parameters:    Size  Location     Type
 15072 ;;  txData          1    wreg     unsigned char 
 15073 ;; Auto vars:     Size  Location     Type
 15074 ;;  txData          1    0[COMMON] unsigned char 
 15075 ;; Return value:  Size  Location     Type
 15076 ;;                  1    wreg      void 
 15077 ;; Registers used:
 15078 ;;		wreg
 15079 ;; Tracked objects:
 15080 ;;		On entry : 0/0
 15081 ;;		On exit  : 0/0
 15082 ;;		Unchanged: 0/0
 15083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15085 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15087 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15088 ;;Total ram usage:        1 bytes
 15089 ;; Hardware stack levels used:    1
 15090 ;; This function calls:
 15091 ;;		Nothing
 15092 ;; This function is called by:
 15093 ;;		_MyTimer2ISR
 15094 ;;		_MyUART_ISR
 15095 ;; This function uses a non-reentrant model
 15096 ;;
 15097                           
 15098                           
 15099                           ;psect for function _EUSART_Write
 15100  0E99                     _EUSART_Write:	
 15101                           
 15102                           ;incstack = 0
 15103                           ; Regs used in _EUSART_Write: [wreg]
 15104                           ;EUSART_Write@txData stored from wreg
 15105  0E99  00F0               	movwf	EUSART_Write@txData
 15106  0E9A                     i1l649:	
 15107                           ;eusart.c: 165: {
 15108                           
 15109                           ;eusart.c: 164: while(0 == PIR1bits.TXIF)
 15110                           
 15111  0E9A  0020               	movlb	0	; select bank0
 15112  0E9B  1E10               	btfss	16,4	;volatile
 15113  0E9C  2E9A               	goto	i1l649
 15114                           
 15115                           ;eusart.c: 166: }
 15116                           ;eusart.c: 168: TX1REG = txData;
 15117  0E9D  0870               	movf	EUSART_Write@txData,w
 15118  0E9E  0023               	movlb	3	; select bank3
 15119  0E9F  009A               	movwf	26	;volatile
 15120  0EA0  0008               	return
 15121  0EA1                     __end_of_EUSART_Write:	
 15122                           
 15123                           	psect	text128
 15124  0EE1                     __ptext128:	
 15125 ;; *************** function _MATHACC_PID_ISR *****************
 15126 ;; Defined at:
 15127 ;;		line 152 in file "mcc_generated_files/mathacc.c"
 15128 ;; Parameters:    Size  Location     Type
 15129 ;;		None
 15130 ;; Auto vars:     Size  Location     Type
 15131 ;;		None
 15132 ;; Return value:  Size  Location     Type
 15133 ;;                  1    wreg      void 
 15134 ;; Registers used:
 15135 ;;		wreg
 15136 ;; Tracked objects:
 15137 ;;		On entry : 0/0
 15138 ;;		On exit  : 0/0
 15139 ;;		Unchanged: 0/0
 15140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15143 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15144 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15145 ;;Total ram usage:        1 bytes
 15146 ;; Hardware stack levels used:    1
 15147 ;; This function calls:
 15148 ;;		Nothing
 15149 ;; This function is called by:
 15150 ;;		_INTERRUPT_InterruptManager
 15151 ;; This function uses a non-reentrant model
 15152 ;;
 15153                           
 15154                           
 15155                           ;psect for function _MATHACC_PID_ISR
 15156  0EE1                     _MATHACC_PID_ISR:	
 15157                           
 15158                           ;mathacc.c: 154: PIR5bits.PID1DIF = 0;
 15159                           
 15160                           ;incstack = 0
 15161                           ; Regs used in _MATHACC_PID_ISR: [wreg]
 15162  0EE1  0020               	movlb	0	; select bank0
 15163  0EE2  1014               	bcf	20,0	;volatile
 15164                           
 15165                           ;mathacc.c: 155: Pos = PID1OUTHL;
 15166  0EE3  002B               	movlb	11	; select bank11
 15167  0EE4  0818               	movf	24,w	;volatile
 15168  0EE5  00F0               	movwf	??_MATHACC_PID_ISR
 15169  0EE6  0870               	movf	??_MATHACC_PID_ISR,w
 15170  0EE7  0020               	movlb	0	; select bank0
 15171  0EE8  00B8               	movwf	_Pos
 15172  0EE9  0008               	return
 15173  0EEA                     __end_of_MATHACC_PID_ISR:	
 15174                           
 15175                           	psect	text129
 15176  0DAB                     __ptext129:	
 15177 ;; *************** function _MATHACC_Error_ISR *****************
 15178 ;; Defined at:
 15179 ;;		line 145 in file "mcc_generated_files/mathacc.c"
 15180 ;; Parameters:    Size  Location     Type
 15181 ;;		None
 15182 ;; Auto vars:     Size  Location     Type
 15183 ;;		None
 15184 ;; Return value:  Size  Location     Type
 15185 ;;                  1    wreg      void 
 15186 ;; Registers used:
 15187 ;;		None
 15188 ;; Tracked objects:
 15189 ;;		On entry : 0/0
 15190 ;;		On exit  : 0/0
 15191 ;;		Unchanged: 0/0
 15192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15197 ;;Total ram usage:        0 bytes
 15198 ;; Hardware stack levels used:    1
 15199 ;; This function calls:
 15200 ;;		Nothing
 15201 ;; This function is called by:
 15202 ;;		_INTERRUPT_InterruptManager
 15203 ;; This function uses a non-reentrant model
 15204 ;;
 15205                           
 15206                           
 15207                           ;psect for function _MATHACC_Error_ISR
 15208  0DAB                     _MATHACC_Error_ISR:	
 15209                           
 15210                           ;mathacc.c: 147: PIR5bits.PID1EIF = 0;
 15211                           
 15212                           ;incstack = 0
 15213                           ; Regs used in _MATHACC_Error_ISR: []
 15214  0DAB  0020               	movlb	0	; select bank0
 15215  0DAC  1094               	bcf	20,1	;volatile
 15216  0DAD  0008               	return
 15217  0DAE                     __end_of_MATHACC_Error_ISR:	
 15218                           
 15219                           	psect	text130
 15220  0DEA                     __ptext130:	
 15221 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 15222 ;; Defined at:
 15223 ;;		line 209 in file "mcc_generated_files/eusart.c"
 15224 ;; Parameters:    Size  Location     Type
 15225 ;;		None
 15226 ;; Auto vars:     Size  Location     Type
 15227 ;;		None
 15228 ;; Return value:  Size  Location     Type
 15229 ;;                  1    wreg      void 
 15230 ;; Registers used:
 15231 ;;		None
 15232 ;; Tracked objects:
 15233 ;;		On entry : 0/0
 15234 ;;		On exit  : 0/0
 15235 ;;		Unchanged: 0/0
 15236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15241 ;;Total ram usage:        0 bytes
 15242 ;; Hardware stack levels used:    1
 15243 ;; This function calls:
 15244 ;;		Nothing
 15245 ;; This function is called by:
 15246 ;;		_EUSART_Initialize
 15247 ;;		_EUSART_Receive_ISR
 15248 ;; This function uses a non-reentrant model
 15249 ;;
 15250                           
 15251                           
 15252                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 15253  0DEA                     _EUSART_DefaultOverrunErrorHandler:	
 15254                           
 15255                           ;eusart.c: 212: RC1STAbits.CREN = 0;
 15256                           
 15257                           ;incstack = 0
 15258                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 15259  0DEA  0023               	movlb	3	; select bank3
 15260  0DEB  121D               	bcf	29,4	;volatile
 15261                           
 15262                           ;eusart.c: 213: RC1STAbits.CREN = 1;
 15263  0DEC  161D               	bsf	29,4	;volatile
 15264  0DED  0008               	return
 15265  0DEE                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 15266                           
 15267                           	psect	text131
 15268  0DA4                     __ptext131:	
 15269 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 15270 ;; Defined at:
 15271 ;;		line 207 in file "mcc_generated_files/eusart.c"
 15272 ;; Parameters:    Size  Location     Type
 15273 ;;		None
 15274 ;; Auto vars:     Size  Location     Type
 15275 ;;		None
 15276 ;; Return value:  Size  Location     Type
 15277 ;;                  1    wreg      void 
 15278 ;; Registers used:
 15279 ;;		None
 15280 ;; Tracked objects:
 15281 ;;		On entry : 0/0
 15282 ;;		On exit  : 0/0
 15283 ;;		Unchanged: 0/0
 15284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15289 ;;Total ram usage:        0 bytes
 15290 ;; Hardware stack levels used:    1
 15291 ;; This function calls:
 15292 ;;		Nothing
 15293 ;; This function is called by:
 15294 ;;		_EUSART_Initialize
 15295 ;;		_EUSART_Receive_ISR
 15296 ;; This function uses a non-reentrant model
 15297 ;;
 15298                           
 15299                           
 15300                           ;psect for function _EUSART_DefaultFramingErrorHandler
 15301  0DA4                     _EUSART_DefaultFramingErrorHandler:	
 15302                           
 15303                           ;incstack = 0
 15304                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 15305  0DA4  0008               	return
 15306  0DA5                     __end_of_EUSART_DefaultFramingErrorHandler:	
 15307                           
 15308                           	psect	text132
 15309  0DA8                     __ptext132:	
 15310 ;; *************** function _EUSART_DefaultErrorHandler *****************
 15311 ;; Defined at:
 15312 ;;		line 217 in file "mcc_generated_files/eusart.c"
 15313 ;; Parameters:    Size  Location     Type
 15314 ;;		None
 15315 ;; Auto vars:     Size  Location     Type
 15316 ;;		None
 15317 ;; Return value:  Size  Location     Type
 15318 ;;                  1    wreg      void 
 15319 ;; Registers used:
 15320 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15321 ;; Tracked objects:
 15322 ;;		On entry : 0/0
 15323 ;;		On exit  : 0/0
 15324 ;;		Unchanged: 0/0
 15325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15330 ;;Total ram usage:        0 bytes
 15331 ;; Hardware stack levels used:    1
 15332 ;; Hardware stack levels required when called:    1
 15333 ;; This function calls:
 15334 ;;		_EUSART_RxDataHandler
 15335 ;; This function is called by:
 15336 ;;		_EUSART_Initialize
 15337 ;;		_EUSART_Receive_ISR
 15338 ;; This function uses a non-reentrant model
 15339 ;;
 15340                           
 15341                           
 15342                           ;psect for function _EUSART_DefaultErrorHandler
 15343  0DA8                     _EUSART_DefaultErrorHandler:	
 15344                           
 15345                           ;eusart.c: 218: EUSART_RxDataHandler();
 15346                           
 15347                           ;incstack = 0
 15348                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15349  0DA8  3187  2729         	fcall	_EUSART_RxDataHandler
 15350  0DAA  0008               	return
 15351  0DAB                     __end_of_EUSART_DefaultErrorHandler:	
 15352                           
 15353                           	psect	text133
 15354  0729                     __ptext133:	
 15355 ;; *************** function _EUSART_RxDataHandler *****************
 15356 ;; Defined at:
 15357 ;;		line 197 in file "mcc_generated_files/eusart.c"
 15358 ;; Parameters:    Size  Location     Type
 15359 ;;		None
 15360 ;; Auto vars:     Size  Location     Type
 15361 ;;		None
 15362 ;; Return value:  Size  Location     Type
 15363 ;;                  1    wreg      void 
 15364 ;; Registers used:
 15365 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15366 ;; Tracked objects:
 15367 ;;		On entry : 0/0
 15368 ;;		On exit  : 0/0
 15369 ;;		Unchanged: 0/0
 15370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15373 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15374 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15375 ;;Total ram usage:        1 bytes
 15376 ;; Hardware stack levels used:    1
 15377 ;; This function calls:
 15378 ;;		Nothing
 15379 ;; This function is called by:
 15380 ;;		_EUSART_Receive_ISR
 15381 ;;		_EUSART_DefaultErrorHandler
 15382 ;; This function uses a non-reentrant model
 15383 ;;
 15384                           
 15385                           
 15386                           ;psect for function _EUSART_RxDataHandler
 15387  0729                     _EUSART_RxDataHandler:	
 15388                           
 15389                           ;eusart.c: 199: eusartRxBuffer[eusartRxHead++] = RC1REG;
 15390                           
 15391                           ;incstack = 0
 15392                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 15393  0729  0023               	movlb	3	; select bank3
 15394  072A  0819               	movf	25,w	;volatile
 15395  072B  00F0               	movwf	??_EUSART_RxDataHandler
 15396  072C  0020               	movlb	0	; select bank0
 15397  072D  083C               	movf	_eusartRxHead,w
 15398  072E  3E28               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 15399  072F  0086               	movwf	6
 15400  0730  0187               	clrf	7
 15401  0731  0870               	movf	??_EUSART_RxDataHandler,w
 15402  0732  0081               	movwf	1
 15403  0733  3001               	movlw	1
 15404  0734  00F0               	movwf	??_EUSART_RxDataHandler
 15405  0735  0870               	movf	??_EUSART_RxDataHandler,w
 15406  0736  07BC               	addwf	_eusartRxHead,f	;volatile
 15407                           
 15408                           ;eusart.c: 200: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 15409  0737  3008               	movlw	8
 15410  0738  023C               	subwf	_eusartRxHead,w	;volatile
 15411  0739  1803               	btfsc	3,0
 15412                           
 15413                           ;eusart.c: 201: {
 15414                           ;eusart.c: 202: eusartRxHead = 0;
 15415  073A  01BC               	clrf	_eusartRxHead	;volatile
 15416                           
 15417                           ;eusart.c: 203: }
 15418                           ;eusart.c: 204: eusartRxCount++;
 15419  073B  3001               	movlw	1
 15420  073C  00F0               	movwf	??_EUSART_RxDataHandler
 15421  073D  0870               	movf	??_EUSART_RxDataHandler,w
 15422  073E  07BA               	addwf	_eusartRxCount,f	;volatile
 15423  073F  0008               	return
 15424  0740                     __end_of_EUSART_RxDataHandler:	
 15425  007E                     btemp	set	126	;btemp
 15426  007E                     int$flags	set	126
 15427  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    32
    Data        3
    BSS         58
    Persistent  10
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     26      66
    BANK1            80     13      44
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    I2C_Read1ByteRegister@returnValue.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Read2ByteRegister@returnValue.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Write1ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Write2ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    I2C_DO_TX$2097$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_DO_RX$2103$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_DO_TX_EMPTY$2109$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_DO_RX_EMPTY$2115$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_DO_TX_EMPTY$2114	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_DO_TX_EMPTY$2109	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_DO_RX$2108	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_DO_RX$2103	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_DO_TX$2102	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_DO_TX$2097	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_MasterFsm$2096	const PTR FTN()enum E12103 size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    I2C_CallbackReturnStop@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_CallbackReturnReset@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    Absolute function$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    S513$0$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyTimer2ISR(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyTimer2ISR(), TMR2_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyUART_ISR(), EUSART_Receive_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), Absolute function(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), Absolute function(), 

    I2C_SetCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_SetCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> i1_wr1RegCompleteHandler(), i1_rd1RegCompleteHandler(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_SetAddressNackCallback@ptr	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    I2C_SetAddressNackCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> Absolute function(), 

    I2C_SetDataCompleteCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_SetDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> i1_wr1RegCompleteHandler(), i1_rd1RegCompleteHandler(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_SetBuffer@buffer	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(BANK1[1]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(BANK0[1]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    S513$data_ptr	PTR unsigned char  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(BANK1[1]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(BANK0[1]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_Status.data_ptr	PTR unsigned char  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), 
		 -> I2C_Write1ByteRegister@reg(BANK1[1]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@reg(BANK0[1]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    S513$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    I2C_Status.callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    S513$callbackTable	PTR FTN(PTR void ,)enum E97[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    I2C_Status.callbackTable	PTR FTN(PTR void ,)enum E97[6] size(2) Largest target is 1
		 -> i1_I2C_CallbackReturnReset(), i1_I2C_CallbackReturnStop(), i1_wr1RegCompleteHandler(), i1_rd1RegCompleteHandler(), 
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), Absolute function(), rd1RegCompleteHandler(), 

    fsmStateTable	const PTR FTN()enum E12103[16] size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> MyUART_ISR(), EUSART_Receive_ISR(), Absolute function(), 

    rdBlkRegCompleteHandler@ptr.data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    wr2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    wr1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    rd2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    rd1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(BANK1[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(BANK0[1]), 

    S85$data	PTR unsigned char  size(1) Largest target is 0

    bufferBlock.data	PTR unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    i1_I2C_SetAddressNackCallback->i1_I2C_SetCallback
    i1_I2C_MasterWrite->i1_I2C_MasterOperation
    i1_I2C_MasterFsm->i1_I2C_DO_TX
    i1_I2C_DO_TX_EMPTY->i1_I2C_CallbackReturnReset
    i1_I2C_DO_TX_EMPTY->i1_I2C_CallbackReturnStop
    i1_I2C_DO_TX_EMPTY->i1_rd1RegCompleteHandler
    i1_I2C_DO_TX_EMPTY->i1_rd2RegCompleteHandler
    i1_I2C_DO_TX_EMPTY->i1_rdBlkRegCompleteHandler
    i1_I2C_DO_TX_EMPTY->i1_wr1RegCompleteHandler
    i1_I2C_DO_TX_EMPTY->i1_wr2RegCompleteHandler
    i1_I2C_DO_TX->i1_I2C_CallbackReturnReset
    i1_I2C_DO_TX->i1_I2C_CallbackReturnStop
    i1_I2C_DO_TX->i1_rd1RegCompleteHandler
    i1_I2C_DO_TX->i1_rd2RegCompleteHandler
    i1_I2C_DO_TX->i1_rdBlkRegCompleteHandler
    i1_I2C_DO_TX->i1_wr1RegCompleteHandler
    i1_I2C_DO_TX->i1_wr2RegCompleteHandler
    i1_I2C_DO_RX->i1_I2C_CallbackReturnReset
    i1_I2C_DO_RX->i1_I2C_CallbackReturnStop
    i1_I2C_DO_RX->i1_rd1RegCompleteHandler
    i1_I2C_DO_RX->i1_rd2RegCompleteHandler
    i1_I2C_DO_RX->i1_rdBlkRegCompleteHandler
    i1_I2C_DO_RX->i1_wr1RegCompleteHandler
    i1_I2C_DO_RX->i1_wr2RegCompleteHandler
    i1_I2C_DO_ADDRESS_NACK->i1_I2C_CallbackReturnReset
    i1_I2C_DO_ADDRESS_NACK->i1_I2C_CallbackReturnStop
    i1_I2C_DO_ADDRESS_NACK->i1_rd1RegCompleteHandler
    i1_I2C_DO_ADDRESS_NACK->i1_rd2RegCompleteHandler
    i1_I2C_DO_ADDRESS_NACK->i1_rdBlkRegCompleteHandler
    i1_I2C_DO_ADDRESS_NACK->i1_wr1RegCompleteHandler
    i1_I2C_DO_ADDRESS_NACK->i1_wr2RegCompleteHandler
    i1_wr2RegCompleteHandler->i1_I2C_SetDataCompleteCallback
    i1_wr1RegCompleteHandler->i1_I2C_SetDataCompleteCallback
    i1_rdBlkRegCompleteHandler->i1_I2C_SetDataCompleteCallback
    i1_rd2RegCompleteHandler->i1_I2C_SetDataCompleteCallback
    i1_rd1RegCompleteHandler->i1_I2C_SetDataCompleteCallback
    i1_I2C_SetDataCompleteCallback->i1_I2C_SetCallback
    _MyUART_ISR->_EUSART_Write
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _TMR2_WriteTimer->_TMR2_Counter8BitSet
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _I2C_SetAddressNackCallback->_I2C_SetCallback
    _I2C_MasterWrite->_I2C_MasterOperation
    _I2C_MasterFsm->_I2C_DO_ADDRESS_NACK
    _I2C_MasterFsm->_I2C_DO_RX
    _I2C_MasterFsm->_I2C_DO_TX
    _I2C_MasterFsm->_I2C_DO_TX_EMPTY
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnReset
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnStop
    _I2C_DO_TX_EMPTY->_rd1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rd2RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rdBlkRegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr2RegCompleteHandler
    _I2C_DO_TX->_I2C_CallbackReturnReset
    _I2C_DO_TX->_I2C_CallbackReturnStop
    _I2C_DO_TX->_rd1RegCompleteHandler
    _I2C_DO_TX->_rd2RegCompleteHandler
    _I2C_DO_TX->_rdBlkRegCompleteHandler
    _I2C_DO_TX->_wr1RegCompleteHandler
    _I2C_DO_TX->_wr2RegCompleteHandler
    _I2C_DO_SEND_ADR_WRITE->_I2C_MasterSendTxData
    _I2C_DO_RX->_I2C_CallbackReturnReset
    _I2C_DO_RX->_I2C_CallbackReturnStop
    _I2C_DO_RX->_rd1RegCompleteHandler
    _I2C_DO_RX->_rd2RegCompleteHandler
    _I2C_DO_RX->_rdBlkRegCompleteHandler
    _I2C_DO_RX->_wr1RegCompleteHandler
    _I2C_DO_RX->_wr2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnReset
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnStop
    _I2C_DO_ADDRESS_NACK->_rd1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rd2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rdBlkRegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr2RegCompleteHandler
    _wr2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _wr1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rdBlkRegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _I2C_SetDataCompleteCallback->_I2C_SetCallback

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _TMR2_CallBack->_MyTimer2ISR
    _MyTimer2ISR->_I2C_Read1ByteRegister
    _MyTimer2ISR->i1_I2C_Write1ByteRegister
    i1_I2C_MasterWrite->i1_I2C_MasterOperation
    i1_I2C_Poller->i1_I2C_MasterFsm

Critical Paths under _main in BANK1

    _main->_I2C_Write1ByteRegister
    _I2C_MasterWrite->_I2C_MasterOperation
    _I2C_Poller->_I2C_MasterFsm
    _I2C_MasterFsm->_I2C_DO_TX

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  100617
                                             11 BANK1      2     2      0
       _EUSART_SetRxInterruptHandler
             _I2C_Write1ByteRegister
                            _MyDelay
                  _SYSTEM_Initialize
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
                    _TMR2_WriteTimer
 ---------------------------------------------------------------------------------
 (1) _TMR2_WriteTimer                                      1     1      0      44
                                             15 BANK0      1     1      0
                _TMR2_Counter8BitSet
 ---------------------------------------------------------------------------------
 (2) _TMR2_Counter8BitSet                                  1     1      0      22
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
                         _TMR2_Start
 ---------------------------------------------------------------------------------
 (2) _TMR2_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     642
                  _EUSART_Initialize
                     _I2C_Initialize
                 _MATHACC_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM3_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     174
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR2_SetInterruptHandler                             2     0      2     174
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MATHACC_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     468
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     174
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _MyDelay                                              6     6      0      46
                                             14 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Write1ByteRegister                               4     2      2   99537
                                              7 BANK1      4     2      2
                          _I2C_Close
                    _I2C_MasterWrite
                           _I2C_Open
         _I2C_SetAddressNackCallback
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (2) _I2C_SetAddressNackCallback                           4     1      3    2189
                                             19 BANK0      4     1      3
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (2) _I2C_Open                                             3     3      0      68
                                             14 BANK0      3     3      0
                 _I2C_MasterClearIrq
                     _I2C_MasterOpen
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterOpen                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_MasterWrite                                      0     0      0   91367
                _I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterOperation                                  3     3      0   91367
                                             25 BANK0      1     1      0
                                              5 BANK1      2     2      0
                    _I2C_MasterStart
                         _I2C_Poller
 ---------------------------------------------------------------------------------
 (4) _I2C_Poller                                           0     0      0   91197
                      _I2C_MasterFsm
             _I2C_MasterWaitForEvent
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterWaitForEvent                               0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterFsm                                        3     3      0   91197
                                              2 BANK1      3     3      0
                _I2C_DO_ADDRESS_NACK *
                        _I2C_DO_IDLE *
                        _I2C_DO_RCEN *
                       _I2C_DO_RESET *
                          _I2C_DO_RX *
                      _I2C_DO_RX_ACK *
             _I2C_DO_RX_NACK_RESTART *
                _I2C_DO_RX_NACK_STOP *
               _I2C_DO_SEND_ADR_READ *
              _I2C_DO_SEND_ADR_WRITE *
                _I2C_DO_SEND_RESTART *
           _I2C_DO_SEND_RESTART_READ *
          _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_DO_SEND_STOP *
                          _I2C_DO_TX *
                    _I2C_DO_TX_EMPTY *
                 _I2C_MasterClearIrq
                   _I2C_MasterIsNack
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_TX_EMPTY                                      1     1      0   22751
                                             24 BANK0      1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
                   _I2C_MasterSetIrq
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterSetIrq                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_TX                                            3     3      0   22882
                                             24 BANK0      1     1      0
                                              0 BANK1      2     2      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
           _I2C_DO_SEND_RESTART_READ
          _I2C_DO_SEND_RESTART_WRITE
                   _I2C_DO_SEND_STOP
                   _I2C_MasterIsNack
               _I2C_MasterSendTxData
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterIsNack                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_SEND_RESTART_WRITE                            0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_SEND_RESTART_READ                             0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_SEND_ADR_WRITE                                0     0      0      31
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_SEND_ADR_READ                                 0     0      0      31
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterSendTxData                                 1     1      0      31
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RX_ACK                                        0     0      0       0
                  _I2C_MasterSendAck
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RX                                            1     1      0   22751
                                             24 BANK0      1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
             _I2C_DO_RX_NACK_RESTART
                _I2C_DO_RX_NACK_STOP
                _I2C_MasterGetRxData
                  _I2C_MasterSendAck
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterSendAck                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterGetRxData                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RX_NACK_STOP                                  0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RX_NACK_RESTART                               0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterSendNack                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RESET                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_RCEN                                          0     0      0       0
                  _I2C_MasterStartRx
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterStartRx                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_DO_ADDRESS_NACK                                  1     1      0   22751
                                             24 BANK0      1     1      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _wr2RegCompleteHandler                                1     0      1    4479
                                             23 BANK0      1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _wr1RegCompleteHandler                                1     0      1    4479
                                             23 BANK0      1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _rdBlkRegCompleteHandler                              1     0      1    4510
                                             23 BANK0      1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _rd2RegCompleteHandler                                1     0      1    4479
                                             23 BANK0      1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _rd1RegCompleteHandler                                1     0      1    4519
                                             23 BANK0      1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (2) _I2C_SetDataCompleteCallback                          4     1      3    2909
                                             19 BANK0      4     1      3
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (3) _I2C_SetCallback                                      5     2      3    1117
                                             14 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (2) _I2C_SetBuffer                                        4     2      2    1539
                                             14 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_SEND_STOP                                     0     0      0       0
                     _I2C_MasterStop
 ---------------------------------------------------------------------------------
 (8) _I2C_MasterStop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_SEND_RESTART                                  0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (8) _I2C_MasterEnableRestart                              0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_CallbackReturnStop                               1     0      1       0
                                             23 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (7) _I2C_CallbackReturnReset                              1     0      1     285
                                             23 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (20) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (4) _I2C_MasterStart                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Close                                            2     2      0      37
                                             14 BANK0      2     2      0
                 _I2C_MasterClearIrq
                    _I2C_MasterClose
               _I2C_MasterDisableIrq
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterDisableIrq                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterClose                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterClearIrq                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 20
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                          1     1      0   42948
                                             13 BANK0      1     1      0
                   Absolute function *
                 _EUSART_Receive_ISR *
                  _MATHACC_Error_ISR
                    _MATHACC_PID_ISR
                         _MyUART_ISR *
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (11) _TMR2_ISR                                            0     0      0   42749
                      _TMR2_CallBack
 ---------------------------------------------------------------------------------
 (12) _TMR2_CallBack                                       0     0      0   42749
                   Absolute function *
                        _MyTimer2ISR *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (13) _TMR2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _MyTimer2ISR                                         4     4      0   42749
                                              9 BANK0      4     4      0
                       _EUSART_Write
              _I2C_Read1ByteRegister
              _MATHACC_PIDController
                 _PWM3_LoadDutyValue
           i1_I2C_Write1ByteRegister
 ---------------------------------------------------------------------------------
 (14) i1_I2C_Write1ByteRegister                            4     2      2   21142
                                              5 BANK0      4     2      2
                        i1_I2C_Close
                  i1_I2C_MasterWrite
                         i1_I2C_Open
       i1_I2C_SetAddressNackCallback
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (14) _PWM3_LoadDutyValue                                  4     2      2     196
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (14) _MATHACC_PIDController                               4     0      4     240
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (14) _I2C_Read1ByteRegister                               4     3      1   21149
                                              5 BANK0      4     3      1
                        i1_I2C_Close
                  i1_I2C_MasterWrite
                         i1_I2C_Open
       i1_I2C_SetAddressNackCallback
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (15) i1_I2C_SetAddressNackCallback                        4     1      3     406
                                              5 COMMON     4     1      3
                  i1_I2C_SetCallback
 ---------------------------------------------------------------------------------
 (15) i1_I2C_Open                                          3     3      0      46
                                              0 COMMON     3     3      0
               i1_I2C_MasterClearIrq
                   i1_I2C_MasterOpen
 ---------------------------------------------------------------------------------
 (16) i1_I2C_MasterOpen                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i1_I2C_MasterWrite                                   0     0      0   19120
              i1_I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (16) i1_I2C_MasterOperation                               3     3      0   19120
                                             13 COMMON     1     1      0
                                              3 BANK0      2     2      0
                  i1_I2C_MasterStart
                       i1_I2C_Poller
 ---------------------------------------------------------------------------------
 (17) i1_I2C_Poller                                        0     0      0   18950
                    i1_I2C_MasterFsm
           i1_I2C_MasterWaitForEvent
 ---------------------------------------------------------------------------------
 (18) i1_I2C_MasterWaitForEvent                            0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i1_I2C_MasterFsm                                     3     3      0   18950
                                              0 BANK0      3     3      0
              i1_I2C_DO_ADDRESS_NACK *
                      i1_I2C_DO_IDLE *
                      i1_I2C_DO_RCEN *
                     i1_I2C_DO_RESET *
                        i1_I2C_DO_RX *
                    i1_I2C_DO_RX_ACK *
           i1_I2C_DO_RX_NACK_RESTART *
              i1_I2C_DO_RX_NACK_STOP *
             i1_I2C_DO_SEND_ADR_READ *
            i1_I2C_DO_SEND_ADR_WRITE *
              i1_I2C_DO_SEND_RESTART *
         i1_I2C_DO_SEND_RESTART_READ *
        i1_I2C_DO_SEND_RESTART_WRITE *
                 i1_I2C_DO_SEND_STOP *
                        i1_I2C_DO_TX *
                  i1_I2C_DO_TX_EMPTY *
               i1_I2C_MasterClearIrq
                 i1_I2C_MasterIsNack
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_TX_EMPTY                                   1     1      0    4696
                                             10 COMMON     1     1      0
                   Absolute function *
          i1_I2C_CallbackReturnReset *
           i1_I2C_CallbackReturnStop *
              i1_I2C_DO_SEND_RESTART
                 i1_I2C_DO_SEND_STOP
                 i1_I2C_MasterSetIrq
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (20) i1_I2C_MasterSetIrq                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_TX                                         3     3      0    4818
                                             10 COMMON     3     3      0
                   Absolute function *
          i1_I2C_CallbackReturnReset *
           i1_I2C_CallbackReturnStop *
         i1_I2C_DO_SEND_RESTART_READ
        i1_I2C_DO_SEND_RESTART_WRITE
                 i1_I2C_DO_SEND_STOP
                 i1_I2C_MasterIsNack
             i1_I2C_MasterSendTxData
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (19) i1_I2C_MasterIsNack                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (20) i1_I2C_DO_SEND_RESTART_WRITE                         0     0      0       0
          i1_I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (20) i1_I2C_DO_SEND_RESTART_READ                          0     0      0       0
          i1_I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_SEND_ADR_WRITE                             0     0      0      22
             i1_I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_SEND_ADR_READ                              0     0      0      22
             i1_I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (20) i1_I2C_MasterSendTxData                              1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_RX_ACK                                     0     0      0       0
                i1_I2C_MasterSendAck
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_RX                                         1     1      0    4696
                                             10 COMMON     1     1      0
                   Absolute function *
          i1_I2C_CallbackReturnReset *
           i1_I2C_CallbackReturnStop *
           i1_I2C_DO_RX_NACK_RESTART
              i1_I2C_DO_RX_NACK_STOP
              i1_I2C_MasterGetRxData
                i1_I2C_MasterSendAck
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (20) i1_I2C_MasterSendAck                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (20) i1_I2C_MasterGetRxData                               0     0      0       0
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_RX_NACK_STOP                               0     0      0       0
               i1_I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_RX_NACK_RESTART                            0     0      0       0
               i1_I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (20) i1_I2C_MasterSendNack                                0     0      0       0
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_RESET                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_RCEN                                       0     0      0       0
                i1_I2C_MasterStartRx
 ---------------------------------------------------------------------------------
 (20) i1_I2C_MasterStartRx                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (19) i1_I2C_DO_ADDRESS_NACK                               1     1      0    4696
                                             10 COMMON     1     1      0
                   Absolute function *
          i1_I2C_CallbackReturnReset *
           i1_I2C_CallbackReturnStop *
              i1_I2C_DO_SEND_RESTART
                 i1_I2C_DO_SEND_STOP
            i1_rd1RegCompleteHandler *
            i1_rd2RegCompleteHandler *
          i1_rdBlkRegCompleteHandler *
            i1_wr1RegCompleteHandler *
            i1_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (20) i1_wr2RegCompleteHandler                             1     0      1     914
                                              9 COMMON     1     0      1
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (20) i1_wr1RegCompleteHandler                             1     0      1     914
                                              9 COMMON     1     0      1
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (20) i1_rdBlkRegCompleteHandler                           1     0      1     936
                                              9 COMMON     1     0      1
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (20) i1_rd2RegCompleteHandler                             1     0      1     914
                                              9 COMMON     1     0      1
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (20) i1_rd1RegCompleteHandler                             1     0      1     914
                                              9 COMMON     1     0      1
                    i1_I2C_SetBuffer
      i1_I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (15) i1_I2C_SetDataCompleteCallback                       4     1      3     666
                                              5 COMMON     4     1      3
                  i1_I2C_SetCallback
 ---------------------------------------------------------------------------------
 (16) i1_I2C_SetCallback                                   5     2      3     258
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (15) i1_I2C_SetBuffer                                     4     2      2     226
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (20) i1_I2C_DO_SEND_STOP                                  0     0      0       0
                   i1_I2C_MasterStop
 ---------------------------------------------------------------------------------
 (21) i1_I2C_MasterStop                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (20) i1_I2C_DO_SEND_RESTART                               0     0      0       0
          i1_I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (21) i1_I2C_MasterEnableRestart                           0     0      0       0
 ---------------------------------------------------------------------------------
 (20) i1_I2C_CallbackReturnStop                            1     0      1       0
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (20) i1_I2C_CallbackReturnReset                           1     0      1     104
                                              9 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (17) i1_I2C_MasterStart                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i1_I2C_Close                                         2     2      0      24
                                              0 COMMON     2     2      0
               i1_I2C_MasterClearIrq
                  i1_I2C_MasterClose
             i1_I2C_MasterDisableIrq
 ---------------------------------------------------------------------------------
 (16) i1_I2C_MasterDisableIrq                              0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i1_I2C_MasterClose                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i1_I2C_MasterClearIrq                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _MyUART_ISR                                          5     5      0     199
                                              1 COMMON     5     5      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (14) _EUSART_Write                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _MATHACC_PID_ISR                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _MATHACC_Error_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (12) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (12) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (20) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 21
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_SetRxInterruptHandler
   _I2C_Write1ByteRegister
     _I2C_Close
       _I2C_MasterClearIrq
       _I2C_MasterClose
       _I2C_MasterDisableIrq
     _I2C_MasterWrite
       _I2C_MasterOperation
         _I2C_MasterStart
         _I2C_Poller
           _I2C_MasterFsm
             _I2C_DO_ADDRESS_NACK *
               Absolute function(Fake) *
               _I2C_CallbackReturnReset *
               _I2C_CallbackReturnStop *
               _I2C_DO_SEND_RESTART *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_STOP *
                 _I2C_MasterStop
               _rd1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rd2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rdBlkRegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
             _I2C_DO_IDLE *
             _I2C_DO_RCEN *
               _I2C_MasterStartRx
             _I2C_DO_RESET *
             _I2C_DO_RX *
               Absolute function(Fake) *
               _I2C_CallbackReturnReset *
               _I2C_CallbackReturnStop *
               _I2C_DO_RX_NACK_RESTART *
                 _I2C_MasterSendNack
               _I2C_DO_RX_NACK_STOP *
                 _I2C_MasterSendNack
               _I2C_MasterGetRxData *
               _I2C_MasterSendAck *
               _rd1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rd2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rdBlkRegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
             _I2C_DO_RX_ACK *
               _I2C_MasterSendAck
             _I2C_DO_RX_NACK_RESTART *
               _I2C_MasterSendNack
             _I2C_DO_RX_NACK_STOP *
               _I2C_MasterSendNack
             _I2C_DO_SEND_ADR_READ *
               _I2C_MasterSendTxData
             _I2C_DO_SEND_ADR_WRITE *
               _I2C_MasterSendTxData
             _I2C_DO_SEND_RESTART *
               _I2C_MasterEnableRestart
             _I2C_DO_SEND_RESTART_READ *
               _I2C_MasterEnableRestart
             _I2C_DO_SEND_RESTART_WRITE *
               _I2C_MasterEnableRestart
             _I2C_DO_SEND_STOP *
               _I2C_MasterStop
             _I2C_DO_TX *
               Absolute function(Fake) *
               _I2C_CallbackReturnReset *
               _I2C_CallbackReturnStop *
               _I2C_DO_SEND_RESTART_READ *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_RESTART_WRITE *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_STOP *
                 _I2C_MasterStop
               _I2C_MasterIsNack *
               _I2C_MasterSendTxData *
               _rd1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rd2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rdBlkRegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
             _I2C_DO_TX_EMPTY *
               Absolute function(Fake) *
               _I2C_CallbackReturnReset *
               _I2C_CallbackReturnStop *
               _I2C_DO_SEND_RESTART *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_STOP *
                 _I2C_MasterStop
               _I2C_MasterSetIrq *
               _rd1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rd2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _rdBlkRegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr1RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
               _wr2RegCompleteHandler *
                 _I2C_SetBuffer
                 _I2C_SetDataCompleteCallback
                   _I2C_SetCallback
             _I2C_MasterClearIrq *
             _I2C_MasterIsNack *
           _I2C_MasterWaitForEvent
     _I2C_Open
       _I2C_MasterClearIrq
       _I2C_MasterOpen
     _I2C_SetAddressNackCallback
       _I2C_SetCallback
     _I2C_SetBuffer
     _I2C_SetDataCompleteCallback
       _I2C_SetCallback
   _MyDelay
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
     _I2C_Initialize
     _MATHACC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM3_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
   _TMR2_SetInterruptHandler
   _TMR2_StartTimer
     _TMR2_Start
   _TMR2_WriteTimer
     _TMR2_Counter8BitSet

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _MATHACC_Error_ISR *
   _MATHACC_PID_ISR *
   _MyUART_ISR *
     _EUSART_Write
   _TMR2_ISR *
     _TMR2_CallBack
       Absolute function(Fake) *
       _MyTimer2ISR *
         _EUSART_Write
         _I2C_Read1ByteRegister
           i1_I2C_Close
             i1_I2C_MasterClearIrq
             i1_I2C_MasterClose
             i1_I2C_MasterDisableIrq
           i1_I2C_MasterWrite
             i1_I2C_MasterOperation
               i1_I2C_MasterStart
               i1_I2C_Poller
                 i1_I2C_MasterFsm
                   i1_I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     i1_I2C_CallbackReturnReset *
                     i1_I2C_CallbackReturnStop *
                     i1_I2C_DO_SEND_RESTART *
                       i1_I2C_MasterEnableRestart
                     i1_I2C_DO_SEND_STOP *
                       i1_I2C_MasterStop
                     i1_rd1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rd2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rdBlkRegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                   i1_I2C_DO_IDLE *
                   i1_I2C_DO_RCEN *
                     i1_I2C_MasterStartRx
                   i1_I2C_DO_RESET *
                   i1_I2C_DO_RX *
                     Absolute function(Fake) *
                     i1_I2C_CallbackReturnReset *
                     i1_I2C_CallbackReturnStop *
                     i1_I2C_DO_RX_NACK_RESTART *
                       i1_I2C_MasterSendNack
                     i1_I2C_DO_RX_NACK_STOP *
                       i1_I2C_MasterSendNack
                     i1_I2C_MasterGetRxData *
                     i1_I2C_MasterSendAck *
                     i1_rd1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rd2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rdBlkRegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                   i1_I2C_DO_RX_ACK *
                     i1_I2C_MasterSendAck
                   i1_I2C_DO_RX_NACK_RESTART *
                     i1_I2C_MasterSendNack
                   i1_I2C_DO_RX_NACK_STOP *
                     i1_I2C_MasterSendNack
                   i1_I2C_DO_SEND_ADR_READ *
                     i1_I2C_MasterSendTxData
                   i1_I2C_DO_SEND_ADR_WRITE *
                     i1_I2C_MasterSendTxData
                   i1_I2C_DO_SEND_RESTART *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_RESTART_READ *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_RESTART_WRITE *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_STOP *
                     i1_I2C_MasterStop
                   i1_I2C_DO_TX *
                     Absolute function(Fake) *
                     i1_I2C_CallbackReturnReset *
                     i1_I2C_CallbackReturnStop *
                     i1_I2C_DO_SEND_RESTART_READ *
                       i1_I2C_MasterEnableRestart
                     i1_I2C_DO_SEND_RESTART_WRITE *
                       i1_I2C_MasterEnableRestart
                     i1_I2C_DO_SEND_STOP *
                       i1_I2C_MasterStop
                     i1_I2C_MasterIsNack *
                     i1_I2C_MasterSendTxData *
                     i1_rd1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rd2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rdBlkRegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                   i1_I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     i1_I2C_CallbackReturnReset *
                     i1_I2C_CallbackReturnStop *
                     i1_I2C_DO_SEND_RESTART *
                       i1_I2C_MasterEnableRestart
                     i1_I2C_DO_SEND_STOP *
                       i1_I2C_MasterStop
                     i1_I2C_MasterSetIrq *
                     i1_rd1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rd2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rdBlkRegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                   i1_I2C_MasterClearIrq *
                   i1_I2C_MasterIsNack *
                 i1_I2C_MasterWaitForEvent
           i1_I2C_Open
             i1_I2C_MasterClearIrq
             i1_I2C_MasterOpen
           i1_I2C_SetAddressNackCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
           i1_I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
         _MATHACC_PIDController
         _PWM3_LoadDutyValue
         i1_I2C_Write1ByteRegister
           i1_I2C_Close
             i1_I2C_MasterClearIrq
             i1_I2C_MasterClose
             i1_I2C_MasterDisableIrq
           i1_I2C_MasterWrite
             i1_I2C_MasterOperation
               i1_I2C_MasterStart
               i1_I2C_Poller
                 i1_I2C_MasterFsm
                   i1_I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     i1_I2C_CallbackReturnReset *
                     i1_I2C_CallbackReturnStop *
                     i1_I2C_DO_SEND_RESTART *
                       i1_I2C_MasterEnableRestart
                     i1_I2C_DO_SEND_STOP *
                       i1_I2C_MasterStop
                     i1_rd1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rd2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rdBlkRegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                   i1_I2C_DO_IDLE *
                   i1_I2C_DO_RCEN *
                     i1_I2C_MasterStartRx
                   i1_I2C_DO_RESET *
                   i1_I2C_DO_RX *
                     Absolute function(Fake) *
                     i1_I2C_CallbackReturnReset *
                     i1_I2C_CallbackReturnStop *
                     i1_I2C_DO_RX_NACK_RESTART *
                       i1_I2C_MasterSendNack
                     i1_I2C_DO_RX_NACK_STOP *
                       i1_I2C_MasterSendNack
                     i1_I2C_MasterGetRxData *
                     i1_I2C_MasterSendAck *
                     i1_rd1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rd2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rdBlkRegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                   i1_I2C_DO_RX_ACK *
                     i1_I2C_MasterSendAck
                   i1_I2C_DO_RX_NACK_RESTART *
                     i1_I2C_MasterSendNack
                   i1_I2C_DO_RX_NACK_STOP *
                     i1_I2C_MasterSendNack
                   i1_I2C_DO_SEND_ADR_READ *
                     i1_I2C_MasterSendTxData
                   i1_I2C_DO_SEND_ADR_WRITE *
                     i1_I2C_MasterSendTxData
                   i1_I2C_DO_SEND_RESTART *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_RESTART_READ *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_RESTART_WRITE *
                     i1_I2C_MasterEnableRestart
                   i1_I2C_DO_SEND_STOP *
                     i1_I2C_MasterStop
                   i1_I2C_DO_TX *
                     Absolute function(Fake) *
                     i1_I2C_CallbackReturnReset *
                     i1_I2C_CallbackReturnStop *
                     i1_I2C_DO_SEND_RESTART_READ *
                       i1_I2C_MasterEnableRestart
                     i1_I2C_DO_SEND_RESTART_WRITE *
                       i1_I2C_MasterEnableRestart
                     i1_I2C_DO_SEND_STOP *
                       i1_I2C_MasterStop
                     i1_I2C_MasterIsNack *
                     i1_I2C_MasterSendTxData *
                     i1_rd1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rd2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rdBlkRegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                   i1_I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     i1_I2C_CallbackReturnReset *
                     i1_I2C_CallbackReturnStop *
                     i1_I2C_DO_SEND_RESTART *
                       i1_I2C_MasterEnableRestart
                     i1_I2C_DO_SEND_STOP *
                       i1_I2C_MasterStop
                     i1_I2C_MasterSetIrq *
                     i1_rd1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rd2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_rdBlkRegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr1RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                     i1_wr2RegCompleteHandler *
                       i1_I2C_SetBuffer
                       i1_I2C_SetDataCompleteCallback
                         i1_I2C_SetCallback
                   i1_I2C_MasterClearIrq *
                   i1_I2C_MasterIsNack *
                 i1_I2C_MasterWaitForEvent
           i1_I2C_Open
             i1_I2C_MasterClearIrq
             i1_I2C_MasterOpen
           i1_I2C_SetAddressNackCallback
             i1_I2C_SetCallback
           i1_I2C_SetBuffer
           i1_I2C_SetDataCompleteCallback
             i1_I2C_SetCallback
       _TMR2_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1A      42       5       82.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      D      2C       7       55.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      7C      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      7C      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Apr 28 11:17:49 2020

                ?_EUSART_SetRxInterruptHandler 004B                         ??_I2C_DO_SEND_ADR_READ 004B  
                                  MyUART_ISR@c 0075                    __size_of_I2C_MasterSendNack 0004  
                           __size_of_I2C_Close 001E               __end_of_TMR2_SetInterruptHandler 0E7F  
                                            _G 0034                                              pc 0002  
                      ??_I2C_DO_SEND_ADR_WRITE 004C                                    __CFG_CP$OFF 0000  
                          __size_of_I2C_Poller 000A                          ??_I2C_DO_SEND_RESTART 004B  
                                  ?i1_I2C_Open 0070                                    __CFG_LVP$ON 0000  
                 __size_of_I2C_MasterOperation 001C                  __size_of_I2C_MasterSendTxData 0006  
                                          l401 029B                                            l335 0383  
                                          l417 0326                                            l558 0E22  
                                          l995 0234                                            _PR2 001B  
                                          _Pos 0038                         ??_EUSART_RxDataHandler 0070  
                       _I2C_MasterWaitForEvent 0E22                 ?_EUSART_SetFramingErrorHandler 004B  
                     ?i1_rd2RegCompleteHandler 0079                                _TMR2_Initialize 07C3  
                                 __CFG_BORV$LO 0000                                            wreg 0009  
                                 ?i1_I2C_DO_RX 0070                                   ?i1_I2C_DO_TX 0070  
                                 __CFG_IESO$ON 0000                          _I2C_DO_RCEN$intlevel0 0F1D  
                 ??_I2C_SetAddressNackCallback 0053                       ?i1_wr2RegCompleteHandler 0079  
                                 ?i1_I2C_Close 0070                         _I2C_Write1ByteRegister 0499  
                  ??i1_I2C_MasterEnableRestart 0070                       ??_I2C_CallbackReturnStop 0055  
                                 _I2C_DO_RESET 0EF3                                   __CFG_ZCD$OFF 0000  
                                         l1010 0258                                           l1012 025A  
                      ??_rd2RegCompleteHandler 0055                                           l4202 05EA  
                                         l4320 0770                                           l4410 0E53  
                                         l4402 0EBD                                           l4414 0E59  
                                         l4344 0786                                           l4328 075A  
                                         l4336 0744                                           l4352 06C4  
                                         l4370 0EB5                                           l4428 0EEE  
                                         l4436 0F80                                           l4444 0F46  
                                         l4508 0F1D                                           l4364 0EAD  
                                         l4542 0EF7                                           l4376 0EC5  
                                         l4536 0ECD                                           l6330 0278  
                                         l6322 026E                                           l4394 0ED5  
                                         l6402 0565                        ??i1_I2C_MasterGetRxData 0070  
                                         l6340 027E                                           l4388 0EDD  
                                         l6412 056B                                           l6500 06F1  
                                         l6334 027B                                           l6326 0275  
                                         l6406 0568                                           l6352 0309  
                                         l6504 06F6                                           l6370 032B  
                                         l6442 05BD                                           l3970 0247  
                                         l3962 0236                                           l6380 0534  
                                         l6348 02B4                                           l6390 053B  
                                         l6366 0328                                           l3974 025B  
                                         l6384 0537                                           l6376 032E  
                                         l6472 0F23                                           l4778 069F  
                                         l6378 0531                                           l6396 053E  
                                         l6398 055C                                           l6498 06EB  
                                         l6586 049B                                           l6762 01F2  
                                         l6596 04C5                                           l6764 01F6  
                                         l6756 020B                                           l6766 0201  
                                         l6758 01E4                 __size_ofi1_I2C_DO_SEND_RESTART 0004  
                                         _LATA 010C                                           _LATB 010D  
                                         _LATC 010E                                           u1705 022F  
                                         _T2PR 001B                                           u1760 0256  
                __end_ofi1_I2C_DO_SEND_RESTART 0E02                                           u4530 01F0  
                                         u4550 01FF                                           u4577 0206  
                                         u4587 025F                                           _TMR2 001A  
                                         _WPUA 020C                                           _WPUB 020D  
                                         _WPUC 020E                                           _Data 0037  
                      ??_wr2RegCompleteHandler 0055                                   __CFG_WRT$OFF 0000  
                                __CFG_FCMEN$ON 0000                                           _Type 0036  
                                         _main 01A7                       ?_I2C_CallbackReturnReset 0054  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                             __end_of_I2C_Open 0386                                  i1_I2C_DO_IDLE 0E2F  
                                         btemp 007E                                  i1_I2C_DO_RCEN 0E49  
               __end_ofi1_I2C_DO_SEND_ADR_READ 0EA9                                  __CFG_BOREN$ON 0000  
                                         start 0038                   i1I2C_Write1ByteRegister@data 0043  
                                __CFG_MCLRE$ON 0000                            _TMR2_Counter8BitSet 0E3E  
             __size_of_rdBlkRegCompleteHandler 001D                                __end_of_MyDelay 026A  
                _I2C_DO_RX_NACK_STOP$intlevel0 0ED5                    __size_of_MATHACC_Initialize 0014  
                      ??i1_I2C_DO_ADDRESS_NACK 007A                                  _I2C_DO_TX$864 00BD  
                             ?_I2C_MasterClose 0070                                  ?i1_I2C_Poller 0070  
                                __CFG_PLLEN$ON 0000                                  ?_EUSART_Write 0070  
          __size_of_I2C_SetAddressNackCallback 000D                 __size_of_OSCILLATOR_Initialize 0007  
                             ?_I2C_MasterStart 0070                                  _I2C_DO_RX_ACK 0EC9  
                             ?_I2C_MasterWrite 0070                  __end_of_OSCILLATOR_Initialize 0E99  
              ??i1_I2C_SetDataCompleteCallback 0078                          i1I2C_Open@returnValue 0072  
                                        ?_main 0070                                  __CFG_WDTE$OFF 0000  
                        _I2C_Read1ByteRegister 04CC                                          _T2CON 001C  
                     ??i1_I2C_MasterDisableIrq 0070                                          _T2HLT 001D  
                                        i1l130 002B                                          _T2TMR 001A  
                                        i1l126 0017                                          i1l135 0033  
                                        i1l128 0021                                          i1l401 02E6  
                                        _T2RST 001F                    __end_ofi1_I2C_MasterSendAck 0DF6  
                                        i1l335 0430                                          i1l417 03DB  
                                        i1l558 0E12                                          i1l649 0E9A  
                                        i1l964 00C4                                          i1l974 00CB  
                                        i1l966 00C6                                          i1l959 00C1  
                                        i1l976 00CD                                          i1l969 00C8  
                                        i1l979 00CF                   __size_of_I2C_DO_RX_NACK_STOP 0008  
                            ??_I2C_DO_TX_EMPTY 0055                                          _TRISA 008C  
                                        _TRISB 008D                                          _TRISC 008E  
                                        _RXPPS 0E24                                          _Angle 0060  
                  __end_ofi1_I2C_MasterStartRx 0DC3                           ?_TMR2_Counter8BitSet 0070  
                            __end_of_I2C_DO_RX 0348                              __end_of_I2C_DO_TX 02BA  
                             __end_of_TMR2_ISR 0E3E                        ??i1_I2C_MasterOperation 007D  
                                  ?_TMR2_Start 0070                              __end_of_I2C_Close 06A2  
                       __size_of_I2C_MasterFsm 0027                 I2C_MasterOperation@returnValue 00C3  
                                   _MyUART_ISR 0059                              ??i1_I2C_MasterFsm 003D  
                      _I2C_MasterEnableRestart 0DD5                            _I2C_DO_RX$intlevel0 0309  
                      __end_of_PWM3_Initialize 0F58             _I2C_DO_SEND_RESTART_READ$intlevel0 0EAD  
                               i1_I2C_DO_RESET 0E34                                          pclath 000A  
                             ?_I2C_SetCallback 004B                __end_ofi1_I2C_DO_SEND_ADR_WRITE 0E92  
                 I2C_SetAddressNackCallback@cb 0050                                 ?i1_I2C_DO_IDLE 0070  
                               ?i1_I2C_DO_RCEN 0070                                          status 0003  
                                        wtemp0 007E                              ?_I2C_DO_SEND_STOP 0070  
                   __size_ofi1_I2C_DO_TX_EMPTY 0025                         __size_of_I2C_SetBuffer 0015  
                              _TMR2_StartTimer 0DE7                     MATHACC_PIDController@input 0072  
                            ??i1_I2C_SetBuffer 0072                            __size_ofi1_I2C_Open 0037  
                           ??_I2C_DO_SEND_STOP 004B                                  _fsmStateTable 0664  
                              __initialization 003A                                  ??_MyTimer2ISR 0046  
                    i1_I2C_MasterEnableRestart 0DBA                                   __end_of_main 0212  
            __size_of_I2C_DO_SEND_RESTART_READ 0008                      ?_I2C_DO_SEND_RESTART_READ 0070  
                               ??i1_I2C_Poller 007D                                 ??_EUSART_Write 0070  
                               ?_I2C_DO_RX_ACK 0070                        __end_of_TMR2_Initialize 07D8  
                               __CFG_LPBOR$OFF 0000                    ?_INTERRUPT_InterruptManager 0070  
              __end_ofi1_rd2RegCompleteHandler 0FEC                 ??_EUSART_SetRxInterruptHandler 004D  
                     _TMR2_SetInterruptHandler 0E79                                         ??_main 00C8  
                 __end_ofi1_I2C_MasterClearIrq 0DB1                              ?_I2C_MasterIsNack 0070  
              __end_ofi1_wr2RegCompleteHandler 0FCC                        ??_MATHACC_PIDController 0074  
                              _TMR2_WriteTimer 0E7F               __end_ofi1_I2C_DO_RX_NACK_RESTART 0E12  
                            ?_I2C_MasterSetIrq 0070                             ??_I2C_MasterIsNack 004B  
                         i1I2C_SetCallback@idx 0074                           i1I2C_SetCallback@ptr 0072  
                     __size_of_MATHACC_PID_ISR 0009                          ??_TMR2_Counter8BitSet 004B  
                           ??_I2C_MasterSetIrq 004B      __end_of_EUSART_DefaultFramingErrorHandler 0DA5  
   __size_of_EUSART_DefaultFramingErrorHandler 0001            ??_EUSART_DefaultFramingErrorHandler 0070  
           ?_EUSART_DefaultFramingErrorHandler 0070              _EUSART_DefaultFramingErrorHandler 0DA4  
                       __end_ofi1_I2C_DO_RESET 0E39                     _EUSART_OverrunErrorHandler 0059  
                      ??i1_I2C_DO_RX_NACK_STOP 0070                __end_of_I2C_CallbackReturnReset 0E5B  
                                       i1S6800 0800                __size_of_I2C_CallbackReturnStop 0006  
                I2C_SetDataCompleteCallback@cb 0050                  MATHACC_PIDController@setpoint 0070  
                                       _ANSELA 018C                                         _ANSELB 018D  
                                       _ANSELC 018E                                         _BORCON 0116  
                                 ??_I2C_Poller 0056                                         _RC1REG 0199  
                                       _RA2PPS 0E92                                         _RC1STA 019D  
                                       _RB4PPS 0E9C                                         _RB6PPS 0E9E  
                                       _RB7PPS 0E9F                                         _ODCONA 028C  
                                       _ODCONB 028D                                         _ODCONC 028E  
                                       i1l3054 0E49                                         i1l3082 0E06  
                          _I2C_DO_TX$intlevel0 026E                                         i1l3088 0E34  
                                       i1l2902 0712                                         i1l2920 0DFE  
                                       i1l3482 0710                                         i1l2914 0DFA  
                                       i1l6220 02C4                                         i1l6212 02BA  
                                       i1l2908 0DF6                                         i1l2932 0E0A  
                                       i1l3910 0083                                         i1l2854 0633  
                                       i1l2870 0FCC                                         i1l6230 02CA  
                                       i1l2926 0E02                                         i1l6302 064E  
                                       i1l3904 0072                                         i1l2944 0DA6  
                                       i1l6224 02C7                                         i1l6216 02C1  
                                       i1l6312 0594                                         i1l6320 0F05  
                                       i1l3922 00A9                                         i1l6242 03C1  
                                       i1l2938 0E0E                                         i1l3940 00F5  
                                       i1l3908 007A                                         i1l2948 0002  
                                       i1l6260 03E0                                         i1l3942 00F8  
                                       i1l3934 00D5                                         i1l3926 00B7  
                                       i1l3918 00A0                                         i1l2894 0FBC  
                                       i1l2878 0FDC                                         i1l2886 07ED  
                                       i1l6270 05FB                                         i1l2974 0E2F  
                                       i1l2982 0EA1                                         i1l2990 0E8B  
                                       i1l6238 02FF                                         i1l6430 06BD  
                                       i1l3936 00E0                                         i1l6280 0602  
                                       i1l6256 03DD                                         i1l6424 06B3  
                                       i1l3938 00EA                                         i1l3946 00FA  
                                       i1l6274 05FE                                         i1l6266 03E3  
                                       i1l6426 06B8                                         i1l6450 04CF  
                                       i1l6530 0161                                         i1l6612 0446  
                                       i1l6268 05F8                                         i1l6292 0648  
                                       i1l6460 04F5                                         i1l6540 0178  
                                       i1l6622 0463                                         i1l6286 0605  
                                       i1l6518 013A                                         i1l3896 0062  
                                       i1l6296 064B                                         i1l6288 0641  
                                       i1l6552 019E                                         i1l6544 0182  
                                       i1l6536 016C                                         i1l6618 0454  
                                       i1l6546 018C                                         i1l6476 0500  
                                       i1l6486 0526                                         u135_25 07A7  
                                       _INLVLA 038C                                         _INLVLB 038D  
                                       _INLVLC 038E                                         u417_25 010F  
                                       u418_25 013E                   __end_ofi1_I2C_MasterSendNack 0DF2  
                  __size_ofi1_I2C_DO_SEND_STOP 0004                                         _OSCCON 0099  
                      i1_rd1RegCompleteHandler 0FCC                       ??i1_I2C_MasterSendTxData 0070  
                                       _SPBRGH 019C                                         _SPBRGL 019B  
                       _I2C_DO_RESET$intlevel0 0EF7                                         _TX1REG 019A  
                                       _TX1STA 019E                        i1_wr1RegCompleteHandler 07ED  
              _I2C_DO_SEND_ADR_WRITE$intlevel0 0F46                                      ??_MyDelay 004B  
                                       _CptBat 0035                    ??i1_rdBlkRegCompleteHandler 007A  
                                   _Validation 0061                                 __CFG_PWRTE$OFF 0000  
                          _I2C_MasterGetRxData 0DDE             __size_ofi1_I2C_CallbackReturnReset 0002  
                   ?i1_I2C_CallbackReturnReset 0079                     _I2C_DO_SEND_STOP$intlevel0 0EC5  
                  __size_of_PWM3_LoadDutyValue 0016                                  _I2C_MasterFsm 05AC  
                               __CFG_STVREN$ON 0000                            __size_of_TMR2_Start 0003  
                            ?i1_I2C_MasterOpen 0070                              I2C_SetCallback@cb 004B  
                            ?i1_I2C_MasterStop 0070                    __size_ofi1_I2C_MasterIsNack 0006  
                       ?_I2C_Read1ByteRegister 0042                        __size_of_I2C_MasterOpen 000C  
                      __size_of_I2C_MasterStop 0003                        __size_of_I2C_Initialize 000A  
                                _I2C_SetBuffer 07D8                            __end_of_MyTimer2ISR 01A7  
                           __end_of_I2C_Poller 0F2D                             ??i1_I2C_MasterOpen 0070  
                  __size_ofi1_I2C_MasterSetIrq 0003                   __end_of_I2C_MasterDisableIrq 0DD2  
                              i1_I2C_DO_TX$864 007B                             ??i1_I2C_MasterStop 0070  
              __size_ofi1_I2C_MasterDisableIrq 0003                 _I2C_DO_SEND_ADR_READ$intlevel0 0F80  
                          _I2C_DO_ADDRESS_NACK 0558                           ?_I2C_MasterGetRxData 0070  
                                    ?_I2C_Open 0070             __end_of_I2C_SetAddressNackCallback 0FAE  
                   _I2C_SetAddressNackCallback 0FA1                                i1_I2C_DO_RX_ACK 0E06  
        __end_ofi1_I2C_SetDataCompleteCallback 0F64         __size_ofi1_I2C_SetDataCompleteCallback 000C  
                i1_I2C_SetDataCompleteCallback 0F58                      ??_I2C_MasterEnableRestart 004B  
                   ??i1_I2C_CallbackReturnStop 007A                                ?i1_I2C_DO_RESET 0070  
                      __end_of_TMR2_StartTimer 0DEA       TMR2_SetInterruptHandler@InterruptHandler 004B  
                         __size_ofi1_I2C_DO_RX 003A                           __size_ofi1_I2C_DO_TX 004B  
                                  ?_MyUART_ISR 0070                                ??i1_I2C_DO_IDLE 0070  
                              ??i1_I2C_DO_RCEN 0070                           __size_ofi1_I2C_Close 0019  
                             ?_PWM3_Initialize 0070                              _SYSTEM_Initialize 07AE  
                      __end_of__initialization 0055                  _I2C_DO_ADDRESS_NACK$intlevel0 055C  
                        __end_of_TMR2_CallBack 0F42                            _I2C_MasterOperation 06DD  
                           ?_SYSTEM_Initialize 0070                           ?_I2C_DO_ADDRESS_NACK 0070  
            _rdBlkRegCompleteHandler$intlevel0 06C4                        _rdBlkRegCompleteHandler 06C0  
                               __pcstackCOMMON 0070                                 ?_I2C_MasterFsm 0070  
            __end_ofi1_I2C_CallbackReturnReset 0004                                ??_I2C_DO_RX_ACK 004B  
                                 __pidataBANK0 07FD                         _I2C_CallbackReturnStop 0E4F  
                          ??_SYSTEM_Initialize 004D                                      ?_TMR2_ISR 0070  
                      __end_of_TMR2_WriteTimer 0E85                               ?_TMR2_Initialize 0070  
                               ?_I2C_SetBuffer 004B                        ?_I2C_MasterWaitForEvent 0070  
               __size_of_I2C_DO_SEND_ADR_WRITE 000B             __size_of_I2C_DO_SEND_RESTART_WRITE 0008  
                __end_of_I2C_DO_SEND_ADR_WRITE 0F4D                                   ??i1_I2C_Open 0070  
                 ?i1_I2C_DO_SEND_RESTART_WRITE 0070                     ?_I2C_DO_SEND_RESTART_WRITE 0070  
                         ?_I2C_MasterOperation 0070                      i1_rdBlkRegCompleteHandler 0712  
             __size_ofi1_I2C_DO_SEND_ADR_WRITE 0007                          ??_I2C_MasterGetRxData 004B  
                      ?_I2C_Write1ByteRegister 00C4                                 _OPTION_REGbits 0095  
                                   ??_I2C_Open 004B                           _eusartRxStatusBuffer 0020  
                   __end_of_I2C_MasterClearIrq 0DCC                ??_EUSART_SetOverrunErrorHandler 004D  
                     i1_I2C_DO_RX_NACK_RESTART 0E0E                      __end_of_SYSTEM_Initialize 07C3  
                    ??i1_rd1RegCompleteHandler 007A                         i1I2C_Close@returnValue 0071  
                            _I2C_MasterSendAck 0E1E                                     __pbssBANK0 0020  
                                   __pbssBANK1 00A0                           __end_ofi1_I2C_Poller 0F0F  
                    ??i1_wr1RegCompleteHandler 007A                           __end_of_EUSART_Write 0EA1  
                            ??_MATHACC_PID_ISR 0070                                  ??_I2C_DO_IDLE 004B  
               __size_of_rd2RegCompleteHandler 0016                 __size_ofi1_I2C_MasterGetRxData 0003  
                                ??_I2C_DO_RCEN 004B                 i1I2C_CallbackReturnStop@funPtr 0079  
                __end_of_rd2RegCompleteHandler 076C                   __end_of_I2C_MasterSendTxData 0E61  
                __end_ofi1_I2C_MasterGetRxData 0DC6                             ?_I2C_MasterSendAck 0070  
                            _I2C_MasterStartRx 0DDB                __size_ofi1_I2C_MasterSendTxData 0005  
               __size_of_wr2RegCompleteHandler 0016                          ??_I2C_DO_ADDRESS_NACK 0055  
                       i1_I2C_MasterDisableIrq 0DB4                i1I2C_SetDataCompleteCallback@cb 0075  
             __size_ofi1_rd2RegCompleteHandler 0010                  __end_of_wr2RegCompleteHandler 0798  
                  __size_of_EUSART_Receive_ISR 0034                            _I2C_DO_RX_NACK_STOP 0ED1  
                         i1_I2C_MasterClearIrq 0DAE                          _rd1RegCompleteHandler 076C  
                           ?_I2C_MasterStartRx 0070                             __end_ofi1_I2C_Open 0432  
                   __end_of_I2C_MasterSendNack 0E1E               __size_ofi1_wr2RegCompleteHandler 0010  
                        _wr1RegCompleteHandler 0740                _rd1RegCompleteHandler$intlevel0 0770  
              _wr1RegCompleteHandler$intlevel0 0744                                     __pmaintext 01A7  
                          ??_I2C_MasterSendAck 004B                       rd1RegCompleteHandler@ptr 0054  
                  __end_of_I2C_DO_SEND_RESTART 0EC1                                    _MyTimer2ISR 0107  
                              _I2C_DO_TX_EMPTY 052D                            I2C_SetBuffer@buffer 004E  
                              __CFG_PPS1WAY$ON 0000                                     ??_TMR2_ISR 007E  
                            _MATHACC_Error_ISR 0DAB                                     __pintentry 0004  
               __end_of_I2C_MasterWaitForEvent 0E26                            ??_I2C_MasterStartRx 004B  
                __size_of_I2C_DO_SEND_ADR_READ 000C                            __size_of_MyUART_ISR 00AE  
               __size_ofi1_I2C_DO_ADDRESS_NACK 0023               __size_of_I2C_CallbackReturnReset 0006  
                      __end_ofi1_I2C_DO_RX_ACK 0E0A                        _I2C_DO_RX_ACK$intlevel0 0ECD  
                __end_ofi1_I2C_DO_ADDRESS_NACK 0664                   ??_EUSART_DefaultErrorHandler 0071  
                        ??_I2C_MasterOperation 0056                             ?_MATHACC_Error_ISR 0070  
               I2C_SetDataCompleteCallback@ptr 0052                 __end_of_I2C_Write1ByteRegister 04CC  
                         i1_I2C_MasterSendNack 0DEE                                i1_I2C_MasterFsm 0582  
            __size_ofi1_I2C_MasterWaitForEvent 0004                       ??_I2C_DO_RX_NACK_RESTART 004B  
                    ?i1_I2C_MasterWaitForEvent 0070              __end_of_I2C_DO_SEND_RESTART_WRITE 0EB9  
                         ?_I2C_DO_RX_NACK_STOP 0070                                  _eusartRxCount 003A  
                                      _PID1K1H 0591                                        _PID1K2H 0593  
                                      _PID1K1L 0590                                        _PID1K3H 0595  
                                      _PID1K2L 0592                                        _PID1K3L 0594  
                                      _PID1CON 0614                                        _PID1INH 058F  
                                      _PID1INL 058E                                        _PID1Z1H 059C  
                                      _PID1Z2H 060D                                        _PID1Z1L 059B  
                                      _PID1Z2L 060C                                        _PID1Z1U 059D  
                                      _PID1Z2U 060E                  ??i1_I2C_DO_SEND_RESTART_WRITE 0070  
                              __CFG_WDTCCS$SWC 0000              __size_ofi1_I2C_Write1ByteRegister 002F  
                          ??_MATHACC_Error_ISR 0070                      ?i1_I2C_Write1ByteRegister 0042  
                __size_of_EUSART_RxDataHandler 0017                                i1_I2C_SetBuffer 0FAE  
                    __end_of_I2C_MasterSendAck 0E22                                        _OSCTUNE 0098  
                                      _PWM3DCH 0618                                        _PWM3DCL 0617  
                                      _PWM3CON 0619                                        _SSP1ADD 0212  
                                      _SLRCONA 030C                                        _SLRCONB 030D  
                                      _SLRCONC 030E                                        _SSP1BUF 0211  
                                 ??_TMR2_Start 004B                       ??_EUSART_SetErrorHandler 004D  
                             ?_TMR2_StartTimer 0070            _I2C_DO_SEND_RESTART_WRITE$intlevel0 0EB5  
               __size_ofi1_I2C_MasterOperation 001E                  __end_ofi1_I2C_MasterOperation 06C0  
                    __end_of_I2C_MasterStartRx 0DDE                           I2C_Close@returnValue 004C  
                 ?_I2C_SetDataCompleteCallback 0050                 ?i1_I2C_SetDataCompleteCallback 0075  
                                    _I2C_DO_RX 0305                                      _I2C_DO_TX 026A  
             __end_of_I2C_DO_SEND_RESTART_READ 0EB1                     i1rd1RegCompleteHandler@ptr 0079  
                 ??i1_I2C_DO_SEND_RESTART_READ 0070                   I2C_Read1ByteRegister@address 0044  
                                    _I2C_Close 0684                          i1_I2C_DO_SEND_RESTART 0DFE  
                    ??_rdBlkRegCompleteHandler 0055                          ?i1_I2C_MasterClearIrq 0070  
                                      _MyDelay 0212                           _I2C_MasterDisableIrq 0DCF  
                              ??_I2C_MasterFsm 00BF            __size_of_EUSART_DefaultErrorHandler 0003  
                   __end_of_MATHACC_Initialize 1000                     ??_TMR2_SetInterruptHandler 004D  
                                      _PosUart 0031                            __end_of_I2C_DO_IDLE 0EF3  
                    __end_of_MATHACC_Error_ISR 0DAE                            __end_of_I2C_DO_RCEN 0F23  
                                      _Vitesse 0033                                ??_I2C_SetBuffer 004D  
                             ?_TMR2_WriteTimer 0070                        I2C_SetBuffer@bufferSize 004B  
                           __end_of_TMR2_Start 0DE7                                 _I2C_MasterOpen 0F88  
                               _I2C_MasterStop 0DD8                                 _I2C_Initialize 0F2D  
                            i1_I2C_MasterClose 0DB1                          ?i1_I2C_MasterSendNack 0070  
                    __size_of_I2C_DO_SEND_STOP 0008                         i1_I2C_MasterSendTxData 0E2A  
                                      __ptext1 0E7F                                        __ptext2 0E3E  
                                      __ptext3 0DE7                                        __ptext4 0DE4  
                                      __ptext5 07AE                                        __ptext6 07C3  
                                      __ptext7 0E79                                        __ptext8 0F4D  
                                      __ptext9 0386                              i1I2C_Open@address 0071  
                        ??_I2C_DO_RX_NACK_STOP 004B                              i1_I2C_MasterStart 0DB7  
                            i1_I2C_MasterWrite 0E16           __end_ofi1_I2C_SetAddressNackCallback 0F7C  
        __size_ofi1_I2C_SetAddressNackCallback 000C                   i1_I2C_SetAddressNackCallback 0F70  
                           ?i1_I2C_MasterClose 0070                          _OSCILLATOR_Initialize 0E92  
                                    _T2CONbits 001C                 __size_of_MATHACC_PIDController 000A  
                           ?i1_I2C_MasterStart 0070            __size_ofi1_I2C_DO_SEND_RESTART_READ 0004  
                           I2C_SetCallback@idx 004F                  __end_of_MATHACC_PIDController 0F19  
                     __size_of_I2C_MasterClose 0003                             ?i1_I2C_MasterWrite 0070  
                     ??_PIN_MANAGER_Initialize 004B                  I2C_CallbackReturnReset@funPtr 0054  
                                    _T2HLTbits 001D                             I2C_SetCallback@ptr 004D  
                     wr1RegCompleteHandler@ptr 0054                      I2C_Write1ByteRegister@reg 00C4  
                     __size_of_I2C_MasterStart 0003                      i1I2C_SetBuffer@bufferSize 0070  
                     __size_of_I2C_MasterWrite 0004                                      _PID1OUTHH 0599  
                                    _PID1OUTHL 0598                                      _PID1OUTLH 0597  
                                    _PID1OUTLL 0596                     __size_of_SYSTEM_Initialize 0015  
                          ??i1_I2C_MasterClose 0070                                        clrloop0 0E86  
             _I2C_CallbackReturnStop$intlevel0 0E53                   __size_ofi1_I2C_MasterSendAck 0004  
                         end_of_initialization 0055                            ??i1_I2C_MasterStart 0070  
                                    _T2RSTbits 001F                 __size_ofi1_I2C_DO_RX_NACK_STOP 0004  
                          ??i1_I2C_MasterWrite 007E                                     ?_I2C_DO_RX 0070  
                                   ?_I2C_DO_TX 0070                  __end_ofi1_I2C_DO_RX_NACK_STOP 0E0E  
        __end_of_EUSART_SetOverrunErrorHandler 0E73         __size_of_EUSART_SetOverrunErrorHandler 0006  
                _EUSART_SetOverrunErrorHandler 0E6D                      __size_of_I2C_MasterIsNack 0006  
                 __size_ofi1_I2C_MasterStartRx 0003                                     ?_I2C_Close 0070  
                       ?_rd1RegCompleteHandler 0054                              i1_I2C_SetCallback 061D  
         __size_ofi1_I2C_DO_SEND_RESTART_WRITE 0004                        __end_of_I2C_DO_TX_EMPTY 0558  
                    __size_of_I2C_MasterSetIrq 0003                          ?_I2C_MasterDisableIrq 0070  
                            _EUSART_Initialize 0466                         ?_wr1RegCompleteHandler 0054  
                           ?i1_I2C_SetCallback 0070                             ?_EUSART_Initialize 0070  
                                  _StateToggle 0032                       __size_of_I2C_SetCallback 0025  
                  ??i1_I2C_CallbackReturnReset 007A                        __end_ofi1_I2C_MasterFsm 05AC  
                      ??_I2C_Read1ByteRegister 0043                         __end_of_I2C_MasterOpen 0F94  
                       __end_of_I2C_MasterStop 0DDB                         __end_of_I2C_Initialize 0F37  
                    __end_ofi1_I2C_MasterClose 0DB4                            ??i1_I2C_SetCallback 0073  
                    __end_ofi1_I2C_MasterStart 0DBA                     i1wr1RegCompleteHandler@ptr 0079  
                    __end_ofi1_I2C_MasterWrite 0E1A                               ?i1_I2C_DO_RX_ACK 0070  
                  __end_of_TMR2_Counter8BitSet 0E43                            ??_EUSART_Initialize 004D  
                      __end_ofi1_I2C_SetBuffer 0FBC                        i1_I2C_DO_SEND_ADR_WRITE 0E8B  
                                    _PORTAbits 000C                 i1I2C_SetAddressNackCallback@cb 0075  
              __end_of_rdBlkRegCompleteHandler 06DD                           _I2C_MasterSendTxData 0E5B  
                             ??i1_I2C_DO_RESET 0070                                      _SSPDATPPS 0E21  
              __size_of_I2C_DO_RX_NACK_RESTART 0008                                      _SSPCLKPPS 0E20  
                             __CFG_FOSC$INTOSC 0000                  _I2C_DO_SEND_RESTART$intlevel0 0EBD  
                  ?_I2C_SetAddressNackCallback 0050                  ?i1_I2C_SetAddressNackCallback 0075  
                        __size_ofi1_I2C_Poller 000A                          __size_of_EUSART_Write 0008  
                   __size_of_I2C_MasterSendAck 0004                              __size_of_I2C_Open 003E  
                   __end_ofi1_I2C_DO_SEND_STOP 0E06                       ??i1_I2C_DO_SEND_ADR_READ 0070  
                                 ??_MyUART_ISR 0071                __size_of_EUSART_SetErrorHandler 0009  
                    __size_ofi1_I2C_MasterOpen 000C                     __size_of_I2C_MasterStartRx 0003  
           __size_ofi1_rdBlkRegCompleteHandler 0017                      __size_ofi1_I2C_MasterStop 0003  
                    __end_ofi1_I2C_SetCallback 0641                        TMR2_WriteTimer@timerVal 004C  
                       ?i1_I2C_DO_SEND_RESTART 0070                         ??i1_I2C_MasterClearIrq 0070  
                    __end_of_EUSART_Initialize 0499                        i1_rd2RegCompleteHandler 0FDC  
                                  _I2C_DO_IDLE 0EEA                                    _I2C_DO_RCEN 0F19  
                   rdBlkRegCompleteHandler@ptr 0054                  I2C_Write1ByteRegister@address 00C7  
                      i1_wr2RegCompleteHandler 0FBC                        ?_I2C_CallbackReturnStop 0054  
                   __end_of_PWM3_LoadDutyValue 07AE                       _I2C_DO_SEND_RESTART_READ 0EA9  
                  i1I2C_Write1ByteRegister@reg 0042                     __size_of_MATHACC_Error_ISR 0003  
                 I2C_CallbackReturnStop@funPtr 0054                                ?_I2C_MasterOpen 0070  
                   __end_ofi1_I2C_MasterIsNack 0E49                                ?_I2C_MasterStop 0070  
                              ?_I2C_Initialize 0070           __end_of_TMR2_DefaultInterruptHandler 0DA6  
        __size_of_TMR2_DefaultInterruptHandler 0001                   _TMR2_DefaultInterruptHandler 0DA5  
                      _I2C_CallbackReturnReset 0E55                       I2C_Read1ByteRegister@reg 0042  
           __end_of_EUSART_DefaultErrorHandler 0DAB                     _EUSART_DefaultErrorHandler 0DA8  
                       ??i1_I2C_MasterSendNack 0070                     __end_ofi1_I2C_MasterSetIrq 0DC9  
         __size_of_I2C_SetDataCompleteCallback 000D                                   i1_I2C_Poller 0F05  
                                 _EUSART_Write 0E99                              __size_of_TMR2_ISR 0005  
                           __end_of_MyUART_ISR 0107                     ??i1_I2C_DO_RX_NACK_RESTART 0070  
                        ?_I2C_MasterSendTxData 0070                         ?_OSCILLATOR_Initialize 0070  
                  ??_I2C_DO_SEND_RESTART_WRITE 004B                                _MATHACC_PID_ISR 0EE1  
                                ??i1_I2C_DO_RX 007A                                  ??i1_I2C_DO_TX 007A  
                          start_initialization 003A                      i1_I2C_CallbackReturnReset 0002  
              __size_of_PIN_MANAGER_Initialize 003B                                  ??i1_I2C_Close 0070  
                                ?_I2C_DO_RESET 0070   EUSART_SetRxInterruptHandler@interruptHandler 004B  
           __end_ofi1_I2C_DO_SEND_RESTART_READ 0DFA                     i1_I2C_DO_SEND_RESTART_READ 0DF6  
                      ?i1_I2C_MasterDisableIrq 0070                                    ??_I2C_DO_RX 0055  
                                  ??_I2C_DO_TX 0055                            i1I2C_SetCallback@cb 0070  
                            ??_I2C_MasterClose 004B                          __end_ofi1_I2C_DO_IDLE 0E34  
                       ??_I2C_MasterDisableIrq 004B                          __end_ofi1_I2C_DO_RCEN 0E4F  
                                  ??_I2C_Close 004B                              ??_I2C_MasterStart 004B  
                            ??_I2C_MasterWrite 0057                 __end_of_I2C_CallbackReturnStop 0E55  
                       _I2C_DO_RX_NACK_RESTART 0ED9                               ?_I2C_DO_TX_EMPTY 0070  
                           _I2C_MasterClearIrq 0DC9               __end_ofi1_I2C_MasterWaitForEvent 0E16  
               ?_EUSART_SetOverrunErrorHandler 004B              __size_ofi1_I2C_CallbackReturnStop 0002  
                     __size_of_PWM3_Initialize 000B                      ?i1_I2C_CallbackReturnStop 0079  
                   _EUSART_FramingErrorHandler 005B                                   ?_MyTimer2ISR 0070  
                       _EUSART_SetErrorHandler 0EFC                               ?i1_I2C_MasterFsm 0070  
             __end_ofi1_I2C_Write1ByteRegister 052D                                    _CCPTMRSbits 029E  
                   __size_ofi1_I2C_MasterClose 0003                      ??i1_I2C_DO_SEND_ADR_WRITE 0070  
                          ?_I2C_MasterClearIrq 0070                    __end_of_I2C_MasterGetRxData 0DE1  
                                  __pdataBANK0 005F                          __end_of_I2C_DO_RX_ACK 0ED1  
                   __size_ofi1_I2C_MasterStart 0003                     __size_ofi1_I2C_MasterWrite 0004  
                                    _StateLeds 0030                  ?_TMR2_DefaultInterruptHandler 0070  
                             _I2C_DO_SEND_STOP 0EC1                              ??_I2C_SetCallback 004E  
                             ?i1_I2C_SetBuffer 0070                            I2C_Open@returnValue 004D  
                           _I2C_MasterSendNack 0E1A                       ?_I2C_MasterEnableRestart 0070  
                       __size_of_TMR2_CallBack 000B                          _I2C_DO_SEND_ADR_WRITE 0F42  
                                    ___latbits 0002                                  __pcstackBANK0 003D  
                                __pcstackBANK1 00BD                                 ??_I2C_DO_RESET 004B  
                     __size_of_TMR2_Initialize 0015                            ?_I2C_MasterSendNack 0070  
               __end_ofi1_I2C_MasterDisableIrq 0DB7                   __end_of_I2C_DO_SEND_ADR_READ 0F88  
                         ??_I2C_MasterClearIrq 004B                    __end_of_I2C_DO_ADDRESS_NACK 0582  
                    ??i1_rd2RegCompleteHandler 007A                __size_ofi1_I2C_DO_SEND_ADR_READ 0008  
               ??i1_I2C_SetAddressNackCallback 0078                     __size_ofi1_I2C_SetCallback 0024  
                          __end_ofi1_I2C_DO_RX 03FB                      ??i1_wr2RegCompleteHandler 007A  
                          __end_ofi1_I2C_DO_TX 0305               i1I2C_SetDataCompleteCallback@ptr 0077  
                   __end_of_EUSART_Receive_ISR 0466                               _I2C_MasterIsNack 0E61  
                   __size_of_EUSART_Initialize 0033                      _I2C_DO_SEND_RESTART_WRITE 0EB1  
                          __end_ofi1_I2C_Close 0712               _EUSART_RxDefaultInterruptHandler 005D  
                             _I2C_MasterSetIrq 0DE1                                      __pnvBANK0 0057  
                                    __pnvBANK1 00CA                                       ?_MyDelay 0070  
                        _rd2RegCompleteHandler 0756                          i1_I2C_MasterGetRxData 0DC3  
                        __end_of_fsmStateTable 0684                   __end_of_EUSART_RxDataHandler 0740  
                       _PIN_MANAGER_Initialize 0386                          _wr2RegCompleteHandler 0782  
                    ??_I2C_CallbackReturnReset 0055                    __end_of_I2C_MasterOperation 06F9  
                         ??_I2C_MasterSendNack 004B                i1I2C_Write1ByteRegister@address 0045  
                     rd2RegCompleteHandler@ptr 0054                        ?i1_I2C_MasterSendTxData 0070  
                                    __ptext100 05F8                                      __ptext101 0DC6  
                                    __ptext110 0712                                      __ptext102 0E43  
                                    __ptext111 07ED                                      __ptext103 0E2A  
                                    __ptext120 0DB7                                      __ptext112 0FDC  
                                    __ptext104 0DF2                                      __ptext121 06F9  
                                    __ptext113 0FCC                                      __ptext105 0DC3  
                                    __ptext130 0DEA                                      __ptext122 0DB4  
                                    __ptext114 0FBC                                      __ptext106 0DEE  
                                    __ptext131 0DA4                                      __ptext123 0DB1  
                                    __ptext115 0F58                                      __ptext107 0DC0  
                                    __ptext132 0DA8                                      __ptext124 0DAE  
                                    __ptext116 061D                                      __ptext108 0002  
                                    __ptext133 0729                                      __ptext125 0432  
                                    __ptext117 0FAE                                      __ptext109 0DA6  
                                    __ptext126 0059                                      __ptext118 0DBD  
                                    __ptext127 0E99                                      __ptext119 0DBA  
                                    __ptext128 0EE1                                      __ptext129 0DAB  
                      __end_of_MATHACC_PID_ISR 0EEA                            i1_I2C_MasterSendAck 0DF2  
                                 _eusartRxHead 003C                                   _eusartRxTail 003B  
                       ??_I2C_MasterSendTxData 004B                   ??_INTERRUPT_InterruptManager 004A  
                          i1_I2C_MasterStartRx 0DC0                                      __pswtext1 0800  
                 __size_of_I2C_DO_SEND_RESTART 0008                                       _BAUD1CON 019F  
                           _MATHACC_Initialize 0FEC                          i1_I2C_DO_ADDRESS_NACK 0641  
                      I2C_MasterOperation@read 00C2                                       _I2C_Open 0348  
                     ?i1_rd1RegCompleteHandler 0079                       ?i1_wr1RegCompleteHandler 0079  
                          ?_MATHACC_Initialize 0070                           ?i1_I2C_MasterSendAck 0070  
                                     _T2CLKCON 001E                        ??_rd1RegCompleteHandler 0055  
                             i1_I2C_MasterOpen 0F64                               i1_I2C_MasterStop 0DBD  
                               _eusartRxBuffer 0028                   i1rdBlkRegCompleteHandler@ptr 0079  
                      ??_wr1RegCompleteHandler 0055                           ?i1_I2C_MasterStartRx 0070  
                   i1rd2RegCompleteHandler@ptr 0079                                       _PID1SETH 058D  
                                     _PID1SETL 058C                      i1I2C_MasterOperation@read 0040  
                        i1_I2C_MasterOperation 06A2                                       _PID1OUTU 059A  
                                     _LATAbits 010C         EUSART_SetErrorHandler@interruptHandler 004B  
                                     _LATCbits 010E                                      clear_ram0 0E85  
                                _TMR2_CallBack 0F37                                       _PIE1bits 0090  
                                     _PIE5bits 0094                              _eusartRxLastError 0039  
                     __size_of_TMR2_StartTimer 0003            __size_of_INTERRUPT_InterruptManager 0034  
                                     _PIR1bits 0010                ??_EUSART_SetFramingErrorHandler 004D  
                                     _PIR2bits 0011                                       _PIR5bits 0014  
               __end_ofi1_I2C_MasterSendTxData 0E2F                          __end_of_I2C_MasterFsm 05D3  
                         ??_MATHACC_Initialize 004B                    __end_of_I2C_DO_RX_NACK_STOP 0ED9  
                         __CFG_WDTCPS$WDTCPS1F 0000                                       _SSP1CON1 0215  
                                     _SSP1CON2 0216      __end_of_EUSART_DefaultOverrunErrorHandler 0DEE  
   __size_of_EUSART_DefaultOverrunErrorHandler 0004            ??_EUSART_DefaultOverrunErrorHandler 0070  
           ?_EUSART_DefaultOverrunErrorHandler 0070              _EUSART_DefaultOverrunErrorHandler 0DEA  
                       i1_I2C_DO_SEND_ADR_READ 0EA1                                       _TMR2_ISR 0E39  
              __end_of_I2C_MasterEnableRestart 0DD8                                       _SSP1STAT 0214  
                     i1_I2C_MasterWaitForEvent 0E12                 __size_of_I2C_Read1ByteRegister 0032  
                __end_of_I2C_Read1ByteRegister 04FE                          __end_of_I2C_SetBuffer 07ED  
          __end_ofi1_I2C_DO_SEND_RESTART_WRITE 0DFE                    i1_I2C_DO_SEND_RESTART_WRITE 0DFA  
                            ??_PWM3_Initialize 004B                       i1_I2C_Write1ByteRegister 04FE  
                       ?_I2C_DO_SEND_ADR_WRITE 0070                       I2C_MasterSendTxData@data 004B  
                                     MyDelay@i 0050                 ??_TMR2_DefaultInterruptHandler 0070  
            __size_of_TMR2_SetInterruptHandler 0006                       __size_of_TMR2_WriteTimer 0006  
                                  i1_I2C_DO_RX 03C1                                    i1_I2C_DO_TX 02BA  
                    ?_TMR2_SetInterruptHandler 004B             __size_ofi1_I2C_MasterEnableRestart 0003  
                     wr2RegCompleteHandler@ptr 0054                     ?i1_I2C_MasterEnableRestart 0070  
                                  i1_I2C_Close 06F9                        ??i1_I2C_DO_SEND_RESTART 0070  
                        ??i1_I2C_MasterSendAck 0070                          _MATHACC_PIDController 0F0F  
                   ??_I2C_DO_SEND_RESTART_READ 004B                       ?_rdBlkRegCompleteHandler 0054  
                                   _I2C_Poller 0F23                          ??i1_I2C_MasterStartRx 0070  
                                   _I2C_Status 00A0                                   ?_I2C_DO_IDLE 0070  
                                 ?_I2C_DO_RCEN 0070                              ??_TMR2_Initialize 004D  
                       ?_rd2RegCompleteHandler 0054                                 ?_TMR2_CallBack 0070  
                       ?i1_I2C_MasterGetRxData 0070                          i1_I2C_DO_RX_NACK_STOP 0E0A  
                             ??_I2C_MasterOpen 004B                      _I2C_DO_TX_EMPTY$intlevel0 0531  
                       ?_wr2RegCompleteHandler 0054                               ??_I2C_MasterStop 004B  
                     ??_I2C_MasterWaitForEvent 004B                               ??_I2C_Initialize 004B  
              _wr2RegCompleteHandler$intlevel0 0786                _rd2RegCompleteHandler$intlevel0 075A  
                             __size_of_MyDelay 0058                             i1_I2C_DO_SEND_STOP 0E02  
                        i1I2C_SetBuffer@buffer 0073                           __end_of_I2C_DO_RESET 0EFC  
                     ??_I2C_Write1ByteRegister 00C6                     i1I2C_MasterSendTxData@data 0070  
                                     _StateBat 005F                        ??_OSCILLATOR_Initialize 004B  
                          _EUSART_ErrorHandler 00CA                               ?_MATHACC_PID_ISR 0070  
                         _I2C_DO_SEND_ADR_READ 0F7C                           __size_of_MyTimer2ISR 00A0  
                  ?_EUSART_DefaultErrorHandler 0070               i1I2C_MasterOperation@returnValue 0041  
              __end_ofi1_rd1RegCompleteHandler 0FDC                     i1wr2RegCompleteHandler@ptr 0079  
                          ?i1_I2C_DO_SEND_STOP 0070              _I2C_CallbackReturnReset$intlevel0 0E59  
                       ?i1_I2C_DO_ADDRESS_NACK 0070               I2C_Read1ByteRegister@returnValue 0045  
              __end_ofi1_wr1RegCompleteHandler 07FD                             _PWM3_LoadDutyValue 0798  
                              _I2C_MasterClose 0DCC                  I2C_SetAddressNackCallback@ptr 0052  
                              I2C_Open@address 004C                                _I2C_MasterStart 0DD2  
                              _I2C_MasterWrite 0E26                             i1_I2C_MasterIsNack 0E43  
                         _EUSART_RxDataHandler 0729                   __size_of_TMR2_Counter8BitSet 0005  
                     __size_ofi1_I2C_DO_RX_ACK 0004                                       __ptext10 0E92  
                                     __ptext11 0FEC                                       __ptext20 0FA1  
                                     __ptext12 0F2D                                       __ptext21 0348  
                                     __ptext13 0466                                       __ptext30 0ED9  
                                     __ptext22 0F88                                       __ptext14 0E73  
                                     __ptext31 0ED1                                       __ptext23 0E26  
                                     __ptext15 0E6D                                       __ptext40 0F42  
                                     __ptext32 0EC9                                       __ptext24 06DD  
                                     __ptext16 0E67                                       __ptext41 0F7C  
                                     __ptext33 0EC1                                       __ptext25 0F23  
                                     __ptext17 0EFC                                       __ptext50 0DDB  
                                     __ptext42 0EEA                                       __ptext34 0EB9  
                                     __ptext26 0E22                                       __ptext18 0212  
                                     __ptext51 0E55                                       __ptext43 052D  
                                     __ptext35 0EB1                                       __ptext27 05AC  
                                     __ptext19 0499                                       __ptext60 07D8  
                                     __ptext52 0E4F                                       __ptext44 0DE1  
                                     __ptext36 0EA9                                       __ptext28 0558  
                                     __ptext61 0DD8                                       __ptext53 06C0  
                                     __ptext45 0E61                                       __ptext37 0F19  
                                     __ptext29 0EF3                                       __ptext70 0F37  
                                     __ptext62 0DD5                                       __ptext54 0740  
                                     __ptext46 0E5B                                       __ptext38 0305  
                                     __ptext71 0107                                       __ptext63 0DD2  
                                     __ptext55 0756                                       __ptext47 0E1E  
                                     __ptext39 026A                                       __ptext80 0E16  
                                     __ptext72 0DA5                                       __ptext64 0684  
                                     __ptext56 076C                                       __ptext48 0DDE  
                                     __ptext81 06A2                                       __ptext73 04FE  
                                     __ptext65 0DCF                                       __ptext57 0782  
                                     __ptext49 0E1A                                       __ptext90 0E02  
                                     __ptext82 0F05                                       __ptext74 0798  
                                     __ptext66 0DCC                                       __ptext58 0F94  
                          ?_PWM3_LoadDutyValue 0070                                       __ptext91 0DFE  
                                     __ptext83 0E12                                       __ptext75 0F0F  
                                     __ptext67 0DC9                                       __ptext59 05D3  
                                     __ptext92 0DFA                                       __ptext84 0582  
                                     __ptext76 04CC                                       __ptext93 0DF6  
                                     __ptext85 0641                                       __ptext77 0F70  
                                     __ptext69 0E39                                       __ptext94 0E49  
                                     __ptext86 0E34                                       __ptext78 03FB  
                                     __ptext95 03C1                                       __ptext87 0E0E  
                                     __ptext79 0F64                                       __ptext96 02BA  
                                     __ptext88 0E0A                                       __ptext97 0E8B  
                                     __ptext89 0E06                                       __ptext98 0EA1  
                                     __ptext99 0E2F                             i1_I2C_MasterSetIrq 0DC6  
                                 _SSP1CON1bits 0215                                   _SSP1CON2bits 0216  
            __end_ofi1_I2C_MasterEnableRestart 0DBD               __end_ofi1_I2C_CallbackReturnStop 0DA8  
          __end_of_I2C_SetDataCompleteCallback 0FA1                    _I2C_SetDataCompleteCallback 0F94  
                      ?_I2C_DO_RX_NACK_RESTART 0070                    ?i1_I2C_DO_SEND_RESTART_READ 0070  
                       ?i1_I2C_MasterOperation 0070                           ??i1_I2C_DO_SEND_STOP 0070  
                          ?i1_I2C_MasterIsNack 0070                       __end_of_I2C_DO_SEND_STOP 0EC9  
                                __size_of_main 006B                            ?i1_I2C_MasterSetIrq 0070  
                __size_ofi1_I2C_MasterClearIrq 0003               _I2C_DO_RX_NACK_RESTART$intlevel0 0EDD  
                         __CFG_WDTCWS$WDTCWSSW 0000                        ?_EUSART_SetErrorHandler 004B  
                              _I2C_SetCallback 05D3                  ??_I2C_SetDataCompleteCallback 0053  
                                   _RC1STAbits 019D                     I2C_Write1ByteRegister@data 00C5  
EUSART_SetOverrunErrorHandler@interruptHandler 004B                           ??_PWM3_LoadDutyValue 0072  
                                     int$flags 007E                          ?_I2C_DO_SEND_ADR_READ 0070  
                            ??_TMR2_StartTimer 004B             __end_of_INTERRUPT_InterruptManager 0038  
                   _INTERRUPT_InterruptManager 0004          __end_of_EUSART_SetFramingErrorHandler 0E6D  
       __size_of_EUSART_SetFramingErrorHandler 0006                  _EUSART_SetFramingErrorHandler 0E67  
                                 _SSP1STATbits 0214                           ??i1_I2C_MasterIsNack 0070  
                     __end_of_I2C_MasterIsNack 0E67                  __size_ofi1_I2C_MasterSendNack 0004  
                         ??i1_I2C_MasterSetIrq 0070                                     i1_I2C_Open 03FB  
                     __end_of_I2C_MasterSetIrq 0DE4                                     _INTCONbits 000B  
                        ?_EUSART_RxDataHandler 0070                         ?_MATHACC_PIDController 0070  
               __end_of_I2C_DO_RX_NACK_RESTART 0EE1                    TMR2_Counter8BitSet@timerVal 004B  
                                     intlevel1 0000                                    ?_I2C_Poller 0070  
                              ??_TMR2_CallBack 007E                              ??_TMR2_WriteTimer 004C  
                      __size_ofi1_I2C_DO_RESET 0005               __size_of_I2C_MasterEnableRestart 0003  
            __size_ofi1_I2C_DO_RX_NACK_RESTART 0004                         ?i1_I2C_DO_RX_NACK_STOP 0070  
                    ?i1_I2C_DO_RX_NACK_RESTART 0070                        ?_PIN_MANAGER_Initialize 0070  
               __end_of_EUSART_SetErrorHandler 0F05                              __CFG_CLKOUTEN$OFF 0000  
                          _I2C_DO_SEND_RESTART 0EB9                     ?i1_rdBlkRegCompleteHandler 0079  
                __size_of_I2C_MasterDisableIrq 0003                              i1_I2C_DO_TX_EMPTY 05F8  
         __end_of_EUSART_SetRxInterruptHandler 0E79          __size_of_EUSART_SetRxInterruptHandler 0006  
                 _EUSART_SetRxInterruptHandler 0E73                __size_of_I2C_MasterWaitForEvent 0004  
                           ?i1_I2C_DO_TX_EMPTY 0070                __size_of_I2C_Write1ByteRegister 0033  
                           _EUSART_Receive_ISR 0432  EUSART_SetFramingErrorHandler@interruptHandler 004B  
                      __end_of_I2C_MasterClose 0DCF                       __size_of_I2C_DO_TX_EMPTY 002B  
                     __end_ofi1_I2C_MasterOpen 0F70                    PWM3_LoadDutyValue@dutyValue 0070  
                     __end_ofi1_I2C_MasterStop 0DC0                        __end_of_I2C_MasterStart 0DD5  
                      __end_of_I2C_MasterWrite 0E2A                                  __pstringtext1 0664  
                          ??i1_I2C_DO_TX_EMPTY 007A                           ?_I2C_DO_SEND_RESTART 0070  
                       __size_ofi1_I2C_DO_IDLE 0005                            ?_EUSART_Receive_ISR 0070  
                       __size_ofi1_I2C_DO_RCEN 0006                       __size_ofi1_I2C_MasterFsm 002A  
                 __size_of_I2C_MasterGetRxData 0003                          _I2C_DO_IDLE$intlevel0 0EEE  
                                   _TX1STAbits 019E                       __size_ofi1_I2C_SetBuffer 000E  
                                   _TMR2_Start 0DE4                i1I2C_SetAddressNackCallback@ptr 0077  
                  __size_of_I2C_MasterClearIrq 0003                             EUSART_Write@txData 0070  
                      __end_of_I2C_SetCallback 05F8                 __end_of_PIN_MANAGER_Initialize 03C1  
               __size_of_rd1RegCompleteHandler 0016                  __end_of_rd1RegCompleteHandler 0782  
                       __size_of_I2C_DO_RX_ACK 0008                              ??i1_I2C_DO_RX_ACK 0070  
                    __end_ofi1_I2C_DO_TX_EMPTY 061D                 __size_of_wr1RegCompleteHandler 0016  
              i1I2C_CallbackReturnReset@funPtr 0079                           ??_EUSART_Receive_ISR 0071  
                     i1_I2C_CallbackReturnStop 0DA6                          __size_of_I2C_DO_RESET 0009  
             __size_ofi1_rd1RegCompleteHandler 0010                  __end_of_wr1RegCompleteHandler 0756  
                   ??i1_I2C_MasterWaitForEvent 0070                          _TMR2_InterruptHandler 0057  
                 __size_of_I2C_DO_ADDRESS_NACK 002A                           __size_of_I2C_DO_IDLE 0009  
                         __size_of_I2C_DO_RCEN 000A              __end_ofi1_rdBlkRegCompleteHandler 0729  
                              _PWM3_Initialize 0F4D               __size_ofi1_wr1RegCompleteHandler 0010  
                     ?i1_I2C_DO_SEND_ADR_WRITE 0070                        ?i1_I2C_DO_SEND_ADR_READ 0070  
                           __size_of_I2C_DO_RX 0043                             __size_of_I2C_DO_TX 0050  
                   ??i1_I2C_Write1ByteRegister 0044  
